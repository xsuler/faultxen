36875                                           19 ceiling result
36875                                           19 ceiling result
36875                                           19 ceiling result
36875                                           19 ceiling result
00001                                           ! 1 
00002                                           ! 1 # 1 "_vgabios_.c"
00003                                           ! 1 typedef unsigned char Bit8u;
00004                                           !BCC_EOS
00005                                           ! 2 typedef unsigned short Bit16u;
00006                                           !BCC_EOS
00007                                           ! 3 typedef unsigned long Bit32u;
00008                                           !BCC_EOS
00009                                           ! 4 typedef unsigned short Boolean;
00010                                           !BCC_EOS
00011                                           ! 5 void dispi_set_enable(enable);
00012                                           !BCC_EOS
00013                                           ! 6 Boolean vbe_has_vbe_display();
00014                                           !BCC_EOS
00015                                           ! 7 void vbe_biosfn_return_controller_information(AX, ES, DI);
00016                                           !BCC_EOS
00017                                           ! 8 void vbe_biosfn_return_mode_information(AX, CX, ES, DI);
00018                                           !BCC_EOS
00019                                           ! 9 void vbe_biosfn_set_mode(AX, BX, ES, DI);
00020                                           !BCC_EOS
00021                                           ! 10 void vbe_biosfn_save_restore_state(AX, CX, DX, ES, BX);
00022                                           !BCC_EOS
00023                                           ! 11 void vbe_biosfn_set_get_palette_data(AX);
00024                                           !BCC_EOS
00025                                           ! 12 void vbe_biosfn_return_protected_mode_interface(AX);
00026                                           !BCC_EOS
00027                                           ! 13 typedef struct VbeInfoBlock
00028                                           ! 14 {
00029                                           ! 15    Bit8u VbeSignature[4];
00030                                           !BCC_EOS
00031                                           ! 16    Bit16u VbeVersion;
00032                                           !BCC_EOS
00033                                           ! 17    Bit16u OemStringPtr_Off;
00034                                           !BCC_EOS
00035                                           ! 18    Bit16u OemStringPtr_Seg;
00036                                           !BCC_EOS
00037                                           ! 19    Bit8u Capabilities[4];
00038                                           !BCC_EOS
00039                                           ! 20    Bit16u VideoModePtr_Off;
00040                                           !BCC_EOS
00041                                           ! 21    Bit16u VideoModePtr_Seg;
00042                                           !BCC_EOS
00043                                           ! 22    Bit16u TotalMemory;
00044                                           !BCC_EOS
00045                                           ! 23    Bit16u OemSoftwareRev;
00046                                           !BCC_EOS
00047                                           ! 24    Bit16u OemVendorNamePtr_Off;
00048                                           !BCC_EOS
00049                                           ! 25    Bit16u OemVendorNamePtr_Seg;
00050                                           !BCC_EOS
00051                                           ! 26    Bit16u OemProductNamePtr_Off;
00052                                           !BCC_EOS
00053                                           ! 27    Bit16u OemProductNamePtr_Seg;
00054                                           !BCC_EOS
00055                                           ! 28    Bit16u OemProductRevPtr_Off;
00056                                           !BCC_EOS
00057                                           ! 29    Bit16u OemProductRevPtr_Seg;
00058                                           !BCC_EOS
00059                                           ! 30    Bit16u Reserved[111];
00060                                           !BCC_EOS
00061                                           ! 31    Bit8u OemData[256];
00062                                           !BCC_EOS
00063                                           ! 32 } VbeInfoBlock;
00064                                           !BCC_EOS
00065                                           ! 33 typedef struct ModeInfoBlockCompact
00066                                           ! 34 {
00067                                           ! 35    Bit16u ModeAttributes;
00068                                           !BCC_EOS
00069                                           ! 36    Bit8u WinAAttributes;
00070                                           !BCC_EOS
00071                                           ! 37    Bit8u WinBAttributes;
00072                                           !BCC_EOS
00073                                           ! 38    Bit16u WinGranularity;
00074                                           !BCC_EOS
00075                                           ! 39    Bit16u WinSize;
00076                                           !BCC_EOS
00077                                           ! 40    Bit16u WinASegment;
00078                                           !BCC_EOS
00079                                           ! 41    Bit16u WinBSegment;
00080                                           !BCC_EOS
00081                                           ! 42    Bit32u WinFuncPtr;
00082                                           !BCC_EOS
00083                                           ! 43    Bit16u BytesPerScanLine;
00084                                           !BCC_EOS
00085                                           ! 44    Bit16u XResolution;
00086                                           !BCC_EOS
00087                                           ! 45    Bit16u YResolution;
00088                                           !BCC_EOS
00089                                           ! 46    Bit8u XCharSize;
00090                                           !BCC_EOS
00091                                           ! 47    Bit8u YCharSize;
00092                                           !BCC_EOS
00093                                           ! 48    Bit8u NumberOfPlanes;
00094                                           !BCC_EOS
00095                                           ! 49    Bit8u BitsPerPixel;
00096                                           !BCC_EOS
00097                                           ! 50    Bit8u NumberOfBanks;
00098                                           !BCC_EOS
00099                                           ! 51    Bit8u MemoryModel;
00100                                           !BCC_EOS
00101                                           ! 52    Bit8u BankSize;
00102                                           !BCC_EOS
00103                                           ! 53    Bit8u NumberOfImagePages;
00104                                           !BCC_EOS
00105                                           ! 54    Bit8u Reserved_page;
00106                                           !BCC_EOS
00107                                           ! 55    Bit8u RedMaskSize;
00108                                           !BCC_EOS
00109                                           ! 56    Bit8u RedFieldPosition;
00110                                           !BCC_EOS
00111                                           ! 57    Bit8u GreenMaskSize;
00112                                           !BCC_EOS
00113                                           ! 58    Bit8u GreenFieldPosition;
00114                                           !BCC_EOS
00115                                           ! 59    Bit8u BlueMaskSize;
00116                                           !BCC_EOS
00117                                           ! 60    Bit8u BlueFieldPosition;
00118                                           !BCC_EOS
00119                                           ! 61    Bit8u RsvdMaskSize;
00120                                           !BCC_EOS
00121                                           ! 62    Bit8u RsvdFieldPosition;
00122                                           !BCC_EOS
00123                                           ! 63    Bit8u DirectColorModeInfo;
00124                                           !BCC_EOS
00125                                           ! 64    Bit32u PhysBasePtr;
00126                                           !BCC_EOS
00127                                           ! 65    Bit32u OffScreenMemOffset;
00128                                           !BCC_EOS
00129                                           ! 66    Bit16u OffScreenMemSize;
00130                                           !BCC_EOS
00131                                           ! 67    Bit16u LinBytesPerScanLine;
00132                                           !BCC_EOS
00133                                           ! 68    Bit8u BnkNumberOfPages;
00134                                           !BCC_EOS
00135                                           ! 69    Bit8u LinNumberOfPages;
00136                                           !BCC_EOS
00137                                           ! 70    Bit8u LinRedMaskSize;
00138                                           !BCC_EOS
00139                                           ! 71    Bit8u LinRedFieldPosition;
00140                                           !BCC_EOS
00141                                           ! 72    Bit8u LinGreenMaskSize;
00142                                           !BCC_EOS
00143                                           ! 73    Bit8u LinGreenFieldPos
00144                                           ! 73 ition;
00145                                           !BCC_EOS
00146                                           ! 74    Bit8u LinBlueMaskSize;
00147                                           !BCC_EOS
00148                                           ! 75    Bit8u LinBlueFieldPosition;
00149                                           !BCC_EOS
00150                                           ! 76    Bit8u LinRsvdMaskSize;
00151                                           !BCC_EOS
00152                                           ! 77    Bit8u LinRsvdFieldPosition;
00153                                           !BCC_EOS
00154                                           ! 78    Bit32u MaxPixelClock;
00155                                           !BCC_EOS
00156                                           ! 79 } ModeInfoBlockCompact;
00157                                           !BCC_EOS
00158                                           ! 80 typedef struct ModeInfoBlock
00159                                           ! 81 {
00160                                           ! 82    Bit16u ModeAttributes;
00161                                           !BCC_EOS
00162                                           ! 83    Bit8u WinAAttributes;
00163                                           !BCC_EOS
00164                                           ! 84    Bit8u WinBAttributes;
00165                                           !BCC_EOS
00166                                           ! 85    Bit16u WinGranularity;
00167                                           !BCC_EOS
00168                                           ! 86    Bit16u WinSize;
00169                                           !BCC_EOS
00170                                           ! 87    Bit16u WinASegment;
00171                                           !BCC_EOS
00172                                           ! 88    Bit16u WinBSegment;
00173                                           !BCC_EOS
00174                                           ! 89    Bit32u WinFuncPtr;
00175                                           !BCC_EOS
00176                                           ! 90    Bit16u BytesPerScanLine;
00177                                           !BCC_EOS
00178                                           ! 91    Bit16u XResolution;
00179                                           !BCC_EOS
00180                                           ! 92    Bit16u YResolution;
00181                                           !BCC_EOS
00182                                           ! 93    Bit8u XCharSize;
00183                                           !BCC_EOS
00184                                           ! 94    Bit8u YCharSize;
00185                                           !BCC_EOS
00186                                           ! 95    Bit8u NumberOfPlanes;
00187                                           !BCC_EOS
00188                                           ! 96    Bit8u BitsPerPixel;
00189                                           !BCC_EOS
00190                                           ! 97    Bit8u NumberOfBanks;
00191                                           !BCC_EOS
00192                                           ! 98    Bit8u MemoryModel;
00193                                           !BCC_EOS
00194                                           ! 99    Bit8u BankSize;
00195                                           !BCC_EOS
00196                                           ! 100    Bit8u NumberOfImagePages;
00197                                           !BCC_EOS
00198                                           ! 101    Bit8u Reserved_page;
00199                                           !BCC_EOS
00200                                           ! 102    Bit8u RedMaskSize;
00201                                           !BCC_EOS
00202                                           ! 103    Bit8u RedFieldPosition;
00203                                           !BCC_EOS
00204                                           ! 104    Bit8u GreenMaskSize;
00205                                           !BCC_EOS
00206                                           ! 105    Bit8u GreenFieldPosition;
00207                                           !BCC_EOS
00208                                           ! 106    Bit8u BlueMaskSize;
00209                                           !BCC_EOS
00210                                           ! 107    Bit8u BlueFieldPosition;
00211                                           !BCC_EOS
00212                                           ! 108    Bit8u RsvdMaskSize;
00213                                           !BCC_EOS
00214                                           ! 109    Bit8u RsvdFieldPosition;
00215                                           !BCC_EOS
00216                                           ! 110    Bit8u DirectColorModeInfo;
00217                                           !BCC_EOS
00218                                           ! 111    Bit32u PhysBasePtr;
00219                                           !BCC_EOS
00220                                           ! 112    Bit32u OffScreenMemOffset;
00221                                           !BCC_EOS
00222                                           ! 113    Bit16u OffScreenMemSize;
00223                                           !BCC_EOS
00224                                           ! 114    Bit16u LinBytesPerScanLine;
00225                                           !BCC_EOS
00226                                           ! 115    Bit8u BnkNumberOfPages;
00227                                           !BCC_EOS
00228                                           ! 116    Bit8u LinNumberOfPages;
00229                                           !BCC_EOS
00230                                           ! 117    Bit8u LinRedMaskSize;
00231                                           !BCC_EOS
00232                                           ! 118    Bit8u LinRedFieldPosition;
00233                                           !BCC_EOS
00234                                           ! 119    Bit8u LinGreenMaskSize;
00235                                           !BCC_EOS
00236                                           ! 120    Bit8u LinGreenFieldPosition;
00237                                           !BCC_EOS
00238                                           ! 121    Bit8u LinBlueMaskSize;
00239                                           !BCC_EOS
00240                                           ! 122    Bit8u LinBlueFieldPosition;
00241                                           !BCC_EOS
00242                                           ! 123    Bit8u LinRsvdMaskSize;
00243                                           !BCC_EOS
00244                                           ! 124    Bit8u LinRsvdFieldPosition;
00245                                           !BCC_EOS
00246                                           ! 125    Bit32u MaxPixelClock;
00247                                           !BCC_EOS
00248                                           ! 126    Bit8u Reserved[189];
00249                                           !BCC_EOS
00250                                           ! 127 } ModeInfoBlock;
00251                                           !BCC_EOS
00252                                           ! 128 typedef struct ModeInfoListItem
00253                                           ! 129 {
00254                                           ! 130   Bit16u mode;
00255                                           !BCC_EOS
00256                                           ! 131   ModeInfoBlockCompact info;
00257                                           !BCC_EOS
00258                                           ! 132 } ModeInfoListItem;
00259                                           !BCC_EOS
00260                                           ! 133 static Bit8u read_byte();
00261                                           !BCC_EOS
00262                                           ! 134 static Bit16u read_word();
00263                                           !BCC_EOS
00264                                           ! 135 static void write_byte();
00265                                           !BCC_EOS
00266                                           ! 136 static void write_word();
00267                                           !BCC_EOS
00268                                           ! 137 static Bit8u inb();
00269                                           !BCC_EOS
00270                                           ! 138 static Bit16u inw();
00271                                           !BCC_EOS
00272                                           ! 139 static void outb();
00273                                           !BCC_EOS
00274                                           ! 140 static void outw();
00275                                           !BCC_EOS
00276                                           ! 141 static Bit16u get_SS();
00277                                           !BCC_EOS
00278                                           ! 142 static void printf();
00279                                           !BCC_EOS
00280                                           ! 143 static void unimplemented();
00281                                           !BCC_EOS
00282                                           ! 144 static void unknown();
00283                                           !BCC_EOS
00284                                           ! 145 static Bit8u find_vga_entry();
00285                                           !BCC_EOS
00286                                           ! 146 static void memsetb();
00287                                           !BCC_EOS
00288                                           ! 147 static void memsetw();
00289                                           !BCC_EOS
00290                                           ! 148 static void memcpyb();
00291                                           !BCC_EOS
00292                                           ! 149 static void memcpyw();
00293                                           !BCC_EOS
00294                                           ! 150 static void biosfn_set_video_mode();
00295                                           !BCC_EOS
00296                                           ! 151 static void biosfn_set_cursor_shape();
00297                                           !BCC_EOS
00298                                           ! 152 static void biosfn_set_cursor_pos();
00299                                           !BCC_EOS
00300                                           ! 153 static void biosfn_get_cursor_pos();
00301                                           !BCC_EOS
00302                                           ! 154 static void biosfn_set_active
00303                                           ! 154 _page();
00304                                           !BCC_EOS
00305                                           ! 155 static void biosfn_scroll();
00306                                           !BCC_EOS
00307                                           ! 156 static void biosfn_read_char_attr();
00308                                           !BCC_EOS
00309                                           ! 157 static void biosfn_write_char_attr();
00310                                           !BCC_EOS
00311                                           ! 158 static void biosfn_write_char_only();
00312                                           !BCC_EOS
00313                                           ! 159 static void biosfn_write_pixel();
00314                                           !BCC_EOS
00315                                           ! 160 static void biosfn_read_pixel();
00316                                           !BCC_EOS
00317                                           ! 161 static void biosfn_write_teletype();
00318                                           !BCC_EOS
00319                                           ! 162 static void biosfn_perform_gray_scale_summing();
00320                                           !BCC_EOS
00321                                           ! 163 static void biosfn_load_text_user_pat();
00322                                           !BCC_EOS
00323                                           ! 164 static void biosfn_load_text_8_14_pat();
00324                                           !BCC_EOS
00325                                           ! 165 static void biosfn_load_text_8_8_pat();
00326                                           !BCC_EOS
00327                                           ! 166 static void biosfn_load_text_8_16_pat();
00328                                           !BCC_EOS
00329                                           ! 167 static void biosfn_load_gfx_8_8_chars();
00330                                           !BCC_EOS
00331                                           ! 168 static void biosfn_load_gfx_user_chars();
00332                                           !BCC_EOS
00333                                           ! 169 static void biosfn_load_gfx_8_14_chars();
00334                                           !BCC_EOS
00335                                           ! 170 static void biosfn_load_gfx_8_8_dd_chars();
00336                                           !BCC_EOS
00337                                           ! 171 static void biosfn_load_gfx_8_16_chars();
00338                                           !BCC_EOS
00339                                           ! 172 static void biosfn_get_font_info();
00340                                           !BCC_EOS
00341                                           ! 173 static void biosfn_alternate_prtsc();
00342                                           !BCC_EOS
00343                                           ! 174 static void biosfn_switch_video_interface();
00344                                           !BCC_EOS
00345                                           ! 175 static void biosfn_enable_video_refresh_control();
00346                                           !BCC_EOS
00347                                           ! 176 static void biosfn_write_string();
00348                                           !BCC_EOS
00349                                           ! 177 static void biosfn_read_state_info();
00350                                           !BCC_EOS
00351                                           ! 178 static void biosfn_read_video_state_size();
00352                                           !BCC_EOS
00353                                           ! 179 static Bit16u biosfn_save_video_state();
00354                                           !BCC_EOS
00355                                           ! 180 static Bit16u biosfn_restore_video_state();
00356                                           !BCC_EOS
00357                                           ! 181 extern Bit8u video_save_pointer_table[];
00358                                           !BCC_EOS
00359                                           ! 182 #asm
00360                                           !BCC_ASM
00361                                           MACRO SET_INT_VECTOR
00362                                             push ds
00363                                             xor ax, ax
00364                                             mov ds, ax
00365                                             mov ax, ?3
00366                                             mov ?1*4, ax
00367                                             mov ax, ?2
00368                                             mov ?1*4+2, ax
00369                                             pop ds
00370                                           MEND
00371                                           ! 193 endasm
00372                                           !BCC_ENDASM
00373                                           ! 194 #asm
00374                                           !BCC_ASM
00375                                           
00376 0000                                      .rom
00377 0000                                      .org 0
00378                                           use16 386
00379                       00000000            vgabios_start:
00380 0000                        55            .byte 0x55, 0xaa
00381 0002                        40            .byte 0x40
00382                       00000003            vgabios_entry_point:
00383 0003           E9         0103              jmp vgabios_init_func
00384 001E                                      .org 0x1e
00385 001E                        49            .ascii "IBM"
00386 0021                        00            .byte 0x00
00387                       00000022            vgabios_name:
00388 0022                        50            .ascii "Plex86/Bochs VGABios"
00389 0036                        20            .ascii " "
00390 0037                        00            .byte 0x00
00391                       00000038            vgabios_version:
00392 0038                        63            .ascii "current-cvs"
00393 0043                        20            .ascii " "
00394                       00000044            vgabios_date:
00395 0044                        30            .ascii "06 May 2020"
00396 004F                        0A            .byte 0x0a,0x0d
00397 0051                        00            .byte 0x00
00398                       00000052            vgabios_copyright:
00399 0052                        28            .ascii "(C) 2008 the LGPL VGABios developers Team"
00400 007B                        0A            .byte 0x0a,0x0d
00401 007D                        00            .byte 0x00
00402                       0000007E            vgabios_license:
00403 007E                        54            .ascii "This VGA/VBE Bios is released under the GNU LGPL"
00404 00AE                        0A            .byte 0x0a,0x0d
00405 00B0                        0A            .byte 0x0a,0x0d
00406 00B2                        00            .byte 0x00
00407                       000000B3            vgabios_website:
00408 00B3                        50            .ascii "Please visit :"
00409 00C1                        0A            .byte 0x0a,0x0d
00410                                           ;;.ascii " . http://www.plex86.org"
00411                                           ;;.byte 0x0a,0x0d
00412 00C3                        20            .ascii " . http://bochs.sourceforge.net"
00413 00E2                        0A            .byte 0x0a,0x0d
00414 00E4                        20            .ascii " . http://www.nongnu.org/vgabios"
00415 0104                        0A            .byte 0x0a,0x0d
00416 0106                        0A            .byte 0x0a,0x0d
00417 0108                        00            .byte 0x00
00418                                           ;; ============================================================================================
00419                                           ;;
00420                                           ;; Init Entry point
00421                                           ;;
00422                                           ;; ============================================================================================
00423                       00000109            vgabios_init_func:
00424                                           ;; init vga card
00425 0109           E8         3457              call init_vga_card
00426                                           ;; init basic bios vars
00427 010C           E8         34B3              call init_bios_area
00428                                           ;; init vbe functions
00429 010F           E8         920D              call vbe_init
00430                                           ;; set int10 vect
00431                                             SET_INT_VECTOR(0x10, #0xC000, #vgabios_int10_handler)
 +a   0112           1E                           push ds
 +a   0113           31C0                         xor ax, ax
 +a   0115           8ED8                         mov ds, ax
 +a   0117           B8                   0133    mov ax,  #vgabios_int10_handler
 +a   011A           A3         0040              mov 0x10*4, ax
 +a   011D           B8                   C000    mov ax,  #0xC000
 +a   0120           A3         0042              mov 0x10*4+2, ax
 +a   0123           1F                           pop ds
00432                                           ;; display splash screen
00433 0124           E8         34EF              call _display_splash_screen
00434                                           ;; init video mode and clear the screen
00435 0127           B8                   0003    mov ax,#0x0003
00436 012A           CD                     10    int #0x10
00437                                           ;; show info
00438 012C           E8         34E8              call _display_info
00439                                           ;; show vbe info
00440 012F           E8         921B              call vbe_display_info
00441 0132           CB                           retf
00442                                           ! 262 endasm
00443                                           !BCC_ENDASM
00444                                           ! 263 #asm
00445                                           !BCC_ASM
00446                       00000133            vgabios_int10_handler:
00447 0133           9C                           pushf
00448 0134           80FC                   0F    cmp ah, #0x0f
00449 0137           75           06              jne int10_test_1A
00450 0139           E8         60BD              call biosfn_get_video_mode
00451 013C           E9         00BC              jmp int10_end
00452                       0000013F            int10_test_1A:
00453 013F           80FC                   1A    cmp ah, #0x1a
00454 0142           75           06              jne int10_test_0B
00455 0144           E8         6BDF              call biosfn_group_1A
00456 0147           E9         00B1              jmp int10_end
00457                       0000014A            int10_test_0B:
00458 014A           80FC                   0B    cmp ah, #0x0b
00459 014D           75           06              jne int10_test_1103
00460 014F           E8         5826              call biosfn_group_0B
00461 0152           E9         00A6              jmp int10_end
00462                       00000155            int10_test_1103:
00463 0155           3D                   1103    cmp ax, #0x1103
00464 0158           75           06              jne int10_test_12
00465 015A           E8         6797              call biosfn_set_text_block_specifier
00466 015D           E9         009B              jmp int10_end
00467                       00000160            int10_test_12:
00468 0160           80FC                   12    cmp ah, #0x12
00469 0163           75           3E              jne int10_test_101B
00470 0165           80FB                   10    cmp bl, #0x10
00471 0168           75           06              jne int10_test_BL30
00472 016A           E8         69E1              call biosfn_get_ega_info
00473 016D           E9         008B              jmp int10_end
00474                       00000170            int10_test_BL30:
00475 0170           80FB                   30    cmp bl, #0x30
00476 0173           75           06              jne int10_test_BL31
00477 0175           E8         69FA              call biosfn_select_vert_res
00478 0178           E9         0080              jmp int10_end
00479                       0000017B            int10_test_BL31:
00480 017B           80FB                   31    cmp bl, #0x31
00481 017E           75           05              jne int10_test_BL32
00482 0180           E8         6A42              call biosfn_enable_default_palette_loading
00483 0183           EB           76              jmp int10_end
00484                       00000185            int10_test_BL32:
00485 0185           80FB                   32    cmp bl, #0x32
00486 0188           75           05              jne int10_test_BL33
00487 018A           E8         6A5A              call biosfn_enable_video_addressing
00488 018D           EB           6C              jmp int10_end
00489                       0000018F            int10_test_BL33:
00490 018F           80FB                   33    cmp bl, #0x33
00491 0192           75           05              jne int10_test_BL34
00492 0194           E8         6A6E              call biosfn_enable_grayscale_summing
00493 0197           EB           62              jmp int10_end
00494                       00000199            int10_test_BL34:
00495 0199           80FB                   34    cmp bl, #0x34
00496 019C           75           4F              jne int10_normal
00497 019E           E8         6A88              call biosfn_enable_cursor_emulation
00498 01A1           EB           58              jmp int10_end
00499                       000001A3            int10_test_101B:
00500 01A3           3D                   101B    cmp ax, #0x101b
00501 01A6           74           45              je int10_normal
00502 01A8           80FC                   10    cmp ah, #0x10
00503 01AB           75           05              jne int10_test_4F
00504 01AD           E8         6070              call biosfn_group_10
00505 01B0           EB           49              jmp int10_end
00506                       000001B2            int10_test_4F:
00507 01B2           80FC                   4F    cmp ah, #0x4f
00508 01B5           75           36              jne int10_normal
00509 01B7           3C                     03    cmp al, #0x03
00510 01B9           75           05              jne int10_test_vbe_05
00511 01BB           E8         96B0              call vbe_biosfn_return_current_mode
00512 01BE           EB           3B              jmp int10_end
00513                       000001C0            int10_test_vbe_05:
00514 01C0           3C                     05    cmp al, #0x05
00515 01C2           75           05              jne int10_test_vbe_06
00516 01C4           E8         997B              call vbe_biosfn_display_window_control
00517 01C7           EB           32              jmp int10_end
00518                       000001C9            int10_test_vbe_06:
00519 01C9           3C                     06    cmp al, #0x06
00520 01CB           75           05              jne int10_test_vbe_07
00521 01CD           E8         999F              call vbe_biosfn_set_get_logical_scan_line_length
00522 01D0           EB           29              jmp int10_end
00523                       000001D2            int10_test_vbe_07:
00524 01D2           3C                     07    cmp al, #0x07
00525 01D4           75           05              jne int10_test_vbe_08
00526 01D6           E8         99E3              call vbe_biosfn_set_get_display_start
00527 01D9           EB           20              jmp int10_end
00528                       000001DB            int10_test_vbe_08:
00529 01DB           3C                     08    cmp al, #0x08
00530 01DD           75           05              jne int10_test_vbe_0A
00531 01DF           E8         9A08              call vbe_biosfn_set_get_dac_palette_format
00532 01E2           EB           17              jmp int10_end
00533                       000001E4            int10_test_vbe_0A:
00534 01E4           3C                     0A    cmp al, #0x0A
00535 01E6           75           05              jne int10_normal
00536 01E8           E8         9A37              call vbe_biosfn_return_protected_mode_interface
00537 01EB           EB           0E              jmp int10_end
00538                       000001ED            int10_normal:
00539 01ED           06                           push es
00540 01EE           1E                           push ds
00541 01EF           60                           pusha
00542                                           ;; We have to set ds to access the right data segment
00543 01F0           BB                   C000    mov bx, #0xc000
00544 01F3           8EDB                         mov ds, bx
00545 01F5           E8         3464              call _int10_func
00546 01F8           61                           popa
00547 01F9           1F                           pop ds
00548 01FA           07                           pop es
00549                       000001FB            int10_end:
00550 01FB           9D                           popf
00551 01FC           CF                           iret
00552                                           ! 370 endasm
00553                                           !BCC_ENDASM
00554                                           ! 371 typedef struct
00555                                           ! 372 {Bit8u svgamode;
00556                                           !BCC_EOS
00557                                           ! 373  Bit8u class;
00558                                           !BCC_EOS
00559                                           ! 374  Bit8u memmodel;
00560                                           !BCC_EOS
00561                                           ! 375  Bit8u pixbits;
00562                                           !BCC_EOS
00563                                           ! 376  Bit16u sstart;
00564                                           !BCC_EOS
00565                                           ! 377  Bit8u pelmask;
00566                                           !BCC_EOS
00567                                           ! 378  Bit8u dacmodel;
00568                                           !BCC_EOS
00569                                           ! 379 } VGAMODES;
00570                                           !BCC_EOS
00571                                           ! 380 static VGAMODES vga_modes[15 +1]=
00572                                           ! 381 {
00573                                           
00574                       000001FD            _vga_modes:
00575                                           ! 382  {0x00, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00576 01FD                        00            .byte	0
00577 01FE                        00            .byte	0
00578 01FF                        00            .byte	0
00579 0200                        04            .byte	4
00580 0201                      B800            .word	$B800
00581 0203                        FF            .byte	$FF
00582 0204                        02            .byte	2
00583                                           ! 383  {0x01, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00584 0205                        01            .byte	1
00585 0206                        00            .byte	0
00586 0207                        00            .byte	0
00587 0208                        04            .byte	4
00588 0209                      B800            .word	$B800
00589 020B                        FF            .byte	$FF
00590 020C                        02            .byte	2
00591                                           ! 384  {0x02, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00592 020D                        02            .byte	2
00593 020E                        00            .byte	0
00594 020F                        00            .byte	0
00595 0210                        04            .byte	4
00596 0211                      B800            .word	$B800
00597 0213                        FF            .byte	$FF
00598 0214                        02            .byte	2
00599                                           ! 385  {0x03, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00600 0215                        03            .byte	3
00601 0216                        00            .byte	0
00602 0217                        00            .byte	0
00603 0218                        04            .byte	4
00604 0219                      B800            .word	$B800
00605 021B                        FF            .byte	$FF
00606 021C                        02            .byte	2
00607                                           ! 386  {0x04, 0x01, 0x02, 2, 0xB800, 0xFF, 0x01},
00608 021D                        04            .byte	4
00609 021E                        01            .byte	1
00610 021F                        02            .byte	2
00611 0220                        02            .byte	2
00612 0221                      B800            .word	$B800
00613 0223                        FF            .byte	$FF
00614 0224                        01            .byte	1
00615                                           ! 387  {0x05, 0x01, 0x02, 2, 0xB800, 0xFF, 0x01},
00616 0225                        05            .byte	5
00617 0226                        01            .byte	1
00618 0227                        02            .byte	2
00619 0228                        02            .byte	2
00620 0229                      B800            .word	$B800
00621 022B                        FF            .byte	$FF
00622 022C                        01            .byte	1
00623                                           ! 388  {0x06, 0x01, 0x02, 1, 0xB800, 0xFF, 0x01},
00624 022D                        06            .byte	6
00625 022E                        01            .byte	1
00626 022F                        02            .byte	2
00627 0230                        01            .byte	1
00628 0231                      B800            .word	$B800
00629 0233                        FF            .byte	$FF
00630 0234                        01            .byte	1
00631                                           ! 389  {0x07, 0x00, 0x01, 4, 0xB000, 0xFF, 0x00},
00632 0235                        07            .byte	7
00633 0236                        00            .byte	0
00634 0237                        01            .byte	1
00635 0238                        04            .byte	4
00636 0239                      B000            .word	$B000
00637 023B                        FF            .byte	$FF
00638 023C                        00            .byte	0
00639                                           ! 390  {0x0D, 0x01, 0x04, 4, 0xA000, 0xFF, 0x01},
00640 023D                        0D            .byte	$D
00641 023E                        01            .byte	1
00642 023F                        04            .byte	4
00643 0240                        04            .byte	4
00644 0241                      A000            .word	$A000
00645 0243                        FF            .byte	$FF
00646 0244                        01            .byte	1
00647                                           ! 391  {0x0E, 0x01, 0x04, 4, 0xA000, 0xFF, 0x01},
00648 0245                        0E            .byte	$E
00649 0246                        01            .byte	1
00650 0247                        04            .byte	4
00651 0248                        04            .byte	4
00652 0249                      A000            .word	$A000
00653 024B                        FF            .byte	$FF
00654 024C                        01            .byte	1
00655                                           ! 392  {0x0F, 0x01, 0x03, 1, 0xA000, 0xFF, 0x00},
00656 024D                        0F            .byte	$F
00657 024E                        01            .byte	1
00658 024F                        03            .byte	3
00659 0250                        01            .byte	1
00660 0251                      A000            .word	$A000
00661 0253                        FF            .byte	$FF
00662 0254                        00            .byte	0
00663                                           ! 393  {0x10, 0x01, 0x04, 4, 0xA000, 0xFF, 0x02},
00664 0255                        10            .byte	$10
00665 0256                        01            .byte	1
00666 0257                        04            .byte	4
00667 0258                        04            .byte	4
00668 0259                      A000            .word	$A000
00669 025B                        FF            .byte	$FF
00670 025C                        02            .byte	2
00671                                           ! 394  {0x11, 0x01, 0x03, 1, 0xA000, 0xFF, 0x02},
00672 025D                        11            .byte	$11
00673 025E                        01            .byte	1
00674 025F                        03            .byte	3
00675 0260                        01            .byte	1
00676 0261                      A000            .word	$A000
00677 0263                        FF            .byte	$FF
00678 0264                        02            .byte	2
00679                                           ! 395  {0x12, 0x01, 0x04, 4, 0xA000, 0xFF, 0x02},
00680 0265                        12            .byte	$12
00681 0266                        01            .byte	1
00682 0267                        04            .byte	4
00683 0268                        04            .byte	4
00684 0269                      A000            .word	$A000
00685 026B                        FF            .byte	$FF
00686 026C                        02            .byte	2
00687                                           ! 396  {0x13, 0x01, 0x05, 8, 0xA000, 0xFF, 0x03},
00688 026D                        13            .byte	$13
00689 026E                        01            .byte	1
00690 026F                        05            .byte	5
00691 0270                        08            .byte	8
00692 0271                      A000            .word	$A000
00693 0273                        FF            .byte	$FF
00694 0274                        03            .byte	3
00695                                           ! 397  {0x6A, 0x01, 0x04, 4, 0xA000, 0xFF, 0x02}
00696 0275                        6A            .byte	$6A
00697 0276                        01            .byte	1
00698 0277                        04            .byte	4
00699 0278                        04            .byte	4
00700 0279                      A000            .word	$A000
00701 027B                        FF            .byte	$FF
00702 027C                        02            .byte	2
00703                                           ! 398 };
00704                                           !BCC_EOS
00705                                           ! 399 static Bit8u line_to_vpti[15 +1]={
00706                       0000027D            _line_to_vpti:
00707                                           ! 400     0x17, 0x17, 0x18, 0x18, 0x04, 0x05, 0x06, 0x07,
00708 027D                        17            .byte	$17
00709 027E                        17            .byte	$17
00710 027F                        18            .byte	$18
00711 0280                        18            .byte	$18
00712 0281                        04            .byte	4
00713 0282                        05            .byte	5
00714 0283                        06            .byte	6
00715 0284                        07            .byte	7
00716                                           ! 401     0x0d, 0x0e, 0x11, 0x12, 0x1a, 0x1b, 0x1c, 0x1d,
00717 0285                        0D            .byte	$D
00718 0286                        0E            .byte	$E
00719 0287                        11            .byte	$11
00720 0288                        12            .byte	$12
00721 0289                        1A            .byte	$1A
00722 028A                        1B            .byte	$1B
00723 028B                        1C            .byte	$1C
00724 028C                        1D            .byte	$1D
00725                                           ! 402 };
00726                                           !BCC_EOS
00727                                           ! 403 static Bit8u dac_regs[3 +1]=
00728                                           ! 404 {0x3f,0x3f,0x3f,0xff};
00729                       0000028D            _dac_regs:
00730 028D                        3F            .byte	$3F
00731 028E                        3F            .byte	$3F
00732 028F                        3F            .byte	$3F
00733 0290                        FF            .byte	$FF
00734                                           !BCC_EOS
00735                                           ! 405 typedef struct {
00736                                           ! 406     Bit8u twidth;
00737                                           !BCC_EOS
00738                                           ! 407     Bit8u theightm1;
00739                                           !BCC_EOS
00740                                           ! 408     Bit8u cheight;
00741                                           !BCC_EOS
00742                                           ! 409     Bit8u slength_l;
00743                                           !BCC_EOS
00744                                           ! 410     Bit8u slength_h;
00745                                           !BCC_EOS
00746                                           ! 411     Bit8u sequ_regs[4];
00747                                           !BCC_EOS
00748                                           ! 412     Bit8u miscreg;
00749                                           !BCC_EOS
00750                                           ! 413     Bit8u crtc_regs[25];
00751                                           !BCC_EOS
00752                                           ! 414     Bit8u actl_regs[20];
00753                                           !BCC_EOS
00754                                           ! 415     Bit8u grdc_regs[
00755                                           ! 415 9];
00756                                           !BCC_EOS
00757                                           ! 416 } VideoParamTableEntry;
00758                                           !BCC_EOS
00759                                           ! 417 static VideoParamTableEntry video_param_table[30] = {
00760                       00000291            _video_param_table:
00761                                           ! 418 {
00762                                           ! 419  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00763 0291                        00            .byte	0
00764 0292                        00            .byte	0
00765 0293                        00            .byte	0
00766 0294                        00            .byte	0
00767 0295                        00            .byte	0
00768 0296                        00            .byte	0
00769 0297                        00            .byte	0
00770 0298                        00            .byte	0
00771                                           ! 420  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00772 0299                        00            .byte	0
00773 029A                        00            .byte	0
00774 029B                        00            .byte	0
00775 029C                        00            .byte	0
00776 029D                        00            .byte	0
00777 029E                        00            .byte	0
00778 029F                        00            .byte	0
00779 02A0                        00            .byte	0
00780                                           ! 421  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00781 02A1                        00            .byte	0
00782 02A2                        00            .byte	0
00783 02A3                        00            .byte	0
00784 02A4                        00            .byte	0
00785 02A5                        00            .byte	0
00786 02A6                        00            .byte	0
00787 02A7                        00            .byte	0
00788 02A8                        00            .byte	0
00789                                           ! 422  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00790 02A9                        00            .byte	0
00791 02AA                        00            .byte	0
00792 02AB                        00            .byte	0
00793 02AC                        00            .byte	0
00794 02AD                        00            .byte	0
00795 02AE                        00            .byte	0
00796 02AF                        00            .byte	0
00797 02B0                        00            .byte	0
00798                                           ! 423  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00799 02B1                        00            .byte	0
00800 02B2                        00            .byte	0
00801 02B3                        00            .byte	0
00802 02B4                        00            .byte	0
00803 02B5                        00            .byte	0
00804 02B6                        00            .byte	0
00805 02B7                        00            .byte	0
00806 02B8                        00            .byte	0
00807                                           ! 424  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00808 02B9                        00            .byte	0
00809 02BA                        00            .byte	0
00810 02BB                        00            .byte	0
00811 02BC                        00            .byte	0
00812 02BD                        00            .byte	0
00813 02BE                        00            .byte	0
00814 02BF                        00            .byte	0
00815 02C0                        00            .byte	0
00816                                           ! 425  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00817 02C1                        00            .byte	0
00818 02C2                        00            .byte	0
00819 02C3                        00            .byte	0
00820 02C4                        00            .byte	0
00821 02C5                        00            .byte	0
00822 02C6                        00            .byte	0
00823 02C7                        00            .byte	0
00824 02C8                        00            .byte	0
00825                                           ! 426  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00826 02C9                        00            .byte	0
00827 02CA                        00            .byte	0
00828 02CB                        00            .byte	0
00829 02CC                        00            .byte	0
00830 02CD                        00            .byte	0
00831 02CE                        00            .byte	0
00832 02CF                        00            .byte	0
00833 02D0                        00            .byte	0
00834                                           ! 427 },
00835                                           ! 428 {
00836                                           ! 429  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00837 02D1                        00            .byte	0
00838 02D2                        00            .byte	0
00839 02D3                        00            .byte	0
00840 02D4                        00            .byte	0
00841 02D5                        00            .byte	0
00842 02D6                        00            .byte	0
00843 02D7                        00            .byte	0
00844 02D8                        00            .byte	0
00845                                           ! 430  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00846 02D9                        00            .byte	0
00847 02DA                        00            .byte	0
00848 02DB                        00            .byte	0
00849 02DC                        00            .byte	0
00850 02DD                        00            .byte	0
00851 02DE                        00            .byte	0
00852 02DF                        00            .byte	0
00853 02E0                        00            .byte	0
00854                                           ! 431  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00855 02E1                        00            .byte	0
00856 02E2                        00            .byte	0
00857 02E3                        00            .byte	0
00858 02E4                        00            .byte	0
00859 02E5                        00            .byte	0
00860 02E6                        00            .byte	0
00861 02E7                        00            .byte	0
00862 02E8                        00            .byte	0
00863                                           ! 432  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00864 02E9                        00            .byte	0
00865 02EA                        00            .byte	0
00866 02EB                        00            .byte	0
00867 02EC                        00            .byte	0
00868 02ED                        00            .byte	0
00869 02EE                        00            .byte	0
00870 02EF                        00            .byte	0
00871 02F0                        00            .byte	0
00872                                           ! 433  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00873 02F1                        00            .byte	0
00874 02F2                        00            .byte	0
00875 02F3                        00            .byte	0
00876 02F4                        00            .byte	0
00877 02F5                        00            .byte	0
00878 02F6                        00            .byte	0
00879 02F7                        00            .byte	0
00880 02F8                        00            .byte	0
00881                                           ! 434  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00882 02F9                        00            .byte	0
00883 02FA                        00            .byte	0
00884 02FB                        00            .byte	0
00885 02FC                        00            .byte	0
00886 02FD                        00            .byte	0
00887 02FE                        00            .byte	0
00888 02FF                        00            .byte	0
00889 0300                        00            .byte	0
00890                                           ! 435  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00891 0301                        00            .byte	0
00892 0302                        00            .byte	0
00893 0303                        00            .byte	0
00894 0304                        00            .byte	0
00895 0305                        00            .byte	0
00896 0306                        00            .byte	0
00897 0307                        00            .byte	0
00898 0308                        00            .byte	0
00899                                           ! 436  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00900 0309                        00            .byte	0
00901 030A                        00            .byte	0
00902 030B                        00            .byte	0
00903 030C                        00            .byte	0
00904 030D                        00            .byte	0
00905 030E                        00            .byte	0
00906 030F                        00            .byte	0
00907 0310                        00            .byte	0
00908                                           ! 437 },
00909                                           ! 438 {
00910                                           ! 439  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00911 0311                        00            .byte	0
00912 0312                        00            .byte	0
00913 0313                        00            .byte	0
00914 0314                        00            .byte	0
00915 0315                        00            .byte	0
00916 0316                        00            .byte	0
00917 0317                        00            .byte	0
00918 0318                        00            .byte	0
00919                                           ! 440  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00920 0319                        00            .byte	0
00921 031A                        00            .byte	0
00922 031B                        00            .byte	0
00923 031C                        00            .byte	0
00924 031D                        00            .byte	0
00925 031E                        00            .byte	0
00926 031F                        00            .byte	0
00927 0320                        00            .byte	0
00928                                           ! 441  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00929 0321                        00            .byte	0
00930 0322                        00            .byte	0
00931 0323                        00            .byte	0
00932 0324                        00            .byte	0
00933 0325                        00            .byte	0
00934 0326                        00            .byte	0
00935 0327                        00            .byte	0
00936 0328                        00            .byte	0
00937                                           ! 442  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00938 0329                        00            .byte	0
00939 032A                        00            .byte	0
00940 032B                        00            .byte	0
00941 032C                        00            .byte	0
00942 032D                        00            .byte	0
00943 032E                        00            .byte	0
00944 032F                        00            .byte	0
00945 0330                        00            .byte	0
00946                                           ! 443  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00947 0331                        00            .byte	0
00948 0332                        00            .byte	0
00949 0333                        00            .byte	0
00950 0334                        00            .byte	0
00951 0335                        00            .byte	0
00952 0336                        00            .byte	0
00953 0337                        00            .byte	0
00954 0338                        00            .byte	0
00955                                           ! 444  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00956 0339                        00            .byte	0
00957 033A                        00            .byte	0
00958 033B                        00            .byte	0
00959 033C                        00            .byte	0
00960 033D                        00            .byte	0
00961 033E                        00            .byte	0
00962 033F                        00            .byte	0
00963 0340                        00            .byte	0
00964                                           ! 445  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00965 0341                        00            .byte	0
00966 0342                        00            .byte	0
00967 0343                        00            .byte	0
00968 0344                        00            .byte	0
00969 0345                        00            .byte	0
00970 0346                        00            .byte	0
00971 0347                        00            .byte	0
00972 0348                        00            .byte	0
00973                                           ! 446  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00974 0349                        00            .byte	0
00975 034A                        00            .byte	0
00976 034B                        00            .byte	0
00977 034C                        00            .byte	0
00978 034D                        00            .byte	0
00979 034E                        00            .byte	0
00980 034F                        00            .byte	0
00981 0350                        00            .byte	0
00982                                           ! 447 },
00983                                           ! 448 {
00984                                           ! 449  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00985 0351                        00            .byte	0
00986 0352                        00            .byte	0
00987 0353                        00            .byte	0
00988 0354                        00            .byte	0
00989 0355                        00            .byte	0
00990 0356                        00            .byte	0
00991 0357                        00            .byte	0
00992 0358                        00            .byte	0
00993                                           ! 450  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00994 0359                        00            .byte	0
00995 035A                        00            .byte	0
00996 035B                        00            .byte	0
00997 035C                        00            .byte	0
00998 035D                        00            .byte	0
00999 035E                        00            .byte	0
01000 035F                        00            .byte	0
01001 0360                        00            .byte	0
01002                                           ! 451  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01003 0361                        00            .byte	0
01004 0362                        00            .byte	0
01005 0363                        00            .byte	0
01006 0364                        00            .byte	0
01007 0365                        00            .byte	0
01008 0366                        00            .byte	0
01009 0367                        00            .byte	0
01010 0368                        00            .byte	0
01011                                           ! 452  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01012 0369                        00            .byte	0
01013 036A                        00            .byte	0
01014 036B                        00            .byte	0
01015 036C                        00            .byte	0
01016 036D                        00            .byte	0
01017 036E                        00            .byte	0
01018 036F                        00            .byte	0
01019 0370                        00            .byte	0
01020                                           ! 453  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01021 0371                        00            .byte	0
01022 0372                        00            .byte	0
01023 0373                        00            .byte	0
01024 0374                        00            .byte	0
01025 0375                        00            .byte	0
01026 0376                        00            .byte	0
01027 0377                        00            .byte	0
01028 0378                        00            .byte	0
01029                                           ! 454  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01030 0379                        00            .byte	0
01031 037A                        00            .byte	0
01032 037B                        00            .byte	0
01033 037C                        00            .byte	0
01034 037D                        00            .byte	0
01035 037E                        00            .byte	0
01036 037F                        00            .byte	0
01037 0380                        00            .byte	0
01038                                           ! 455  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01039 0381                        00            .byte	0
01040 0382                        00            .byte	0
01041 0383                        00            .byte	0
01042 0384                        00            .byte	0
01043 0385                        00            .byte	0
01044 0386                        00            .byte	0
01045 0387                        00            .byte	0
01046 0388                        00            .byte	0
01047                                           ! 456  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01048 0389                        00            .byte	0
01049 038A                        00            .byte	0
01050 038B                        00            .byte	0
01051 038C                        00            .byte	0
01052 038D                        00            .byte	0
01053 038E                        00            .byte	0
01054 038F                        00            .byte	0
01055 0390                        00            .byte	0
01056                                           ! 457 },
01057                                           ! 458 {
01058                                           ! 459  40, 24, 8, 0x00, 0x08,
01059 0391                        28            .byte	$28
01060 0392                        18            .byte	$18
01061 0393                        08            .byte	8
01062 0394                        00            .byte	0
01063 0395                        08            .byte	8
01064                                           ! 460  0x09, 0x03, 0x00, 0x02,
01065 0396                        09            .byte	9
01066 0397                        03            .byte	3
01067 0398                        00            .byte	0
01068 0399                        02            .byte	2
01069                                           ! 461  0x63,
01070 039A                        63            .byte	$63
01071                                           ! 462  0x2d, 0x27, 0x28, 0x90, 0x2b, 0x80, 0xbf, 0x1f,
01072 039B                        2D            .byte	$2D
01073 039C                        27            .byte	$27
01074 039D                        28            .byte	$28
01075 039E                        90            .byte	$90
01076 039F                        2B            .byte	$2B
01077 03A0                        80            .byte	$80
01078 03A1                        BF            .byte	$BF
01079 03A2                        1F            .byte	$1F
01080                                           ! 463  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01081 03A3                        00            .byte	0
01082 03A4                        C1            .byte	$C1
01083 03A5                        00            .byte	0
01084 03A6                        00            .byte	0
01085 03A7                        00            .byte	0
01086 03A8                        00            .byte	0
01087 03A9                        00            .byte	0
01088 03AA                        00            .byte	0
01089                                           ! 464  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96, 0xb9, 0xa2,
01090 03AB                        9C            .byte	$9C
01091 03AC                        8E            .byte	$8E
01092 03AD                        8F            .byte	$8F
01093 03AE                        14            .byte	$14
01094 03AF                        00            .byte	0
01095 03B0                        96            .byte	$96
01096 03B1                        B9            .byte	$B9
01097 03B2                        A2            .byte	$A2
01098                                           ! 465  0xff,
01099 03B3                        FF            .byte	$FF
01100                                           ! 466  0x00, 0x13, 0x15, 0x17, 0x02, 0x04, 0x06, 0x07,
01101 03B4                        00            .byte	0
01102 03B5                        13            .byte	$13
01103 03B6                        15            .byte	$15
01104 03B7                        17            .byte	$17
01105 03B8                        02            .byte	2
01106 03B9                        04            .byte	4
01107 03BA                        06            .byte	6
01108 03BB                        07            .byte	7
01109                                           ! 467  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01110 03BC                        10            .byte	$10
01111 03BD                        11            .byte	$11
01112 03BE                        12            .byte	$12
01113 03BF                        13            .byte	$13
01114 03C0                        14            .byte	$14
01115 03C1                        15            .byte	$15
01116 03C2                        16            .byte	$16
01117 03C3                        17            .byte	$17
01118                                           ! 468  0x01, 0x00, 0x03, 0x00,
01119 03C4                        01            .byte	1
01120 03C5                        00            .byte	0
01121 03C6                        03            .byte	3
01122 03C7                        00            .byte	0
01123                                           ! 469  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0f, 
01124 03C8                        00            .byte	0
01125 03C9                        00            .byte	0
01126 03CA                        00            .byte	0
01127 03CB                        00            .byte	0
01128 03CC                        00            .byte	0
01129 03CD                        30            .byte	$30
01130 03CE                        0F            .byte	$F
01131                                           ! 469 0x0f, 0xff,
01132 03CF                        0F            .byte	$F
01133 03D0                        FF            .byte	$FF
01134                                           ! 470 },
01135                                           ! 471 {
01136                                           ! 472  40, 24, 8, 0x00, 0x08,
01137 03D1                        28            .byte	$28
01138 03D2                        18            .byte	$18
01139 03D3                        08            .byte	8
01140 03D4                        00            .byte	0
01141 03D5                        08            .byte	8
01142                                           ! 473  0x09, 0x03, 0x00, 0x02,
01143 03D6                        09            .byte	9
01144 03D7                        03            .byte	3
01145 03D8                        00            .byte	0
01146 03D9                        02            .byte	2
01147                                           ! 474  0x63,
01148 03DA                        63            .byte	$63
01149                                           ! 475  0x2d, 0x27, 0x28, 0x90, 0x2b, 0x80, 0xbf, 0x1f,
01150 03DB                        2D            .byte	$2D
01151 03DC                        27            .byte	$27
01152 03DD                        28            .byte	$28
01153 03DE                        90            .byte	$90
01154 03DF                        2B            .byte	$2B
01155 03E0                        80            .byte	$80
01156 03E1                        BF            .byte	$BF
01157 03E2                        1F            .byte	$1F
01158                                           ! 476  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01159 03E3                        00            .byte	0
01160 03E4                        C1            .byte	$C1
01161 03E5                        00            .byte	0
01162 03E6                        00            .byte	0
01163 03E7                        00            .byte	0
01164 03E8                        00            .byte	0
01165 03E9                        00            .byte	0
01166 03EA                        00            .byte	0
01167                                           ! 477  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96, 0xb9, 0xa2,
01168 03EB                        9C            .byte	$9C
01169 03EC                        8E            .byte	$8E
01170 03ED                        8F            .byte	$8F
01171 03EE                        14            .byte	$14
01172 03EF                        00            .byte	0
01173 03F0                        96            .byte	$96
01174 03F1                        B9            .byte	$B9
01175 03F2                        A2            .byte	$A2
01176                                           ! 478  0xff,
01177 03F3                        FF            .byte	$FF
01178                                           ! 479  0x00, 0x13, 0x15, 0x17, 0x02, 0x04, 0x06, 0x07,
01179 03F4                        00            .byte	0
01180 03F5                        13            .byte	$13
01181 03F6                        15            .byte	$15
01182 03F7                        17            .byte	$17
01183 03F8                        02            .byte	2
01184 03F9                        04            .byte	4
01185 03FA                        06            .byte	6
01186 03FB                        07            .byte	7
01187                                           ! 480  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01188 03FC                        10            .byte	$10
01189 03FD                        11            .byte	$11
01190 03FE                        12            .byte	$12
01191 03FF                        13            .byte	$13
01192 0400                        14            .byte	$14
01193 0401                        15            .byte	$15
01194 0402                        16            .byte	$16
01195 0403                        17            .byte	$17
01196                                           ! 481  0x01, 0x00, 0x03, 0x00,
01197 0404                        01            .byte	1
01198 0405                        00            .byte	0
01199 0406                        03            .byte	3
01200 0407                        00            .byte	0
01201                                           ! 482  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0f, 0x0f, 0xff,
01202 0408                        00            .byte	0
01203 0409                        00            .byte	0
01204 040A                        00            .byte	0
01205 040B                        00            .byte	0
01206 040C                        00            .byte	0
01207 040D                        30            .byte	$30
01208 040E                        0F            .byte	$F
01209 040F                        0F            .byte	$F
01210 0410                        FF            .byte	$FF
01211                                           ! 483 },
01212                                           ! 484 {
01213                                           ! 485  80, 24, 8, 0x00, 0x10,
01214 0411                        50            .byte	$50
01215 0412                        18            .byte	$18
01216 0413                        08            .byte	8
01217 0414                        00            .byte	0
01218 0415                        10            .byte	$10
01219                                           ! 486  0x01, 0x01, 0x00, 0x06,
01220 0416                        01            .byte	1
01221 0417                        01            .byte	1
01222 0418                        00            .byte	0
01223 0419                        06            .byte	6
01224                                           ! 487  0x63,
01225 041A                        63            .byte	$63
01226                                           ! 488  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
01227 041B                        5F            .byte	$5F
01228 041C                        4F            .byte	$4F
01229 041D                        50            .byte	$50
01230 041E                        82            .byte	$82
01231 041F                        54            .byte	$54
01232 0420                        80            .byte	$80
01233 0421                        BF            .byte	$BF
01234 0422                        1F            .byte	$1F
01235                                           ! 489  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01236 0423                        00            .byte	0
01237 0424                        C1            .byte	$C1
01238 0425                        00            .byte	0
01239 0426                        00            .byte	0
01240 0427                        00            .byte	0
01241 0428                        00            .byte	0
01242 0429                        00            .byte	0
01243 042A                        00            .byte	0
01244                                           ! 490  0x9c, 0x8e, 0x8f, 0x28, 0x00, 0x96, 0xb9, 0xc2,
01245 042B                        9C            .byte	$9C
01246 042C                        8E            .byte	$8E
01247 042D                        8F            .byte	$8F
01248 042E                        28            .byte	$28
01249 042F                        00            .byte	0
01250 0430                        96            .byte	$96
01251 0431                        B9            .byte	$B9
01252 0432                        C2            .byte	$C2
01253                                           ! 491  0xff,
01254 0433                        FF            .byte	$FF
01255                                           ! 492  0x00, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17,
01256 0434                        00            .byte	0
01257 0435                        17            .byte	$17
01258 0436                        17            .byte	$17
01259 0437                        17            .byte	$17
01260 0438                        17            .byte	$17
01261 0439                        17            .byte	$17
01262 043A                        17            .byte	$17
01263 043B                        17            .byte	$17
01264                                           ! 493  0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17,
01265 043C                        17            .byte	$17
01266 043D                        17            .byte	$17
01267 043E                        17            .byte	$17
01268 043F                        17            .byte	$17
01269 0440                        17            .byte	$17
01270 0441                        17            .byte	$17
01271 0442                        17            .byte	$17
01272 0443                        17            .byte	$17
01273                                           ! 494  0x01, 0x00, 0x01, 0x00,
01274 0444                        01            .byte	1
01275 0445                        00            .byte	0
01276 0446                        01            .byte	1
01277 0447                        00            .byte	0
01278                                           ! 495  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x0f, 0xff,
01279 0448                        00            .byte	0
01280 0449                        00            .byte	0
01281 044A                        00            .byte	0
01282 044B                        00            .byte	0
01283 044C                        00            .byte	0
01284 044D                        00            .byte	0
01285 044E                        0D            .byte	$D
01286 044F                        0F            .byte	$F
01287 0450                        FF            .byte	$FF
01288                                           ! 496 },
01289                                           ! 497 {
01290                                           ! 498  80, 24, 16, 0x00, 0x10,
01291 0451                        50            .byte	$50
01292 0452                        18            .byte	$18
01293 0453                        10            .byte	$10
01294 0454                        00            .byte	0
01295 0455                        10            .byte	$10
01296                                           ! 499  0x00, 0x03, 0x00, 0x02,
01297 0456                        00            .byte	0
01298 0457                        03            .byte	3
01299 0458                        00            .byte	0
01300 0459                        02            .byte	2
01301                                           ! 500  0x66,
01302 045A                        66            .byte	$66
01303                                           ! 501  0x5f, 0x4f, 0x50, 0x82, 0x55, 0x81, 0xbf, 0x1f,
01304 045B                        5F            .byte	$5F
01305 045C                        4F            .byte	$4F
01306 045D                        50            .byte	$50
01307 045E                        82            .byte	$82
01308 045F                        55            .byte	$55
01309 0460                        81            .byte	$81
01310 0461                        BF            .byte	$BF
01311 0462                        1F            .byte	$1F
01312                                           ! 502  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
01313 0463                        00            .byte	0
01314 0464                        4F            .byte	$4F
01315 0465                        0D            .byte	$D
01316 0466                        0E            .byte	$E
01317 0467                        00            .byte	0
01318 0468                        00            .byte	0
01319 0469                        00            .byte	0
01320 046A                        00            .byte	0
01321                                           ! 503  0x9c, 0x8e, 0x8f, 0x28, 0x0f, 0x96, 0xb9, 0xa3,
01322 046B                        9C            .byte	$9C
01323 046C                        8E            .byte	$8E
01324 046D                        8F            .byte	$8F
01325 046E                        28            .byte	$28
01326 046F                        0F            .byte	$F
01327 0470                        96            .byte	$96
01328 0471                        B9            .byte	$B9
01329 0472                        A3            .byte	$A3
01330                                           ! 504  0xff,
01331 0473                        FF            .byte	$FF
01332                                           ! 505  0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
01333 0474                        00            .byte	0
01334 0475                        08            .byte	8
01335 0476                        08            .byte	8
01336 0477                        08            .byte	8
01337 0478                        08            .byte	8
01338 0479                        08            .byte	8
01339 047A                        08            .byte	8
01340 047B                        08            .byte	8
01341                                           ! 506  0x10, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
01342 047C                        10            .byte	$10
01343 047D                        18            .byte	$18
01344 047E                        18            .byte	$18
01345 047F                        18            .byte	$18
01346 0480                        18            .byte	$18
01347 0481                        18            .byte	$18
01348 0482                        18            .byte	$18
01349 0483                        18            .byte	$18
01350                                           ! 507  0x0e, 0x00, 0x0f, 0x08,
01351 0484                        0E            .byte	$E
01352 0485                        00            .byte	0
01353 0486                        0F            .byte	$F
01354 0487                        08            .byte	8
01355                                           ! 508  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0a, 0x0f, 0xff,
01356 0488                        00            .byte	0
01357 0489                        00            .byte	0
01358 048A                        00            .byte	0
01359 048B                        00            .byte	0
01360 048C                        00            .byte	0
01361 048D                        10            .byte	$10
01362 048E                        0A            .byte	$A
01363 048F                        0F            .byte	$F
01364 0490                        FF            .byte	$FF
01365                                           ! 509 },
01366                                           ! 510 {
01367                                           ! 511  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01368 0491                        00            .byte	0
01369 0492                        00            .byte	0
01370 0493                        00            .byte	0
01371 0494                        00            .byte	0
01372 0495                        00            .byte	0
01373 0496                        00            .byte	0
01374 0497                        00            .byte	0
01375 0498                        00            .byte	0
01376                                           ! 512  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01377 0499                        00            .byte	0
01378 049A                        00            .byte	0
01379 049B                        00            .byte	0
01380 049C                        00            .byte	0
01381 049D                        00            .byte	0
01382 049E                        00            .byte	0
01383 049F                        00            .byte	0
01384 04A0                        00            .byte	0
01385                                           ! 513  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01386 04A1                        00            .byte	0
01387 04A2                        00            .byte	0
01388 04A3                        00            .byte	0
01389 04A4                        00            .byte	0
01390 04A5                        00            .byte	0
01391 04A6                        00            .byte	0
01392 04A7                        00            .byte	0
01393 04A8                        00            .byte	0
01394                                           ! 514  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01395 04A9                        00            .byte	0
01396 04AA                        00            .byte	0
01397 04AB                        00            .byte	0
01398 04AC                        00            .byte	0
01399 04AD                        00            .byte	0
01400 04AE                        00            .byte	0
01401 04AF                        00            .byte	0
01402 04B0                        00            .byte	0
01403                                           ! 515  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01404 04B1                        00            .byte	0
01405 04B2                        00            .byte	0
01406 04B3                        00            .byte	0
01407 04B4                        00            .byte	0
01408 04B5                        00            .byte	0
01409 04B6                        00            .byte	0
01410 04B7                        00            .byte	0
01411 04B8                        00            .byte	0
01412                                           ! 516  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01413 04B9                        00            .byte	0
01414 04BA                        00            .byte	0
01415 04BB                        00            .byte	0
01416 04BC                        00            .byte	0
01417 04BD                        00            .byte	0
01418 04BE                        00            .byte	0
01419 04BF                        00            .byte	0
01420 04C0                        00            .byte	0
01421                                           ! 517  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01422 04C1                        00            .byte	0
01423 04C2                        00            .byte	0
01424 04C3                        00            .byte	0
01425 04C4                        00            .byte	0
01426 04C5                        00            .byte	0
01427 04C6                        00            .byte	0
01428 04C7                        00            .byte	0
01429 04C8                        00            .byte	0
01430                                           ! 518  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01431 04C9                        00            .byte	0
01432 04CA                        00            .byte	0
01433 04CB                        00            .byte	0
01434 04CC                        00            .byte	0
01435 04CD                        00            .byte	0
01436 04CE                        00            .byte	0
01437 04CF                        00            .byte	0
01438 04D0                        00            .byte	0
01439                                           ! 519 },
01440                                           ! 520 {
01441                                           ! 521  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01442 04D1                        00            .byte	0
01443 04D2                        00            .byte	0
01444 04D3                        00            .byte	0
01445 04D4                        00            .byte	0
01446 04D5                        00            .byte	0
01447 04D6                        00            .byte	0
01448 04D7                        00            .byte	0
01449 04D8                        00            .byte	0
01450                                           ! 522  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01451 04D9                        00            .byte	0
01452 04DA                        00            .byte	0
01453 04DB                        00            .byte	0
01454 04DC                        00            .byte	0
01455 04DD                        00            .byte	0
01456 04DE                        00            .byte	0
01457 04DF                        00            .byte	0
01458 04E0                        00            .byte	0
01459                                           ! 523  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01460 04E1                        00            .byte	0
01461 04E2                        00            .byte	0
01462 04E3                        00            .byte	0
01463 04E4                        00            .byte	0
01464 04E5                        00            .byte	0
01465 04E6                        00            .byte	0
01466 04E7                        00            .byte	0
01467 04E8                        00            .byte	0
01468                                           ! 524  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01469 04E9                        00            .byte	0
01470 04EA                        00            .byte	0
01471 04EB                        00            .byte	0
01472 04EC                        00            .byte	0
01473 04ED                        00            .byte	0
01474 04EE                        00            .byte	0
01475 04EF                        00            .byte	0
01476 04F0                        00            .byte	0
01477                                           ! 525  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01478 04F1                        00            .byte	0
01479 04F2                        00            .byte	0
01480 04F3                        00            .byte	0
01481 04F4                        00            .byte	0
01482 04F5                        00            .byte	0
01483 04F6                        00            .byte	0
01484 04F7                        00            .byte	0
01485 04F8                        00            .byte	0
01486                                           ! 526  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01487 04F9                        00            .byte	0
01488 04FA                        00            .byte	0
01489 04FB                        00            .byte	0
01490 04FC                        00            .byte	0
01491 04FD                        00            .byte	0
01492 04FE                        00            .byte	0
01493 04FF                        00            .byte	0
01494 0500                        00            .byte	0
01495                                           ! 527  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01496 0501                        00            .byte	0
01497 0502                        00            .byte	0
01498 0503                        00            .byte	0
01499 0504                        00            .byte	0
01500 0505                        00            .byte	0
01501 0506                        00            .byte	0
01502 0507                        00            .byte	0
01503 0508                        00            .byte	0
01504                                           ! 528  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01505 0509                        00            .byte	0
01506 050A                        00            .byte	0
01507 050B                        00            .byte	0
01508 050C                        00            .byte	0
01509 050D                        00            .byte	0
01510 050E                        00            .byte	0
01511 050F                        00            .byte	0
01512 0510                        00            .byte	0
01513                                           ! 529 },
01514                                           ! 530 {
01515                                           ! 531  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01516 0511                        00            .byte	0
01517 0512                        00            .byte	0
01518 0513                        00            .byte	0
01519 0514                        00            .byte	0
01520 0515                        00            .byte	0
01521 0516                        00            .byte	0
01522 0517                        00            .byte	0
01523 0518                        00            .byte	0
01524                                           ! 532  0x00, 0
01525 0519                        00            .byte	0
01526                                           ! 532 x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01527 051A                        00            .byte	0
01528 051B                        00            .byte	0
01529 051C                        00            .byte	0
01530 051D                        00            .byte	0
01531 051E                        00            .byte	0
01532 051F                        00            .byte	0
01533 0520                        00            .byte	0
01534                                           ! 533  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01535 0521                        00            .byte	0
01536 0522                        00            .byte	0
01537 0523                        00            .byte	0
01538 0524                        00            .byte	0
01539 0525                        00            .byte	0
01540 0526                        00            .byte	0
01541 0527                        00            .byte	0
01542 0528                        00            .byte	0
01543                                           ! 534  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01544 0529                        00            .byte	0
01545 052A                        00            .byte	0
01546 052B                        00            .byte	0
01547 052C                        00            .byte	0
01548 052D                        00            .byte	0
01549 052E                        00            .byte	0
01550 052F                        00            .byte	0
01551 0530                        00            .byte	0
01552                                           ! 535  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01553 0531                        00            .byte	0
01554 0532                        00            .byte	0
01555 0533                        00            .byte	0
01556 0534                        00            .byte	0
01557 0535                        00            .byte	0
01558 0536                        00            .byte	0
01559 0537                        00            .byte	0
01560 0538                        00            .byte	0
01561                                           ! 536  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01562 0539                        00            .byte	0
01563 053A                        00            .byte	0
01564 053B                        00            .byte	0
01565 053C                        00            .byte	0
01566 053D                        00            .byte	0
01567 053E                        00            .byte	0
01568 053F                        00            .byte	0
01569 0540                        00            .byte	0
01570                                           ! 537  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01571 0541                        00            .byte	0
01572 0542                        00            .byte	0
01573 0543                        00            .byte	0
01574 0544                        00            .byte	0
01575 0545                        00            .byte	0
01576 0546                        00            .byte	0
01577 0547                        00            .byte	0
01578 0548                        00            .byte	0
01579                                           ! 538  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01580 0549                        00            .byte	0
01581 054A                        00            .byte	0
01582 054B                        00            .byte	0
01583 054C                        00            .byte	0
01584 054D                        00            .byte	0
01585 054E                        00            .byte	0
01586 054F                        00            .byte	0
01587 0550                        00            .byte	0
01588                                           ! 539 },
01589                                           ! 540 {
01590                                           ! 541  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01591 0551                        00            .byte	0
01592 0552                        00            .byte	0
01593 0553                        00            .byte	0
01594 0554                        00            .byte	0
01595 0555                        00            .byte	0
01596 0556                        00            .byte	0
01597 0557                        00            .byte	0
01598 0558                        00            .byte	0
01599                                           ! 542  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01600 0559                        00            .byte	0
01601 055A                        00            .byte	0
01602 055B                        00            .byte	0
01603 055C                        00            .byte	0
01604 055D                        00            .byte	0
01605 055E                        00            .byte	0
01606 055F                        00            .byte	0
01607 0560                        00            .byte	0
01608                                           ! 543  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01609 0561                        00            .byte	0
01610 0562                        00            .byte	0
01611 0563                        00            .byte	0
01612 0564                        00            .byte	0
01613 0565                        00            .byte	0
01614 0566                        00            .byte	0
01615 0567                        00            .byte	0
01616 0568                        00            .byte	0
01617                                           ! 544  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01618 0569                        00            .byte	0
01619 056A                        00            .byte	0
01620 056B                        00            .byte	0
01621 056C                        00            .byte	0
01622 056D                        00            .byte	0
01623 056E                        00            .byte	0
01624 056F                        00            .byte	0
01625 0570                        00            .byte	0
01626                                           ! 545  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01627 0571                        00            .byte	0
01628 0572                        00            .byte	0
01629 0573                        00            .byte	0
01630 0574                        00            .byte	0
01631 0575                        00            .byte	0
01632 0576                        00            .byte	0
01633 0577                        00            .byte	0
01634 0578                        00            .byte	0
01635                                           ! 546  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01636 0579                        00            .byte	0
01637 057A                        00            .byte	0
01638 057B                        00            .byte	0
01639 057C                        00            .byte	0
01640 057D                        00            .byte	0
01641 057E                        00            .byte	0
01642 057F                        00            .byte	0
01643 0580                        00            .byte	0
01644                                           ! 547  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01645 0581                        00            .byte	0
01646 0582                        00            .byte	0
01647 0583                        00            .byte	0
01648 0584                        00            .byte	0
01649 0585                        00            .byte	0
01650 0586                        00            .byte	0
01651 0587                        00            .byte	0
01652 0588                        00            .byte	0
01653                                           ! 548  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01654 0589                        00            .byte	0
01655 058A                        00            .byte	0
01656 058B                        00            .byte	0
01657 058C                        00            .byte	0
01658 058D                        00            .byte	0
01659 058E                        00            .byte	0
01660 058F                        00            .byte	0
01661 0590                        00            .byte	0
01662                                           ! 549 },
01663                                           ! 550 {
01664                                           ! 551  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01665 0591                        00            .byte	0
01666 0592                        00            .byte	0
01667 0593                        00            .byte	0
01668 0594                        00            .byte	0
01669 0595                        00            .byte	0
01670 0596                        00            .byte	0
01671 0597                        00            .byte	0
01672 0598                        00            .byte	0
01673                                           ! 552  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01674 0599                        00            .byte	0
01675 059A                        00            .byte	0
01676 059B                        00            .byte	0
01677 059C                        00            .byte	0
01678 059D                        00            .byte	0
01679 059E                        00            .byte	0
01680 059F                        00            .byte	0
01681 05A0                        00            .byte	0
01682                                           ! 553  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01683 05A1                        00            .byte	0
01684 05A2                        00            .byte	0
01685 05A3                        00            .byte	0
01686 05A4                        00            .byte	0
01687 05A5                        00            .byte	0
01688 05A6                        00            .byte	0
01689 05A7                        00            .byte	0
01690 05A8                        00            .byte	0
01691                                           ! 554  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01692 05A9                        00            .byte	0
01693 05AA                        00            .byte	0
01694 05AB                        00            .byte	0
01695 05AC                        00            .byte	0
01696 05AD                        00            .byte	0
01697 05AE                        00            .byte	0
01698 05AF                        00            .byte	0
01699 05B0                        00            .byte	0
01700                                           ! 555  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01701 05B1                        00            .byte	0
01702 05B2                        00            .byte	0
01703 05B3                        00            .byte	0
01704 05B4                        00            .byte	0
01705 05B5                        00            .byte	0
01706 05B6                        00            .byte	0
01707 05B7                        00            .byte	0
01708 05B8                        00            .byte	0
01709                                           ! 556  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01710 05B9                        00            .byte	0
01711 05BA                        00            .byte	0
01712 05BB                        00            .byte	0
01713 05BC                        00            .byte	0
01714 05BD                        00            .byte	0
01715 05BE                        00            .byte	0
01716 05BF                        00            .byte	0
01717 05C0                        00            .byte	0
01718                                           ! 557  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01719 05C1                        00            .byte	0
01720 05C2                        00            .byte	0
01721 05C3                        00            .byte	0
01722 05C4                        00            .byte	0
01723 05C5                        00            .byte	0
01724 05C6                        00            .byte	0
01725 05C7                        00            .byte	0
01726 05C8                        00            .byte	0
01727                                           ! 558  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01728 05C9                        00            .byte	0
01729 05CA                        00            .byte	0
01730 05CB                        00            .byte	0
01731 05CC                        00            .byte	0
01732 05CD                        00            .byte	0
01733 05CE                        00            .byte	0
01734 05CF                        00            .byte	0
01735 05D0                        00            .byte	0
01736                                           ! 559 },
01737                                           ! 560 {
01738                                           ! 561  40, 24, 8, 0x00, 0x20,
01739 05D1                        28            .byte	$28
01740 05D2                        18            .byte	$18
01741 05D3                        08            .byte	8
01742 05D4                        00            .byte	0
01743 05D5                        20            .byte	$20
01744                                           ! 562  0x09, 0x0f, 0x00, 0x06,
01745 05D6                        09            .byte	9
01746 05D7                        0F            .byte	$F
01747 05D8                        00            .byte	0
01748 05D9                        06            .byte	6
01749                                           ! 563  0x63,
01750 05DA                        63            .byte	$63
01751                                           ! 564  0x2d, 0x27, 0x28, 0x90, 0x2b, 0x80, 0xbf, 0x1f,
01752 05DB                        2D            .byte	$2D
01753 05DC                        27            .byte	$27
01754 05DD                        28            .byte	$28
01755 05DE                        90            .byte	$90
01756 05DF                        2B            .byte	$2B
01757 05E0                        80            .byte	$80
01758 05E1                        BF            .byte	$BF
01759 05E2                        1F            .byte	$1F
01760                                           ! 565  0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01761 05E3                        00            .byte	0
01762 05E4                        C0            .byte	$C0
01763 05E5                        00            .byte	0
01764 05E6                        00            .byte	0
01765 05E7                        00            .byte	0
01766 05E8                        00            .byte	0
01767 05E9                        00            .byte	0
01768 05EA                        00            .byte	0
01769                                           ! 566  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96, 0xb9, 0xe3,
01770 05EB                        9C            .byte	$9C
01771 05EC                        8E            .byte	$8E
01772 05ED                        8F            .byte	$8F
01773 05EE                        14            .byte	$14
01774 05EF                        00            .byte	0
01775 05F0                        96            .byte	$96
01776 05F1                        B9            .byte	$B9
01777 05F2                        E3            .byte	$E3
01778                                           ! 567  0xff,
01779 05F3                        FF            .byte	$FF
01780                                           ! 568  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
01781 05F4                        00            .byte	0
01782 05F5                        01            .byte	1
01783 05F6                        02            .byte	2
01784 05F7                        03            .byte	3
01785 05F8                        04            .byte	4
01786 05F9                        05            .byte	5
01787 05FA                        06            .byte	6
01788 05FB                        07            .byte	7
01789                                           ! 569  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01790 05FC                        10            .byte	$10
01791 05FD                        11            .byte	$11
01792 05FE                        12            .byte	$12
01793 05FF                        13            .byte	$13
01794 0600                        14            .byte	$14
01795 0601                        15            .byte	$15
01796 0602                        16            .byte	$16
01797 0603                        17            .byte	$17
01798                                           ! 570  0x01, 0x00, 0x0f, 0x00,
01799 0604                        01            .byte	1
01800 0605                        00            .byte	0
01801 0606                        0F            .byte	$F
01802 0607                        00            .byte	0
01803                                           ! 571  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
01804 0608                        00            .byte	0
01805 0609                        00            .byte	0
01806 060A                        00            .byte	0
01807 060B                        00            .byte	0
01808 060C                        00            .byte	0
01809 060D                        00            .byte	0
01810 060E                        05            .byte	5
01811 060F                        0F            .byte	$F
01812 0610                        FF            .byte	$FF
01813                                           ! 572 },
01814                                           ! 573 {
01815                                           ! 574  80, 24, 8, 0x00, 0x40,
01816 0611                        50            .byte	$50
01817 0612                        18            .byte	$18
01818 0613                        08            .byte	8
01819 0614                        00            .byte	0
01820 0615                        40            .byte	$40
01821                                           ! 575  0x01, 0x0f, 0x00, 0x06,
01822 0616                        01            .byte	1
01823 0617                        0F            .byte	$F
01824 0618                        00            .byte	0
01825 0619                        06            .byte	6
01826                                           ! 576  0x63,
01827 061A                        63            .byte	$63
01828                                           ! 577  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
01829 061B                        5F            .byte	$5F
01830 061C                        4F            .byte	$4F
01831 061D                        50            .byte	$50
01832 061E                        82            .byte	$82
01833 061F                        54            .byte	$54
01834 0620                        80            .byte	$80
01835 0621                        BF            .byte	$BF
01836 0622                        1F            .byte	$1F
01837                                           ! 578  0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01838 0623                        00            .byte	0
01839 0624                        C0            .byte	$C0
01840 0625                        00            .byte	0
01841 0626                        00            .byte	0
01842 0627                        00            .byte	0
01843 0628                        00            .byte	0
01844 0629                        00            .byte	0
01845 062A                        00            .byte	0
01846                                           ! 579  0x9c, 0x8e, 0x8f, 0x28, 0x00, 0x96, 0xb9, 0xe3,
01847 062B                        9C            .byte	$9C
01848 062C                        8E            .byte	$8E
01849 062D                        8F            .byte	$8F
01850 062E                        28            .byte	$28
01851 062F                        00            .byte	0
01852 0630                        96            .byte	$96
01853 0631                        B9            .byte	$B9
01854 0632                        E3            .byte	$E3
01855                                           ! 580  0xff,
01856 0633                        FF            .byte	$FF
01857                                           ! 581  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
01858 0634                        00            .byte	0
01859 0635                        01            .byte	1
01860 0636                        02            .byte	2
01861 0637                        03            .byte	3
01862 0638                        04            .byte	4
01863 0639                        05            .byte	5
01864 063A                        06            .byte	6
01865 063B                        07            .byte	7
01866                                           ! 582  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01867 063C                        10            .byte	$10
01868 063D                        11            .byte	$11
01869 063E                        12            .byte	$12
01870 063F                        13            .byte	$13
01871 0640                        14            .byte	$14
01872 0641                        15            .byte	$15
01873 0642                        16            .byte	$16
01874 0643                        17            .byte	$17
01875                                           ! 583  0x01, 0x00, 0x0f, 0x00,
01876 0644                        01            .byte	1
01877 0645                        00            .byte	0
01878 0646                        0F            .byte	$F
01879 0647                        00            .byte	0
01880                                           ! 584  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
01881 0648                        00            .byte	0
01882 0649                        00            .byte	0
01883 064A                        00            .byte	0
01884 064B                        00            .byte	0
01885 064C                        00            .byte	0
01886 064D                        00            .byte	0
01887 064E                        05            .byte	5
01888 064F                        0F            .byte	$F
01889 0650                        FF            .byte	$FF
01890                                           ! 585 },
01891                                           ! 586 {
01892                                           ! 587  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01893 0651                        00            .byte	0
01894 0652                        00            .byte	0
01895 0653                        00            .byte	0
01896 0654                        00            .byte	0
01897 0655                        00            .byte	0
01898 0656                        00            .byte	0
01899 0657                        00            .byte	0
01900 0658                        00            .byte	0
01901                                           ! 588  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01902 0659                        00            .byte	0
01903 065A                        00            .byte	0
01904 065B                        00            .byte	0
01905 065C                        00            .byte	0
01906 065D                        00            .byte	0
01907 065E                        00            .byte	0
01908 065F                        00            .byte	0
01909 0660                        00            .byte	0
01910                                           ! 589  0x00, 0x00, 0x00, 0x00, 0x00,
01911 0661                        00            .byte	0
01912 0662                        00            .byte	0
01913 0663                        00            .byte	0
01914 0664                        00            .byte	0
01915                                           ! 589  0x00, 0x00, 0x00,
01916 0665                        00            .byte	0
01917 0666                        00            .byte	0
01918 0667                        00            .byte	0
01919 0668                        00            .byte	0
01920                                           ! 590  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01921 0669                        00            .byte	0
01922 066A                        00            .byte	0
01923 066B                        00            .byte	0
01924 066C                        00            .byte	0
01925 066D                        00            .byte	0
01926 066E                        00            .byte	0
01927 066F                        00            .byte	0
01928 0670                        00            .byte	0
01929                                           ! 591  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01930 0671                        00            .byte	0
01931 0672                        00            .byte	0
01932 0673                        00            .byte	0
01933 0674                        00            .byte	0
01934 0675                        00            .byte	0
01935 0676                        00            .byte	0
01936 0677                        00            .byte	0
01937 0678                        00            .byte	0
01938                                           ! 592  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01939 0679                        00            .byte	0
01940 067A                        00            .byte	0
01941 067B                        00            .byte	0
01942 067C                        00            .byte	0
01943 067D                        00            .byte	0
01944 067E                        00            .byte	0
01945 067F                        00            .byte	0
01946 0680                        00            .byte	0
01947                                           ! 593  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01948 0681                        00            .byte	0
01949 0682                        00            .byte	0
01950 0683                        00            .byte	0
01951 0684                        00            .byte	0
01952 0685                        00            .byte	0
01953 0686                        00            .byte	0
01954 0687                        00            .byte	0
01955 0688                        00            .byte	0
01956                                           ! 594  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01957 0689                        00            .byte	0
01958 068A                        00            .byte	0
01959 068B                        00            .byte	0
01960 068C                        00            .byte	0
01961 068D                        00            .byte	0
01962 068E                        00            .byte	0
01963 068F                        00            .byte	0
01964 0690                        00            .byte	0
01965                                           ! 595 },
01966                                           ! 596 {
01967                                           ! 597  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01968 0691                        00            .byte	0
01969 0692                        00            .byte	0
01970 0693                        00            .byte	0
01971 0694                        00            .byte	0
01972 0695                        00            .byte	0
01973 0696                        00            .byte	0
01974 0697                        00            .byte	0
01975 0698                        00            .byte	0
01976                                           ! 598  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01977 0699                        00            .byte	0
01978 069A                        00            .byte	0
01979 069B                        00            .byte	0
01980 069C                        00            .byte	0
01981 069D                        00            .byte	0
01982 069E                        00            .byte	0
01983 069F                        00            .byte	0
01984 06A0                        00            .byte	0
01985                                           ! 599  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01986 06A1                        00            .byte	0
01987 06A2                        00            .byte	0
01988 06A3                        00            .byte	0
01989 06A4                        00            .byte	0
01990 06A5                        00            .byte	0
01991 06A6                        00            .byte	0
01992 06A7                        00            .byte	0
01993 06A8                        00            .byte	0
01994                                           ! 600  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01995 06A9                        00            .byte	0
01996 06AA                        00            .byte	0
01997 06AB                        00            .byte	0
01998 06AC                        00            .byte	0
01999 06AD                        00            .byte	0
02000 06AE                        00            .byte	0
02001 06AF                        00            .byte	0
02002 06B0                        00            .byte	0
02003                                           ! 601  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02004 06B1                        00            .byte	0
02005 06B2                        00            .byte	0
02006 06B3                        00            .byte	0
02007 06B4                        00            .byte	0
02008 06B5                        00            .byte	0
02009 06B6                        00            .byte	0
02010 06B7                        00            .byte	0
02011 06B8                        00            .byte	0
02012                                           ! 602  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02013 06B9                        00            .byte	0
02014 06BA                        00            .byte	0
02015 06BB                        00            .byte	0
02016 06BC                        00            .byte	0
02017 06BD                        00            .byte	0
02018 06BE                        00            .byte	0
02019 06BF                        00            .byte	0
02020 06C0                        00            .byte	0
02021                                           ! 603  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02022 06C1                        00            .byte	0
02023 06C2                        00            .byte	0
02024 06C3                        00            .byte	0
02025 06C4                        00            .byte	0
02026 06C5                        00            .byte	0
02027 06C6                        00            .byte	0
02028 06C7                        00            .byte	0
02029 06C8                        00            .byte	0
02030                                           ! 604  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02031 06C9                        00            .byte	0
02032 06CA                        00            .byte	0
02033 06CB                        00            .byte	0
02034 06CC                        00            .byte	0
02035 06CD                        00            .byte	0
02036 06CE                        00            .byte	0
02037 06CF                        00            .byte	0
02038 06D0                        00            .byte	0
02039                                           ! 605 },
02040                                           ! 606 {
02041                                           ! 607  80, 24, 14, 0x00, 0x80,
02042 06D1                        50            .byte	$50
02043 06D2                        18            .byte	$18
02044 06D3                        0E            .byte	$E
02045 06D4                        00            .byte	0
02046 06D5                        80            .byte	$80
02047                                           ! 608  0x01, 0x0f, 0x00, 0x06,
02048 06D6                        01            .byte	1
02049 06D7                        0F            .byte	$F
02050 06D8                        00            .byte	0
02051 06D9                        06            .byte	6
02052                                           ! 609  0xa3,
02053 06DA                        A3            .byte	$A3
02054                                           ! 610  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
02055 06DB                        5F            .byte	$5F
02056 06DC                        4F            .byte	$4F
02057 06DD                        50            .byte	$50
02058 06DE                        82            .byte	$82
02059 06DF                        54            .byte	$54
02060 06E0                        80            .byte	$80
02061 06E1                        BF            .byte	$BF
02062 06E2                        1F            .byte	$1F
02063                                           ! 611  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02064 06E3                        00            .byte	0
02065 06E4                        40            .byte	$40
02066 06E5                        00            .byte	0
02067 06E6                        00            .byte	0
02068 06E7                        00            .byte	0
02069 06E8                        00            .byte	0
02070 06E9                        00            .byte	0
02071 06EA                        00            .byte	0
02072                                           ! 612  0x83, 0x85, 0x5d, 0x28, 0x0f, 0x63, 0xba, 0xe3,
02073 06EB                        83            .byte	$83
02074 06EC                        85            .byte	$85
02075 06ED                        5D            .byte	$5D
02076 06EE                        28            .byte	$28
02077 06EF                        0F            .byte	$F
02078 06F0                        63            .byte	$63
02079 06F1                        BA            .byte	$BA
02080 06F2                        E3            .byte	$E3
02081                                           ! 613  0xff,
02082 06F3                        FF            .byte	$FF
02083                                           ! 614  0x00, 0x08, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00,
02084 06F4                        00            .byte	0
02085 06F5                        08            .byte	8
02086 06F6                        00            .byte	0
02087 06F7                        00            .byte	0
02088 06F8                        18            .byte	$18
02089 06F9                        18            .byte	$18
02090 06FA                        00            .byte	0
02091 06FB                        00            .byte	0
02092                                           ! 615  0x00, 0x08, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00,
02093 06FC                        00            .byte	0
02094 06FD                        08            .byte	8
02095 06FE                        00            .byte	0
02096 06FF                        00            .byte	0
02097 0700                        00            .byte	0
02098 0701                        18            .byte	$18
02099 0702                        00            .byte	0
02100 0703                        00            .byte	0
02101                                           ! 616  0x01, 0x00, 0x01, 0x00,
02102 0704                        01            .byte	1
02103 0705                        00            .byte	0
02104 0706                        01            .byte	1
02105 0707                        00            .byte	0
02106                                           ! 617  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02107 0708                        00            .byte	0
02108 0709                        00            .byte	0
02109 070A                        00            .byte	0
02110 070B                        00            .byte	0
02111 070C                        00            .byte	0
02112 070D                        00            .byte	0
02113 070E                        05            .byte	5
02114 070F                        0F            .byte	$F
02115 0710                        FF            .byte	$FF
02116                                           ! 618 },
02117                                           ! 619 {
02118                                           ! 620  80, 24, 14, 0x00, 0x80,
02119 0711                        50            .byte	$50
02120 0712                        18            .byte	$18
02121 0713                        0E            .byte	$E
02122 0714                        00            .byte	0
02123 0715                        80            .byte	$80
02124                                           ! 621  0x01, 0x0f, 0x00, 0x06,
02125 0716                        01            .byte	1
02126 0717                        0F            .byte	$F
02127 0718                        00            .byte	0
02128 0719                        06            .byte	6
02129                                           ! 622  0xa3,
02130 071A                        A3            .byte	$A3
02131                                           ! 623  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
02132 071B                        5F            .byte	$5F
02133 071C                        4F            .byte	$4F
02134 071D                        50            .byte	$50
02135 071E                        82            .byte	$82
02136 071F                        54            .byte	$54
02137 0720                        80            .byte	$80
02138 0721                        BF            .byte	$BF
02139 0722                        1F            .byte	$1F
02140                                           ! 624  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02141 0723                        00            .byte	0
02142 0724                        40            .byte	$40
02143 0725                        00            .byte	0
02144 0726                        00            .byte	0
02145 0727                        00            .byte	0
02146 0728                        00            .byte	0
02147 0729                        00            .byte	0
02148 072A                        00            .byte	0
02149                                           ! 625  0x83, 0x85, 0x5d, 0x28, 0x0f, 0x63, 0xba, 0xe3,
02150 072B                        83            .byte	$83
02151 072C                        85            .byte	$85
02152 072D                        5D            .byte	$5D
02153 072E                        28            .byte	$28
02154 072F                        0F            .byte	$F
02155 0730                        63            .byte	$63
02156 0731                        BA            .byte	$BA
02157 0732                        E3            .byte	$E3
02158                                           ! 626  0xff,
02159 0733                        FF            .byte	$FF
02160                                           ! 627  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02161 0734                        00            .byte	0
02162 0735                        01            .byte	1
02163 0736                        02            .byte	2
02164 0737                        03            .byte	3
02165 0738                        04            .byte	4
02166 0739                        05            .byte	5
02167 073A                        14            .byte	$14
02168 073B                        07            .byte	7
02169                                           ! 628  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02170 073C                        38            .byte	$38
02171 073D                        39            .byte	$39
02172 073E                        3A            .byte	$3A
02173 073F                        3B            .byte	$3B
02174 0740                        3C            .byte	$3C
02175 0741                        3D            .byte	$3D
02176 0742                        3E            .byte	$3E
02177 0743                        3F            .byte	$3F
02178                                           ! 629  0x01, 0x00, 0x0f, 0x00,
02179 0744                        01            .byte	1
02180 0745                        00            .byte	0
02181 0746                        0F            .byte	$F
02182 0747                        00            .byte	0
02183                                           ! 630  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02184 0748                        00            .byte	0
02185 0749                        00            .byte	0
02186 074A                        00            .byte	0
02187 074B                        00            .byte	0
02188 074C                        00            .byte	0
02189 074D                        00            .byte	0
02190 074E                        05            .byte	5
02191 074F                        0F            .byte	$F
02192 0750                        FF            .byte	$FF
02193                                           ! 631 },
02194                                           ! 632 {
02195                                           ! 633  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02196 0751                        00            .byte	0
02197 0752                        00            .byte	0
02198 0753                        00            .byte	0
02199 0754                        00            .byte	0
02200 0755                        00            .byte	0
02201 0756                        00            .byte	0
02202 0757                        00            .byte	0
02203 0758                        00            .byte	0
02204                                           ! 634  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02205 0759                        00            .byte	0
02206 075A                        00            .byte	0
02207 075B                        00            .byte	0
02208 075C                        00            .byte	0
02209 075D                        00            .byte	0
02210 075E                        00            .byte	0
02211 075F                        00            .byte	0
02212 0760                        00            .byte	0
02213                                           ! 635  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02214 0761                        00            .byte	0
02215 0762                        00            .byte	0
02216 0763                        00            .byte	0
02217 0764                        00            .byte	0
02218 0765                        00            .byte	0
02219 0766                        00            .byte	0
02220 0767                        00            .byte	0
02221 0768                        00            .byte	0
02222                                           ! 636  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02223 0769                        00            .byte	0
02224 076A                        00            .byte	0
02225 076B                        00            .byte	0
02226 076C                        00            .byte	0
02227 076D                        00            .byte	0
02228 076E                        00            .byte	0
02229 076F                        00            .byte	0
02230 0770                        00            .byte	0
02231                                           ! 637  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02232 0771                        00            .byte	0
02233 0772                        00            .byte	0
02234 0773                        00            .byte	0
02235 0774                        00            .byte	0
02236 0775                        00            .byte	0
02237 0776                        00            .byte	0
02238 0777                        00            .byte	0
02239 0778                        00            .byte	0
02240                                           ! 638  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02241 0779                        00            .byte	0
02242 077A                        00            .byte	0
02243 077B                        00            .byte	0
02244 077C                        00            .byte	0
02245 077D                        00            .byte	0
02246 077E                        00            .byte	0
02247 077F                        00            .byte	0
02248 0780                        00            .byte	0
02249                                           ! 639  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02250 0781                        00            .byte	0
02251 0782                        00            .byte	0
02252 0783                        00            .byte	0
02253 0784                        00            .byte	0
02254 0785                        00            .byte	0
02255 0786                        00            .byte	0
02256 0787                        00            .byte	0
02257 0788                        00            .byte	0
02258                                           ! 640  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02259 0789                        00            .byte	0
02260 078A                        00            .byte	0
02261 078B                        00            .byte	0
02262 078C                        00            .byte	0
02263 078D                        00            .byte	0
02264 078E                        00            .byte	0
02265 078F                        00            .byte	0
02266 0790                        00            .byte	0
02267                                           ! 641 },
02268                                           ! 642 {
02269                                           ! 643  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02270 0791                        00            .byte	0
02271 0792                        00            .byte	0
02272 0793                        00            .byte	0
02273 0794                        00            .byte	0
02274 0795                        00            .byte	0
02275 0796                        00            .byte	0
02276 0797                        00            .byte	0
02277 0798                        00            .byte	0
02278                                           ! 644  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02279 0799                        00            .byte	0
02280 079A                        00            .byte	0
02281 079B                        00            .byte	0
02282 079C                        00            .byte	0
02283 079D                        00            .byte	0
02284 079E                        00            .byte	0
02285 079F                        00            .byte	0
02286 07A0                        00            .byte	0
02287                                           ! 645  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02288 07A1                        00            .byte	0
02289 07A2                        00            .byte	0
02290 07A3                        00            .byte	0
02291 07A4                        00            .byte	0
02292 07A5                        00            .byte	0
02293 07A6                        00            .byte	0
02294 07A7                        00            .byte	0
02295 07A8                        00            .byte	0
02296                                           ! 646  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02297 07A9                        00            .byte	0
02298 07AA                        00            .byte	0
02299 07AB                        00            .byte	0
02300 07AC                        00            .byte	0
02301 07AD                        00            .byte	0
02302 07AE                        00            .byte	0
02303 07AF                        00            .byte	0
02304 07B0                        00            .byte	0
02305                                           ! 647  
02306                                           ! 647 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02307 07B1                        00            .byte	0
02308 07B2                        00            .byte	0
02309 07B3                        00            .byte	0
02310 07B4                        00            .byte	0
02311 07B5                        00            .byte	0
02312 07B6                        00            .byte	0
02313 07B7                        00            .byte	0
02314 07B8                        00            .byte	0
02315                                           ! 648  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02316 07B9                        00            .byte	0
02317 07BA                        00            .byte	0
02318 07BB                        00            .byte	0
02319 07BC                        00            .byte	0
02320 07BD                        00            .byte	0
02321 07BE                        00            .byte	0
02322 07BF                        00            .byte	0
02323 07C0                        00            .byte	0
02324                                           ! 649  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02325 07C1                        00            .byte	0
02326 07C2                        00            .byte	0
02327 07C3                        00            .byte	0
02328 07C4                        00            .byte	0
02329 07C5                        00            .byte	0
02330 07C6                        00            .byte	0
02331 07C7                        00            .byte	0
02332 07C8                        00            .byte	0
02333                                           ! 650  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02334 07C9                        00            .byte	0
02335 07CA                        00            .byte	0
02336 07CB                        00            .byte	0
02337 07CC                        00            .byte	0
02338 07CD                        00            .byte	0
02339 07CE                        00            .byte	0
02340 07CF                        00            .byte	0
02341 07D0                        00            .byte	0
02342                                           ! 651 },
02343                                           ! 652 {
02344                                           ! 653  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02345 07D1                        00            .byte	0
02346 07D2                        00            .byte	0
02347 07D3                        00            .byte	0
02348 07D4                        00            .byte	0
02349 07D5                        00            .byte	0
02350 07D6                        00            .byte	0
02351 07D7                        00            .byte	0
02352 07D8                        00            .byte	0
02353                                           ! 654  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02354 07D9                        00            .byte	0
02355 07DA                        00            .byte	0
02356 07DB                        00            .byte	0
02357 07DC                        00            .byte	0
02358 07DD                        00            .byte	0
02359 07DE                        00            .byte	0
02360 07DF                        00            .byte	0
02361 07E0                        00            .byte	0
02362                                           ! 655  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02363 07E1                        00            .byte	0
02364 07E2                        00            .byte	0
02365 07E3                        00            .byte	0
02366 07E4                        00            .byte	0
02367 07E5                        00            .byte	0
02368 07E6                        00            .byte	0
02369 07E7                        00            .byte	0
02370 07E8                        00            .byte	0
02371                                           ! 656  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02372 07E9                        00            .byte	0
02373 07EA                        00            .byte	0
02374 07EB                        00            .byte	0
02375 07EC                        00            .byte	0
02376 07ED                        00            .byte	0
02377 07EE                        00            .byte	0
02378 07EF                        00            .byte	0
02379 07F0                        00            .byte	0
02380                                           ! 657  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02381 07F1                        00            .byte	0
02382 07F2                        00            .byte	0
02383 07F3                        00            .byte	0
02384 07F4                        00            .byte	0
02385 07F5                        00            .byte	0
02386 07F6                        00            .byte	0
02387 07F7                        00            .byte	0
02388 07F8                        00            .byte	0
02389                                           ! 658  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02390 07F9                        00            .byte	0
02391 07FA                        00            .byte	0
02392 07FB                        00            .byte	0
02393 07FC                        00            .byte	0
02394 07FD                        00            .byte	0
02395 07FE                        00            .byte	0
02396 07FF                        00            .byte	0
02397 0800                        00            .byte	0
02398                                           ! 659  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02399 0801                        00            .byte	0
02400 0802                        00            .byte	0
02401 0803                        00            .byte	0
02402 0804                        00            .byte	0
02403 0805                        00            .byte	0
02404 0806                        00            .byte	0
02405 0807                        00            .byte	0
02406 0808                        00            .byte	0
02407                                           ! 660  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02408 0809                        00            .byte	0
02409 080A                        00            .byte	0
02410 080B                        00            .byte	0
02411 080C                        00            .byte	0
02412 080D                        00            .byte	0
02413 080E                        00            .byte	0
02414 080F                        00            .byte	0
02415 0810                        00            .byte	0
02416                                           ! 661 },
02417                                           ! 662 {
02418                                           ! 663  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02419 0811                        00            .byte	0
02420 0812                        00            .byte	0
02421 0813                        00            .byte	0
02422 0814                        00            .byte	0
02423 0815                        00            .byte	0
02424 0816                        00            .byte	0
02425 0817                        00            .byte	0
02426 0818                        00            .byte	0
02427                                           ! 664  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02428 0819                        00            .byte	0
02429 081A                        00            .byte	0
02430 081B                        00            .byte	0
02431 081C                        00            .byte	0
02432 081D                        00            .byte	0
02433 081E                        00            .byte	0
02434 081F                        00            .byte	0
02435 0820                        00            .byte	0
02436                                           ! 665  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02437 0821                        00            .byte	0
02438 0822                        00            .byte	0
02439 0823                        00            .byte	0
02440 0824                        00            .byte	0
02441 0825                        00            .byte	0
02442 0826                        00            .byte	0
02443 0827                        00            .byte	0
02444 0828                        00            .byte	0
02445                                           ! 666  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02446 0829                        00            .byte	0
02447 082A                        00            .byte	0
02448 082B                        00            .byte	0
02449 082C                        00            .byte	0
02450 082D                        00            .byte	0
02451 082E                        00            .byte	0
02452 082F                        00            .byte	0
02453 0830                        00            .byte	0
02454                                           ! 667  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02455 0831                        00            .byte	0
02456 0832                        00            .byte	0
02457 0833                        00            .byte	0
02458 0834                        00            .byte	0
02459 0835                        00            .byte	0
02460 0836                        00            .byte	0
02461 0837                        00            .byte	0
02462 0838                        00            .byte	0
02463                                           ! 668  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02464 0839                        00            .byte	0
02465 083A                        00            .byte	0
02466 083B                        00            .byte	0
02467 083C                        00            .byte	0
02468 083D                        00            .byte	0
02469 083E                        00            .byte	0
02470 083F                        00            .byte	0
02471 0840                        00            .byte	0
02472                                           ! 669  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02473 0841                        00            .byte	0
02474 0842                        00            .byte	0
02475 0843                        00            .byte	0
02476 0844                        00            .byte	0
02477 0845                        00            .byte	0
02478 0846                        00            .byte	0
02479 0847                        00            .byte	0
02480 0848                        00            .byte	0
02481                                           ! 670  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02482 0849                        00            .byte	0
02483 084A                        00            .byte	0
02484 084B                        00            .byte	0
02485 084C                        00            .byte	0
02486 084D                        00            .byte	0
02487 084E                        00            .byte	0
02488 084F                        00            .byte	0
02489 0850                        00            .byte	0
02490                                           ! 671 },
02491                                           ! 672 {
02492                                           ! 673  40, 24, 16, 0x00, 0x08,
02493 0851                        28            .byte	$28
02494 0852                        18            .byte	$18
02495 0853                        10            .byte	$10
02496 0854                        00            .byte	0
02497 0855                        08            .byte	8
02498                                           ! 674  0x08, 0x03, 0x00, 0x02,
02499 0856                        08            .byte	8
02500 0857                        03            .byte	3
02501 0858                        00            .byte	0
02502 0859                        02            .byte	2
02503                                           ! 675  0x67,
02504 085A                        67            .byte	$67
02505                                           ! 676  0x2d, 0x27, 0x28, 0x90, 0x2b, 0xa0, 0xbf, 0x1f,
02506 085B                        2D            .byte	$2D
02507 085C                        27            .byte	$27
02508 085D                        28            .byte	$28
02509 085E                        90            .byte	$90
02510 085F                        2B            .byte	$2B
02511 0860                        A0            .byte	$A0
02512 0861                        BF            .byte	$BF
02513 0862                        1F            .byte	$1F
02514                                           ! 677  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
02515 0863                        00            .byte	0
02516 0864                        4F            .byte	$4F
02517 0865                        0D            .byte	$D
02518 0866                        0E            .byte	$E
02519 0867                        00            .byte	0
02520 0868                        00            .byte	0
02521 0869                        00            .byte	0
02522 086A                        00            .byte	0
02523                                           ! 678  0x9c, 0x8e, 0x8f, 0x14, 0x1f, 0x96, 0xb9, 0xa3,
02524 086B                        9C            .byte	$9C
02525 086C                        8E            .byte	$8E
02526 086D                        8F            .byte	$8F
02527 086E                        14            .byte	$14
02528 086F                        1F            .byte	$1F
02529 0870                        96            .byte	$96
02530 0871                        B9            .byte	$B9
02531 0872                        A3            .byte	$A3
02532                                           ! 679  0xff,
02533 0873                        FF            .byte	$FF
02534                                           ! 680  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02535 0874                        00            .byte	0
02536 0875                        01            .byte	1
02537 0876                        02            .byte	2
02538 0877                        03            .byte	3
02539 0878                        04            .byte	4
02540 0879                        05            .byte	5
02541 087A                        14            .byte	$14
02542 087B                        07            .byte	7
02543                                           ! 681  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02544 087C                        38            .byte	$38
02545 087D                        39            .byte	$39
02546 087E                        3A            .byte	$3A
02547 087F                        3B            .byte	$3B
02548 0880                        3C            .byte	$3C
02549 0881                        3D            .byte	$3D
02550 0882                        3E            .byte	$3E
02551 0883                        3F            .byte	$3F
02552                                           ! 682  0x0c, 0x00, 0x0f, 0x08,
02553 0884                        0C            .byte	$C
02554 0885                        00            .byte	0
02555 0886                        0F            .byte	$F
02556 0887                        08            .byte	8
02557                                           ! 683  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0e, 0x0f, 0xff,
02558 0888                        00            .byte	0
02559 0889                        00            .byte	0
02560 088A                        00            .byte	0
02561 088B                        00            .byte	0
02562 088C                        00            .byte	0
02563 088D                        10            .byte	$10
02564 088E                        0E            .byte	$E
02565 088F                        0F            .byte	$F
02566 0890                        FF            .byte	$FF
02567                                           ! 684 },
02568                                           ! 685 {
02569                                           ! 686  80, 24, 16, 0x00, 0x10,
02570 0891                        50            .byte	$50
02571 0892                        18            .byte	$18
02572 0893                        10            .byte	$10
02573 0894                        00            .byte	0
02574 0895                        10            .byte	$10
02575                                           ! 687  0x00, 0x03, 0x00, 0x02,
02576 0896                        00            .byte	0
02577 0897                        03            .byte	3
02578 0898                        00            .byte	0
02579 0899                        02            .byte	2
02580                                           ! 688  0x67,
02581 089A                        67            .byte	$67
02582                                           ! 689  0x5f, 0x4f, 0x50, 0x82, 0x55, 0x81, 0xbf, 0x1f,
02583 089B                        5F            .byte	$5F
02584 089C                        4F            .byte	$4F
02585 089D                        50            .byte	$50
02586 089E                        82            .byte	$82
02587 089F                        55            .byte	$55
02588 08A0                        81            .byte	$81
02589 08A1                        BF            .byte	$BF
02590 08A2                        1F            .byte	$1F
02591                                           ! 690  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
02592 08A3                        00            .byte	0
02593 08A4                        4F            .byte	$4F
02594 08A5                        0D            .byte	$D
02595 08A6                        0E            .byte	$E
02596 08A7                        00            .byte	0
02597 08A8                        00            .byte	0
02598 08A9                        00            .byte	0
02599 08AA                        00            .byte	0
02600                                           ! 691  0x9c, 0x8e, 0x8f, 0x28, 0x1f, 0x96, 0xb9, 0xa3,
02601 08AB                        9C            .byte	$9C
02602 08AC                        8E            .byte	$8E
02603 08AD                        8F            .byte	$8F
02604 08AE                        28            .byte	$28
02605 08AF                        1F            .byte	$1F
02606 08B0                        96            .byte	$96
02607 08B1                        B9            .byte	$B9
02608 08B2                        A3            .byte	$A3
02609                                           ! 692  0xff,
02610 08B3                        FF            .byte	$FF
02611                                           ! 693  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02612 08B4                        00            .byte	0
02613 08B5                        01            .byte	1
02614 08B6                        02            .byte	2
02615 08B7                        03            .byte	3
02616 08B8                        04            .byte	4
02617 08B9                        05            .byte	5
02618 08BA                        14            .byte	$14
02619 08BB                        07            .byte	7
02620                                           ! 694  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02621 08BC                        38            .byte	$38
02622 08BD                        39            .byte	$39
02623 08BE                        3A            .byte	$3A
02624 08BF                        3B            .byte	$3B
02625 08C0                        3C            .byte	$3C
02626 08C1                        3D            .byte	$3D
02627 08C2                        3E            .byte	$3E
02628 08C3                        3F            .byte	$3F
02629                                           ! 695  0x0c, 0x00, 0x0f, 0x08,
02630 08C4                        0C            .byte	$C
02631 08C5                        00            .byte	0
02632 08C6                        0F            .byte	$F
02633 08C7                        08            .byte	8
02634                                           ! 696  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0e, 0x0f, 0xff,
02635 08C8                        00            .byte	0
02636 08C9                        00            .byte	0
02637 08CA                        00            .byte	0
02638 08CB                        00            .byte	0
02639 08CC                        00            .byte	0
02640 08CD                        10            .byte	$10
02641 08CE                        0E            .byte	$E
02642 08CF                        0F            .byte	$F
02643 08D0                        FF            .byte	$FF
02644                                           ! 697 },
02645                                           ! 698 {
02646                                           ! 699  80, 24, 16, 0x00, 0x10,
02647 08D1                        50            .byte	$50
02648 08D2                        18            .byte	$18
02649 08D3                        10            .byte	$10
02650 08D4                        00            .byte	0
02651 08D5                        10            .byte	$10
02652                                           ! 700  0x00, 0x03, 0x00, 0x02,
02653 08D6                        00            .byte	0
02654 08D7                        03            .byte	3
02655 08D8                        00            .byte	0
02656 08D9                        02            .byte	2
02657                                           ! 701  0x66,
02658 08DA                        66            .byte	$66
02659                                           ! 702  0x5f, 0x4f, 0x50, 0x82, 0x55, 0x81, 0xbf, 0x1f,
02660 08DB                        5F            .byte	$5F
02661 08DC                        4F            .byte	$4F
02662 08DD                        50            .byte	$50
02663 08DE                        82            .byte	$82
02664 08DF                        55            .byte	$55
02665 08E0                        81            .byte	$81
02666 08E1                        BF            .byte	$BF
02667 08E2                        1F            .byte	$1F
02668                                           ! 703  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
02669 08E3                        00            .byte	0
02670 08E4                        4F            .byte	$4F
02671 08E5                        0D            .byte	$D
02672 08E6                        0E            .byte	$E
02673 08E7                        00            .byte	0
02674 08E8                        00            .byte	0
02675 08E9                        00            .byte	0
02676 08EA                        00            .byte	0
02677                                           ! 704  0x9c, 0x8e, 0x8f, 0x28, 0x0f, 0x96, 0xb9, 0xa3,
02678 08EB                        9C            .byte	$9C
02679 08EC                        8E            .byte	$8E
02680 08ED                        8F            .byte	$8F
02681 08EE                        28            .byte	$28
02682 08EF                        0F            .byte	$F
02683 08F0                        96            .byte	$96
02684 08F1                        B9            .byte	$B9
02685 08F2                        A3            .byte	$A3
02686                                           ! 705  0xff,
02687 08F3                        FF            .byte	$FF
02688                                           ! 706  0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
02689 08F4                        00            .byte	0
02690 08F5                        08            .byte	8
02691 08F6                        08            .byte	8
02692 08F7                        08            .byte	8
02693 08F8                        08            .byte	8
02694 08F9                        08            .byte	8
02695 08FA                        08            .byte	8
02696 08FB                        08            .byte	8
02697                                           ! 707  0x10,
02698                                           ! 707  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
02699 08FC                        10            .byte	$10
02700 08FD                        18            .byte	$18
02701 08FE                        18            .byte	$18
02702 08FF                        18            .byte	$18
02703 0900                        18            .byte	$18
02704 0901                        18            .byte	$18
02705 0902                        18            .byte	$18
02706 0903                        18            .byte	$18
02707                                           ! 708  0x0e, 0x00, 0x0f, 0x08,
02708 0904                        0E            .byte	$E
02709 0905                        00            .byte	0
02710 0906                        0F            .byte	$F
02711 0907                        08            .byte	8
02712                                           ! 709  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0a, 0x0f, 0xff,
02713 0908                        00            .byte	0
02714 0909                        00            .byte	0
02715 090A                        00            .byte	0
02716 090B                        00            .byte	0
02717 090C                        00            .byte	0
02718 090D                        10            .byte	$10
02719 090E                        0A            .byte	$A
02720 090F                        0F            .byte	$F
02721 0910                        FF            .byte	$FF
02722                                           ! 710 },
02723                                           ! 711 {
02724                                           ! 712  80, 29, 16, 0x00, 0x00,
02725 0911                        50            .byte	$50
02726 0912                        1D            .byte	$1D
02727 0913                        10            .byte	$10
02728 0914                        00            .byte	0
02729 0915                        00            .byte	0
02730                                           ! 713  0x01, 0x0f, 0x00, 0x06,
02731 0916                        01            .byte	1
02732 0917                        0F            .byte	$F
02733 0918                        00            .byte	0
02734 0919                        06            .byte	6
02735                                           ! 714  0xe3,
02736 091A                        E3            .byte	$E3
02737                                           ! 715  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0x0b, 0x3e,
02738 091B                        5F            .byte	$5F
02739 091C                        4F            .byte	$4F
02740 091D                        50            .byte	$50
02741 091E                        82            .byte	$82
02742 091F                        54            .byte	$54
02743 0920                        80            .byte	$80
02744 0921                        0B            .byte	$B
02745 0922                        3E            .byte	$3E
02746                                           ! 716  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02747 0923                        00            .byte	0
02748 0924                        40            .byte	$40
02749 0925                        00            .byte	0
02750 0926                        00            .byte	0
02751 0927                        00            .byte	0
02752 0928                        00            .byte	0
02753 0929                        00            .byte	0
02754 092A                        00            .byte	0
02755                                           ! 717  0xea, 0x8c, 0xdf, 0x28, 0x00, 0xe7, 0x04, 0xe3,
02756 092B                        EA            .byte	$EA
02757 092C                        8C            .byte	$8C
02758 092D                        DF            .byte	$DF
02759 092E                        28            .byte	$28
02760 092F                        00            .byte	0
02761 0930                        E7            .byte	$E7
02762 0931                        04            .byte	4
02763 0932                        E3            .byte	$E3
02764                                           ! 718  0xff,
02765 0933                        FF            .byte	$FF
02766                                           ! 719  0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f,
02767 0934                        00            .byte	0
02768 0935                        3F            .byte	$3F
02769 0936                        00            .byte	0
02770 0937                        3F            .byte	$3F
02771 0938                        00            .byte	0
02772 0939                        3F            .byte	$3F
02773 093A                        00            .byte	0
02774 093B                        3F            .byte	$3F
02775                                           ! 720  0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f,
02776 093C                        00            .byte	0
02777 093D                        3F            .byte	$3F
02778 093E                        00            .byte	0
02779 093F                        3F            .byte	$3F
02780 0940                        00            .byte	0
02781 0941                        3F            .byte	$3F
02782 0942                        00            .byte	0
02783 0943                        3F            .byte	$3F
02784                                           ! 721  0x01, 0x00, 0x0f, 0x00,
02785 0944                        01            .byte	1
02786 0945                        00            .byte	0
02787 0946                        0F            .byte	$F
02788 0947                        00            .byte	0
02789                                           ! 722  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02790 0948                        00            .byte	0
02791 0949                        00            .byte	0
02792 094A                        00            .byte	0
02793 094B                        00            .byte	0
02794 094C                        00            .byte	0
02795 094D                        00            .byte	0
02796 094E                        05            .byte	5
02797 094F                        0F            .byte	$F
02798 0950                        FF            .byte	$FF
02799                                           ! 723 },
02800                                           ! 724 {
02801                                           ! 725  80, 29, 16, 0x00, 0x00,
02802 0951                        50            .byte	$50
02803 0952                        1D            .byte	$1D
02804 0953                        10            .byte	$10
02805 0954                        00            .byte	0
02806 0955                        00            .byte	0
02807                                           ! 726  0x01, 0x0f, 0x00, 0x06,
02808 0956                        01            .byte	1
02809 0957                        0F            .byte	$F
02810 0958                        00            .byte	0
02811 0959                        06            .byte	6
02812                                           ! 727  0xe3,
02813 095A                        E3            .byte	$E3
02814                                           ! 728  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0x0b, 0x3e,
02815 095B                        5F            .byte	$5F
02816 095C                        4F            .byte	$4F
02817 095D                        50            .byte	$50
02818 095E                        82            .byte	$82
02819 095F                        54            .byte	$54
02820 0960                        80            .byte	$80
02821 0961                        0B            .byte	$B
02822 0962                        3E            .byte	$3E
02823                                           ! 729  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02824 0963                        00            .byte	0
02825 0964                        40            .byte	$40
02826 0965                        00            .byte	0
02827 0966                        00            .byte	0
02828 0967                        00            .byte	0
02829 0968                        00            .byte	0
02830 0969                        00            .byte	0
02831 096A                        00            .byte	0
02832                                           ! 730  0xea, 0x8c, 0xdf, 0x28, 0x00, 0xe7, 0x04, 0xe3,
02833 096B                        EA            .byte	$EA
02834 096C                        8C            .byte	$8C
02835 096D                        DF            .byte	$DF
02836 096E                        28            .byte	$28
02837 096F                        00            .byte	0
02838 0970                        E7            .byte	$E7
02839 0971                        04            .byte	4
02840 0972                        E3            .byte	$E3
02841                                           ! 731  0xff,
02842 0973                        FF            .byte	$FF
02843                                           ! 732  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02844 0974                        00            .byte	0
02845 0975                        01            .byte	1
02846 0976                        02            .byte	2
02847 0977                        03            .byte	3
02848 0978                        04            .byte	4
02849 0979                        05            .byte	5
02850 097A                        14            .byte	$14
02851 097B                        07            .byte	7
02852                                           ! 733  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02853 097C                        38            .byte	$38
02854 097D                        39            .byte	$39
02855 097E                        3A            .byte	$3A
02856 097F                        3B            .byte	$3B
02857 0980                        3C            .byte	$3C
02858 0981                        3D            .byte	$3D
02859 0982                        3E            .byte	$3E
02860 0983                        3F            .byte	$3F
02861                                           ! 734  0x01, 0x00, 0x0f, 0x00,
02862 0984                        01            .byte	1
02863 0985                        00            .byte	0
02864 0986                        0F            .byte	$F
02865 0987                        00            .byte	0
02866                                           ! 735  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02867 0988                        00            .byte	0
02868 0989                        00            .byte	0
02869 098A                        00            .byte	0
02870 098B                        00            .byte	0
02871 098C                        00            .byte	0
02872 098D                        00            .byte	0
02873 098E                        05            .byte	5
02874 098F                        0F            .byte	$F
02875 0990                        FF            .byte	$FF
02876                                           ! 736 },
02877                                           ! 737 {
02878                                           ! 738  40, 24, 8, 0x00, 0x00,
02879 0991                        28            .byte	$28
02880 0992                        18            .byte	$18
02881 0993                        08            .byte	8
02882 0994                        00            .byte	0
02883 0995                        00            .byte	0
02884                                           ! 739  0x01, 0x0f, 0x00, 0x0e,
02885 0996                        01            .byte	1
02886 0997                        0F            .byte	$F
02887 0998                        00            .byte	0
02888 0999                        0E            .byte	$E
02889                                           ! 740  0x63,
02890 099A                        63            .byte	$63
02891                                           ! 741  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
02892 099B                        5F            .byte	$5F
02893 099C                        4F            .byte	$4F
02894 099D                        50            .byte	$50
02895 099E                        82            .byte	$82
02896 099F                        54            .byte	$54
02897 09A0                        80            .byte	$80
02898 09A1                        BF            .byte	$BF
02899 09A2                        1F            .byte	$1F
02900                                           ! 742  0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02901 09A3                        00            .byte	0
02902 09A4                        41            .byte	$41
02903 09A5                        00            .byte	0
02904 09A6                        00            .byte	0
02905 09A7                        00            .byte	0
02906 09A8                        00            .byte	0
02907 09A9                        00            .byte	0
02908 09AA                        00            .byte	0
02909                                           ! 743  0x9c, 0x8e, 0x8f, 0x28, 0x40, 0x96, 0xb9, 0xa3,
02910 09AB                        9C            .byte	$9C
02911 09AC                        8E            .byte	$8E
02912 09AD                        8F            .byte	$8F
02913 09AE                        28            .byte	$28
02914 09AF                        40            .byte	$40
02915 09B0                        96            .byte	$96
02916 09B1                        B9            .byte	$B9
02917 09B2                        A3            .byte	$A3
02918                                           ! 744  0xff,
02919 09B3                        FF            .byte	$FF
02920                                           ! 745  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
02921 09B4                        00            .byte	0
02922 09B5                        01            .byte	1
02923 09B6                        02            .byte	2
02924 09B7                        03            .byte	3
02925 09B8                        04            .byte	4
02926 09B9                        05            .byte	5
02927 09BA                        06            .byte	6
02928 09BB                        07            .byte	7
02929                                           ! 746  0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
02930 09BC                        08            .byte	8
02931 09BD                        09            .byte	9
02932 09BE                        0A            .byte	$A
02933 09BF                        0B            .byte	$B
02934 09C0                        0C            .byte	$C
02935 09C1                        0D            .byte	$D
02936 09C2                        0E            .byte	$E
02937 09C3                        0F            .byte	$F
02938                                           ! 747  0x41, 0x00, 0x0f, 0x00,
02939 09C4                        41            .byte	$41
02940 09C5                        00            .byte	0
02941 09C6                        0F            .byte	$F
02942 09C7                        00            .byte	0
02943                                           ! 748  0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x05, 0x0f, 0xff,
02944 09C8                        00            .byte	0
02945 09C9                        00            .byte	0
02946 09CA                        00            .byte	0
02947 09CB                        00            .byte	0
02948 09CC                        00            .byte	0
02949 09CD                        40            .byte	$40
02950 09CE                        05            .byte	5
02951 09CF                        0F            .byte	$F
02952 09D0                        FF            .byte	$FF
02953                                           ! 749 },
02954                                           ! 750 {
02955                                           ! 751  100, 36, 16, 0x00, 0x00,
02956 09D1                        64            .byte	$64
02957 09D2                        24            .byte	$24
02958 09D3                        10            .byte	$10
02959 09D4                        00            .byte	0
02960 09D5                        00            .byte	0
02961                                           ! 752  0x01, 0x0f, 0x00, 0x06,
02962 09D6                        01            .byte	1
02963 09D7                        0F            .byte	$F
02964 09D8                        00            .byte	0
02965 09D9                        06            .byte	6
02966                                           ! 753  0xe3,
02967 09DA                        E3            .byte	$E3
02968                                           ! 754  0x7f, 0x63, 0x63, 0x83, 0x6b, 0x1b, 0x72, 0xf0,
02969 09DB                        7F            .byte	$7F
02970 09DC                        63            .byte	$63
02971 09DD                        63            .byte	$63
02972 09DE                        83            .byte	$83
02973 09DF                        6B            .byte	$6B
02974 09E0                        1B            .byte	$1B
02975 09E1                        72            .byte	$72
02976 09E2                        F0            .byte	$F0
02977                                           ! 755  0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02978 09E3                        00            .byte	0
02979 09E4                        60            .byte	$60
02980 09E5                        00            .byte	0
02981 09E6                        00            .byte	0
02982 09E7                        00            .byte	0
02983 09E8                        00            .byte	0
02984 09E9                        00            .byte	0
02985 09EA                        00            .byte	0
02986                                           ! 756  0x59, 0x8d, 0x57, 0x32, 0x00, 0x57, 0x73, 0xe3,
02987 09EB                        59            .byte	$59
02988 09EC                        8D            .byte	$8D
02989 09ED                        57            .byte	$57
02990 09EE                        32            .byte	$32
02991 09EF                        00            .byte	0
02992 09F0                        57            .byte	$57
02993 09F1                        73            .byte	$73
02994 09F2                        E3            .byte	$E3
02995                                           ! 757  0xff,
02996 09F3                        FF            .byte	$FF
02997                                           ! 758  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02998 09F4                        00            .byte	0
02999 09F5                        01            .byte	1
03000 09F6                        02            .byte	2
03001 09F7                        03            .byte	3
03002 09F8                        04            .byte	4
03003 09F9                        05            .byte	5
03004 09FA                        14            .byte	$14
03005 09FB                        07            .byte	7
03006                                           ! 759  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
03007 09FC                        38            .byte	$38
03008 09FD                        39            .byte	$39
03009 09FE                        3A            .byte	$3A
03010 09FF                        3B            .byte	$3B
03011 0A00                        3C            .byte	$3C
03012 0A01                        3D            .byte	$3D
03013 0A02                        3E            .byte	$3E
03014 0A03                        3F            .byte	$3F
03015                                           ! 760  0x01, 0x00, 0x0f, 0x00,
03016 0A04                        01            .byte	1
03017 0A05                        00            .byte	0
03018 0A06                        0F            .byte	$F
03019 0A07                        00            .byte	0
03020                                           ! 761  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
03021 0A08                        00            .byte	0
03022 0A09                        00            .byte	0
03023 0A0A                        00            .byte	0
03024 0A0B                        00            .byte	0
03025 0A0C                        00            .byte	0
03026 0A0D                        00            .byte	0
03027 0A0E                        05            .byte	5
03028 0A0F                        0F            .byte	$F
03029 0A10                        FF            .byte	$FF
03030                                           ! 762 },
03031                                           ! 763 };
03032                                           !BCC_EOS
03033                                           ! 764 static Bit8u palette0[63+1][3]=
03034                                           ! 765 {
03035                       00000A11            _palette0:
03036                                           ! 766   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00,
03037 0A11                        00            .byte	0
03038 0A12                        00            .byte	0
03039 0A13                        00            .byte	0
03040 0A14                        00            .byte	0
03041 0A15                        00            .byte	0
03042 0A16                        00            .byte	0
03043 0A17                        00            .byte	0
03044 0A18                        00            .byte	0
03045 0A19                        00            .byte	0
03046 0A1A                        00            .byte	0
03047 0A1B                        00            .byte	0
03048 0A1C                        00            .byte	0
03049 0A1D                        00            .byte	0
03050 0A1E                        00            .byte	0
03051 0A1F                        00            .byte	0
03052 0A20                        00            .byte	0
03053 0A21                        00            .byte	0
03054 0A22                        00            .byte	0
03055 0A23                        00            .byte	0
03056 0A24                        00            .byte	0
03057 0A25                        00            .byte	0
03058 0A26                        00            .byte	0
03059 0A27                        00            .byte	0
03060 0A28                        00            .byte	0
03061                                           ! 767   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
03062 0A29                        2A            .byte	$2A
03063 0A2A                        2A            .byte	$2A
03064 0A2B                        2A            .byte	$2A
03065 0A2C                        2A            .byte	$2A
03066 0A2D                        2A            .byte	$2A
03067 0A2E                        2A            .byte	$2A
03068 0A2F                        2A            .byte	$2A
03069 0A30                        2A            .byte	$2A
03070 0A31                        2A            .byte	$2A
03071 0A32                        2A            .byte	$2A
03072 0A33                        2A            .byte	$2A
03073 0A34                        2A            .byte	$2A
03074 0A35                        2A            .byte	$2A
03075 0A36                        2A            .byte	$2A
03076 0A37                        2A            .byte	$2A
03077 0A38                        2A            .byte	$2A
03078 0A39                        2A            .byte	$2A
03079 0A3A                        2A            .byte	$2A
03080 0A3B                        2A            .byte	$2A
03081 0A3C                        2A            .byte	$2A
03082 0A3D                        2A            .byte	$2A
03083 0A3E                        2A            .byte	$2A
03084 0A3F                        2A            .byte	$2A
03085 0A40                        2A            .byte	$2A
03086                                           ! 768   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
03087 0A41                        2A            .byte	$2A
03088 0A42                        2A            .byte	$2A
03089 0A43                        2A            .byte	$2A
03090 0A44                        2A            .byte	$2A
03091 0A45                        2A            .byte	$2A
03092 0A46                        2A            .byte	$2A
03093 0A47                        2A            .byte	$2A
03094 0A48                        2A            .byte	$2A
03095                                           ! 768  0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
03096 0A49                        2A            .byte	$2A
03097 0A4A                        2A            .byte	$2A
03098 0A4B                        2A            .byte	$2A
03099 0A4C                        2A            .byte	$2A
03100 0A4D                        2A            .byte	$2A
03101 0A4E                        2A            .byte	$2A
03102 0A4F                        2A            .byte	$2A
03103 0A50                        2A            .byte	$2A
03104 0A51                        2A            .byte	$2A
03105 0A52                        2A            .byte	$2A
03106 0A53                        2A            .byte	$2A
03107 0A54                        2A            .byte	$2A
03108 0A55                        2A            .byte	$2A
03109 0A56                        2A            .byte	$2A
03110 0A57                        2A            .byte	$2A
03111 0A58                        2A            .byte	$2A
03112                                           ! 769   0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f,
03113 0A59                        3F            .byte	$3F
03114 0A5A                        3F            .byte	$3F
03115 0A5B                        3F            .byte	$3F
03116 0A5C                        3F            .byte	$3F
03117 0A5D                        3F            .byte	$3F
03118 0A5E                        3F            .byte	$3F
03119 0A5F                        3F            .byte	$3F
03120 0A60                        3F            .byte	$3F
03121 0A61                        3F            .byte	$3F
03122 0A62                        3F            .byte	$3F
03123 0A63                        3F            .byte	$3F
03124 0A64                        3F            .byte	$3F
03125 0A65                        3F            .byte	$3F
03126 0A66                        3F            .byte	$3F
03127 0A67                        3F            .byte	$3F
03128 0A68                        3F            .byte	$3F
03129 0A69                        3F            .byte	$3F
03130 0A6A                        3F            .byte	$3F
03131 0A6B                        3F            .byte	$3F
03132 0A6C                        3F            .byte	$3F
03133 0A6D                        3F            .byte	$3F
03134 0A6E                        3F            .byte	$3F
03135 0A6F                        3F            .byte	$3F
03136 0A70                        3F            .byte	$3F
03137                                           ! 770   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00,
03138 0A71                        00            .byte	0
03139 0A72                        00            .byte	0
03140 0A73                        00            .byte	0
03141 0A74                        00            .byte	0
03142 0A75                        00            .byte	0
03143 0A76                        00            .byte	0
03144 0A77                        00            .byte	0
03145 0A78                        00            .byte	0
03146 0A79                        00            .byte	0
03147 0A7A                        00            .byte	0
03148 0A7B                        00            .byte	0
03149 0A7C                        00            .byte	0
03150 0A7D                        00            .byte	0
03151 0A7E                        00            .byte	0
03152 0A7F                        00            .byte	0
03153 0A80                        00            .byte	0
03154 0A81                        00            .byte	0
03155 0A82                        00            .byte	0
03156 0A83                        00            .byte	0
03157 0A84                        00            .byte	0
03158 0A85                        00            .byte	0
03159 0A86                        00            .byte	0
03160 0A87                        00            .byte	0
03161 0A88                        00            .byte	0
03162                                           ! 771   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
03163 0A89                        2A            .byte	$2A
03164 0A8A                        2A            .byte	$2A
03165 0A8B                        2A            .byte	$2A
03166 0A8C                        2A            .byte	$2A
03167 0A8D                        2A            .byte	$2A
03168 0A8E                        2A            .byte	$2A
03169 0A8F                        2A            .byte	$2A
03170 0A90                        2A            .byte	$2A
03171 0A91                        2A            .byte	$2A
03172 0A92                        2A            .byte	$2A
03173 0A93                        2A            .byte	$2A
03174 0A94                        2A            .byte	$2A
03175 0A95                        2A            .byte	$2A
03176 0A96                        2A            .byte	$2A
03177 0A97                        2A            .byte	$2A
03178 0A98                        2A            .byte	$2A
03179 0A99                        2A            .byte	$2A
03180 0A9A                        2A            .byte	$2A
03181 0A9B                        2A            .byte	$2A
03182 0A9C                        2A            .byte	$2A
03183 0A9D                        2A            .byte	$2A
03184 0A9E                        2A            .byte	$2A
03185 0A9F                        2A            .byte	$2A
03186 0AA0                        2A            .byte	$2A
03187                                           ! 772   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
03188 0AA1                        2A            .byte	$2A
03189 0AA2                        2A            .byte	$2A
03190 0AA3                        2A            .byte	$2A
03191 0AA4                        2A            .byte	$2A
03192 0AA5                        2A            .byte	$2A
03193 0AA6                        2A            .byte	$2A
03194 0AA7                        2A            .byte	$2A
03195 0AA8                        2A            .byte	$2A
03196 0AA9                        2A            .byte	$2A
03197 0AAA                        2A            .byte	$2A
03198 0AAB                        2A            .byte	$2A
03199 0AAC                        2A            .byte	$2A
03200 0AAD                        2A            .byte	$2A
03201 0AAE                        2A            .byte	$2A
03202 0AAF                        2A            .byte	$2A
03203 0AB0                        2A            .byte	$2A
03204 0AB1                        2A            .byte	$2A
03205 0AB2                        2A            .byte	$2A
03206 0AB3                        2A            .byte	$2A
03207 0AB4                        2A            .byte	$2A
03208 0AB5                        2A            .byte	$2A
03209 0AB6                        2A            .byte	$2A
03210 0AB7                        2A            .byte	$2A
03211 0AB8                        2A            .byte	$2A
03212                                           ! 773   0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f
03213 0AB9                        3F            .byte	$3F
03214 0ABA                        3F            .byte	$3F
03215 0ABB                        3F            .byte	$3F
03216 0ABC                        3F            .byte	$3F
03217 0ABD                        3F            .byte	$3F
03218 0ABE                        3F            .byte	$3F
03219 0ABF                        3F            .byte	$3F
03220 0AC0                        3F            .byte	$3F
03221 0AC1                        3F            .byte	$3F
03222 0AC2                        3F            .byte	$3F
03223 0AC3                        3F            .byte	$3F
03224 0AC4                        3F            .byte	$3F
03225 0AC5                        3F            .byte	$3F
03226 0AC6                        3F            .byte	$3F
03227 0AC7                        3F            .byte	$3F
03228 0AC8                        3F            .byte	$3F
03229 0AC9                        3F            .byte	$3F
03230 0ACA                        3F            .byte	$3F
03231 0ACB                        3F            .byte	$3F
03232 0ACC                        3F            .byte	$3F
03233 0ACD                        3F            .byte	$3F
03234 0ACE                        3F            .byte	$3F
03235 0ACF                        3F            .byte	$3F
03236                                           ! 774 };
03237 0AD0                        3F            .byte	$3F
03238                                           !BCC_EOS
03239                                           ! 775 static Bit8u palette1[63+1][3]=
03240                                           ! 776 {
03241                       00000AD1            _palette1:
03242                                           ! 777   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03243 0AD1                        00            .byte	0
03244 0AD2                        00            .byte	0
03245 0AD3                        00            .byte	0
03246 0AD4                        00            .byte	0
03247 0AD5                        00            .byte	0
03248 0AD6                        2A            .byte	$2A
03249 0AD7                        00            .byte	0
03250 0AD8                        2A            .byte	$2A
03251 0AD9                        00            .byte	0
03252 0ADA                        00            .byte	0
03253 0ADB                        2A            .byte	$2A
03254 0ADC                        2A            .byte	$2A
03255 0ADD                        2A            .byte	$2A
03256 0ADE                        00            .byte	0
03257 0ADF                        00            .byte	0
03258 0AE0                        2A            .byte	$2A
03259 0AE1                        00            .byte	0
03260 0AE2                        2A            .byte	$2A
03261 0AE3                        2A            .byte	$2A
03262 0AE4                        15            .byte	$15
03263 0AE5                        00            .byte	0
03264 0AE6                        2A            .byte	$2A
03265 0AE7                        2A            .byte	$2A
03266 0AE8                        2A            .byte	$2A
03267                                           ! 778   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03268 0AE9                        00            .byte	0
03269 0AEA                        00            .byte	0
03270 0AEB                        00            .byte	0
03271 0AEC                        00            .byte	0
03272 0AED                        00            .byte	0
03273 0AEE                        2A            .byte	$2A
03274 0AEF                        00            .byte	0
03275 0AF0                        2A            .byte	$2A
03276 0AF1                        00            .byte	0
03277 0AF2                        00            .byte	0
03278 0AF3                        2A            .byte	$2A
03279 0AF4                        2A            .byte	$2A
03280 0AF5                        2A            .byte	$2A
03281 0AF6                        00            .byte	0
03282 0AF7                        00            .byte	0
03283 0AF8                        2A            .byte	$2A
03284 0AF9                        00            .byte	0
03285 0AFA                        2A            .byte	$2A
03286 0AFB                        2A            .byte	$2A
03287 0AFC                        15            .byte	$15
03288 0AFD                        00            .byte	0
03289 0AFE                        2A            .byte	$2A
03290 0AFF                        2A            .byte	$2A
03291 0B00                        2A            .byte	$2A
03292                                           ! 779   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03293 0B01                        15            .byte	$15
03294 0B02                        15            .byte	$15
03295 0B03                        15            .byte	$15
03296 0B04                        15            .byte	$15
03297 0B05                        15            .byte	$15
03298 0B06                        3F            .byte	$3F
03299 0B07                        15            .byte	$15
03300 0B08                        3F            .byte	$3F
03301 0B09                        15            .byte	$15
03302 0B0A                        15            .byte	$15
03303 0B0B                        3F            .byte	$3F
03304 0B0C                        3F            .byte	$3F
03305 0B0D                        3F            .byte	$3F
03306 0B0E                        15            .byte	$15
03307 0B0F                        15            .byte	$15
03308 0B10                        3F            .byte	$3F
03309 0B11                        15            .byte	$15
03310 0B12                        3F            .byte	$3F
03311 0B13                        3F            .byte	$3F
03312 0B14                        3F            .byte	$3F
03313 0B15                        15            .byte	$15
03314 0B16                        3F            .byte	$3F
03315 0B17                        3F            .byte	$3F
03316 0B18                        3F            .byte	$3F
03317                                           ! 780   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03318 0B19                        15            .byte	$15
03319 0B1A                        15            .byte	$15
03320 0B1B                        15            .byte	$15
03321 0B1C                        15            .byte	$15
03322 0B1D                        15            .byte	$15
03323 0B1E                        3F            .byte	$3F
03324 0B1F                        15            .byte	$15
03325 0B20                        3F            .byte	$3F
03326 0B21                        15            .byte	$15
03327 0B22                        15            .byte	$15
03328 0B23                        3F            .byte	$3F
03329 0B24                        3F            .byte	$3F
03330 0B25                        3F            .byte	$3F
03331 0B26                        15            .byte	$15
03332 0B27                        15            .byte	$15
03333 0B28                        3F            .byte	$3F
03334 0B29                        15            .byte	$15
03335 0B2A                        3F            .byte	$3F
03336 0B2B                        3F            .byte	$3F
03337 0B2C                        3F            .byte	$3F
03338 0B2D                        15            .byte	$15
03339 0B2E                        3F            .byte	$3F
03340 0B2F                        3F            .byte	$3F
03341 0B30                        3F            .byte	$3F
03342                                           ! 781   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03343 0B31                        00            .byte	0
03344 0B32                        00            .byte	0
03345 0B33                        00            .byte	0
03346 0B34                        00            .byte	0
03347 0B35                        00            .byte	0
03348 0B36                        2A            .byte	$2A
03349 0B37                        00            .byte	0
03350 0B38                        2A            .byte	$2A
03351 0B39                        00            .byte	0
03352 0B3A                        00            .byte	0
03353 0B3B                        2A            .byte	$2A
03354 0B3C                        2A            .byte	$2A
03355 0B3D                        2A            .byte	$2A
03356 0B3E                        00            .byte	0
03357 0B3F                        00            .byte	0
03358 0B40                        2A            .byte	$2A
03359 0B41                        00            .byte	0
03360 0B42                        2A            .byte	$2A
03361 0B43                        2A            .byte	$2A
03362 0B44                        15            .byte	$15
03363 0B45                        00            .byte	0
03364 0B46                        2A            .byte	$2A
03365 0B47                        2A            .byte	$2A
03366 0B48                        2A            .byte	$2A
03367                                           ! 782   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03368 0B49                        00            .byte	0
03369 0B4A                        00            .byte	0
03370 0B4B                        00            .byte	0
03371 0B4C                        00            .byte	0
03372 0B4D                        00            .byte	0
03373 0B4E                        2A            .byte	$2A
03374 0B4F                        00            .byte	0
03375 0B50                        2A            .byte	$2A
03376 0B51                        00            .byte	0
03377 0B52                        00            .byte	0
03378 0B53                        2A            .byte	$2A
03379 0B54                        2A            .byte	$2A
03380 0B55                        2A            .byte	$2A
03381 0B56                        00            .byte	0
03382 0B57                        00            .byte	0
03383 0B58                        2A            .byte	$2A
03384 0B59                        00            .byte	0
03385 0B5A                        2A            .byte	$2A
03386 0B5B                        2A            .byte	$2A
03387 0B5C                        15            .byte	$15
03388 0B5D                        00            .byte	0
03389 0B5E                        2A            .byte	$2A
03390 0B5F                        2A            .byte	$2A
03391 0B60                        2A            .byte	$2A
03392                                           ! 783   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03393 0B61                        15            .byte	$15
03394 0B62                        15            .byte	$15
03395 0B63                        15            .byte	$15
03396 0B64                        15            .byte	$15
03397 0B65                        15            .byte	$15
03398 0B66                        3F            .byte	$3F
03399 0B67                        15            .byte	$15
03400 0B68                        3F            .byte	$3F
03401 0B69                        15            .byte	$15
03402 0B6A                        15            .byte	$15
03403 0B6B                        3F            .byte	$3F
03404 0B6C                        3F            .byte	$3F
03405 0B6D                        3F            .byte	$3F
03406 0B6E                        15            .byte	$15
03407 0B6F                        15            .byte	$15
03408 0B70                        3F            .byte	$3F
03409 0B71                        15            .byte	$15
03410 0B72                        3F            .byte	$3F
03411 0B73                        3F            .byte	$3F
03412 0B74                        3F            .byte	$3F
03413 0B75                        15            .byte	$15
03414 0B76                        3F            .byte	$3F
03415 0B77                        3F            .byte	$3F
03416 0B78                        3F            .byte	$3F
03417                                           ! 784   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f
03418 0B79                        15            .byte	$15
03419 0B7A                        15            .byte	$15
03420 0B7B                        15            .byte	$15
03421 0B7C                        15            .byte	$15
03422 0B7D                        15            .byte	$15
03423 0B7E                        3F            .byte	$3F
03424 0B7F                        15            .byte	$15
03425 0B80                        3F            .byte	$3F
03426 0B81                        15            .byte	$15
03427 0B82                        15            .byte	$15
03428 0B83                        3F            .byte	$3F
03429 0B84                        3F            .byte	$3F
03430 0B85                        3F            .byte	$3F
03431 0B86                        15            .byte	$15
03432 0B87                        15            .byte	$15
03433 0B88                        3F            .byte	$3F
03434 0B89                        15            .byte	$15
03435 0B8A                        3F            .byte	$3F
03436 0B8B                        3F            .byte	$3F
03437 0B8C                        3F            .byte	$3F
03438 0B8D                        15            .byte	$15
03439 0B8E                        3F            .byte	$3F
03440 0B8F                        3F            .byte	$3F
03441                                           ! 785 };
03442 0B90                        3F            .byte	$3F
03443                                           !BCC_EOS
03444                                           ! 786 static Bit8u palette2[63+1][3]=
03445                                           ! 787 {
03446                       00000B91            _palette2:
03447                                           ! 788   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x2a,0x00, 0x2a,0x2a,0x2a,
03448 0B91                        00            .byte	0
03449 0B92                        00            .byte	0
03450 0B93                        00            .byte	0
03451 0B94                        00            .byte	0
03452 0B95                        00            .byte	0
03453 0B96                        2A            .byte	$2A
03454 0B97                        00            .byte	0
03455 0B98                        2A            .byte	$2A
03456 0B99                        00            .byte	0
03457 0B9A                        00            .byte	0
03458 0B9B                        2A            .byte	$2A
03459 0B9C                        2A            .byte	$2A
03460 0B9D                        2A            .byte	$2A
03461 0B9E                        00            .byte	0
03462 0B9F                        00            .byte	0
03463 0BA0                        2A            .byte	$2A
03464 0BA1                        00            .byte	0
03465 0BA2                        2A            .byte	$2A
03466 0BA3                        2A            .byte	$2A
03467 0BA4                        2A            .byte	$2A
03468 0BA5                        00            .byte	0
03469 0BA6                        2A            .byte	$2A
03470 0BA7                        2A            .byte	$2A
03471 0BA8                        2A            .byte	$2A
03472                                           ! 789   0x00,0x00,0x15, 0x00,0x00,0x3f, 0x00,0x2a,0x15, 0x00,0x2a,0x3f, 0x2a,0x00
03473 0BA9                        00            .byte	0
03474 0BAA                        00            .byte	0
03475 0BAB                        15            .byte	$15
03476 0BAC                        00            .byte	0
03477 0BAD                        00            .byte	0
03478 0BAE                        3F            .byte	$3F
03479 0BAF                        00            .byte	0
03480 0BB0                        2A            .byte	$2A
03481 0BB1                        15            .byte	$15
03482 0BB2                        00            .byte	0
03483 0BB3                        2A            .byte	$2A
03484 0BB4                        3F            .byte	$3F
03485 0BB5                        2A            .byte	$2A
03486                                           ! 789 ,0x15, 0x2a,0x00,0x3f, 0x2a,0x2a,0x15, 0x2a,0x2a,0x3f,
03487 0BB6                        00            .byte	0
03488 0BB7                        15            .byte	$15
03489 0BB8                        2A            .byte	$2A
03490 0BB9                        00            .byte	0
03491 0BBA                        3F            .byte	$3F
03492 0BBB                        2A            .byte	$2A
03493 0BBC                        2A            .byte	$2A
03494 0BBD                        15            .byte	$15
03495 0BBE                        2A            .byte	$2A
03496 0BBF                        2A            .byte	$2A
03497 0BC0                        3F            .byte	$3F
03498                                           ! 790   0x00,0x15,0x00, 0x00,0x15,0x2a, 0x00,0x3f,0x00, 0x00,0x3f,0x2a, 0x2a,0x15,0x00, 0x2a,0x15,0x2a, 0x2a,0x3f,0x00, 0x2a,0x3f,0x2a,
03499 0BC1                        00            .byte	0
03500 0BC2                        15            .byte	$15
03501 0BC3                        00            .byte	0
03502 0BC4                        00            .byte	0
03503 0BC5                        15            .byte	$15
03504 0BC6                        2A            .byte	$2A
03505 0BC7                        00            .byte	0
03506 0BC8                        3F            .byte	$3F
03507 0BC9                        00            .byte	0
03508 0BCA                        00            .byte	0
03509 0BCB                        3F            .byte	$3F
03510 0BCC                        2A            .byte	$2A
03511 0BCD                        2A            .byte	$2A
03512 0BCE                        15            .byte	$15
03513 0BCF                        00            .byte	0
03514 0BD0                        2A            .byte	$2A
03515 0BD1                        15            .byte	$15
03516 0BD2                        2A            .byte	$2A
03517 0BD3                        2A            .byte	$2A
03518 0BD4                        3F            .byte	$3F
03519 0BD5                        00            .byte	0
03520 0BD6                        2A            .byte	$2A
03521 0BD7                        3F            .byte	$3F
03522 0BD8                        2A            .byte	$2A
03523                                           ! 791   0x00,0x15,0x15, 0x00,0x15,0x3f, 0x00,0x3f,0x15, 0x00,0x3f,0x3f, 0x2a,0x15,0x15, 0x2a,0x15,0x3f, 0x2a,0x3f,0x15, 0x2a,0x3f,0x3f,
03524 0BD9                        00            .byte	0
03525 0BDA                        15            .byte	$15
03526 0BDB                        15            .byte	$15
03527 0BDC                        00            .byte	0
03528 0BDD                        15            .byte	$15
03529 0BDE                        3F            .byte	$3F
03530 0BDF                        00            .byte	0
03531 0BE0                        3F            .byte	$3F
03532 0BE1                        15            .byte	$15
03533 0BE2                        00            .byte	0
03534 0BE3                        3F            .byte	$3F
03535 0BE4                        3F            .byte	$3F
03536 0BE5                        2A            .byte	$2A
03537 0BE6                        15            .byte	$15
03538 0BE7                        15            .byte	$15
03539 0BE8                        2A            .byte	$2A
03540 0BE9                        15            .byte	$15
03541 0BEA                        3F            .byte	$3F
03542 0BEB                        2A            .byte	$2A
03543 0BEC                        3F            .byte	$3F
03544 0BED                        15            .byte	$15
03545 0BEE                        2A            .byte	$2A
03546 0BEF                        3F            .byte	$3F
03547 0BF0                        3F            .byte	$3F
03548                                           ! 792   0x15,0x00,0x00, 0x15,0x00,0x2a, 0x15,0x2a,0x00, 0x15,0x2a,0x2a, 0x3f,0x00,0x00, 0x3f,0x00,0x2a, 0x3f,0x2a,0x00, 0x3f,0x2a,0x2a,
03549 0BF1                        15            .byte	$15
03550 0BF2                        00            .byte	0
03551 0BF3                        00            .byte	0
03552 0BF4                        15            .byte	$15
03553 0BF5                        00            .byte	0
03554 0BF6                        2A            .byte	$2A
03555 0BF7                        15            .byte	$15
03556 0BF8                        2A            .byte	$2A
03557 0BF9                        00            .byte	0
03558 0BFA                        15            .byte	$15
03559 0BFB                        2A            .byte	$2A
03560 0BFC                        2A            .byte	$2A
03561 0BFD                        3F            .byte	$3F
03562 0BFE                        00            .byte	0
03563 0BFF                        00            .byte	0
03564 0C00                        3F            .byte	$3F
03565 0C01                        00            .byte	0
03566 0C02                        2A            .byte	$2A
03567 0C03                        3F            .byte	$3F
03568 0C04                        2A            .byte	$2A
03569 0C05                        00            .byte	0
03570 0C06                        3F            .byte	$3F
03571 0C07                        2A            .byte	$2A
03572 0C08                        2A            .byte	$2A
03573                                           ! 793   0x15,0x00,0x15, 0x15,0x00,0x3f, 0x15,0x2a,0x15, 0x15,0x2a,0x3f, 0x3f,0x00,0x15, 0x3f,0x00,0x3f, 0x3f,0x2a,0x15, 0x3f,0x2a,0x3f,
03574 0C09                        15            .byte	$15
03575 0C0A                        00            .byte	0
03576 0C0B                        15            .byte	$15
03577 0C0C                        15            .byte	$15
03578 0C0D                        00            .byte	0
03579 0C0E                        3F            .byte	$3F
03580 0C0F                        15            .byte	$15
03581 0C10                        2A            .byte	$2A
03582 0C11                        15            .byte	$15
03583 0C12                        15            .byte	$15
03584 0C13                        2A            .byte	$2A
03585 0C14                        3F            .byte	$3F
03586 0C15                        3F            .byte	$3F
03587 0C16                        00            .byte	0
03588 0C17                        15            .byte	$15
03589 0C18                        3F            .byte	$3F
03590 0C19                        00            .byte	0
03591 0C1A                        3F            .byte	$3F
03592 0C1B                        3F            .byte	$3F
03593 0C1C                        2A            .byte	$2A
03594 0C1D                        15            .byte	$15
03595 0C1E                        3F            .byte	$3F
03596 0C1F                        2A            .byte	$2A
03597 0C20                        3F            .byte	$3F
03598                                           ! 794   0x15,0x15,0x00, 0x15,0x15,0x2a, 0x15,0x3f,0x00, 0x15,0x3f,0x2a, 0x3f,0x15,0x00, 0x3f,0x15,0x2a, 0x3f,0x3f,0x00, 0x3f,0x3f,0x2a,
03599 0C21                        15            .byte	$15
03600 0C22                        15            .byte	$15
03601 0C23                        00            .byte	0
03602 0C24                        15            .byte	$15
03603 0C25                        15            .byte	$15
03604 0C26                        2A            .byte	$2A
03605 0C27                        15            .byte	$15
03606 0C28                        3F            .byte	$3F
03607 0C29                        00            .byte	0
03608 0C2A                        15            .byte	$15
03609 0C2B                        3F            .byte	$3F
03610 0C2C                        2A            .byte	$2A
03611 0C2D                        3F            .byte	$3F
03612 0C2E                        15            .byte	$15
03613 0C2F                        00            .byte	0
03614 0C30                        3F            .byte	$3F
03615 0C31                        15            .byte	$15
03616 0C32                        2A            .byte	$2A
03617 0C33                        3F            .byte	$3F
03618 0C34                        3F            .byte	$3F
03619 0C35                        00            .byte	0
03620 0C36                        3F            .byte	$3F
03621 0C37                        3F            .byte	$3F
03622 0C38                        2A            .byte	$2A
03623                                           ! 795   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f
03624 0C39                        15            .byte	$15
03625 0C3A                        15            .byte	$15
03626 0C3B                        15            .byte	$15
03627 0C3C                        15            .byte	$15
03628 0C3D                        15            .byte	$15
03629 0C3E                        3F            .byte	$3F
03630 0C3F                        15            .byte	$15
03631 0C40                        3F            .byte	$3F
03632 0C41                        15            .byte	$15
03633 0C42                        15            .byte	$15
03634 0C43                        3F            .byte	$3F
03635 0C44                        3F            .byte	$3F
03636 0C45                        3F            .byte	$3F
03637 0C46                        15            .byte	$15
03638 0C47                        15            .byte	$15
03639 0C48                        3F            .byte	$3F
03640 0C49                        15            .byte	$15
03641 0C4A                        3F            .byte	$3F
03642 0C4B                        3F            .byte	$3F
03643 0C4C                        3F            .byte	$3F
03644 0C4D                        15            .byte	$15
03645 0C4E                        3F            .byte	$3F
03646 0C4F                        3F            .byte	$3F
03647                                           ! 796 };
03648 0C50                        3F            .byte	$3F
03649                                           !BCC_EOS
03650                                           ! 797 static Bit8u palette3[256][3]=
03651                                           ! 798 {
03652                       00000C51            _palette3:
03653                                           ! 799   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03654 0C51                        00            .byte	0
03655 0C52                        00            .byte	0
03656 0C53                        00            .byte	0
03657 0C54                        00            .byte	0
03658 0C55                        00            .byte	0
03659 0C56                        2A            .byte	$2A
03660 0C57                        00            .byte	0
03661 0C58                        2A            .byte	$2A
03662 0C59                        00            .byte	0
03663 0C5A                        00            .byte	0
03664 0C5B                        2A            .byte	$2A
03665 0C5C                        2A            .byte	$2A
03666 0C5D                        2A            .byte	$2A
03667 0C5E                        00            .byte	0
03668 0C5F                        00            .byte	0
03669 0C60                        2A            .byte	$2A
03670 0C61                        00            .byte	0
03671 0C62                        2A            .byte	$2A
03672 0C63                        2A            .byte	$2A
03673 0C64                        15            .byte	$15
03674 0C65                        00            .byte	0
03675 0C66                        2A            .byte	$2A
03676 0C67                        2A            .byte	$2A
03677 0C68                        2A            .byte	$2A
03678                                           ! 800   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03679 0C69                        15            .byte	$15
03680 0C6A                        15            .byte	$15
03681 0C6B                        15            .byte	$15
03682 0C6C                        15            .byte	$15
03683 0C6D                        15            .byte	$15
03684 0C6E                        3F            .byte	$3F
03685 0C6F                        15            .byte	$15
03686 0C70                        3F            .byte	$3F
03687 0C71                        15            .byte	$15
03688 0C72                        15            .byte	$15
03689 0C73                        3F            .byte	$3F
03690 0C74                        3F            .byte	$3F
03691 0C75                        3F            .byte	$3F
03692 0C76                        15            .byte	$15
03693 0C77                        15            .byte	$15
03694 0C78                        3F            .byte	$3F
03695 0C79                        15            .byte	$15
03696 0C7A                        3F            .byte	$3F
03697 0C7B                        3F            .byte	$3F
03698 0C7C                        3F            .byte	$3F
03699 0C7D                        15            .byte	$15
03700 0C7E                        3F            .byte	$3F
03701 0C7F                        3F            .byte	$3F
03702 0C80                        3F            .byte	$3F
03703                                           ! 801   0x00,0x00,0x00, 0x05,0x05,0x05, 0x08,0x08,0x08, 0x0b,0x0b,0x0b, 0x0e,0x0e,0x0e, 0x11,0x11,0x11, 0x14,0x14,0x14, 0x18,0x18,0x18,
03704 0C81                        00            .byte	0
03705 0C82                        00            .byte	0
03706 0C83                        00            .byte	0
03707 0C84                        05            .byte	5
03708 0C85                        05            .byte	5
03709 0C86                        05            .byte	5
03710 0C87                        08            .byte	8
03711 0C88                        08            .byte	8
03712 0C89                        08            .byte	8
03713 0C8A                        0B            .byte	$B
03714 0C8B                        0B            .byte	$B
03715 0C8C                        0B            .byte	$B
03716 0C8D                        0E            .byte	$E
03717 0C8E                        0E            .byte	$E
03718 0C8F                        0E            .byte	$E
03719 0C90                        11            .byte	$11
03720 0C91                        11            .byte	$11
03721 0C92                        11            .byte	$11
03722 0C93                        14            .byte	$14
03723 0C94                        14            .byte	$14
03724 0C95                        14            .byte	$14
03725 0C96                        18            .byte	$18
03726 0C97                        18            .byte	$18
03727 0C98                        18            .byte	$18
03728                                           ! 802   0x1c,0x1c,0x1c, 0x20,0x20,0x20, 0x24,0x24,0x24, 0x28,0x28,0x28, 0x2d,0x2d,0x2d, 0x32,0x32,0x32, 0x38,0x38,0x38, 0x3f,0x3f,0x3f,
03729 0C99                        1C            .byte	$1C
03730 0C9A                        1C            .byte	$1C
03731 0C9B                        1C            .byte	$1C
03732 0C9C                        20            .byte	$20
03733 0C9D                        20            .byte	$20
03734 0C9E                        20            .byte	$20
03735 0C9F                        24            .byte	$24
03736 0CA0                        24            .byte	$24
03737 0CA1                        24            .byte	$24
03738 0CA2                        28            .byte	$28
03739 0CA3                        28            .byte	$28
03740 0CA4                        28            .byte	$28
03741 0CA5                        2D            .byte	$2D
03742 0CA6                        2D            .byte	$2D
03743 0CA7                        2D            .byte	$2D
03744 0CA8                        32            .byte	$32
03745 0CA9                        32            .byte	$32
03746 0CAA                        32            .byte	$32
03747 0CAB                        38            .byte	$38
03748 0CAC                        38            .byte	$38
03749 0CAD                        38            .byte	$38
03750 0CAE                        3F            .byte	$3F
03751 0CAF                        3F            .byte	$3F
03752 0CB0                        3F            .byte	$3F
03753                                           ! 803   0x00,0x00,0x3f, 0x10,0x00,0x3f, 0x1f,0x00,0x3f, 0x2f,0x00,0x3f, 0x3f,0x00,0x3f, 0x3f,0x00,0x2f, 0x3f,0x00,0x1f, 0x3f,0x00,0x10,
03754 0CB1                        00            .byte	0
03755 0CB2                        00            .byte	0
03756 0CB3                        3F            .byte	$3F
03757 0CB4                        10            .byte	$10
03758 0CB5                        00            .byte	0
03759 0CB6                        3F            .byte	$3F
03760 0CB7                        1F            .byte	$1F
03761 0CB8                        00            .byte	0
03762 0CB9                        3F            .byte	$3F
03763 0CBA                        2F            .byte	$2F
03764 0CBB                        00            .byte	0
03765 0CBC                        3F            .byte	$3F
03766 0CBD                        3F            .byte	$3F
03767 0CBE                        00            .byte	0
03768 0CBF                        3F            .byte	$3F
03769 0CC0                        3F            .byte	$3F
03770 0CC1                        00            .byte	0
03771 0CC2                        2F            .byte	$2F
03772 0CC3                        3F            .byte	$3F
03773 0CC4                        00            .byte	0
03774 0CC5                        1F            .byte	$1F
03775 0CC6                        3F            .byte	$3F
03776 0CC7                        00            .byte	0
03777 0CC8                        10            .byte	$10
03778                                           ! 804   0x3f,0x00,0x00, 0x3f,0x10,0x00, 0x3f,0x1f,0x00, 0x3f,0x2f,0x00, 0x3f,0x3f,0x00, 0x2f,0x3f,0x00, 0x1f,0x3f,0x00, 0x10,0x3f,0x00,
03779 0CC9                        3F            .byte	$3F
03780 0CCA                        00            .byte	0
03781 0CCB                        00            .byte	0
03782 0CCC                        3F            .byte	$3F
03783 0CCD                        10            .byte	$10
03784 0CCE                        00            .byte	0
03785 0CCF                        3F            .byte	$3F
03786 0CD0                        1F            .byte	$1F
03787 0CD1                        00            .byte	0
03788 0CD2                        3F            .byte	$3F
03789 0CD3                        2F            .byte	$2F
03790 0CD4                        00            .byte	0
03791 0CD5                        3F            .byte	$3F
03792 0CD6                        3F            .byte	$3F
03793 0CD7                        00            .byte	0
03794 0CD8                        2F            .byte	$2F
03795 0CD9                        3F            .byte	$3F
03796 0CDA                        00            .byte	0
03797 0CDB                        1F            .byte	$1F
03798 0CDC                        3F            .byte	$3F
03799 0CDD                        00            .byte	0
03800 0CDE                        10            .byte	$10
03801 0CDF                        3F            .byte	$3F
03802 0CE0                        00            .byte	0
03803                                           ! 805   0x00,0x3f,0x00, 0x00,0x3f,0x10, 0x00,0x3f,0x1f, 0x00,0x3f,0x2f, 0x00,0x3f,0x3f, 0x00,0x2f,0x3f, 0x00,0x1f,0x3f, 0x00,0x10,0x3f,
03804 0CE1                        00            .byte	0
03805 0CE2                        3F            .byte	$3F
03806 0CE3                        00            .byte	0
03807 0CE4                        00            .byte	0
03808 0CE5                        3F            .byte	$3F
03809 0CE6                        10            .byte	$10
03810 0CE7                        00            .byte	0
03811 0CE8                        3F            .byte	$3F
03812 0CE9                        1F            .byte	$1F
03813 0CEA                        00            .byte	0
03814 0CEB                        3F            .byte	$3F
03815 0CEC                        2F            .byte	$2F
03816 0CED                        00            .byte	0
03817 0CEE                        3F            .byte	$3F
03818 0CEF                        3F            .byte	$3F
03819 0CF0                        00            .byte	0
03820 0CF1                        2F            .byte	$2F
03821 0CF2                        3F            .byte	$3F
03822 0CF3                        00            .byte	0
03823 0CF4                        1F            .byte	$1F
03824 0CF5                        3F            .byte	$3F
03825 0CF6                        00            .byte	0
03826 0CF7                        10            .byte	$10
03827 0CF8                        3F            .byte	$3F
03828                                           ! 806   0x1f,0x1f,0x3f, 0x27,0x1f,0x3f, 0x2f,0x1f,0x3f, 0x37,0x1f,0x3f, 0x3f,0x1f,0x3f, 0x3f,0x1f,0x37, 0x3f,0x1f,0x2f, 0x3f,0x1f,0x27,
03829 0CF9                        1F            .byte	$1F
03830 0CFA                        1F            .byte	$1F
03831 0CFB                        3F            .byte	$3F
03832 0CFC                        27            .byte	$27
03833 0CFD                        1F            .byte	$1F
03834 0CFE                        3F            .byte	$3F
03835 0CFF                        2F            .byte	$2F
03836 0D00                        1F            .byte	$1F
03837 0D01                        3F            .byte	$3F
03838 0D02                        37            .byte	$37
03839 0D03                        1F            .byte	$1F
03840 0D04                        3F            .byte	$3F
03841 0D05                        3F            .byte	$3F
03842 0D06                        1F            .byte	$1F
03843 0D07                        3F            .byte	$3F
03844 0D08                        3F            .byte	$3F
03845 0D09                        1F            .byte	$1F
03846 0D0A                        37            .byte	$37
03847 0D0B                        3F            .byte	$3F
03848 0D0C                        1F            .byte	$1F
03849 0D0D                        2F            .byte	$2F
03850 0D0E                        3F            .byte	$3F
03851 0D0F                        1F            .byte	$1F
03852 0D10                        27            .byte	$27
03853                                           ! 807   0x3f,0x1f,0x1f, 0x3f,0x27,0x1f, 0x3f,0x2f,0x1f, 0x3f,0x37,0x1f, 0x3f,0x3f,0x1f, 0x37,0x3f,0x1f, 0x2f,0x3f,0x1f, 0x27,0x3f,0x1f,
03854 0D11                        3F            .byte	$3F
03855 0D12                        1F            .byte	$1F
03856 0D13                        1F            .byte	$1F
03857 0D14                        3F            .byte	$3F
03858 0D15                        27            .byte	$27
03859 0D16                        1F            .byte	$1F
03860 0D17                        3F            .byte	$3F
03861 0D18                        2F            .byte	$2F
03862 0D19                        1F            .byte	$1F
03863 0D1A                        3F            .byte	$3F
03864 0D1B                        37            .byte	$37
03865 0D1C                        1F            .byte	$1F
03866 0D1D                        3F            .byte	$3F
03867 0D1E                        3F            .byte	$3F
03868 0D1F                        1F            .byte	$1F
03869 0D20                        37            .byte	$37
03870 0D21                        3F            .byte	$3F
03871 0D22                        1F            .byte	$1F
03872 0D23                        2F            .byte	$2F
03873 0D24                        3F            .byte	$3F
03874 0D25                        1F            .byte	$1F
03875 0D26                        27            .byte	$27
03876 0D27                        3F            .byte	$3F
03877 0D28                        1F            .byte	$1F
03878                                           ! 808   0x1f,0
03879 0D29                        1F            .byte	$1F
03880                                           ! 808 x3f,0x1f, 0x1f,0x3f,0x27, 0x1f,0x3f,0x2f, 0x1f,0x3f,0x37, 0x1f,0x3f,0x3f, 0x1f,0x37,0x3f, 0x1f,0x2f,0x3f, 0x1f,0x27,0x3f,
03881 0D2A                        3F            .byte	$3F
03882 0D2B                        1F            .byte	$1F
03883 0D2C                        1F            .byte	$1F
03884 0D2D                        3F            .byte	$3F
03885 0D2E                        27            .byte	$27
03886 0D2F                        1F            .byte	$1F
03887 0D30                        3F            .byte	$3F
03888 0D31                        2F            .byte	$2F
03889 0D32                        1F            .byte	$1F
03890 0D33                        3F            .byte	$3F
03891 0D34                        37            .byte	$37
03892 0D35                        1F            .byte	$1F
03893 0D36                        3F            .byte	$3F
03894 0D37                        3F            .byte	$3F
03895 0D38                        1F            .byte	$1F
03896 0D39                        37            .byte	$37
03897 0D3A                        3F            .byte	$3F
03898 0D3B                        1F            .byte	$1F
03899 0D3C                        2F            .byte	$2F
03900 0D3D                        3F            .byte	$3F
03901 0D3E                        1F            .byte	$1F
03902 0D3F                        27            .byte	$27
03903 0D40                        3F            .byte	$3F
03904                                           ! 809   0x2d,0x2d,0x3f, 0x31,0x2d,0x3f, 0x36,0x2d,0x3f, 0x3a,0x2d,0x3f, 0x3f,0x2d,0x3f, 0x3f,0x2d,0x3a, 0x3f,0x2d,0x36, 0x3f,0x2d,0x31,
03905 0D41                        2D            .byte	$2D
03906 0D42                        2D            .byte	$2D
03907 0D43                        3F            .byte	$3F
03908 0D44                        31            .byte	$31
03909 0D45                        2D            .byte	$2D
03910 0D46                        3F            .byte	$3F
03911 0D47                        36            .byte	$36
03912 0D48                        2D            .byte	$2D
03913 0D49                        3F            .byte	$3F
03914 0D4A                        3A            .byte	$3A
03915 0D4B                        2D            .byte	$2D
03916 0D4C                        3F            .byte	$3F
03917 0D4D                        3F            .byte	$3F
03918 0D4E                        2D            .byte	$2D
03919 0D4F                        3F            .byte	$3F
03920 0D50                        3F            .byte	$3F
03921 0D51                        2D            .byte	$2D
03922 0D52                        3A            .byte	$3A
03923 0D53                        3F            .byte	$3F
03924 0D54                        2D            .byte	$2D
03925 0D55                        36            .byte	$36
03926 0D56                        3F            .byte	$3F
03927 0D57                        2D            .byte	$2D
03928 0D58                        31            .byte	$31
03929                                           ! 810   0x3f,0x2d,0x2d, 0x3f,0x31,0x2d, 0x3f,0x36,0x2d, 0x3f,0x3a,0x2d, 0x3f,0x3f,0x2d, 0x3a,0x3f,0x2d, 0x36,0x3f,0x2d, 0x31,0x3f,0x2d,
03930 0D59                        3F            .byte	$3F
03931 0D5A                        2D            .byte	$2D
03932 0D5B                        2D            .byte	$2D
03933 0D5C                        3F            .byte	$3F
03934 0D5D                        31            .byte	$31
03935 0D5E                        2D            .byte	$2D
03936 0D5F                        3F            .byte	$3F
03937 0D60                        36            .byte	$36
03938 0D61                        2D            .byte	$2D
03939 0D62                        3F            .byte	$3F
03940 0D63                        3A            .byte	$3A
03941 0D64                        2D            .byte	$2D
03942 0D65                        3F            .byte	$3F
03943 0D66                        3F            .byte	$3F
03944 0D67                        2D            .byte	$2D
03945 0D68                        3A            .byte	$3A
03946 0D69                        3F            .byte	$3F
03947 0D6A                        2D            .byte	$2D
03948 0D6B                        36            .byte	$36
03949 0D6C                        3F            .byte	$3F
03950 0D6D                        2D            .byte	$2D
03951 0D6E                        31            .byte	$31
03952 0D6F                        3F            .byte	$3F
03953 0D70                        2D            .byte	$2D
03954                                           ! 811   0x2d,0x3f,0x2d, 0x2d,0x3f,0x31, 0x2d,0x3f,0x36, 0x2d,0x3f,0x3a, 0x2d,0x3f,0x3f, 0x2d,0x3a,0x3f, 0x2d,0x36,0x3f, 0x2d,0x31,0x3f,
03955 0D71                        2D            .byte	$2D
03956 0D72                        3F            .byte	$3F
03957 0D73                        2D            .byte	$2D
03958 0D74                        2D            .byte	$2D
03959 0D75                        3F            .byte	$3F
03960 0D76                        31            .byte	$31
03961 0D77                        2D            .byte	$2D
03962 0D78                        3F            .byte	$3F
03963 0D79                        36            .byte	$36
03964 0D7A                        2D            .byte	$2D
03965 0D7B                        3F            .byte	$3F
03966 0D7C                        3A            .byte	$3A
03967 0D7D                        2D            .byte	$2D
03968 0D7E                        3F            .byte	$3F
03969 0D7F                        3F            .byte	$3F
03970 0D80                        2D            .byte	$2D
03971 0D81                        3A            .byte	$3A
03972 0D82                        3F            .byte	$3F
03973 0D83                        2D            .byte	$2D
03974 0D84                        36            .byte	$36
03975 0D85                        3F            .byte	$3F
03976 0D86                        2D            .byte	$2D
03977 0D87                        31            .byte	$31
03978 0D88                        3F            .byte	$3F
03979                                           ! 812   0x00,0x00,0x1c, 0x07,0x00,0x1c, 0x0e,0x00,0x1c, 0x15,0x00,0x1c, 0x1c,0x00,0x1c, 0x1c,0x00,0x15, 0x1c,0x00,0x0e, 0x1c,0x00,0x07,
03980 0D89                        00            .byte	0
03981 0D8A                        00            .byte	0
03982 0D8B                        1C            .byte	$1C
03983 0D8C                        07            .byte	7
03984 0D8D                        00            .byte	0
03985 0D8E                        1C            .byte	$1C
03986 0D8F                        0E            .byte	$E
03987 0D90                        00            .byte	0
03988 0D91                        1C            .byte	$1C
03989 0D92                        15            .byte	$15
03990 0D93                        00            .byte	0
03991 0D94                        1C            .byte	$1C
03992 0D95                        1C            .byte	$1C
03993 0D96                        00            .byte	0
03994 0D97                        1C            .byte	$1C
03995 0D98                        1C            .byte	$1C
03996 0D99                        00            .byte	0
03997 0D9A                        15            .byte	$15
03998 0D9B                        1C            .byte	$1C
03999 0D9C                        00            .byte	0
04000 0D9D                        0E            .byte	$E
04001 0D9E                        1C            .byte	$1C
04002 0D9F                        00            .byte	0
04003 0DA0                        07            .byte	7
04004                                           ! 813   0x1c,0x00,0x00, 0x1c,0x07,0x00, 0x1c,0x0e,0x00, 0x1c,0x15,0x00, 0x1c,0x1c,0x00, 0x15,0x1c,0x00, 0x0e,0x1c,0x00, 0x07,0x1c,0x00,
04005 0DA1                        1C            .byte	$1C
04006 0DA2                        00            .byte	0
04007 0DA3                        00            .byte	0
04008 0DA4                        1C            .byte	$1C
04009 0DA5                        07            .byte	7
04010 0DA6                        00            .byte	0
04011 0DA7                        1C            .byte	$1C
04012 0DA8                        0E            .byte	$E
04013 0DA9                        00            .byte	0
04014 0DAA                        1C            .byte	$1C
04015 0DAB                        15            .byte	$15
04016 0DAC                        00            .byte	0
04017 0DAD                        1C            .byte	$1C
04018 0DAE                        1C            .byte	$1C
04019 0DAF                        00            .byte	0
04020 0DB0                        15            .byte	$15
04021 0DB1                        1C            .byte	$1C
04022 0DB2                        00            .byte	0
04023 0DB3                        0E            .byte	$E
04024 0DB4                        1C            .byte	$1C
04025 0DB5                        00            .byte	0
04026 0DB6                        07            .byte	7
04027 0DB7                        1C            .byte	$1C
04028 0DB8                        00            .byte	0
04029                                           ! 814   0x00,0x1c,0x00, 0x00,0x1c,0x07, 0x00,0x1c,0x0e, 0x00,0x1c,0x15, 0x00,0x1c,0x1c, 0x00,0x15,0x1c, 0x00,0x0e,0x1c, 0x00,0x07,0x1c,
04030 0DB9                        00            .byte	0
04031 0DBA                        1C            .byte	$1C
04032 0DBB                        00            .byte	0
04033 0DBC                        00            .byte	0
04034 0DBD                        1C            .byte	$1C
04035 0DBE                        07            .byte	7
04036 0DBF                        00            .byte	0
04037 0DC0                        1C            .byte	$1C
04038 0DC1                        0E            .byte	$E
04039 0DC2                        00            .byte	0
04040 0DC3                        1C            .byte	$1C
04041 0DC4                        15            .byte	$15
04042 0DC5                        00            .byte	0
04043 0DC6                        1C            .byte	$1C
04044 0DC7                        1C            .byte	$1C
04045 0DC8                        00            .byte	0
04046 0DC9                        15            .byte	$15
04047 0DCA                        1C            .byte	$1C
04048 0DCB                        00            .byte	0
04049 0DCC                        0E            .byte	$E
04050 0DCD                        1C            .byte	$1C
04051 0DCE                        00            .byte	0
04052 0DCF                        07            .byte	7
04053 0DD0                        1C            .byte	$1C
04054                                           ! 815   0x0e,0x0e,0x1c, 0x11,0x0e,0x1c, 0x15,0x0e,0x1c, 0x18,0x0e,0x1c, 0x1c,0x0e,0x1c, 0x1c,0x0e,0x18, 0x1c,0x0e,0x15, 0x1c,0x0e,0x11,
04055 0DD1                        0E            .byte	$E
04056 0DD2                        0E            .byte	$E
04057 0DD3                        1C            .byte	$1C
04058 0DD4                        11            .byte	$11
04059 0DD5                        0E            .byte	$E
04060 0DD6                        1C            .byte	$1C
04061 0DD7                        15            .byte	$15
04062 0DD8                        0E            .byte	$E
04063 0DD9                        1C            .byte	$1C
04064 0DDA                        18            .byte	$18
04065 0DDB                        0E            .byte	$E
04066 0DDC                        1C            .byte	$1C
04067 0DDD                        1C            .byte	$1C
04068 0DDE                        0E            .byte	$E
04069 0DDF                        1C            .byte	$1C
04070 0DE0                        1C            .byte	$1C
04071 0DE1                        0E            .byte	$E
04072 0DE2                        18            .byte	$18
04073 0DE3                        1C            .byte	$1C
04074 0DE4                        0E            .byte	$E
04075 0DE5                        15            .byte	$15
04076 0DE6                        1C            .byte	$1C
04077 0DE7                        0E            .byte	$E
04078 0DE8                        11            .byte	$11
04079                                           ! 816   0x1c,0x0e,0x0e, 0x1c,0x11,0x0e, 0x1c,0x15,0x0e, 0x1c,0x18,0x0e, 0x1c,0x1c,0x0e, 0x18,0x1c,0x0e, 0x15,0x1c,0x0e, 0x11,0x1c,0x0e,
04080 0DE9                        1C            .byte	$1C
04081 0DEA                        0E            .byte	$E
04082 0DEB                        0E            .byte	$E
04083 0DEC                        1C            .byte	$1C
04084 0DED                        11            .byte	$11
04085 0DEE                        0E            .byte	$E
04086 0DEF                        1C            .byte	$1C
04087 0DF0                        15            .byte	$15
04088 0DF1                        0E            .byte	$E
04089 0DF2                        1C            .byte	$1C
04090 0DF3                        18            .byte	$18
04091 0DF4                        0E            .byte	$E
04092 0DF5                        1C            .byte	$1C
04093 0DF6                        1C            .byte	$1C
04094 0DF7                        0E            .byte	$E
04095 0DF8                        18            .byte	$18
04096 0DF9                        1C            .byte	$1C
04097 0DFA                        0E            .byte	$E
04098 0DFB                        15            .byte	$15
04099 0DFC                        1C            .byte	$1C
04100 0DFD                        0E            .byte	$E
04101 0DFE                        11            .byte	$11
04102 0DFF                        1C            .byte	$1C
04103 0E00                        0E            .byte	$E
04104                                           ! 817   0x0e,0x1c,0x0e, 0x0e,0x1c,0x11, 0x0e,0x1c,0x15, 0x0e,0x1c,0x18, 0x0e,0x1c,0x1c, 0x0e,0x18,0x1c, 0x0e,0x15,0x1c, 0x0e,0x11,0x1c,
04105 0E01                        0E            .byte	$E
04106 0E02                        1C            .byte	$1C
04107 0E03                        0E            .byte	$E
04108 0E04                        0E            .byte	$E
04109 0E05                        1C            .byte	$1C
04110 0E06                        11            .byte	$11
04111 0E07                        0E            .byte	$E
04112 0E08                        1C            .byte	$1C
04113 0E09                        15            .byte	$15
04114 0E0A                        0E            .byte	$E
04115 0E0B                        1C            .byte	$1C
04116 0E0C                        18            .byte	$18
04117 0E0D                        0E            .byte	$E
04118 0E0E                        1C            .byte	$1C
04119 0E0F                        1C            .byte	$1C
04120 0E10                        0E            .byte	$E
04121 0E11                        18            .byte	$18
04122 0E12                        1C            .byte	$1C
04123 0E13                        0E            .byte	$E
04124 0E14                        15            .byte	$15
04125 0E15                        1C            .byte	$1C
04126 0E16                        0E            .byte	$E
04127 0E17                        11            .byte	$11
04128 0E18                        1C            .byte	$1C
04129                                           ! 818   0x14,0x14,0x1c, 0x16,0x14,0x1c, 0x18,0x14,0x1c, 0x1a,0x14,0x1c, 0x1c,0x14,0x1c, 0x1c,0x14,0x1a, 0x1c,0x14,0x18, 0x1c,0x14,0x16,
04130 0E19                        14            .byte	$14
04131 0E1A                        14            .byte	$14
04132 0E1B                        1C            .byte	$1C
04133 0E1C                        16            .byte	$16
04134 0E1D                        14            .byte	$14
04135 0E1E                        1C            .byte	$1C
04136 0E1F                        18            .byte	$18
04137 0E20                        14            .byte	$14
04138 0E21                        1C            .byte	$1C
04139 0E22                        1A            .byte	$1A
04140 0E23                        14            .byte	$14
04141 0E24                        1C            .byte	$1C
04142 0E25                        1C            .byte	$1C
04143 0E26                        14            .byte	$14
04144 0E27                        1C            .byte	$1C
04145 0E28                        1C            .byte	$1C
04146 0E29                        14            .byte	$14
04147 0E2A                        1A            .byte	$1A
04148 0E2B                        1C            .byte	$1C
04149 0E2C                        14            .byte	$14
04150 0E2D                        18            .byte	$18
04151 0E2E                        1C            .byte	$1C
04152 0E2F                        14            .byte	$14
04153 0E30                        16            .byte	$16
04154                                           ! 819   0x1c,0x14,0x14, 0x1c,0x16,0x14, 0x1c,0x18,0x14, 0x1c,0x1a,0x14, 0x1c,0x1c,0x14, 0x1a,0x1c,0x14, 0x18,0x1c,0x14, 0x16,0x1c,0x14,
04155 0E31                        1C            .byte	$1C
04156 0E32                        14            .byte	$14
04157 0E33                        14            .byte	$14
04158 0E34                        1C            .byte	$1C
04159 0E35                        16            .byte	$16
04160 0E36                        14            .byte	$14
04161 0E37                        1C            .byte	$1C
04162 0E38                        18            .byte	$18
04163 0E39                        14            .byte	$14
04164 0E3A                        1C            .byte	$1C
04165 0E3B                        1A            .byte	$1A
04166 0E3C                        14            .byte	$14
04167 0E3D                        1C            .byte	$1C
04168 0E3E                        1C            .byte	$1C
04169 0E3F                        14            .byte	$14
04170 0E40                        1A            .byte	$1A
04171 0E41                        1C            .byte	$1C
04172 0E42                        14            .byte	$14
04173 0E43                        18            .byte	$18
04174 0E44                        1C            .byte	$1C
04175 0E45                        14            .byte	$14
04176 0E46                        16            .byte	$16
04177 0E47                        1C            .byte	$1C
04178 0E48                        14            .byte	$14
04179                                           ! 820   0x14,0x1c,0x14, 0x14,0x1c,0x16, 0x14,0x1c,0x18, 0x14,0x1c,0x1a, 0x14,0x1c,0x1c, 0x14,0x1a,0x1c, 0x14,0x18,0x1c, 0x14,0x16,0x1c,
04180 0E49                        14            .byte	$14
04181 0E4A                        1C            .byte	$1C
04182 0E4B                        14            .byte	$14
04183 0E4C                        14            .byte	$14
04184 0E4D                        1C            .byte	$1C
04185 0E4E                        16            .byte	$16
04186 0E4F                        14            .byte	$14
04187 0E50                        1C            .byte	$1C
04188 0E51                        18            .byte	$18
04189 0E52                        14            .byte	$14
04190 0E53                        1C            .byte	$1C
04191 0E54                        1A            .byte	$1A
04192 0E55                        14            .byte	$14
04193 0E56                        1C            .byte	$1C
04194 0E57                        1C            .byte	$1C
04195 0E58                        14            .byte	$14
04196 0E59                        1A            .byte	$1A
04197 0E5A                        1C            .byte	$1C
04198 0E5B                        14            .byte	$14
04199 0E5C                        18            .byte	$18
04200 0E5D                        1C            .byte	$1C
04201 0E5E                        14            .byte	$14
04202 0E5F                        16            .byte	$16
04203 0E60                        1C            .byte	$1C
04204                                           ! 821   0x00,0x00,0x10, 0x04,0x00,0x10, 0x08,0x00,0x10, 0x0c,0x00,0x10, 0x10,0x00,0x10, 0x10,0x00,0x0c, 0x10,0x00,0x08, 0x10,0x00,0x04,
04205 0E61                        00            .byte	0
04206 0E62                        00            .byte	0
04207 0E63                        10            .byte	$10
04208 0E64                        04            .byte	4
04209 0E65                        00            .byte	0
04210 0E66                        10            .byte	$10
04211 0E67                        08            .byte	8
04212 0E68                        00            .byte	0
04213 0E69                        10            .byte	$10
04214 0E6A                        0C            .byte	$C
04215 0E6B                        00            .byte	0
04216 0E6C                        10            .byte	$10
04217 0E6D                        10            .byte	$10
04218 0E6E                        00            .byte	0
04219 0E6F                        10            .byte	$10
04220 0E70                        10            .byte	$10
04221 0E71                        00            .byte	0
04222 0E72                        0C            .byte	$C
04223 0E73                        10            .byte	$10
04224 0E74                        00            .byte	0
04225 0E75                        08            .byte	8
04226 0E76                        10            .byte	$10
04227 0E77                        00            .byte	0
04228 0E78                        04            .byte	4
04229                                           ! 822   0x10,0x00,0x00, 0x10,0x04,0x00, 0x10,0x08,0x00, 0x10,0x0c,0x00, 0x10,0x10,0x00, 0x0c,0x10,0x00, 0x08,0x10,0x00, 0x04,0x10,0x00,
04230 0E79                        10            .byte	$10
04231 0E7A                        00            .byte	0
04232 0E7B                        00            .byte	0
04233 0E7C                        10            .byte	$10
04234 0E7D                        04            .byte	4
04235 0E7E                        00            .byte	0
04236 0E7F                        10            .byte	$10
04237 0E80                        08            .byte	8
04238 0E81                        00            .byte	0
04239 0E82                        10            .byte	$10
04240 0E83                        0C            .byte	$C
04241 0E84                        00            .byte	0
04242 0E85                        10            .byte	$10
04243 0E86                        10            .byte	$10
04244 0E87                        00            .byte	0
04245 0E88                        0C            .byte	$C
04246 0E89                        10            .byte	$10
04247 0E8A                        00            .byte	0
04248 0E8B                        08            .byte	8
04249 0E8C                        10            .byte	$10
04250 0E8D                        00            .byte	0
04251 0E8E                        04            .byte	4
04252 0E8F                        10            .byte	$10
04253 0E90                        00            .byte	0
04254                                           ! 823   0x00,0x10,0x00, 0x00,0x10,0x04, 0x00,0x10,0x08, 0x00,0x10,0x0c, 0x00,0x10,0x10, 0x00,0x0c,0x10, 0x00,0x0
04255 0E91                        00            .byte	0
04256 0E92                        10            .byte	$10
04257 0E93                        00            .byte	0
04258 0E94                        00            .byte	0
04259 0E95                        10            .byte	$10
04260 0E96                        04            .byte	4
04261 0E97                        00            .byte	0
04262 0E98                        10            .byte	$10
04263 0E99                        08            .byte	8
04264 0E9A                        00            .byte	0
04265 0E9B                        10            .byte	$10
04266 0E9C                        0C            .byte	$C
04267 0E9D                        00            .byte	0
04268 0E9E                        10            .byte	$10
04269 0E9F                        10            .byte	$10
04270 0EA0                        00            .byte	0
04271 0EA1                        0C            .byte	$C
04272 0EA2                        10            .byte	$10
04273 0EA3                        00            .byte	0
04274                                           ! 823 8,0x10, 0x00,0x04,0x10,
04275 0EA4                        08            .byte	8
04276 0EA5                        10            .byte	$10
04277 0EA6                        00            .byte	0
04278 0EA7                        04            .byte	4
04279 0EA8                        10            .byte	$10
04280                                           ! 824   0x08,0x08,0x10, 0x0a,0x08,0x10, 0x0c,0x08,0x10, 0x0e,0x08,0x10, 0x10,0x08,0x10, 0x10,0x08,0x0e, 0x10,0x08,0x0c, 0x10,0x08,0x0a,
04281 0EA9                        08            .byte	8
04282 0EAA                        08            .byte	8
04283 0EAB                        10            .byte	$10
04284 0EAC                        0A            .byte	$A
04285 0EAD                        08            .byte	8
04286 0EAE                        10            .byte	$10
04287 0EAF                        0C            .byte	$C
04288 0EB0                        08            .byte	8
04289 0EB1                        10            .byte	$10
04290 0EB2                        0E            .byte	$E
04291 0EB3                        08            .byte	8
04292 0EB4                        10            .byte	$10
04293 0EB5                        10            .byte	$10
04294 0EB6                        08            .byte	8
04295 0EB7                        10            .byte	$10
04296 0EB8                        10            .byte	$10
04297 0EB9                        08            .byte	8
04298 0EBA                        0E            .byte	$E
04299 0EBB                        10            .byte	$10
04300 0EBC                        08            .byte	8
04301 0EBD                        0C            .byte	$C
04302 0EBE                        10            .byte	$10
04303 0EBF                        08            .byte	8
04304 0EC0                        0A            .byte	$A
04305                                           ! 825   0x10,0x08,0x08, 0x10,0x0a,0x08, 0x10,0x0c,0x08, 0x10,0x0e,0x08, 0x10,0x10,0x08, 0x0e,0x10,0x08, 0x0c,0x10,0x08, 0x0a,0x10,0x08,
04306 0EC1                        10            .byte	$10
04307 0EC2                        08            .byte	8
04308 0EC3                        08            .byte	8
04309 0EC4                        10            .byte	$10
04310 0EC5                        0A            .byte	$A
04311 0EC6                        08            .byte	8
04312 0EC7                        10            .byte	$10
04313 0EC8                        0C            .byte	$C
04314 0EC9                        08            .byte	8
04315 0ECA                        10            .byte	$10
04316 0ECB                        0E            .byte	$E
04317 0ECC                        08            .byte	8
04318 0ECD                        10            .byte	$10
04319 0ECE                        10            .byte	$10
04320 0ECF                        08            .byte	8
04321 0ED0                        0E            .byte	$E
04322 0ED1                        10            .byte	$10
04323 0ED2                        08            .byte	8
04324 0ED3                        0C            .byte	$C
04325 0ED4                        10            .byte	$10
04326 0ED5                        08            .byte	8
04327 0ED6                        0A            .byte	$A
04328 0ED7                        10            .byte	$10
04329 0ED8                        08            .byte	8
04330                                           ! 826   0x08,0x10,0x08, 0x08,0x10,0x0a, 0x08,0x10,0x0c, 0x08,0x10,0x0e, 0x08,0x10,0x10, 0x08,0x0e,0x10, 0x08,0x0c,0x10, 0x08,0x0a,0x10,
04331 0ED9                        08            .byte	8
04332 0EDA                        10            .byte	$10
04333 0EDB                        08            .byte	8
04334 0EDC                        08            .byte	8
04335 0EDD                        10            .byte	$10
04336 0EDE                        0A            .byte	$A
04337 0EDF                        08            .byte	8
04338 0EE0                        10            .byte	$10
04339 0EE1                        0C            .byte	$C
04340 0EE2                        08            .byte	8
04341 0EE3                        10            .byte	$10
04342 0EE4                        0E            .byte	$E
04343 0EE5                        08            .byte	8
04344 0EE6                        10            .byte	$10
04345 0EE7                        10            .byte	$10
04346 0EE8                        08            .byte	8
04347 0EE9                        0E            .byte	$E
04348 0EEA                        10            .byte	$10
04349 0EEB                        08            .byte	8
04350 0EEC                        0C            .byte	$C
04351 0EED                        10            .byte	$10
04352 0EEE                        08            .byte	8
04353 0EEF                        0A            .byte	$A
04354 0EF0                        10            .byte	$10
04355                                           ! 827   0x0b,0x0b,0x10, 0x0c,0x0b,0x10, 0x0d,0x0b,0x10, 0x0f,0x0b,0x10, 0x10,0x0b,0x10, 0x10,0x0b,0x0f, 0x10,0x0b,0x0d, 0x10,0x0b,0x0c,
04356 0EF1                        0B            .byte	$B
04357 0EF2                        0B            .byte	$B
04358 0EF3                        10            .byte	$10
04359 0EF4                        0C            .byte	$C
04360 0EF5                        0B            .byte	$B
04361 0EF6                        10            .byte	$10
04362 0EF7                        0D            .byte	$D
04363 0EF8                        0B            .byte	$B
04364 0EF9                        10            .byte	$10
04365 0EFA                        0F            .byte	$F
04366 0EFB                        0B            .byte	$B
04367 0EFC                        10            .byte	$10
04368 0EFD                        10            .byte	$10
04369 0EFE                        0B            .byte	$B
04370 0EFF                        10            .byte	$10
04371 0F00                        10            .byte	$10
04372 0F01                        0B            .byte	$B
04373 0F02                        0F            .byte	$F
04374 0F03                        10            .byte	$10
04375 0F04                        0B            .byte	$B
04376 0F05                        0D            .byte	$D
04377 0F06                        10            .byte	$10
04378 0F07                        0B            .byte	$B
04379 0F08                        0C            .byte	$C
04380                                           ! 828   0x10,0x0b,0x0b, 0x10,0x0c,0x0b, 0x10,0x0d,0x0b, 0x10,0x0f,0x0b, 0x10,0x10,0x0b, 0x0f,0x10,0x0b, 0x0d,0x10,0x0b, 0x0c,0x10,0x0b,
04381 0F09                        10            .byte	$10
04382 0F0A                        0B            .byte	$B
04383 0F0B                        0B            .byte	$B
04384 0F0C                        10            .byte	$10
04385 0F0D                        0C            .byte	$C
04386 0F0E                        0B            .byte	$B
04387 0F0F                        10            .byte	$10
04388 0F10                        0D            .byte	$D
04389 0F11                        0B            .byte	$B
04390 0F12                        10            .byte	$10
04391 0F13                        0F            .byte	$F
04392 0F14                        0B            .byte	$B
04393 0F15                        10            .byte	$10
04394 0F16                        10            .byte	$10
04395 0F17                        0B            .byte	$B
04396 0F18                        0F            .byte	$F
04397 0F19                        10            .byte	$10
04398 0F1A                        0B            .byte	$B
04399 0F1B                        0D            .byte	$D
04400 0F1C                        10            .byte	$10
04401 0F1D                        0B            .byte	$B
04402 0F1E                        0C            .byte	$C
04403 0F1F                        10            .byte	$10
04404 0F20                        0B            .byte	$B
04405                                           ! 829   0x0b,0x10,0x0b, 0x0b,0x10,0x0c, 0x0b,0x10,0x0d, 0x0b,0x10,0x0f, 0x0b,0x10,0x10, 0x0b,0x0f,0x10, 0x0b,0x0d,0x10, 0x0b,0x0c,0x10,
04406 0F21                        0B            .byte	$B
04407 0F22                        10            .byte	$10
04408 0F23                        0B            .byte	$B
04409 0F24                        0B            .byte	$B
04410 0F25                        10            .byte	$10
04411 0F26                        0C            .byte	$C
04412 0F27                        0B            .byte	$B
04413 0F28                        10            .byte	$10
04414 0F29                        0D            .byte	$D
04415 0F2A                        0B            .byte	$B
04416 0F2B                        10            .byte	$10
04417 0F2C                        0F            .byte	$F
04418 0F2D                        0B            .byte	$B
04419 0F2E                        10            .byte	$10
04420 0F2F                        10            .byte	$10
04421 0F30                        0B            .byte	$B
04422 0F31                        0F            .byte	$F
04423 0F32                        10            .byte	$10
04424 0F33                        0B            .byte	$B
04425 0F34                        0D            .byte	$D
04426 0F35                        10            .byte	$10
04427 0F36                        0B            .byte	$B
04428 0F37                        0C            .byte	$C
04429 0F38                        10            .byte	$10
04430                                           ! 830   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00
04431 0F39                        00            .byte	0
04432 0F3A                        00            .byte	0
04433 0F3B                        00            .byte	0
04434 0F3C                        00            .byte	0
04435 0F3D                        00            .byte	0
04436 0F3E                        00            .byte	0
04437 0F3F                        00            .byte	0
04438 0F40                        00            .byte	0
04439 0F41                        00            .byte	0
04440 0F42                        00            .byte	0
04441 0F43                        00            .byte	0
04442 0F44                        00            .byte	0
04443 0F45                        00            .byte	0
04444 0F46                        00            .byte	0
04445 0F47                        00            .byte	0
04446 0F48                        00            .byte	0
04447 0F49                        00            .byte	0
04448 0F4A                        00            .byte	0
04449 0F4B                        00            .byte	0
04450 0F4C                        00            .byte	0
04451 0F4D                        00            .byte	0
04452 0F4E                        00            .byte	0
04453 0F4F                        00            .byte	0
04454                                           ! 831 };
04455 0F50                        00            .byte	0
04456                                           !BCC_EOS
04457                                           ! 832 static Bit8u static_functionality[0x10]=
04458                                           ! 833 {
04459                       00000F51            _static_functionality:
04460                                           ! 834          0xff,
04461 0F51                        FF            .byte	$FF
04462                                           ! 835          0xe0,
04463 0F52                        E0            .byte	$E0
04464                                           ! 836          0x0f,
04465 0F53                        0F            .byte	$F
04466                                           ! 837          0x00, 0x00, 0x00, 0x00,
04467 0F54                        00            .byte	0
04468 0F55                        00            .byte	0
04469 0F56                        00            .byte	0
04470 0F57                        00            .byte	0
04471                                           ! 838          0x07,
04472 0F58                        07            .byte	7
04473                                           ! 839          0x02,
04474 0F59                        02            .byte	2
04475                                           ! 840          0x08,
04476 0F5A                        08            .byte	8
04477                                           ! 841          0xe7,
04478 0F5B                        E7            .byte	$E7
04479                                           ! 842          0x0c,
04480 0F5C                        0C            .byte	$C
04481                                           ! 843          0x00,
04482 0F5D                        00            .byte	0
04483                                           ! 844          0x00,
04484 0F5E                        00            .byte	0
04485                                           ! 845          0x00,
04486 0F5F                        00            .byte	0
04487                                           ! 846          0x00
04488                                           ! 847 };
04489 0F60                        00            .byte	0
04490                                           !BCC_EOS
04491                                           ! 848 static Bit8u vgafont8[256*8]=
04492                                           ! 849 {
04493                       00000F61            _vgafont8:
04494                                           ! 850  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
04495 0F61                        00            .byte	0
04496 0F62                        00            .byte	0
04497 0F63                        00            .byte	0
04498 0F64                        00            .byte	0
04499 0F65                        00            .byte	0
04500 0F66                        00            .byte	0
04501 0F67                        00            .byte	0
04502 0F68                        00            .byte	0
04503                                           ! 851  0x7e, 0x81, 0xa5, 0x81, 0xbd, 0x99, 0x81, 0x7e,
04504 0F69                        7E            .byte	$7E
04505 0F6A                        81            .byte	$81
04506 0F6B                        A5            .byte	$A5
04507 0F6C                        81            .byte	$81
04508 0F6D                        BD            .byte	$BD
04509 0F6E                        99            .byte	$99
04510 0F6F                        81            .byte	$81
04511 0F70                        7E            .byte	$7E
04512                                           ! 852  0x7e, 0xff, 0xdb, 0xff, 0xc3, 0xe7, 0xff, 0x7e,
04513 0F71                        7E            .byte	$7E
04514 0F72                        FF            .byte	$FF
04515 0F73                        DB            .byte	$DB
04516 0F74                        FF            .byte	$FF
04517 0F75                        C3            .byte	$C3
04518 0F76                        E7            .byte	$E7
04519 0F77                        FF            .byte	$FF
04520 0F78                        7E            .byte	$7E
04521                                           ! 853  0x6c, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00,
04522 0F79                        6C            .byte	$6C
04523 0F7A                        FE            .byte	$FE
04524 0F7B                        FE            .byte	$FE
04525 0F7C                        FE            .byte	$FE
04526 0F7D                        7C            .byte	$7C
04527 0F7E                        38            .byte	$38
04528 0F7F                        10            .byte	$10
04529 0F80                        00            .byte	0
04530                                           ! 854  0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00,
04531 0F81                        10            .byte	$10
04532 0F82                        38            .byte	$38
04533 0F83                        7C            .byte	$7C
04534 0F84                        FE            .byte	$FE
04535 0F85                        7C            .byte	$7C
04536 0F86                        38            .byte	$38
04537 0F87                        10            .byte	$10
04538 0F88                        00            .byte	0
04539                                           ! 855  0x38, 0x7c, 0x38, 0xfe, 0xfe, 0x7c, 0x38, 0x7c,
04540 0F89                        38            .byte	$38
04541 0F8A                        7C            .byte	$7C
04542 0F8B                        38            .byte	$38
04543 0F8C                        FE            .byte	$FE
04544 0F8D                        FE            .byte	$FE
04545 0F8E                        7C            .byte	$7C
04546 0F8F                        38            .byte	$38
04547 0F90                        7C            .byte	$7C
04548                                           ! 856  0x10, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x7c,
04549 0F91                        10            .byte	$10
04550 0F92                        10            .byte	$10
04551 0F93                        38            .byte	$38
04552 0F94                        7C            .byte	$7C
04553 0F95                        FE            .byte	$FE
04554 0F96                        7C            .byte	$7C
04555 0F97                        38            .byte	$38
04556 0F98                        7C            .byte	$7C
04557                                           ! 857  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00,
04558 0F99                        00            .byte	0
04559 0F9A                        00            .byte	0
04560 0F9B                        18            .byte	$18
04561 0F9C                        3C            .byte	$3C
04562 0F9D                        3C            .byte	$3C
04563 0F9E                        18            .byte	$18
04564 0F9F                        00            .byte	0
04565 0FA0                        00            .byte	0
04566                                           ! 858  0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff,
04567 0FA1                        FF            .byte	$FF
04568 0FA2                        FF            .byte	$FF
04569 0FA3                        E7            .byte	$E7
04570 0FA4                        C3            .byte	$C3
04571 0FA5                        C3            .byte	$C3
04572 0FA6                        E7            .byte	$E7
04573 0FA7                        FF            .byte	$FF
04574 0FA8                        FF            .byte	$FF
04575                                           ! 859  0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00,
04576 0FA9                        00            .byte	0
04577 0FAA                        3C            .byte	$3C
04578 0FAB                        66            .byte	$66
04579 0FAC                        42            .byte	$42
04580 0FAD                        42            .byte	$42
04581 0FAE                        66            .byte	$66
04582 0FAF                        3C            .byte	$3C
04583 0FB0                        00            .byte	0
04584                                           ! 860  0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff,
04585 0FB1                        FF            .byte	$FF
04586 0FB2                        C3            .byte	$C3
04587 0FB3                        99            .byte	$99
04588 0FB4                        BD            .byte	$BD
04589 0FB5                        BD            .byte	$BD
04590 0FB6                        99            .byte	$99
04591 0FB7                        C3            .byte	$C3
04592 0FB8                        FF            .byte	$FF
04593                                           ! 861  0x0f, 0x07, 0x0f, 0x7d, 0xcc, 0xcc, 0xcc, 0x78,
04594 0FB9                        0F            .byte	$F
04595 0FBA                        07            .byte	7
04596 0FBB                        0F            .byte	$F
04597 0FBC                        7D            .byte	$7D
04598 0FBD                        CC            .byte	$CC
04599 0FBE                        CC            .byte	$CC
04600 0FBF                        CC            .byte	$CC
04601 0FC0                        78            .byte	$78
04602                                           ! 862  0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18,
04603 0FC1                        3C            .byte	$3C
04604 0FC2                        66            .byte	$66
04605 0FC3                        66            .byte	$66
04606 0FC4                        66            .byte	$66
04607 0FC5                        3C            .byte	$3C
04608 0FC6                        18            .byte	$18
04609 0FC7                        7E            .byte	$7E
04610 0FC8                        18            .byte	$18
04611                                           ! 863  0x3f, 0x33, 0x3f, 0x30, 0x30, 0x70, 0xf0, 0xe0,
04612 0FC9                        3F            .byte	$3F
04613 0FCA                        33            .byte	$33
04614 0FCB                        3F            .byte	$3F
04615 0FCC                        30            .byte	$30
04616 0FCD                        30            .byte	$30
04617 0FCE                        70            .byte	$70
04618 0FCF                        F0            .byte	$F0
04619 0FD0                        E0            .byte	$E0
04620                                           ! 864  0x7f, 0x63, 0x7f, 0x63, 0x63, 0x67, 0xe6, 0xc0,
04621 0FD1                        7F            .byte	$7F
04622 0FD2                        63            .byte	$63
04623 0FD3                        7F            .byte	$7F
04624 0FD4                        63            .byte	$63
04625 0FD5                        63            .byte	$63
04626 0FD6                        67            .byte	$67
04627 0FD7                        E6            .byte	$E6
04628 0FD8                        C0            .byte	$C0
04629                                           ! 865  0x99, 0x5a, 0x3c, 0xe7, 0xe7, 0x3c, 0x5a, 0x99,
04630 0FD9                        99            .byte	$99
04631 0FDA                        5A            .byte	$5A
04632 0FDB                        3C            .byte	$3C
04633 0FDC                        E7            .byte	$E7
04634 0FDD                        E7            .byte	$E7
04635 0FDE                        3C            .byte	$3C
04636 0FDF                        5A            .byte	$5A
04637 0FE0                        99            .byte	$99
04638                                           ! 866  0x80, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0
04639 0FE1                        80            .byte	$80
04640 0FE2                        E0            .byte	$E0
04641 0FE3                        F8            .byte	$F8
04642 0FE4                        FE            .byte	$FE
04643 0FE5                        F8            .byte	$F8
04644 0FE6                        E0            .byte	$E0
04645                                           ! 866 x80, 0x00,
04646 0FE7                        80            .byte	$80
04647 0FE8                        00            .byte	0
04648                                           ! 867  0x02, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x02, 0x00,
04649 0FE9                        02            .byte	2
04650 0FEA                        0E            .byte	$E
04651 0FEB                        3E            .byte	$3E
04652 0FEC                        FE            .byte	$FE
04653 0FED                        3E            .byte	$3E
04654 0FEE                        0E            .byte	$E
04655 0FEF                        02            .byte	2
04656 0FF0                        00            .byte	0
04657                                           ! 868  0x18, 0x3c, 0x7e, 0x18, 0x18, 0x7e, 0x3c, 0x18,
04658 0FF1                        18            .byte	$18
04659 0FF2                        3C            .byte	$3C
04660 0FF3                        7E            .byte	$7E
04661 0FF4                        18            .byte	$18
04662 0FF5                        18            .byte	$18
04663 0FF6                        7E            .byte	$7E
04664 0FF7                        3C            .byte	$3C
04665 0FF8                        18            .byte	$18
04666                                           ! 869  0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x00,
04667 0FF9                        66            .byte	$66
04668 0FFA                        66            .byte	$66
04669 0FFB                        66            .byte	$66
04670 0FFC                        66            .byte	$66
04671 0FFD                        66            .byte	$66
04672 0FFE                        00            .byte	0
04673 0FFF                        66            .byte	$66
04674 1000                        00            .byte	0
04675                                           ! 870  0x7f, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x00,
04676 1001                        7F            .byte	$7F
04677 1002                        DB            .byte	$DB
04678 1003                        DB            .byte	$DB
04679 1004                        7B            .byte	$7B
04680 1005                        1B            .byte	$1B
04681 1006                        1B            .byte	$1B
04682 1007                        1B            .byte	$1B
04683 1008                        00            .byte	0
04684                                           ! 871  0x3e, 0x63, 0x38, 0x6c, 0x6c, 0x38, 0xcc, 0x78,
04685 1009                        3E            .byte	$3E
04686 100A                        63            .byte	$63
04687 100B                        38            .byte	$38
04688 100C                        6C            .byte	$6C
04689 100D                        6C            .byte	$6C
04690 100E                        38            .byte	$38
04691 100F                        CC            .byte	$CC
04692 1010                        78            .byte	$78
04693                                           ! 872  0x00, 0x00, 0x00, 0x00, 0x7e, 0x7e, 0x7e, 0x00,
04694 1011                        00            .byte	0
04695 1012                        00            .byte	0
04696 1013                        00            .byte	0
04697 1014                        00            .byte	0
04698 1015                        7E            .byte	$7E
04699 1016                        7E            .byte	$7E
04700 1017                        7E            .byte	$7E
04701 1018                        00            .byte	0
04702                                           ! 873  0x18, 0x3c, 0x7e, 0x18, 0x7e, 0x3c, 0x18, 0xff,
04703 1019                        18            .byte	$18
04704 101A                        3C            .byte	$3C
04705 101B                        7E            .byte	$7E
04706 101C                        18            .byte	$18
04707 101D                        7E            .byte	$7E
04708 101E                        3C            .byte	$3C
04709 101F                        18            .byte	$18
04710 1020                        FF            .byte	$FF
04711                                           ! 874  0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x00,
04712 1021                        18            .byte	$18
04713 1022                        3C            .byte	$3C
04714 1023                        7E            .byte	$7E
04715 1024                        18            .byte	$18
04716 1025                        18            .byte	$18
04717 1026                        18            .byte	$18
04718 1027                        18            .byte	$18
04719 1028                        00            .byte	0
04720                                           ! 875  0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00,
04721 1029                        18            .byte	$18
04722 102A                        18            .byte	$18
04723 102B                        18            .byte	$18
04724 102C                        18            .byte	$18
04725 102D                        7E            .byte	$7E
04726 102E                        3C            .byte	$3C
04727 102F                        18            .byte	$18
04728 1030                        00            .byte	0
04729                                           ! 876  0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00,
04730 1031                        00            .byte	0
04731 1032                        18            .byte	$18
04732 1033                        0C            .byte	$C
04733 1034                        FE            .byte	$FE
04734 1035                        0C            .byte	$C
04735 1036                        18            .byte	$18
04736 1037                        00            .byte	0
04737 1038                        00            .byte	0
04738                                           ! 877  0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00,
04739 1039                        00            .byte	0
04740 103A                        30            .byte	$30
04741 103B                        60            .byte	$60
04742 103C                        FE            .byte	$FE
04743 103D                        60            .byte	$60
04744 103E                        30            .byte	$30
04745 103F                        00            .byte	0
04746 1040                        00            .byte	0
04747                                           ! 878  0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00,
04748 1041                        00            .byte	0
04749 1042                        00            .byte	0
04750 1043                        C0            .byte	$C0
04751 1044                        C0            .byte	$C0
04752 1045                        C0            .byte	$C0
04753 1046                        FE            .byte	$FE
04754 1047                        00            .byte	0
04755 1048                        00            .byte	0
04756                                           ! 879  0x00, 0x24, 0x66, 0xff, 0x66, 0x24, 0x00, 0x00,
04757 1049                        00            .byte	0
04758 104A                        24            .byte	$24
04759 104B                        66            .byte	$66
04760 104C                        FF            .byte	$FF
04761 104D                        66            .byte	$66
04762 104E                        24            .byte	$24
04763 104F                        00            .byte	0
04764 1050                        00            .byte	0
04765                                           ! 880  0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x00, 0x00,
04766 1051                        00            .byte	0
04767 1052                        18            .byte	$18
04768 1053                        3C            .byte	$3C
04769 1054                        7E            .byte	$7E
04770 1055                        FF            .byte	$FF
04771 1056                        FF            .byte	$FF
04772 1057                        00            .byte	0
04773 1058                        00            .byte	0
04774                                           ! 881  0x00, 0xff, 0xff, 0x7e, 0x3c, 0x18, 0x00, 0x00,
04775 1059                        00            .byte	0
04776 105A                        FF            .byte	$FF
04777 105B                        FF            .byte	$FF
04778 105C                        7E            .byte	$7E
04779 105D                        3C            .byte	$3C
04780 105E                        18            .byte	$18
04781 105F                        00            .byte	0
04782 1060                        00            .byte	0
04783                                           ! 882  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
04784 1061                        00            .byte	0
04785 1062                        00            .byte	0
04786 1063                        00            .byte	0
04787 1064                        00            .byte	0
04788 1065                        00            .byte	0
04789 1066                        00            .byte	0
04790 1067                        00            .byte	0
04791 1068                        00            .byte	0
04792                                           ! 883  0x30, 0x78, 0x78, 0x30, 0x30, 0x00, 0x30, 0x00,
04793 1069                        30            .byte	$30
04794 106A                        78            .byte	$78
04795 106B                        78            .byte	$78
04796 106C                        30            .byte	$30
04797 106D                        30            .byte	$30
04798 106E                        00            .byte	0
04799 106F                        30            .byte	$30
04800 1070                        00            .byte	0
04801                                           ! 884  0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00,
04802 1071                        6C            .byte	$6C
04803 1072                        6C            .byte	$6C
04804 1073                        6C            .byte	$6C
04805 1074                        00            .byte	0
04806 1075                        00            .byte	0
04807 1076                        00            .byte	0
04808 1077                        00            .byte	0
04809 1078                        00            .byte	0
04810                                           ! 885  0x6c, 0x6c, 0xfe, 0x6c, 0xfe, 0x6c, 0x6c, 0x00,
04811 1079                        6C            .byte	$6C
04812 107A                        6C            .byte	$6C
04813 107B                        FE            .byte	$FE
04814 107C                        6C            .byte	$6C
04815 107D                        FE            .byte	$FE
04816 107E                        6C            .byte	$6C
04817 107F                        6C            .byte	$6C
04818 1080                        00            .byte	0
04819                                           ! 886  0x30, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x30, 0x00,
04820 1081                        30            .byte	$30
04821 1082                        7C            .byte	$7C
04822 1083                        C0            .byte	$C0
04823 1084                        78            .byte	$78
04824 1085                        0C            .byte	$C
04825 1086                        F8            .byte	$F8
04826 1087                        30            .byte	$30
04827 1088                        00            .byte	0
04828                                           ! 887  0x00, 0xc6, 0xcc, 0x18, 0x30, 0x66, 0xc6, 0x00,
04829 1089                        00            .byte	0
04830 108A                        C6            .byte	$C6
04831 108B                        CC            .byte	$CC
04832 108C                        18            .byte	$18
04833 108D                        30            .byte	$30
04834 108E                        66            .byte	$66
04835 108F                        C6            .byte	$C6
04836 1090                        00            .byte	0
04837                                           ! 888  0x38, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0x76, 0x00,
04838 1091                        38            .byte	$38
04839 1092                        6C            .byte	$6C
04840 1093                        38            .byte	$38
04841 1094                        76            .byte	$76
04842 1095                        DC            .byte	$DC
04843 1096                        CC            .byte	$CC
04844 1097                        76            .byte	$76
04845 1098                        00            .byte	0
04846                                           ! 889  0x60, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
04847 1099                        60            .byte	$60
04848 109A                        60            .byte	$60
04849 109B                        C0            .byte	$C0
04850 109C                        00            .byte	0
04851 109D                        00            .byte	0
04852 109E                        00            .byte	0
04853 109F                        00            .byte	0
04854 10A0                        00            .byte	0
04855                                           ! 890  0x18, 0x30, 0x60, 0x60, 0x60, 0x30, 0x18, 0x00,
04856 10A1                        18            .byte	$18
04857 10A2                        30            .byte	$30
04858 10A3                        60            .byte	$60
04859 10A4                        60            .byte	$60
04860 10A5                        60            .byte	$60
04861 10A6                        30            .byte	$30
04862 10A7                        18            .byte	$18
04863 10A8                        00            .byte	0
04864                                           ! 891  0x60, 0x30, 0x18, 0x18, 0x18, 0x30, 0x60, 0x00,
04865 10A9                        60            .byte	$60
04866 10AA                        30            .byte	$30
04867 10AB                        18            .byte	$18
04868 10AC                        18            .byte	$18
04869 10AD                        18            .byte	$18
04870 10AE                        30            .byte	$30
04871 10AF                        60            .byte	$60
04872 10B0                        00            .byte	0
04873                                           ! 892  0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00,
04874 10B1                        00            .byte	0
04875 10B2                        66            .byte	$66
04876 10B3                        3C            .byte	$3C
04877 10B4                        FF            .byte	$FF
04878 10B5                        3C            .byte	$3C
04879 10B6                        66            .byte	$66
04880 10B7                        00            .byte	0
04881 10B8                        00            .byte	0
04882                                           ! 893  0x00, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x00, 0x00,
04883 10B9                        00            .byte	0
04884 10BA                        30            .byte	$30
04885 10BB                        30            .byte	$30
04886 10BC                        FC            .byte	$FC
04887 10BD                        30            .byte	$30
04888 10BE                        30            .byte	$30
04889 10BF                        00            .byte	0
04890 10C0                        00            .byte	0
04891                                           ! 894  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x60,
04892 10C1                        00            .byte	0
04893 10C2                        00            .byte	0
04894 10C3                        00            .byte	0
04895 10C4                        00            .byte	0
04896 10C5                        00            .byte	0
04897 10C6                        30            .byte	$30
04898 10C7                        30            .byte	$30
04899 10C8                        60            .byte	$60
04900                                           ! 895  0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00,
04901 10C9                        00            .byte	0
04902 10CA                        00            .byte	0
04903 10CB                        00            .byte	0
04904 10CC                        FC            .byte	$FC
04905 10CD                        00            .byte	0
04906 10CE                        00            .byte	0
04907 10CF                        00            .byte	0
04908 10D0                        00            .byte	0
04909                                           ! 896  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00,
04910 10D1                        00            .byte	0
04911 10D2                        00            .byte	0
04912 10D3                        00            .byte	0
04913 10D4                        00            .byte	0
04914 10D5                        00            .byte	0
04915 10D6                        30            .byte	$30
04916 10D7                        30            .byte	$30
04917 10D8                        00            .byte	0
04918                                           ! 897  0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00,
04919 10D9                        06            .byte	6
04920 10DA                        0C            .byte	$C
04921 10DB                        18            .byte	$18
04922 10DC                        30            .byte	$30
04923 10DD                        60            .byte	$60
04924 10DE                        C0            .byte	$C0
04925 10DF                        80            .byte	$80
04926 10E0                        00            .byte	0
04927                                           ! 898  0x7c, 0xc6, 0xce, 0xde, 0xf6, 0xe6, 0x7c, 0x00,
04928 10E1                        7C            .byte	$7C
04929 10E2                        C6            .byte	$C6
04930 10E3                        CE            .byte	$CE
04931 10E4                        DE            .byte	$DE
04932 10E5                        F6            .byte	$F6
04933 10E6                        E6            .byte	$E6
04934 10E7                        7C            .byte	$7C
04935 10E8                        00            .byte	0
04936                                           ! 899  0x30, 0x70, 0x30, 0x30, 0x30, 0x30, 0xfc, 0x00,
04937 10E9                        30            .byte	$30
04938 10EA                        70            .byte	$70
04939 10EB                        30            .byte	$30
04940 10EC                        30            .byte	$30
04941 10ED                        30            .byte	$30
04942 10EE                        30            .byte	$30
04943 10EF                        FC            .byte	$FC
04944 10F0                        00            .byte	0
04945                                           ! 900  0x78, 0xcc, 0x0c, 0x38, 0x60, 0xcc, 0xfc, 0x00,
04946 10F1                        78            .byte	$78
04947 10F2                        CC            .byte	$CC
04948 10F3                        0C            .byte	$C
04949 10F4                        38            .byte	$38
04950 10F5                        60            .byte	$60
04951 10F6                        CC            .byte	$CC
04952 10F7                        FC            .byte	$FC
04953 10F8                        00            .byte	0
04954                                           ! 901  0x78, 0xcc, 0x0c, 0x38, 0x0c, 0xcc, 0x78, 0x00,
04955 10F9                        78            .byte	$78
04956 10FA                        CC            .byte	$CC
04957 10FB                        0C            .byte	$C
04958 10FC                        38            .byte	$38
04959 10FD                        0C            .byte	$C
04960 10FE                        CC            .byte	$CC
04961 10FF                        78            .byte	$78
04962 1100                        00            .byte	0
04963                                           ! 902  0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x1e, 0x00,
04964 1101                        1C            .byte	$1C
04965 1102                        3C            .byte	$3C
04966 1103                        6C            .byte	$6C
04967 1104                        CC            .byte	$CC
04968 1105                        FE            .byte	$FE
04969 1106                        0C            .byte	$C
04970 1107                        1E            .byte	$1E
04971 1108                        00            .byte	0
04972                                           ! 903  0xfc, 0xc0, 0xf8, 0x0c, 0x0c, 0xcc, 0x78, 0x00,
04973 1109                        FC            .byte	$FC
04974 110A                        C0            .byte	$C0
04975 110B                        F8            .byte	$F8
04976 110C                        0C            .byte	$C
04977 110D                        0C            .byte	$C
04978 110E                        CC            .byte	$CC
04979 110F                        78            .byte	$78
04980 1110                        00            .byte	0
04981                                           ! 904  0x38, 0x60, 0xc0, 0xf8, 0xcc, 0xcc, 0x78, 0x00,
04982 1111                        38            .byte	$38
04983 1112                        60            .byte	$60
04984 1113                        C0            .byte	$C0
04985 1114                        F8            .byte	$F8
04986 1115                        CC            .byte	$CC
04987 1116                        CC            .byte	$CC
04988 1117                        78            .byte	$78
04989 1118                        00            .byte	0
04990                                           ! 905  0xfc, 0xcc, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x00,
04991 1119                        FC            .byte	$FC
04992 111A                        CC            .byte	$CC
04993 111B                        0C            .byte	$C
04994 111C                        18            .byte	$18
04995 111D                        30            .byte	$30
04996 111E                        30            .byte	$30
04997 111F                        30            .byte	$30
04998 1120                        00            .byte	0
04999                                           ! 906  0x78, 0xcc, 0xcc, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05000 1121                        78            .byte	$78
05001 1122                        CC            .byte	$CC
05002 1123                        CC            .byte	$CC
05003 1124                        78            .byte	$78
05004 1125                        CC            .byte	$CC
05005 1126                        CC            .byte	$CC
05006 1127                        78            .byte	$78
05007 1128                        00            .byte	0
05008                                           ! 907  0x78, 0xcc, 0xcc, 0x7c, 0x0c, 0x18, 0x70, 0x00,
05009 1129                        78            .byte	$78
05010 112A                        CC            .byte	$CC
05011 112B                        CC            .byte	$CC
05012 112C                        7C            .byte	$7C
05013 112D                        0C            .byte	$C
05014 112E                        18            .byte	$18
05015 112F                        70            .byte	$70
05016 1130                        00            .byte	0
05017                                           ! 908  0x00, 0x30, 0x30, 0x00, 0x0
05018 1131                        00            .byte	0
05019 1132                        30            .byte	$30
05020 1133                        30            .byte	$30
05021 1134                        00            .byte	0
05022                                           ! 908 0, 0x30, 0x30, 0x00,
05023 1135                        00            .byte	0
05024 1136                        30            .byte	$30
05025 1137                        30            .byte	$30
05026 1138                        00            .byte	0
05027                                           ! 909  0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x60,
05028 1139                        00            .byte	0
05029 113A                        30            .byte	$30
05030 113B                        30            .byte	$30
05031 113C                        00            .byte	0
05032 113D                        00            .byte	0
05033 113E                        30            .byte	$30
05034 113F                        30            .byte	$30
05035 1140                        60            .byte	$60
05036                                           ! 910  0x18, 0x30, 0x60, 0xc0, 0x60, 0x30, 0x18, 0x00,
05037 1141                        18            .byte	$18
05038 1142                        30            .byte	$30
05039 1143                        60            .byte	$60
05040 1144                        C0            .byte	$C0
05041 1145                        60            .byte	$60
05042 1146                        30            .byte	$30
05043 1147                        18            .byte	$18
05044 1148                        00            .byte	0
05045                                           ! 911  0x00, 0x00, 0xfc, 0x00, 0x00, 0xfc, 0x00, 0x00,
05046 1149                        00            .byte	0
05047 114A                        00            .byte	0
05048 114B                        FC            .byte	$FC
05049 114C                        00            .byte	0
05050 114D                        00            .byte	0
05051 114E                        FC            .byte	$FC
05052 114F                        00            .byte	0
05053 1150                        00            .byte	0
05054                                           ! 912  0x60, 0x30, 0x18, 0x0c, 0x18, 0x30, 0x60, 0x00,
05055 1151                        60            .byte	$60
05056 1152                        30            .byte	$30
05057 1153                        18            .byte	$18
05058 1154                        0C            .byte	$C
05059 1155                        18            .byte	$18
05060 1156                        30            .byte	$30
05061 1157                        60            .byte	$60
05062 1158                        00            .byte	0
05063                                           ! 913  0x78, 0xcc, 0x0c, 0x18, 0x30, 0x00, 0x30, 0x00,
05064 1159                        78            .byte	$78
05065 115A                        CC            .byte	$CC
05066 115B                        0C            .byte	$C
05067 115C                        18            .byte	$18
05068 115D                        30            .byte	$30
05069 115E                        00            .byte	0
05070 115F                        30            .byte	$30
05071 1160                        00            .byte	0
05072                                           ! 914  0x7c, 0xc6, 0xde, 0xde, 0xde, 0xc0, 0x78, 0x00,
05073 1161                        7C            .byte	$7C
05074 1162                        C6            .byte	$C6
05075 1163                        DE            .byte	$DE
05076 1164                        DE            .byte	$DE
05077 1165                        DE            .byte	$DE
05078 1166                        C0            .byte	$C0
05079 1167                        78            .byte	$78
05080 1168                        00            .byte	0
05081                                           ! 915  0x30, 0x78, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0x00,
05082 1169                        30            .byte	$30
05083 116A                        78            .byte	$78
05084 116B                        CC            .byte	$CC
05085 116C                        CC            .byte	$CC
05086 116D                        FC            .byte	$FC
05087 116E                        CC            .byte	$CC
05088 116F                        CC            .byte	$CC
05089 1170                        00            .byte	0
05090                                           ! 916  0xfc, 0x66, 0x66, 0x7c, 0x66, 0x66, 0xfc, 0x00,
05091 1171                        FC            .byte	$FC
05092 1172                        66            .byte	$66
05093 1173                        66            .byte	$66
05094 1174                        7C            .byte	$7C
05095 1175                        66            .byte	$66
05096 1176                        66            .byte	$66
05097 1177                        FC            .byte	$FC
05098 1178                        00            .byte	0
05099                                           ! 917  0x3c, 0x66, 0xc0, 0xc0, 0xc0, 0x66, 0x3c, 0x00,
05100 1179                        3C            .byte	$3C
05101 117A                        66            .byte	$66
05102 117B                        C0            .byte	$C0
05103 117C                        C0            .byte	$C0
05104 117D                        C0            .byte	$C0
05105 117E                        66            .byte	$66
05106 117F                        3C            .byte	$3C
05107 1180                        00            .byte	0
05108                                           ! 918  0xf8, 0x6c, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00,
05109 1181                        F8            .byte	$F8
05110 1182                        6C            .byte	$6C
05111 1183                        66            .byte	$66
05112 1184                        66            .byte	$66
05113 1185                        66            .byte	$66
05114 1186                        6C            .byte	$6C
05115 1187                        F8            .byte	$F8
05116 1188                        00            .byte	0
05117                                           ! 919  0xfe, 0x62, 0x68, 0x78, 0x68, 0x62, 0xfe, 0x00,
05118 1189                        FE            .byte	$FE
05119 118A                        62            .byte	$62
05120 118B                        68            .byte	$68
05121 118C                        78            .byte	$78
05122 118D                        68            .byte	$68
05123 118E                        62            .byte	$62
05124 118F                        FE            .byte	$FE
05125 1190                        00            .byte	0
05126                                           ! 920  0xfe, 0x62, 0x68, 0x78, 0x68, 0x60, 0xf0, 0x00,
05127 1191                        FE            .byte	$FE
05128 1192                        62            .byte	$62
05129 1193                        68            .byte	$68
05130 1194                        78            .byte	$78
05131 1195                        68            .byte	$68
05132 1196                        60            .byte	$60
05133 1197                        F0            .byte	$F0
05134 1198                        00            .byte	0
05135                                           ! 921  0x3c, 0x66, 0xc0, 0xc0, 0xce, 0x66, 0x3e, 0x00,
05136 1199                        3C            .byte	$3C
05137 119A                        66            .byte	$66
05138 119B                        C0            .byte	$C0
05139 119C                        C0            .byte	$C0
05140 119D                        CE            .byte	$CE
05141 119E                        66            .byte	$66
05142 119F                        3E            .byte	$3E
05143 11A0                        00            .byte	0
05144                                           ! 922  0xcc, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0xcc, 0x00,
05145 11A1                        CC            .byte	$CC
05146 11A2                        CC            .byte	$CC
05147 11A3                        CC            .byte	$CC
05148 11A4                        FC            .byte	$FC
05149 11A5                        CC            .byte	$CC
05150 11A6                        CC            .byte	$CC
05151 11A7                        CC            .byte	$CC
05152 11A8                        00            .byte	0
05153                                           ! 923  0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
05154 11A9                        78            .byte	$78
05155 11AA                        30            .byte	$30
05156 11AB                        30            .byte	$30
05157 11AC                        30            .byte	$30
05158 11AD                        30            .byte	$30
05159 11AE                        30            .byte	$30
05160 11AF                        78            .byte	$78
05161 11B0                        00            .byte	0
05162                                           ! 924  0x1e, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00,
05163 11B1                        1E            .byte	$1E
05164 11B2                        0C            .byte	$C
05165 11B3                        0C            .byte	$C
05166 11B4                        0C            .byte	$C
05167 11B5                        CC            .byte	$CC
05168 11B6                        CC            .byte	$CC
05169 11B7                        78            .byte	$78
05170 11B8                        00            .byte	0
05171                                           ! 925  0xe6, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0xe6, 0x00,
05172 11B9                        E6            .byte	$E6
05173 11BA                        66            .byte	$66
05174 11BB                        6C            .byte	$6C
05175 11BC                        78            .byte	$78
05176 11BD                        6C            .byte	$6C
05177 11BE                        66            .byte	$66
05178 11BF                        E6            .byte	$E6
05179 11C0                        00            .byte	0
05180                                           ! 926  0xf0, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00,
05181 11C1                        F0            .byte	$F0
05182 11C2                        60            .byte	$60
05183 11C3                        60            .byte	$60
05184 11C4                        60            .byte	$60
05185 11C5                        62            .byte	$62
05186 11C6                        66            .byte	$66
05187 11C7                        FE            .byte	$FE
05188 11C8                        00            .byte	0
05189                                           ! 927  0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0x00,
05190 11C9                        C6            .byte	$C6
05191 11CA                        EE            .byte	$EE
05192 11CB                        FE            .byte	$FE
05193 11CC                        FE            .byte	$FE
05194 11CD                        D6            .byte	$D6
05195 11CE                        C6            .byte	$C6
05196 11CF                        C6            .byte	$C6
05197 11D0                        00            .byte	0
05198                                           ! 928  0xc6, 0xe6, 0xf6, 0xde, 0xce, 0xc6, 0xc6, 0x00,
05199 11D1                        C6            .byte	$C6
05200 11D2                        E6            .byte	$E6
05201 11D3                        F6            .byte	$F6
05202 11D4                        DE            .byte	$DE
05203 11D5                        CE            .byte	$CE
05204 11D6                        C6            .byte	$C6
05205 11D7                        C6            .byte	$C6
05206 11D8                        00            .byte	0
05207                                           ! 929  0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00,
05208 11D9                        38            .byte	$38
05209 11DA                        6C            .byte	$6C
05210 11DB                        C6            .byte	$C6
05211 11DC                        C6            .byte	$C6
05212 11DD                        C6            .byte	$C6
05213 11DE                        6C            .byte	$6C
05214 11DF                        38            .byte	$38
05215 11E0                        00            .byte	0
05216                                           ! 930  0xfc, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
05217 11E1                        FC            .byte	$FC
05218 11E2                        66            .byte	$66
05219 11E3                        66            .byte	$66
05220 11E4                        7C            .byte	$7C
05221 11E5                        60            .byte	$60
05222 11E6                        60            .byte	$60
05223 11E7                        F0            .byte	$F0
05224 11E8                        00            .byte	0
05225                                           ! 931  0x78, 0xcc, 0xcc, 0xcc, 0xdc, 0x78, 0x1c, 0x00,
05226 11E9                        78            .byte	$78
05227 11EA                        CC            .byte	$CC
05228 11EB                        CC            .byte	$CC
05229 11EC                        CC            .byte	$CC
05230 11ED                        DC            .byte	$DC
05231 11EE                        78            .byte	$78
05232 11EF                        1C            .byte	$1C
05233 11F0                        00            .byte	0
05234                                           ! 932  0xfc, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0xe6, 0x00,
05235 11F1                        FC            .byte	$FC
05236 11F2                        66            .byte	$66
05237 11F3                        66            .byte	$66
05238 11F4                        7C            .byte	$7C
05239 11F5                        6C            .byte	$6C
05240 11F6                        66            .byte	$66
05241 11F7                        E6            .byte	$E6
05242 11F8                        00            .byte	0
05243                                           ! 933  0x78, 0xcc, 0xe0, 0x70, 0x1c, 0xcc, 0x78, 0x00,
05244 11F9                        78            .byte	$78
05245 11FA                        CC            .byte	$CC
05246 11FB                        E0            .byte	$E0
05247 11FC                        70            .byte	$70
05248 11FD                        1C            .byte	$1C
05249 11FE                        CC            .byte	$CC
05250 11FF                        78            .byte	$78
05251 1200                        00            .byte	0
05252                                           ! 934  0xfc, 0xb4, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
05253 1201                        FC            .byte	$FC
05254 1202                        B4            .byte	$B4
05255 1203                        30            .byte	$30
05256 1204                        30            .byte	$30
05257 1205                        30            .byte	$30
05258 1206                        30            .byte	$30
05259 1207                        78            .byte	$78
05260 1208                        00            .byte	0
05261                                           ! 935  0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xfc, 0x00,
05262 1209                        CC            .byte	$CC
05263 120A                        CC            .byte	$CC
05264 120B                        CC            .byte	$CC
05265 120C                        CC            .byte	$CC
05266 120D                        CC            .byte	$CC
05267 120E                        CC            .byte	$CC
05268 120F                        FC            .byte	$FC
05269 1210                        00            .byte	0
05270                                           ! 936  0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00,
05271 1211                        CC            .byte	$CC
05272 1212                        CC            .byte	$CC
05273 1213                        CC            .byte	$CC
05274 1214                        CC            .byte	$CC
05275 1215                        CC            .byte	$CC
05276 1216                        78            .byte	$78
05277 1217                        30            .byte	$30
05278 1218                        00            .byte	0
05279                                           ! 937  0xc6, 0xc6, 0xc6, 0xd6, 0xfe, 0xee, 0xc6, 0x00,
05280 1219                        C6            .byte	$C6
05281 121A                        C6            .byte	$C6
05282 121B                        C6            .byte	$C6
05283 121C                        D6            .byte	$D6
05284 121D                        FE            .byte	$FE
05285 121E                        EE            .byte	$EE
05286 121F                        C6            .byte	$C6
05287 1220                        00            .byte	0
05288                                           ! 938  0xc6, 0xc6, 0x6c, 0x38, 0x38, 0x6c, 0xc6, 0x00,
05289 1221                        C6            .byte	$C6
05290 1222                        C6            .byte	$C6
05291 1223                        6C            .byte	$6C
05292 1224                        38            .byte	$38
05293 1225                        38            .byte	$38
05294 1226                        6C            .byte	$6C
05295 1227                        C6            .byte	$C6
05296 1228                        00            .byte	0
05297                                           ! 939  0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x30, 0x78, 0x00,
05298 1229                        CC            .byte	$CC
05299 122A                        CC            .byte	$CC
05300 122B                        CC            .byte	$CC
05301 122C                        78            .byte	$78
05302 122D                        30            .byte	$30
05303 122E                        30            .byte	$30
05304 122F                        78            .byte	$78
05305 1230                        00            .byte	0
05306                                           ! 940  0xfe, 0xc6, 0x8c, 0x18, 0x32, 0x66, 0xfe, 0x00,
05307 1231                        FE            .byte	$FE
05308 1232                        C6            .byte	$C6
05309 1233                        8C            .byte	$8C
05310 1234                        18            .byte	$18
05311 1235                        32            .byte	$32
05312 1236                        66            .byte	$66
05313 1237                        FE            .byte	$FE
05314 1238                        00            .byte	0
05315                                           ! 941  0x78, 0x60, 0x60, 0x60, 0x60, 0x60, 0x78, 0x00,
05316 1239                        78            .byte	$78
05317 123A                        60            .byte	$60
05318 123B                        60            .byte	$60
05319 123C                        60            .byte	$60
05320 123D                        60            .byte	$60
05321 123E                        60            .byte	$60
05322 123F                        78            .byte	$78
05323 1240                        00            .byte	0
05324                                           ! 942  0xc0, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x02, 0x00,
05325 1241                        C0            .byte	$C0
05326 1242                        60            .byte	$60
05327 1243                        30            .byte	$30
05328 1244                        18            .byte	$18
05329 1245                        0C            .byte	$C
05330 1246                        06            .byte	6
05331 1247                        02            .byte	2
05332 1248                        00            .byte	0
05333                                           ! 943  0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x78, 0x00,
05334 1249                        78            .byte	$78
05335 124A                        18            .byte	$18
05336 124B                        18            .byte	$18
05337 124C                        18            .byte	$18
05338 124D                        18            .byte	$18
05339 124E                        18            .byte	$18
05340 124F                        78            .byte	$78
05341 1250                        00            .byte	0
05342                                           ! 944  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00,
05343 1251                        10            .byte	$10
05344 1252                        38            .byte	$38
05345 1253                        6C            .byte	$6C
05346 1254                        C6            .byte	$C6
05347 1255                        00            .byte	0
05348 1256                        00            .byte	0
05349 1257                        00            .byte	0
05350 1258                        00            .byte	0
05351                                           ! 945  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
05352 1259                        00            .byte	0
05353 125A                        00            .byte	0
05354 125B                        00            .byte	0
05355 125C                        00            .byte	0
05356 125D                        00            .byte	0
05357 125E                        00            .byte	0
05358 125F                        00            .byte	0
05359 1260                        FF            .byte	$FF
05360                                           ! 946  0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
05361 1261                        30            .byte	$30
05362 1262                        30            .byte	$30
05363 1263                        18            .byte	$18
05364 1264                        00            .byte	0
05365 1265                        00            .byte	0
05366 1266                        00            .byte	0
05367 1267                        00            .byte	0
05368 1268                        00            .byte	0
05369                                           ! 947  0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x76, 0x00,
05370 1269                        00            .byte	0
05371 126A                        00            .byte	0
05372 126B                        78            .byte	$78
05373 126C                        0C            .byte	$C
05374 126D                        7C            .byte	$7C
05375 126E                        CC            .byte	$CC
05376 126F                        76            .byte	$76
05377 1270                        00            .byte	0
05378                                           ! 948  0xe0, 0x60, 0x60, 0x7c, 0x66, 0x66, 0xdc, 0x00,
05379 1271                        E0            .byte	$E0
05380 1272                        60            .byte	$60
05381 1273                        60            .byte	$60
05382 1274                        7C            .byte	$7C
05383 1275                        66            .byte	$66
05384 1276                        66            .byte	$66
05385 1277                        DC            .byte	$DC
05386 1278                        00            .byte	0
05387                                           ! 949  0x00, 0x00, 0x78, 0xcc, 0xc0, 0xcc, 0x78, 0x00,
05388 1279                        00            .byte	0
05389 127A                        00            .byte	0
05390 127B                        78            .byte	$78
05391 127C                        CC            .byte	$CC
05392 127D                        C0            .byte	$C0
05393 127E                        CC            .byte	$CC
05394 127F                        78            .byte	$78
05395 1280                        00            .byte	0
05396                                           ! 950  0x1c, 0x0c, 0x0c,
05397 1281                        1C            .byte	$1C
05398 1282                        0C            .byte	$C
05399                                           ! 950  0x7c, 0xcc, 0xcc, 0x76, 0x00,
05400 1283                        0C            .byte	$C
05401 1284                        7C            .byte	$7C
05402 1285                        CC            .byte	$CC
05403 1286                        CC            .byte	$CC
05404 1287                        76            .byte	$76
05405 1288                        00            .byte	0
05406                                           ! 951  0x00, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05407 1289                        00            .byte	0
05408 128A                        00            .byte	0
05409 128B                        78            .byte	$78
05410 128C                        CC            .byte	$CC
05411 128D                        FC            .byte	$FC
05412 128E                        C0            .byte	$C0
05413 128F                        78            .byte	$78
05414 1290                        00            .byte	0
05415                                           ! 952  0x38, 0x6c, 0x60, 0xf0, 0x60, 0x60, 0xf0, 0x00,
05416 1291                        38            .byte	$38
05417 1292                        6C            .byte	$6C
05418 1293                        60            .byte	$60
05419 1294                        F0            .byte	$F0
05420 1295                        60            .byte	$60
05421 1296                        60            .byte	$60
05422 1297                        F0            .byte	$F0
05423 1298                        00            .byte	0
05424                                           ! 953  0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05425 1299                        00            .byte	0
05426 129A                        00            .byte	0
05427 129B                        76            .byte	$76
05428 129C                        CC            .byte	$CC
05429 129D                        CC            .byte	$CC
05430 129E                        7C            .byte	$7C
05431 129F                        0C            .byte	$C
05432 12A0                        F8            .byte	$F8
05433                                           ! 954  0xe0, 0x60, 0x6c, 0x76, 0x66, 0x66, 0xe6, 0x00,
05434 12A1                        E0            .byte	$E0
05435 12A2                        60            .byte	$60
05436 12A3                        6C            .byte	$6C
05437 12A4                        76            .byte	$76
05438 12A5                        66            .byte	$66
05439 12A6                        66            .byte	$66
05440 12A7                        E6            .byte	$E6
05441 12A8                        00            .byte	0
05442                                           ! 955  0x30, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05443 12A9                        30            .byte	$30
05444 12AA                        00            .byte	0
05445 12AB                        70            .byte	$70
05446 12AC                        30            .byte	$30
05447 12AD                        30            .byte	$30
05448 12AE                        30            .byte	$30
05449 12AF                        78            .byte	$78
05450 12B0                        00            .byte	0
05451                                           ! 956  0x0c, 0x00, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78,
05452 12B1                        0C            .byte	$C
05453 12B2                        00            .byte	0
05454 12B3                        0C            .byte	$C
05455 12B4                        0C            .byte	$C
05456 12B5                        0C            .byte	$C
05457 12B6                        CC            .byte	$CC
05458 12B7                        CC            .byte	$CC
05459 12B8                        78            .byte	$78
05460                                           ! 957  0xe0, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0xe6, 0x00,
05461 12B9                        E0            .byte	$E0
05462 12BA                        60            .byte	$60
05463 12BB                        66            .byte	$66
05464 12BC                        6C            .byte	$6C
05465 12BD                        78            .byte	$78
05466 12BE                        6C            .byte	$6C
05467 12BF                        E6            .byte	$E6
05468 12C0                        00            .byte	0
05469                                           ! 958  0x70, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
05470 12C1                        70            .byte	$70
05471 12C2                        30            .byte	$30
05472 12C3                        30            .byte	$30
05473 12C4                        30            .byte	$30
05474 12C5                        30            .byte	$30
05475 12C6                        30            .byte	$30
05476 12C7                        78            .byte	$78
05477 12C8                        00            .byte	0
05478                                           ! 959  0x00, 0x00, 0xcc, 0xfe, 0xfe, 0xd6, 0xc6, 0x00,
05479 12C9                        00            .byte	0
05480 12CA                        00            .byte	0
05481 12CB                        CC            .byte	$CC
05482 12CC                        FE            .byte	$FE
05483 12CD                        FE            .byte	$FE
05484 12CE                        D6            .byte	$D6
05485 12CF                        C6            .byte	$C6
05486 12D0                        00            .byte	0
05487                                           ! 960  0x00, 0x00, 0xf8, 0xcc, 0xcc, 0xcc, 0xcc, 0x00,
05488 12D1                        00            .byte	0
05489 12D2                        00            .byte	0
05490 12D3                        F8            .byte	$F8
05491 12D4                        CC            .byte	$CC
05492 12D5                        CC            .byte	$CC
05493 12D6                        CC            .byte	$CC
05494 12D7                        CC            .byte	$CC
05495 12D8                        00            .byte	0
05496                                           ! 961  0x00, 0x00, 0x78, 0xcc, 0xcc, 0xcc, 0x78, 0x00,
05497 12D9                        00            .byte	0
05498 12DA                        00            .byte	0
05499 12DB                        78            .byte	$78
05500 12DC                        CC            .byte	$CC
05501 12DD                        CC            .byte	$CC
05502 12DE                        CC            .byte	$CC
05503 12DF                        78            .byte	$78
05504 12E0                        00            .byte	0
05505                                           ! 962  0x00, 0x00, 0xdc, 0x66, 0x66, 0x7c, 0x60, 0xf0,
05506 12E1                        00            .byte	0
05507 12E2                        00            .byte	0
05508 12E3                        DC            .byte	$DC
05509 12E4                        66            .byte	$66
05510 12E5                        66            .byte	$66
05511 12E6                        7C            .byte	$7C
05512 12E7                        60            .byte	$60
05513 12E8                        F0            .byte	$F0
05514                                           ! 963  0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0x1e,
05515 12E9                        00            .byte	0
05516 12EA                        00            .byte	0
05517 12EB                        76            .byte	$76
05518 12EC                        CC            .byte	$CC
05519 12ED                        CC            .byte	$CC
05520 12EE                        7C            .byte	$7C
05521 12EF                        0C            .byte	$C
05522 12F0                        1E            .byte	$1E
05523                                           ! 964  0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0xf0, 0x00,
05524 12F1                        00            .byte	0
05525 12F2                        00            .byte	0
05526 12F3                        DC            .byte	$DC
05527 12F4                        76            .byte	$76
05528 12F5                        66            .byte	$66
05529 12F6                        60            .byte	$60
05530 12F7                        F0            .byte	$F0
05531 12F8                        00            .byte	0
05532                                           ! 965  0x00, 0x00, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x00,
05533 12F9                        00            .byte	0
05534 12FA                        00            .byte	0
05535 12FB                        7C            .byte	$7C
05536 12FC                        C0            .byte	$C0
05537 12FD                        78            .byte	$78
05538 12FE                        0C            .byte	$C
05539 12FF                        F8            .byte	$F8
05540 1300                        00            .byte	0
05541                                           ! 966  0x10, 0x30, 0x7c, 0x30, 0x30, 0x34, 0x18, 0x00,
05542 1301                        10            .byte	$10
05543 1302                        30            .byte	$30
05544 1303                        7C            .byte	$7C
05545 1304                        30            .byte	$30
05546 1305                        30            .byte	$30
05547 1306                        34            .byte	$34
05548 1307                        18            .byte	$18
05549 1308                        00            .byte	0
05550                                           ! 967  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00,
05551 1309                        00            .byte	0
05552 130A                        00            .byte	0
05553 130B                        CC            .byte	$CC
05554 130C                        CC            .byte	$CC
05555 130D                        CC            .byte	$CC
05556 130E                        CC            .byte	$CC
05557 130F                        76            .byte	$76
05558 1310                        00            .byte	0
05559                                           ! 968  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00,
05560 1311                        00            .byte	0
05561 1312                        00            .byte	0
05562 1313                        CC            .byte	$CC
05563 1314                        CC            .byte	$CC
05564 1315                        CC            .byte	$CC
05565 1316                        78            .byte	$78
05566 1317                        30            .byte	$30
05567 1318                        00            .byte	0
05568                                           ! 969  0x00, 0x00, 0xc6, 0xd6, 0xfe, 0xfe, 0x6c, 0x00,
05569 1319                        00            .byte	0
05570 131A                        00            .byte	0
05571 131B                        C6            .byte	$C6
05572 131C                        D6            .byte	$D6
05573 131D                        FE            .byte	$FE
05574 131E                        FE            .byte	$FE
05575 131F                        6C            .byte	$6C
05576 1320                        00            .byte	0
05577                                           ! 970  0x00, 0x00, 0xc6, 0x6c, 0x38, 0x6c, 0xc6, 0x00,
05578 1321                        00            .byte	0
05579 1322                        00            .byte	0
05580 1323                        C6            .byte	$C6
05581 1324                        6C            .byte	$6C
05582 1325                        38            .byte	$38
05583 1326                        6C            .byte	$6C
05584 1327                        C6            .byte	$C6
05585 1328                        00            .byte	0
05586                                           ! 971  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05587 1329                        00            .byte	0
05588 132A                        00            .byte	0
05589 132B                        CC            .byte	$CC
05590 132C                        CC            .byte	$CC
05591 132D                        CC            .byte	$CC
05592 132E                        7C            .byte	$7C
05593 132F                        0C            .byte	$C
05594 1330                        F8            .byte	$F8
05595                                           ! 972  0x00, 0x00, 0xfc, 0x98, 0x30, 0x64, 0xfc, 0x00,
05596 1331                        00            .byte	0
05597 1332                        00            .byte	0
05598 1333                        FC            .byte	$FC
05599 1334                        98            .byte	$98
05600 1335                        30            .byte	$30
05601 1336                        64            .byte	$64
05602 1337                        FC            .byte	$FC
05603 1338                        00            .byte	0
05604                                           ! 973  0x1c, 0x30, 0x30, 0xe0, 0x30, 0x30, 0x1c, 0x00,
05605 1339                        1C            .byte	$1C
05606 133A                        30            .byte	$30
05607 133B                        30            .byte	$30
05608 133C                        E0            .byte	$E0
05609 133D                        30            .byte	$30
05610 133E                        30            .byte	$30
05611 133F                        1C            .byte	$1C
05612 1340                        00            .byte	0
05613                                           ! 974  0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00,
05614 1341                        18            .byte	$18
05615 1342                        18            .byte	$18
05616 1343                        18            .byte	$18
05617 1344                        00            .byte	0
05618 1345                        18            .byte	$18
05619 1346                        18            .byte	$18
05620 1347                        18            .byte	$18
05621 1348                        00            .byte	0
05622                                           ! 975  0xe0, 0x30, 0x30, 0x1c, 0x30, 0x30, 0xe0, 0x00,
05623 1349                        E0            .byte	$E0
05624 134A                        30            .byte	$30
05625 134B                        30            .byte	$30
05626 134C                        1C            .byte	$1C
05627 134D                        30            .byte	$30
05628 134E                        30            .byte	$30
05629 134F                        E0            .byte	$E0
05630 1350                        00            .byte	0
05631                                           ! 976  0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
05632 1351                        76            .byte	$76
05633 1352                        DC            .byte	$DC
05634 1353                        00            .byte	0
05635 1354                        00            .byte	0
05636 1355                        00            .byte	0
05637 1356                        00            .byte	0
05638 1357                        00            .byte	0
05639 1358                        00            .byte	0
05640                                           ! 977  0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0x00,
05641 1359                        00            .byte	0
05642 135A                        10            .byte	$10
05643 135B                        38            .byte	$38
05644 135C                        6C            .byte	$6C
05645 135D                        C6            .byte	$C6
05646 135E                        C6            .byte	$C6
05647 135F                        FE            .byte	$FE
05648 1360                        00            .byte	0
05649                                           ! 978  0x78, 0xcc, 0xc0, 0xcc, 0x78, 0x18, 0x0c, 0x78,
05650 1361                        78            .byte	$78
05651 1362                        CC            .byte	$CC
05652 1363                        C0            .byte	$C0
05653 1364                        CC            .byte	$CC
05654 1365                        78            .byte	$78
05655 1366                        18            .byte	$18
05656 1367                        0C            .byte	$C
05657 1368                        78            .byte	$78
05658                                           ! 979  0x00, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05659 1369                        00            .byte	0
05660 136A                        CC            .byte	$CC
05661 136B                        00            .byte	0
05662 136C                        CC            .byte	$CC
05663 136D                        CC            .byte	$CC
05664 136E                        CC            .byte	$CC
05665 136F                        7E            .byte	$7E
05666 1370                        00            .byte	0
05667                                           ! 980  0x1c, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05668 1371                        1C            .byte	$1C
05669 1372                        00            .byte	0
05670 1373                        78            .byte	$78
05671 1374                        CC            .byte	$CC
05672 1375                        FC            .byte	$FC
05673 1376                        C0            .byte	$C0
05674 1377                        78            .byte	$78
05675 1378                        00            .byte	0
05676                                           ! 981  0x7e, 0xc3, 0x3c, 0x06, 0x3e, 0x66, 0x3f, 0x00,
05677 1379                        7E            .byte	$7E
05678 137A                        C3            .byte	$C3
05679 137B                        3C            .byte	$3C
05680 137C                        06            .byte	6
05681 137D                        3E            .byte	$3E
05682 137E                        66            .byte	$66
05683 137F                        3F            .byte	$3F
05684 1380                        00            .byte	0
05685                                           ! 982  0xcc, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05686 1381                        CC            .byte	$CC
05687 1382                        00            .byte	0
05688 1383                        78            .byte	$78
05689 1384                        0C            .byte	$C
05690 1385                        7C            .byte	$7C
05691 1386                        CC            .byte	$CC
05692 1387                        7E            .byte	$7E
05693 1388                        00            .byte	0
05694                                           ! 983  0xe0, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05695 1389                        E0            .byte	$E0
05696 138A                        00            .byte	0
05697 138B                        78            .byte	$78
05698 138C                        0C            .byte	$C
05699 138D                        7C            .byte	$7C
05700 138E                        CC            .byte	$CC
05701 138F                        7E            .byte	$7E
05702 1390                        00            .byte	0
05703                                           ! 984  0x30, 0x30, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05704 1391                        30            .byte	$30
05705 1392                        30            .byte	$30
05706 1393                        78            .byte	$78
05707 1394                        0C            .byte	$C
05708 1395                        7C            .byte	$7C
05709 1396                        CC            .byte	$CC
05710 1397                        7E            .byte	$7E
05711 1398                        00            .byte	0
05712                                           ! 985  0x00, 0x00, 0x78, 0xc0, 0xc0, 0x78, 0x0c, 0x38,
05713 1399                        00            .byte	0
05714 139A                        00            .byte	0
05715 139B                        78            .byte	$78
05716 139C                        C0            .byte	$C0
05717 139D                        C0            .byte	$C0
05718 139E                        78            .byte	$78
05719 139F                        0C            .byte	$C
05720 13A0                        38            .byte	$38
05721                                           ! 986  0x7e, 0xc3, 0x3c, 0x66, 0x7e, 0x60, 0x3c, 0x00,
05722 13A1                        7E            .byte	$7E
05723 13A2                        C3            .byte	$C3
05724 13A3                        3C            .byte	$3C
05725 13A4                        66            .byte	$66
05726 13A5                        7E            .byte	$7E
05727 13A6                        60            .byte	$60
05728 13A7                        3C            .byte	$3C
05729 13A8                        00            .byte	0
05730                                           ! 987  0xcc, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05731 13A9                        CC            .byte	$CC
05732 13AA                        00            .byte	0
05733 13AB                        78            .byte	$78
05734 13AC                        CC            .byte	$CC
05735 13AD                        FC            .byte	$FC
05736 13AE                        C0            .byte	$C0
05737 13AF                        78            .byte	$78
05738 13B0                        00            .byte	0
05739                                           ! 988  0xe0, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05740 13B1                        E0            .byte	$E0
05741 13B2                        00            .byte	0
05742 13B3                        78            .byte	$78
05743 13B4                        CC            .byte	$CC
05744 13B5                        FC            .byte	$FC
05745 13B6                        C0            .byte	$C0
05746 13B7                        78            .byte	$78
05747 13B8                        00            .byte	0
05748                                           ! 989  0xcc, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05749 13B9                        CC            .byte	$CC
05750 13BA                        00            .byte	0
05751 13BB                        70            .byte	$70
05752 13BC                        30            .byte	$30
05753 13BD                        30            .byte	$30
05754 13BE                        30            .byte	$30
05755 13BF                        78            .byte	$78
05756 13C0                        00            .byte	0
05757                                           ! 990  0x7c, 0xc6, 0x38, 0x18, 0x18, 0x18, 0x3c, 0x00,
05758 13C1                        7C            .byte	$7C
05759 13C2                        C6            .byte	$C6
05760 13C3                        38            .byte	$38
05761 13C4                        18            .byte	$18
05762 13C5                        18            .byte	$18
05763 13C6                        18            .byte	$18
05764 13C7                        3C            .byte	$3C
05765 13C8                        00            .byte	0
05766                                           ! 991  0xe0, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05767 13C9                        E0            .byte	$E0
05768 13CA                        00            .byte	0
05769 13CB                        70            .byte	$70
05770 13CC                        30            .byte	$30
05771 13CD                        30            .byte	$30
05772 13CE                        30            .byte	$30
05773 13CF                        78            .byte	$78
05774 13D0                        00            .byte	0
05775                                           ! 992  0xc6, 0
05776 13D1                        C6            .byte	$C6
05777                                           ! 992 x38, 0x6c, 0xc6, 0xfe, 0xc6, 0xc6, 0x00,
05778 13D2                        38            .byte	$38
05779 13D3                        6C            .byte	$6C
05780 13D4                        C6            .byte	$C6
05781 13D5                        FE            .byte	$FE
05782 13D6                        C6            .byte	$C6
05783 13D7                        C6            .byte	$C6
05784 13D8                        00            .byte	0
05785                                           ! 993  0x30, 0x30, 0x00, 0x78, 0xcc, 0xfc, 0xcc, 0x00,
05786 13D9                        30            .byte	$30
05787 13DA                        30            .byte	$30
05788 13DB                        00            .byte	0
05789 13DC                        78            .byte	$78
05790 13DD                        CC            .byte	$CC
05791 13DE                        FC            .byte	$FC
05792 13DF                        CC            .byte	$CC
05793 13E0                        00            .byte	0
05794                                           ! 994  0x1c, 0x00, 0xfc, 0x60, 0x78, 0x60, 0xfc, 0x00,
05795 13E1                        1C            .byte	$1C
05796 13E2                        00            .byte	0
05797 13E3                        FC            .byte	$FC
05798 13E4                        60            .byte	$60
05799 13E5                        78            .byte	$78
05800 13E6                        60            .byte	$60
05801 13E7                        FC            .byte	$FC
05802 13E8                        00            .byte	0
05803                                           ! 995  0x00, 0x00, 0x7f, 0x0c, 0x7f, 0xcc, 0x7f, 0x00,
05804 13E9                        00            .byte	0
05805 13EA                        00            .byte	0
05806 13EB                        7F            .byte	$7F
05807 13EC                        0C            .byte	$C
05808 13ED                        7F            .byte	$7F
05809 13EE                        CC            .byte	$CC
05810 13EF                        7F            .byte	$7F
05811 13F0                        00            .byte	0
05812                                           ! 996  0x3e, 0x6c, 0xcc, 0xfe, 0xcc, 0xcc, 0xce, 0x00,
05813 13F1                        3E            .byte	$3E
05814 13F2                        6C            .byte	$6C
05815 13F3                        CC            .byte	$CC
05816 13F4                        FE            .byte	$FE
05817 13F5                        CC            .byte	$CC
05818 13F6                        CC            .byte	$CC
05819 13F7                        CE            .byte	$CE
05820 13F8                        00            .byte	0
05821                                           ! 997  0x78, 0xcc, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05822 13F9                        78            .byte	$78
05823 13FA                        CC            .byte	$CC
05824 13FB                        00            .byte	0
05825 13FC                        78            .byte	$78
05826 13FD                        CC            .byte	$CC
05827 13FE                        CC            .byte	$CC
05828 13FF                        78            .byte	$78
05829 1400                        00            .byte	0
05830                                           ! 998  0x00, 0xcc, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05831 1401                        00            .byte	0
05832 1402                        CC            .byte	$CC
05833 1403                        00            .byte	0
05834 1404                        78            .byte	$78
05835 1405                        CC            .byte	$CC
05836 1406                        CC            .byte	$CC
05837 1407                        78            .byte	$78
05838 1408                        00            .byte	0
05839                                           ! 999  0x00, 0xe0, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05840 1409                        00            .byte	0
05841 140A                        E0            .byte	$E0
05842 140B                        00            .byte	0
05843 140C                        78            .byte	$78
05844 140D                        CC            .byte	$CC
05845 140E                        CC            .byte	$CC
05846 140F                        78            .byte	$78
05847 1410                        00            .byte	0
05848                                           ! 1000  0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05849 1411                        78            .byte	$78
05850 1412                        CC            .byte	$CC
05851 1413                        00            .byte	0
05852 1414                        CC            .byte	$CC
05853 1415                        CC            .byte	$CC
05854 1416                        CC            .byte	$CC
05855 1417                        7E            .byte	$7E
05856 1418                        00            .byte	0
05857                                           ! 1001  0x00, 0xe0, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05858 1419                        00            .byte	0
05859 141A                        E0            .byte	$E0
05860 141B                        00            .byte	0
05861 141C                        CC            .byte	$CC
05862 141D                        CC            .byte	$CC
05863 141E                        CC            .byte	$CC
05864 141F                        7E            .byte	$7E
05865 1420                        00            .byte	0
05866                                           ! 1002  0x00, 0xcc, 0x00, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05867 1421                        00            .byte	0
05868 1422                        CC            .byte	$CC
05869 1423                        00            .byte	0
05870 1424                        CC            .byte	$CC
05871 1425                        CC            .byte	$CC
05872 1426                        7C            .byte	$7C
05873 1427                        0C            .byte	$C
05874 1428                        F8            .byte	$F8
05875                                           ! 1003  0xc3, 0x18, 0x3c, 0x66, 0x66, 0x3c, 0x18, 0x00,
05876 1429                        C3            .byte	$C3
05877 142A                        18            .byte	$18
05878 142B                        3C            .byte	$3C
05879 142C                        66            .byte	$66
05880 142D                        66            .byte	$66
05881 142E                        3C            .byte	$3C
05882 142F                        18            .byte	$18
05883 1430                        00            .byte	0
05884                                           ! 1004  0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x00,
05885 1431                        CC            .byte	$CC
05886 1432                        00            .byte	0
05887 1433                        CC            .byte	$CC
05888 1434                        CC            .byte	$CC
05889 1435                        CC            .byte	$CC
05890 1436                        CC            .byte	$CC
05891 1437                        78            .byte	$78
05892 1438                        00            .byte	0
05893                                           ! 1005  0x18, 0x18, 0x7e, 0xc0, 0xc0, 0x7e, 0x18, 0x18,
05894 1439                        18            .byte	$18
05895 143A                        18            .byte	$18
05896 143B                        7E            .byte	$7E
05897 143C                        C0            .byte	$C0
05898 143D                        C0            .byte	$C0
05899 143E                        7E            .byte	$7E
05900 143F                        18            .byte	$18
05901 1440                        18            .byte	$18
05902                                           ! 1006  0x38, 0x6c, 0x64, 0xf0, 0x60, 0xe6, 0xfc, 0x00,
05903 1441                        38            .byte	$38
05904 1442                        6C            .byte	$6C
05905 1443                        64            .byte	$64
05906 1444                        F0            .byte	$F0
05907 1445                        60            .byte	$60
05908 1446                        E6            .byte	$E6
05909 1447                        FC            .byte	$FC
05910 1448                        00            .byte	0
05911                                           ! 1007  0xcc, 0xcc, 0x78, 0xfc, 0x30, 0xfc, 0x30, 0x30,
05912 1449                        CC            .byte	$CC
05913 144A                        CC            .byte	$CC
05914 144B                        78            .byte	$78
05915 144C                        FC            .byte	$FC
05916 144D                        30            .byte	$30
05917 144E                        FC            .byte	$FC
05918 144F                        30            .byte	$30
05919 1450                        30            .byte	$30
05920                                           ! 1008  0xf8, 0xcc, 0xcc, 0xfa, 0xc6, 0xcf, 0xc6, 0xc7,
05921 1451                        F8            .byte	$F8
05922 1452                        CC            .byte	$CC
05923 1453                        CC            .byte	$CC
05924 1454                        FA            .byte	$FA
05925 1455                        C6            .byte	$C6
05926 1456                        CF            .byte	$CF
05927 1457                        C6            .byte	$C6
05928 1458                        C7            .byte	$C7
05929                                           ! 1009  0x0e, 0x1b, 0x18, 0x3c, 0x18, 0x18, 0xd8, 0x70,
05930 1459                        0E            .byte	$E
05931 145A                        1B            .byte	$1B
05932 145B                        18            .byte	$18
05933 145C                        3C            .byte	$3C
05934 145D                        18            .byte	$18
05935 145E                        18            .byte	$18
05936 145F                        D8            .byte	$D8
05937 1460                        70            .byte	$70
05938                                           ! 1010  0x1c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05939 1461                        1C            .byte	$1C
05940 1462                        00            .byte	0
05941 1463                        78            .byte	$78
05942 1464                        0C            .byte	$C
05943 1465                        7C            .byte	$7C
05944 1466                        CC            .byte	$CC
05945 1467                        7E            .byte	$7E
05946 1468                        00            .byte	0
05947                                           ! 1011  0x38, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05948 1469                        38            .byte	$38
05949 146A                        00            .byte	0
05950 146B                        70            .byte	$70
05951 146C                        30            .byte	$30
05952 146D                        30            .byte	$30
05953 146E                        30            .byte	$30
05954 146F                        78            .byte	$78
05955 1470                        00            .byte	0
05956                                           ! 1012  0x00, 0x1c, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05957 1471                        00            .byte	0
05958 1472                        1C            .byte	$1C
05959 1473                        00            .byte	0
05960 1474                        78            .byte	$78
05961 1475                        CC            .byte	$CC
05962 1476                        CC            .byte	$CC
05963 1477                        78            .byte	$78
05964 1478                        00            .byte	0
05965                                           ! 1013  0x00, 0x1c, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05966 1479                        00            .byte	0
05967 147A                        1C            .byte	$1C
05968 147B                        00            .byte	0
05969 147C                        CC            .byte	$CC
05970 147D                        CC            .byte	$CC
05971 147E                        CC            .byte	$CC
05972 147F                        7E            .byte	$7E
05973 1480                        00            .byte	0
05974                                           ! 1014  0x00, 0xf8, 0x00, 0xf8, 0xcc, 0xcc, 0xcc, 0x00,
05975 1481                        00            .byte	0
05976 1482                        F8            .byte	$F8
05977 1483                        00            .byte	0
05978 1484                        F8            .byte	$F8
05979 1485                        CC            .byte	$CC
05980 1486                        CC            .byte	$CC
05981 1487                        CC            .byte	$CC
05982 1488                        00            .byte	0
05983                                           ! 1015  0xfc, 0x00, 0xcc, 0xec, 0xfc, 0xdc, 0xcc, 0x00,
05984 1489                        FC            .byte	$FC
05985 148A                        00            .byte	0
05986 148B                        CC            .byte	$CC
05987 148C                        EC            .byte	$EC
05988 148D                        FC            .byte	$FC
05989 148E                        DC            .byte	$DC
05990 148F                        CC            .byte	$CC
05991 1490                        00            .byte	0
05992                                           ! 1016  0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00,
05993 1491                        3C            .byte	$3C
05994 1492                        6C            .byte	$6C
05995 1493                        6C            .byte	$6C
05996 1494                        3E            .byte	$3E
05997 1495                        00            .byte	0
05998 1496                        7E            .byte	$7E
05999 1497                        00            .byte	0
06000 1498                        00            .byte	0
06001                                           ! 1017  0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00,
06002 1499                        38            .byte	$38
06003 149A                        6C            .byte	$6C
06004 149B                        6C            .byte	$6C
06005 149C                        38            .byte	$38
06006 149D                        00            .byte	0
06007 149E                        7C            .byte	$7C
06008 149F                        00            .byte	0
06009 14A0                        00            .byte	0
06010                                           ! 1018  0x30, 0x00, 0x30, 0x60, 0xc0, 0xcc, 0x78, 0x00,
06011 14A1                        30            .byte	$30
06012 14A2                        00            .byte	0
06013 14A3                        30            .byte	$30
06014 14A4                        60            .byte	$60
06015 14A5                        C0            .byte	$C0
06016 14A6                        CC            .byte	$CC
06017 14A7                        78            .byte	$78
06018 14A8                        00            .byte	0
06019                                           ! 1019  0x00, 0x00, 0x00, 0xfc, 0xc0, 0xc0, 0x00, 0x00,
06020 14A9                        00            .byte	0
06021 14AA                        00            .byte	0
06022 14AB                        00            .byte	0
06023 14AC                        FC            .byte	$FC
06024 14AD                        C0            .byte	$C0
06025 14AE                        C0            .byte	$C0
06026 14AF                        00            .byte	0
06027 14B0                        00            .byte	0
06028                                           ! 1020  0x00, 0x00, 0x00, 0xfc, 0x0c, 0x0c, 0x00, 0x00,
06029 14B1                        00            .byte	0
06030 14B2                        00            .byte	0
06031 14B3                        00            .byte	0
06032 14B4                        FC            .byte	$FC
06033 14B5                        0C            .byte	$C
06034 14B6                        0C            .byte	$C
06035 14B7                        00            .byte	0
06036 14B8                        00            .byte	0
06037                                           ! 1021  0xc3, 0xc6, 0xcc, 0xde, 0x33, 0x66, 0xcc, 0x0f,
06038 14B9                        C3            .byte	$C3
06039 14BA                        C6            .byte	$C6
06040 14BB                        CC            .byte	$CC
06041 14BC                        DE            .byte	$DE
06042 14BD                        33            .byte	$33
06043 14BE                        66            .byte	$66
06044 14BF                        CC            .byte	$CC
06045 14C0                        0F            .byte	$F
06046                                           ! 1022  0xc3, 0xc6, 0xcc, 0xdb, 0x37, 0x6f, 0xcf, 0x03,
06047 14C1                        C3            .byte	$C3
06048 14C2                        C6            .byte	$C6
06049 14C3                        CC            .byte	$CC
06050 14C4                        DB            .byte	$DB
06051 14C5                        37            .byte	$37
06052 14C6                        6F            .byte	$6F
06053 14C7                        CF            .byte	$CF
06054 14C8                        03            .byte	3
06055                                           ! 1023  0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00,
06056 14C9                        18            .byte	$18
06057 14CA                        18            .byte	$18
06058 14CB                        00            .byte	0
06059 14CC                        18            .byte	$18
06060 14CD                        18            .byte	$18
06061 14CE                        18            .byte	$18
06062 14CF                        18            .byte	$18
06063 14D0                        00            .byte	0
06064                                           ! 1024  0x00, 0x33, 0x66, 0xcc, 0x66, 0x33, 0x00, 0x00,
06065 14D1                        00            .byte	0
06066 14D2                        33            .byte	$33
06067 14D3                        66            .byte	$66
06068 14D4                        CC            .byte	$CC
06069 14D5                        66            .byte	$66
06070 14D6                        33            .byte	$33
06071 14D7                        00            .byte	0
06072 14D8                        00            .byte	0
06073                                           ! 1025  0x00, 0xcc, 0x66, 0x33, 0x66, 0xcc, 0x00, 0x00,
06074 14D9                        00            .byte	0
06075 14DA                        CC            .byte	$CC
06076 14DB                        66            .byte	$66
06077 14DC                        33            .byte	$33
06078 14DD                        66            .byte	$66
06079 14DE                        CC            .byte	$CC
06080 14DF                        00            .byte	0
06081 14E0                        00            .byte	0
06082                                           ! 1026  0x22, 0x88, 0x22, 0x88, 0x22, 0x88, 0x22, 0x88,
06083 14E1                        22            .byte	$22
06084 14E2                        88            .byte	$88
06085 14E3                        22            .byte	$22
06086 14E4                        88            .byte	$88
06087 14E5                        22            .byte	$22
06088 14E6                        88            .byte	$88
06089 14E7                        22            .byte	$22
06090 14E8                        88            .byte	$88
06091                                           ! 1027  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
06092 14E9                        55            .byte	$55
06093 14EA                        AA            .byte	$AA
06094 14EB                        55            .byte	$55
06095 14EC                        AA            .byte	$AA
06096 14ED                        55            .byte	$55
06097 14EE                        AA            .byte	$AA
06098 14EF                        55            .byte	$55
06099 14F0                        AA            .byte	$AA
06100                                           ! 1028  0xdb, 0x77, 0xdb, 0xee, 0xdb, 0x77, 0xdb, 0xee,
06101 14F1                        DB            .byte	$DB
06102 14F2                        77            .byte	$77
06103 14F3                        DB            .byte	$DB
06104 14F4                        EE            .byte	$EE
06105 14F5                        DB            .byte	$DB
06106 14F6                        77            .byte	$77
06107 14F7                        DB            .byte	$DB
06108 14F8                        EE            .byte	$EE
06109                                           ! 1029  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
06110 14F9                        18            .byte	$18
06111 14FA                        18            .byte	$18
06112 14FB                        18            .byte	$18
06113 14FC                        18            .byte	$18
06114 14FD                        18            .byte	$18
06115 14FE                        18            .byte	$18
06116 14FF                        18            .byte	$18
06117 1500                        18            .byte	$18
06118                                           ! 1030  0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18,
06119 1501                        18            .byte	$18
06120 1502                        18            .byte	$18
06121 1503                        18            .byte	$18
06122 1504                        18            .byte	$18
06123 1505                        F8            .byte	$F8
06124 1506                        18            .byte	$18
06125 1507                        18            .byte	$18
06126 1508                        18            .byte	$18
06127                                           ! 1031  0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18,
06128 1509                        18            .byte	$18
06129 150A                        18            .byte	$18
06130 150B                        F8            .byte	$F8
06131 150C                        18            .byte	$18
06132 150D                        F8            .byte	$F8
06133 150E                        18            .byte	$18
06134 150F                        18            .byte	$18
06135 1510                        18            .byte	$18
06136                                           ! 1032  0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36,
06137 1511                        36            .byte	$36
06138 1512                        36            .byte	$36
06139 1513                        36            .byte	$36
06140 1514                        36            .byte	$36
06141 1515                        F6            .byte	$F6
06142 1516                        36            .byte	$36
06143 1517                        36            .byte	$36
06144 1518                        36            .byte	$36
06145                                           ! 1033  0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36
06146 1519                        00            .byte	0
06147 151A                        00            .byte	0
06148 151B                        00            .byte	0
06149 151C                        00            .byte	0
06150 151D                        FE            .byte	$FE
06151 151E                        36            .byte	$36
06152 151F                        36            .byte	$36
06153                                           ! 1033 ,
06154 1520                        36            .byte	$36
06155                                           ! 1034  0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18,
06156 1521                        00            .byte	0
06157 1522                        00            .byte	0
06158 1523                        F8            .byte	$F8
06159 1524                        18            .byte	$18
06160 1525                        F8            .byte	$F8
06161 1526                        18            .byte	$18
06162 1527                        18            .byte	$18
06163 1528                        18            .byte	$18
06164                                           ! 1035  0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36,
06165 1529                        36            .byte	$36
06166 152A                        36            .byte	$36
06167 152B                        F6            .byte	$F6
06168 152C                        06            .byte	6
06169 152D                        F6            .byte	$F6
06170 152E                        36            .byte	$36
06171 152F                        36            .byte	$36
06172 1530                        36            .byte	$36
06173                                           ! 1036  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
06174 1531                        36            .byte	$36
06175 1532                        36            .byte	$36
06176 1533                        36            .byte	$36
06177 1534                        36            .byte	$36
06178 1535                        36            .byte	$36
06179 1536                        36            .byte	$36
06180 1537                        36            .byte	$36
06181 1538                        36            .byte	$36
06182                                           ! 1037  0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36,
06183 1539                        00            .byte	0
06184 153A                        00            .byte	0
06185 153B                        FE            .byte	$FE
06186 153C                        06            .byte	6
06187 153D                        F6            .byte	$F6
06188 153E                        36            .byte	$36
06189 153F                        36            .byte	$36
06190 1540                        36            .byte	$36
06191                                           ! 1038  0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00,
06192 1541                        36            .byte	$36
06193 1542                        36            .byte	$36
06194 1543                        F6            .byte	$F6
06195 1544                        06            .byte	6
06196 1545                        FE            .byte	$FE
06197 1546                        00            .byte	0
06198 1547                        00            .byte	0
06199 1548                        00            .byte	0
06200                                           ! 1039  0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00,
06201 1549                        36            .byte	$36
06202 154A                        36            .byte	$36
06203 154B                        36            .byte	$36
06204 154C                        36            .byte	$36
06205 154D                        FE            .byte	$FE
06206 154E                        00            .byte	0
06207 154F                        00            .byte	0
06208 1550                        00            .byte	0
06209                                           ! 1040  0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00,
06210 1551                        18            .byte	$18
06211 1552                        18            .byte	$18
06212 1553                        F8            .byte	$F8
06213 1554                        18            .byte	$18
06214 1555                        F8            .byte	$F8
06215 1556                        00            .byte	0
06216 1557                        00            .byte	0
06217 1558                        00            .byte	0
06218                                           ! 1041  0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18,
06219 1559                        00            .byte	0
06220 155A                        00            .byte	0
06221 155B                        00            .byte	0
06222 155C                        00            .byte	0
06223 155D                        F8            .byte	$F8
06224 155E                        18            .byte	$18
06225 155F                        18            .byte	$18
06226 1560                        18            .byte	$18
06227                                           ! 1042  0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00,
06228 1561                        18            .byte	$18
06229 1562                        18            .byte	$18
06230 1563                        18            .byte	$18
06231 1564                        18            .byte	$18
06232 1565                        1F            .byte	$1F
06233 1566                        00            .byte	0
06234 1567                        00            .byte	0
06235 1568                        00            .byte	0
06236                                           ! 1043  0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00,
06237 1569                        18            .byte	$18
06238 156A                        18            .byte	$18
06239 156B                        18            .byte	$18
06240 156C                        18            .byte	$18
06241 156D                        FF            .byte	$FF
06242 156E                        00            .byte	0
06243 156F                        00            .byte	0
06244 1570                        00            .byte	0
06245                                           ! 1044  0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18,
06246 1571                        00            .byte	0
06247 1572                        00            .byte	0
06248 1573                        00            .byte	0
06249 1574                        00            .byte	0
06250 1575                        FF            .byte	$FF
06251 1576                        18            .byte	$18
06252 1577                        18            .byte	$18
06253 1578                        18            .byte	$18
06254                                           ! 1045  0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18,
06255 1579                        18            .byte	$18
06256 157A                        18            .byte	$18
06257 157B                        18            .byte	$18
06258 157C                        18            .byte	$18
06259 157D                        1F            .byte	$1F
06260 157E                        18            .byte	$18
06261 157F                        18            .byte	$18
06262 1580                        18            .byte	$18
06263                                           ! 1046  0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
06264 1581                        00            .byte	0
06265 1582                        00            .byte	0
06266 1583                        00            .byte	0
06267 1584                        00            .byte	0
06268 1585                        FF            .byte	$FF
06269 1586                        00            .byte	0
06270 1587                        00            .byte	0
06271 1588                        00            .byte	0
06272                                           ! 1047  0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18,
06273 1589                        18            .byte	$18
06274 158A                        18            .byte	$18
06275 158B                        18            .byte	$18
06276 158C                        18            .byte	$18
06277 158D                        FF            .byte	$FF
06278 158E                        18            .byte	$18
06279 158F                        18            .byte	$18
06280 1590                        18            .byte	$18
06281                                           ! 1048  0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18,
06282 1591                        18            .byte	$18
06283 1592                        18            .byte	$18
06284 1593                        1F            .byte	$1F
06285 1594                        18            .byte	$18
06286 1595                        1F            .byte	$1F
06287 1596                        18            .byte	$18
06288 1597                        18            .byte	$18
06289 1598                        18            .byte	$18
06290                                           ! 1049  0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36,
06291 1599                        36            .byte	$36
06292 159A                        36            .byte	$36
06293 159B                        36            .byte	$36
06294 159C                        36            .byte	$36
06295 159D                        37            .byte	$37
06296 159E                        36            .byte	$36
06297 159F                        36            .byte	$36
06298 15A0                        36            .byte	$36
06299                                           ! 1050  0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00,
06300 15A1                        36            .byte	$36
06301 15A2                        36            .byte	$36
06302 15A3                        37            .byte	$37
06303 15A4                        30            .byte	$30
06304 15A5                        3F            .byte	$3F
06305 15A6                        00            .byte	0
06306 15A7                        00            .byte	0
06307 15A8                        00            .byte	0
06308                                           ! 1051  0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36,
06309 15A9                        00            .byte	0
06310 15AA                        00            .byte	0
06311 15AB                        3F            .byte	$3F
06312 15AC                        30            .byte	$30
06313 15AD                        37            .byte	$37
06314 15AE                        36            .byte	$36
06315 15AF                        36            .byte	$36
06316 15B0                        36            .byte	$36
06317                                           ! 1052  0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00,
06318 15B1                        36            .byte	$36
06319 15B2                        36            .byte	$36
06320 15B3                        F7            .byte	$F7
06321 15B4                        00            .byte	0
06322 15B5                        FF            .byte	$FF
06323 15B6                        00            .byte	0
06324 15B7                        00            .byte	0
06325 15B8                        00            .byte	0
06326                                           ! 1053  0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36,
06327 15B9                        00            .byte	0
06328 15BA                        00            .byte	0
06329 15BB                        FF            .byte	$FF
06330 15BC                        00            .byte	0
06331 15BD                        F7            .byte	$F7
06332 15BE                        36            .byte	$36
06333 15BF                        36            .byte	$36
06334 15C0                        36            .byte	$36
06335                                           ! 1054  0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36,
06336 15C1                        36            .byte	$36
06337 15C2                        36            .byte	$36
06338 15C3                        37            .byte	$37
06339 15C4                        30            .byte	$30
06340 15C5                        37            .byte	$37
06341 15C6                        36            .byte	$36
06342 15C7                        36            .byte	$36
06343 15C8                        36            .byte	$36
06344                                           ! 1055  0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00,
06345 15C9                        00            .byte	0
06346 15CA                        00            .byte	0
06347 15CB                        FF            .byte	$FF
06348 15CC                        00            .byte	0
06349 15CD                        FF            .byte	$FF
06350 15CE                        00            .byte	0
06351 15CF                        00            .byte	0
06352 15D0                        00            .byte	0
06353                                           ! 1056  0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36,
06354 15D1                        36            .byte	$36
06355 15D2                        36            .byte	$36
06356 15D3                        F7            .byte	$F7
06357 15D4                        00            .byte	0
06358 15D5                        F7            .byte	$F7
06359 15D6                        36            .byte	$36
06360 15D7                        36            .byte	$36
06361 15D8                        36            .byte	$36
06362                                           ! 1057  0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00,
06363 15D9                        18            .byte	$18
06364 15DA                        18            .byte	$18
06365 15DB                        FF            .byte	$FF
06366 15DC                        00            .byte	0
06367 15DD                        FF            .byte	$FF
06368 15DE                        00            .byte	0
06369 15DF                        00            .byte	0
06370 15E0                        00            .byte	0
06371                                           ! 1058  0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00,
06372 15E1                        36            .byte	$36
06373 15E2                        36            .byte	$36
06374 15E3                        36            .byte	$36
06375 15E4                        36            .byte	$36
06376 15E5                        FF            .byte	$FF
06377 15E6                        00            .byte	0
06378 15E7                        00            .byte	0
06379 15E8                        00            .byte	0
06380                                           ! 1059  0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18,
06381 15E9                        00            .byte	0
06382 15EA                        00            .byte	0
06383 15EB                        FF            .byte	$FF
06384 15EC                        00            .byte	0
06385 15ED                        FF            .byte	$FF
06386 15EE                        18            .byte	$18
06387 15EF                        18            .byte	$18
06388 15F0                        18            .byte	$18
06389                                           ! 1060  0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36,
06390 15F1                        00            .byte	0
06391 15F2                        00            .byte	0
06392 15F3                        00            .byte	0
06393 15F4                        00            .byte	0
06394 15F5                        FF            .byte	$FF
06395 15F6                        36            .byte	$36
06396 15F7                        36            .byte	$36
06397 15F8                        36            .byte	$36
06398                                           ! 1061  0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00,
06399 15F9                        36            .byte	$36
06400 15FA                        36            .byte	$36
06401 15FB                        36            .byte	$36
06402 15FC                        36            .byte	$36
06403 15FD                        3F            .byte	$3F
06404 15FE                        00            .byte	0
06405 15FF                        00            .byte	0
06406 1600                        00            .byte	0
06407                                           ! 1062  0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00,
06408 1601                        18            .byte	$18
06409 1602                        18            .byte	$18
06410 1603                        1F            .byte	$1F
06411 1604                        18            .byte	$18
06412 1605                        1F            .byte	$1F
06413 1606                        00            .byte	0
06414 1607                        00            .byte	0
06415 1608                        00            .byte	0
06416                                           ! 1063  0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18,
06417 1609                        00            .byte	0
06418 160A                        00            .byte	0
06419 160B                        1F            .byte	$1F
06420 160C                        18            .byte	$18
06421 160D                        1F            .byte	$1F
06422 160E                        18            .byte	$18
06423 160F                        18            .byte	$18
06424 1610                        18            .byte	$18
06425                                           ! 1064  0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36,
06426 1611                        00            .byte	0
06427 1612                        00            .byte	0
06428 1613                        00            .byte	0
06429 1614                        00            .byte	0
06430 1615                        3F            .byte	$3F
06431 1616                        36            .byte	$36
06432 1617                        36            .byte	$36
06433 1618                        36            .byte	$36
06434                                           ! 1065  0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36,
06435 1619                        36            .byte	$36
06436 161A                        36            .byte	$36
06437 161B                        36            .byte	$36
06438 161C                        36            .byte	$36
06439 161D                        FF            .byte	$FF
06440 161E                        36            .byte	$36
06441 161F                        36            .byte	$36
06442 1620                        36            .byte	$36
06443                                           ! 1066  0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18,
06444 1621                        18            .byte	$18
06445 1622                        18            .byte	$18
06446 1623                        FF            .byte	$FF
06447 1624                        18            .byte	$18
06448 1625                        FF            .byte	$FF
06449 1626                        18            .byte	$18
06450 1627                        18            .byte	$18
06451 1628                        18            .byte	$18
06452                                           ! 1067  0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00,
06453 1629                        18            .byte	$18
06454 162A                        18            .byte	$18
06455 162B                        18            .byte	$18
06456 162C                        18            .byte	$18
06457 162D                        F8            .byte	$F8
06458 162E                        00            .byte	0
06459 162F                        00            .byte	0
06460 1630                        00            .byte	0
06461                                           ! 1068  0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18,
06462 1631                        00            .byte	0
06463 1632                        00            .byte	0
06464 1633                        00            .byte	0
06465 1634                        00            .byte	0
06466 1635                        1F            .byte	$1F
06467 1636                        18            .byte	$18
06468 1637                        18            .byte	$18
06469 1638                        18            .byte	$18
06470                                           ! 1069  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
06471 1639                        FF            .byte	$FF
06472 163A                        FF            .byte	$FF
06473 163B                        FF            .byte	$FF
06474 163C                        FF            .byte	$FF
06475 163D                        FF            .byte	$FF
06476 163E                        FF            .byte	$FF
06477 163F                        FF            .byte	$FF
06478 1640                        FF            .byte	$FF
06479                                           ! 1070  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
06480 1641                        00            .byte	0
06481 1642                        00            .byte	0
06482 1643                        00            .byte	0
06483 1644                        00            .byte	0
06484 1645                        FF            .byte	$FF
06485 1646                        FF            .byte	$FF
06486 1647                        FF            .byte	$FF
06487 1648                        FF            .byte	$FF
06488                                           ! 1071  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
06489 1649                        F0            .byte	$F0
06490 164A                        F0            .byte	$F0
06491 164B                        F0            .byte	$F0
06492 164C                        F0            .byte	$F0
06493 164D                        F0            .byte	$F0
06494 164E                        F0            .byte	$F0
06495 164F                        F0            .byte	$F0
06496 1650                        F0            .byte	$F0
06497                                           ! 1072  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
06498 1651                        0F            .byte	$F
06499 1652                        0F            .byte	$F
06500 1653                        0F            .byte	$F
06501 1654                        0F            .byte	$F
06502 1655                        0F            .byte	$F
06503 1656                        0F            .byte	$F
06504 1657                        0F            .byte	$F
06505 1658                        0F            .byte	$F
06506                                           ! 1073  0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
06507 1659                        FF            .byte	$FF
06508 165A                        FF            .byte	$FF
06509 165B                        FF            .byte	$FF
06510 165C                        FF            .byte	$FF
06511 165D                        00            .byte	0
06512 165E                        00            .byte	0
06513 165F                        00            .byte	0
06514 1660                        00            .byte	0
06515                                           ! 1074  0x00, 0x00, 0x76, 0xdc, 0xc8, 0xdc, 0x76, 0x00,
06516 1661                        00            .byte	0
06517 1662                        00            .byte	0
06518 1663                        76            .byte	$76
06519 1664                        DC            .byte	$DC
06520 1665                        C8            .byte	$C8
06521 1666                        DC            .byte	$DC
06522 1667                        76            .byte	$76
06523 1668                        00            .byte	0
06524                                           ! 1075  0x00, 0x78, 0xcc, 0xf8, 0xcc, 0xf8, 
06525 1669                        00            .byte	0
06526 166A                        78            .byte	$78
06527 166B                        CC            .byte	$CC
06528 166C                        F8            .byte	$F8
06529 166D                        CC            .byte	$CC
06530 166E                        F8            .byte	$F8
06531                                           ! 1075 0xc0, 0xc0,
06532 166F                        C0            .byte	$C0
06533 1670                        C0            .byte	$C0
06534                                           ! 1076  0x00, 0xfc, 0xcc, 0xc0, 0xc0, 0xc0, 0xc0, 0x00,
06535 1671                        00            .byte	0
06536 1672                        FC            .byte	$FC
06537 1673                        CC            .byte	$CC
06538 1674                        C0            .byte	$C0
06539 1675                        C0            .byte	$C0
06540 1676                        C0            .byte	$C0
06541 1677                        C0            .byte	$C0
06542 1678                        00            .byte	0
06543                                           ! 1077  0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00,
06544 1679                        00            .byte	0
06545 167A                        FE            .byte	$FE
06546 167B                        6C            .byte	$6C
06547 167C                        6C            .byte	$6C
06548 167D                        6C            .byte	$6C
06549 167E                        6C            .byte	$6C
06550 167F                        6C            .byte	$6C
06551 1680                        00            .byte	0
06552                                           ! 1078  0xfc, 0xcc, 0x60, 0x30, 0x60, 0xcc, 0xfc, 0x00,
06553 1681                        FC            .byte	$FC
06554 1682                        CC            .byte	$CC
06555 1683                        60            .byte	$60
06556 1684                        30            .byte	$30
06557 1685                        60            .byte	$60
06558 1686                        CC            .byte	$CC
06559 1687                        FC            .byte	$FC
06560 1688                        00            .byte	0
06561                                           ! 1079  0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0x70, 0x00,
06562 1689                        00            .byte	0
06563 168A                        00            .byte	0
06564 168B                        7E            .byte	$7E
06565 168C                        D8            .byte	$D8
06566 168D                        D8            .byte	$D8
06567 168E                        D8            .byte	$D8
06568 168F                        70            .byte	$70
06569 1690                        00            .byte	0
06570                                           ! 1080  0x00, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0xc0,
06571 1691                        00            .byte	0
06572 1692                        66            .byte	$66
06573 1693                        66            .byte	$66
06574 1694                        66            .byte	$66
06575 1695                        66            .byte	$66
06576 1696                        7C            .byte	$7C
06577 1697                        60            .byte	$60
06578 1698                        C0            .byte	$C0
06579                                           ! 1081  0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x00,
06580 1699                        00            .byte	0
06581 169A                        76            .byte	$76
06582 169B                        DC            .byte	$DC
06583 169C                        18            .byte	$18
06584 169D                        18            .byte	$18
06585 169E                        18            .byte	$18
06586 169F                        18            .byte	$18
06587 16A0                        00            .byte	0
06588                                           ! 1082  0xfc, 0x30, 0x78, 0xcc, 0xcc, 0x78, 0x30, 0xfc,
06589 16A1                        FC            .byte	$FC
06590 16A2                        30            .byte	$30
06591 16A3                        78            .byte	$78
06592 16A4                        CC            .byte	$CC
06593 16A5                        CC            .byte	$CC
06594 16A6                        78            .byte	$78
06595 16A7                        30            .byte	$30
06596 16A8                        FC            .byte	$FC
06597                                           ! 1083  0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0x6c, 0x38, 0x00,
06598 16A9                        38            .byte	$38
06599 16AA                        6C            .byte	$6C
06600 16AB                        C6            .byte	$C6
06601 16AC                        FE            .byte	$FE
06602 16AD                        C6            .byte	$C6
06603 16AE                        6C            .byte	$6C
06604 16AF                        38            .byte	$38
06605 16B0                        00            .byte	0
06606                                           ! 1084  0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x6c, 0xee, 0x00,
06607 16B1                        38            .byte	$38
06608 16B2                        6C            .byte	$6C
06609 16B3                        C6            .byte	$C6
06610 16B4                        C6            .byte	$C6
06611 16B5                        6C            .byte	$6C
06612 16B6                        6C            .byte	$6C
06613 16B7                        EE            .byte	$EE
06614 16B8                        00            .byte	0
06615                                           ! 1085  0x1c, 0x30, 0x18, 0x7c, 0xcc, 0xcc, 0x78, 0x00,
06616 16B9                        1C            .byte	$1C
06617 16BA                        30            .byte	$30
06618 16BB                        18            .byte	$18
06619 16BC                        7C            .byte	$7C
06620 16BD                        CC            .byte	$CC
06621 16BE                        CC            .byte	$CC
06622 16BF                        78            .byte	$78
06623 16C0                        00            .byte	0
06624                                           ! 1086  0x00, 0x00, 0x7e, 0xdb, 0xdb, 0x7e, 0x00, 0x00,
06625 16C1                        00            .byte	0
06626 16C2                        00            .byte	0
06627 16C3                        7E            .byte	$7E
06628 16C4                        DB            .byte	$DB
06629 16C5                        DB            .byte	$DB
06630 16C6                        7E            .byte	$7E
06631 16C7                        00            .byte	0
06632 16C8                        00            .byte	0
06633                                           ! 1087  0x06, 0x0c, 0x7e, 0xdb, 0xdb, 0x7e, 0x60, 0xc0,
06634 16C9                        06            .byte	6
06635 16CA                        0C            .byte	$C
06636 16CB                        7E            .byte	$7E
06637 16CC                        DB            .byte	$DB
06638 16CD                        DB            .byte	$DB
06639 16CE                        7E            .byte	$7E
06640 16CF                        60            .byte	$60
06641 16D0                        C0            .byte	$C0
06642                                           ! 1088  0x38, 0x60, 0xc0, 0xf8, 0xc0, 0x60, 0x38, 0x00,
06643 16D1                        38            .byte	$38
06644 16D2                        60            .byte	$60
06645 16D3                        C0            .byte	$C0
06646 16D4                        F8            .byte	$F8
06647 16D5                        C0            .byte	$C0
06648 16D6                        60            .byte	$60
06649 16D7                        38            .byte	$38
06650 16D8                        00            .byte	0
06651                                           ! 1089  0x78, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x00,
06652 16D9                        78            .byte	$78
06653 16DA                        CC            .byte	$CC
06654 16DB                        CC            .byte	$CC
06655 16DC                        CC            .byte	$CC
06656 16DD                        CC            .byte	$CC
06657 16DE                        CC            .byte	$CC
06658 16DF                        CC            .byte	$CC
06659 16E0                        00            .byte	0
06660                                           ! 1090  0x00, 0xfc, 0x00, 0xfc, 0x00, 0xfc, 0x00, 0x00,
06661 16E1                        00            .byte	0
06662 16E2                        FC            .byte	$FC
06663 16E3                        00            .byte	0
06664 16E4                        FC            .byte	$FC
06665 16E5                        00            .byte	0
06666 16E6                        FC            .byte	$FC
06667 16E7                        00            .byte	0
06668 16E8                        00            .byte	0
06669                                           ! 1091  0x30, 0x30, 0xfc, 0x30, 0x30, 0x00, 0xfc, 0x00,
06670 16E9                        30            .byte	$30
06671 16EA                        30            .byte	$30
06672 16EB                        FC            .byte	$FC
06673 16EC                        30            .byte	$30
06674 16ED                        30            .byte	$30
06675 16EE                        00            .byte	0
06676 16EF                        FC            .byte	$FC
06677 16F0                        00            .byte	0
06678                                           ! 1092  0x60, 0x30, 0x18, 0x30, 0x60, 0x00, 0xfc, 0x00,
06679 16F1                        60            .byte	$60
06680 16F2                        30            .byte	$30
06681 16F3                        18            .byte	$18
06682 16F4                        30            .byte	$30
06683 16F5                        60            .byte	$60
06684 16F6                        00            .byte	0
06685 16F7                        FC            .byte	$FC
06686 16F8                        00            .byte	0
06687                                           ! 1093  0x18, 0x30, 0x60, 0x30, 0x18, 0x00, 0xfc, 0x00,
06688 16F9                        18            .byte	$18
06689 16FA                        30            .byte	$30
06690 16FB                        60            .byte	$60
06691 16FC                        30            .byte	$30
06692 16FD                        18            .byte	$18
06693 16FE                        00            .byte	0
06694 16FF                        FC            .byte	$FC
06695 1700                        00            .byte	0
06696                                           ! 1094  0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18,
06697 1701                        0E            .byte	$E
06698 1702                        1B            .byte	$1B
06699 1703                        1B            .byte	$1B
06700 1704                        18            .byte	$18
06701 1705                        18            .byte	$18
06702 1706                        18            .byte	$18
06703 1707                        18            .byte	$18
06704 1708                        18            .byte	$18
06705                                           ! 1095  0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0x70,
06706 1709                        18            .byte	$18
06707 170A                        18            .byte	$18
06708 170B                        18            .byte	$18
06709 170C                        18            .byte	$18
06710 170D                        18            .byte	$18
06711 170E                        D8            .byte	$D8
06712 170F                        D8            .byte	$D8
06713 1710                        70            .byte	$70
06714                                           ! 1096  0x30, 0x30, 0x00, 0xfc, 0x00, 0x30, 0x30, 0x00,
06715 1711                        30            .byte	$30
06716 1712                        30            .byte	$30
06717 1713                        00            .byte	0
06718 1714                        FC            .byte	$FC
06719 1715                        00            .byte	0
06720 1716                        30            .byte	$30
06721 1717                        30            .byte	$30
06722 1718                        00            .byte	0
06723                                           ! 1097  0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00,
06724 1719                        00            .byte	0
06725 171A                        76            .byte	$76
06726 171B                        DC            .byte	$DC
06727 171C                        00            .byte	0
06728 171D                        76            .byte	$76
06729 171E                        DC            .byte	$DC
06730 171F                        00            .byte	0
06731 1720                        00            .byte	0
06732                                           ! 1098  0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00,
06733 1721                        38            .byte	$38
06734 1722                        6C            .byte	$6C
06735 1723                        6C            .byte	$6C
06736 1724                        38            .byte	$38
06737 1725                        00            .byte	0
06738 1726                        00            .byte	0
06739 1727                        00            .byte	0
06740 1728                        00            .byte	0
06741                                           ! 1099  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
06742 1729                        00            .byte	0
06743 172A                        00            .byte	0
06744 172B                        00            .byte	0
06745 172C                        18            .byte	$18
06746 172D                        18            .byte	$18
06747 172E                        00            .byte	0
06748 172F                        00            .byte	0
06749 1730                        00            .byte	0
06750                                           ! 1100  0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
06751 1731                        00            .byte	0
06752 1732                        00            .byte	0
06753 1733                        00            .byte	0
06754 1734                        00            .byte	0
06755 1735                        18            .byte	$18
06756 1736                        00            .byte	0
06757 1737                        00            .byte	0
06758 1738                        00            .byte	0
06759                                           ! 1101  0x0f, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x3c, 0x1c,
06760 1739                        0F            .byte	$F
06761 173A                        0C            .byte	$C
06762 173B                        0C            .byte	$C
06763 173C                        0C            .byte	$C
06764 173D                        EC            .byte	$EC
06765 173E                        6C            .byte	$6C
06766 173F                        3C            .byte	$3C
06767 1740                        1C            .byte	$1C
06768                                           ! 1102  0x78, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00,
06769 1741                        78            .byte	$78
06770 1742                        6C            .byte	$6C
06771 1743                        6C            .byte	$6C
06772 1744                        6C            .byte	$6C
06773 1745                        6C            .byte	$6C
06774 1746                        00            .byte	0
06775 1747                        00            .byte	0
06776 1748                        00            .byte	0
06777                                           ! 1103  0x70, 0x18, 0x30, 0x60, 0x78, 0x00, 0x00, 0x00,
06778 1749                        70            .byte	$70
06779 174A                        18            .byte	$18
06780 174B                        30            .byte	$30
06781 174C                        60            .byte	$60
06782 174D                        78            .byte	$78
06783 174E                        00            .byte	0
06784 174F                        00            .byte	0
06785 1750                        00            .byte	0
06786                                           ! 1104  0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00,
06787 1751                        00            .byte	0
06788 1752                        00            .byte	0
06789 1753                        3C            .byte	$3C
06790 1754                        3C            .byte	$3C
06791 1755                        3C            .byte	$3C
06792 1756                        3C            .byte	$3C
06793 1757                        00            .byte	0
06794 1758                        00            .byte	0
06795                                           ! 1105  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
06796 1759                        00            .byte	0
06797 175A                        00            .byte	0
06798 175B                        00            .byte	0
06799 175C                        00            .byte	0
06800 175D                        00            .byte	0
06801 175E                        00            .byte	0
06802 175F                        00            .byte	0
06803                                           ! 1106 };
06804 1760                        00            .byte	0
06805                                           !BCC_EOS
06806                                           ! 1107 static Bit8u vgafont14[256*14]=
06807                                           ! 1108 {
06808                       00001761            _vgafont14:
06809                                           ! 1109  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
06810 1761                        00            .byte	0
06811 1762                        00            .byte	0
06812 1763                        00            .byte	0
06813 1764                        00            .byte	0
06814 1765                        00            .byte	0
06815 1766                        00            .byte	0
06816 1767                        00            .byte	0
06817 1768                        00            .byte	0
06818 1769                        00            .byte	0
06819 176A                        00            .byte	0
06820 176B                        00            .byte	0
06821 176C                        00            .byte	0
06822 176D                        00            .byte	0
06823 176E                        00            .byte	0
06824                                           ! 1110  0x00, 0x00, 0x7e, 0x81, 0xa5, 0x81, 0x81, 0xbd, 0x99, 0x81, 0x7e, 0x00, 0x00, 0x00,
06825 176F                        00            .byte	0
06826 1770                        00            .byte	0
06827 1771                        7E            .byte	$7E
06828 1772                        81            .byte	$81
06829 1773                        A5            .byte	$A5
06830 1774                        81            .byte	$81
06831 1775                        81            .byte	$81
06832 1776                        BD            .byte	$BD
06833 1777                        99            .byte	$99
06834 1778                        81            .byte	$81
06835 1779                        7E            .byte	$7E
06836 177A                        00            .byte	0
06837 177B                        00            .byte	0
06838 177C                        00            .byte	0
06839                                           ! 1111  0x00, 0x00, 0x7e, 0xff, 0xdb, 0xff, 0xff, 0xc3, 0xe7, 0xff, 0x7e, 0x00, 0x00, 0x00,
06840 177D                        00            .byte	0
06841 177E                        00            .byte	0
06842 177F                        7E            .byte	$7E
06843 1780                        FF            .byte	$FF
06844 1781                        DB            .byte	$DB
06845 1782                        FF            .byte	$FF
06846 1783                        FF            .byte	$FF
06847 1784                        C3            .byte	$C3
06848 1785                        E7            .byte	$E7
06849 1786                        FF            .byte	$FF
06850 1787                        7E            .byte	$7E
06851 1788                        00            .byte	0
06852 1789                        00            .byte	0
06853 178A                        00            .byte	0
06854                                           ! 1112  0x00, 0x00, 0x00, 0x6c, 0xfe, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00,
06855 178B                        00            .byte	0
06856 178C                        00            .byte	0
06857 178D                        00            .byte	0
06858 178E                        6C            .byte	$6C
06859 178F                        FE            .byte	$FE
06860 1790                        FE            .byte	$FE
06861 1791                        FE            .byte	$FE
06862 1792                        FE            .byte	$FE
06863 1793                        7C            .byte	$7C
06864 1794                        38            .byte	$38
06865 1795                        10            .byte	$10
06866 1796                        00            .byte	0
06867 1797                        00            .byte	0
06868 1798                        00            .byte	0
06869                                           ! 1113  0x00, 0x00, 0x00, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
06870 1799                        00            .byte	0
06871 179A                        00            .byte	0
06872 179B                        00            .byte	0
06873 179C                        10            .byte	$10
06874 179D                        38            .byte	$38
06875 179E                        7C            .byte	$7C
06876 179F                        FE            .byte	$FE
06877 17A0                        7C            .byte	$7C
06878 17A1                        38            .byte	$38
06879 17A2                        10            .byte	$10
06880 17A3                        00            .byte	0
06881 17A4                        00            .byte	0
06882 17A5                        00            .byte	0
06883 17A6                        00            .byte	0
06884                                           ! 1114  0x00, 0x00, 0x18, 0x3c, 0x3c, 0xe7, 0xe7, 0xe7, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
06885 17A7                        00            .byte	0
06886 17A8                        00            .byte	0
06887 17A9                        18            .byte	$18
06888 17AA                        3C            .byte	$3C
06889 17AB                        3C            .byte	$3C
06890 17AC                        E7            .byte	$E7
06891 17AD                        E7            .byte	$E7
06892 17AE                        E7            .byte	$E7
06893 17AF                        18            .byte	$18
06894 17B0                        18            .byte	$18
06895 17B1                        3C            .byte	$3C
06896 17B2                        00            .byte	0
06897 17B3                        00            .byte	0
06898 17B4                        00            .byte	0
06899                                           ! 1115  0x00, 0x00, 0x18, 0
06900 17B5                        00            .byte	0
06901 17B6                        00            .byte	0
06902 17B7                        18            .byte	$18
06903                                           ! 1115 x3c, 0x7e, 0xff, 0xff, 0x7e, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
06904 17B8                        3C            .byte	$3C
06905 17B9                        7E            .byte	$7E
06906 17BA                        FF            .byte	$FF
06907 17BB                        FF            .byte	$FF
06908 17BC                        7E            .byte	$7E
06909 17BD                        18            .byte	$18
06910 17BE                        18            .byte	$18
06911 17BF                        3C            .byte	$3C
06912 17C0                        00            .byte	0
06913 17C1                        00            .byte	0
06914 17C2                        00            .byte	0
06915                                           ! 1116  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
06916 17C3                        00            .byte	0
06917 17C4                        00            .byte	0
06918 17C5                        00            .byte	0
06919 17C6                        00            .byte	0
06920 17C7                        00            .byte	0
06921 17C8                        18            .byte	$18
06922 17C9                        3C            .byte	$3C
06923 17CA                        3C            .byte	$3C
06924 17CB                        18            .byte	$18
06925 17CC                        00            .byte	0
06926 17CD                        00            .byte	0
06927 17CE                        00            .byte	0
06928 17CF                        00            .byte	0
06929 17D0                        00            .byte	0
06930                                           ! 1117  0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff,
06931 17D1                        FF            .byte	$FF
06932 17D2                        FF            .byte	$FF
06933 17D3                        FF            .byte	$FF
06934 17D4                        FF            .byte	$FF
06935 17D5                        FF            .byte	$FF
06936 17D6                        E7            .byte	$E7
06937 17D7                        C3            .byte	$C3
06938 17D8                        C3            .byte	$C3
06939 17D9                        E7            .byte	$E7
06940 17DA                        FF            .byte	$FF
06941 17DB                        FF            .byte	$FF
06942 17DC                        FF            .byte	$FF
06943 17DD                        FF            .byte	$FF
06944 17DE                        FF            .byte	$FF
06945                                           ! 1118  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
06946 17DF                        00            .byte	0
06947 17E0                        00            .byte	0
06948 17E1                        00            .byte	0
06949 17E2                        00            .byte	0
06950 17E3                        3C            .byte	$3C
06951 17E4                        66            .byte	$66
06952 17E5                        42            .byte	$42
06953 17E6                        42            .byte	$42
06954 17E7                        66            .byte	$66
06955 17E8                        3C            .byte	$3C
06956 17E9                        00            .byte	0
06957 17EA                        00            .byte	0
06958 17EB                        00            .byte	0
06959 17EC                        00            .byte	0
06960                                           ! 1119  0xff, 0xff, 0xff, 0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff, 0xff, 0xff, 0xff,
06961 17ED                        FF            .byte	$FF
06962 17EE                        FF            .byte	$FF
06963 17EF                        FF            .byte	$FF
06964 17F0                        FF            .byte	$FF
06965 17F1                        C3            .byte	$C3
06966 17F2                        99            .byte	$99
06967 17F3                        BD            .byte	$BD
06968 17F4                        BD            .byte	$BD
06969 17F5                        99            .byte	$99
06970 17F6                        C3            .byte	$C3
06971 17F7                        FF            .byte	$FF
06972 17F8                        FF            .byte	$FF
06973 17F9                        FF            .byte	$FF
06974 17FA                        FF            .byte	$FF
06975                                           ! 1120  0x00, 0x00, 0x1e, 0x0e, 0x1a, 0x32, 0x78, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00,
06976 17FB                        00            .byte	0
06977 17FC                        00            .byte	0
06978 17FD                        1E            .byte	$1E
06979 17FE                        0E            .byte	$E
06980 17FF                        1A            .byte	$1A
06981 1800                        32            .byte	$32
06982 1801                        78            .byte	$78
06983 1802                        CC            .byte	$CC
06984 1803                        CC            .byte	$CC
06985 1804                        CC            .byte	$CC
06986 1805                        78            .byte	$78
06987 1806                        00            .byte	0
06988 1807                        00            .byte	0
06989 1808                        00            .byte	0
06990                                           ! 1121  0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00,
06991 1809                        00            .byte	0
06992 180A                        00            .byte	0
06993 180B                        3C            .byte	$3C
06994 180C                        66            .byte	$66
06995 180D                        66            .byte	$66
06996 180E                        66            .byte	$66
06997 180F                        3C            .byte	$3C
06998 1810                        18            .byte	$18
06999 1811                        7E            .byte	$7E
07000 1812                        18            .byte	$18
07001 1813                        18            .byte	$18
07002 1814                        00            .byte	0
07003 1815                        00            .byte	0
07004 1816                        00            .byte	0
07005                                           ! 1122  0x00, 0x00, 0x3f, 0x33, 0x3f, 0x30, 0x30, 0x30, 0x70, 0xf0, 0xe0, 0x00, 0x00, 0x00,
07006 1817                        00            .byte	0
07007 1818                        00            .byte	0
07008 1819                        3F            .byte	$3F
07009 181A                        33            .byte	$33
07010 181B                        3F            .byte	$3F
07011 181C                        30            .byte	$30
07012 181D                        30            .byte	$30
07013 181E                        30            .byte	$30
07014 181F                        70            .byte	$70
07015 1820                        F0            .byte	$F0
07016 1821                        E0            .byte	$E0
07017 1822                        00            .byte	0
07018 1823                        00            .byte	0
07019 1824                        00            .byte	0
07020                                           ! 1123  0x00, 0x00, 0x7f, 0x63, 0x7f, 0x63, 0x63, 0x63, 0x67, 0xe7, 0xe6, 0xc0, 0x00, 0x00,
07021 1825                        00            .byte	0
07022 1826                        00            .byte	0
07023 1827                        7F            .byte	$7F
07024 1828                        63            .byte	$63
07025 1829                        7F            .byte	$7F
07026 182A                        63            .byte	$63
07027 182B                        63            .byte	$63
07028 182C                        63            .byte	$63
07029 182D                        67            .byte	$67
07030 182E                        E7            .byte	$E7
07031 182F                        E6            .byte	$E6
07032 1830                        C0            .byte	$C0
07033 1831                        00            .byte	0
07034 1832                        00            .byte	0
07035                                           ! 1124  0x00, 0x00, 0x18, 0x18, 0xdb, 0x3c, 0xe7, 0x3c, 0xdb, 0x18, 0x18, 0x00, 0x00, 0x00,
07036 1833                        00            .byte	0
07037 1834                        00            .byte	0
07038 1835                        18            .byte	$18
07039 1836                        18            .byte	$18
07040 1837                        DB            .byte	$DB
07041 1838                        3C            .byte	$3C
07042 1839                        E7            .byte	$E7
07043 183A                        3C            .byte	$3C
07044 183B                        DB            .byte	$DB
07045 183C                        18            .byte	$18
07046 183D                        18            .byte	$18
07047 183E                        00            .byte	0
07048 183F                        00            .byte	0
07049 1840                        00            .byte	0
07050                                           ! 1125  0x00, 0x00, 0x80, 0xc0, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00,
07051 1841                        00            .byte	0
07052 1842                        00            .byte	0
07053 1843                        80            .byte	$80
07054 1844                        C0            .byte	$C0
07055 1845                        E0            .byte	$E0
07056 1846                        F8            .byte	$F8
07057 1847                        FE            .byte	$FE
07058 1848                        F8            .byte	$F8
07059 1849                        E0            .byte	$E0
07060 184A                        C0            .byte	$C0
07061 184B                        80            .byte	$80
07062 184C                        00            .byte	0
07063 184D                        00            .byte	0
07064 184E                        00            .byte	0
07065                                           ! 1126  0x00, 0x00, 0x02, 0x06, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00,
07066 184F                        00            .byte	0
07067 1850                        00            .byte	0
07068 1851                        02            .byte	2
07069 1852                        06            .byte	6
07070 1853                        0E            .byte	$E
07071 1854                        3E            .byte	$3E
07072 1855                        FE            .byte	$FE
07073 1856                        3E            .byte	$3E
07074 1857                        0E            .byte	$E
07075 1858                        06            .byte	6
07076 1859                        02            .byte	2
07077 185A                        00            .byte	0
07078 185B                        00            .byte	0
07079 185C                        00            .byte	0
07080                                           ! 1127  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00,
07081 185D                        00            .byte	0
07082 185E                        00            .byte	0
07083 185F                        18            .byte	$18
07084 1860                        3C            .byte	$3C
07085 1861                        7E            .byte	$7E
07086 1862                        18            .byte	$18
07087 1863                        18            .byte	$18
07088 1864                        18            .byte	$18
07089 1865                        7E            .byte	$7E
07090 1866                        3C            .byte	$3C
07091 1867                        18            .byte	$18
07092 1868                        00            .byte	0
07093 1869                        00            .byte	0
07094 186A                        00            .byte	0
07095                                           ! 1128  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00,
07096 186B                        00            .byte	0
07097 186C                        00            .byte	0
07098 186D                        66            .byte	$66
07099 186E                        66            .byte	$66
07100 186F                        66            .byte	$66
07101 1870                        66            .byte	$66
07102 1871                        66            .byte	$66
07103 1872                        66            .byte	$66
07104 1873                        00            .byte	0
07105 1874                        66            .byte	$66
07106 1875                        66            .byte	$66
07107 1876                        00            .byte	0
07108 1877                        00            .byte	0
07109 1878                        00            .byte	0
07110                                           ! 1129  0x00, 0x00, 0x7f, 0xdb, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x1b, 0x00, 0x00, 0x00,
07111 1879                        00            .byte	0
07112 187A                        00            .byte	0
07113 187B                        7F            .byte	$7F
07114 187C                        DB            .byte	$DB
07115 187D                        DB            .byte	$DB
07116 187E                        DB            .byte	$DB
07117 187F                        7B            .byte	$7B
07118 1880                        1B            .byte	$1B
07119 1881                        1B            .byte	$1B
07120 1882                        1B            .byte	$1B
07121 1883                        1B            .byte	$1B
07122 1884                        00            .byte	0
07123 1885                        00            .byte	0
07124 1886                        00            .byte	0
07125                                           ! 1130  0x00, 0x7c, 0xc6, 0x60, 0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x38, 0x0c, 0xc6, 0x7c, 0x00,
07126 1887                        00            .byte	0
07127 1888                        7C            .byte	$7C
07128 1889                        C6            .byte	$C6
07129 188A                        60            .byte	$60
07130 188B                        38            .byte	$38
07131 188C                        6C            .byte	$6C
07132 188D                        C6            .byte	$C6
07133 188E                        C6            .byte	$C6
07134 188F                        6C            .byte	$6C
07135 1890                        38            .byte	$38
07136 1891                        0C            .byte	$C
07137 1892                        C6            .byte	$C6
07138 1893                        7C            .byte	$7C
07139 1894                        00            .byte	0
07140                                           ! 1131  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x00,
07141 1895                        00            .byte	0
07142 1896                        00            .byte	0
07143 1897                        00            .byte	0
07144 1898                        00            .byte	0
07145 1899                        00            .byte	0
07146 189A                        00            .byte	0
07147 189B                        00            .byte	0
07148 189C                        00            .byte	0
07149 189D                        FE            .byte	$FE
07150 189E                        FE            .byte	$FE
07151 189F                        FE            .byte	$FE
07152 18A0                        00            .byte	0
07153 18A1                        00            .byte	0
07154 18A2                        00            .byte	0
07155                                           ! 1132  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x7e, 0x00, 0x00,
07156 18A3                        00            .byte	0
07157 18A4                        00            .byte	0
07158 18A5                        18            .byte	$18
07159 18A6                        3C            .byte	$3C
07160 18A7                        7E            .byte	$7E
07161 18A8                        18            .byte	$18
07162 18A9                        18            .byte	$18
07163 18AA                        18            .byte	$18
07164 18AB                        7E            .byte	$7E
07165 18AC                        3C            .byte	$3C
07166 18AD                        18            .byte	$18
07167 18AE                        7E            .byte	$7E
07168 18AF                        00            .byte	0
07169 18B0                        00            .byte	0
07170                                           ! 1133  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
07171 18B1                        00            .byte	0
07172 18B2                        00            .byte	0
07173 18B3                        18            .byte	$18
07174 18B4                        3C            .byte	$3C
07175 18B5                        7E            .byte	$7E
07176 18B6                        18            .byte	$18
07177 18B7                        18            .byte	$18
07178 18B8                        18            .byte	$18
07179 18B9                        18            .byte	$18
07180 18BA                        18            .byte	$18
07181 18BB                        18            .byte	$18
07182 18BC                        00            .byte	0
07183 18BD                        00            .byte	0
07184 18BE                        00            .byte	0
07185                                           ! 1134  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00,
07186 18BF                        00            .byte	0
07187 18C0                        00            .byte	0
07188 18C1                        18            .byte	$18
07189 18C2                        18            .byte	$18
07190 18C3                        18            .byte	$18
07191 18C4                        18            .byte	$18
07192 18C5                        18            .byte	$18
07193 18C6                        18            .byte	$18
07194 18C7                        7E            .byte	$7E
07195 18C8                        3C            .byte	$3C
07196 18C9                        18            .byte	$18
07197 18CA                        00            .byte	0
07198 18CB                        00            .byte	0
07199 18CC                        00            .byte	0
07200                                           ! 1135  0x00, 0x00, 0x00, 0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
07201 18CD                        00            .byte	0
07202 18CE                        00            .byte	0
07203 18CF                        00            .byte	0
07204 18D0                        00            .byte	0
07205 18D1                        18            .byte	$18
07206 18D2                        0C            .byte	$C
07207 18D3                        FE            .byte	$FE
07208 18D4                        0C            .byte	$C
07209 18D5                        18            .byte	$18
07210 18D6                        00            .byte	0
07211 18D7                        00            .byte	0
07212 18D8                        00            .byte	0
07213 18D9                        00            .byte	0
07214 18DA                        00            .byte	0
07215                                           ! 1136  0x00, 0x00, 0x00, 0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
07216 18DB                        00            .byte	0
07217 18DC                        00            .byte	0
07218 18DD                        00            .byte	0
07219 18DE                        00            .byte	0
07220 18DF                        30            .byte	$30
07221 18E0                        60            .byte	$60
07222 18E1                        FE            .byte	$FE
07223 18E2                        60            .byte	$60
07224 18E3                        30            .byte	$30
07225 18E4                        00            .byte	0
07226 18E5                        00            .byte	0
07227 18E6                        00            .byte	0
07228 18E7                        00            .byte	0
07229 18E8                        00            .byte	0
07230                                           ! 1137  0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
07231 18E9                        00            .byte	0
07232 18EA                        00            .byte	0
07233 18EB                        00            .byte	0
07234 18EC                        00            .byte	0
07235 18ED                        00            .byte	0
07236 18EE                        C0            .byte	$C0
07237 18EF                        C0            .byte	$C0
07238 18F0                        C0            .byte	$C0
07239 18F1                        FE            .byte	$FE
07240 18F2                        00            .byte	0
07241 18F3                        00            .byte	0
07242 18F4                        00            .byte	0
07243 18F5                        00            .byte	0
07244 18F6                        00            .byte	0
07245                                           ! 1138  0x00, 0x00, 0x00, 0x00, 0x28, 0x6c, 0xfe, 0x6c, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00,
07246 18F7                        00            .byte	0
07247 18F8                        00            .byte	0
07248 18F9                        00            .byte	0
07249 18FA                        00            .byte	0
07250 18FB                        28            .byte	$28
07251 18FC                        6C            .byte	$6C
07252 18FD                        FE            .byte	$FE
07253 18FE                        6C            .byte	$6C
07254 18FF                        28            .byte	$28
07255 1900                        00            .byte	0
07256 1901                        00            .byte	0
07257 1902                        00            .byte	0
07258 1903                        00            .byte	0
07259 1904                        00            .byte	0
07260                                           ! 1139  0x00, 0x00, 0x00, 0x10, 0x3
07261 1905                        00            .byte	0
07262 1906                        00            .byte	0
07263 1907                        00            .byte	0
07264 1908                        10            .byte	$10
07265                                           ! 1139 8, 0x38, 0x7c, 0x7c, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00,
07266 1909                        38            .byte	$38
07267 190A                        38            .byte	$38
07268 190B                        7C            .byte	$7C
07269 190C                        7C            .byte	$7C
07270 190D                        FE            .byte	$FE
07271 190E                        FE            .byte	$FE
07272 190F                        00            .byte	0
07273 1910                        00            .byte	0
07274 1911                        00            .byte	0
07275 1912                        00            .byte	0
07276                                           ! 1140  0x00, 0x00, 0x00, 0xfe, 0xfe, 0x7c, 0x7c, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
07277 1913                        00            .byte	0
07278 1914                        00            .byte	0
07279 1915                        00            .byte	0
07280 1916                        FE            .byte	$FE
07281 1917                        FE            .byte	$FE
07282 1918                        7C            .byte	$7C
07283 1919                        7C            .byte	$7C
07284 191A                        38            .byte	$38
07285 191B                        38            .byte	$38
07286 191C                        10            .byte	$10
07287 191D                        00            .byte	0
07288 191E                        00            .byte	0
07289 191F                        00            .byte	0
07290 1920                        00            .byte	0
07291                                           ! 1141  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07292 1921                        00            .byte	0
07293 1922                        00            .byte	0
07294 1923                        00            .byte	0
07295 1924                        00            .byte	0
07296 1925                        00            .byte	0
07297 1926                        00            .byte	0
07298 1927                        00            .byte	0
07299 1928                        00            .byte	0
07300 1929                        00            .byte	0
07301 192A                        00            .byte	0
07302 192B                        00            .byte	0
07303 192C                        00            .byte	0
07304 192D                        00            .byte	0
07305 192E                        00            .byte	0
07306                                           ! 1142  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07307 192F                        00            .byte	0
07308 1930                        00            .byte	0
07309 1931                        18            .byte	$18
07310 1932                        3C            .byte	$3C
07311 1933                        3C            .byte	$3C
07312 1934                        3C            .byte	$3C
07313 1935                        18            .byte	$18
07314 1936                        18            .byte	$18
07315 1937                        00            .byte	0
07316 1938                        18            .byte	$18
07317 1939                        18            .byte	$18
07318 193A                        00            .byte	0
07319 193B                        00            .byte	0
07320 193C                        00            .byte	0
07321                                           ! 1143  0x00, 0x66, 0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07322 193D                        00            .byte	0
07323 193E                        66            .byte	$66
07324 193F                        66            .byte	$66
07325 1940                        66            .byte	$66
07326 1941                        24            .byte	$24
07327 1942                        00            .byte	0
07328 1943                        00            .byte	0
07329 1944                        00            .byte	0
07330 1945                        00            .byte	0
07331 1946                        00            .byte	0
07332 1947                        00            .byte	0
07333 1948                        00            .byte	0
07334 1949                        00            .byte	0
07335 194A                        00            .byte	0
07336                                           ! 1144  0x00, 0x00, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x00, 0x00, 0x00,
07337 194B                        00            .byte	0
07338 194C                        00            .byte	0
07339 194D                        6C            .byte	$6C
07340 194E                        6C            .byte	$6C
07341 194F                        FE            .byte	$FE
07342 1950                        6C            .byte	$6C
07343 1951                        6C            .byte	$6C
07344 1952                        6C            .byte	$6C
07345 1953                        FE            .byte	$FE
07346 1954                        6C            .byte	$6C
07347 1955                        6C            .byte	$6C
07348 1956                        00            .byte	0
07349 1957                        00            .byte	0
07350 1958                        00            .byte	0
07351                                           ! 1145  0x18, 0x18, 0x7c, 0xc6, 0xc2, 0xc0, 0x7c, 0x06, 0x86, 0xc6, 0x7c, 0x18, 0x18, 0x00,
07352 1959                        18            .byte	$18
07353 195A                        18            .byte	$18
07354 195B                        7C            .byte	$7C
07355 195C                        C6            .byte	$C6
07356 195D                        C2            .byte	$C2
07357 195E                        C0            .byte	$C0
07358 195F                        7C            .byte	$7C
07359 1960                        06            .byte	6
07360 1961                        86            .byte	$86
07361 1962                        C6            .byte	$C6
07362 1963                        7C            .byte	$7C
07363 1964                        18            .byte	$18
07364 1965                        18            .byte	$18
07365 1966                        00            .byte	0
07366                                           ! 1146  0x00, 0x00, 0x00, 0x00, 0xc2, 0xc6, 0x0c, 0x18, 0x30, 0x66, 0xc6, 0x00, 0x00, 0x00,
07367 1967                        00            .byte	0
07368 1968                        00            .byte	0
07369 1969                        00            .byte	0
07370 196A                        00            .byte	0
07371 196B                        C2            .byte	$C2
07372 196C                        C6            .byte	$C6
07373 196D                        0C            .byte	$C
07374 196E                        18            .byte	$18
07375 196F                        30            .byte	$30
07376 1970                        66            .byte	$66
07377 1971                        C6            .byte	$C6
07378 1972                        00            .byte	0
07379 1973                        00            .byte	0
07380 1974                        00            .byte	0
07381                                           ! 1147  0x00, 0x00, 0x38, 0x6c, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
07382 1975                        00            .byte	0
07383 1976                        00            .byte	0
07384 1977                        38            .byte	$38
07385 1978                        6C            .byte	$6C
07386 1979                        6C            .byte	$6C
07387 197A                        38            .byte	$38
07388 197B                        76            .byte	$76
07389 197C                        DC            .byte	$DC
07390 197D                        CC            .byte	$CC
07391 197E                        CC            .byte	$CC
07392 197F                        76            .byte	$76
07393 1980                        00            .byte	0
07394 1981                        00            .byte	0
07395 1982                        00            .byte	0
07396                                           ! 1148  0x00, 0x30, 0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07397 1983                        00            .byte	0
07398 1984                        30            .byte	$30
07399 1985                        30            .byte	$30
07400 1986                        30            .byte	$30
07401 1987                        60            .byte	$60
07402 1988                        00            .byte	0
07403 1989                        00            .byte	0
07404 198A                        00            .byte	0
07405 198B                        00            .byte	0
07406 198C                        00            .byte	0
07407 198D                        00            .byte	0
07408 198E                        00            .byte	0
07409 198F                        00            .byte	0
07410 1990                        00            .byte	0
07411                                           ! 1149  0x00, 0x00, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00, 0x00, 0x00,
07412 1991                        00            .byte	0
07413 1992                        00            .byte	0
07414 1993                        0C            .byte	$C
07415 1994                        18            .byte	$18
07416 1995                        30            .byte	$30
07417 1996                        30            .byte	$30
07418 1997                        30            .byte	$30
07419 1998                        30            .byte	$30
07420 1999                        30            .byte	$30
07421 199A                        18            .byte	$18
07422 199B                        0C            .byte	$C
07423 199C                        00            .byte	0
07424 199D                        00            .byte	0
07425 199E                        00            .byte	0
07426                                           ! 1150  0x00, 0x00, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x18, 0x30, 0x00, 0x00, 0x00,
07427 199F                        00            .byte	0
07428 19A0                        00            .byte	0
07429 19A1                        30            .byte	$30
07430 19A2                        18            .byte	$18
07431 19A3                        0C            .byte	$C
07432 19A4                        0C            .byte	$C
07433 19A5                        0C            .byte	$C
07434 19A6                        0C            .byte	$C
07435 19A7                        0C            .byte	$C
07436 19A8                        18            .byte	$18
07437 19A9                        30            .byte	$30
07438 19AA                        00            .byte	0
07439 19AB                        00            .byte	0
07440 19AC                        00            .byte	0
07441                                           ! 1151  0x00, 0x00, 0x00, 0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00,
07442 19AD                        00            .byte	0
07443 19AE                        00            .byte	0
07444 19AF                        00            .byte	0
07445 19B0                        00            .byte	0
07446 19B1                        66            .byte	$66
07447 19B2                        3C            .byte	$3C
07448 19B3                        FF            .byte	$FF
07449 19B4                        3C            .byte	$3C
07450 19B5                        66            .byte	$66
07451 19B6                        00            .byte	0
07452 19B7                        00            .byte	0
07453 19B8                        00            .byte	0
07454 19B9                        00            .byte	0
07455 19BA                        00            .byte	0
07456                                           ! 1152  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
07457 19BB                        00            .byte	0
07458 19BC                        00            .byte	0
07459 19BD                        00            .byte	0
07460 19BE                        00            .byte	0
07461 19BF                        18            .byte	$18
07462 19C0                        18            .byte	$18
07463 19C1                        7E            .byte	$7E
07464 19C2                        18            .byte	$18
07465 19C3                        18            .byte	$18
07466 19C4                        00            .byte	0
07467 19C5                        00            .byte	0
07468 19C6                        00            .byte	0
07469 19C7                        00            .byte	0
07470 19C8                        00            .byte	0
07471                                           ! 1153  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00,
07472 19C9                        00            .byte	0
07473 19CA                        00            .byte	0
07474 19CB                        00            .byte	0
07475 19CC                        00            .byte	0
07476 19CD                        00            .byte	0
07477 19CE                        00            .byte	0
07478 19CF                        00            .byte	0
07479 19D0                        00            .byte	0
07480 19D1                        18            .byte	$18
07481 19D2                        18            .byte	$18
07482 19D3                        18            .byte	$18
07483 19D4                        30            .byte	$30
07484 19D5                        00            .byte	0
07485 19D6                        00            .byte	0
07486                                           ! 1154  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07487 19D7                        00            .byte	0
07488 19D8                        00            .byte	0
07489 19D9                        00            .byte	0
07490 19DA                        00            .byte	0
07491 19DB                        00            .byte	0
07492 19DC                        00            .byte	0
07493 19DD                        FE            .byte	$FE
07494 19DE                        00            .byte	0
07495 19DF                        00            .byte	0
07496 19E0                        00            .byte	0
07497 19E1                        00            .byte	0
07498 19E2                        00            .byte	0
07499 19E3                        00            .byte	0
07500 19E4                        00            .byte	0
07501                                           ! 1155  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07502 19E5                        00            .byte	0
07503 19E6                        00            .byte	0
07504 19E7                        00            .byte	0
07505 19E8                        00            .byte	0
07506 19E9                        00            .byte	0
07507 19EA                        00            .byte	0
07508 19EB                        00            .byte	0
07509 19EC                        00            .byte	0
07510 19ED                        00            .byte	0
07511 19EE                        18            .byte	$18
07512 19EF                        18            .byte	$18
07513 19F0                        00            .byte	0
07514 19F1                        00            .byte	0
07515 19F2                        00            .byte	0
07516                                           ! 1156  0x00, 0x00, 0x02, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
07517 19F3                        00            .byte	0
07518 19F4                        00            .byte	0
07519 19F5                        02            .byte	2
07520 19F6                        06            .byte	6
07521 19F7                        0C            .byte	$C
07522 19F8                        18            .byte	$18
07523 19F9                        30            .byte	$30
07524 19FA                        60            .byte	$60
07525 19FB                        C0            .byte	$C0
07526 19FC                        80            .byte	$80
07527 19FD                        00            .byte	0
07528 19FE                        00            .byte	0
07529 19FF                        00            .byte	0
07530 1A00                        00            .byte	0
07531                                           ! 1157  0x00, 0x00, 0x7c, 0xc6, 0xce, 0xde, 0xf6, 0xe6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07532 1A01                        00            .byte	0
07533 1A02                        00            .byte	0
07534 1A03                        7C            .byte	$7C
07535 1A04                        C6            .byte	$C6
07536 1A05                        CE            .byte	$CE
07537 1A06                        DE            .byte	$DE
07538 1A07                        F6            .byte	$F6
07539 1A08                        E6            .byte	$E6
07540 1A09                        C6            .byte	$C6
07541 1A0A                        C6            .byte	$C6
07542 1A0B                        7C            .byte	$7C
07543 1A0C                        00            .byte	0
07544 1A0D                        00            .byte	0
07545 1A0E                        00            .byte	0
07546                                           ! 1158  0x00, 0x00, 0x18, 0x38, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 0x00, 0x00,
07547 1A0F                        00            .byte	0
07548 1A10                        00            .byte	0
07549 1A11                        18            .byte	$18
07550 1A12                        38            .byte	$38
07551 1A13                        78            .byte	$78
07552 1A14                        18            .byte	$18
07553 1A15                        18            .byte	$18
07554 1A16                        18            .byte	$18
07555 1A17                        18            .byte	$18
07556 1A18                        18            .byte	$18
07557 1A19                        7E            .byte	$7E
07558 1A1A                        00            .byte	0
07559 1A1B                        00            .byte	0
07560 1A1C                        00            .byte	0
07561                                           ! 1159  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00,
07562 1A1D                        00            .byte	0
07563 1A1E                        00            .byte	0
07564 1A1F                        7C            .byte	$7C
07565 1A20                        C6            .byte	$C6
07566 1A21                        06            .byte	6
07567 1A22                        0C            .byte	$C
07568 1A23                        18            .byte	$18
07569 1A24                        30            .byte	$30
07570 1A25                        60            .byte	$60
07571 1A26                        C6            .byte	$C6
07572 1A27                        FE            .byte	$FE
07573 1A28                        00            .byte	0
07574 1A29                        00            .byte	0
07575 1A2A                        00            .byte	0
07576                                           ! 1160  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x06, 0x3c, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07577 1A2B                        00            .byte	0
07578 1A2C                        00            .byte	0
07579 1A2D                        7C            .byte	$7C
07580 1A2E                        C6            .byte	$C6
07581 1A2F                        06            .byte	6
07582 1A30                        06            .byte	6
07583 1A31                        3C            .byte	$3C
07584 1A32                        06            .byte	6
07585 1A33                        06            .byte	6
07586 1A34                        C6            .byte	$C6
07587 1A35                        7C            .byte	$7C
07588 1A36                        00            .byte	0
07589 1A37                        00            .byte	0
07590 1A38                        00            .byte	0
07591                                           ! 1161  0x00, 0x00, 0x0c, 0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x0c, 0x1e, 0x00, 0x00, 0x00,
07592 1A39                        00            .byte	0
07593 1A3A                        00            .byte	0
07594 1A3B                        0C            .byte	$C
07595 1A3C                        1C            .byte	$1C
07596 1A3D                        3C            .byte	$3C
07597 1A3E                        6C            .byte	$6C
07598 1A3F                        CC            .byte	$CC
07599 1A40                        FE            .byte	$FE
07600 1A41                        0C            .byte	$C
07601 1A42                        0C            .byte	$C
07602 1A43                        1E            .byte	$1E
07603 1A44                        00            .byte	0
07604 1A45                        00            .byte	0
07605 1A46                        00            .byte	0
07606                                           ! 1162  0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xfc, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07607 1A47                        00            .byte	0
07608 1A48                        00            .byte	0
07609 1A49                        FE            .byte	$FE
07610 1A4A                        C0            .byte	$C0
07611 1A4B                        C0            .byte	$C0
07612 1A4C                        C0            .byte	$C0
07613 1A4D                        FC            .byte	$FC
07614 1A4E                        06            .byte	6
07615 1A4F                        06            .byte	6
07616 1A50                        C6            .byte	$C6
07617 1A51                        7C            .byte	$7C
07618 1A52                        00            .byte	0
07619 1A53                        00            .byte	0
07620 1A54                        00            .byte	0
07621                                           ! 1163  0x00, 0x00, 0x38, 0x60, 0xc0, 0xc0,
07622 1A55                        00            .byte	0
07623 1A56                        00            .byte	0
07624 1A57                        38            .byte	$38
07625 1A58                        60            .byte	$60
07626 1A59                        C0            .byte	$C0
07627                                           ! 1163  0xfc, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07628 1A5A                        C0            .byte	$C0
07629 1A5B                        FC            .byte	$FC
07630 1A5C                        C6            .byte	$C6
07631 1A5D                        C6            .byte	$C6
07632 1A5E                        C6            .byte	$C6
07633 1A5F                        7C            .byte	$7C
07634 1A60                        00            .byte	0
07635 1A61                        00            .byte	0
07636 1A62                        00            .byte	0
07637                                           ! 1164  0x00, 0x00, 0xfe, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00,
07638 1A63                        00            .byte	0
07639 1A64                        00            .byte	0
07640 1A65                        FE            .byte	$FE
07641 1A66                        C6            .byte	$C6
07642 1A67                        06            .byte	6
07643 1A68                        0C            .byte	$C
07644 1A69                        18            .byte	$18
07645 1A6A                        30            .byte	$30
07646 1A6B                        30            .byte	$30
07647 1A6C                        30            .byte	$30
07648 1A6D                        30            .byte	$30
07649 1A6E                        00            .byte	0
07650 1A6F                        00            .byte	0
07651 1A70                        00            .byte	0
07652                                           ! 1165  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07653 1A71                        00            .byte	0
07654 1A72                        00            .byte	0
07655 1A73                        7C            .byte	$7C
07656 1A74                        C6            .byte	$C6
07657 1A75                        C6            .byte	$C6
07658 1A76                        C6            .byte	$C6
07659 1A77                        7C            .byte	$7C
07660 1A78                        C6            .byte	$C6
07661 1A79                        C6            .byte	$C6
07662 1A7A                        C6            .byte	$C6
07663 1A7B                        7C            .byte	$7C
07664 1A7C                        00            .byte	0
07665 1A7D                        00            .byte	0
07666 1A7E                        00            .byte	0
07667                                           ! 1166  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x06, 0x0c, 0x78, 0x00, 0x00, 0x00,
07668 1A7F                        00            .byte	0
07669 1A80                        00            .byte	0
07670 1A81                        7C            .byte	$7C
07671 1A82                        C6            .byte	$C6
07672 1A83                        C6            .byte	$C6
07673 1A84                        C6            .byte	$C6
07674 1A85                        7E            .byte	$7E
07675 1A86                        06            .byte	6
07676 1A87                        06            .byte	6
07677 1A88                        0C            .byte	$C
07678 1A89                        78            .byte	$78
07679 1A8A                        00            .byte	0
07680 1A8B                        00            .byte	0
07681 1A8C                        00            .byte	0
07682                                           ! 1167  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
07683 1A8D                        00            .byte	0
07684 1A8E                        00            .byte	0
07685 1A8F                        00            .byte	0
07686 1A90                        18            .byte	$18
07687 1A91                        18            .byte	$18
07688 1A92                        00            .byte	0
07689 1A93                        00            .byte	0
07690 1A94                        00            .byte	0
07691 1A95                        18            .byte	$18
07692 1A96                        18            .byte	$18
07693 1A97                        00            .byte	0
07694 1A98                        00            .byte	0
07695 1A99                        00            .byte	0
07696 1A9A                        00            .byte	0
07697                                           ! 1168  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00,
07698 1A9B                        00            .byte	0
07699 1A9C                        00            .byte	0
07700 1A9D                        00            .byte	0
07701 1A9E                        18            .byte	$18
07702 1A9F                        18            .byte	$18
07703 1AA0                        00            .byte	0
07704 1AA1                        00            .byte	0
07705 1AA2                        00            .byte	0
07706 1AA3                        18            .byte	$18
07707 1AA4                        18            .byte	$18
07708 1AA5                        30            .byte	$30
07709 1AA6                        00            .byte	0
07710 1AA7                        00            .byte	0
07711 1AA8                        00            .byte	0
07712                                           ! 1169  0x00, 0x00, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x00, 0x00, 0x00,
07713 1AA9                        00            .byte	0
07714 1AAA                        00            .byte	0
07715 1AAB                        06            .byte	6
07716 1AAC                        0C            .byte	$C
07717 1AAD                        18            .byte	$18
07718 1AAE                        30            .byte	$30
07719 1AAF                        60            .byte	$60
07720 1AB0                        30            .byte	$30
07721 1AB1                        18            .byte	$18
07722 1AB2                        0C            .byte	$C
07723 1AB3                        06            .byte	6
07724 1AB4                        00            .byte	0
07725 1AB5                        00            .byte	0
07726 1AB6                        00            .byte	0
07727                                           ! 1170  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
07728 1AB7                        00            .byte	0
07729 1AB8                        00            .byte	0
07730 1AB9                        00            .byte	0
07731 1ABA                        00            .byte	0
07732 1ABB                        00            .byte	0
07733 1ABC                        7E            .byte	$7E
07734 1ABD                        00            .byte	0
07735 1ABE                        00            .byte	0
07736 1ABF                        7E            .byte	$7E
07737 1AC0                        00            .byte	0
07738 1AC1                        00            .byte	0
07739 1AC2                        00            .byte	0
07740 1AC3                        00            .byte	0
07741 1AC4                        00            .byte	0
07742                                           ! 1171  0x00, 0x00, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00,
07743 1AC5                        00            .byte	0
07744 1AC6                        00            .byte	0
07745 1AC7                        60            .byte	$60
07746 1AC8                        30            .byte	$30
07747 1AC9                        18            .byte	$18
07748 1ACA                        0C            .byte	$C
07749 1ACB                        06            .byte	6
07750 1ACC                        0C            .byte	$C
07751 1ACD                        18            .byte	$18
07752 1ACE                        30            .byte	$30
07753 1ACF                        60            .byte	$60
07754 1AD0                        00            .byte	0
07755 1AD1                        00            .byte	0
07756 1AD2                        00            .byte	0
07757                                           ! 1172  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x0c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07758 1AD3                        00            .byte	0
07759 1AD4                        00            .byte	0
07760 1AD5                        7C            .byte	$7C
07761 1AD6                        C6            .byte	$C6
07762 1AD7                        C6            .byte	$C6
07763 1AD8                        0C            .byte	$C
07764 1AD9                        18            .byte	$18
07765 1ADA                        18            .byte	$18
07766 1ADB                        00            .byte	0
07767 1ADC                        18            .byte	$18
07768 1ADD                        18            .byte	$18
07769 1ADE                        00            .byte	0
07770 1ADF                        00            .byte	0
07771 1AE0                        00            .byte	0
07772                                           ! 1173  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xde, 0xde, 0xde, 0xdc, 0xc0, 0x7c, 0x00, 0x00, 0x00,
07773 1AE1                        00            .byte	0
07774 1AE2                        00            .byte	0
07775 1AE3                        7C            .byte	$7C
07776 1AE4                        C6            .byte	$C6
07777 1AE5                        C6            .byte	$C6
07778 1AE6                        DE            .byte	$DE
07779 1AE7                        DE            .byte	$DE
07780 1AE8                        DE            .byte	$DE
07781 1AE9                        DC            .byte	$DC
07782 1AEA                        C0            .byte	$C0
07783 1AEB                        7C            .byte	$7C
07784 1AEC                        00            .byte	0
07785 1AED                        00            .byte	0
07786 1AEE                        00            .byte	0
07787                                           ! 1174  0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07788 1AEF                        00            .byte	0
07789 1AF0                        00            .byte	0
07790 1AF1                        10            .byte	$10
07791 1AF2                        38            .byte	$38
07792 1AF3                        6C            .byte	$6C
07793 1AF4                        C6            .byte	$C6
07794 1AF5                        C6            .byte	$C6
07795 1AF6                        FE            .byte	$FE
07796 1AF7                        C6            .byte	$C6
07797 1AF8                        C6            .byte	$C6
07798 1AF9                        C6            .byte	$C6
07799 1AFA                        00            .byte	0
07800 1AFB                        00            .byte	0
07801 1AFC                        00            .byte	0
07802                                           ! 1175  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x66, 0x66, 0x66, 0xfc, 0x00, 0x00, 0x00,
07803 1AFD                        00            .byte	0
07804 1AFE                        00            .byte	0
07805 1AFF                        FC            .byte	$FC
07806 1B00                        66            .byte	$66
07807 1B01                        66            .byte	$66
07808 1B02                        66            .byte	$66
07809 1B03                        7C            .byte	$7C
07810 1B04                        66            .byte	$66
07811 1B05                        66            .byte	$66
07812 1B06                        66            .byte	$66
07813 1B07                        FC            .byte	$FC
07814 1B08                        00            .byte	0
07815 1B09                        00            .byte	0
07816 1B0A                        00            .byte	0
07817                                           ! 1176  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x00, 0x00, 0x00,
07818 1B0B                        00            .byte	0
07819 1B0C                        00            .byte	0
07820 1B0D                        3C            .byte	$3C
07821 1B0E                        66            .byte	$66
07822 1B0F                        C2            .byte	$C2
07823 1B10                        C0            .byte	$C0
07824 1B11                        C0            .byte	$C0
07825 1B12                        C0            .byte	$C0
07826 1B13                        C2            .byte	$C2
07827 1B14                        66            .byte	$66
07828 1B15                        3C            .byte	$3C
07829 1B16                        00            .byte	0
07830 1B17                        00            .byte	0
07831 1B18                        00            .byte	0
07832                                           ! 1177  0x00, 0x00, 0xf8, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00, 0x00, 0x00,
07833 1B19                        00            .byte	0
07834 1B1A                        00            .byte	0
07835 1B1B                        F8            .byte	$F8
07836 1B1C                        6C            .byte	$6C
07837 1B1D                        66            .byte	$66
07838 1B1E                        66            .byte	$66
07839 1B1F                        66            .byte	$66
07840 1B20                        66            .byte	$66
07841 1B21                        66            .byte	$66
07842 1B22                        6C            .byte	$6C
07843 1B23                        F8            .byte	$F8
07844 1B24                        00            .byte	0
07845 1B25                        00            .byte	0
07846 1B26                        00            .byte	0
07847                                           ! 1178  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00,
07848 1B27                        00            .byte	0
07849 1B28                        00            .byte	0
07850 1B29                        FE            .byte	$FE
07851 1B2A                        66            .byte	$66
07852 1B2B                        62            .byte	$62
07853 1B2C                        68            .byte	$68
07854 1B2D                        78            .byte	$78
07855 1B2E                        68            .byte	$68
07856 1B2F                        62            .byte	$62
07857 1B30                        66            .byte	$66
07858 1B31                        FE            .byte	$FE
07859 1B32                        00            .byte	0
07860 1B33                        00            .byte	0
07861 1B34                        00            .byte	0
07862                                           ! 1179  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
07863 1B35                        00            .byte	0
07864 1B36                        00            .byte	0
07865 1B37                        FE            .byte	$FE
07866 1B38                        66            .byte	$66
07867 1B39                        62            .byte	$62
07868 1B3A                        68            .byte	$68
07869 1B3B                        78            .byte	$78
07870 1B3C                        68            .byte	$68
07871 1B3D                        60            .byte	$60
07872 1B3E                        60            .byte	$60
07873 1B3F                        F0            .byte	$F0
07874 1B40                        00            .byte	0
07875 1B41                        00            .byte	0
07876 1B42                        00            .byte	0
07877                                           ! 1180  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xde, 0xc6, 0x66, 0x3a, 0x00, 0x00, 0x00,
07878 1B43                        00            .byte	0
07879 1B44                        00            .byte	0
07880 1B45                        3C            .byte	$3C
07881 1B46                        66            .byte	$66
07882 1B47                        C2            .byte	$C2
07883 1B48                        C0            .byte	$C0
07884 1B49                        C0            .byte	$C0
07885 1B4A                        DE            .byte	$DE
07886 1B4B                        C6            .byte	$C6
07887 1B4C                        66            .byte	$66
07888 1B4D                        3A            .byte	$3A
07889 1B4E                        00            .byte	0
07890 1B4F                        00            .byte	0
07891 1B50                        00            .byte	0
07892                                           ! 1181  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07893 1B51                        00            .byte	0
07894 1B52                        00            .byte	0
07895 1B53                        C6            .byte	$C6
07896 1B54                        C6            .byte	$C6
07897 1B55                        C6            .byte	$C6
07898 1B56                        C6            .byte	$C6
07899 1B57                        FE            .byte	$FE
07900 1B58                        C6            .byte	$C6
07901 1B59                        C6            .byte	$C6
07902 1B5A                        C6            .byte	$C6
07903 1B5B                        C6            .byte	$C6
07904 1B5C                        00            .byte	0
07905 1B5D                        00            .byte	0
07906 1B5E                        00            .byte	0
07907                                           ! 1182  0x00, 0x00, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
07908 1B5F                        00            .byte	0
07909 1B60                        00            .byte	0
07910 1B61                        3C            .byte	$3C
07911 1B62                        18            .byte	$18
07912 1B63                        18            .byte	$18
07913 1B64                        18            .byte	$18
07914 1B65                        18            .byte	$18
07915 1B66                        18            .byte	$18
07916 1B67                        18            .byte	$18
07917 1B68                        18            .byte	$18
07918 1B69                        3C            .byte	$3C
07919 1B6A                        00            .byte	0
07920 1B6B                        00            .byte	0
07921 1B6C                        00            .byte	0
07922                                           ! 1183  0x00, 0x00, 0x1e, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00,
07923 1B6D                        00            .byte	0
07924 1B6E                        00            .byte	0
07925 1B6F                        1E            .byte	$1E
07926 1B70                        0C            .byte	$C
07927 1B71                        0C            .byte	$C
07928 1B72                        0C            .byte	$C
07929 1B73                        0C            .byte	$C
07930 1B74                        0C            .byte	$C
07931 1B75                        CC            .byte	$CC
07932 1B76                        CC            .byte	$CC
07933 1B77                        78            .byte	$78
07934 1B78                        00            .byte	0
07935 1B79                        00            .byte	0
07936 1B7A                        00            .byte	0
07937                                           ! 1184  0x00, 0x00, 0xe6, 0x66, 0x6c, 0x6c, 0x78, 0x6c, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00,
07938 1B7B                        00            .byte	0
07939 1B7C                        00            .byte	0
07940 1B7D                        E6            .byte	$E6
07941 1B7E                        66            .byte	$66
07942 1B7F                        6C            .byte	$6C
07943 1B80                        6C            .byte	$6C
07944 1B81                        78            .byte	$78
07945 1B82                        6C            .byte	$6C
07946 1B83                        6C            .byte	$6C
07947 1B84                        66            .byte	$66
07948 1B85                        E6            .byte	$E6
07949 1B86                        00            .byte	0
07950 1B87                        00            .byte	0
07951 1B88                        00            .byte	0
07952                                           ! 1185  0x00, 0x00, 0xf0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00,
07953 1B89                        00            .byte	0
07954 1B8A                        00            .byte	0
07955 1B8B                        F0            .byte	$F0
07956 1B8C                        60            .byte	$60
07957 1B8D                        60            .byte	$60
07958 1B8E                        60            .byte	$60
07959 1B8F                        60            .byte	$60
07960 1B90                        60            .byte	$60
07961 1B91                        62            .byte	$62
07962 1B92                        66            .byte	$66
07963 1B93                        FE            .byte	$FE
07964 1B94                        00            .byte	0
07965 1B95                        00            .byte	0
07966 1B96                        00            .byte	0
07967                                           ! 1186  0x00, 0x00, 0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07968 1B97                        00            .byte	0
07969 1B98                        00            .byte	0
07970 1B99                        C6            .byte	$C6
07971 1B9A                        EE            .byte	$EE
07972 1B9B                        FE            .byte	$FE
07973 1B9C                        FE            .byte	$FE
07974 1B9D                        D6            .byte	$D6
07975 1B9E                        C6            .byte	$C6
07976 1B9F                        C6            .byte	$C6
07977 1BA0                        C6            .byte	$C6
07978 1BA1                        C6            .byte	$C6
07979 1BA2                        00            .byte	0
07980 1BA3                        00            .byte	0
07981 1BA4                        00            .byte	0
07982                                           ! 1187  0x00, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0
07983 1BA5                        00            .byte	0
07984 1BA6                        00            .byte	0
07985 1BA7                        C6            .byte	$C6
07986 1BA8                        E6            .byte	$E6
07987 1BA9                        F6            .byte	$F6
07988 1BAA                        FE            .byte	$FE
07989 1BAB                        DE            .byte	$DE
07990                                           ! 1187 xce, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07991 1BAC                        CE            .byte	$CE
07992 1BAD                        C6            .byte	$C6
07993 1BAE                        C6            .byte	$C6
07994 1BAF                        C6            .byte	$C6
07995 1BB0                        00            .byte	0
07996 1BB1                        00            .byte	0
07997 1BB2                        00            .byte	0
07998                                           ! 1188  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
07999 1BB3                        00            .byte	0
08000 1BB4                        00            .byte	0
08001 1BB5                        38            .byte	$38
08002 1BB6                        6C            .byte	$6C
08003 1BB7                        C6            .byte	$C6
08004 1BB8                        C6            .byte	$C6
08005 1BB9                        C6            .byte	$C6
08006 1BBA                        C6            .byte	$C6
08007 1BBB                        C6            .byte	$C6
08008 1BBC                        6C            .byte	$6C
08009 1BBD                        38            .byte	$38
08010 1BBE                        00            .byte	0
08011 1BBF                        00            .byte	0
08012 1BC0                        00            .byte	0
08013                                           ! 1189  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
08014 1BC1                        00            .byte	0
08015 1BC2                        00            .byte	0
08016 1BC3                        FC            .byte	$FC
08017 1BC4                        66            .byte	$66
08018 1BC5                        66            .byte	$66
08019 1BC6                        66            .byte	$66
08020 1BC7                        7C            .byte	$7C
08021 1BC8                        60            .byte	$60
08022 1BC9                        60            .byte	$60
08023 1BCA                        60            .byte	$60
08024 1BCB                        F0            .byte	$F0
08025 1BCC                        00            .byte	0
08026 1BCD                        00            .byte	0
08027 1BCE                        00            .byte	0
08028                                           ! 1190  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xde, 0x7c, 0x0c, 0x0e, 0x00, 0x00,
08029 1BCF                        00            .byte	0
08030 1BD0                        00            .byte	0
08031 1BD1                        7C            .byte	$7C
08032 1BD2                        C6            .byte	$C6
08033 1BD3                        C6            .byte	$C6
08034 1BD4                        C6            .byte	$C6
08035 1BD5                        C6            .byte	$C6
08036 1BD6                        D6            .byte	$D6
08037 1BD7                        DE            .byte	$DE
08038 1BD8                        7C            .byte	$7C
08039 1BD9                        0C            .byte	$C
08040 1BDA                        0E            .byte	$E
08041 1BDB                        00            .byte	0
08042 1BDC                        00            .byte	0
08043                                           ! 1191  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00,
08044 1BDD                        00            .byte	0
08045 1BDE                        00            .byte	0
08046 1BDF                        FC            .byte	$FC
08047 1BE0                        66            .byte	$66
08048 1BE1                        66            .byte	$66
08049 1BE2                        66            .byte	$66
08050 1BE3                        7C            .byte	$7C
08051 1BE4                        6C            .byte	$6C
08052 1BE5                        66            .byte	$66
08053 1BE6                        66            .byte	$66
08054 1BE7                        E6            .byte	$E6
08055 1BE8                        00            .byte	0
08056 1BE9                        00            .byte	0
08057 1BEA                        00            .byte	0
08058                                           ! 1192  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x60, 0x38, 0x0c, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08059 1BEB                        00            .byte	0
08060 1BEC                        00            .byte	0
08061 1BED                        7C            .byte	$7C
08062 1BEE                        C6            .byte	$C6
08063 1BEF                        C6            .byte	$C6
08064 1BF0                        60            .byte	$60
08065 1BF1                        38            .byte	$38
08066 1BF2                        0C            .byte	$C
08067 1BF3                        C6            .byte	$C6
08068 1BF4                        C6            .byte	$C6
08069 1BF5                        7C            .byte	$7C
08070 1BF6                        00            .byte	0
08071 1BF7                        00            .byte	0
08072 1BF8                        00            .byte	0
08073                                           ! 1193  0x00, 0x00, 0x7e, 0x7e, 0x5a, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08074 1BF9                        00            .byte	0
08075 1BFA                        00            .byte	0
08076 1BFB                        7E            .byte	$7E
08077 1BFC                        7E            .byte	$7E
08078 1BFD                        5A            .byte	$5A
08079 1BFE                        18            .byte	$18
08080 1BFF                        18            .byte	$18
08081 1C00                        18            .byte	$18
08082 1C01                        18            .byte	$18
08083 1C02                        18            .byte	$18
08084 1C03                        3C            .byte	$3C
08085 1C04                        00            .byte	0
08086 1C05                        00            .byte	0
08087 1C06                        00            .byte	0
08088                                           ! 1194  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08089 1C07                        00            .byte	0
08090 1C08                        00            .byte	0
08091 1C09                        C6            .byte	$C6
08092 1C0A                        C6            .byte	$C6
08093 1C0B                        C6            .byte	$C6
08094 1C0C                        C6            .byte	$C6
08095 1C0D                        C6            .byte	$C6
08096 1C0E                        C6            .byte	$C6
08097 1C0F                        C6            .byte	$C6
08098 1C10                        C6            .byte	$C6
08099 1C11                        7C            .byte	$7C
08100 1C12                        00            .byte	0
08101 1C13                        00            .byte	0
08102 1C14                        00            .byte	0
08103                                           ! 1195  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x10, 0x00, 0x00, 0x00,
08104 1C15                        00            .byte	0
08105 1C16                        00            .byte	0
08106 1C17                        C6            .byte	$C6
08107 1C18                        C6            .byte	$C6
08108 1C19                        C6            .byte	$C6
08109 1C1A                        C6            .byte	$C6
08110 1C1B                        C6            .byte	$C6
08111 1C1C                        C6            .byte	$C6
08112 1C1D                        6C            .byte	$6C
08113 1C1E                        38            .byte	$38
08114 1C1F                        10            .byte	$10
08115 1C20                        00            .byte	0
08116 1C21                        00            .byte	0
08117 1C22                        00            .byte	0
08118                                           ! 1196  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe, 0x7c, 0x6c, 0x00, 0x00, 0x00,
08119 1C23                        00            .byte	0
08120 1C24                        00            .byte	0
08121 1C25                        C6            .byte	$C6
08122 1C26                        C6            .byte	$C6
08123 1C27                        C6            .byte	$C6
08124 1C28                        C6            .byte	$C6
08125 1C29                        D6            .byte	$D6
08126 1C2A                        D6            .byte	$D6
08127 1C2B                        FE            .byte	$FE
08128 1C2C                        7C            .byte	$7C
08129 1C2D                        6C            .byte	$6C
08130 1C2E                        00            .byte	0
08131 1C2F                        00            .byte	0
08132 1C30                        00            .byte	0
08133                                           ! 1197  0x00, 0x00, 0xc6, 0xc6, 0x6c, 0x38, 0x38, 0x38, 0x6c, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08134 1C31                        00            .byte	0
08135 1C32                        00            .byte	0
08136 1C33                        C6            .byte	$C6
08137 1C34                        C6            .byte	$C6
08138 1C35                        6C            .byte	$6C
08139 1C36                        38            .byte	$38
08140 1C37                        38            .byte	$38
08141 1C38                        38            .byte	$38
08142 1C39                        6C            .byte	$6C
08143 1C3A                        C6            .byte	$C6
08144 1C3B                        C6            .byte	$C6
08145 1C3C                        00            .byte	0
08146 1C3D                        00            .byte	0
08147 1C3E                        00            .byte	0
08148                                           ! 1198  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08149 1C3F                        00            .byte	0
08150 1C40                        00            .byte	0
08151 1C41                        66            .byte	$66
08152 1C42                        66            .byte	$66
08153 1C43                        66            .byte	$66
08154 1C44                        66            .byte	$66
08155 1C45                        3C            .byte	$3C
08156 1C46                        18            .byte	$18
08157 1C47                        18            .byte	$18
08158 1C48                        18            .byte	$18
08159 1C49                        3C            .byte	$3C
08160 1C4A                        00            .byte	0
08161 1C4B                        00            .byte	0
08162 1C4C                        00            .byte	0
08163                                           ! 1199  0x00, 0x00, 0xfe, 0xc6, 0x8c, 0x18, 0x30, 0x60, 0xc2, 0xc6, 0xfe, 0x00, 0x00, 0x00,
08164 1C4D                        00            .byte	0
08165 1C4E                        00            .byte	0
08166 1C4F                        FE            .byte	$FE
08167 1C50                        C6            .byte	$C6
08168 1C51                        8C            .byte	$8C
08169 1C52                        18            .byte	$18
08170 1C53                        30            .byte	$30
08171 1C54                        60            .byte	$60
08172 1C55                        C2            .byte	$C2
08173 1C56                        C6            .byte	$C6
08174 1C57                        FE            .byte	$FE
08175 1C58                        00            .byte	0
08176 1C59                        00            .byte	0
08177 1C5A                        00            .byte	0
08178                                           ! 1200  0x00, 0x00, 0x3c, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3c, 0x00, 0x00, 0x00,
08179 1C5B                        00            .byte	0
08180 1C5C                        00            .byte	0
08181 1C5D                        3C            .byte	$3C
08182 1C5E                        30            .byte	$30
08183 1C5F                        30            .byte	$30
08184 1C60                        30            .byte	$30
08185 1C61                        30            .byte	$30
08186 1C62                        30            .byte	$30
08187 1C63                        30            .byte	$30
08188 1C64                        30            .byte	$30
08189 1C65                        3C            .byte	$3C
08190 1C66                        00            .byte	0
08191 1C67                        00            .byte	0
08192 1C68                        00            .byte	0
08193                                           ! 1201  0x00, 0x00, 0x80, 0xc0, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00,
08194 1C69                        00            .byte	0
08195 1C6A                        00            .byte	0
08196 1C6B                        80            .byte	$80
08197 1C6C                        C0            .byte	$C0
08198 1C6D                        E0            .byte	$E0
08199 1C6E                        70            .byte	$70
08200 1C6F                        38            .byte	$38
08201 1C70                        1C            .byte	$1C
08202 1C71                        0E            .byte	$E
08203 1C72                        06            .byte	6
08204 1C73                        02            .byte	2
08205 1C74                        00            .byte	0
08206 1C75                        00            .byte	0
08207 1C76                        00            .byte	0
08208                                           ! 1202  0x00, 0x00, 0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00, 0x00, 0x00,
08209 1C77                        00            .byte	0
08210 1C78                        00            .byte	0
08211 1C79                        3C            .byte	$3C
08212 1C7A                        0C            .byte	$C
08213 1C7B                        0C            .byte	$C
08214 1C7C                        0C            .byte	$C
08215 1C7D                        0C            .byte	$C
08216 1C7E                        0C            .byte	$C
08217 1C7F                        0C            .byte	$C
08218 1C80                        0C            .byte	$C
08219 1C81                        3C            .byte	$3C
08220 1C82                        00            .byte	0
08221 1C83                        00            .byte	0
08222 1C84                        00            .byte	0
08223                                           ! 1203  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
08224 1C85                        10            .byte	$10
08225 1C86                        38            .byte	$38
08226 1C87                        6C            .byte	$6C
08227 1C88                        C6            .byte	$C6
08228 1C89                        00            .byte	0
08229 1C8A                        00            .byte	0
08230 1C8B                        00            .byte	0
08231 1C8C                        00            .byte	0
08232 1C8D                        00            .byte	0
08233 1C8E                        00            .byte	0
08234 1C8F                        00            .byte	0
08235 1C90                        00            .byte	0
08236 1C91                        00            .byte	0
08237 1C92                        00            .byte	0
08238                                           ! 1204  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00,
08239 1C93                        00            .byte	0
08240 1C94                        00            .byte	0
08241 1C95                        00            .byte	0
08242 1C96                        00            .byte	0
08243 1C97                        00            .byte	0
08244 1C98                        00            .byte	0
08245 1C99                        00            .byte	0
08246 1C9A                        00            .byte	0
08247 1C9B                        00            .byte	0
08248 1C9C                        00            .byte	0
08249 1C9D                        00            .byte	0
08250 1C9E                        00            .byte	0
08251 1C9F                        FF            .byte	$FF
08252 1CA0                        00            .byte	0
08253                                           ! 1205  0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
08254 1CA1                        30            .byte	$30
08255 1CA2                        30            .byte	$30
08256 1CA3                        18            .byte	$18
08257 1CA4                        00            .byte	0
08258 1CA5                        00            .byte	0
08259 1CA6                        00            .byte	0
08260 1CA7                        00            .byte	0
08261 1CA8                        00            .byte	0
08262 1CA9                        00            .byte	0
08263 1CAA                        00            .byte	0
08264 1CAB                        00            .byte	0
08265 1CAC                        00            .byte	0
08266 1CAD                        00            .byte	0
08267 1CAE                        00            .byte	0
08268                                           ! 1206  0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08269 1CAF                        00            .byte	0
08270 1CB0                        00            .byte	0
08271 1CB1                        00            .byte	0
08272 1CB2                        00            .byte	0
08273 1CB3                        00            .byte	0
08274 1CB4                        78            .byte	$78
08275 1CB5                        0C            .byte	$C
08276 1CB6                        7C            .byte	$7C
08277 1CB7                        CC            .byte	$CC
08278 1CB8                        CC            .byte	$CC
08279 1CB9                        76            .byte	$76
08280 1CBA                        00            .byte	0
08281 1CBB                        00            .byte	0
08282 1CBC                        00            .byte	0
08283                                           ! 1207  0x00, 0x00, 0xe0, 0x60, 0x60, 0x78, 0x6c, 0x66, 0x66, 0x66, 0x7c, 0x00, 0x00, 0x00,
08284 1CBD                        00            .byte	0
08285 1CBE                        00            .byte	0
08286 1CBF                        E0            .byte	$E0
08287 1CC0                        60            .byte	$60
08288 1CC1                        60            .byte	$60
08289 1CC2                        78            .byte	$78
08290 1CC3                        6C            .byte	$6C
08291 1CC4                        66            .byte	$66
08292 1CC5                        66            .byte	$66
08293 1CC6                        66            .byte	$66
08294 1CC7                        7C            .byte	$7C
08295 1CC8                        00            .byte	0
08296 1CC9                        00            .byte	0
08297 1CCA                        00            .byte	0
08298                                           ! 1208  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08299 1CCB                        00            .byte	0
08300 1CCC                        00            .byte	0
08301 1CCD                        00            .byte	0
08302 1CCE                        00            .byte	0
08303 1CCF                        00            .byte	0
08304 1CD0                        7C            .byte	$7C
08305 1CD1                        C6            .byte	$C6
08306 1CD2                        C0            .byte	$C0
08307 1CD3                        C0            .byte	$C0
08308 1CD4                        C6            .byte	$C6
08309 1CD5                        7C            .byte	$7C
08310 1CD6                        00            .byte	0
08311 1CD7                        00            .byte	0
08312 1CD8                        00            .byte	0
08313                                           ! 1209  0x00, 0x00, 0x1c, 0x0c, 0x0c, 0x3c, 0x6c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08314 1CD9                        00            .byte	0
08315 1CDA                        00            .byte	0
08316 1CDB                        1C            .byte	$1C
08317 1CDC                        0C            .byte	$C
08318 1CDD                        0C            .byte	$C
08319 1CDE                        3C            .byte	$3C
08320 1CDF                        6C            .byte	$6C
08321 1CE0                        CC            .byte	$CC
08322 1CE1                        CC            .byte	$CC
08323 1CE2                        CC            .byte	$CC
08324 1CE3                        76            .byte	$76
08325 1CE4                        00            .byte	0
08326 1CE5                        00            .byte	0
08327 1CE6                        00            .byte	0
08328                                           ! 1210  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08329 1CE7                        00            .byte	0
08330 1CE8                        00            .byte	0
08331 1CE9                        00            .byte	0
08332 1CEA                        00            .byte	0
08333 1CEB                        00            .byte	0
08334 1CEC                        7C            .byte	$7C
08335 1CED                        C6            .byte	$C6
08336 1CEE                        FE            .byte	$FE
08337 1CEF                        C0            .byte	$C0
08338 1CF0                        C6            .byte	$C6
08339 1CF1                        7C            .byte	$7C
08340 1CF2                        00            .byte	0
08341 1CF3                        00            .byte	0
08342 1CF4                        00            .byte	0
08343                                           ! 1211  0x00, 0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x6
08344 1CF5                        00            .byte	0
08345 1CF6                        00            .byte	0
08346 1CF7                        38            .byte	$38
08347 1CF8                        6C            .byte	$6C
08348 1CF9                        64            .byte	$64
08349 1CFA                        60            .byte	$60
08350 1CFB                        F0            .byte	$F0
08351 1CFC                        60            .byte	$60
08352                                           ! 1211 0, 0x60, 0xf0, 0x00, 0x00, 0x00,
08353 1CFD                        60            .byte	$60
08354 1CFE                        60            .byte	$60
08355 1CFF                        F0            .byte	$F0
08356 1D00                        00            .byte	0
08357 1D01                        00            .byte	0
08358 1D02                        00            .byte	0
08359                                           ! 1212  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xcc, 0x78, 0x00,
08360 1D03                        00            .byte	0
08361 1D04                        00            .byte	0
08362 1D05                        00            .byte	0
08363 1D06                        00            .byte	0
08364 1D07                        00            .byte	0
08365 1D08                        76            .byte	$76
08366 1D09                        CC            .byte	$CC
08367 1D0A                        CC            .byte	$CC
08368 1D0B                        CC            .byte	$CC
08369 1D0C                        7C            .byte	$7C
08370 1D0D                        0C            .byte	$C
08371 1D0E                        CC            .byte	$CC
08372 1D0F                        78            .byte	$78
08373 1D10                        00            .byte	0
08374                                           ! 1213  0x00, 0x00, 0xe0, 0x60, 0x60, 0x6c, 0x76, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00,
08375 1D11                        00            .byte	0
08376 1D12                        00            .byte	0
08377 1D13                        E0            .byte	$E0
08378 1D14                        60            .byte	$60
08379 1D15                        60            .byte	$60
08380 1D16                        6C            .byte	$6C
08381 1D17                        76            .byte	$76
08382 1D18                        66            .byte	$66
08383 1D19                        66            .byte	$66
08384 1D1A                        66            .byte	$66
08385 1D1B                        E6            .byte	$E6
08386 1D1C                        00            .byte	0
08387 1D1D                        00            .byte	0
08388 1D1E                        00            .byte	0
08389                                           ! 1214  0x00, 0x00, 0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08390 1D1F                        00            .byte	0
08391 1D20                        00            .byte	0
08392 1D21                        18            .byte	$18
08393 1D22                        18            .byte	$18
08394 1D23                        00            .byte	0
08395 1D24                        38            .byte	$38
08396 1D25                        18            .byte	$18
08397 1D26                        18            .byte	$18
08398 1D27                        18            .byte	$18
08399 1D28                        18            .byte	$18
08400 1D29                        3C            .byte	$3C
08401 1D2A                        00            .byte	0
08402 1D2B                        00            .byte	0
08403 1D2C                        00            .byte	0
08404                                           ! 1215  0x00, 0x00, 0x06, 0x06, 0x00, 0x0e, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3c, 0x00,
08405 1D2D                        00            .byte	0
08406 1D2E                        00            .byte	0
08407 1D2F                        06            .byte	6
08408 1D30                        06            .byte	6
08409 1D31                        00            .byte	0
08410 1D32                        0E            .byte	$E
08411 1D33                        06            .byte	6
08412 1D34                        06            .byte	6
08413 1D35                        06            .byte	6
08414 1D36                        06            .byte	6
08415 1D37                        66            .byte	$66
08416 1D38                        66            .byte	$66
08417 1D39                        3C            .byte	$3C
08418 1D3A                        00            .byte	0
08419                                           ! 1216  0x00, 0x00, 0xe0, 0x60, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00,
08420 1D3B                        00            .byte	0
08421 1D3C                        00            .byte	0
08422 1D3D                        E0            .byte	$E0
08423 1D3E                        60            .byte	$60
08424 1D3F                        60            .byte	$60
08425 1D40                        66            .byte	$66
08426 1D41                        6C            .byte	$6C
08427 1D42                        78            .byte	$78
08428 1D43                        6C            .byte	$6C
08429 1D44                        66            .byte	$66
08430 1D45                        E6            .byte	$E6
08431 1D46                        00            .byte	0
08432 1D47                        00            .byte	0
08433 1D48                        00            .byte	0
08434                                           ! 1217  0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08435 1D49                        00            .byte	0
08436 1D4A                        00            .byte	0
08437 1D4B                        38            .byte	$38
08438 1D4C                        18            .byte	$18
08439 1D4D                        18            .byte	$18
08440 1D4E                        18            .byte	$18
08441 1D4F                        18            .byte	$18
08442 1D50                        18            .byte	$18
08443 1D51                        18            .byte	$18
08444 1D52                        18            .byte	$18
08445 1D53                        3C            .byte	$3C
08446 1D54                        00            .byte	0
08447 1D55                        00            .byte	0
08448 1D56                        00            .byte	0
08449                                           ! 1218  0x00, 0x00, 0x00, 0x00, 0x00, 0xec, 0xfe, 0xd6, 0xd6, 0xd6, 0xc6, 0x00, 0x00, 0x00,
08450 1D57                        00            .byte	0
08451 1D58                        00            .byte	0
08452 1D59                        00            .byte	0
08453 1D5A                        00            .byte	0
08454 1D5B                        00            .byte	0
08455 1D5C                        EC            .byte	$EC
08456 1D5D                        FE            .byte	$FE
08457 1D5E                        D6            .byte	$D6
08458 1D5F                        D6            .byte	$D6
08459 1D60                        D6            .byte	$D6
08460 1D61                        C6            .byte	$C6
08461 1D62                        00            .byte	0
08462 1D63                        00            .byte	0
08463 1D64                        00            .byte	0
08464                                           ! 1219  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00,
08465 1D65                        00            .byte	0
08466 1D66                        00            .byte	0
08467 1D67                        00            .byte	0
08468 1D68                        00            .byte	0
08469 1D69                        00            .byte	0
08470 1D6A                        DC            .byte	$DC
08471 1D6B                        66            .byte	$66
08472 1D6C                        66            .byte	$66
08473 1D6D                        66            .byte	$66
08474 1D6E                        66            .byte	$66
08475 1D6F                        66            .byte	$66
08476 1D70                        00            .byte	0
08477 1D71                        00            .byte	0
08478 1D72                        00            .byte	0
08479                                           ! 1220  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08480 1D73                        00            .byte	0
08481 1D74                        00            .byte	0
08482 1D75                        00            .byte	0
08483 1D76                        00            .byte	0
08484 1D77                        00            .byte	0
08485 1D78                        7C            .byte	$7C
08486 1D79                        C6            .byte	$C6
08487 1D7A                        C6            .byte	$C6
08488 1D7B                        C6            .byte	$C6
08489 1D7C                        C6            .byte	$C6
08490 1D7D                        7C            .byte	$7C
08491 1D7E                        00            .byte	0
08492 1D7F                        00            .byte	0
08493 1D80                        00            .byte	0
08494                                           ! 1221  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
08495 1D81                        00            .byte	0
08496 1D82                        00            .byte	0
08497 1D83                        00            .byte	0
08498 1D84                        00            .byte	0
08499 1D85                        00            .byte	0
08500 1D86                        DC            .byte	$DC
08501 1D87                        66            .byte	$66
08502 1D88                        66            .byte	$66
08503 1D89                        66            .byte	$66
08504 1D8A                        7C            .byte	$7C
08505 1D8B                        60            .byte	$60
08506 1D8C                        60            .byte	$60
08507 1D8D                        F0            .byte	$F0
08508 1D8E                        00            .byte	0
08509                                           ! 1222  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0x0c, 0x1e, 0x00,
08510 1D8F                        00            .byte	0
08511 1D90                        00            .byte	0
08512 1D91                        00            .byte	0
08513 1D92                        00            .byte	0
08514 1D93                        00            .byte	0
08515 1D94                        76            .byte	$76
08516 1D95                        CC            .byte	$CC
08517 1D96                        CC            .byte	$CC
08518 1D97                        CC            .byte	$CC
08519 1D98                        7C            .byte	$7C
08520 1D99                        0C            .byte	$C
08521 1D9A                        0C            .byte	$C
08522 1D9B                        1E            .byte	$1E
08523 1D9C                        00            .byte	0
08524                                           ! 1223  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
08525 1D9D                        00            .byte	0
08526 1D9E                        00            .byte	0
08527 1D9F                        00            .byte	0
08528 1DA0                        00            .byte	0
08529 1DA1                        00            .byte	0
08530 1DA2                        DC            .byte	$DC
08531 1DA3                        76            .byte	$76
08532 1DA4                        66            .byte	$66
08533 1DA5                        60            .byte	$60
08534 1DA6                        60            .byte	$60
08535 1DA7                        F0            .byte	$F0
08536 1DA8                        00            .byte	0
08537 1DA9                        00            .byte	0
08538 1DAA                        00            .byte	0
08539                                           ! 1224  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0x70, 0x1c, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08540 1DAB                        00            .byte	0
08541 1DAC                        00            .byte	0
08542 1DAD                        00            .byte	0
08543 1DAE                        00            .byte	0
08544 1DAF                        00            .byte	0
08545 1DB0                        7C            .byte	$7C
08546 1DB1                        C6            .byte	$C6
08547 1DB2                        70            .byte	$70
08548 1DB3                        1C            .byte	$1C
08549 1DB4                        C6            .byte	$C6
08550 1DB5                        7C            .byte	$7C
08551 1DB6                        00            .byte	0
08552 1DB7                        00            .byte	0
08553 1DB8                        00            .byte	0
08554                                           ! 1225  0x00, 0x00, 0x10, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x30, 0x36, 0x1c, 0x00, 0x00, 0x00,
08555 1DB9                        00            .byte	0
08556 1DBA                        00            .byte	0
08557 1DBB                        10            .byte	$10
08558 1DBC                        30            .byte	$30
08559 1DBD                        30            .byte	$30
08560 1DBE                        FC            .byte	$FC
08561 1DBF                        30            .byte	$30
08562 1DC0                        30            .byte	$30
08563 1DC1                        30            .byte	$30
08564 1DC2                        36            .byte	$36
08565 1DC3                        1C            .byte	$1C
08566 1DC4                        00            .byte	0
08567 1DC5                        00            .byte	0
08568 1DC6                        00            .byte	0
08569                                           ! 1226  0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08570 1DC7                        00            .byte	0
08571 1DC8                        00            .byte	0
08572 1DC9                        00            .byte	0
08573 1DCA                        00            .byte	0
08574 1DCB                        00            .byte	0
08575 1DCC                        CC            .byte	$CC
08576 1DCD                        CC            .byte	$CC
08577 1DCE                        CC            .byte	$CC
08578 1DCF                        CC            .byte	$CC
08579 1DD0                        CC            .byte	$CC
08580 1DD1                        76            .byte	$76
08581 1DD2                        00            .byte	0
08582 1DD3                        00            .byte	0
08583 1DD4                        00            .byte	0
08584                                           ! 1227  0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00,
08585 1DD5                        00            .byte	0
08586 1DD6                        00            .byte	0
08587 1DD7                        00            .byte	0
08588 1DD8                        00            .byte	0
08589 1DD9                        00            .byte	0
08590 1DDA                        66            .byte	$66
08591 1DDB                        66            .byte	$66
08592 1DDC                        66            .byte	$66
08593 1DDD                        66            .byte	$66
08594 1DDE                        3C            .byte	$3C
08595 1DDF                        18            .byte	$18
08596 1DE0                        00            .byte	0
08597 1DE1                        00            .byte	0
08598 1DE2                        00            .byte	0
08599                                           ! 1228  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe, 0x6c, 0x00, 0x00, 0x00,
08600 1DE3                        00            .byte	0
08601 1DE4                        00            .byte	0
08602 1DE5                        00            .byte	0
08603 1DE6                        00            .byte	0
08604 1DE7                        00            .byte	0
08605 1DE8                        C6            .byte	$C6
08606 1DE9                        C6            .byte	$C6
08607 1DEA                        D6            .byte	$D6
08608 1DEB                        D6            .byte	$D6
08609 1DEC                        FE            .byte	$FE
08610 1DED                        6C            .byte	$6C
08611 1DEE                        00            .byte	0
08612 1DEF                        00            .byte	0
08613 1DF0                        00            .byte	0
08614                                           ! 1229  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0x6c, 0x38, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00,
08615 1DF1                        00            .byte	0
08616 1DF2                        00            .byte	0
08617 1DF3                        00            .byte	0
08618 1DF4                        00            .byte	0
08619 1DF5                        00            .byte	0
08620 1DF6                        C6            .byte	$C6
08621 1DF7                        6C            .byte	$6C
08622 1DF8                        38            .byte	$38
08623 1DF9                        38            .byte	$38
08624 1DFA                        6C            .byte	$6C
08625 1DFB                        C6            .byte	$C6
08626 1DFC                        00            .byte	0
08627 1DFD                        00            .byte	0
08628 1DFE                        00            .byte	0
08629                                           ! 1230  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0xf8, 0x00,
08630 1DFF                        00            .byte	0
08631 1E00                        00            .byte	0
08632 1E01                        00            .byte	0
08633 1E02                        00            .byte	0
08634 1E03                        00            .byte	0
08635 1E04                        C6            .byte	$C6
08636 1E05                        C6            .byte	$C6
08637 1E06                        C6            .byte	$C6
08638 1E07                        C6            .byte	$C6
08639 1E08                        7E            .byte	$7E
08640 1E09                        06            .byte	6
08641 1E0A                        0C            .byte	$C
08642 1E0B                        F8            .byte	$F8
08643 1E0C                        00            .byte	0
08644                                           ! 1231  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xcc, 0x18, 0x30, 0x66, 0xfe, 0x00, 0x00, 0x00,
08645 1E0D                        00            .byte	0
08646 1E0E                        00            .byte	0
08647 1E0F                        00            .byte	0
08648 1E10                        00            .byte	0
08649 1E11                        00            .byte	0
08650 1E12                        FE            .byte	$FE
08651 1E13                        CC            .byte	$CC
08652 1E14                        18            .byte	$18
08653 1E15                        30            .byte	$30
08654 1E16                        66            .byte	$66
08655 1E17                        FE            .byte	$FE
08656 1E18                        00            .byte	0
08657 1E19                        00            .byte	0
08658 1E1A                        00            .byte	0
08659                                           ! 1232  0x00, 0x00, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x00, 0x00, 0x00,
08660 1E1B                        00            .byte	0
08661 1E1C                        00            .byte	0
08662 1E1D                        0E            .byte	$E
08663 1E1E                        18            .byte	$18
08664 1E1F                        18            .byte	$18
08665 1E20                        18            .byte	$18
08666 1E21                        70            .byte	$70
08667 1E22                        18            .byte	$18
08668 1E23                        18            .byte	$18
08669 1E24                        18            .byte	$18
08670 1E25                        0E            .byte	$E
08671 1E26                        00            .byte	0
08672 1E27                        00            .byte	0
08673 1E28                        00            .byte	0
08674                                           ! 1233  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
08675 1E29                        00            .byte	0
08676 1E2A                        00            .byte	0
08677 1E2B                        18            .byte	$18
08678 1E2C                        18            .byte	$18
08679 1E2D                        18            .byte	$18
08680 1E2E                        18            .byte	$18
08681 1E2F                        00            .byte	0
08682 1E30                        18            .byte	$18
08683 1E31                        18            .byte	$18
08684 1E32                        18            .byte	$18
08685 1E33                        18            .byte	$18
08686 1E34                        00            .byte	0
08687 1E35                        00            .byte	0
08688 1E36                        00            .byte	0
08689                                           ! 1234  0x00, 0x00, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x00, 0x00, 0x00,
08690 1E37                        00            .byte	0
08691 1E38                        00            .byte	0
08692 1E39                        70            .byte	$70
08693 1E3A                        18            .byte	$18
08694 1E3B                        18            .byte	$18
08695 1E3C                        18            .byte	$18
08696 1E3D                        0E            .byte	$E
08697 1E3E                        18            .byte	$18
08698 1E3F                        18            .byte	$18
08699 1E40                        18            .byte	$18
08700 1E41                        70            .byte	$70
08701 1E42                        00            .byte	0
08702 1E43                        00            .byte	0
08703 1E44                        00            .byte	0
08704                                           ! 1235  0x00, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
08705 1E45                        00            .byte	0
08706 1E46                        00            .byte	0
08707 1E47                        76            .byte	$76
08708 1E48                        DC            .byte	$DC
08709 1E49                        00            .byte	0
08710 1E4A                        00            .byte	0
08711 1E4B                        00            .byte	0
08712 1E4C                        00            .byte	0
08713 1E4D                        00            .byte	0
08714                                           ! 1235  0x00, 0x00, 0x00, 0x00,
08715 1E4E                        00            .byte	0
08716 1E4F                        00            .byte	0
08717 1E50                        00            .byte	0
08718 1E51                        00            .byte	0
08719 1E52                        00            .byte	0
08720                                           ! 1236  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
08721 1E53                        00            .byte	0
08722 1E54                        00            .byte	0
08723 1E55                        00            .byte	0
08724 1E56                        00            .byte	0
08725 1E57                        10            .byte	$10
08726 1E58                        38            .byte	$38
08727 1E59                        6C            .byte	$6C
08728 1E5A                        C6            .byte	$C6
08729 1E5B                        C6            .byte	$C6
08730 1E5C                        FE            .byte	$FE
08731 1E5D                        00            .byte	0
08732 1E5E                        00            .byte	0
08733 1E5F                        00            .byte	0
08734 1E60                        00            .byte	0
08735                                           ! 1237  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x0c, 0x06, 0x7c, 0x00,
08736 1E61                        00            .byte	0
08737 1E62                        00            .byte	0
08738 1E63                        3C            .byte	$3C
08739 1E64                        66            .byte	$66
08740 1E65                        C2            .byte	$C2
08741 1E66                        C0            .byte	$C0
08742 1E67                        C0            .byte	$C0
08743 1E68                        C2            .byte	$C2
08744 1E69                        66            .byte	$66
08745 1E6A                        3C            .byte	$3C
08746 1E6B                        0C            .byte	$C
08747 1E6C                        06            .byte	6
08748 1E6D                        7C            .byte	$7C
08749 1E6E                        00            .byte	0
08750                                           ! 1238  0x00, 0x00, 0xcc, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08751 1E6F                        00            .byte	0
08752 1E70                        00            .byte	0
08753 1E71                        CC            .byte	$CC
08754 1E72                        CC            .byte	$CC
08755 1E73                        00            .byte	0
08756 1E74                        CC            .byte	$CC
08757 1E75                        CC            .byte	$CC
08758 1E76                        CC            .byte	$CC
08759 1E77                        CC            .byte	$CC
08760 1E78                        CC            .byte	$CC
08761 1E79                        76            .byte	$76
08762 1E7A                        00            .byte	0
08763 1E7B                        00            .byte	0
08764 1E7C                        00            .byte	0
08765                                           ! 1239  0x00, 0x0c, 0x18, 0x30, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08766 1E7D                        00            .byte	0
08767 1E7E                        0C            .byte	$C
08768 1E7F                        18            .byte	$18
08769 1E80                        30            .byte	$30
08770 1E81                        00            .byte	0
08771 1E82                        7C            .byte	$7C
08772 1E83                        C6            .byte	$C6
08773 1E84                        FE            .byte	$FE
08774 1E85                        C0            .byte	$C0
08775 1E86                        C6            .byte	$C6
08776 1E87                        7C            .byte	$7C
08777 1E88                        00            .byte	0
08778 1E89                        00            .byte	0
08779 1E8A                        00            .byte	0
08780                                           ! 1240  0x00, 0x10, 0x38, 0x6c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08781 1E8B                        00            .byte	0
08782 1E8C                        10            .byte	$10
08783 1E8D                        38            .byte	$38
08784 1E8E                        6C            .byte	$6C
08785 1E8F                        00            .byte	0
08786 1E90                        78            .byte	$78
08787 1E91                        0C            .byte	$C
08788 1E92                        7C            .byte	$7C
08789 1E93                        CC            .byte	$CC
08790 1E94                        CC            .byte	$CC
08791 1E95                        76            .byte	$76
08792 1E96                        00            .byte	0
08793 1E97                        00            .byte	0
08794 1E98                        00            .byte	0
08795                                           ! 1241  0x00, 0x00, 0xcc, 0xcc, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08796 1E99                        00            .byte	0
08797 1E9A                        00            .byte	0
08798 1E9B                        CC            .byte	$CC
08799 1E9C                        CC            .byte	$CC
08800 1E9D                        00            .byte	0
08801 1E9E                        78            .byte	$78
08802 1E9F                        0C            .byte	$C
08803 1EA0                        7C            .byte	$7C
08804 1EA1                        CC            .byte	$CC
08805 1EA2                        CC            .byte	$CC
08806 1EA3                        76            .byte	$76
08807 1EA4                        00            .byte	0
08808 1EA5                        00            .byte	0
08809 1EA6                        00            .byte	0
08810                                           ! 1242  0x00, 0x60, 0x30, 0x18, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08811 1EA7                        00            .byte	0
08812 1EA8                        60            .byte	$60
08813 1EA9                        30            .byte	$30
08814 1EAA                        18            .byte	$18
08815 1EAB                        00            .byte	0
08816 1EAC                        78            .byte	$78
08817 1EAD                        0C            .byte	$C
08818 1EAE                        7C            .byte	$7C
08819 1EAF                        CC            .byte	$CC
08820 1EB0                        CC            .byte	$CC
08821 1EB1                        76            .byte	$76
08822 1EB2                        00            .byte	0
08823 1EB3                        00            .byte	0
08824 1EB4                        00            .byte	0
08825                                           ! 1243  0x00, 0x38, 0x6c, 0x38, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08826 1EB5                        00            .byte	0
08827 1EB6                        38            .byte	$38
08828 1EB7                        6C            .byte	$6C
08829 1EB8                        38            .byte	$38
08830 1EB9                        00            .byte	0
08831 1EBA                        78            .byte	$78
08832 1EBB                        0C            .byte	$C
08833 1EBC                        7C            .byte	$7C
08834 1EBD                        CC            .byte	$CC
08835 1EBE                        CC            .byte	$CC
08836 1EBF                        76            .byte	$76
08837 1EC0                        00            .byte	0
08838 1EC1                        00            .byte	0
08839 1EC2                        00            .byte	0
08840                                           ! 1244  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x60, 0x66, 0x3c, 0x0c, 0x06, 0x3c, 0x00, 0x00,
08841 1EC3                        00            .byte	0
08842 1EC4                        00            .byte	0
08843 1EC5                        00            .byte	0
08844 1EC6                        00            .byte	0
08845 1EC7                        3C            .byte	$3C
08846 1EC8                        66            .byte	$66
08847 1EC9                        60            .byte	$60
08848 1ECA                        66            .byte	$66
08849 1ECB                        3C            .byte	$3C
08850 1ECC                        0C            .byte	$C
08851 1ECD                        06            .byte	6
08852 1ECE                        3C            .byte	$3C
08853 1ECF                        00            .byte	0
08854 1ED0                        00            .byte	0
08855                                           ! 1245  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08856 1ED1                        00            .byte	0
08857 1ED2                        10            .byte	$10
08858 1ED3                        38            .byte	$38
08859 1ED4                        6C            .byte	$6C
08860 1ED5                        00            .byte	0
08861 1ED6                        7C            .byte	$7C
08862 1ED7                        C6            .byte	$C6
08863 1ED8                        FE            .byte	$FE
08864 1ED9                        C0            .byte	$C0
08865 1EDA                        C6            .byte	$C6
08866 1EDB                        7C            .byte	$7C
08867 1EDC                        00            .byte	0
08868 1EDD                        00            .byte	0
08869 1EDE                        00            .byte	0
08870                                           ! 1246  0x00, 0x00, 0xcc, 0xcc, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08871 1EDF                        00            .byte	0
08872 1EE0                        00            .byte	0
08873 1EE1                        CC            .byte	$CC
08874 1EE2                        CC            .byte	$CC
08875 1EE3                        00            .byte	0
08876 1EE4                        7C            .byte	$7C
08877 1EE5                        C6            .byte	$C6
08878 1EE6                        FE            .byte	$FE
08879 1EE7                        C0            .byte	$C0
08880 1EE8                        C6            .byte	$C6
08881 1EE9                        7C            .byte	$7C
08882 1EEA                        00            .byte	0
08883 1EEB                        00            .byte	0
08884 1EEC                        00            .byte	0
08885                                           ! 1247  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08886 1EED                        00            .byte	0
08887 1EEE                        60            .byte	$60
08888 1EEF                        30            .byte	$30
08889 1EF0                        18            .byte	$18
08890 1EF1                        00            .byte	0
08891 1EF2                        7C            .byte	$7C
08892 1EF3                        C6            .byte	$C6
08893 1EF4                        FE            .byte	$FE
08894 1EF5                        C0            .byte	$C0
08895 1EF6                        C6            .byte	$C6
08896 1EF7                        7C            .byte	$7C
08897 1EF8                        00            .byte	0
08898 1EF9                        00            .byte	0
08899 1EFA                        00            .byte	0
08900                                           ! 1248  0x00, 0x00, 0x66, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08901 1EFB                        00            .byte	0
08902 1EFC                        00            .byte	0
08903 1EFD                        66            .byte	$66
08904 1EFE                        66            .byte	$66
08905 1EFF                        00            .byte	0
08906 1F00                        38            .byte	$38
08907 1F01                        18            .byte	$18
08908 1F02                        18            .byte	$18
08909 1F03                        18            .byte	$18
08910 1F04                        18            .byte	$18
08911 1F05                        3C            .byte	$3C
08912 1F06                        00            .byte	0
08913 1F07                        00            .byte	0
08914 1F08                        00            .byte	0
08915                                           ! 1249  0x00, 0x18, 0x3c, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08916 1F09                        00            .byte	0
08917 1F0A                        18            .byte	$18
08918 1F0B                        3C            .byte	$3C
08919 1F0C                        66            .byte	$66
08920 1F0D                        00            .byte	0
08921 1F0E                        38            .byte	$38
08922 1F0F                        18            .byte	$18
08923 1F10                        18            .byte	$18
08924 1F11                        18            .byte	$18
08925 1F12                        18            .byte	$18
08926 1F13                        3C            .byte	$3C
08927 1F14                        00            .byte	0
08928 1F15                        00            .byte	0
08929 1F16                        00            .byte	0
08930                                           ! 1250  0x00, 0x60, 0x30, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08931 1F17                        00            .byte	0
08932 1F18                        60            .byte	$60
08933 1F19                        30            .byte	$30
08934 1F1A                        18            .byte	$18
08935 1F1B                        00            .byte	0
08936 1F1C                        38            .byte	$38
08937 1F1D                        18            .byte	$18
08938 1F1E                        18            .byte	$18
08939 1F1F                        18            .byte	$18
08940 1F20                        18            .byte	$18
08941 1F21                        3C            .byte	$3C
08942 1F22                        00            .byte	0
08943 1F23                        00            .byte	0
08944 1F24                        00            .byte	0
08945                                           ! 1251  0x00, 0xc6, 0xc6, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08946 1F25                        00            .byte	0
08947 1F26                        C6            .byte	$C6
08948 1F27                        C6            .byte	$C6
08949 1F28                        10            .byte	$10
08950 1F29                        38            .byte	$38
08951 1F2A                        6C            .byte	$6C
08952 1F2B                        C6            .byte	$C6
08953 1F2C                        C6            .byte	$C6
08954 1F2D                        FE            .byte	$FE
08955 1F2E                        C6            .byte	$C6
08956 1F2F                        C6            .byte	$C6
08957 1F30                        00            .byte	0
08958 1F31                        00            .byte	0
08959 1F32                        00            .byte	0
08960                                           ! 1252  0x38, 0x6c, 0x38, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08961 1F33                        38            .byte	$38
08962 1F34                        6C            .byte	$6C
08963 1F35                        38            .byte	$38
08964 1F36                        00            .byte	0
08965 1F37                        38            .byte	$38
08966 1F38                        6C            .byte	$6C
08967 1F39                        C6            .byte	$C6
08968 1F3A                        C6            .byte	$C6
08969 1F3B                        FE            .byte	$FE
08970 1F3C                        C6            .byte	$C6
08971 1F3D                        C6            .byte	$C6
08972 1F3E                        00            .byte	0
08973 1F3F                        00            .byte	0
08974 1F40                        00            .byte	0
08975                                           ! 1253  0x18, 0x30, 0x60, 0x00, 0xfe, 0x66, 0x60, 0x7c, 0x60, 0x66, 0xfe, 0x00, 0x00, 0x00,
08976 1F41                        18            .byte	$18
08977 1F42                        30            .byte	$30
08978 1F43                        60            .byte	$60
08979 1F44                        00            .byte	0
08980 1F45                        FE            .byte	$FE
08981 1F46                        66            .byte	$66
08982 1F47                        60            .byte	$60
08983 1F48                        7C            .byte	$7C
08984 1F49                        60            .byte	$60
08985 1F4A                        66            .byte	$66
08986 1F4B                        FE            .byte	$FE
08987 1F4C                        00            .byte	0
08988 1F4D                        00            .byte	0
08989 1F4E                        00            .byte	0
08990                                           ! 1254  0x00, 0x00, 0x00, 0x00, 0xcc, 0x76, 0x36, 0x7e, 0xd8, 0xd8, 0x6e, 0x00, 0x00, 0x00,
08991 1F4F                        00            .byte	0
08992 1F50                        00            .byte	0
08993 1F51                        00            .byte	0
08994 1F52                        00            .byte	0
08995 1F53                        CC            .byte	$CC
08996 1F54                        76            .byte	$76
08997 1F55                        36            .byte	$36
08998 1F56                        7E            .byte	$7E
08999 1F57                        D8            .byte	$D8
09000 1F58                        D8            .byte	$D8
09001 1F59                        6E            .byte	$6E
09002 1F5A                        00            .byte	0
09003 1F5B                        00            .byte	0
09004 1F5C                        00            .byte	0
09005                                           ! 1255  0x00, 0x00, 0x3e, 0x6c, 0xcc, 0xcc, 0xfe, 0xcc, 0xcc, 0xcc, 0xce, 0x00, 0x00, 0x00,
09006 1F5D                        00            .byte	0
09007 1F5E                        00            .byte	0
09008 1F5F                        3E            .byte	$3E
09009 1F60                        6C            .byte	$6C
09010 1F61                        CC            .byte	$CC
09011 1F62                        CC            .byte	$CC
09012 1F63                        FE            .byte	$FE
09013 1F64                        CC            .byte	$CC
09014 1F65                        CC            .byte	$CC
09015 1F66                        CC            .byte	$CC
09016 1F67                        CE            .byte	$CE
09017 1F68                        00            .byte	0
09018 1F69                        00            .byte	0
09019 1F6A                        00            .byte	0
09020                                           ! 1256  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09021 1F6B                        00            .byte	0
09022 1F6C                        10            .byte	$10
09023 1F6D                        38            .byte	$38
09024 1F6E                        6C            .byte	$6C
09025 1F6F                        00            .byte	0
09026 1F70                        7C            .byte	$7C
09027 1F71                        C6            .byte	$C6
09028 1F72                        C6            .byte	$C6
09029 1F73                        C6            .byte	$C6
09030 1F74                        C6            .byte	$C6
09031 1F75                        7C            .byte	$7C
09032 1F76                        00            .byte	0
09033 1F77                        00            .byte	0
09034 1F78                        00            .byte	0
09035                                           ! 1257  0x00, 0x00, 0xc6, 0xc6, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09036 1F79                        00            .byte	0
09037 1F7A                        00            .byte	0
09038 1F7B                        C6            .byte	$C6
09039 1F7C                        C6            .byte	$C6
09040 1F7D                        00            .byte	0
09041 1F7E                        7C            .byte	$7C
09042 1F7F                        C6            .byte	$C6
09043 1F80                        C6            .byte	$C6
09044 1F81                        C6            .byte	$C6
09045 1F82                        C6            .byte	$C6
09046 1F83                        7C            .byte	$7C
09047 1F84                        00            .byte	0
09048 1F85                        00            .byte	0
09049 1F86                        00            .byte	0
09050                                           ! 1258  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09051 1F87                        00            .byte	0
09052 1F88                        60            .byte	$60
09053 1F89                        30            .byte	$30
09054 1F8A                        18            .byte	$18
09055 1F8B                        00            .byte	0
09056 1F8C                        7C            .byte	$7C
09057 1F8D                        C6            .byte	$C6
09058 1F8E                        C6            .byte	$C6
09059 1F8F                        C6            .byte	$C6
09060 1F90                        C6            .byte	$C6
09061 1F91                        7C            .byte	$7C
09062 1F92                        00            .byte	0
09063 1F93                        00            .byte	0
09064 1F94                        00            .byte	0
09065                                           ! 1259  0x00, 0x30, 0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0
09066 1F95                        00            .byte	0
09067 1F96                        30            .byte	$30
09068 1F97                        78            .byte	$78
09069 1F98                        CC            .byte	$CC
09070 1F99                        00            .byte	0
09071 1F9A                        CC            .byte	$CC
09072 1F9B                        CC            .byte	$CC
09073 1F9C                        CC            .byte	$CC
09074 1F9D                        CC            .byte	$CC
09075 1F9E                        CC            .byte	$CC
09076 1F9F                        76            .byte	$76
09077                                           ! 1259 x00, 0x00, 0x00,
09078 1FA0                        00            .byte	0
09079 1FA1                        00            .byte	0
09080 1FA2                        00            .byte	0
09081                                           ! 1260  0x00, 0x60, 0x30, 0x18, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
09082 1FA3                        00            .byte	0
09083 1FA4                        60            .byte	$60
09084 1FA5                        30            .byte	$30
09085 1FA6                        18            .byte	$18
09086 1FA7                        00            .byte	0
09087 1FA8                        CC            .byte	$CC
09088 1FA9                        CC            .byte	$CC
09089 1FAA                        CC            .byte	$CC
09090 1FAB                        CC            .byte	$CC
09091 1FAC                        CC            .byte	$CC
09092 1FAD                        76            .byte	$76
09093 1FAE                        00            .byte	0
09094 1FAF                        00            .byte	0
09095 1FB0                        00            .byte	0
09096                                           ! 1261  0x00, 0x00, 0xc6, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0x78, 0x00,
09097 1FB1                        00            .byte	0
09098 1FB2                        00            .byte	0
09099 1FB3                        C6            .byte	$C6
09100 1FB4                        C6            .byte	$C6
09101 1FB5                        00            .byte	0
09102 1FB6                        C6            .byte	$C6
09103 1FB7                        C6            .byte	$C6
09104 1FB8                        C6            .byte	$C6
09105 1FB9                        C6            .byte	$C6
09106 1FBA                        7E            .byte	$7E
09107 1FBB                        06            .byte	6
09108 1FBC                        0C            .byte	$C
09109 1FBD                        78            .byte	$78
09110 1FBE                        00            .byte	0
09111                                           ! 1262  0x00, 0xc6, 0xc6, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
09112 1FBF                        00            .byte	0
09113 1FC0                        C6            .byte	$C6
09114 1FC1                        C6            .byte	$C6
09115 1FC2                        38            .byte	$38
09116 1FC3                        6C            .byte	$6C
09117 1FC4                        C6            .byte	$C6
09118 1FC5                        C6            .byte	$C6
09119 1FC6                        C6            .byte	$C6
09120 1FC7                        C6            .byte	$C6
09121 1FC8                        6C            .byte	$6C
09122 1FC9                        38            .byte	$38
09123 1FCA                        00            .byte	0
09124 1FCB                        00            .byte	0
09125 1FCC                        00            .byte	0
09126                                           ! 1263  0x00, 0xc6, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09127 1FCD                        00            .byte	0
09128 1FCE                        C6            .byte	$C6
09129 1FCF                        C6            .byte	$C6
09130 1FD0                        00            .byte	0
09131 1FD1                        C6            .byte	$C6
09132 1FD2                        C6            .byte	$C6
09133 1FD3                        C6            .byte	$C6
09134 1FD4                        C6            .byte	$C6
09135 1FD5                        C6            .byte	$C6
09136 1FD6                        C6            .byte	$C6
09137 1FD7                        7C            .byte	$7C
09138 1FD8                        00            .byte	0
09139 1FD9                        00            .byte	0
09140 1FDA                        00            .byte	0
09141                                           ! 1264  0x00, 0x18, 0x18, 0x3c, 0x66, 0x60, 0x60, 0x66, 0x3c, 0x18, 0x18, 0x00, 0x00, 0x00,
09142 1FDB                        00            .byte	0
09143 1FDC                        18            .byte	$18
09144 1FDD                        18            .byte	$18
09145 1FDE                        3C            .byte	$3C
09146 1FDF                        66            .byte	$66
09147 1FE0                        60            .byte	$60
09148 1FE1                        60            .byte	$60
09149 1FE2                        66            .byte	$66
09150 1FE3                        3C            .byte	$3C
09151 1FE4                        18            .byte	$18
09152 1FE5                        18            .byte	$18
09153 1FE6                        00            .byte	0
09154 1FE7                        00            .byte	0
09155 1FE8                        00            .byte	0
09156                                           ! 1265  0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0xe6, 0xfc, 0x00, 0x00, 0x00,
09157 1FE9                        00            .byte	0
09158 1FEA                        38            .byte	$38
09159 1FEB                        6C            .byte	$6C
09160 1FEC                        64            .byte	$64
09161 1FED                        60            .byte	$60
09162 1FEE                        F0            .byte	$F0
09163 1FEF                        60            .byte	$60
09164 1FF0                        60            .byte	$60
09165 1FF1                        60            .byte	$60
09166 1FF2                        E6            .byte	$E6
09167 1FF3                        FC            .byte	$FC
09168 1FF4                        00            .byte	0
09169 1FF5                        00            .byte	0
09170 1FF6                        00            .byte	0
09171                                           ! 1266  0x00, 0x00, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00,
09172 1FF7                        00            .byte	0
09173 1FF8                        00            .byte	0
09174 1FF9                        66            .byte	$66
09175 1FFA                        66            .byte	$66
09176 1FFB                        3C            .byte	$3C
09177 1FFC                        18            .byte	$18
09178 1FFD                        7E            .byte	$7E
09179 1FFE                        18            .byte	$18
09180 1FFF                        7E            .byte	$7E
09181 2000                        18            .byte	$18
09182 2001                        18            .byte	$18
09183 2002                        00            .byte	0
09184 2003                        00            .byte	0
09185 2004                        00            .byte	0
09186                                           ! 1267  0x00, 0xf8, 0xcc, 0xcc, 0xf8, 0xc4, 0xcc, 0xde, 0xcc, 0xcc, 0xc6, 0x00, 0x00, 0x00,
09187 2005                        00            .byte	0
09188 2006                        F8            .byte	$F8
09189 2007                        CC            .byte	$CC
09190 2008                        CC            .byte	$CC
09191 2009                        F8            .byte	$F8
09192 200A                        C4            .byte	$C4
09193 200B                        CC            .byte	$CC
09194 200C                        DE            .byte	$DE
09195 200D                        CC            .byte	$CC
09196 200E                        CC            .byte	$CC
09197 200F                        C6            .byte	$C6
09198 2010                        00            .byte	0
09199 2011                        00            .byte	0
09200 2012                        00            .byte	0
09201                                           ! 1268  0x00, 0x0e, 0x1b, 0x18, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x18, 0x18, 0xd8, 0x70, 0x00,
09202 2013                        00            .byte	0
09203 2014                        0E            .byte	$E
09204 2015                        1B            .byte	$1B
09205 2016                        18            .byte	$18
09206 2017                        18            .byte	$18
09207 2018                        18            .byte	$18
09208 2019                        7E            .byte	$7E
09209 201A                        18            .byte	$18
09210 201B                        18            .byte	$18
09211 201C                        18            .byte	$18
09212 201D                        18            .byte	$18
09213 201E                        D8            .byte	$D8
09214 201F                        70            .byte	$70
09215 2020                        00            .byte	0
09216                                           ! 1269  0x00, 0x18, 0x30, 0x60, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
09217 2021                        00            .byte	0
09218 2022                        18            .byte	$18
09219 2023                        30            .byte	$30
09220 2024                        60            .byte	$60
09221 2025                        00            .byte	0
09222 2026                        78            .byte	$78
09223 2027                        0C            .byte	$C
09224 2028                        7C            .byte	$7C
09225 2029                        CC            .byte	$CC
09226 202A                        CC            .byte	$CC
09227 202B                        76            .byte	$76
09228 202C                        00            .byte	0
09229 202D                        00            .byte	0
09230 202E                        00            .byte	0
09231                                           ! 1270  0x00, 0x0c, 0x18, 0x30, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
09232 202F                        00            .byte	0
09233 2030                        0C            .byte	$C
09234 2031                        18            .byte	$18
09235 2032                        30            .byte	$30
09236 2033                        00            .byte	0
09237 2034                        38            .byte	$38
09238 2035                        18            .byte	$18
09239 2036                        18            .byte	$18
09240 2037                        18            .byte	$18
09241 2038                        18            .byte	$18
09242 2039                        3C            .byte	$3C
09243 203A                        00            .byte	0
09244 203B                        00            .byte	0
09245 203C                        00            .byte	0
09246                                           ! 1271  0x00, 0x18, 0x30, 0x60, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09247 203D                        00            .byte	0
09248 203E                        18            .byte	$18
09249 203F                        30            .byte	$30
09250 2040                        60            .byte	$60
09251 2041                        00            .byte	0
09252 2042                        7C            .byte	$7C
09253 2043                        C6            .byte	$C6
09254 2044                        C6            .byte	$C6
09255 2045                        C6            .byte	$C6
09256 2046                        C6            .byte	$C6
09257 2047                        7C            .byte	$7C
09258 2048                        00            .byte	0
09259 2049                        00            .byte	0
09260 204A                        00            .byte	0
09261                                           ! 1272  0x00, 0x18, 0x30, 0x60, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
09262 204B                        00            .byte	0
09263 204C                        18            .byte	$18
09264 204D                        30            .byte	$30
09265 204E                        60            .byte	$60
09266 204F                        00            .byte	0
09267 2050                        CC            .byte	$CC
09268 2051                        CC            .byte	$CC
09269 2052                        CC            .byte	$CC
09270 2053                        CC            .byte	$CC
09271 2054                        CC            .byte	$CC
09272 2055                        76            .byte	$76
09273 2056                        00            .byte	0
09274 2057                        00            .byte	0
09275 2058                        00            .byte	0
09276                                           ! 1273  0x00, 0x00, 0x76, 0xdc, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00,
09277 2059                        00            .byte	0
09278 205A                        00            .byte	0
09279 205B                        76            .byte	$76
09280 205C                        DC            .byte	$DC
09281 205D                        00            .byte	0
09282 205E                        DC            .byte	$DC
09283 205F                        66            .byte	$66
09284 2060                        66            .byte	$66
09285 2061                        66            .byte	$66
09286 2062                        66            .byte	$66
09287 2063                        66            .byte	$66
09288 2064                        00            .byte	0
09289 2065                        00            .byte	0
09290 2066                        00            .byte	0
09291                                           ! 1274  0x76, 0xdc, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0x00, 0x00, 0x00,
09292 2067                        76            .byte	$76
09293 2068                        DC            .byte	$DC
09294 2069                        00            .byte	0
09295 206A                        C6            .byte	$C6
09296 206B                        E6            .byte	$E6
09297 206C                        F6            .byte	$F6
09298 206D                        FE            .byte	$FE
09299 206E                        DE            .byte	$DE
09300 206F                        CE            .byte	$CE
09301 2070                        C6            .byte	$C6
09302 2071                        C6            .byte	$C6
09303 2072                        00            .byte	0
09304 2073                        00            .byte	0
09305 2074                        00            .byte	0
09306                                           ! 1275  0x00, 0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09307 2075                        00            .byte	0
09308 2076                        3C            .byte	$3C
09309 2077                        6C            .byte	$6C
09310 2078                        6C            .byte	$6C
09311 2079                        3E            .byte	$3E
09312 207A                        00            .byte	0
09313 207B                        7E            .byte	$7E
09314 207C                        00            .byte	0
09315 207D                        00            .byte	0
09316 207E                        00            .byte	0
09317 207F                        00            .byte	0
09318 2080                        00            .byte	0
09319 2081                        00            .byte	0
09320 2082                        00            .byte	0
09321                                           ! 1276  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09322 2083                        00            .byte	0
09323 2084                        38            .byte	$38
09324 2085                        6C            .byte	$6C
09325 2086                        6C            .byte	$6C
09326 2087                        38            .byte	$38
09327 2088                        00            .byte	0
09328 2089                        7C            .byte	$7C
09329 208A                        00            .byte	0
09330 208B                        00            .byte	0
09331 208C                        00            .byte	0
09332 208D                        00            .byte	0
09333 208E                        00            .byte	0
09334 208F                        00            .byte	0
09335 2090                        00            .byte	0
09336                                           ! 1277  0x00, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x60, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09337 2091                        00            .byte	0
09338 2092                        00            .byte	0
09339 2093                        30            .byte	$30
09340 2094                        30            .byte	$30
09341 2095                        00            .byte	0
09342 2096                        30            .byte	$30
09343 2097                        30            .byte	$30
09344 2098                        60            .byte	$60
09345 2099                        C6            .byte	$C6
09346 209A                        C6            .byte	$C6
09347 209B                        7C            .byte	$7C
09348 209C                        00            .byte	0
09349 209D                        00            .byte	0
09350 209E                        00            .byte	0
09351                                           ! 1278  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00,
09352 209F                        00            .byte	0
09353 20A0                        00            .byte	0
09354 20A1                        00            .byte	0
09355 20A2                        00            .byte	0
09356 20A3                        00            .byte	0
09357 20A4                        00            .byte	0
09358 20A5                        FE            .byte	$FE
09359 20A6                        C0            .byte	$C0
09360 20A7                        C0            .byte	$C0
09361 20A8                        C0            .byte	$C0
09362 20A9                        00            .byte	0
09363 20AA                        00            .byte	0
09364 20AB                        00            .byte	0
09365 20AC                        00            .byte	0
09366                                           ! 1279  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00,
09367 20AD                        00            .byte	0
09368 20AE                        00            .byte	0
09369 20AF                        00            .byte	0
09370 20B0                        00            .byte	0
09371 20B1                        00            .byte	0
09372 20B2                        00            .byte	0
09373 20B3                        FE            .byte	$FE
09374 20B4                        06            .byte	6
09375 20B5                        06            .byte	6
09376 20B6                        06            .byte	6
09377 20B7                        00            .byte	0
09378 20B8                        00            .byte	0
09379 20B9                        00            .byte	0
09380 20BA                        00            .byte	0
09381                                           ! 1280  0x00, 0xc0, 0xc0, 0xc6, 0xcc, 0xd8, 0x30, 0x60, 0xdc, 0x86, 0x0c, 0x18, 0x3e, 0x00,
09382 20BB                        00            .byte	0
09383 20BC                        C0            .byte	$C0
09384 20BD                        C0            .byte	$C0
09385 20BE                        C6            .byte	$C6
09386 20BF                        CC            .byte	$CC
09387 20C0                        D8            .byte	$D8
09388 20C1                        30            .byte	$30
09389 20C2                        60            .byte	$60
09390 20C3                        DC            .byte	$DC
09391 20C4                        86            .byte	$86
09392 20C5                        0C            .byte	$C
09393 20C6                        18            .byte	$18
09394 20C7                        3E            .byte	$3E
09395 20C8                        00            .byte	0
09396                                           ! 1281  0x00, 0xc0, 0xc0, 0xc6, 0xcc, 0xd8, 0x30, 0x66, 0xce, 0x9e, 0x3e, 0x06, 0x06, 0x00,
09397 20C9                        00            .byte	0
09398 20CA                        C0            .byte	$C0
09399 20CB                        C0            .byte	$C0
09400 20CC                        C6            .byte	$C6
09401 20CD                        CC            .byte	$CC
09402 20CE                        D8            .byte	$D8
09403 20CF                        30            .byte	$30
09404 20D0                        66            .byte	$66
09405 20D1                        CE            .byte	$CE
09406 20D2                        9E            .byte	$9E
09407 20D3                        3E            .byte	$3E
09408 20D4                        06            .byte	6
09409 20D5                        06            .byte	6
09410 20D6                        00            .byte	0
09411                                           ! 1282  0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00,
09412 20D7                        00            .byte	0
09413 20D8                        00            .byte	0
09414 20D9                        18            .byte	$18
09415 20DA                        18            .byte	$18
09416 20DB                        00            .byte	0
09417 20DC                        18            .byte	$18
09418 20DD                        18            .byte	$18
09419 20DE                        3C            .byte	$3C
09420 20DF                        3C            .byte	$3C
09421 20E0                        3C            .byte	$3C
09422 20E1                        18            .byte	$18
09423 20E2                        00            .byte	0
09424 20E3                        00            .byte	0
09425 20E4                        00            .byte	0
09426                                           ! 1283  0x00, 0x00, 0x00, 0x00, 0x36, 0x6c, 0xd8, 0x6c, 0x36, 0x00, 0x00, 0x00, 0x0
09427 20E5                        00            .byte	0
09428 20E6                        00            .byte	0
09429 20E7                        00            .byte	0
09430 20E8                        00            .byte	0
09431 20E9                        36            .byte	$36
09432 20EA                        6C            .byte	$6C
09433 20EB                        D8            .byte	$D8
09434 20EC                        6C            .byte	$6C
09435 20ED                        36            .byte	$36
09436 20EE                        00            .byte	0
09437 20EF                        00            .byte	0
09438 20F0                        00            .byte	0
09439                                           ! 1283 0, 0x00,
09440 20F1                        00            .byte	0
09441 20F2                        00            .byte	0
09442                                           ! 1284  0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c, 0x36, 0x6c, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00,
09443 20F3                        00            .byte	0
09444 20F4                        00            .byte	0
09445 20F5                        00            .byte	0
09446 20F6                        00            .byte	0
09447 20F7                        D8            .byte	$D8
09448 20F8                        6C            .byte	$6C
09449 20F9                        36            .byte	$36
09450 20FA                        6C            .byte	$6C
09451 20FB                        D8            .byte	$D8
09452 20FC                        00            .byte	0
09453 20FD                        00            .byte	0
09454 20FE                        00            .byte	0
09455 20FF                        00            .byte	0
09456 2100                        00            .byte	0
09457                                           ! 1285  0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44,
09458 2101                        11            .byte	$11
09459 2102                        44            .byte	$44
09460 2103                        11            .byte	$11
09461 2104                        44            .byte	$44
09462 2105                        11            .byte	$11
09463 2106                        44            .byte	$44
09464 2107                        11            .byte	$11
09465 2108                        44            .byte	$44
09466 2109                        11            .byte	$11
09467 210A                        44            .byte	$44
09468 210B                        11            .byte	$11
09469 210C                        44            .byte	$44
09470 210D                        11            .byte	$11
09471 210E                        44            .byte	$44
09472                                           ! 1286  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
09473 210F                        55            .byte	$55
09474 2110                        AA            .byte	$AA
09475 2111                        55            .byte	$55
09476 2112                        AA            .byte	$AA
09477 2113                        55            .byte	$55
09478 2114                        AA            .byte	$AA
09479 2115                        55            .byte	$55
09480 2116                        AA            .byte	$AA
09481 2117                        55            .byte	$55
09482 2118                        AA            .byte	$AA
09483 2119                        55            .byte	$55
09484 211A                        AA            .byte	$AA
09485 211B                        55            .byte	$55
09486 211C                        AA            .byte	$AA
09487                                           ! 1287  0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77,
09488 211D                        DD            .byte	$DD
09489 211E                        77            .byte	$77
09490 211F                        DD            .byte	$DD
09491 2120                        77            .byte	$77
09492 2121                        DD            .byte	$DD
09493 2122                        77            .byte	$77
09494 2123                        DD            .byte	$DD
09495 2124                        77            .byte	$77
09496 2125                        DD            .byte	$DD
09497 2126                        77            .byte	$77
09498 2127                        DD            .byte	$DD
09499 2128                        77            .byte	$77
09500 2129                        DD            .byte	$DD
09501 212A                        77            .byte	$77
09502                                           ! 1288  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09503 212B                        18            .byte	$18
09504 212C                        18            .byte	$18
09505 212D                        18            .byte	$18
09506 212E                        18            .byte	$18
09507 212F                        18            .byte	$18
09508 2130                        18            .byte	$18
09509 2131                        18            .byte	$18
09510 2132                        18            .byte	$18
09511 2133                        18            .byte	$18
09512 2134                        18            .byte	$18
09513 2135                        18            .byte	$18
09514 2136                        18            .byte	$18
09515 2137                        18            .byte	$18
09516 2138                        18            .byte	$18
09517                                           ! 1289  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09518 2139                        18            .byte	$18
09519 213A                        18            .byte	$18
09520 213B                        18            .byte	$18
09521 213C                        18            .byte	$18
09522 213D                        18            .byte	$18
09523 213E                        18            .byte	$18
09524 213F                        18            .byte	$18
09525 2140                        F8            .byte	$F8
09526 2141                        18            .byte	$18
09527 2142                        18            .byte	$18
09528 2143                        18            .byte	$18
09529 2144                        18            .byte	$18
09530 2145                        18            .byte	$18
09531 2146                        18            .byte	$18
09532                                           ! 1290  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09533 2147                        18            .byte	$18
09534 2148                        18            .byte	$18
09535 2149                        18            .byte	$18
09536 214A                        18            .byte	$18
09537 214B                        18            .byte	$18
09538 214C                        F8            .byte	$F8
09539 214D                        18            .byte	$18
09540 214E                        F8            .byte	$F8
09541 214F                        18            .byte	$18
09542 2150                        18            .byte	$18
09543 2151                        18            .byte	$18
09544 2152                        18            .byte	$18
09545 2153                        18            .byte	$18
09546 2154                        18            .byte	$18
09547                                           ! 1291  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09548 2155                        36            .byte	$36
09549 2156                        36            .byte	$36
09550 2157                        36            .byte	$36
09551 2158                        36            .byte	$36
09552 2159                        36            .byte	$36
09553 215A                        36            .byte	$36
09554 215B                        36            .byte	$36
09555 215C                        F6            .byte	$F6
09556 215D                        36            .byte	$36
09557 215E                        36            .byte	$36
09558 215F                        36            .byte	$36
09559 2160                        36            .byte	$36
09560 2161                        36            .byte	$36
09561 2162                        36            .byte	$36
09562                                           ! 1292  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09563 2163                        00            .byte	0
09564 2164                        00            .byte	0
09565 2165                        00            .byte	0
09566 2166                        00            .byte	0
09567 2167                        00            .byte	0
09568 2168                        00            .byte	0
09569 2169                        00            .byte	0
09570 216A                        FE            .byte	$FE
09571 216B                        36            .byte	$36
09572 216C                        36            .byte	$36
09573 216D                        36            .byte	$36
09574 216E                        36            .byte	$36
09575 216F                        36            .byte	$36
09576 2170                        36            .byte	$36
09577                                           ! 1293  0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09578 2171                        00            .byte	0
09579 2172                        00            .byte	0
09580 2173                        00            .byte	0
09581 2174                        00            .byte	0
09582 2175                        00            .byte	0
09583 2176                        F8            .byte	$F8
09584 2177                        18            .byte	$18
09585 2178                        F8            .byte	$F8
09586 2179                        18            .byte	$18
09587 217A                        18            .byte	$18
09588 217B                        18            .byte	$18
09589 217C                        18            .byte	$18
09590 217D                        18            .byte	$18
09591 217E                        18            .byte	$18
09592                                           ! 1294  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09593 217F                        36            .byte	$36
09594 2180                        36            .byte	$36
09595 2181                        36            .byte	$36
09596 2182                        36            .byte	$36
09597 2183                        36            .byte	$36
09598 2184                        F6            .byte	$F6
09599 2185                        06            .byte	6
09600 2186                        F6            .byte	$F6
09601 2187                        36            .byte	$36
09602 2188                        36            .byte	$36
09603 2189                        36            .byte	$36
09604 218A                        36            .byte	$36
09605 218B                        36            .byte	$36
09606 218C                        36            .byte	$36
09607                                           ! 1295  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09608 218D                        36            .byte	$36
09609 218E                        36            .byte	$36
09610 218F                        36            .byte	$36
09611 2190                        36            .byte	$36
09612 2191                        36            .byte	$36
09613 2192                        36            .byte	$36
09614 2193                        36            .byte	$36
09615 2194                        36            .byte	$36
09616 2195                        36            .byte	$36
09617 2196                        36            .byte	$36
09618 2197                        36            .byte	$36
09619 2198                        36            .byte	$36
09620 2199                        36            .byte	$36
09621 219A                        36            .byte	$36
09622                                           ! 1296  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09623 219B                        00            .byte	0
09624 219C                        00            .byte	0
09625 219D                        00            .byte	0
09626 219E                        00            .byte	0
09627 219F                        00            .byte	0
09628 21A0                        FE            .byte	$FE
09629 21A1                        06            .byte	6
09630 21A2                        F6            .byte	$F6
09631 21A3                        36            .byte	$36
09632 21A4                        36            .byte	$36
09633 21A5                        36            .byte	$36
09634 21A6                        36            .byte	$36
09635 21A7                        36            .byte	$36
09636 21A8                        36            .byte	$36
09637                                           ! 1297  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09638 21A9                        36            .byte	$36
09639 21AA                        36            .byte	$36
09640 21AB                        36            .byte	$36
09641 21AC                        36            .byte	$36
09642 21AD                        36            .byte	$36
09643 21AE                        F6            .byte	$F6
09644 21AF                        06            .byte	6
09645 21B0                        FE            .byte	$FE
09646 21B1                        00            .byte	0
09647 21B2                        00            .byte	0
09648 21B3                        00            .byte	0
09649 21B4                        00            .byte	0
09650 21B5                        00            .byte	0
09651 21B6                        00            .byte	0
09652                                           ! 1298  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09653 21B7                        36            .byte	$36
09654 21B8                        36            .byte	$36
09655 21B9                        36            .byte	$36
09656 21BA                        36            .byte	$36
09657 21BB                        36            .byte	$36
09658 21BC                        36            .byte	$36
09659 21BD                        36            .byte	$36
09660 21BE                        FE            .byte	$FE
09661 21BF                        00            .byte	0
09662 21C0                        00            .byte	0
09663 21C1                        00            .byte	0
09664 21C2                        00            .byte	0
09665 21C3                        00            .byte	0
09666 21C4                        00            .byte	0
09667                                           ! 1299  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09668 21C5                        18            .byte	$18
09669 21C6                        18            .byte	$18
09670 21C7                        18            .byte	$18
09671 21C8                        18            .byte	$18
09672 21C9                        18            .byte	$18
09673 21CA                        F8            .byte	$F8
09674 21CB                        18            .byte	$18
09675 21CC                        F8            .byte	$F8
09676 21CD                        00            .byte	0
09677 21CE                        00            .byte	0
09678 21CF                        00            .byte	0
09679 21D0                        00            .byte	0
09680 21D1                        00            .byte	0
09681 21D2                        00            .byte	0
09682                                           ! 1300  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09683 21D3                        00            .byte	0
09684 21D4                        00            .byte	0
09685 21D5                        00            .byte	0
09686 21D6                        00            .byte	0
09687 21D7                        00            .byte	0
09688 21D8                        00            .byte	0
09689 21D9                        00            .byte	0
09690 21DA                        F8            .byte	$F8
09691 21DB                        18            .byte	$18
09692 21DC                        18            .byte	$18
09693 21DD                        18            .byte	$18
09694 21DE                        18            .byte	$18
09695 21DF                        18            .byte	$18
09696 21E0                        18            .byte	$18
09697                                           ! 1301  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09698 21E1                        18            .byte	$18
09699 21E2                        18            .byte	$18
09700 21E3                        18            .byte	$18
09701 21E4                        18            .byte	$18
09702 21E5                        18            .byte	$18
09703 21E6                        18            .byte	$18
09704 21E7                        18            .byte	$18
09705 21E8                        1F            .byte	$1F
09706 21E9                        00            .byte	0
09707 21EA                        00            .byte	0
09708 21EB                        00            .byte	0
09709 21EC                        00            .byte	0
09710 21ED                        00            .byte	0
09711 21EE                        00            .byte	0
09712                                           ! 1302  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09713 21EF                        18            .byte	$18
09714 21F0                        18            .byte	$18
09715 21F1                        18            .byte	$18
09716 21F2                        18            .byte	$18
09717 21F3                        18            .byte	$18
09718 21F4                        18            .byte	$18
09719 21F5                        18            .byte	$18
09720 21F6                        FF            .byte	$FF
09721 21F7                        00            .byte	0
09722 21F8                        00            .byte	0
09723 21F9                        00            .byte	0
09724 21FA                        00            .byte	0
09725 21FB                        00            .byte	0
09726 21FC                        00            .byte	0
09727                                           ! 1303  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09728 21FD                        00            .byte	0
09729 21FE                        00            .byte	0
09730 21FF                        00            .byte	0
09731 2200                        00            .byte	0
09732 2201                        00            .byte	0
09733 2202                        00            .byte	0
09734 2203                        00            .byte	0
09735 2204                        FF            .byte	$FF
09736 2205                        18            .byte	$18
09737 2206                        18            .byte	$18
09738 2207                        18            .byte	$18
09739 2208                        18            .byte	$18
09740 2209                        18            .byte	$18
09741 220A                        18            .byte	$18
09742                                           ! 1304  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09743 220B                        18            .byte	$18
09744 220C                        18            .byte	$18
09745 220D                        18            .byte	$18
09746 220E                        18            .byte	$18
09747 220F                        18            .byte	$18
09748 2210                        18            .byte	$18
09749 2211                        18            .byte	$18
09750 2212                        1F            .byte	$1F
09751 2213                        18            .byte	$18
09752 2214                        18            .byte	$18
09753 2215                        18            .byte	$18
09754 2216                        18            .byte	$18
09755 2217                        18            .byte	$18
09756 2218                        18            .byte	$18
09757                                           ! 1305  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09758 2219                        00            .byte	0
09759 221A                        00            .byte	0
09760 221B                        00            .byte	0
09761 221C                        00            .byte	0
09762 221D                        00            .byte	0
09763 221E                        00            .byte	0
09764 221F                        00            .byte	0
09765 2220                        FF            .byte	$FF
09766 2221                        00            .byte	0
09767 2222                        00            .byte	0
09768 2223                        00            .byte	0
09769 2224                        00            .byte	0
09770 2225                        00            .byte	0
09771 2226                        00            .byte	0
09772                                           ! 1306  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09773 2227                        18            .byte	$18
09774 2228                        18            .byte	$18
09775 2229                        18            .byte	$18
09776 222A                        18            .byte	$18
09777 222B                        18            .byte	$18
09778 222C                        18            .byte	$18
09779 222D                        18            .byte	$18
09780 222E                        FF            .byte	$FF
09781 222F                        18            .byte	$18
09782 2230                        18            .byte	$18
09783 2231                        18            .byte	$18
09784 2232                        18            .byte	$18
09785 2233                        18            .byte	$18
09786 2234                        18            .byte	$18
09787                                           ! 1307  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09788 2235                        18            .byte	$18
09789 2236                        18            .byte	$18
09790 2237                        18            .byte	$18
09791 2238                        18            .byte	$18
09792 2239                        18            .byte	$18
09793 223A                        1F            .byte	$1F
09794 223B                        18            .byte	$18
09795 223C                        1F            .byte	$1F
09796 223D                        18            .byte	$18
09797 223E                        18            .byte	$18
09798 223F                        18            .byte	$18
09799 2240                        18            .byte	$18
09800 2241                        18            .byte	$18
09801                                           ! 1307 
09802 2242                        18            .byte	$18
09803                                           ! 1308  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09804 2243                        36            .byte	$36
09805 2244                        36            .byte	$36
09806 2245                        36            .byte	$36
09807 2246                        36            .byte	$36
09808 2247                        36            .byte	$36
09809 2248                        36            .byte	$36
09810 2249                        36            .byte	$36
09811 224A                        37            .byte	$37
09812 224B                        36            .byte	$36
09813 224C                        36            .byte	$36
09814 224D                        36            .byte	$36
09815 224E                        36            .byte	$36
09816 224F                        36            .byte	$36
09817 2250                        36            .byte	$36
09818                                           ! 1309  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09819 2251                        36            .byte	$36
09820 2252                        36            .byte	$36
09821 2253                        36            .byte	$36
09822 2254                        36            .byte	$36
09823 2255                        36            .byte	$36
09824 2256                        37            .byte	$37
09825 2257                        30            .byte	$30
09826 2258                        3F            .byte	$3F
09827 2259                        00            .byte	0
09828 225A                        00            .byte	0
09829 225B                        00            .byte	0
09830 225C                        00            .byte	0
09831 225D                        00            .byte	0
09832 225E                        00            .byte	0
09833                                           ! 1310  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09834 225F                        00            .byte	0
09835 2260                        00            .byte	0
09836 2261                        00            .byte	0
09837 2262                        00            .byte	0
09838 2263                        00            .byte	0
09839 2264                        3F            .byte	$3F
09840 2265                        30            .byte	$30
09841 2266                        37            .byte	$37
09842 2267                        36            .byte	$36
09843 2268                        36            .byte	$36
09844 2269                        36            .byte	$36
09845 226A                        36            .byte	$36
09846 226B                        36            .byte	$36
09847 226C                        36            .byte	$36
09848                                           ! 1311  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09849 226D                        36            .byte	$36
09850 226E                        36            .byte	$36
09851 226F                        36            .byte	$36
09852 2270                        36            .byte	$36
09853 2271                        36            .byte	$36
09854 2272                        F7            .byte	$F7
09855 2273                        00            .byte	0
09856 2274                        FF            .byte	$FF
09857 2275                        00            .byte	0
09858 2276                        00            .byte	0
09859 2277                        00            .byte	0
09860 2278                        00            .byte	0
09861 2279                        00            .byte	0
09862 227A                        00            .byte	0
09863                                           ! 1312  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09864 227B                        00            .byte	0
09865 227C                        00            .byte	0
09866 227D                        00            .byte	0
09867 227E                        00            .byte	0
09868 227F                        00            .byte	0
09869 2280                        FF            .byte	$FF
09870 2281                        00            .byte	0
09871 2282                        F7            .byte	$F7
09872 2283                        36            .byte	$36
09873 2284                        36            .byte	$36
09874 2285                        36            .byte	$36
09875 2286                        36            .byte	$36
09876 2287                        36            .byte	$36
09877 2288                        36            .byte	$36
09878                                           ! 1313  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09879 2289                        36            .byte	$36
09880 228A                        36            .byte	$36
09881 228B                        36            .byte	$36
09882 228C                        36            .byte	$36
09883 228D                        36            .byte	$36
09884 228E                        37            .byte	$37
09885 228F                        30            .byte	$30
09886 2290                        37            .byte	$37
09887 2291                        36            .byte	$36
09888 2292                        36            .byte	$36
09889 2293                        36            .byte	$36
09890 2294                        36            .byte	$36
09891 2295                        36            .byte	$36
09892 2296                        36            .byte	$36
09893                                           ! 1314  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09894 2297                        00            .byte	0
09895 2298                        00            .byte	0
09896 2299                        00            .byte	0
09897 229A                        00            .byte	0
09898 229B                        00            .byte	0
09899 229C                        FF            .byte	$FF
09900 229D                        00            .byte	0
09901 229E                        FF            .byte	$FF
09902 229F                        00            .byte	0
09903 22A0                        00            .byte	0
09904 22A1                        00            .byte	0
09905 22A2                        00            .byte	0
09906 22A3                        00            .byte	0
09907 22A4                        00            .byte	0
09908                                           ! 1315  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09909 22A5                        36            .byte	$36
09910 22A6                        36            .byte	$36
09911 22A7                        36            .byte	$36
09912 22A8                        36            .byte	$36
09913 22A9                        36            .byte	$36
09914 22AA                        F7            .byte	$F7
09915 22AB                        00            .byte	0
09916 22AC                        F7            .byte	$F7
09917 22AD                        36            .byte	$36
09918 22AE                        36            .byte	$36
09919 22AF                        36            .byte	$36
09920 22B0                        36            .byte	$36
09921 22B1                        36            .byte	$36
09922 22B2                        36            .byte	$36
09923                                           ! 1316  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09924 22B3                        18            .byte	$18
09925 22B4                        18            .byte	$18
09926 22B5                        18            .byte	$18
09927 22B6                        18            .byte	$18
09928 22B7                        18            .byte	$18
09929 22B8                        FF            .byte	$FF
09930 22B9                        00            .byte	0
09931 22BA                        FF            .byte	$FF
09932 22BB                        00            .byte	0
09933 22BC                        00            .byte	0
09934 22BD                        00            .byte	0
09935 22BE                        00            .byte	0
09936 22BF                        00            .byte	0
09937 22C0                        00            .byte	0
09938                                           ! 1317  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09939 22C1                        36            .byte	$36
09940 22C2                        36            .byte	$36
09941 22C3                        36            .byte	$36
09942 22C4                        36            .byte	$36
09943 22C5                        36            .byte	$36
09944 22C6                        36            .byte	$36
09945 22C7                        36            .byte	$36
09946 22C8                        FF            .byte	$FF
09947 22C9                        00            .byte	0
09948 22CA                        00            .byte	0
09949 22CB                        00            .byte	0
09950 22CC                        00            .byte	0
09951 22CD                        00            .byte	0
09952 22CE                        00            .byte	0
09953                                           ! 1318  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09954 22CF                        00            .byte	0
09955 22D0                        00            .byte	0
09956 22D1                        00            .byte	0
09957 22D2                        00            .byte	0
09958 22D3                        00            .byte	0
09959 22D4                        FF            .byte	$FF
09960 22D5                        00            .byte	0
09961 22D6                        FF            .byte	$FF
09962 22D7                        18            .byte	$18
09963 22D8                        18            .byte	$18
09964 22D9                        18            .byte	$18
09965 22DA                        18            .byte	$18
09966 22DB                        18            .byte	$18
09967 22DC                        18            .byte	$18
09968                                           ! 1319  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09969 22DD                        00            .byte	0
09970 22DE                        00            .byte	0
09971 22DF                        00            .byte	0
09972 22E0                        00            .byte	0
09973 22E1                        00            .byte	0
09974 22E2                        00            .byte	0
09975 22E3                        00            .byte	0
09976 22E4                        FF            .byte	$FF
09977 22E5                        36            .byte	$36
09978 22E6                        36            .byte	$36
09979 22E7                        36            .byte	$36
09980 22E8                        36            .byte	$36
09981 22E9                        36            .byte	$36
09982 22EA                        36            .byte	$36
09983                                           ! 1320  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09984 22EB                        36            .byte	$36
09985 22EC                        36            .byte	$36
09986 22ED                        36            .byte	$36
09987 22EE                        36            .byte	$36
09988 22EF                        36            .byte	$36
09989 22F0                        36            .byte	$36
09990 22F1                        36            .byte	$36
09991 22F2                        3F            .byte	$3F
09992 22F3                        00            .byte	0
09993 22F4                        00            .byte	0
09994 22F5                        00            .byte	0
09995 22F6                        00            .byte	0
09996 22F7                        00            .byte	0
09997 22F8                        00            .byte	0
09998                                           ! 1321  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09999 22F9                        18            .byte	$18
10000 22FA                        18            .byte	$18
10001 22FB                        18            .byte	$18
10002 22FC                        18            .byte	$18
10003 22FD                        18            .byte	$18
10004 22FE                        1F            .byte	$1F
10005 22FF                        18            .byte	$18
10006 2300                        1F            .byte	$1F
10007 2301                        00            .byte	0
10008 2302                        00            .byte	0
10009 2303                        00            .byte	0
10010 2304                        00            .byte	0
10011 2305                        00            .byte	0
10012 2306                        00            .byte	0
10013                                           ! 1322  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
10014 2307                        00            .byte	0
10015 2308                        00            .byte	0
10016 2309                        00            .byte	0
10017 230A                        00            .byte	0
10018 230B                        00            .byte	0
10019 230C                        1F            .byte	$1F
10020 230D                        18            .byte	$18
10021 230E                        1F            .byte	$1F
10022 230F                        18            .byte	$18
10023 2310                        18            .byte	$18
10024 2311                        18            .byte	$18
10025 2312                        18            .byte	$18
10026 2313                        18            .byte	$18
10027 2314                        18            .byte	$18
10028                                           ! 1323  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
10029 2315                        00            .byte	0
10030 2316                        00            .byte	0
10031 2317                        00            .byte	0
10032 2318                        00            .byte	0
10033 2319                        00            .byte	0
10034 231A                        00            .byte	0
10035 231B                        00            .byte	0
10036 231C                        3F            .byte	$3F
10037 231D                        36            .byte	$36
10038 231E                        36            .byte	$36
10039 231F                        36            .byte	$36
10040 2320                        36            .byte	$36
10041 2321                        36            .byte	$36
10042 2322                        36            .byte	$36
10043                                           ! 1324  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
10044 2323                        36            .byte	$36
10045 2324                        36            .byte	$36
10046 2325                        36            .byte	$36
10047 2326                        36            .byte	$36
10048 2327                        36            .byte	$36
10049 2328                        36            .byte	$36
10050 2329                        36            .byte	$36
10051 232A                        FF            .byte	$FF
10052 232B                        36            .byte	$36
10053 232C                        36            .byte	$36
10054 232D                        36            .byte	$36
10055 232E                        36            .byte	$36
10056 232F                        36            .byte	$36
10057 2330                        36            .byte	$36
10058                                           ! 1325  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
10059 2331                        18            .byte	$18
10060 2332                        18            .byte	$18
10061 2333                        18            .byte	$18
10062 2334                        18            .byte	$18
10063 2335                        18            .byte	$18
10064 2336                        FF            .byte	$FF
10065 2337                        18            .byte	$18
10066 2338                        FF            .byte	$FF
10067 2339                        18            .byte	$18
10068 233A                        18            .byte	$18
10069 233B                        18            .byte	$18
10070 233C                        18            .byte	$18
10071 233D                        18            .byte	$18
10072 233E                        18            .byte	$18
10073                                           ! 1326  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10074 233F                        18            .byte	$18
10075 2340                        18            .byte	$18
10076 2341                        18            .byte	$18
10077 2342                        18            .byte	$18
10078 2343                        18            .byte	$18
10079 2344                        18            .byte	$18
10080 2345                        18            .byte	$18
10081 2346                        F8            .byte	$F8
10082 2347                        00            .byte	0
10083 2348                        00            .byte	0
10084 2349                        00            .byte	0
10085 234A                        00            .byte	0
10086 234B                        00            .byte	0
10087 234C                        00            .byte	0
10088                                           ! 1327  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
10089 234D                        00            .byte	0
10090 234E                        00            .byte	0
10091 234F                        00            .byte	0
10092 2350                        00            .byte	0
10093 2351                        00            .byte	0
10094 2352                        00            .byte	0
10095 2353                        00            .byte	0
10096 2354                        1F            .byte	$1F
10097 2355                        18            .byte	$18
10098 2356                        18            .byte	$18
10099 2357                        18            .byte	$18
10100 2358                        18            .byte	$18
10101 2359                        18            .byte	$18
10102 235A                        18            .byte	$18
10103                                           ! 1328  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
10104 235B                        FF            .byte	$FF
10105 235C                        FF            .byte	$FF
10106 235D                        FF            .byte	$FF
10107 235E                        FF            .byte	$FF
10108 235F                        FF            .byte	$FF
10109 2360                        FF            .byte	$FF
10110 2361                        FF            .byte	$FF
10111 2362                        FF            .byte	$FF
10112 2363                        FF            .byte	$FF
10113 2364                        FF            .byte	$FF
10114 2365                        FF            .byte	$FF
10115 2366                        FF            .byte	$FF
10116 2367                        FF            .byte	$FF
10117 2368                        FF            .byte	$FF
10118                                           ! 1329  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
10119 2369                        00            .byte	0
10120 236A                        00            .byte	0
10121 236B                        00            .byte	0
10122 236C                        00            .byte	0
10123 236D                        00            .byte	0
10124 236E                        00            .byte	0
10125 236F                        00            .byte	0
10126 2370                        FF            .byte	$FF
10127 2371                        FF            .byte	$FF
10128 2372                        FF            .byte	$FF
10129 2373                        FF            .byte	$FF
10130 2374                        FF            .byte	$FF
10131 2375                        FF            .byte	$FF
10132 2376                        FF            .byte	$FF
10133                                           ! 1330  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
10134 2377                        F0            .byte	$F0
10135 2378                        F0            .byte	$F0
10136 2379                        F0            .byte	$F0
10137 237A                        F0            .byte	$F0
10138 237B                        F0            .byte	$F0
10139 237C                        F0            .byte	$F0
10140 237D                        F0            .byte	$F0
10141 237E                        F0            .byte	$F0
10142 237F                        F0            .byte	$F0
10143 2380                        F0            .byte	$F0
10144 2381                        F0            .byte	$F0
10145 2382                        F0            .byte	$F0
10146 2383                        F0            .byte	$F0
10147 2384                        F0            .byte	$F0
10148                                           ! 1331  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
10149 2385                        0F            .byte	$F
10150 2386                        0F            .byte	$F
10151 2387                        0F            .byte	$F
10152 2388                        0F            .byte	$F
10153 2389                        0F            .byte	$F
10154 238A                        0F            .byte	$F
10155 238B                        0F            .byte	$F
10156 238C                        0F            .byte	$F
10157 238D                        0F            .byte	$F
10158 238E                        0F            .byte	$F
10159 238F                        0F            .byte	$F
10160 2390                        0F            .byte	$F
10161 2391                        0F            .byte	$F
10162 2392                        0F            .byte	$F
10163                                           ! 1332  0xff, 
10164 2393                        FF            .byte	$FF
10165                                           ! 1332 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10166 2394                        FF            .byte	$FF
10167 2395                        FF            .byte	$FF
10168 2396                        FF            .byte	$FF
10169 2397                        FF            .byte	$FF
10170 2398                        FF            .byte	$FF
10171 2399                        FF            .byte	$FF
10172 239A                        00            .byte	0
10173 239B                        00            .byte	0
10174 239C                        00            .byte	0
10175 239D                        00            .byte	0
10176 239E                        00            .byte	0
10177 239F                        00            .byte	0
10178 23A0                        00            .byte	0
10179                                           ! 1333  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0xd8, 0xd8, 0xdc, 0x76, 0x00, 0x00, 0x00,
10180 23A1                        00            .byte	0
10181 23A2                        00            .byte	0
10182 23A3                        00            .byte	0
10183 23A4                        00            .byte	0
10184 23A5                        00            .byte	0
10185 23A6                        76            .byte	$76
10186 23A7                        DC            .byte	$DC
10187 23A8                        D8            .byte	$D8
10188 23A9                        D8            .byte	$D8
10189 23AA                        DC            .byte	$DC
10190 23AB                        76            .byte	$76
10191 23AC                        00            .byte	0
10192 23AD                        00            .byte	0
10193 23AE                        00            .byte	0
10194                                           ! 1334  0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfc, 0xc6, 0xc6, 0xfc, 0xc0, 0xc0, 0x40, 0x00,
10195 23AF                        00            .byte	0
10196 23B0                        00            .byte	0
10197 23B1                        00            .byte	0
10198 23B2                        00            .byte	0
10199 23B3                        7C            .byte	$7C
10200 23B4                        C6            .byte	$C6
10201 23B5                        FC            .byte	$FC
10202 23B6                        C6            .byte	$C6
10203 23B7                        C6            .byte	$C6
10204 23B8                        FC            .byte	$FC
10205 23B9                        C0            .byte	$C0
10206 23BA                        C0            .byte	$C0
10207 23BB                        40            .byte	$40
10208 23BC                        00            .byte	0
10209                                           ! 1335  0x00, 0x00, 0xfe, 0xc6, 0xc6, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00,
10210 23BD                        00            .byte	0
10211 23BE                        00            .byte	0
10212 23BF                        FE            .byte	$FE
10213 23C0                        C6            .byte	$C6
10214 23C1                        C6            .byte	$C6
10215 23C2                        C0            .byte	$C0
10216 23C3                        C0            .byte	$C0
10217 23C4                        C0            .byte	$C0
10218 23C5                        C0            .byte	$C0
10219 23C6                        C0            .byte	$C0
10220 23C7                        C0            .byte	$C0
10221 23C8                        00            .byte	0
10222 23C9                        00            .byte	0
10223 23CA                        00            .byte	0
10224                                           ! 1336  0x00, 0x00, 0x00, 0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00,
10225 23CB                        00            .byte	0
10226 23CC                        00            .byte	0
10227 23CD                        00            .byte	0
10228 23CE                        00            .byte	0
10229 23CF                        FE            .byte	$FE
10230 23D0                        6C            .byte	$6C
10231 23D1                        6C            .byte	$6C
10232 23D2                        6C            .byte	$6C
10233 23D3                        6C            .byte	$6C
10234 23D4                        6C            .byte	$6C
10235 23D5                        6C            .byte	$6C
10236 23D6                        00            .byte	0
10237 23D7                        00            .byte	0
10238 23D8                        00            .byte	0
10239                                           ! 1337  0x00, 0x00, 0xfe, 0xc6, 0x60, 0x30, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00,
10240 23D9                        00            .byte	0
10241 23DA                        00            .byte	0
10242 23DB                        FE            .byte	$FE
10243 23DC                        C6            .byte	$C6
10244 23DD                        60            .byte	$60
10245 23DE                        30            .byte	$30
10246 23DF                        18            .byte	$18
10247 23E0                        30            .byte	$30
10248 23E1                        60            .byte	$60
10249 23E2                        C6            .byte	$C6
10250 23E3                        FE            .byte	$FE
10251 23E4                        00            .byte	0
10252 23E5                        00            .byte	0
10253 23E6                        00            .byte	0
10254                                           ! 1338  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00,
10255 23E7                        00            .byte	0
10256 23E8                        00            .byte	0
10257 23E9                        00            .byte	0
10258 23EA                        00            .byte	0
10259 23EB                        00            .byte	0
10260 23EC                        7E            .byte	$7E
10261 23ED                        D8            .byte	$D8
10262 23EE                        D8            .byte	$D8
10263 23EF                        D8            .byte	$D8
10264 23F0                        D8            .byte	$D8
10265 23F1                        70            .byte	$70
10266 23F2                        00            .byte	0
10267 23F3                        00            .byte	0
10268 23F4                        00            .byte	0
10269                                           ! 1339  0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xc0, 0x00, 0x00,
10270 23F5                        00            .byte	0
10271 23F6                        00            .byte	0
10272 23F7                        00            .byte	0
10273 23F8                        00            .byte	0
10274 23F9                        66            .byte	$66
10275 23FA                        66            .byte	$66
10276 23FB                        66            .byte	$66
10277 23FC                        66            .byte	$66
10278 23FD                        7C            .byte	$7C
10279 23FE                        60            .byte	$60
10280 23FF                        60            .byte	$60
10281 2400                        C0            .byte	$C0
10282 2401                        00            .byte	0
10283 2402                        00            .byte	0
10284                                           ! 1340  0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
10285 2403                        00            .byte	0
10286 2404                        00            .byte	0
10287 2405                        00            .byte	0
10288 2406                        00            .byte	0
10289 2407                        76            .byte	$76
10290 2408                        DC            .byte	$DC
10291 2409                        18            .byte	$18
10292 240A                        18            .byte	$18
10293 240B                        18            .byte	$18
10294 240C                        18            .byte	$18
10295 240D                        18            .byte	$18
10296 240E                        00            .byte	0
10297 240F                        00            .byte	0
10298 2410                        00            .byte	0
10299                                           ! 1341  0x00, 0x00, 0x7e, 0x18, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00,
10300 2411                        00            .byte	0
10301 2412                        00            .byte	0
10302 2413                        7E            .byte	$7E
10303 2414                        18            .byte	$18
10304 2415                        3C            .byte	$3C
10305 2416                        66            .byte	$66
10306 2417                        66            .byte	$66
10307 2418                        66            .byte	$66
10308 2419                        3C            .byte	$3C
10309 241A                        18            .byte	$18
10310 241B                        7E            .byte	$7E
10311 241C                        00            .byte	0
10312 241D                        00            .byte	0
10313 241E                        00            .byte	0
10314                                           ! 1342  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
10315 241F                        00            .byte	0
10316 2420                        00            .byte	0
10317 2421                        38            .byte	$38
10318 2422                        6C            .byte	$6C
10319 2423                        C6            .byte	$C6
10320 2424                        C6            .byte	$C6
10321 2425                        FE            .byte	$FE
10322 2426                        C6            .byte	$C6
10323 2427                        C6            .byte	$C6
10324 2428                        6C            .byte	$6C
10325 2429                        38            .byte	$38
10326 242A                        00            .byte	0
10327 242B                        00            .byte	0
10328 242C                        00            .byte	0
10329                                           ! 1343  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x6c, 0x6c, 0xee, 0x00, 0x00, 0x00,
10330 242D                        00            .byte	0
10331 242E                        00            .byte	0
10332 242F                        38            .byte	$38
10333 2430                        6C            .byte	$6C
10334 2431                        C6            .byte	$C6
10335 2432                        C6            .byte	$C6
10336 2433                        C6            .byte	$C6
10337 2434                        6C            .byte	$6C
10338 2435                        6C            .byte	$6C
10339 2436                        6C            .byte	$6C
10340 2437                        EE            .byte	$EE
10341 2438                        00            .byte	0
10342 2439                        00            .byte	0
10343 243A                        00            .byte	0
10344                                           ! 1344  0x00, 0x00, 0x1e, 0x30, 0x18, 0x0c, 0x3e, 0x66, 0x66, 0x66, 0x3c, 0x00, 0x00, 0x00,
10345 243B                        00            .byte	0
10346 243C                        00            .byte	0
10347 243D                        1E            .byte	$1E
10348 243E                        30            .byte	$30
10349 243F                        18            .byte	$18
10350 2440                        0C            .byte	$C
10351 2441                        3E            .byte	$3E
10352 2442                        66            .byte	$66
10353 2443                        66            .byte	$66
10354 2444                        66            .byte	$66
10355 2445                        3C            .byte	$3C
10356 2446                        00            .byte	0
10357 2447                        00            .byte	0
10358 2448                        00            .byte	0
10359                                           ! 1345  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xdb, 0xdb, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
10360 2449                        00            .byte	0
10361 244A                        00            .byte	0
10362 244B                        00            .byte	0
10363 244C                        00            .byte	0
10364 244D                        00            .byte	0
10365 244E                        7E            .byte	$7E
10366 244F                        DB            .byte	$DB
10367 2450                        DB            .byte	$DB
10368 2451                        7E            .byte	$7E
10369 2452                        00            .byte	0
10370 2453                        00            .byte	0
10371 2454                        00            .byte	0
10372 2455                        00            .byte	0
10373 2456                        00            .byte	0
10374                                           ! 1346  0x00, 0x00, 0x03, 0x06, 0x7e, 0xdb, 0xdb, 0xf3, 0x7e, 0x60, 0xc0, 0x00, 0x00, 0x00,
10375 2457                        00            .byte	0
10376 2458                        00            .byte	0
10377 2459                        03            .byte	3
10378 245A                        06            .byte	6
10379 245B                        7E            .byte	$7E
10380 245C                        DB            .byte	$DB
10381 245D                        DB            .byte	$DB
10382 245E                        F3            .byte	$F3
10383 245F                        7E            .byte	$7E
10384 2460                        60            .byte	$60
10385 2461                        C0            .byte	$C0
10386 2462                        00            .byte	0
10387 2463                        00            .byte	0
10388 2464                        00            .byte	0
10389                                           ! 1347  0x00, 0x00, 0x1c, 0x30, 0x60, 0x60, 0x7c, 0x60, 0x60, 0x30, 0x1c, 0x00, 0x00, 0x00,
10390 2465                        00            .byte	0
10391 2466                        00            .byte	0
10392 2467                        1C            .byte	$1C
10393 2468                        30            .byte	$30
10394 2469                        60            .byte	$60
10395 246A                        60            .byte	$60
10396 246B                        7C            .byte	$7C
10397 246C                        60            .byte	$60
10398 246D                        60            .byte	$60
10399 246E                        30            .byte	$30
10400 246F                        1C            .byte	$1C
10401 2470                        00            .byte	0
10402 2471                        00            .byte	0
10403 2472                        00            .byte	0
10404                                           ! 1348  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
10405 2473                        00            .byte	0
10406 2474                        00            .byte	0
10407 2475                        00            .byte	0
10408 2476                        7C            .byte	$7C
10409 2477                        C6            .byte	$C6
10410 2478                        C6            .byte	$C6
10411 2479                        C6            .byte	$C6
10412 247A                        C6            .byte	$C6
10413 247B                        C6            .byte	$C6
10414 247C                        C6            .byte	$C6
10415 247D                        C6            .byte	$C6
10416 247E                        00            .byte	0
10417 247F                        00            .byte	0
10418 2480                        00            .byte	0
10419                                           ! 1349  0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00,
10420 2481                        00            .byte	0
10421 2482                        00            .byte	0
10422 2483                        00            .byte	0
10423 2484                        FE            .byte	$FE
10424 2485                        00            .byte	0
10425 2486                        00            .byte	0
10426 2487                        FE            .byte	$FE
10427 2488                        00            .byte	0
10428 2489                        00            .byte	0
10429 248A                        FE            .byte	$FE
10430 248B                        00            .byte	0
10431 248C                        00            .byte	0
10432 248D                        00            .byte	0
10433 248E                        00            .byte	0
10434                                           ! 1350  0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
10435 248F                        00            .byte	0
10436 2490                        00            .byte	0
10437 2491                        00            .byte	0
10438 2492                        18            .byte	$18
10439 2493                        18            .byte	$18
10440 2494                        7E            .byte	$7E
10441 2495                        18            .byte	$18
10442 2496                        18            .byte	$18
10443 2497                        00            .byte	0
10444 2498                        00            .byte	0
10445 2499                        FF            .byte	$FF
10446 249A                        00            .byte	0
10447 249B                        00            .byte	0
10448 249C                        00            .byte	0
10449                                           ! 1351  0x00, 0x00, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x00, 0x7e, 0x00, 0x00, 0x00,
10450 249D                        00            .byte	0
10451 249E                        00            .byte	0
10452 249F                        30            .byte	$30
10453 24A0                        18            .byte	$18
10454 24A1                        0C            .byte	$C
10455 24A2                        06            .byte	6
10456 24A3                        0C            .byte	$C
10457 24A4                        18            .byte	$18
10458 24A5                        30            .byte	$30
10459 24A6                        00            .byte	0
10460 24A7                        7E            .byte	$7E
10461 24A8                        00            .byte	0
10462 24A9                        00            .byte	0
10463 24AA                        00            .byte	0
10464                                           ! 1352  0x00, 0x00, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x00, 0x7e, 0x00, 0x00, 0x00,
10465 24AB                        00            .byte	0
10466 24AC                        00            .byte	0
10467 24AD                        0C            .byte	$C
10468 24AE                        18            .byte	$18
10469 24AF                        30            .byte	$30
10470 24B0                        60            .byte	$60
10471 24B1                        30            .byte	$30
10472 24B2                        18            .byte	$18
10473 24B3                        0C            .byte	$C
10474 24B4                        00            .byte	0
10475 24B5                        7E            .byte	$7E
10476 24B6                        00            .byte	0
10477 24B7                        00            .byte	0
10478 24B8                        00            .byte	0
10479                                           ! 1353  0x00, 0x00, 0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
10480 24B9                        00            .byte	0
10481 24BA                        00            .byte	0
10482 24BB                        0E            .byte	$E
10483 24BC                        1B            .byte	$1B
10484 24BD                        1B            .byte	$1B
10485 24BE                        18            .byte	$18
10486 24BF                        18            .byte	$18
10487 24C0                        18            .byte	$18
10488 24C1                        18            .byte	$18
10489 24C2                        18            .byte	$18
10490 24C3                        18            .byte	$18
10491 24C4                        18            .byte	$18
10492 24C5                        18            .byte	$18
10493 24C6                        18            .byte	$18
10494                                           ! 1354  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00,
10495 24C7                        18            .byte	$18
10496 24C8                        18            .byte	$18
10497 24C9                        18            .byte	$18
10498 24CA                        18            .byte	$18
10499 24CB                        18            .byte	$18
10500 24CC                        18            .byte	$18
10501 24CD                        18            .byte	$18
10502 24CE                        18            .byte	$18
10503 24CF                        D8            .byte	$D8
10504 24D0                        D8            .byte	$D8
10505 24D1                        70            .byte	$70
10506 24D2                        00            .byte	0
10507 24D3                        00            .byte	0
10508 24D4                        00            .byte	0
10509                                           ! 1355  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x7e, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10510 24D5                        00            .byte	0
10511 24D6                        00            .byte	0
10512 24D7                        00            .byte	0
10513 24D8                        18            .byte	$18
10514 24D9                        18            .byte	$18
10515 24DA                        00            .byte	0
10516 24DB                        7E            .byte	$7E
10517 24DC                        00            .byte	0
10518 24DD                        18            .byte	$18
10519 24DE                        18            .byte	$18
10520 24DF                        00            .byte	0
10521 24E0                        00            .byte	0
10522 24E1                        00            .byte	0
10523 24E2                        00            .byte	0
10524                                           ! 1356  0x00, 0x00, 0x
10525 24E3                        00            .byte	0
10526 24E4                        00            .byte	0
10527                                           ! 1356 00, 0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00,
10528 24E5                        00            .byte	0
10529 24E6                        00            .byte	0
10530 24E7                        76            .byte	$76
10531 24E8                        DC            .byte	$DC
10532 24E9                        00            .byte	0
10533 24EA                        76            .byte	$76
10534 24EB                        DC            .byte	$DC
10535 24EC                        00            .byte	0
10536 24ED                        00            .byte	0
10537 24EE                        00            .byte	0
10538 24EF                        00            .byte	0
10539 24F0                        00            .byte	0
10540                                           ! 1357  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10541 24F1                        00            .byte	0
10542 24F2                        38            .byte	$38
10543 24F3                        6C            .byte	$6C
10544 24F4                        6C            .byte	$6C
10545 24F5                        38            .byte	$38
10546 24F6                        00            .byte	0
10547 24F7                        00            .byte	0
10548 24F8                        00            .byte	0
10549 24F9                        00            .byte	0
10550 24FA                        00            .byte	0
10551 24FB                        00            .byte	0
10552 24FC                        00            .byte	0
10553 24FD                        00            .byte	0
10554 24FE                        00            .byte	0
10555                                           ! 1358  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10556 24FF                        00            .byte	0
10557 2500                        00            .byte	0
10558 2501                        00            .byte	0
10559 2502                        00            .byte	0
10560 2503                        00            .byte	0
10561 2504                        00            .byte	0
10562 2505                        18            .byte	$18
10563 2506                        18            .byte	$18
10564 2507                        00            .byte	0
10565 2508                        00            .byte	0
10566 2509                        00            .byte	0
10567 250A                        00            .byte	0
10568 250B                        00            .byte	0
10569 250C                        00            .byte	0
10570                                           ! 1359  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10571 250D                        00            .byte	0
10572 250E                        00            .byte	0
10573 250F                        00            .byte	0
10574 2510                        00            .byte	0
10575 2511                        00            .byte	0
10576 2512                        00            .byte	0
10577 2513                        00            .byte	0
10578 2514                        18            .byte	$18
10579 2515                        00            .byte	0
10580 2516                        00            .byte	0
10581 2517                        00            .byte	0
10582 2518                        00            .byte	0
10583 2519                        00            .byte	0
10584 251A                        00            .byte	0
10585                                           ! 1360  0x00, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x3c, 0x1c, 0x00, 0x00, 0x00,
10586 251B                        00            .byte	0
10587 251C                        0F            .byte	$F
10588 251D                        0C            .byte	$C
10589 251E                        0C            .byte	$C
10590 251F                        0C            .byte	$C
10591 2520                        0C            .byte	$C
10592 2521                        0C            .byte	$C
10593 2522                        EC            .byte	$EC
10594 2523                        6C            .byte	$6C
10595 2524                        3C            .byte	$3C
10596 2525                        1C            .byte	$1C
10597 2526                        00            .byte	0
10598 2527                        00            .byte	0
10599 2528                        00            .byte	0
10600                                           ! 1361  0x00, 0xd8, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10601 2529                        00            .byte	0
10602 252A                        D8            .byte	$D8
10603 252B                        6C            .byte	$6C
10604 252C                        6C            .byte	$6C
10605 252D                        6C            .byte	$6C
10606 252E                        6C            .byte	$6C
10607 252F                        6C            .byte	$6C
10608 2530                        00            .byte	0
10609 2531                        00            .byte	0
10610 2532                        00            .byte	0
10611 2533                        00            .byte	0
10612 2534                        00            .byte	0
10613 2535                        00            .byte	0
10614 2536                        00            .byte	0
10615                                           ! 1362  0x00, 0x70, 0xd8, 0x30, 0x60, 0xc8, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10616 2537                        00            .byte	0
10617 2538                        70            .byte	$70
10618 2539                        D8            .byte	$D8
10619 253A                        30            .byte	$30
10620 253B                        60            .byte	$60
10621 253C                        C8            .byte	$C8
10622 253D                        F8            .byte	$F8
10623 253E                        00            .byte	0
10624 253F                        00            .byte	0
10625 2540                        00            .byte	0
10626 2541                        00            .byte	0
10627 2542                        00            .byte	0
10628 2543                        00            .byte	0
10629 2544                        00            .byte	0
10630                                           ! 1363  0x00, 0x00, 0x00, 0x00, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x00, 0x00, 0x00, 0x00,
10631 2545                        00            .byte	0
10632 2546                        00            .byte	0
10633 2547                        00            .byte	0
10634 2548                        00            .byte	0
10635 2549                        7C            .byte	$7C
10636 254A                        7C            .byte	$7C
10637 254B                        7C            .byte	$7C
10638 254C                        7C            .byte	$7C
10639 254D                        7C            .byte	$7C
10640 254E                        7C            .byte	$7C
10641 254F                        00            .byte	0
10642 2550                        00            .byte	0
10643 2551                        00            .byte	0
10644 2552                        00            .byte	0
10645                                           ! 1364  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
10646 2553                        00            .byte	0
10647 2554                        00            .byte	0
10648 2555                        00            .byte	0
10649 2556                        00            .byte	0
10650 2557                        00            .byte	0
10651 2558                        00            .byte	0
10652 2559                        00            .byte	0
10653 255A                        00            .byte	0
10654 255B                        00            .byte	0
10655 255C                        00            .byte	0
10656 255D                        00            .byte	0
10657 255E                        00            .byte	0
10658 255F                        00            .byte	0
10659                                           ! 1365 };
10660 2560                        00            .byte	0
10661                                           !BCC_EOS
10662                                           ! 1366 static Bit8u vgafont16[256*16]=
10663                                           ! 1367 {
10664                       00002561            _vgafont16:
10665                                           ! 1368  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10666 2561                        00            .byte	0
10667 2562                        00            .byte	0
10668 2563                        00            .byte	0
10669 2564                        00            .byte	0
10670 2565                        00            .byte	0
10671 2566                        00            .byte	0
10672 2567                        00            .byte	0
10673 2568                        00            .byte	0
10674 2569                        00            .byte	0
10675 256A                        00            .byte	0
10676 256B                        00            .byte	0
10677 256C                        00            .byte	0
10678 256D                        00            .byte	0
10679 256E                        00            .byte	0
10680 256F                        00            .byte	0
10681 2570                        00            .byte	0
10682                                           ! 1369  0x00, 0x00, 0x7e, 0x81, 0xa5, 0x81, 0x81, 0xbd, 0x99, 0x81, 0x81, 0x7e, 0x00, 0x00, 0x00, 0x00,
10683 2571                        00            .byte	0
10684 2572                        00            .byte	0
10685 2573                        7E            .byte	$7E
10686 2574                        81            .byte	$81
10687 2575                        A5            .byte	$A5
10688 2576                        81            .byte	$81
10689 2577                        81            .byte	$81
10690 2578                        BD            .byte	$BD
10691 2579                        99            .byte	$99
10692 257A                        81            .byte	$81
10693 257B                        81            .byte	$81
10694 257C                        7E            .byte	$7E
10695 257D                        00            .byte	0
10696 257E                        00            .byte	0
10697 257F                        00            .byte	0
10698 2580                        00            .byte	0
10699                                           ! 1370  0x00, 0x00, 0x7e, 0xff, 0xdb, 0xff, 0xff, 0xc3, 0xe7, 0xff, 0xff, 0x7e, 0x00, 0x00, 0x00, 0x00,
10700 2581                        00            .byte	0
10701 2582                        00            .byte	0
10702 2583                        7E            .byte	$7E
10703 2584                        FF            .byte	$FF
10704 2585                        DB            .byte	$DB
10705 2586                        FF            .byte	$FF
10706 2587                        FF            .byte	$FF
10707 2588                        C3            .byte	$C3
10708 2589                        E7            .byte	$E7
10709 258A                        FF            .byte	$FF
10710 258B                        FF            .byte	$FF
10711 258C                        7E            .byte	$7E
10712 258D                        00            .byte	0
10713 258E                        00            .byte	0
10714 258F                        00            .byte	0
10715 2590                        00            .byte	0
10716                                           ! 1371  0x00, 0x00, 0x00, 0x00, 0x6c, 0xfe, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
10717 2591                        00            .byte	0
10718 2592                        00            .byte	0
10719 2593                        00            .byte	0
10720 2594                        00            .byte	0
10721 2595                        6C            .byte	$6C
10722 2596                        FE            .byte	$FE
10723 2597                        FE            .byte	$FE
10724 2598                        FE            .byte	$FE
10725 2599                        FE            .byte	$FE
10726 259A                        7C            .byte	$7C
10727 259B                        38            .byte	$38
10728 259C                        10            .byte	$10
10729 259D                        00            .byte	0
10730 259E                        00            .byte	0
10731 259F                        00            .byte	0
10732 25A0                        00            .byte	0
10733                                           ! 1372  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
10734 25A1                        00            .byte	0
10735 25A2                        00            .byte	0
10736 25A3                        00            .byte	0
10737 25A4                        00            .byte	0
10738 25A5                        10            .byte	$10
10739 25A6                        38            .byte	$38
10740 25A7                        7C            .byte	$7C
10741 25A8                        FE            .byte	$FE
10742 25A9                        7C            .byte	$7C
10743 25AA                        38            .byte	$38
10744 25AB                        10            .byte	$10
10745 25AC                        00            .byte	0
10746 25AD                        00            .byte	0
10747 25AE                        00            .byte	0
10748 25AF                        00            .byte	0
10749 25B0                        00            .byte	0
10750                                           ! 1373  0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0xe7, 0xe7, 0xe7, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
10751 25B1                        00            .byte	0
10752 25B2                        00            .byte	0
10753 25B3                        00            .byte	0
10754 25B4                        18            .byte	$18
10755 25B5                        3C            .byte	$3C
10756 25B6                        3C            .byte	$3C
10757 25B7                        E7            .byte	$E7
10758 25B8                        E7            .byte	$E7
10759 25B9                        E7            .byte	$E7
10760 25BA                        18            .byte	$18
10761 25BB                        18            .byte	$18
10762 25BC                        3C            .byte	$3C
10763 25BD                        00            .byte	0
10764 25BE                        00            .byte	0
10765 25BF                        00            .byte	0
10766 25C0                        00            .byte	0
10767                                           ! 1374  0x00, 0x00, 0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x7e, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
10768 25C1                        00            .byte	0
10769 25C2                        00            .byte	0
10770 25C3                        00            .byte	0
10771 25C4                        18            .byte	$18
10772 25C5                        3C            .byte	$3C
10773 25C6                        7E            .byte	$7E
10774 25C7                        FF            .byte	$FF
10775 25C8                        FF            .byte	$FF
10776 25C9                        7E            .byte	$7E
10777 25CA                        18            .byte	$18
10778 25CB                        18            .byte	$18
10779 25CC                        3C            .byte	$3C
10780 25CD                        00            .byte	0
10781 25CE                        00            .byte	0
10782 25CF                        00            .byte	0
10783 25D0                        00            .byte	0
10784                                           ! 1375  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10785 25D1                        00            .byte	0
10786 25D2                        00            .byte	0
10787 25D3                        00            .byte	0
10788 25D4                        00            .byte	0
10789 25D5                        00            .byte	0
10790 25D6                        00            .byte	0
10791 25D7                        18            .byte	$18
10792 25D8                        3C            .byte	$3C
10793 25D9                        3C            .byte	$3C
10794 25DA                        18            .byte	$18
10795 25DB                        00            .byte	0
10796 25DC                        00            .byte	0
10797 25DD                        00            .byte	0
10798 25DE                        00            .byte	0
10799 25DF                        00            .byte	0
10800 25E0                        00            .byte	0
10801                                           ! 1376  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
10802 25E1                        FF            .byte	$FF
10803 25E2                        FF            .byte	$FF
10804 25E3                        FF            .byte	$FF
10805 25E4                        FF            .byte	$FF
10806 25E5                        FF            .byte	$FF
10807 25E6                        FF            .byte	$FF
10808 25E7                        E7            .byte	$E7
10809 25E8                        C3            .byte	$C3
10810 25E9                        C3            .byte	$C3
10811 25EA                        E7            .byte	$E7
10812 25EB                        FF            .byte	$FF
10813 25EC                        FF            .byte	$FF
10814 25ED                        FF            .byte	$FF
10815 25EE                        FF            .byte	$FF
10816 25EF                        FF            .byte	$FF
10817 25F0                        FF            .byte	$FF
10818                                           ! 1377  0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00,
10819 25F1                        00            .byte	0
10820 25F2                        00            .byte	0
10821 25F3                        00            .byte	0
10822 25F4                        00            .byte	0
10823 25F5                        00            .byte	0
10824 25F6                        3C            .byte	$3C
10825 25F7                        66            .byte	$66
10826 25F8                        42            .byte	$42
10827 25F9                        42            .byte	$42
10828 25FA                        66            .byte	$66
10829 25FB                        3C            .byte	$3C
10830 25FC                        00            .byte	0
10831 25FD                        00            .byte	0
10832 25FE                        00            .byte	0
10833 25FF                        00            .byte	0
10834 2600                        00            .byte	0
10835                                           ! 1378  0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff,
10836 2601                        FF            .byte	$FF
10837 2602                        FF            .byte	$FF
10838 2603                        FF            .byte	$FF
10839 2604                        FF            .byte	$FF
10840 2605                        FF            .byte	$FF
10841 2606                        C3            .byte	$C3
10842 2607                        99            .byte	$99
10843 2608                        BD            .byte	$BD
10844 2609                        BD            .byte	$BD
10845 260A                        99            .byte	$99
10846 260B                        C3            .byte	$C3
10847 260C                        FF            .byte	$FF
10848 260D                        FF            .byte	$FF
10849 260E                        FF            .byte	$FF
10850 260F                        FF            .byte	$FF
10851 2610                        FF            .byte	$FF
10852                                           ! 1379  0x00, 0x00, 0x1e, 0x0e, 0x1a, 0x32, 0x78, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00, 0x00,
10853 2611                        00            .byte	0
10854 2612                        00            .byte	0
10855 2613                        1E            .byte	$1E
10856 2614                        0E            .byte	$E
10857 2615                        1A            .byte	$1A
10858 2616                        32            .byte	$32
10859 2617                        78            .byte	$78
10860 2618                        CC            .byte	$CC
10861 2619                        CC            .byte	$CC
10862 261A                        CC            .byte	$CC
10863 261B                        CC            .byte	$CC
10864 261C                        78            .byte	$78
10865 261D                        00            .byte	0
10866 261E                        00            .byte	0
10867 261F                        00            .byte	0
10868 2620                        00            .byte	0
10869                                           ! 1380  0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10870 2621                        00            .byte	0
10871 2622                        00            .byte	0
10872 2623                        3C            .byte	$3C
10873 2624                        66            .byte	$66
10874 2625                        66            .byte	$66
10875 2626                        66            .byte	$66
10876 2627                        66            .byte	$66
10877 2628                        3C            .byte	$3C
10878 2629                        18            .byte	$18
10879 262A                        7E            .byte	$7E
10880 262B                        18            .byte	$18
10881 262C                        18            .byte	$18
10882 262D                        00            .byte	0
10883 262E                        00            .byte	0
10884 262F                        00            .byte	0
10885 2630                        00            .byte	0
10886                                           ! 1381  
10887                                           ! 1381 0x00, 0x00, 0x3f, 0x33, 0x3f, 0x30, 0x30, 0x30, 0x30, 0x70, 0xf0, 0xe0, 0x00, 0x00, 0x00, 0x00,
10888 2631                        00            .byte	0
10889 2632                        00            .byte	0
10890 2633                        3F            .byte	$3F
10891 2634                        33            .byte	$33
10892 2635                        3F            .byte	$3F
10893 2636                        30            .byte	$30
10894 2637                        30            .byte	$30
10895 2638                        30            .byte	$30
10896 2639                        30            .byte	$30
10897 263A                        70            .byte	$70
10898 263B                        F0            .byte	$F0
10899 263C                        E0            .byte	$E0
10900 263D                        00            .byte	0
10901 263E                        00            .byte	0
10902 263F                        00            .byte	0
10903 2640                        00            .byte	0
10904                                           ! 1382  0x00, 0x00, 0x7f, 0x63, 0x7f, 0x63, 0x63, 0x63, 0x63, 0x67, 0xe7, 0xe6, 0xc0, 0x00, 0x00, 0x00,
10905 2641                        00            .byte	0
10906 2642                        00            .byte	0
10907 2643                        7F            .byte	$7F
10908 2644                        63            .byte	$63
10909 2645                        7F            .byte	$7F
10910 2646                        63            .byte	$63
10911 2647                        63            .byte	$63
10912 2648                        63            .byte	$63
10913 2649                        63            .byte	$63
10914 264A                        67            .byte	$67
10915 264B                        E7            .byte	$E7
10916 264C                        E6            .byte	$E6
10917 264D                        C0            .byte	$C0
10918 264E                        00            .byte	0
10919 264F                        00            .byte	0
10920 2650                        00            .byte	0
10921                                           ! 1383  0x00, 0x00, 0x00, 0x18, 0x18, 0xdb, 0x3c, 0xe7, 0x3c, 0xdb, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10922 2651                        00            .byte	0
10923 2652                        00            .byte	0
10924 2653                        00            .byte	0
10925 2654                        18            .byte	$18
10926 2655                        18            .byte	$18
10927 2656                        DB            .byte	$DB
10928 2657                        3C            .byte	$3C
10929 2658                        E7            .byte	$E7
10930 2659                        3C            .byte	$3C
10931 265A                        DB            .byte	$DB
10932 265B                        18            .byte	$18
10933 265C                        18            .byte	$18
10934 265D                        00            .byte	0
10935 265E                        00            .byte	0
10936 265F                        00            .byte	0
10937 2660                        00            .byte	0
10938                                           ! 1384  0x00, 0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfe, 0xf8, 0xf0, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
10939 2661                        00            .byte	0
10940 2662                        80            .byte	$80
10941 2663                        C0            .byte	$C0
10942 2664                        E0            .byte	$E0
10943 2665                        F0            .byte	$F0
10944 2666                        F8            .byte	$F8
10945 2667                        FE            .byte	$FE
10946 2668                        F8            .byte	$F8
10947 2669                        F0            .byte	$F0
10948 266A                        E0            .byte	$E0
10949 266B                        C0            .byte	$C0
10950 266C                        80            .byte	$80
10951 266D                        00            .byte	0
10952 266E                        00            .byte	0
10953 266F                        00            .byte	0
10954 2670                        00            .byte	0
10955                                           ! 1385  0x00, 0x02, 0x06, 0x0e, 0x1e, 0x3e, 0xfe, 0x3e, 0x1e, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00,
10956 2671                        00            .byte	0
10957 2672                        02            .byte	2
10958 2673                        06            .byte	6
10959 2674                        0E            .byte	$E
10960 2675                        1E            .byte	$1E
10961 2676                        3E            .byte	$3E
10962 2677                        FE            .byte	$FE
10963 2678                        3E            .byte	$3E
10964 2679                        1E            .byte	$1E
10965 267A                        0E            .byte	$E
10966 267B                        06            .byte	6
10967 267C                        02            .byte	2
10968 267D                        00            .byte	0
10969 267E                        00            .byte	0
10970 267F                        00            .byte	0
10971 2680                        00            .byte	0
10972                                           ! 1386  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
10973 2681                        00            .byte	0
10974 2682                        00            .byte	0
10975 2683                        18            .byte	$18
10976 2684                        3C            .byte	$3C
10977 2685                        7E            .byte	$7E
10978 2686                        18            .byte	$18
10979 2687                        18            .byte	$18
10980 2688                        18            .byte	$18
10981 2689                        7E            .byte	$7E
10982 268A                        3C            .byte	$3C
10983 268B                        18            .byte	$18
10984 268C                        00            .byte	0
10985 268D                        00            .byte	0
10986 268E                        00            .byte	0
10987 268F                        00            .byte	0
10988 2690                        00            .byte	0
10989                                           ! 1387  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
10990 2691                        00            .byte	0
10991 2692                        00            .byte	0
10992 2693                        66            .byte	$66
10993 2694                        66            .byte	$66
10994 2695                        66            .byte	$66
10995 2696                        66            .byte	$66
10996 2697                        66            .byte	$66
10997 2698                        66            .byte	$66
10998 2699                        66            .byte	$66
10999 269A                        00            .byte	0
11000 269B                        66            .byte	$66
11001 269C                        66            .byte	$66
11002 269D                        00            .byte	0
11003 269E                        00            .byte	0
11004 269F                        00            .byte	0
11005 26A0                        00            .byte	0
11006                                           ! 1388  0x00, 0x00, 0x7f, 0xdb, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x00, 0x00, 0x00, 0x00,
11007 26A1                        00            .byte	0
11008 26A2                        00            .byte	0
11009 26A3                        7F            .byte	$7F
11010 26A4                        DB            .byte	$DB
11011 26A5                        DB            .byte	$DB
11012 26A6                        DB            .byte	$DB
11013 26A7                        7B            .byte	$7B
11014 26A8                        1B            .byte	$1B
11015 26A9                        1B            .byte	$1B
11016 26AA                        1B            .byte	$1B
11017 26AB                        1B            .byte	$1B
11018 26AC                        1B            .byte	$1B
11019 26AD                        00            .byte	0
11020 26AE                        00            .byte	0
11021 26AF                        00            .byte	0
11022 26B0                        00            .byte	0
11023                                           ! 1389  0x00, 0x7c, 0xc6, 0x60, 0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x38, 0x0c, 0xc6, 0x7c, 0x00, 0x00, 0x00,
11024 26B1                        00            .byte	0
11025 26B2                        7C            .byte	$7C
11026 26B3                        C6            .byte	$C6
11027 26B4                        60            .byte	$60
11028 26B5                        38            .byte	$38
11029 26B6                        6C            .byte	$6C
11030 26B7                        C6            .byte	$C6
11031 26B8                        C6            .byte	$C6
11032 26B9                        6C            .byte	$6C
11033 26BA                        38            .byte	$38
11034 26BB                        0C            .byte	$C
11035 26BC                        C6            .byte	$C6
11036 26BD                        7C            .byte	$7C
11037 26BE                        00            .byte	0
11038 26BF                        00            .byte	0
11039 26C0                        00            .byte	0
11040                                           ! 1390  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00,
11041 26C1                        00            .byte	0
11042 26C2                        00            .byte	0
11043 26C3                        00            .byte	0
11044 26C4                        00            .byte	0
11045 26C5                        00            .byte	0
11046 26C6                        00            .byte	0
11047 26C7                        00            .byte	0
11048 26C8                        00            .byte	0
11049 26C9                        FE            .byte	$FE
11050 26CA                        FE            .byte	$FE
11051 26CB                        FE            .byte	$FE
11052 26CC                        FE            .byte	$FE
11053 26CD                        00            .byte	0
11054 26CE                        00            .byte	0
11055 26CF                        00            .byte	0
11056 26D0                        00            .byte	0
11057                                           ! 1391  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
11058 26D1                        00            .byte	0
11059 26D2                        00            .byte	0
11060 26D3                        18            .byte	$18
11061 26D4                        3C            .byte	$3C
11062 26D5                        7E            .byte	$7E
11063 26D6                        18            .byte	$18
11064 26D7                        18            .byte	$18
11065 26D8                        18            .byte	$18
11066 26D9                        7E            .byte	$7E
11067 26DA                        3C            .byte	$3C
11068 26DB                        18            .byte	$18
11069 26DC                        7E            .byte	$7E
11070 26DD                        00            .byte	0
11071 26DE                        00            .byte	0
11072 26DF                        00            .byte	0
11073 26E0                        00            .byte	0
11074                                           ! 1392  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11075 26E1                        00            .byte	0
11076 26E2                        00            .byte	0
11077 26E3                        18            .byte	$18
11078 26E4                        3C            .byte	$3C
11079 26E5                        7E            .byte	$7E
11080 26E6                        18            .byte	$18
11081 26E7                        18            .byte	$18
11082 26E8                        18            .byte	$18
11083 26E9                        18            .byte	$18
11084 26EA                        18            .byte	$18
11085 26EB                        18            .byte	$18
11086 26EC                        18            .byte	$18
11087 26ED                        00            .byte	0
11088 26EE                        00            .byte	0
11089 26EF                        00            .byte	0
11090 26F0                        00            .byte	0
11091                                           ! 1393  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
11092 26F1                        00            .byte	0
11093 26F2                        00            .byte	0
11094 26F3                        18            .byte	$18
11095 26F4                        18            .byte	$18
11096 26F5                        18            .byte	$18
11097 26F6                        18            .byte	$18
11098 26F7                        18            .byte	$18
11099 26F8                        18            .byte	$18
11100 26F9                        18            .byte	$18
11101 26FA                        7E            .byte	$7E
11102 26FB                        3C            .byte	$3C
11103 26FC                        18            .byte	$18
11104 26FD                        00            .byte	0
11105 26FE                        00            .byte	0
11106 26FF                        00            .byte	0
11107 2700                        00            .byte	0
11108                                           ! 1394  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11109 2701                        00            .byte	0
11110 2702                        00            .byte	0
11111 2703                        00            .byte	0
11112 2704                        00            .byte	0
11113 2705                        00            .byte	0
11114 2706                        18            .byte	$18
11115 2707                        0C            .byte	$C
11116 2708                        FE            .byte	$FE
11117 2709                        0C            .byte	$C
11118 270A                        18            .byte	$18
11119 270B                        00            .byte	0
11120 270C                        00            .byte	0
11121 270D                        00            .byte	0
11122 270E                        00            .byte	0
11123 270F                        00            .byte	0
11124 2710                        00            .byte	0
11125                                           ! 1395  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11126 2711                        00            .byte	0
11127 2712                        00            .byte	0
11128 2713                        00            .byte	0
11129 2714                        00            .byte	0
11130 2715                        00            .byte	0
11131 2716                        30            .byte	$30
11132 2717                        60            .byte	$60
11133 2718                        FE            .byte	$FE
11134 2719                        60            .byte	$60
11135 271A                        30            .byte	$30
11136 271B                        00            .byte	0
11137 271C                        00            .byte	0
11138 271D                        00            .byte	0
11139 271E                        00            .byte	0
11140 271F                        00            .byte	0
11141 2720                        00            .byte	0
11142                                           ! 1396  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11143 2721                        00            .byte	0
11144 2722                        00            .byte	0
11145 2723                        00            .byte	0
11146 2724                        00            .byte	0
11147 2725                        00            .byte	0
11148 2726                        00            .byte	0
11149 2727                        C0            .byte	$C0
11150 2728                        C0            .byte	$C0
11151 2729                        C0            .byte	$C0
11152 272A                        FE            .byte	$FE
11153 272B                        00            .byte	0
11154 272C                        00            .byte	0
11155 272D                        00            .byte	0
11156 272E                        00            .byte	0
11157 272F                        00            .byte	0
11158 2730                        00            .byte	0
11159                                           ! 1397  0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x66, 0xff, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11160 2731                        00            .byte	0
11161 2732                        00            .byte	0
11162 2733                        00            .byte	0
11163 2734                        00            .byte	0
11164 2735                        00            .byte	0
11165 2736                        24            .byte	$24
11166 2737                        66            .byte	$66
11167 2738                        FF            .byte	$FF
11168 2739                        66            .byte	$66
11169 273A                        24            .byte	$24
11170 273B                        00            .byte	0
11171 273C                        00            .byte	0
11172 273D                        00            .byte	0
11173 273E                        00            .byte	0
11174 273F                        00            .byte	0
11175 2740                        00            .byte	0
11176                                           ! 1398  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x38, 0x7c, 0x7c, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
11177 2741                        00            .byte	0
11178 2742                        00            .byte	0
11179 2743                        00            .byte	0
11180 2744                        00            .byte	0
11181 2745                        10            .byte	$10
11182 2746                        38            .byte	$38
11183 2747                        38            .byte	$38
11184 2748                        7C            .byte	$7C
11185 2749                        7C            .byte	$7C
11186 274A                        FE            .byte	$FE
11187 274B                        FE            .byte	$FE
11188 274C                        00            .byte	0
11189 274D                        00            .byte	0
11190 274E                        00            .byte	0
11191 274F                        00            .byte	0
11192 2750                        00            .byte	0
11193                                           ! 1399  0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0x7c, 0x7c, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
11194 2751                        00            .byte	0
11195 2752                        00            .byte	0
11196 2753                        00            .byte	0
11197 2754                        00            .byte	0
11198 2755                        FE            .byte	$FE
11199 2756                        FE            .byte	$FE
11200 2757                        7C            .byte	$7C
11201 2758                        7C            .byte	$7C
11202 2759                        38            .byte	$38
11203 275A                        38            .byte	$38
11204 275B                        10            .byte	$10
11205 275C                        00            .byte	0
11206 275D                        00            .byte	0
11207 275E                        00            .byte	0
11208 275F                        00            .byte	0
11209 2760                        00            .byte	0
11210                                           ! 1400  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11211 2761                        00            .byte	0
11212 2762                        00            .byte	0
11213 2763                        00            .byte	0
11214 2764                        00            .byte	0
11215 2765                        00            .byte	0
11216 2766                        00            .byte	0
11217 2767                        00            .byte	0
11218 2768                        00            .byte	0
11219 2769                        00            .byte	0
11220 276A                        00            .byte	0
11221 276B                        00            .byte	0
11222 276C                        00            .byte	0
11223 276D                        00            .byte	0
11224 276E                        00            .byte	0
11225 276F                        00            .byte	0
11226 2770                        00            .byte	0
11227                                           ! 1401  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11228 2771                        00            .byte	0
11229 2772                        00            .byte	0
11230 2773                        18            .byte	$18
11231 2774                        3C            .byte	$3C
11232 2775                        3C            .byte	$3C
11233 2776                        3C            .byte	$3C
11234 2777                        18            .byte	$18
11235 2778                        18            .byte	$18
11236 2779                        18            .byte	$18
11237 277A                        00            .byte	0
11238 277B                        18            .byte	$18
11239 277C                        18            .byte	$18
11240 277D                        00            .byte	0
11241 277E                        00            .byte	0
11242 277F                        00            .byte	0
11243 2780                        00            .byte	0
11244                                           ! 1402  0x00, 0x66,
11245 2781                        00            .byte	0
11246                                           ! 1402  0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11247 2782                        66            .byte	$66
11248 2783                        66            .byte	$66
11249 2784                        66            .byte	$66
11250 2785                        24            .byte	$24
11251 2786                        00            .byte	0
11252 2787                        00            .byte	0
11253 2788                        00            .byte	0
11254 2789                        00            .byte	0
11255 278A                        00            .byte	0
11256 278B                        00            .byte	0
11257 278C                        00            .byte	0
11258 278D                        00            .byte	0
11259 278E                        00            .byte	0
11260 278F                        00            .byte	0
11261 2790                        00            .byte	0
11262                                           ! 1403  0x00, 0x00, 0x00, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00,
11263 2791                        00            .byte	0
11264 2792                        00            .byte	0
11265 2793                        00            .byte	0
11266 2794                        6C            .byte	$6C
11267 2795                        6C            .byte	$6C
11268 2796                        FE            .byte	$FE
11269 2797                        6C            .byte	$6C
11270 2798                        6C            .byte	$6C
11271 2799                        6C            .byte	$6C
11272 279A                        FE            .byte	$FE
11273 279B                        6C            .byte	$6C
11274 279C                        6C            .byte	$6C
11275 279D                        00            .byte	0
11276 279E                        00            .byte	0
11277 279F                        00            .byte	0
11278 27A0                        00            .byte	0
11279                                           ! 1404  0x18, 0x18, 0x7c, 0xc6, 0xc2, 0xc0, 0x7c, 0x06, 0x06, 0x86, 0xc6, 0x7c, 0x18, 0x18, 0x00, 0x00,
11280 27A1                        18            .byte	$18
11281 27A2                        18            .byte	$18
11282 27A3                        7C            .byte	$7C
11283 27A4                        C6            .byte	$C6
11284 27A5                        C2            .byte	$C2
11285 27A6                        C0            .byte	$C0
11286 27A7                        7C            .byte	$7C
11287 27A8                        06            .byte	6
11288 27A9                        06            .byte	6
11289 27AA                        86            .byte	$86
11290 27AB                        C6            .byte	$C6
11291 27AC                        7C            .byte	$7C
11292 27AD                        18            .byte	$18
11293 27AE                        18            .byte	$18
11294 27AF                        00            .byte	0
11295 27B0                        00            .byte	0
11296                                           ! 1405  0x00, 0x00, 0x00, 0x00, 0xc2, 0xc6, 0x0c, 0x18, 0x30, 0x60, 0xc6, 0x86, 0x00, 0x00, 0x00, 0x00,
11297 27B1                        00            .byte	0
11298 27B2                        00            .byte	0
11299 27B3                        00            .byte	0
11300 27B4                        00            .byte	0
11301 27B5                        C2            .byte	$C2
11302 27B6                        C6            .byte	$C6
11303 27B7                        0C            .byte	$C
11304 27B8                        18            .byte	$18
11305 27B9                        30            .byte	$30
11306 27BA                        60            .byte	$60
11307 27BB                        C6            .byte	$C6
11308 27BC                        86            .byte	$86
11309 27BD                        00            .byte	0
11310 27BE                        00            .byte	0
11311 27BF                        00            .byte	0
11312 27C0                        00            .byte	0
11313                                           ! 1406  0x00, 0x00, 0x38, 0x6c, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
11314 27C1                        00            .byte	0
11315 27C2                        00            .byte	0
11316 27C3                        38            .byte	$38
11317 27C4                        6C            .byte	$6C
11318 27C5                        6C            .byte	$6C
11319 27C6                        38            .byte	$38
11320 27C7                        76            .byte	$76
11321 27C8                        DC            .byte	$DC
11322 27C9                        CC            .byte	$CC
11323 27CA                        CC            .byte	$CC
11324 27CB                        CC            .byte	$CC
11325 27CC                        76            .byte	$76
11326 27CD                        00            .byte	0
11327 27CE                        00            .byte	0
11328 27CF                        00            .byte	0
11329 27D0                        00            .byte	0
11330                                           ! 1407  0x00, 0x30, 0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11331 27D1                        00            .byte	0
11332 27D2                        30            .byte	$30
11333 27D3                        30            .byte	$30
11334 27D4                        30            .byte	$30
11335 27D5                        60            .byte	$60
11336 27D6                        00            .byte	0
11337 27D7                        00            .byte	0
11338 27D8                        00            .byte	0
11339 27D9                        00            .byte	0
11340 27DA                        00            .byte	0
11341 27DB                        00            .byte	0
11342 27DC                        00            .byte	0
11343 27DD                        00            .byte	0
11344 27DE                        00            .byte	0
11345 27DF                        00            .byte	0
11346 27E0                        00            .byte	0
11347                                           ! 1408  0x00, 0x00, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00, 0x00, 0x00, 0x00,
11348 27E1                        00            .byte	0
11349 27E2                        00            .byte	0
11350 27E3                        0C            .byte	$C
11351 27E4                        18            .byte	$18
11352 27E5                        30            .byte	$30
11353 27E6                        30            .byte	$30
11354 27E7                        30            .byte	$30
11355 27E8                        30            .byte	$30
11356 27E9                        30            .byte	$30
11357 27EA                        30            .byte	$30
11358 27EB                        18            .byte	$18
11359 27EC                        0C            .byte	$C
11360 27ED                        00            .byte	0
11361 27EE                        00            .byte	0
11362 27EF                        00            .byte	0
11363 27F0                        00            .byte	0
11364                                           ! 1409  0x00, 0x00, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00,
11365 27F1                        00            .byte	0
11366 27F2                        00            .byte	0
11367 27F3                        30            .byte	$30
11368 27F4                        18            .byte	$18
11369 27F5                        0C            .byte	$C
11370 27F6                        0C            .byte	$C
11371 27F7                        0C            .byte	$C
11372 27F8                        0C            .byte	$C
11373 27F9                        0C            .byte	$C
11374 27FA                        0C            .byte	$C
11375 27FB                        18            .byte	$18
11376 27FC                        30            .byte	$30
11377 27FD                        00            .byte	0
11378 27FE                        00            .byte	0
11379 27FF                        00            .byte	0
11380 2800                        00            .byte	0
11381                                           ! 1410  0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11382 2801                        00            .byte	0
11383 2802                        00            .byte	0
11384 2803                        00            .byte	0
11385 2804                        00            .byte	0
11386 2805                        00            .byte	0
11387 2806                        66            .byte	$66
11388 2807                        3C            .byte	$3C
11389 2808                        FF            .byte	$FF
11390 2809                        3C            .byte	$3C
11391 280A                        66            .byte	$66
11392 280B                        00            .byte	0
11393 280C                        00            .byte	0
11394 280D                        00            .byte	0
11395 280E                        00            .byte	0
11396 280F                        00            .byte	0
11397 2810                        00            .byte	0
11398                                           ! 1411  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11399 2811                        00            .byte	0
11400 2812                        00            .byte	0
11401 2813                        00            .byte	0
11402 2814                        00            .byte	0
11403 2815                        00            .byte	0
11404 2816                        18            .byte	$18
11405 2817                        18            .byte	$18
11406 2818                        7E            .byte	$7E
11407 2819                        18            .byte	$18
11408 281A                        18            .byte	$18
11409 281B                        00            .byte	0
11410 281C                        00            .byte	0
11411 281D                        00            .byte	0
11412 281E                        00            .byte	0
11413 281F                        00            .byte	0
11414 2820                        00            .byte	0
11415                                           ! 1412  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00,
11416 2821                        00            .byte	0
11417 2822                        00            .byte	0
11418 2823                        00            .byte	0
11419 2824                        00            .byte	0
11420 2825                        00            .byte	0
11421 2826                        00            .byte	0
11422 2827                        00            .byte	0
11423 2828                        00            .byte	0
11424 2829                        00            .byte	0
11425 282A                        18            .byte	$18
11426 282B                        18            .byte	$18
11427 282C                        18            .byte	$18
11428 282D                        30            .byte	$30
11429 282E                        00            .byte	0
11430 282F                        00            .byte	0
11431 2830                        00            .byte	0
11432                                           ! 1413  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11433 2831                        00            .byte	0
11434 2832                        00            .byte	0
11435 2833                        00            .byte	0
11436 2834                        00            .byte	0
11437 2835                        00            .byte	0
11438 2836                        00            .byte	0
11439 2837                        00            .byte	0
11440 2838                        FE            .byte	$FE
11441 2839                        00            .byte	0
11442 283A                        00            .byte	0
11443 283B                        00            .byte	0
11444 283C                        00            .byte	0
11445 283D                        00            .byte	0
11446 283E                        00            .byte	0
11447 283F                        00            .byte	0
11448 2840                        00            .byte	0
11449                                           ! 1414  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11450 2841                        00            .byte	0
11451 2842                        00            .byte	0
11452 2843                        00            .byte	0
11453 2844                        00            .byte	0
11454 2845                        00            .byte	0
11455 2846                        00            .byte	0
11456 2847                        00            .byte	0
11457 2848                        00            .byte	0
11458 2849                        00            .byte	0
11459 284A                        00            .byte	0
11460 284B                        18            .byte	$18
11461 284C                        18            .byte	$18
11462 284D                        00            .byte	0
11463 284E                        00            .byte	0
11464 284F                        00            .byte	0
11465 2850                        00            .byte	0
11466                                           ! 1415  0x00, 0x00, 0x00, 0x00, 0x02, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
11467 2851                        00            .byte	0
11468 2852                        00            .byte	0
11469 2853                        00            .byte	0
11470 2854                        00            .byte	0
11471 2855                        02            .byte	2
11472 2856                        06            .byte	6
11473 2857                        0C            .byte	$C
11474 2858                        18            .byte	$18
11475 2859                        30            .byte	$30
11476 285A                        60            .byte	$60
11477 285B                        C0            .byte	$C0
11478 285C                        80            .byte	$80
11479 285D                        00            .byte	0
11480 285E                        00            .byte	0
11481 285F                        00            .byte	0
11482 2860                        00            .byte	0
11483                                           ! 1416  0x00, 0x00, 0x3c, 0x66, 0xc3, 0xc3, 0xdb, 0xdb, 0xc3, 0xc3, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
11484 2861                        00            .byte	0
11485 2862                        00            .byte	0
11486 2863                        3C            .byte	$3C
11487 2864                        66            .byte	$66
11488 2865                        C3            .byte	$C3
11489 2866                        C3            .byte	$C3
11490 2867                        DB            .byte	$DB
11491 2868                        DB            .byte	$DB
11492 2869                        C3            .byte	$C3
11493 286A                        C3            .byte	$C3
11494 286B                        66            .byte	$66
11495 286C                        3C            .byte	$3C
11496 286D                        00            .byte	0
11497 286E                        00            .byte	0
11498 286F                        00            .byte	0
11499 2870                        00            .byte	0
11500                                           ! 1417  0x00, 0x00, 0x18, 0x38, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
11501 2871                        00            .byte	0
11502 2872                        00            .byte	0
11503 2873                        18            .byte	$18
11504 2874                        38            .byte	$38
11505 2875                        78            .byte	$78
11506 2876                        18            .byte	$18
11507 2877                        18            .byte	$18
11508 2878                        18            .byte	$18
11509 2879                        18            .byte	$18
11510 287A                        18            .byte	$18
11511 287B                        18            .byte	$18
11512 287C                        7E            .byte	$7E
11513 287D                        00            .byte	0
11514 287E                        00            .byte	0
11515 287F                        00            .byte	0
11516 2880                        00            .byte	0
11517                                           ! 1418  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
11518 2881                        00            .byte	0
11519 2882                        00            .byte	0
11520 2883                        7C            .byte	$7C
11521 2884                        C6            .byte	$C6
11522 2885                        06            .byte	6
11523 2886                        0C            .byte	$C
11524 2887                        18            .byte	$18
11525 2888                        30            .byte	$30
11526 2889                        60            .byte	$60
11527 288A                        C0            .byte	$C0
11528 288B                        C6            .byte	$C6
11529 288C                        FE            .byte	$FE
11530 288D                        00            .byte	0
11531 288E                        00            .byte	0
11532 288F                        00            .byte	0
11533 2890                        00            .byte	0
11534                                           ! 1419  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x06, 0x3c, 0x06, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11535 2891                        00            .byte	0
11536 2892                        00            .byte	0
11537 2893                        7C            .byte	$7C
11538 2894                        C6            .byte	$C6
11539 2895                        06            .byte	6
11540 2896                        06            .byte	6
11541 2897                        3C            .byte	$3C
11542 2898                        06            .byte	6
11543 2899                        06            .byte	6
11544 289A                        06            .byte	6
11545 289B                        C6            .byte	$C6
11546 289C                        7C            .byte	$7C
11547 289D                        00            .byte	0
11548 289E                        00            .byte	0
11549 289F                        00            .byte	0
11550 28A0                        00            .byte	0
11551                                           ! 1420  0x00, 0x00, 0x0c, 0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x0c, 0x0c, 0x1e, 0x00, 0x00, 0x00, 0x00,
11552 28A1                        00            .byte	0
11553 28A2                        00            .byte	0
11554 28A3                        0C            .byte	$C
11555 28A4                        1C            .byte	$1C
11556 28A5                        3C            .byte	$3C
11557 28A6                        6C            .byte	$6C
11558 28A7                        CC            .byte	$CC
11559 28A8                        FE            .byte	$FE
11560 28A9                        0C            .byte	$C
11561 28AA                        0C            .byte	$C
11562 28AB                        0C            .byte	$C
11563 28AC                        1E            .byte	$1E
11564 28AD                        00            .byte	0
11565 28AE                        00            .byte	0
11566 28AF                        00            .byte	0
11567 28B0                        00            .byte	0
11568                                           ! 1421  0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xfc, 0x06, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11569 28B1                        00            .byte	0
11570 28B2                        00            .byte	0
11571 28B3                        FE            .byte	$FE
11572 28B4                        C0            .byte	$C0
11573 28B5                        C0            .byte	$C0
11574 28B6                        C0            .byte	$C0
11575 28B7                        FC            .byte	$FC
11576 28B8                        06            .byte	6
11577 28B9                        06            .byte	6
11578 28BA                        06            .byte	6
11579 28BB                        C6            .byte	$C6
11580 28BC                        7C            .byte	$7C
11581 28BD                        00            .byte	0
11582 28BE                        00            .byte	0
11583 28BF                        00            .byte	0
11584 28C0                        00            .byte	0
11585                                           ! 1422  0x00, 0x00, 0x38, 0x60, 0xc0, 0xc0, 0xfc, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11586 28C1                        00            .byte	0
11587 28C2                        00            .byte	0
11588 28C3                        38            .byte	$38
11589 28C4                        60            .byte	$60
11590 28C5                        C0            .byte	$C0
11591 28C6                        C0            .byte	$C0
11592 28C7                        FC            .byte	$FC
11593 28C8                        C6            .byte	$C6
11594 28C9                        C6            .byte	$C6
11595 28CA                        C6            .byte	$C6
11596 28CB                        C6            .byte	$C6
11597 28CC                        7C            .byte	$7C
11598 28CD                        00            .byte	0
11599 28CE                        00            .byte	0
11600 28CF                        00            .byte	0
11601 28D0                        00            .byte	0
11602                                           ! 1423  0x00, 0x00, 0xfe, 0xc6
11603 28D1                        00            .byte	0
11604 28D2                        00            .byte	0
11605 28D3                        FE            .byte	$FE
11606                                           ! 1423 , 0x06, 0x06, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00,
11607 28D4                        C6            .byte	$C6
11608 28D5                        06            .byte	6
11609 28D6                        06            .byte	6
11610 28D7                        0C            .byte	$C
11611 28D8                        18            .byte	$18
11612 28D9                        30            .byte	$30
11613 28DA                        30            .byte	$30
11614 28DB                        30            .byte	$30
11615 28DC                        30            .byte	$30
11616 28DD                        00            .byte	0
11617 28DE                        00            .byte	0
11618 28DF                        00            .byte	0
11619 28E0                        00            .byte	0
11620                                           ! 1424  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11621 28E1                        00            .byte	0
11622 28E2                        00            .byte	0
11623 28E3                        7C            .byte	$7C
11624 28E4                        C6            .byte	$C6
11625 28E5                        C6            .byte	$C6
11626 28E6                        C6            .byte	$C6
11627 28E7                        7C            .byte	$7C
11628 28E8                        C6            .byte	$C6
11629 28E9                        C6            .byte	$C6
11630 28EA                        C6            .byte	$C6
11631 28EB                        C6            .byte	$C6
11632 28EC                        7C            .byte	$7C
11633 28ED                        00            .byte	0
11634 28EE                        00            .byte	0
11635 28EF                        00            .byte	0
11636 28F0                        00            .byte	0
11637                                           ! 1425  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x06, 0x06, 0x0c, 0x78, 0x00, 0x00, 0x00, 0x00,
11638 28F1                        00            .byte	0
11639 28F2                        00            .byte	0
11640 28F3                        7C            .byte	$7C
11641 28F4                        C6            .byte	$C6
11642 28F5                        C6            .byte	$C6
11643 28F6                        C6            .byte	$C6
11644 28F7                        7E            .byte	$7E
11645 28F8                        06            .byte	6
11646 28F9                        06            .byte	6
11647 28FA                        06            .byte	6
11648 28FB                        0C            .byte	$C
11649 28FC                        78            .byte	$78
11650 28FD                        00            .byte	0
11651 28FE                        00            .byte	0
11652 28FF                        00            .byte	0
11653 2900                        00            .byte	0
11654                                           ! 1426  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
11655 2901                        00            .byte	0
11656 2902                        00            .byte	0
11657 2903                        00            .byte	0
11658 2904                        00            .byte	0
11659 2905                        18            .byte	$18
11660 2906                        18            .byte	$18
11661 2907                        00            .byte	0
11662 2908                        00            .byte	0
11663 2909                        00            .byte	0
11664 290A                        18            .byte	$18
11665 290B                        18            .byte	$18
11666 290C                        00            .byte	0
11667 290D                        00            .byte	0
11668 290E                        00            .byte	0
11669 290F                        00            .byte	0
11670 2910                        00            .byte	0
11671                                           ! 1427  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00,
11672 2911                        00            .byte	0
11673 2912                        00            .byte	0
11674 2913                        00            .byte	0
11675 2914                        00            .byte	0
11676 2915                        18            .byte	$18
11677 2916                        18            .byte	$18
11678 2917                        00            .byte	0
11679 2918                        00            .byte	0
11680 2919                        00            .byte	0
11681 291A                        18            .byte	$18
11682 291B                        18            .byte	$18
11683 291C                        30            .byte	$30
11684 291D                        00            .byte	0
11685 291E                        00            .byte	0
11686 291F                        00            .byte	0
11687 2920                        00            .byte	0
11688                                           ! 1428  0x00, 0x00, 0x00, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x00, 0x00, 0x00, 0x00,
11689 2921                        00            .byte	0
11690 2922                        00            .byte	0
11691 2923                        00            .byte	0
11692 2924                        06            .byte	6
11693 2925                        0C            .byte	$C
11694 2926                        18            .byte	$18
11695 2927                        30            .byte	$30
11696 2928                        60            .byte	$60
11697 2929                        30            .byte	$30
11698 292A                        18            .byte	$18
11699 292B                        0C            .byte	$C
11700 292C                        06            .byte	6
11701 292D                        00            .byte	0
11702 292E                        00            .byte	0
11703 292F                        00            .byte	0
11704 2930                        00            .byte	0
11705                                           ! 1429  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11706 2931                        00            .byte	0
11707 2932                        00            .byte	0
11708 2933                        00            .byte	0
11709 2934                        00            .byte	0
11710 2935                        00            .byte	0
11711 2936                        7E            .byte	$7E
11712 2937                        00            .byte	0
11713 2938                        00            .byte	0
11714 2939                        7E            .byte	$7E
11715 293A                        00            .byte	0
11716 293B                        00            .byte	0
11717 293C                        00            .byte	0
11718 293D                        00            .byte	0
11719 293E                        00            .byte	0
11720 293F                        00            .byte	0
11721 2940                        00            .byte	0
11722                                           ! 1430  0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00,
11723 2941                        00            .byte	0
11724 2942                        00            .byte	0
11725 2943                        00            .byte	0
11726 2944                        60            .byte	$60
11727 2945                        30            .byte	$30
11728 2946                        18            .byte	$18
11729 2947                        0C            .byte	$C
11730 2948                        06            .byte	6
11731 2949                        0C            .byte	$C
11732 294A                        18            .byte	$18
11733 294B                        30            .byte	$30
11734 294C                        60            .byte	$60
11735 294D                        00            .byte	0
11736 294E                        00            .byte	0
11737 294F                        00            .byte	0
11738 2950                        00            .byte	0
11739                                           ! 1431  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x0c, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11740 2951                        00            .byte	0
11741 2952                        00            .byte	0
11742 2953                        7C            .byte	$7C
11743 2954                        C6            .byte	$C6
11744 2955                        C6            .byte	$C6
11745 2956                        0C            .byte	$C
11746 2957                        18            .byte	$18
11747 2958                        18            .byte	$18
11748 2959                        18            .byte	$18
11749 295A                        00            .byte	0
11750 295B                        18            .byte	$18
11751 295C                        18            .byte	$18
11752 295D                        00            .byte	0
11753 295E                        00            .byte	0
11754 295F                        00            .byte	0
11755 2960                        00            .byte	0
11756                                           ! 1432  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xde, 0xde, 0xde, 0xdc, 0xc0, 0x7c, 0x00, 0x00, 0x00, 0x00,
11757 2961                        00            .byte	0
11758 2962                        00            .byte	0
11759 2963                        00            .byte	0
11760 2964                        7C            .byte	$7C
11761 2965                        C6            .byte	$C6
11762 2966                        C6            .byte	$C6
11763 2967                        DE            .byte	$DE
11764 2968                        DE            .byte	$DE
11765 2969                        DE            .byte	$DE
11766 296A                        DC            .byte	$DC
11767 296B                        C0            .byte	$C0
11768 296C                        7C            .byte	$7C
11769 296D                        00            .byte	0
11770 296E                        00            .byte	0
11771 296F                        00            .byte	0
11772 2970                        00            .byte	0
11773                                           ! 1433  0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
11774 2971                        00            .byte	0
11775 2972                        00            .byte	0
11776 2973                        10            .byte	$10
11777 2974                        38            .byte	$38
11778 2975                        6C            .byte	$6C
11779 2976                        C6            .byte	$C6
11780 2977                        C6            .byte	$C6
11781 2978                        FE            .byte	$FE
11782 2979                        C6            .byte	$C6
11783 297A                        C6            .byte	$C6
11784 297B                        C6            .byte	$C6
11785 297C                        C6            .byte	$C6
11786 297D                        00            .byte	0
11787 297E                        00            .byte	0
11788 297F                        00            .byte	0
11789 2980                        00            .byte	0
11790                                           ! 1434  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x66, 0x66, 0x66, 0x66, 0xfc, 0x00, 0x00, 0x00, 0x00,
11791 2981                        00            .byte	0
11792 2982                        00            .byte	0
11793 2983                        FC            .byte	$FC
11794 2984                        66            .byte	$66
11795 2985                        66            .byte	$66
11796 2986                        66            .byte	$66
11797 2987                        7C            .byte	$7C
11798 2988                        66            .byte	$66
11799 2989                        66            .byte	$66
11800 298A                        66            .byte	$66
11801 298B                        66            .byte	$66
11802 298C                        FC            .byte	$FC
11803 298D                        00            .byte	0
11804 298E                        00            .byte	0
11805 298F                        00            .byte	0
11806 2990                        00            .byte	0
11807                                           ! 1435  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
11808 2991                        00            .byte	0
11809 2992                        00            .byte	0
11810 2993                        3C            .byte	$3C
11811 2994                        66            .byte	$66
11812 2995                        C2            .byte	$C2
11813 2996                        C0            .byte	$C0
11814 2997                        C0            .byte	$C0
11815 2998                        C0            .byte	$C0
11816 2999                        C0            .byte	$C0
11817 299A                        C2            .byte	$C2
11818 299B                        66            .byte	$66
11819 299C                        3C            .byte	$3C
11820 299D                        00            .byte	0
11821 299E                        00            .byte	0
11822 299F                        00            .byte	0
11823 29A0                        00            .byte	0
11824                                           ! 1436  0x00, 0x00, 0xf8, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00, 0x00, 0x00, 0x00,
11825 29A1                        00            .byte	0
11826 29A2                        00            .byte	0
11827 29A3                        F8            .byte	$F8
11828 29A4                        6C            .byte	$6C
11829 29A5                        66            .byte	$66
11830 29A6                        66            .byte	$66
11831 29A7                        66            .byte	$66
11832 29A8                        66            .byte	$66
11833 29A9                        66            .byte	$66
11834 29AA                        66            .byte	$66
11835 29AB                        6C            .byte	$6C
11836 29AC                        F8            .byte	$F8
11837 29AD                        00            .byte	0
11838 29AE                        00            .byte	0
11839 29AF                        00            .byte	0
11840 29B0                        00            .byte	0
11841                                           ! 1437  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
11842 29B1                        00            .byte	0
11843 29B2                        00            .byte	0
11844 29B3                        FE            .byte	$FE
11845 29B4                        66            .byte	$66
11846 29B5                        62            .byte	$62
11847 29B6                        68            .byte	$68
11848 29B7                        78            .byte	$78
11849 29B8                        68            .byte	$68
11850 29B9                        60            .byte	$60
11851 29BA                        62            .byte	$62
11852 29BB                        66            .byte	$66
11853 29BC                        FE            .byte	$FE
11854 29BD                        00            .byte	0
11855 29BE                        00            .byte	0
11856 29BF                        00            .byte	0
11857 29C0                        00            .byte	0
11858                                           ! 1438  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
11859 29C1                        00            .byte	0
11860 29C2                        00            .byte	0
11861 29C3                        FE            .byte	$FE
11862 29C4                        66            .byte	$66
11863 29C5                        62            .byte	$62
11864 29C6                        68            .byte	$68
11865 29C7                        78            .byte	$78
11866 29C8                        68            .byte	$68
11867 29C9                        60            .byte	$60
11868 29CA                        60            .byte	$60
11869 29CB                        60            .byte	$60
11870 29CC                        F0            .byte	$F0
11871 29CD                        00            .byte	0
11872 29CE                        00            .byte	0
11873 29CF                        00            .byte	0
11874 29D0                        00            .byte	0
11875                                           ! 1439  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xde, 0xc6, 0xc6, 0x66, 0x3a, 0x00, 0x00, 0x00, 0x00,
11876 29D1                        00            .byte	0
11877 29D2                        00            .byte	0
11878 29D3                        3C            .byte	$3C
11879 29D4                        66            .byte	$66
11880 29D5                        C2            .byte	$C2
11881 29D6                        C0            .byte	$C0
11882 29D7                        C0            .byte	$C0
11883 29D8                        DE            .byte	$DE
11884 29D9                        C6            .byte	$C6
11885 29DA                        C6            .byte	$C6
11886 29DB                        66            .byte	$66
11887 29DC                        3A            .byte	$3A
11888 29DD                        00            .byte	0
11889 29DE                        00            .byte	0
11890 29DF                        00            .byte	0
11891 29E0                        00            .byte	0
11892                                           ! 1440  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
11893 29E1                        00            .byte	0
11894 29E2                        00            .byte	0
11895 29E3                        C6            .byte	$C6
11896 29E4                        C6            .byte	$C6
11897 29E5                        C6            .byte	$C6
11898 29E6                        C6            .byte	$C6
11899 29E7                        FE            .byte	$FE
11900 29E8                        C6            .byte	$C6
11901 29E9                        C6            .byte	$C6
11902 29EA                        C6            .byte	$C6
11903 29EB                        C6            .byte	$C6
11904 29EC                        C6            .byte	$C6
11905 29ED                        00            .byte	0
11906 29EE                        00            .byte	0
11907 29EF                        00            .byte	0
11908 29F0                        00            .byte	0
11909                                           ! 1441  0x00, 0x00, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
11910 29F1                        00            .byte	0
11911 29F2                        00            .byte	0
11912 29F3                        3C            .byte	$3C
11913 29F4                        18            .byte	$18
11914 29F5                        18            .byte	$18
11915 29F6                        18            .byte	$18
11916 29F7                        18            .byte	$18
11917 29F8                        18            .byte	$18
11918 29F9                        18            .byte	$18
11919 29FA                        18            .byte	$18
11920 29FB                        18            .byte	$18
11921 29FC                        3C            .byte	$3C
11922 29FD                        00            .byte	0
11923 29FE                        00            .byte	0
11924 29FF                        00            .byte	0
11925 2A00                        00            .byte	0
11926                                           ! 1442  0x00, 0x00, 0x1e, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00, 0x00,
11927 2A01                        00            .byte	0
11928 2A02                        00            .byte	0
11929 2A03                        1E            .byte	$1E
11930 2A04                        0C            .byte	$C
11931 2A05                        0C            .byte	$C
11932 2A06                        0C            .byte	$C
11933 2A07                        0C            .byte	$C
11934 2A08                        0C            .byte	$C
11935 2A09                        CC            .byte	$CC
11936 2A0A                        CC            .byte	$CC
11937 2A0B                        CC            .byte	$CC
11938 2A0C                        78            .byte	$78
11939 2A0D                        00            .byte	0
11940 2A0E                        00            .byte	0
11941 2A0F                        00            .byte	0
11942 2A10                        00            .byte	0
11943                                           ! 1443  0x00, 0x00, 0xe6, 0x66, 0x66, 0x6c, 0x78, 0x78, 0x6c, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
11944 2A11                        00            .byte	0
11945 2A12                        00            .byte	0
11946 2A13                        E6            .byte	$E6
11947 2A14                        66            .byte	$66
11948 2A15                        66            .byte	$66
11949 2A16                        6C            .byte	$6C
11950 2A17                        78            .byte	$78
11951 2A18                        78            .byte	$78
11952 2A19                        6C            .byte	$6C
11953 2A1A                        66            .byte	$66
11954 2A1B                        66            .byte	$66
11955 2A1C                        E6            .byte	$E6
11956 2A1D                        00            .byte	0
11957 2A1E                        00            .byte	0
11958 2A1F                        00            .byte	0
11959 2A20                        00            .byte	0
11960                                           ! 1444  0x00, 0x00, 0xf0, 0x60, 0x60, 0x6
11961 2A21                        00            .byte	0
11962 2A22                        00            .byte	0
11963 2A23                        F0            .byte	$F0
11964 2A24                        60            .byte	$60
11965 2A25                        60            .byte	$60
11966                                           ! 1444 0, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
11967 2A26                        60            .byte	$60
11968 2A27                        60            .byte	$60
11969 2A28                        60            .byte	$60
11970 2A29                        60            .byte	$60
11971 2A2A                        62            .byte	$62
11972 2A2B                        66            .byte	$66
11973 2A2C                        FE            .byte	$FE
11974 2A2D                        00            .byte	0
11975 2A2E                        00            .byte	0
11976 2A2F                        00            .byte	0
11977 2A30                        00            .byte	0
11978                                           ! 1445  0x00, 0x00, 0xc3, 0xe7, 0xff, 0xff, 0xdb, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x00, 0x00, 0x00, 0x00,
11979 2A31                        00            .byte	0
11980 2A32                        00            .byte	0
11981 2A33                        C3            .byte	$C3
11982 2A34                        E7            .byte	$E7
11983 2A35                        FF            .byte	$FF
11984 2A36                        FF            .byte	$FF
11985 2A37                        DB            .byte	$DB
11986 2A38                        C3            .byte	$C3
11987 2A39                        C3            .byte	$C3
11988 2A3A                        C3            .byte	$C3
11989 2A3B                        C3            .byte	$C3
11990 2A3C                        C3            .byte	$C3
11991 2A3D                        00            .byte	0
11992 2A3E                        00            .byte	0
11993 2A3F                        00            .byte	0
11994 2A40                        00            .byte	0
11995                                           ! 1446  0x00, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
11996 2A41                        00            .byte	0
11997 2A42                        00            .byte	0
11998 2A43                        C6            .byte	$C6
11999 2A44                        E6            .byte	$E6
12000 2A45                        F6            .byte	$F6
12001 2A46                        FE            .byte	$FE
12002 2A47                        DE            .byte	$DE
12003 2A48                        CE            .byte	$CE
12004 2A49                        C6            .byte	$C6
12005 2A4A                        C6            .byte	$C6
12006 2A4B                        C6            .byte	$C6
12007 2A4C                        C6            .byte	$C6
12008 2A4D                        00            .byte	0
12009 2A4E                        00            .byte	0
12010 2A4F                        00            .byte	0
12011 2A50                        00            .byte	0
12012                                           ! 1447  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12013 2A51                        00            .byte	0
12014 2A52                        00            .byte	0
12015 2A53                        7C            .byte	$7C
12016 2A54                        C6            .byte	$C6
12017 2A55                        C6            .byte	$C6
12018 2A56                        C6            .byte	$C6
12019 2A57                        C6            .byte	$C6
12020 2A58                        C6            .byte	$C6
12021 2A59                        C6            .byte	$C6
12022 2A5A                        C6            .byte	$C6
12023 2A5B                        C6            .byte	$C6
12024 2A5C                        7C            .byte	$7C
12025 2A5D                        00            .byte	0
12026 2A5E                        00            .byte	0
12027 2A5F                        00            .byte	0
12028 2A60                        00            .byte	0
12029                                           ! 1448  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
12030 2A61                        00            .byte	0
12031 2A62                        00            .byte	0
12032 2A63                        FC            .byte	$FC
12033 2A64                        66            .byte	$66
12034 2A65                        66            .byte	$66
12035 2A66                        66            .byte	$66
12036 2A67                        7C            .byte	$7C
12037 2A68                        60            .byte	$60
12038 2A69                        60            .byte	$60
12039 2A6A                        60            .byte	$60
12040 2A6B                        60            .byte	$60
12041 2A6C                        F0            .byte	$F0
12042 2A6D                        00            .byte	0
12043 2A6E                        00            .byte	0
12044 2A6F                        00            .byte	0
12045 2A70                        00            .byte	0
12046                                           ! 1449  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xde, 0x7c, 0x0c, 0x0e, 0x00, 0x00,
12047 2A71                        00            .byte	0
12048 2A72                        00            .byte	0
12049 2A73                        7C            .byte	$7C
12050 2A74                        C6            .byte	$C6
12051 2A75                        C6            .byte	$C6
12052 2A76                        C6            .byte	$C6
12053 2A77                        C6            .byte	$C6
12054 2A78                        C6            .byte	$C6
12055 2A79                        C6            .byte	$C6
12056 2A7A                        D6            .byte	$D6
12057 2A7B                        DE            .byte	$DE
12058 2A7C                        7C            .byte	$7C
12059 2A7D                        0C            .byte	$C
12060 2A7E                        0E            .byte	$E
12061 2A7F                        00            .byte	0
12062 2A80                        00            .byte	0
12063                                           ! 1450  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
12064 2A81                        00            .byte	0
12065 2A82                        00            .byte	0
12066 2A83                        FC            .byte	$FC
12067 2A84                        66            .byte	$66
12068 2A85                        66            .byte	$66
12069 2A86                        66            .byte	$66
12070 2A87                        7C            .byte	$7C
12071 2A88                        6C            .byte	$6C
12072 2A89                        66            .byte	$66
12073 2A8A                        66            .byte	$66
12074 2A8B                        66            .byte	$66
12075 2A8C                        E6            .byte	$E6
12076 2A8D                        00            .byte	0
12077 2A8E                        00            .byte	0
12078 2A8F                        00            .byte	0
12079 2A90                        00            .byte	0
12080                                           ! 1451  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x60, 0x38, 0x0c, 0x06, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12081 2A91                        00            .byte	0
12082 2A92                        00            .byte	0
12083 2A93                        7C            .byte	$7C
12084 2A94                        C6            .byte	$C6
12085 2A95                        C6            .byte	$C6
12086 2A96                        60            .byte	$60
12087 2A97                        38            .byte	$38
12088 2A98                        0C            .byte	$C
12089 2A99                        06            .byte	6
12090 2A9A                        C6            .byte	$C6
12091 2A9B                        C6            .byte	$C6
12092 2A9C                        7C            .byte	$7C
12093 2A9D                        00            .byte	0
12094 2A9E                        00            .byte	0
12095 2A9F                        00            .byte	0
12096 2AA0                        00            .byte	0
12097                                           ! 1452  0x00, 0x00, 0xff, 0xdb, 0x99, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12098 2AA1                        00            .byte	0
12099 2AA2                        00            .byte	0
12100 2AA3                        FF            .byte	$FF
12101 2AA4                        DB            .byte	$DB
12102 2AA5                        99            .byte	$99
12103 2AA6                        18            .byte	$18
12104 2AA7                        18            .byte	$18
12105 2AA8                        18            .byte	$18
12106 2AA9                        18            .byte	$18
12107 2AAA                        18            .byte	$18
12108 2AAB                        18            .byte	$18
12109 2AAC                        3C            .byte	$3C
12110 2AAD                        00            .byte	0
12111 2AAE                        00            .byte	0
12112 2AAF                        00            .byte	0
12113 2AB0                        00            .byte	0
12114                                           ! 1453  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12115 2AB1                        00            .byte	0
12116 2AB2                        00            .byte	0
12117 2AB3                        C6            .byte	$C6
12118 2AB4                        C6            .byte	$C6
12119 2AB5                        C6            .byte	$C6
12120 2AB6                        C6            .byte	$C6
12121 2AB7                        C6            .byte	$C6
12122 2AB8                        C6            .byte	$C6
12123 2AB9                        C6            .byte	$C6
12124 2ABA                        C6            .byte	$C6
12125 2ABB                        C6            .byte	$C6
12126 2ABC                        7C            .byte	$7C
12127 2ABD                        00            .byte	0
12128 2ABE                        00            .byte	0
12129 2ABF                        00            .byte	0
12130 2AC0                        00            .byte	0
12131                                           ! 1454  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
12132 2AC1                        00            .byte	0
12133 2AC2                        00            .byte	0
12134 2AC3                        C3            .byte	$C3
12135 2AC4                        C3            .byte	$C3
12136 2AC5                        C3            .byte	$C3
12137 2AC6                        C3            .byte	$C3
12138 2AC7                        C3            .byte	$C3
12139 2AC8                        C3            .byte	$C3
12140 2AC9                        C3            .byte	$C3
12141 2ACA                        66            .byte	$66
12142 2ACB                        3C            .byte	$3C
12143 2ACC                        18            .byte	$18
12144 2ACD                        00            .byte	0
12145 2ACE                        00            .byte	0
12146 2ACF                        00            .byte	0
12147 2AD0                        00            .byte	0
12148                                           ! 1455  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xdb, 0xdb, 0xff, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
12149 2AD1                        00            .byte	0
12150 2AD2                        00            .byte	0
12151 2AD3                        C3            .byte	$C3
12152 2AD4                        C3            .byte	$C3
12153 2AD5                        C3            .byte	$C3
12154 2AD6                        C3            .byte	$C3
12155 2AD7                        C3            .byte	$C3
12156 2AD8                        DB            .byte	$DB
12157 2AD9                        DB            .byte	$DB
12158 2ADA                        FF            .byte	$FF
12159 2ADB                        66            .byte	$66
12160 2ADC                        66            .byte	$66
12161 2ADD                        00            .byte	0
12162 2ADE                        00            .byte	0
12163 2ADF                        00            .byte	0
12164 2AE0                        00            .byte	0
12165                                           ! 1456  0x00, 0x00, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x18, 0x3c, 0x66, 0xc3, 0xc3, 0x00, 0x00, 0x00, 0x00,
12166 2AE1                        00            .byte	0
12167 2AE2                        00            .byte	0
12168 2AE3                        C3            .byte	$C3
12169 2AE4                        C3            .byte	$C3
12170 2AE5                        66            .byte	$66
12171 2AE6                        3C            .byte	$3C
12172 2AE7                        18            .byte	$18
12173 2AE8                        18            .byte	$18
12174 2AE9                        3C            .byte	$3C
12175 2AEA                        66            .byte	$66
12176 2AEB                        C3            .byte	$C3
12177 2AEC                        C3            .byte	$C3
12178 2AED                        00            .byte	0
12179 2AEE                        00            .byte	0
12180 2AEF                        00            .byte	0
12181 2AF0                        00            .byte	0
12182                                           ! 1457  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12183 2AF1                        00            .byte	0
12184 2AF2                        00            .byte	0
12185 2AF3                        C3            .byte	$C3
12186 2AF4                        C3            .byte	$C3
12187 2AF5                        C3            .byte	$C3
12188 2AF6                        66            .byte	$66
12189 2AF7                        3C            .byte	$3C
12190 2AF8                        18            .byte	$18
12191 2AF9                        18            .byte	$18
12192 2AFA                        18            .byte	$18
12193 2AFB                        18            .byte	$18
12194 2AFC                        3C            .byte	$3C
12195 2AFD                        00            .byte	0
12196 2AFE                        00            .byte	0
12197 2AFF                        00            .byte	0
12198 2B00                        00            .byte	0
12199                                           ! 1458  0x00, 0x00, 0xff, 0xc3, 0x86, 0x0c, 0x18, 0x30, 0x60, 0xc1, 0xc3, 0xff, 0x00, 0x00, 0x00, 0x00,
12200 2B01                        00            .byte	0
12201 2B02                        00            .byte	0
12202 2B03                        FF            .byte	$FF
12203 2B04                        C3            .byte	$C3
12204 2B05                        86            .byte	$86
12205 2B06                        0C            .byte	$C
12206 2B07                        18            .byte	$18
12207 2B08                        30            .byte	$30
12208 2B09                        60            .byte	$60
12209 2B0A                        C1            .byte	$C1
12210 2B0B                        C3            .byte	$C3
12211 2B0C                        FF            .byte	$FF
12212 2B0D                        00            .byte	0
12213 2B0E                        00            .byte	0
12214 2B0F                        00            .byte	0
12215 2B10                        00            .byte	0
12216                                           ! 1459  0x00, 0x00, 0x3c, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3c, 0x00, 0x00, 0x00, 0x00,
12217 2B11                        00            .byte	0
12218 2B12                        00            .byte	0
12219 2B13                        3C            .byte	$3C
12220 2B14                        30            .byte	$30
12221 2B15                        30            .byte	$30
12222 2B16                        30            .byte	$30
12223 2B17                        30            .byte	$30
12224 2B18                        30            .byte	$30
12225 2B19                        30            .byte	$30
12226 2B1A                        30            .byte	$30
12227 2B1B                        30            .byte	$30
12228 2B1C                        3C            .byte	$3C
12229 2B1D                        00            .byte	0
12230 2B1E                        00            .byte	0
12231 2B1F                        00            .byte	0
12232 2B20                        00            .byte	0
12233                                           ! 1460  0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00,
12234 2B21                        00            .byte	0
12235 2B22                        00            .byte	0
12236 2B23                        00            .byte	0
12237 2B24                        80            .byte	$80
12238 2B25                        C0            .byte	$C0
12239 2B26                        E0            .byte	$E0
12240 2B27                        70            .byte	$70
12241 2B28                        38            .byte	$38
12242 2B29                        1C            .byte	$1C
12243 2B2A                        0E            .byte	$E
12244 2B2B                        06            .byte	6
12245 2B2C                        02            .byte	2
12246 2B2D                        00            .byte	0
12247 2B2E                        00            .byte	0
12248 2B2F                        00            .byte	0
12249 2B30                        00            .byte	0
12250                                           ! 1461  0x00, 0x00, 0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00, 0x00, 0x00, 0x00,
12251 2B31                        00            .byte	0
12252 2B32                        00            .byte	0
12253 2B33                        3C            .byte	$3C
12254 2B34                        0C            .byte	$C
12255 2B35                        0C            .byte	$C
12256 2B36                        0C            .byte	$C
12257 2B37                        0C            .byte	$C
12258 2B38                        0C            .byte	$C
12259 2B39                        0C            .byte	$C
12260 2B3A                        0C            .byte	$C
12261 2B3B                        0C            .byte	$C
12262 2B3C                        3C            .byte	$3C
12263 2B3D                        00            .byte	0
12264 2B3E                        00            .byte	0
12265 2B3F                        00            .byte	0
12266 2B40                        00            .byte	0
12267                                           ! 1462  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
12268 2B41                        10            .byte	$10
12269 2B42                        38            .byte	$38
12270 2B43                        6C            .byte	$6C
12271 2B44                        C6            .byte	$C6
12272 2B45                        00            .byte	0
12273 2B46                        00            .byte	0
12274 2B47                        00            .byte	0
12275 2B48                        00            .byte	0
12276 2B49                        00            .byte	0
12277 2B4A                        00            .byte	0
12278 2B4B                        00            .byte	0
12279 2B4C                        00            .byte	0
12280 2B4D                        00            .byte	0
12281 2B4E                        00            .byte	0
12282 2B4F                        00            .byte	0
12283 2B50                        00            .byte	0
12284                                           ! 1463  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00,
12285 2B51                        00            .byte	0
12286 2B52                        00            .byte	0
12287 2B53                        00            .byte	0
12288 2B54                        00            .byte	0
12289 2B55                        00            .byte	0
12290 2B56                        00            .byte	0
12291 2B57                        00            .byte	0
12292 2B58                        00            .byte	0
12293 2B59                        00            .byte	0
12294 2B5A                        00            .byte	0
12295 2B5B                        00            .byte	0
12296 2B5C                        00            .byte	0
12297 2B5D                        00            .byte	0
12298 2B5E                        FF            .byte	$FF
12299 2B5F                        00            .byte	0
12300 2B60                        00            .byte	0
12301                                           ! 1464  0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
12302 2B61                        30            .byte	$30
12303 2B62                        30            .byte	$30
12304 2B63                        18            .byte	$18
12305 2B64                        00            .byte	0
12306 2B65                        00            .byte	0
12307 2B66                        00            .byte	0
12308 2B67                        00            .byte	0
12309 2B68                        00            .byte	0
12310 2B69                        00            .byte	0
12311 2B6A                        00            .byte	0
12312 2B6B                        00            .byte	0
12313 2B6C                        00            .byte	0
12314 2B6D                        00            .byte	0
12315 2B6E                        00            .byte	0
12316 2B6F                        00            .byte	0
12317 2B70                        00            .byte	0
12318                                           ! 1465  0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x0c, 0x
12319 2B71                        00            .byte	0
12320 2B72                        00            .byte	0
12321 2B73                        00            .byte	0
12322 2B74                        00            .byte	0
12323 2B75                        00            .byte	0
12324 2B76                        78            .byte	$78
12325 2B77                        0C            .byte	$C
12326                                           ! 1465 7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12327 2B78                        7C            .byte	$7C
12328 2B79                        CC            .byte	$CC
12329 2B7A                        CC            .byte	$CC
12330 2B7B                        CC            .byte	$CC
12331 2B7C                        76            .byte	$76
12332 2B7D                        00            .byte	0
12333 2B7E                        00            .byte	0
12334 2B7F                        00            .byte	0
12335 2B80                        00            .byte	0
12336                                           ! 1466  0x00, 0x00, 0xe0, 0x60, 0x60, 0x78, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x00, 0x00, 0x00, 0x00,
12337 2B81                        00            .byte	0
12338 2B82                        00            .byte	0
12339 2B83                        E0            .byte	$E0
12340 2B84                        60            .byte	$60
12341 2B85                        60            .byte	$60
12342 2B86                        78            .byte	$78
12343 2B87                        6C            .byte	$6C
12344 2B88                        66            .byte	$66
12345 2B89                        66            .byte	$66
12346 2B8A                        66            .byte	$66
12347 2B8B                        66            .byte	$66
12348 2B8C                        7C            .byte	$7C
12349 2B8D                        00            .byte	0
12350 2B8E                        00            .byte	0
12351 2B8F                        00            .byte	0
12352 2B90                        00            .byte	0
12353                                           ! 1467  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12354 2B91                        00            .byte	0
12355 2B92                        00            .byte	0
12356 2B93                        00            .byte	0
12357 2B94                        00            .byte	0
12358 2B95                        00            .byte	0
12359 2B96                        7C            .byte	$7C
12360 2B97                        C6            .byte	$C6
12361 2B98                        C0            .byte	$C0
12362 2B99                        C0            .byte	$C0
12363 2B9A                        C0            .byte	$C0
12364 2B9B                        C6            .byte	$C6
12365 2B9C                        7C            .byte	$7C
12366 2B9D                        00            .byte	0
12367 2B9E                        00            .byte	0
12368 2B9F                        00            .byte	0
12369 2BA0                        00            .byte	0
12370                                           ! 1468  0x00, 0x00, 0x1c, 0x0c, 0x0c, 0x3c, 0x6c, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12371 2BA1                        00            .byte	0
12372 2BA2                        00            .byte	0
12373 2BA3                        1C            .byte	$1C
12374 2BA4                        0C            .byte	$C
12375 2BA5                        0C            .byte	$C
12376 2BA6                        3C            .byte	$3C
12377 2BA7                        6C            .byte	$6C
12378 2BA8                        CC            .byte	$CC
12379 2BA9                        CC            .byte	$CC
12380 2BAA                        CC            .byte	$CC
12381 2BAB                        CC            .byte	$CC
12382 2BAC                        76            .byte	$76
12383 2BAD                        00            .byte	0
12384 2BAE                        00            .byte	0
12385 2BAF                        00            .byte	0
12386 2BB0                        00            .byte	0
12387                                           ! 1469  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12388 2BB1                        00            .byte	0
12389 2BB2                        00            .byte	0
12390 2BB3                        00            .byte	0
12391 2BB4                        00            .byte	0
12392 2BB5                        00            .byte	0
12393 2BB6                        7C            .byte	$7C
12394 2BB7                        C6            .byte	$C6
12395 2BB8                        FE            .byte	$FE
12396 2BB9                        C0            .byte	$C0
12397 2BBA                        C0            .byte	$C0
12398 2BBB                        C6            .byte	$C6
12399 2BBC                        7C            .byte	$7C
12400 2BBD                        00            .byte	0
12401 2BBE                        00            .byte	0
12402 2BBF                        00            .byte	0
12403 2BC0                        00            .byte	0
12404                                           ! 1470  0x00, 0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
12405 2BC1                        00            .byte	0
12406 2BC2                        00            .byte	0
12407 2BC3                        38            .byte	$38
12408 2BC4                        6C            .byte	$6C
12409 2BC5                        64            .byte	$64
12410 2BC6                        60            .byte	$60
12411 2BC7                        F0            .byte	$F0
12412 2BC8                        60            .byte	$60
12413 2BC9                        60            .byte	$60
12414 2BCA                        60            .byte	$60
12415 2BCB                        60            .byte	$60
12416 2BCC                        F0            .byte	$F0
12417 2BCD                        00            .byte	0
12418 2BCE                        00            .byte	0
12419 2BCF                        00            .byte	0
12420 2BD0                        00            .byte	0
12421                                           ! 1471  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xcc, 0x78, 0x00,
12422 2BD1                        00            .byte	0
12423 2BD2                        00            .byte	0
12424 2BD3                        00            .byte	0
12425 2BD4                        00            .byte	0
12426 2BD5                        00            .byte	0
12427 2BD6                        76            .byte	$76
12428 2BD7                        CC            .byte	$CC
12429 2BD8                        CC            .byte	$CC
12430 2BD9                        CC            .byte	$CC
12431 2BDA                        CC            .byte	$CC
12432 2BDB                        CC            .byte	$CC
12433 2BDC                        7C            .byte	$7C
12434 2BDD                        0C            .byte	$C
12435 2BDE                        CC            .byte	$CC
12436 2BDF                        78            .byte	$78
12437 2BE0                        00            .byte	0
12438                                           ! 1472  0x00, 0x00, 0xe0, 0x60, 0x60, 0x6c, 0x76, 0x66, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
12439 2BE1                        00            .byte	0
12440 2BE2                        00            .byte	0
12441 2BE3                        E0            .byte	$E0
12442 2BE4                        60            .byte	$60
12443 2BE5                        60            .byte	$60
12444 2BE6                        6C            .byte	$6C
12445 2BE7                        76            .byte	$76
12446 2BE8                        66            .byte	$66
12447 2BE9                        66            .byte	$66
12448 2BEA                        66            .byte	$66
12449 2BEB                        66            .byte	$66
12450 2BEC                        E6            .byte	$E6
12451 2BED                        00            .byte	0
12452 2BEE                        00            .byte	0
12453 2BEF                        00            .byte	0
12454 2BF0                        00            .byte	0
12455                                           ! 1473  0x00, 0x00, 0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12456 2BF1                        00            .byte	0
12457 2BF2                        00            .byte	0
12458 2BF3                        18            .byte	$18
12459 2BF4                        18            .byte	$18
12460 2BF5                        00            .byte	0
12461 2BF6                        38            .byte	$38
12462 2BF7                        18            .byte	$18
12463 2BF8                        18            .byte	$18
12464 2BF9                        18            .byte	$18
12465 2BFA                        18            .byte	$18
12466 2BFB                        18            .byte	$18
12467 2BFC                        3C            .byte	$3C
12468 2BFD                        00            .byte	0
12469 2BFE                        00            .byte	0
12470 2BFF                        00            .byte	0
12471 2C00                        00            .byte	0
12472                                           ! 1474  0x00, 0x00, 0x06, 0x06, 0x00, 0x0e, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3c, 0x00,
12473 2C01                        00            .byte	0
12474 2C02                        00            .byte	0
12475 2C03                        06            .byte	6
12476 2C04                        06            .byte	6
12477 2C05                        00            .byte	0
12478 2C06                        0E            .byte	$E
12479 2C07                        06            .byte	6
12480 2C08                        06            .byte	6
12481 2C09                        06            .byte	6
12482 2C0A                        06            .byte	6
12483 2C0B                        06            .byte	6
12484 2C0C                        06            .byte	6
12485 2C0D                        66            .byte	$66
12486 2C0E                        66            .byte	$66
12487 2C0F                        3C            .byte	$3C
12488 2C10                        00            .byte	0
12489                                           ! 1475  0x00, 0x00, 0xe0, 0x60, 0x60, 0x66, 0x6c, 0x78, 0x78, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
12490 2C11                        00            .byte	0
12491 2C12                        00            .byte	0
12492 2C13                        E0            .byte	$E0
12493 2C14                        60            .byte	$60
12494 2C15                        60            .byte	$60
12495 2C16                        66            .byte	$66
12496 2C17                        6C            .byte	$6C
12497 2C18                        78            .byte	$78
12498 2C19                        78            .byte	$78
12499 2C1A                        6C            .byte	$6C
12500 2C1B                        66            .byte	$66
12501 2C1C                        E6            .byte	$E6
12502 2C1D                        00            .byte	0
12503 2C1E                        00            .byte	0
12504 2C1F                        00            .byte	0
12505 2C20                        00            .byte	0
12506                                           ! 1476  0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12507 2C21                        00            .byte	0
12508 2C22                        00            .byte	0
12509 2C23                        38            .byte	$38
12510 2C24                        18            .byte	$18
12511 2C25                        18            .byte	$18
12512 2C26                        18            .byte	$18
12513 2C27                        18            .byte	$18
12514 2C28                        18            .byte	$18
12515 2C29                        18            .byte	$18
12516 2C2A                        18            .byte	$18
12517 2C2B                        18            .byte	$18
12518 2C2C                        3C            .byte	$3C
12519 2C2D                        00            .byte	0
12520 2C2E                        00            .byte	0
12521 2C2F                        00            .byte	0
12522 2C30                        00            .byte	0
12523                                           ! 1477  0x00, 0x00, 0x00, 0x00, 0x00, 0xe6, 0xff, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0x00, 0x00, 0x00, 0x00,
12524 2C31                        00            .byte	0
12525 2C32                        00            .byte	0
12526 2C33                        00            .byte	0
12527 2C34                        00            .byte	0
12528 2C35                        00            .byte	0
12529 2C36                        E6            .byte	$E6
12530 2C37                        FF            .byte	$FF
12531 2C38                        DB            .byte	$DB
12532 2C39                        DB            .byte	$DB
12533 2C3A                        DB            .byte	$DB
12534 2C3B                        DB            .byte	$DB
12535 2C3C                        DB            .byte	$DB
12536 2C3D                        00            .byte	0
12537 2C3E                        00            .byte	0
12538 2C3F                        00            .byte	0
12539 2C40                        00            .byte	0
12540                                           ! 1478  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
12541 2C41                        00            .byte	0
12542 2C42                        00            .byte	0
12543 2C43                        00            .byte	0
12544 2C44                        00            .byte	0
12545 2C45                        00            .byte	0
12546 2C46                        DC            .byte	$DC
12547 2C47                        66            .byte	$66
12548 2C48                        66            .byte	$66
12549 2C49                        66            .byte	$66
12550 2C4A                        66            .byte	$66
12551 2C4B                        66            .byte	$66
12552 2C4C                        66            .byte	$66
12553 2C4D                        00            .byte	0
12554 2C4E                        00            .byte	0
12555 2C4F                        00            .byte	0
12556 2C50                        00            .byte	0
12557                                           ! 1479  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12558 2C51                        00            .byte	0
12559 2C52                        00            .byte	0
12560 2C53                        00            .byte	0
12561 2C54                        00            .byte	0
12562 2C55                        00            .byte	0
12563 2C56                        7C            .byte	$7C
12564 2C57                        C6            .byte	$C6
12565 2C58                        C6            .byte	$C6
12566 2C59                        C6            .byte	$C6
12567 2C5A                        C6            .byte	$C6
12568 2C5B                        C6            .byte	$C6
12569 2C5C                        7C            .byte	$7C
12570 2C5D                        00            .byte	0
12571 2C5E                        00            .byte	0
12572 2C5F                        00            .byte	0
12573 2C60                        00            .byte	0
12574                                           ! 1480  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
12575 2C61                        00            .byte	0
12576 2C62                        00            .byte	0
12577 2C63                        00            .byte	0
12578 2C64                        00            .byte	0
12579 2C65                        00            .byte	0
12580 2C66                        DC            .byte	$DC
12581 2C67                        66            .byte	$66
12582 2C68                        66            .byte	$66
12583 2C69                        66            .byte	$66
12584 2C6A                        66            .byte	$66
12585 2C6B                        66            .byte	$66
12586 2C6C                        7C            .byte	$7C
12587 2C6D                        60            .byte	$60
12588 2C6E                        60            .byte	$60
12589 2C6F                        F0            .byte	$F0
12590 2C70                        00            .byte	0
12591                                           ! 1481  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0x0c, 0x1e, 0x00,
12592 2C71                        00            .byte	0
12593 2C72                        00            .byte	0
12594 2C73                        00            .byte	0
12595 2C74                        00            .byte	0
12596 2C75                        00            .byte	0
12597 2C76                        76            .byte	$76
12598 2C77                        CC            .byte	$CC
12599 2C78                        CC            .byte	$CC
12600 2C79                        CC            .byte	$CC
12601 2C7A                        CC            .byte	$CC
12602 2C7B                        CC            .byte	$CC
12603 2C7C                        7C            .byte	$7C
12604 2C7D                        0C            .byte	$C
12605 2C7E                        0C            .byte	$C
12606 2C7F                        1E            .byte	$1E
12607 2C80                        00            .byte	0
12608                                           ! 1482  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
12609 2C81                        00            .byte	0
12610 2C82                        00            .byte	0
12611 2C83                        00            .byte	0
12612 2C84                        00            .byte	0
12613 2C85                        00            .byte	0
12614 2C86                        DC            .byte	$DC
12615 2C87                        76            .byte	$76
12616 2C88                        66            .byte	$66
12617 2C89                        60            .byte	$60
12618 2C8A                        60            .byte	$60
12619 2C8B                        60            .byte	$60
12620 2C8C                        F0            .byte	$F0
12621 2C8D                        00            .byte	0
12622 2C8E                        00            .byte	0
12623 2C8F                        00            .byte	0
12624 2C90                        00            .byte	0
12625                                           ! 1483  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0x60, 0x38, 0x0c, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12626 2C91                        00            .byte	0
12627 2C92                        00            .byte	0
12628 2C93                        00            .byte	0
12629 2C94                        00            .byte	0
12630 2C95                        00            .byte	0
12631 2C96                        7C            .byte	$7C
12632 2C97                        C6            .byte	$C6
12633 2C98                        60            .byte	$60
12634 2C99                        38            .byte	$38
12635 2C9A                        0C            .byte	$C
12636 2C9B                        C6            .byte	$C6
12637 2C9C                        7C            .byte	$7C
12638 2C9D                        00            .byte	0
12639 2C9E                        00            .byte	0
12640 2C9F                        00            .byte	0
12641 2CA0                        00            .byte	0
12642                                           ! 1484  0x00, 0x00, 0x10, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x30, 0x30, 0x36, 0x1c, 0x00, 0x00, 0x00, 0x00,
12643 2CA1                        00            .byte	0
12644 2CA2                        00            .byte	0
12645 2CA3                        10            .byte	$10
12646 2CA4                        30            .byte	$30
12647 2CA5                        30            .byte	$30
12648 2CA6                        FC            .byte	$FC
12649 2CA7                        30            .byte	$30
12650 2CA8                        30            .byte	$30
12651 2CA9                        30            .byte	$30
12652 2CAA                        30            .byte	$30
12653 2CAB                        36            .byte	$36
12654 2CAC                        1C            .byte	$1C
12655 2CAD                        00            .byte	0
12656 2CAE                        00            .byte	0
12657 2CAF                        00            .byte	0
12658 2CB0                        00            .byte	0
12659                                           ! 1485  0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12660 2CB1                        00            .byte	0
12661 2CB2                        00            .byte	0
12662 2CB3                        00            .byte	0
12663 2CB4                        00            .byte	0
12664 2CB5                        00            .byte	0
12665 2CB6                        CC            .byte	$CC
12666 2CB7                        CC            .byte	$CC
12667 2CB8                        CC            .byte	$CC
12668 2CB9                        CC            .byte	$CC
12669 2CBA                        CC            .byte	$CC
12670 2CBB                        CC            .byte	$CC
12671 2CBC                        76            .byte	$76
12672 2CBD                        00            .byte	0
12673 2CBE                        00            .byte	0
12674 2CBF                        00            .byte	0
12675 2CC0                        00            .byte	0
12676                                           ! 1486  0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0
12677 2CC1                        00            .byte	0
12678 2CC2                        00            .byte	0
12679 2CC3                        00            .byte	0
12680 2CC4                        00            .byte	0
12681 2CC5                        00            .byte	0
12682 2CC6                        C3            .byte	$C3
12683 2CC7                        C3            .byte	$C3
12684 2CC8                        C3            .byte	$C3
12685 2CC9                        C3            .byte	$C3
12686                                           ! 1486 x66, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
12687 2CCA                        66            .byte	$66
12688 2CCB                        3C            .byte	$3C
12689 2CCC                        18            .byte	$18
12690 2CCD                        00            .byte	0
12691 2CCE                        00            .byte	0
12692 2CCF                        00            .byte	0
12693 2CD0                        00            .byte	0
12694                                           ! 1487  0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xdb, 0xdb, 0xff, 0x66, 0x00, 0x00, 0x00, 0x00,
12695 2CD1                        00            .byte	0
12696 2CD2                        00            .byte	0
12697 2CD3                        00            .byte	0
12698 2CD4                        00            .byte	0
12699 2CD5                        00            .byte	0
12700 2CD6                        C3            .byte	$C3
12701 2CD7                        C3            .byte	$C3
12702 2CD8                        C3            .byte	$C3
12703 2CD9                        DB            .byte	$DB
12704 2CDA                        DB            .byte	$DB
12705 2CDB                        FF            .byte	$FF
12706 2CDC                        66            .byte	$66
12707 2CDD                        00            .byte	0
12708 2CDE                        00            .byte	0
12709 2CDF                        00            .byte	0
12710 2CE0                        00            .byte	0
12711                                           ! 1488  0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0x66, 0x3c, 0x18, 0x3c, 0x66, 0xc3, 0x00, 0x00, 0x00, 0x00,
12712 2CE1                        00            .byte	0
12713 2CE2                        00            .byte	0
12714 2CE3                        00            .byte	0
12715 2CE4                        00            .byte	0
12716 2CE5                        00            .byte	0
12717 2CE6                        C3            .byte	$C3
12718 2CE7                        66            .byte	$66
12719 2CE8                        3C            .byte	$3C
12720 2CE9                        18            .byte	$18
12721 2CEA                        3C            .byte	$3C
12722 2CEB                        66            .byte	$66
12723 2CEC                        C3            .byte	$C3
12724 2CED                        00            .byte	0
12725 2CEE                        00            .byte	0
12726 2CEF                        00            .byte	0
12727 2CF0                        00            .byte	0
12728                                           ! 1489  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0xf8, 0x00,
12729 2CF1                        00            .byte	0
12730 2CF2                        00            .byte	0
12731 2CF3                        00            .byte	0
12732 2CF4                        00            .byte	0
12733 2CF5                        00            .byte	0
12734 2CF6                        C6            .byte	$C6
12735 2CF7                        C6            .byte	$C6
12736 2CF8                        C6            .byte	$C6
12737 2CF9                        C6            .byte	$C6
12738 2CFA                        C6            .byte	$C6
12739 2CFB                        C6            .byte	$C6
12740 2CFC                        7E            .byte	$7E
12741 2CFD                        06            .byte	6
12742 2CFE                        0C            .byte	$C
12743 2CFF                        F8            .byte	$F8
12744 2D00                        00            .byte	0
12745                                           ! 1490  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xcc, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
12746 2D01                        00            .byte	0
12747 2D02                        00            .byte	0
12748 2D03                        00            .byte	0
12749 2D04                        00            .byte	0
12750 2D05                        00            .byte	0
12751 2D06                        FE            .byte	$FE
12752 2D07                        CC            .byte	$CC
12753 2D08                        18            .byte	$18
12754 2D09                        30            .byte	$30
12755 2D0A                        60            .byte	$60
12756 2D0B                        C6            .byte	$C6
12757 2D0C                        FE            .byte	$FE
12758 2D0D                        00            .byte	0
12759 2D0E                        00            .byte	0
12760 2D0F                        00            .byte	0
12761 2D10                        00            .byte	0
12762                                           ! 1491  0x00, 0x00, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x18, 0x0e, 0x00, 0x00, 0x00, 0x00,
12763 2D11                        00            .byte	0
12764 2D12                        00            .byte	0
12765 2D13                        0E            .byte	$E
12766 2D14                        18            .byte	$18
12767 2D15                        18            .byte	$18
12768 2D16                        18            .byte	$18
12769 2D17                        70            .byte	$70
12770 2D18                        18            .byte	$18
12771 2D19                        18            .byte	$18
12772 2D1A                        18            .byte	$18
12773 2D1B                        18            .byte	$18
12774 2D1C                        0E            .byte	$E
12775 2D1D                        00            .byte	0
12776 2D1E                        00            .byte	0
12777 2D1F                        00            .byte	0
12778 2D20                        00            .byte	0
12779                                           ! 1492  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
12780 2D21                        00            .byte	0
12781 2D22                        00            .byte	0
12782 2D23                        18            .byte	$18
12783 2D24                        18            .byte	$18
12784 2D25                        18            .byte	$18
12785 2D26                        18            .byte	$18
12786 2D27                        00            .byte	0
12787 2D28                        18            .byte	$18
12788 2D29                        18            .byte	$18
12789 2D2A                        18            .byte	$18
12790 2D2B                        18            .byte	$18
12791 2D2C                        18            .byte	$18
12792 2D2D                        00            .byte	0
12793 2D2E                        00            .byte	0
12794 2D2F                        00            .byte	0
12795 2D30                        00            .byte	0
12796                                           ! 1493  0x00, 0x00, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x18, 0x18, 0x70, 0x00, 0x00, 0x00, 0x00,
12797 2D31                        00            .byte	0
12798 2D32                        00            .byte	0
12799 2D33                        70            .byte	$70
12800 2D34                        18            .byte	$18
12801 2D35                        18            .byte	$18
12802 2D36                        18            .byte	$18
12803 2D37                        0E            .byte	$E
12804 2D38                        18            .byte	$18
12805 2D39                        18            .byte	$18
12806 2D3A                        18            .byte	$18
12807 2D3B                        18            .byte	$18
12808 2D3C                        70            .byte	$70
12809 2D3D                        00            .byte	0
12810 2D3E                        00            .byte	0
12811 2D3F                        00            .byte	0
12812 2D40                        00            .byte	0
12813                                           ! 1494  0x00, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
12814 2D41                        00            .byte	0
12815 2D42                        00            .byte	0
12816 2D43                        76            .byte	$76
12817 2D44                        DC            .byte	$DC
12818 2D45                        00            .byte	0
12819 2D46                        00            .byte	0
12820 2D47                        00            .byte	0
12821 2D48                        00            .byte	0
12822 2D49                        00            .byte	0
12823 2D4A                        00            .byte	0
12824 2D4B                        00            .byte	0
12825 2D4C                        00            .byte	0
12826 2D4D                        00            .byte	0
12827 2D4E                        00            .byte	0
12828 2D4F                        00            .byte	0
12829 2D50                        00            .byte	0
12830                                           ! 1495  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
12831 2D51                        00            .byte	0
12832 2D52                        00            .byte	0
12833 2D53                        00            .byte	0
12834 2D54                        00            .byte	0
12835 2D55                        10            .byte	$10
12836 2D56                        38            .byte	$38
12837 2D57                        6C            .byte	$6C
12838 2D58                        C6            .byte	$C6
12839 2D59                        C6            .byte	$C6
12840 2D5A                        C6            .byte	$C6
12841 2D5B                        FE            .byte	$FE
12842 2D5C                        00            .byte	0
12843 2D5D                        00            .byte	0
12844 2D5E                        00            .byte	0
12845 2D5F                        00            .byte	0
12846 2D60                        00            .byte	0
12847                                           ! 1496  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x0c, 0x06, 0x7c, 0x00, 0x00,
12848 2D61                        00            .byte	0
12849 2D62                        00            .byte	0
12850 2D63                        3C            .byte	$3C
12851 2D64                        66            .byte	$66
12852 2D65                        C2            .byte	$C2
12853 2D66                        C0            .byte	$C0
12854 2D67                        C0            .byte	$C0
12855 2D68                        C0            .byte	$C0
12856 2D69                        C2            .byte	$C2
12857 2D6A                        66            .byte	$66
12858 2D6B                        3C            .byte	$3C
12859 2D6C                        0C            .byte	$C
12860 2D6D                        06            .byte	6
12861 2D6E                        7C            .byte	$7C
12862 2D6F                        00            .byte	0
12863 2D70                        00            .byte	0
12864                                           ! 1497  0x00, 0x00, 0xcc, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12865 2D71                        00            .byte	0
12866 2D72                        00            .byte	0
12867 2D73                        CC            .byte	$CC
12868 2D74                        00            .byte	0
12869 2D75                        00            .byte	0
12870 2D76                        CC            .byte	$CC
12871 2D77                        CC            .byte	$CC
12872 2D78                        CC            .byte	$CC
12873 2D79                        CC            .byte	$CC
12874 2D7A                        CC            .byte	$CC
12875 2D7B                        CC            .byte	$CC
12876 2D7C                        76            .byte	$76
12877 2D7D                        00            .byte	0
12878 2D7E                        00            .byte	0
12879 2D7F                        00            .byte	0
12880 2D80                        00            .byte	0
12881                                           ! 1498  0x00, 0x0c, 0x18, 0x30, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12882 2D81                        00            .byte	0
12883 2D82                        0C            .byte	$C
12884 2D83                        18            .byte	$18
12885 2D84                        30            .byte	$30
12886 2D85                        00            .byte	0
12887 2D86                        7C            .byte	$7C
12888 2D87                        C6            .byte	$C6
12889 2D88                        FE            .byte	$FE
12890 2D89                        C0            .byte	$C0
12891 2D8A                        C0            .byte	$C0
12892 2D8B                        C6            .byte	$C6
12893 2D8C                        7C            .byte	$7C
12894 2D8D                        00            .byte	0
12895 2D8E                        00            .byte	0
12896 2D8F                        00            .byte	0
12897 2D90                        00            .byte	0
12898                                           ! 1499  0x00, 0x10, 0x38, 0x6c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12899 2D91                        00            .byte	0
12900 2D92                        10            .byte	$10
12901 2D93                        38            .byte	$38
12902 2D94                        6C            .byte	$6C
12903 2D95                        00            .byte	0
12904 2D96                        78            .byte	$78
12905 2D97                        0C            .byte	$C
12906 2D98                        7C            .byte	$7C
12907 2D99                        CC            .byte	$CC
12908 2D9A                        CC            .byte	$CC
12909 2D9B                        CC            .byte	$CC
12910 2D9C                        76            .byte	$76
12911 2D9D                        00            .byte	0
12912 2D9E                        00            .byte	0
12913 2D9F                        00            .byte	0
12914 2DA0                        00            .byte	0
12915                                           ! 1500  0x00, 0x00, 0xcc, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12916 2DA1                        00            .byte	0
12917 2DA2                        00            .byte	0
12918 2DA3                        CC            .byte	$CC
12919 2DA4                        00            .byte	0
12920 2DA5                        00            .byte	0
12921 2DA6                        78            .byte	$78
12922 2DA7                        0C            .byte	$C
12923 2DA8                        7C            .byte	$7C
12924 2DA9                        CC            .byte	$CC
12925 2DAA                        CC            .byte	$CC
12926 2DAB                        CC            .byte	$CC
12927 2DAC                        76            .byte	$76
12928 2DAD                        00            .byte	0
12929 2DAE                        00            .byte	0
12930 2DAF                        00            .byte	0
12931 2DB0                        00            .byte	0
12932                                           ! 1501  0x00, 0x60, 0x30, 0x18, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12933 2DB1                        00            .byte	0
12934 2DB2                        60            .byte	$60
12935 2DB3                        30            .byte	$30
12936 2DB4                        18            .byte	$18
12937 2DB5                        00            .byte	0
12938 2DB6                        78            .byte	$78
12939 2DB7                        0C            .byte	$C
12940 2DB8                        7C            .byte	$7C
12941 2DB9                        CC            .byte	$CC
12942 2DBA                        CC            .byte	$CC
12943 2DBB                        CC            .byte	$CC
12944 2DBC                        76            .byte	$76
12945 2DBD                        00            .byte	0
12946 2DBE                        00            .byte	0
12947 2DBF                        00            .byte	0
12948 2DC0                        00            .byte	0
12949                                           ! 1502  0x00, 0x38, 0x6c, 0x38, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12950 2DC1                        00            .byte	0
12951 2DC2                        38            .byte	$38
12952 2DC3                        6C            .byte	$6C
12953 2DC4                        38            .byte	$38
12954 2DC5                        00            .byte	0
12955 2DC6                        78            .byte	$78
12956 2DC7                        0C            .byte	$C
12957 2DC8                        7C            .byte	$7C
12958 2DC9                        CC            .byte	$CC
12959 2DCA                        CC            .byte	$CC
12960 2DCB                        CC            .byte	$CC
12961 2DCC                        76            .byte	$76
12962 2DCD                        00            .byte	0
12963 2DCE                        00            .byte	0
12964 2DCF                        00            .byte	0
12965 2DD0                        00            .byte	0
12966                                           ! 1503  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x60, 0x60, 0x66, 0x3c, 0x0c, 0x06, 0x3c, 0x00, 0x00, 0x00,
12967 2DD1                        00            .byte	0
12968 2DD2                        00            .byte	0
12969 2DD3                        00            .byte	0
12970 2DD4                        00            .byte	0
12971 2DD5                        3C            .byte	$3C
12972 2DD6                        66            .byte	$66
12973 2DD7                        60            .byte	$60
12974 2DD8                        60            .byte	$60
12975 2DD9                        66            .byte	$66
12976 2DDA                        3C            .byte	$3C
12977 2DDB                        0C            .byte	$C
12978 2DDC                        06            .byte	6
12979 2DDD                        3C            .byte	$3C
12980 2DDE                        00            .byte	0
12981 2DDF                        00            .byte	0
12982 2DE0                        00            .byte	0
12983                                           ! 1504  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12984 2DE1                        00            .byte	0
12985 2DE2                        10            .byte	$10
12986 2DE3                        38            .byte	$38
12987 2DE4                        6C            .byte	$6C
12988 2DE5                        00            .byte	0
12989 2DE6                        7C            .byte	$7C
12990 2DE7                        C6            .byte	$C6
12991 2DE8                        FE            .byte	$FE
12992 2DE9                        C0            .byte	$C0
12993 2DEA                        C0            .byte	$C0
12994 2DEB                        C6            .byte	$C6
12995 2DEC                        7C            .byte	$7C
12996 2DED                        00            .byte	0
12997 2DEE                        00            .byte	0
12998 2DEF                        00            .byte	0
12999 2DF0                        00            .byte	0
13000                                           ! 1505  0x00, 0x00, 0xc6, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13001 2DF1                        00            .byte	0
13002 2DF2                        00            .byte	0
13003 2DF3                        C6            .byte	$C6
13004 2DF4                        00            .byte	0
13005 2DF5                        00            .byte	0
13006 2DF6                        7C            .byte	$7C
13007 2DF7                        C6            .byte	$C6
13008 2DF8                        FE            .byte	$FE
13009 2DF9                        C0            .byte	$C0
13010 2DFA                        C0            .byte	$C0
13011 2DFB                        C6            .byte	$C6
13012 2DFC                        7C            .byte	$7C
13013 2DFD                        00            .byte	0
13014 2DFE                        00            .byte	0
13015 2DFF                        00            .byte	0
13016 2E00                        00            .byte	0
13017                                           ! 1506  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13018 2E01                        00            .byte	0
13019 2E02                        60            .byte	$60
13020 2E03                        30            .byte	$30
13021 2E04                        18            .byte	$18
13022 2E05                        00            .byte	0
13023 2E06                        7C            .byte	$7C
13024 2E07                        C6            .byte	$C6
13025 2E08                        FE            .byte	$FE
13026 2E09                        C0            .byte	$C0
13027 2E0A                        C0            .byte	$C0
13028 2E0B                        C6            .byte	$C6
13029 2E0C                        7C            .byte	$7C
13030 2E0D                        00            .byte	0
13031 2E0E                        00            .byte	0
13032 2E0F                        00            .byte	0
13033 2E10                        00            .byte	0
13034                                           ! 1507  0x00, 0x00, 0x66, 0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 
13035 2E11                        00            .byte	0
13036 2E12                        00            .byte	0
13037 2E13                        66            .byte	$66
13038 2E14                        00            .byte	0
13039 2E15                        00            .byte	0
13040 2E16                        38            .byte	$38
13041 2E17                        18            .byte	$18
13042 2E18                        18            .byte	$18
13043 2E19                        18            .byte	$18
13044 2E1A                        18            .byte	$18
13045 2E1B                        18            .byte	$18
13046                                           ! 1507 0x3c, 0x00, 0x00, 0x00, 0x00,
13047 2E1C                        3C            .byte	$3C
13048 2E1D                        00            .byte	0
13049 2E1E                        00            .byte	0
13050 2E1F                        00            .byte	0
13051 2E20                        00            .byte	0
13052                                           ! 1508  0x00, 0x18, 0x3c, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
13053 2E21                        00            .byte	0
13054 2E22                        18            .byte	$18
13055 2E23                        3C            .byte	$3C
13056 2E24                        66            .byte	$66
13057 2E25                        00            .byte	0
13058 2E26                        38            .byte	$38
13059 2E27                        18            .byte	$18
13060 2E28                        18            .byte	$18
13061 2E29                        18            .byte	$18
13062 2E2A                        18            .byte	$18
13063 2E2B                        18            .byte	$18
13064 2E2C                        3C            .byte	$3C
13065 2E2D                        00            .byte	0
13066 2E2E                        00            .byte	0
13067 2E2F                        00            .byte	0
13068 2E30                        00            .byte	0
13069                                           ! 1509  0x00, 0x60, 0x30, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
13070 2E31                        00            .byte	0
13071 2E32                        60            .byte	$60
13072 2E33                        30            .byte	$30
13073 2E34                        18            .byte	$18
13074 2E35                        00            .byte	0
13075 2E36                        38            .byte	$38
13076 2E37                        18            .byte	$18
13077 2E38                        18            .byte	$18
13078 2E39                        18            .byte	$18
13079 2E3A                        18            .byte	$18
13080 2E3B                        18            .byte	$18
13081 2E3C                        3C            .byte	$3C
13082 2E3D                        00            .byte	0
13083 2E3E                        00            .byte	0
13084 2E3F                        00            .byte	0
13085 2E40                        00            .byte	0
13086                                           ! 1510  0x00, 0xc6, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
13087 2E41                        00            .byte	0
13088 2E42                        C6            .byte	$C6
13089 2E43                        00            .byte	0
13090 2E44                        10            .byte	$10
13091 2E45                        38            .byte	$38
13092 2E46                        6C            .byte	$6C
13093 2E47                        C6            .byte	$C6
13094 2E48                        C6            .byte	$C6
13095 2E49                        FE            .byte	$FE
13096 2E4A                        C6            .byte	$C6
13097 2E4B                        C6            .byte	$C6
13098 2E4C                        C6            .byte	$C6
13099 2E4D                        00            .byte	0
13100 2E4E                        00            .byte	0
13101 2E4F                        00            .byte	0
13102 2E50                        00            .byte	0
13103                                           ! 1511  0x38, 0x6c, 0x38, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
13104 2E51                        38            .byte	$38
13105 2E52                        6C            .byte	$6C
13106 2E53                        38            .byte	$38
13107 2E54                        00            .byte	0
13108 2E55                        38            .byte	$38
13109 2E56                        6C            .byte	$6C
13110 2E57                        C6            .byte	$C6
13111 2E58                        C6            .byte	$C6
13112 2E59                        FE            .byte	$FE
13113 2E5A                        C6            .byte	$C6
13114 2E5B                        C6            .byte	$C6
13115 2E5C                        C6            .byte	$C6
13116 2E5D                        00            .byte	0
13117 2E5E                        00            .byte	0
13118 2E5F                        00            .byte	0
13119 2E60                        00            .byte	0
13120                                           ! 1512  0x18, 0x30, 0x60, 0x00, 0xfe, 0x66, 0x60, 0x7c, 0x60, 0x60, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
13121 2E61                        18            .byte	$18
13122 2E62                        30            .byte	$30
13123 2E63                        60            .byte	$60
13124 2E64                        00            .byte	0
13125 2E65                        FE            .byte	$FE
13126 2E66                        66            .byte	$66
13127 2E67                        60            .byte	$60
13128 2E68                        7C            .byte	$7C
13129 2E69                        60            .byte	$60
13130 2E6A                        60            .byte	$60
13131 2E6B                        66            .byte	$66
13132 2E6C                        FE            .byte	$FE
13133 2E6D                        00            .byte	0
13134 2E6E                        00            .byte	0
13135 2E6F                        00            .byte	0
13136 2E70                        00            .byte	0
13137                                           ! 1513  0x00, 0x00, 0x00, 0x00, 0x00, 0x6e, 0x3b, 0x1b, 0x7e, 0xd8, 0xdc, 0x77, 0x00, 0x00, 0x00, 0x00,
13138 2E71                        00            .byte	0
13139 2E72                        00            .byte	0
13140 2E73                        00            .byte	0
13141 2E74                        00            .byte	0
13142 2E75                        00            .byte	0
13143 2E76                        6E            .byte	$6E
13144 2E77                        3B            .byte	$3B
13145 2E78                        1B            .byte	$1B
13146 2E79                        7E            .byte	$7E
13147 2E7A                        D8            .byte	$D8
13148 2E7B                        DC            .byte	$DC
13149 2E7C                        77            .byte	$77
13150 2E7D                        00            .byte	0
13151 2E7E                        00            .byte	0
13152 2E7F                        00            .byte	0
13153 2E80                        00            .byte	0
13154                                           ! 1514  0x00, 0x00, 0x3e, 0x6c, 0xcc, 0xcc, 0xfe, 0xcc, 0xcc, 0xcc, 0xcc, 0xce, 0x00, 0x00, 0x00, 0x00,
13155 2E81                        00            .byte	0
13156 2E82                        00            .byte	0
13157 2E83                        3E            .byte	$3E
13158 2E84                        6C            .byte	$6C
13159 2E85                        CC            .byte	$CC
13160 2E86                        CC            .byte	$CC
13161 2E87                        FE            .byte	$FE
13162 2E88                        CC            .byte	$CC
13163 2E89                        CC            .byte	$CC
13164 2E8A                        CC            .byte	$CC
13165 2E8B                        CC            .byte	$CC
13166 2E8C                        CE            .byte	$CE
13167 2E8D                        00            .byte	0
13168 2E8E                        00            .byte	0
13169 2E8F                        00            .byte	0
13170 2E90                        00            .byte	0
13171                                           ! 1515  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13172 2E91                        00            .byte	0
13173 2E92                        10            .byte	$10
13174 2E93                        38            .byte	$38
13175 2E94                        6C            .byte	$6C
13176 2E95                        00            .byte	0
13177 2E96                        7C            .byte	$7C
13178 2E97                        C6            .byte	$C6
13179 2E98                        C6            .byte	$C6
13180 2E99                        C6            .byte	$C6
13181 2E9A                        C6            .byte	$C6
13182 2E9B                        C6            .byte	$C6
13183 2E9C                        7C            .byte	$7C
13184 2E9D                        00            .byte	0
13185 2E9E                        00            .byte	0
13186 2E9F                        00            .byte	0
13187 2EA0                        00            .byte	0
13188                                           ! 1516  0x00, 0x00, 0xc6, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13189 2EA1                        00            .byte	0
13190 2EA2                        00            .byte	0
13191 2EA3                        C6            .byte	$C6
13192 2EA4                        00            .byte	0
13193 2EA5                        00            .byte	0
13194 2EA6                        7C            .byte	$7C
13195 2EA7                        C6            .byte	$C6
13196 2EA8                        C6            .byte	$C6
13197 2EA9                        C6            .byte	$C6
13198 2EAA                        C6            .byte	$C6
13199 2EAB                        C6            .byte	$C6
13200 2EAC                        7C            .byte	$7C
13201 2EAD                        00            .byte	0
13202 2EAE                        00            .byte	0
13203 2EAF                        00            .byte	0
13204 2EB0                        00            .byte	0
13205                                           ! 1517  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13206 2EB1                        00            .byte	0
13207 2EB2                        60            .byte	$60
13208 2EB3                        30            .byte	$30
13209 2EB4                        18            .byte	$18
13210 2EB5                        00            .byte	0
13211 2EB6                        7C            .byte	$7C
13212 2EB7                        C6            .byte	$C6
13213 2EB8                        C6            .byte	$C6
13214 2EB9                        C6            .byte	$C6
13215 2EBA                        C6            .byte	$C6
13216 2EBB                        C6            .byte	$C6
13217 2EBC                        7C            .byte	$7C
13218 2EBD                        00            .byte	0
13219 2EBE                        00            .byte	0
13220 2EBF                        00            .byte	0
13221 2EC0                        00            .byte	0
13222                                           ! 1518  0x00, 0x30, 0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13223 2EC1                        00            .byte	0
13224 2EC2                        30            .byte	$30
13225 2EC3                        78            .byte	$78
13226 2EC4                        CC            .byte	$CC
13227 2EC5                        00            .byte	0
13228 2EC6                        CC            .byte	$CC
13229 2EC7                        CC            .byte	$CC
13230 2EC8                        CC            .byte	$CC
13231 2EC9                        CC            .byte	$CC
13232 2ECA                        CC            .byte	$CC
13233 2ECB                        CC            .byte	$CC
13234 2ECC                        76            .byte	$76
13235 2ECD                        00            .byte	0
13236 2ECE                        00            .byte	0
13237 2ECF                        00            .byte	0
13238 2ED0                        00            .byte	0
13239                                           ! 1519  0x00, 0x60, 0x30, 0x18, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13240 2ED1                        00            .byte	0
13241 2ED2                        60            .byte	$60
13242 2ED3                        30            .byte	$30
13243 2ED4                        18            .byte	$18
13244 2ED5                        00            .byte	0
13245 2ED6                        CC            .byte	$CC
13246 2ED7                        CC            .byte	$CC
13247 2ED8                        CC            .byte	$CC
13248 2ED9                        CC            .byte	$CC
13249 2EDA                        CC            .byte	$CC
13250 2EDB                        CC            .byte	$CC
13251 2EDC                        76            .byte	$76
13252 2EDD                        00            .byte	0
13253 2EDE                        00            .byte	0
13254 2EDF                        00            .byte	0
13255 2EE0                        00            .byte	0
13256                                           ! 1520  0x00, 0x00, 0xc6, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0x78, 0x00,
13257 2EE1                        00            .byte	0
13258 2EE2                        00            .byte	0
13259 2EE3                        C6            .byte	$C6
13260 2EE4                        00            .byte	0
13261 2EE5                        00            .byte	0
13262 2EE6                        C6            .byte	$C6
13263 2EE7                        C6            .byte	$C6
13264 2EE8                        C6            .byte	$C6
13265 2EE9                        C6            .byte	$C6
13266 2EEA                        C6            .byte	$C6
13267 2EEB                        C6            .byte	$C6
13268 2EEC                        7E            .byte	$7E
13269 2EED                        06            .byte	6
13270 2EEE                        0C            .byte	$C
13271 2EEF                        78            .byte	$78
13272 2EF0                        00            .byte	0
13273                                           ! 1521  0x00, 0xc6, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13274 2EF1                        00            .byte	0
13275 2EF2                        C6            .byte	$C6
13276 2EF3                        00            .byte	0
13277 2EF4                        7C            .byte	$7C
13278 2EF5                        C6            .byte	$C6
13279 2EF6                        C6            .byte	$C6
13280 2EF7                        C6            .byte	$C6
13281 2EF8                        C6            .byte	$C6
13282 2EF9                        C6            .byte	$C6
13283 2EFA                        C6            .byte	$C6
13284 2EFB                        C6            .byte	$C6
13285 2EFC                        7C            .byte	$7C
13286 2EFD                        00            .byte	0
13287 2EFE                        00            .byte	0
13288 2EFF                        00            .byte	0
13289 2F00                        00            .byte	0
13290                                           ! 1522  0x00, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13291 2F01                        00            .byte	0
13292 2F02                        C6            .byte	$C6
13293 2F03                        00            .byte	0
13294 2F04                        C6            .byte	$C6
13295 2F05                        C6            .byte	$C6
13296 2F06                        C6            .byte	$C6
13297 2F07                        C6            .byte	$C6
13298 2F08                        C6            .byte	$C6
13299 2F09                        C6            .byte	$C6
13300 2F0A                        C6            .byte	$C6
13301 2F0B                        C6            .byte	$C6
13302 2F0C                        7C            .byte	$7C
13303 2F0D                        00            .byte	0
13304 2F0E                        00            .byte	0
13305 2F0F                        00            .byte	0
13306 2F10                        00            .byte	0
13307                                           ! 1523  0x00, 0x18, 0x18, 0x7e, 0xc3, 0xc0, 0xc0, 0xc0, 0xc3, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
13308 2F11                        00            .byte	0
13309 2F12                        18            .byte	$18
13310 2F13                        18            .byte	$18
13311 2F14                        7E            .byte	$7E
13312 2F15                        C3            .byte	$C3
13313 2F16                        C0            .byte	$C0
13314 2F17                        C0            .byte	$C0
13315 2F18                        C0            .byte	$C0
13316 2F19                        C3            .byte	$C3
13317 2F1A                        7E            .byte	$7E
13318 2F1B                        18            .byte	$18
13319 2F1C                        18            .byte	$18
13320 2F1D                        00            .byte	0
13321 2F1E                        00            .byte	0
13322 2F1F                        00            .byte	0
13323 2F20                        00            .byte	0
13324                                           ! 1524  0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0x60, 0xe6, 0xfc, 0x00, 0x00, 0x00, 0x00,
13325 2F21                        00            .byte	0
13326 2F22                        38            .byte	$38
13327 2F23                        6C            .byte	$6C
13328 2F24                        64            .byte	$64
13329 2F25                        60            .byte	$60
13330 2F26                        F0            .byte	$F0
13331 2F27                        60            .byte	$60
13332 2F28                        60            .byte	$60
13333 2F29                        60            .byte	$60
13334 2F2A                        60            .byte	$60
13335 2F2B                        E6            .byte	$E6
13336 2F2C                        FC            .byte	$FC
13337 2F2D                        00            .byte	0
13338 2F2E                        00            .byte	0
13339 2F2F                        00            .byte	0
13340 2F30                        00            .byte	0
13341                                           ! 1525  0x00, 0x00, 0xc3, 0x66, 0x3c, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
13342 2F31                        00            .byte	0
13343 2F32                        00            .byte	0
13344 2F33                        C3            .byte	$C3
13345 2F34                        66            .byte	$66
13346 2F35                        3C            .byte	$3C
13347 2F36                        18            .byte	$18
13348 2F37                        FF            .byte	$FF
13349 2F38                        18            .byte	$18
13350 2F39                        FF            .byte	$FF
13351 2F3A                        18            .byte	$18
13352 2F3B                        18            .byte	$18
13353 2F3C                        18            .byte	$18
13354 2F3D                        00            .byte	0
13355 2F3E                        00            .byte	0
13356 2F3F                        00            .byte	0
13357 2F40                        00            .byte	0
13358                                           ! 1526  0x00, 0xfc, 0x66, 0x66, 0x7c, 0x62, 0x66, 0x6f, 0x66, 0x66, 0x66, 0xf3, 0x00, 0x00, 0x00, 0x00,
13359 2F41                        00            .byte	0
13360 2F42                        FC            .byte	$FC
13361 2F43                        66            .byte	$66
13362 2F44                        66            .byte	$66
13363 2F45                        7C            .byte	$7C
13364 2F46                        62            .byte	$62
13365 2F47                        66            .byte	$66
13366 2F48                        6F            .byte	$6F
13367 2F49                        66            .byte	$66
13368 2F4A                        66            .byte	$66
13369 2F4B                        66            .byte	$66
13370 2F4C                        F3            .byte	$F3
13371 2F4D                        00            .byte	0
13372 2F4E                        00            .byte	0
13373 2F4F                        00            .byte	0
13374 2F50                        00            .byte	0
13375                                           ! 1527  0x00, 0x0e, 0x1b, 0x18, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0x70, 0x00, 0x00,
13376 2F51                        00            .byte	0
13377 2F52                        0E            .byte	$E
13378 2F53                        1B            .byte	$1B
13379 2F54                        18            .byte	$18
13380 2F55                        18            .byte	$18
13381 2F56                        18            .byte	$18
13382 2F57                        7E            .byte	$7E
13383 2F58                        18            .byte	$18
13384 2F59                        18            .byte	$18
13385 2F5A                        18            .byte	$18
13386 2F5B                        18            .byte	$18
13387 2F5C                        18            .byte	$18
13388 2F5D                        D8            .byte	$D8
13389 2F5E                        70            .byte	$70
13390 2F5F                        00            .byte	0
13391 2F60                        00            .byte	0
13392                                           ! 1528  0x00, 0x18, 0x30, 0x60, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00,
13393 2F61                        00            .byte	0
13394 2F62                        18            .byte	$18
13395 2F63                        30            .byte	$30
13396 2F64                        60            .byte	$60
13397 2F65                        00            .byte	0
13398 2F66                        78            .byte	$78
13399 2F67                        0C            .byte	$C
13400 2F68                        7C            .byte	$7C
13401 2F69                        CC            .byte	$CC
13402 2F6A                        CC            .byte	$CC
13403 2F6B                        CC            .byte	$CC
13404 2F6C                        76            .byte	$76
13405                                           ! 1528  0x00, 0x00, 0x00,
13406 2F6D                        00            .byte	0
13407 2F6E                        00            .byte	0
13408 2F6F                        00            .byte	0
13409 2F70                        00            .byte	0
13410                                           ! 1529  0x00, 0x0c, 0x18, 0x30, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
13411 2F71                        00            .byte	0
13412 2F72                        0C            .byte	$C
13413 2F73                        18            .byte	$18
13414 2F74                        30            .byte	$30
13415 2F75                        00            .byte	0
13416 2F76                        38            .byte	$38
13417 2F77                        18            .byte	$18
13418 2F78                        18            .byte	$18
13419 2F79                        18            .byte	$18
13420 2F7A                        18            .byte	$18
13421 2F7B                        18            .byte	$18
13422 2F7C                        3C            .byte	$3C
13423 2F7D                        00            .byte	0
13424 2F7E                        00            .byte	0
13425 2F7F                        00            .byte	0
13426 2F80                        00            .byte	0
13427                                           ! 1530  0x00, 0x18, 0x30, 0x60, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13428 2F81                        00            .byte	0
13429 2F82                        18            .byte	$18
13430 2F83                        30            .byte	$30
13431 2F84                        60            .byte	$60
13432 2F85                        00            .byte	0
13433 2F86                        7C            .byte	$7C
13434 2F87                        C6            .byte	$C6
13435 2F88                        C6            .byte	$C6
13436 2F89                        C6            .byte	$C6
13437 2F8A                        C6            .byte	$C6
13438 2F8B                        C6            .byte	$C6
13439 2F8C                        7C            .byte	$7C
13440 2F8D                        00            .byte	0
13441 2F8E                        00            .byte	0
13442 2F8F                        00            .byte	0
13443 2F90                        00            .byte	0
13444                                           ! 1531  0x00, 0x18, 0x30, 0x60, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13445 2F91                        00            .byte	0
13446 2F92                        18            .byte	$18
13447 2F93                        30            .byte	$30
13448 2F94                        60            .byte	$60
13449 2F95                        00            .byte	0
13450 2F96                        CC            .byte	$CC
13451 2F97                        CC            .byte	$CC
13452 2F98                        CC            .byte	$CC
13453 2F99                        CC            .byte	$CC
13454 2F9A                        CC            .byte	$CC
13455 2F9B                        CC            .byte	$CC
13456 2F9C                        76            .byte	$76
13457 2F9D                        00            .byte	0
13458 2F9E                        00            .byte	0
13459 2F9F                        00            .byte	0
13460 2FA0                        00            .byte	0
13461                                           ! 1532  0x00, 0x00, 0x76, 0xdc, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
13462 2FA1                        00            .byte	0
13463 2FA2                        00            .byte	0
13464 2FA3                        76            .byte	$76
13465 2FA4                        DC            .byte	$DC
13466 2FA5                        00            .byte	0
13467 2FA6                        DC            .byte	$DC
13468 2FA7                        66            .byte	$66
13469 2FA8                        66            .byte	$66
13470 2FA9                        66            .byte	$66
13471 2FAA                        66            .byte	$66
13472 2FAB                        66            .byte	$66
13473 2FAC                        66            .byte	$66
13474 2FAD                        00            .byte	0
13475 2FAE                        00            .byte	0
13476 2FAF                        00            .byte	0
13477 2FB0                        00            .byte	0
13478                                           ! 1533  0x76, 0xdc, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
13479 2FB1                        76            .byte	$76
13480 2FB2                        DC            .byte	$DC
13481 2FB3                        00            .byte	0
13482 2FB4                        C6            .byte	$C6
13483 2FB5                        E6            .byte	$E6
13484 2FB6                        F6            .byte	$F6
13485 2FB7                        FE            .byte	$FE
13486 2FB8                        DE            .byte	$DE
13487 2FB9                        CE            .byte	$CE
13488 2FBA                        C6            .byte	$C6
13489 2FBB                        C6            .byte	$C6
13490 2FBC                        C6            .byte	$C6
13491 2FBD                        00            .byte	0
13492 2FBE                        00            .byte	0
13493 2FBF                        00            .byte	0
13494 2FC0                        00            .byte	0
13495                                           ! 1534  0x00, 0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13496 2FC1                        00            .byte	0
13497 2FC2                        3C            .byte	$3C
13498 2FC3                        6C            .byte	$6C
13499 2FC4                        6C            .byte	$6C
13500 2FC5                        3E            .byte	$3E
13501 2FC6                        00            .byte	0
13502 2FC7                        7E            .byte	$7E
13503 2FC8                        00            .byte	0
13504 2FC9                        00            .byte	0
13505 2FCA                        00            .byte	0
13506 2FCB                        00            .byte	0
13507 2FCC                        00            .byte	0
13508 2FCD                        00            .byte	0
13509 2FCE                        00            .byte	0
13510 2FCF                        00            .byte	0
13511 2FD0                        00            .byte	0
13512                                           ! 1535  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13513 2FD1                        00            .byte	0
13514 2FD2                        38            .byte	$38
13515 2FD3                        6C            .byte	$6C
13516 2FD4                        6C            .byte	$6C
13517 2FD5                        38            .byte	$38
13518 2FD6                        00            .byte	0
13519 2FD7                        7C            .byte	$7C
13520 2FD8                        00            .byte	0
13521 2FD9                        00            .byte	0
13522 2FDA                        00            .byte	0
13523 2FDB                        00            .byte	0
13524 2FDC                        00            .byte	0
13525 2FDD                        00            .byte	0
13526 2FDE                        00            .byte	0
13527 2FDF                        00            .byte	0
13528 2FE0                        00            .byte	0
13529                                           ! 1536  0x00, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x60, 0xc0, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13530 2FE1                        00            .byte	0
13531 2FE2                        00            .byte	0
13532 2FE3                        30            .byte	$30
13533 2FE4                        30            .byte	$30
13534 2FE5                        00            .byte	0
13535 2FE6                        30            .byte	$30
13536 2FE7                        30            .byte	$30
13537 2FE8                        60            .byte	$60
13538 2FE9                        C0            .byte	$C0
13539 2FEA                        C6            .byte	$C6
13540 2FEB                        C6            .byte	$C6
13541 2FEC                        7C            .byte	$7C
13542 2FED                        00            .byte	0
13543 2FEE                        00            .byte	0
13544 2FEF                        00            .byte	0
13545 2FF0                        00            .byte	0
13546                                           ! 1537  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
13547 2FF1                        00            .byte	0
13548 2FF2                        00            .byte	0
13549 2FF3                        00            .byte	0
13550 2FF4                        00            .byte	0
13551 2FF5                        00            .byte	0
13552 2FF6                        00            .byte	0
13553 2FF7                        FE            .byte	$FE
13554 2FF8                        C0            .byte	$C0
13555 2FF9                        C0            .byte	$C0
13556 2FFA                        C0            .byte	$C0
13557 2FFB                        C0            .byte	$C0
13558 2FFC                        00            .byte	0
13559 2FFD                        00            .byte	0
13560 2FFE                        00            .byte	0
13561 2FFF                        00            .byte	0
13562 3000                        00            .byte	0
13563                                           ! 1538  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
13564 3001                        00            .byte	0
13565 3002                        00            .byte	0
13566 3003                        00            .byte	0
13567 3004                        00            .byte	0
13568 3005                        00            .byte	0
13569 3006                        00            .byte	0
13570 3007                        FE            .byte	$FE
13571 3008                        06            .byte	6
13572 3009                        06            .byte	6
13573 300A                        06            .byte	6
13574 300B                        06            .byte	6
13575 300C                        00            .byte	0
13576 300D                        00            .byte	0
13577 300E                        00            .byte	0
13578 300F                        00            .byte	0
13579 3010                        00            .byte	0
13580                                           ! 1539  0x00, 0xc0, 0xc0, 0xc2, 0xc6, 0xcc, 0x18, 0x30, 0x60, 0xce, 0x9b, 0x06, 0x0c, 0x1f, 0x00, 0x00,
13581 3011                        00            .byte	0
13582 3012                        C0            .byte	$C0
13583 3013                        C0            .byte	$C0
13584 3014                        C2            .byte	$C2
13585 3015                        C6            .byte	$C6
13586 3016                        CC            .byte	$CC
13587 3017                        18            .byte	$18
13588 3018                        30            .byte	$30
13589 3019                        60            .byte	$60
13590 301A                        CE            .byte	$CE
13591 301B                        9B            .byte	$9B
13592 301C                        06            .byte	6
13593 301D                        0C            .byte	$C
13594 301E                        1F            .byte	$1F
13595 301F                        00            .byte	0
13596 3020                        00            .byte	0
13597                                           ! 1540  0x00, 0xc0, 0xc0, 0xc2, 0xc6, 0xcc, 0x18, 0x30, 0x66, 0xce, 0x96, 0x3e, 0x06, 0x06, 0x00, 0x00,
13598 3021                        00            .byte	0
13599 3022                        C0            .byte	$C0
13600 3023                        C0            .byte	$C0
13601 3024                        C2            .byte	$C2
13602 3025                        C6            .byte	$C6
13603 3026                        CC            .byte	$CC
13604 3027                        18            .byte	$18
13605 3028                        30            .byte	$30
13606 3029                        66            .byte	$66
13607 302A                        CE            .byte	$CE
13608 302B                        96            .byte	$96
13609 302C                        3E            .byte	$3E
13610 302D                        06            .byte	6
13611 302E                        06            .byte	6
13612 302F                        00            .byte	0
13613 3030                        00            .byte	0
13614                                           ! 1541  0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
13615 3031                        00            .byte	0
13616 3032                        00            .byte	0
13617 3033                        18            .byte	$18
13618 3034                        18            .byte	$18
13619 3035                        00            .byte	0
13620 3036                        18            .byte	$18
13621 3037                        18            .byte	$18
13622 3038                        18            .byte	$18
13623 3039                        3C            .byte	$3C
13624 303A                        3C            .byte	$3C
13625 303B                        3C            .byte	$3C
13626 303C                        18            .byte	$18
13627 303D                        00            .byte	0
13628 303E                        00            .byte	0
13629 303F                        00            .byte	0
13630 3040                        00            .byte	0
13631                                           ! 1542  0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x6c, 0xd8, 0x6c, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13632 3041                        00            .byte	0
13633 3042                        00            .byte	0
13634 3043                        00            .byte	0
13635 3044                        00            .byte	0
13636 3045                        00            .byte	0
13637 3046                        36            .byte	$36
13638 3047                        6C            .byte	$6C
13639 3048                        D8            .byte	$D8
13640 3049                        6C            .byte	$6C
13641 304A                        36            .byte	$36
13642 304B                        00            .byte	0
13643 304C                        00            .byte	0
13644 304D                        00            .byte	0
13645 304E                        00            .byte	0
13646 304F                        00            .byte	0
13647 3050                        00            .byte	0
13648                                           ! 1543  0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c, 0x36, 0x6c, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13649 3051                        00            .byte	0
13650 3052                        00            .byte	0
13651 3053                        00            .byte	0
13652 3054                        00            .byte	0
13653 3055                        00            .byte	0
13654 3056                        D8            .byte	$D8
13655 3057                        6C            .byte	$6C
13656 3058                        36            .byte	$36
13657 3059                        6C            .byte	$6C
13658 305A                        D8            .byte	$D8
13659 305B                        00            .byte	0
13660 305C                        00            .byte	0
13661 305D                        00            .byte	0
13662 305E                        00            .byte	0
13663 305F                        00            .byte	0
13664 3060                        00            .byte	0
13665                                           ! 1544  0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44,
13666 3061                        11            .byte	$11
13667 3062                        44            .byte	$44
13668 3063                        11            .byte	$11
13669 3064                        44            .byte	$44
13670 3065                        11            .byte	$11
13671 3066                        44            .byte	$44
13672 3067                        11            .byte	$11
13673 3068                        44            .byte	$44
13674 3069                        11            .byte	$11
13675 306A                        44            .byte	$44
13676 306B                        11            .byte	$11
13677 306C                        44            .byte	$44
13678 306D                        11            .byte	$11
13679 306E                        44            .byte	$44
13680 306F                        11            .byte	$11
13681 3070                        44            .byte	$44
13682                                           ! 1545  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
13683 3071                        55            .byte	$55
13684 3072                        AA            .byte	$AA
13685 3073                        55            .byte	$55
13686 3074                        AA            .byte	$AA
13687 3075                        55            .byte	$55
13688 3076                        AA            .byte	$AA
13689 3077                        55            .byte	$55
13690 3078                        AA            .byte	$AA
13691 3079                        55            .byte	$55
13692 307A                        AA            .byte	$AA
13693 307B                        55            .byte	$55
13694 307C                        AA            .byte	$AA
13695 307D                        55            .byte	$55
13696 307E                        AA            .byte	$AA
13697 307F                        55            .byte	$55
13698 3080                        AA            .byte	$AA
13699                                           ! 1546  0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77,
13700 3081                        DD            .byte	$DD
13701 3082                        77            .byte	$77
13702 3083                        DD            .byte	$DD
13703 3084                        77            .byte	$77
13704 3085                        DD            .byte	$DD
13705 3086                        77            .byte	$77
13706 3087                        DD            .byte	$DD
13707 3088                        77            .byte	$77
13708 3089                        DD            .byte	$DD
13709 308A                        77            .byte	$77
13710 308B                        DD            .byte	$DD
13711 308C                        77            .byte	$77
13712 308D                        DD            .byte	$DD
13713 308E                        77            .byte	$77
13714 308F                        DD            .byte	$DD
13715 3090                        77            .byte	$77
13716                                           ! 1547  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13717 3091                        18            .byte	$18
13718 3092                        18            .byte	$18
13719 3093                        18            .byte	$18
13720 3094                        18            .byte	$18
13721 3095                        18            .byte	$18
13722 3096                        18            .byte	$18
13723 3097                        18            .byte	$18
13724 3098                        18            .byte	$18
13725 3099                        18            .byte	$18
13726 309A                        18            .byte	$18
13727 309B                        18            .byte	$18
13728 309C                        18            .byte	$18
13729 309D                        18            .byte	$18
13730 309E                        18            .byte	$18
13731 309F                        18            .byte	$18
13732 30A0                        18            .byte	$18
13733                                           ! 1548  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13734 30A1                        18            .byte	$18
13735 30A2                        18            .byte	$18
13736 30A3                        18            .byte	$18
13737 30A4                        18            .byte	$18
13738 30A5                        18            .byte	$18
13739 30A6                        18            .byte	$18
13740 30A7                        18            .byte	$18
13741 30A8                        F8            .byte	$F8
13742 30A9                        18            .byte	$18
13743 30AA                        18            .byte	$18
13744 30AB                        18            .byte	$18
13745 30AC                        18            .byte	$18
13746 30AD                        18            .byte	$18
13747 30AE                        18            .byte	$18
13748 30AF                        18            .byte	$18
13749 30B0                        18            .byte	$18
13750                                           ! 1549  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18
13751 30B1                        18            .byte	$18
13752 30B2                        18            .byte	$18
13753 30B3                        18            .byte	$18
13754 30B4                        18            .byte	$18
13755 30B5                        18            .byte	$18
13756 30B6                        F8            .byte	$F8
13757 30B7                        18            .byte	$18
13758 30B8                        F8            .byte	$F8
13759 30B9                        18            .byte	$18
13760 30BA                        18            .byte	$18
13761 30BB                        18            .byte	$18
13762 30BC                        18            .byte	$18
13763 30BD                        18            .byte	$18
13764 30BE                        18            .byte	$18
13765                                           ! 1549 , 0x18,
13766 30BF                        18            .byte	$18
13767 30C0                        18            .byte	$18
13768                                           ! 1550  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13769 30C1                        36            .byte	$36
13770 30C2                        36            .byte	$36
13771 30C3                        36            .byte	$36
13772 30C4                        36            .byte	$36
13773 30C5                        36            .byte	$36
13774 30C6                        36            .byte	$36
13775 30C7                        36            .byte	$36
13776 30C8                        F6            .byte	$F6
13777 30C9                        36            .byte	$36
13778 30CA                        36            .byte	$36
13779 30CB                        36            .byte	$36
13780 30CC                        36            .byte	$36
13781 30CD                        36            .byte	$36
13782 30CE                        36            .byte	$36
13783 30CF                        36            .byte	$36
13784 30D0                        36            .byte	$36
13785                                           ! 1551  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13786 30D1                        00            .byte	0
13787 30D2                        00            .byte	0
13788 30D3                        00            .byte	0
13789 30D4                        00            .byte	0
13790 30D5                        00            .byte	0
13791 30D6                        00            .byte	0
13792 30D7                        00            .byte	0
13793 30D8                        FE            .byte	$FE
13794 30D9                        36            .byte	$36
13795 30DA                        36            .byte	$36
13796 30DB                        36            .byte	$36
13797 30DC                        36            .byte	$36
13798 30DD                        36            .byte	$36
13799 30DE                        36            .byte	$36
13800 30DF                        36            .byte	$36
13801 30E0                        36            .byte	$36
13802                                           ! 1552  0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13803 30E1                        00            .byte	0
13804 30E2                        00            .byte	0
13805 30E3                        00            .byte	0
13806 30E4                        00            .byte	0
13807 30E5                        00            .byte	0
13808 30E6                        F8            .byte	$F8
13809 30E7                        18            .byte	$18
13810 30E8                        F8            .byte	$F8
13811 30E9                        18            .byte	$18
13812 30EA                        18            .byte	$18
13813 30EB                        18            .byte	$18
13814 30EC                        18            .byte	$18
13815 30ED                        18            .byte	$18
13816 30EE                        18            .byte	$18
13817 30EF                        18            .byte	$18
13818 30F0                        18            .byte	$18
13819                                           ! 1553  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13820 30F1                        36            .byte	$36
13821 30F2                        36            .byte	$36
13822 30F3                        36            .byte	$36
13823 30F4                        36            .byte	$36
13824 30F5                        36            .byte	$36
13825 30F6                        F6            .byte	$F6
13826 30F7                        06            .byte	6
13827 30F8                        F6            .byte	$F6
13828 30F9                        36            .byte	$36
13829 30FA                        36            .byte	$36
13830 30FB                        36            .byte	$36
13831 30FC                        36            .byte	$36
13832 30FD                        36            .byte	$36
13833 30FE                        36            .byte	$36
13834 30FF                        36            .byte	$36
13835 3100                        36            .byte	$36
13836                                           ! 1554  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13837 3101                        36            .byte	$36
13838 3102                        36            .byte	$36
13839 3103                        36            .byte	$36
13840 3104                        36            .byte	$36
13841 3105                        36            .byte	$36
13842 3106                        36            .byte	$36
13843 3107                        36            .byte	$36
13844 3108                        36            .byte	$36
13845 3109                        36            .byte	$36
13846 310A                        36            .byte	$36
13847 310B                        36            .byte	$36
13848 310C                        36            .byte	$36
13849 310D                        36            .byte	$36
13850 310E                        36            .byte	$36
13851 310F                        36            .byte	$36
13852 3110                        36            .byte	$36
13853                                           ! 1555  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13854 3111                        00            .byte	0
13855 3112                        00            .byte	0
13856 3113                        00            .byte	0
13857 3114                        00            .byte	0
13858 3115                        00            .byte	0
13859 3116                        FE            .byte	$FE
13860 3117                        06            .byte	6
13861 3118                        F6            .byte	$F6
13862 3119                        36            .byte	$36
13863 311A                        36            .byte	$36
13864 311B                        36            .byte	$36
13865 311C                        36            .byte	$36
13866 311D                        36            .byte	$36
13867 311E                        36            .byte	$36
13868 311F                        36            .byte	$36
13869 3120                        36            .byte	$36
13870                                           ! 1556  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13871 3121                        36            .byte	$36
13872 3122                        36            .byte	$36
13873 3123                        36            .byte	$36
13874 3124                        36            .byte	$36
13875 3125                        36            .byte	$36
13876 3126                        F6            .byte	$F6
13877 3127                        06            .byte	6
13878 3128                        FE            .byte	$FE
13879 3129                        00            .byte	0
13880 312A                        00            .byte	0
13881 312B                        00            .byte	0
13882 312C                        00            .byte	0
13883 312D                        00            .byte	0
13884 312E                        00            .byte	0
13885 312F                        00            .byte	0
13886 3130                        00            .byte	0
13887                                           ! 1557  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13888 3131                        36            .byte	$36
13889 3132                        36            .byte	$36
13890 3133                        36            .byte	$36
13891 3134                        36            .byte	$36
13892 3135                        36            .byte	$36
13893 3136                        36            .byte	$36
13894 3137                        36            .byte	$36
13895 3138                        FE            .byte	$FE
13896 3139                        00            .byte	0
13897 313A                        00            .byte	0
13898 313B                        00            .byte	0
13899 313C                        00            .byte	0
13900 313D                        00            .byte	0
13901 313E                        00            .byte	0
13902 313F                        00            .byte	0
13903 3140                        00            .byte	0
13904                                           ! 1558  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13905 3141                        18            .byte	$18
13906 3142                        18            .byte	$18
13907 3143                        18            .byte	$18
13908 3144                        18            .byte	$18
13909 3145                        18            .byte	$18
13910 3146                        F8            .byte	$F8
13911 3147                        18            .byte	$18
13912 3148                        F8            .byte	$F8
13913 3149                        00            .byte	0
13914 314A                        00            .byte	0
13915 314B                        00            .byte	0
13916 314C                        00            .byte	0
13917 314D                        00            .byte	0
13918 314E                        00            .byte	0
13919 314F                        00            .byte	0
13920 3150                        00            .byte	0
13921                                           ! 1559  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13922 3151                        00            .byte	0
13923 3152                        00            .byte	0
13924 3153                        00            .byte	0
13925 3154                        00            .byte	0
13926 3155                        00            .byte	0
13927 3156                        00            .byte	0
13928 3157                        00            .byte	0
13929 3158                        F8            .byte	$F8
13930 3159                        18            .byte	$18
13931 315A                        18            .byte	$18
13932 315B                        18            .byte	$18
13933 315C                        18            .byte	$18
13934 315D                        18            .byte	$18
13935 315E                        18            .byte	$18
13936 315F                        18            .byte	$18
13937 3160                        18            .byte	$18
13938                                           ! 1560  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13939 3161                        18            .byte	$18
13940 3162                        18            .byte	$18
13941 3163                        18            .byte	$18
13942 3164                        18            .byte	$18
13943 3165                        18            .byte	$18
13944 3166                        18            .byte	$18
13945 3167                        18            .byte	$18
13946 3168                        1F            .byte	$1F
13947 3169                        00            .byte	0
13948 316A                        00            .byte	0
13949 316B                        00            .byte	0
13950 316C                        00            .byte	0
13951 316D                        00            .byte	0
13952 316E                        00            .byte	0
13953 316F                        00            .byte	0
13954 3170                        00            .byte	0
13955                                           ! 1561  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13956 3171                        18            .byte	$18
13957 3172                        18            .byte	$18
13958 3173                        18            .byte	$18
13959 3174                        18            .byte	$18
13960 3175                        18            .byte	$18
13961 3176                        18            .byte	$18
13962 3177                        18            .byte	$18
13963 3178                        FF            .byte	$FF
13964 3179                        00            .byte	0
13965 317A                        00            .byte	0
13966 317B                        00            .byte	0
13967 317C                        00            .byte	0
13968 317D                        00            .byte	0
13969 317E                        00            .byte	0
13970 317F                        00            .byte	0
13971 3180                        00            .byte	0
13972                                           ! 1562  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13973 3181                        00            .byte	0
13974 3182                        00            .byte	0
13975 3183                        00            .byte	0
13976 3184                        00            .byte	0
13977 3185                        00            .byte	0
13978 3186                        00            .byte	0
13979 3187                        00            .byte	0
13980 3188                        FF            .byte	$FF
13981 3189                        18            .byte	$18
13982 318A                        18            .byte	$18
13983 318B                        18            .byte	$18
13984 318C                        18            .byte	$18
13985 318D                        18            .byte	$18
13986 318E                        18            .byte	$18
13987 318F                        18            .byte	$18
13988 3190                        18            .byte	$18
13989                                           ! 1563  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13990 3191                        18            .byte	$18
13991 3192                        18            .byte	$18
13992 3193                        18            .byte	$18
13993 3194                        18            .byte	$18
13994 3195                        18            .byte	$18
13995 3196                        18            .byte	$18
13996 3197                        18            .byte	$18
13997 3198                        1F            .byte	$1F
13998 3199                        18            .byte	$18
13999 319A                        18            .byte	$18
14000 319B                        18            .byte	$18
14001 319C                        18            .byte	$18
14002 319D                        18            .byte	$18
14003 319E                        18            .byte	$18
14004 319F                        18            .byte	$18
14005 31A0                        18            .byte	$18
14006                                           ! 1564  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14007 31A1                        00            .byte	0
14008 31A2                        00            .byte	0
14009 31A3                        00            .byte	0
14010 31A4                        00            .byte	0
14011 31A5                        00            .byte	0
14012 31A6                        00            .byte	0
14013 31A7                        00            .byte	0
14014 31A8                        FF            .byte	$FF
14015 31A9                        00            .byte	0
14016 31AA                        00            .byte	0
14017 31AB                        00            .byte	0
14018 31AC                        00            .byte	0
14019 31AD                        00            .byte	0
14020 31AE                        00            .byte	0
14021 31AF                        00            .byte	0
14022 31B0                        00            .byte	0
14023                                           ! 1565  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14024 31B1                        18            .byte	$18
14025 31B2                        18            .byte	$18
14026 31B3                        18            .byte	$18
14027 31B4                        18            .byte	$18
14028 31B5                        18            .byte	$18
14029 31B6                        18            .byte	$18
14030 31B7                        18            .byte	$18
14031 31B8                        FF            .byte	$FF
14032 31B9                        18            .byte	$18
14033 31BA                        18            .byte	$18
14034 31BB                        18            .byte	$18
14035 31BC                        18            .byte	$18
14036 31BD                        18            .byte	$18
14037 31BE                        18            .byte	$18
14038 31BF                        18            .byte	$18
14039 31C0                        18            .byte	$18
14040                                           ! 1566  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14041 31C1                        18            .byte	$18
14042 31C2                        18            .byte	$18
14043 31C3                        18            .byte	$18
14044 31C4                        18            .byte	$18
14045 31C5                        18            .byte	$18
14046 31C6                        1F            .byte	$1F
14047 31C7                        18            .byte	$18
14048 31C8                        1F            .byte	$1F
14049 31C9                        18            .byte	$18
14050 31CA                        18            .byte	$18
14051 31CB                        18            .byte	$18
14052 31CC                        18            .byte	$18
14053 31CD                        18            .byte	$18
14054 31CE                        18            .byte	$18
14055 31CF                        18            .byte	$18
14056 31D0                        18            .byte	$18
14057                                           ! 1567  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14058 31D1                        36            .byte	$36
14059 31D2                        36            .byte	$36
14060 31D3                        36            .byte	$36
14061 31D4                        36            .byte	$36
14062 31D5                        36            .byte	$36
14063 31D6                        36            .byte	$36
14064 31D7                        36            .byte	$36
14065 31D8                        37            .byte	$37
14066 31D9                        36            .byte	$36
14067 31DA                        36            .byte	$36
14068 31DB                        36            .byte	$36
14069 31DC                        36            .byte	$36
14070 31DD                        36            .byte	$36
14071 31DE                        36            .byte	$36
14072 31DF                        36            .byte	$36
14073 31E0                        36            .byte	$36
14074                                           ! 1568  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14075 31E1                        36            .byte	$36
14076 31E2                        36            .byte	$36
14077 31E3                        36            .byte	$36
14078 31E4                        36            .byte	$36
14079 31E5                        36            .byte	$36
14080 31E6                        37            .byte	$37
14081 31E7                        30            .byte	$30
14082 31E8                        3F            .byte	$3F
14083 31E9                        00            .byte	0
14084 31EA                        00            .byte	0
14085 31EB                        00            .byte	0
14086 31EC                        00            .byte	0
14087 31ED                        00            .byte	0
14088 31EE                        00            .byte	0
14089 31EF                        00            .byte	0
14090 31F0                        00            .byte	0
14091                                           ! 1569  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14092 31F1                        00            .byte	0
14093 31F2                        00            .byte	0
14094 31F3                        00            .byte	0
14095 31F4                        00            .byte	0
14096 31F5                        00            .byte	0
14097 31F6                        3F            .byte	$3F
14098 31F7                        30            .byte	$30
14099 31F8                        37            .byte	$37
14100 31F9                        36            .byte	$36
14101 31FA                        36            .byte	$36
14102 31FB                        36            .byte	$36
14103 31FC                        36            .byte	$36
14104 31FD                        36            .byte	$36
14105 31FE                        36            .byte	$36
14106 31FF                        36            .byte	$36
14107 3200                        36            .byte	$36
14108                                           ! 1570  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14109 3201                        36            .byte	$36
14110 3202                        36            .byte	$36
14111 3203                        36            .byte	$36
14112 3204                        36            .byte	$36
14113 3205                        36            .byte	$36
14114 3206                        F7            .byte	$F7
14115 3207                        00            .byte	0
14116 3208                        FF            .byte	$FF
14117 3209                        00            .byte	0
14118 320A                        00            .byte	0
14119 320B                        00            .byte	0
14120 320C                        00            .byte	0
14121 320D                        00            .byte	0
14122 320E                        00            .byte	0
14123 320F                        00            .byte	0
14124 3210                        00            .byte	0
14125                                           ! 1571  0x
14126                                           ! 1571 00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14127 3211                        00            .byte	0
14128 3212                        00            .byte	0
14129 3213                        00            .byte	0
14130 3214                        00            .byte	0
14131 3215                        00            .byte	0
14132 3216                        FF            .byte	$FF
14133 3217                        00            .byte	0
14134 3218                        F7            .byte	$F7
14135 3219                        36            .byte	$36
14136 321A                        36            .byte	$36
14137 321B                        36            .byte	$36
14138 321C                        36            .byte	$36
14139 321D                        36            .byte	$36
14140 321E                        36            .byte	$36
14141 321F                        36            .byte	$36
14142 3220                        36            .byte	$36
14143                                           ! 1572  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14144 3221                        36            .byte	$36
14145 3222                        36            .byte	$36
14146 3223                        36            .byte	$36
14147 3224                        36            .byte	$36
14148 3225                        36            .byte	$36
14149 3226                        37            .byte	$37
14150 3227                        30            .byte	$30
14151 3228                        37            .byte	$37
14152 3229                        36            .byte	$36
14153 322A                        36            .byte	$36
14154 322B                        36            .byte	$36
14155 322C                        36            .byte	$36
14156 322D                        36            .byte	$36
14157 322E                        36            .byte	$36
14158 322F                        36            .byte	$36
14159 3230                        36            .byte	$36
14160                                           ! 1573  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14161 3231                        00            .byte	0
14162 3232                        00            .byte	0
14163 3233                        00            .byte	0
14164 3234                        00            .byte	0
14165 3235                        00            .byte	0
14166 3236                        FF            .byte	$FF
14167 3237                        00            .byte	0
14168 3238                        FF            .byte	$FF
14169 3239                        00            .byte	0
14170 323A                        00            .byte	0
14171 323B                        00            .byte	0
14172 323C                        00            .byte	0
14173 323D                        00            .byte	0
14174 323E                        00            .byte	0
14175 323F                        00            .byte	0
14176 3240                        00            .byte	0
14177                                           ! 1574  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14178 3241                        36            .byte	$36
14179 3242                        36            .byte	$36
14180 3243                        36            .byte	$36
14181 3244                        36            .byte	$36
14182 3245                        36            .byte	$36
14183 3246                        F7            .byte	$F7
14184 3247                        00            .byte	0
14185 3248                        F7            .byte	$F7
14186 3249                        36            .byte	$36
14187 324A                        36            .byte	$36
14188 324B                        36            .byte	$36
14189 324C                        36            .byte	$36
14190 324D                        36            .byte	$36
14191 324E                        36            .byte	$36
14192 324F                        36            .byte	$36
14193 3250                        36            .byte	$36
14194                                           ! 1575  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14195 3251                        18            .byte	$18
14196 3252                        18            .byte	$18
14197 3253                        18            .byte	$18
14198 3254                        18            .byte	$18
14199 3255                        18            .byte	$18
14200 3256                        FF            .byte	$FF
14201 3257                        00            .byte	0
14202 3258                        FF            .byte	$FF
14203 3259                        00            .byte	0
14204 325A                        00            .byte	0
14205 325B                        00            .byte	0
14206 325C                        00            .byte	0
14207 325D                        00            .byte	0
14208 325E                        00            .byte	0
14209 325F                        00            .byte	0
14210 3260                        00            .byte	0
14211                                           ! 1576  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14212 3261                        36            .byte	$36
14213 3262                        36            .byte	$36
14214 3263                        36            .byte	$36
14215 3264                        36            .byte	$36
14216 3265                        36            .byte	$36
14217 3266                        36            .byte	$36
14218 3267                        36            .byte	$36
14219 3268                        FF            .byte	$FF
14220 3269                        00            .byte	0
14221 326A                        00            .byte	0
14222 326B                        00            .byte	0
14223 326C                        00            .byte	0
14224 326D                        00            .byte	0
14225 326E                        00            .byte	0
14226 326F                        00            .byte	0
14227 3270                        00            .byte	0
14228                                           ! 1577  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14229 3271                        00            .byte	0
14230 3272                        00            .byte	0
14231 3273                        00            .byte	0
14232 3274                        00            .byte	0
14233 3275                        00            .byte	0
14234 3276                        FF            .byte	$FF
14235 3277                        00            .byte	0
14236 3278                        FF            .byte	$FF
14237 3279                        18            .byte	$18
14238 327A                        18            .byte	$18
14239 327B                        18            .byte	$18
14240 327C                        18            .byte	$18
14241 327D                        18            .byte	$18
14242 327E                        18            .byte	$18
14243 327F                        18            .byte	$18
14244 3280                        18            .byte	$18
14245                                           ! 1578  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14246 3281                        00            .byte	0
14247 3282                        00            .byte	0
14248 3283                        00            .byte	0
14249 3284                        00            .byte	0
14250 3285                        00            .byte	0
14251 3286                        00            .byte	0
14252 3287                        00            .byte	0
14253 3288                        FF            .byte	$FF
14254 3289                        36            .byte	$36
14255 328A                        36            .byte	$36
14256 328B                        36            .byte	$36
14257 328C                        36            .byte	$36
14258 328D                        36            .byte	$36
14259 328E                        36            .byte	$36
14260 328F                        36            .byte	$36
14261 3290                        36            .byte	$36
14262                                           ! 1579  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14263 3291                        36            .byte	$36
14264 3292                        36            .byte	$36
14265 3293                        36            .byte	$36
14266 3294                        36            .byte	$36
14267 3295                        36            .byte	$36
14268 3296                        36            .byte	$36
14269 3297                        36            .byte	$36
14270 3298                        3F            .byte	$3F
14271 3299                        00            .byte	0
14272 329A                        00            .byte	0
14273 329B                        00            .byte	0
14274 329C                        00            .byte	0
14275 329D                        00            .byte	0
14276 329E                        00            .byte	0
14277 329F                        00            .byte	0
14278 32A0                        00            .byte	0
14279                                           ! 1580  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14280 32A1                        18            .byte	$18
14281 32A2                        18            .byte	$18
14282 32A3                        18            .byte	$18
14283 32A4                        18            .byte	$18
14284 32A5                        18            .byte	$18
14285 32A6                        1F            .byte	$1F
14286 32A7                        18            .byte	$18
14287 32A8                        1F            .byte	$1F
14288 32A9                        00            .byte	0
14289 32AA                        00            .byte	0
14290 32AB                        00            .byte	0
14291 32AC                        00            .byte	0
14292 32AD                        00            .byte	0
14293 32AE                        00            .byte	0
14294 32AF                        00            .byte	0
14295 32B0                        00            .byte	0
14296                                           ! 1581  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14297 32B1                        00            .byte	0
14298 32B2                        00            .byte	0
14299 32B3                        00            .byte	0
14300 32B4                        00            .byte	0
14301 32B5                        00            .byte	0
14302 32B6                        1F            .byte	$1F
14303 32B7                        18            .byte	$18
14304 32B8                        1F            .byte	$1F
14305 32B9                        18            .byte	$18
14306 32BA                        18            .byte	$18
14307 32BB                        18            .byte	$18
14308 32BC                        18            .byte	$18
14309 32BD                        18            .byte	$18
14310 32BE                        18            .byte	$18
14311 32BF                        18            .byte	$18
14312 32C0                        18            .byte	$18
14313                                           ! 1582  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14314 32C1                        00            .byte	0
14315 32C2                        00            .byte	0
14316 32C3                        00            .byte	0
14317 32C4                        00            .byte	0
14318 32C5                        00            .byte	0
14319 32C6                        00            .byte	0
14320 32C7                        00            .byte	0
14321 32C8                        3F            .byte	$3F
14322 32C9                        36            .byte	$36
14323 32CA                        36            .byte	$36
14324 32CB                        36            .byte	$36
14325 32CC                        36            .byte	$36
14326 32CD                        36            .byte	$36
14327 32CE                        36            .byte	$36
14328 32CF                        36            .byte	$36
14329 32D0                        36            .byte	$36
14330                                           ! 1583  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14331 32D1                        36            .byte	$36
14332 32D2                        36            .byte	$36
14333 32D3                        36            .byte	$36
14334 32D4                        36            .byte	$36
14335 32D5                        36            .byte	$36
14336 32D6                        36            .byte	$36
14337 32D7                        36            .byte	$36
14338 32D8                        FF            .byte	$FF
14339 32D9                        36            .byte	$36
14340 32DA                        36            .byte	$36
14341 32DB                        36            .byte	$36
14342 32DC                        36            .byte	$36
14343 32DD                        36            .byte	$36
14344 32DE                        36            .byte	$36
14345 32DF                        36            .byte	$36
14346 32E0                        36            .byte	$36
14347                                           ! 1584  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14348 32E1                        18            .byte	$18
14349 32E2                        18            .byte	$18
14350 32E3                        18            .byte	$18
14351 32E4                        18            .byte	$18
14352 32E5                        18            .byte	$18
14353 32E6                        FF            .byte	$FF
14354 32E7                        18            .byte	$18
14355 32E8                        FF            .byte	$FF
14356 32E9                        18            .byte	$18
14357 32EA                        18            .byte	$18
14358 32EB                        18            .byte	$18
14359 32EC                        18            .byte	$18
14360 32ED                        18            .byte	$18
14361 32EE                        18            .byte	$18
14362 32EF                        18            .byte	$18
14363 32F0                        18            .byte	$18
14364                                           ! 1585  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14365 32F1                        18            .byte	$18
14366 32F2                        18            .byte	$18
14367 32F3                        18            .byte	$18
14368 32F4                        18            .byte	$18
14369 32F5                        18            .byte	$18
14370 32F6                        18            .byte	$18
14371 32F7                        18            .byte	$18
14372 32F8                        F8            .byte	$F8
14373 32F9                        00            .byte	0
14374 32FA                        00            .byte	0
14375 32FB                        00            .byte	0
14376 32FC                        00            .byte	0
14377 32FD                        00            .byte	0
14378 32FE                        00            .byte	0
14379 32FF                        00            .byte	0
14380 3300                        00            .byte	0
14381                                           ! 1586  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14382 3301                        00            .byte	0
14383 3302                        00            .byte	0
14384 3303                        00            .byte	0
14385 3304                        00            .byte	0
14386 3305                        00            .byte	0
14387 3306                        00            .byte	0
14388 3307                        00            .byte	0
14389 3308                        1F            .byte	$1F
14390 3309                        18            .byte	$18
14391 330A                        18            .byte	$18
14392 330B                        18            .byte	$18
14393 330C                        18            .byte	$18
14394 330D                        18            .byte	$18
14395 330E                        18            .byte	$18
14396 330F                        18            .byte	$18
14397 3310                        18            .byte	$18
14398                                           ! 1587  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
14399 3311                        FF            .byte	$FF
14400 3312                        FF            .byte	$FF
14401 3313                        FF            .byte	$FF
14402 3314                        FF            .byte	$FF
14403 3315                        FF            .byte	$FF
14404 3316                        FF            .byte	$FF
14405 3317                        FF            .byte	$FF
14406 3318                        FF            .byte	$FF
14407 3319                        FF            .byte	$FF
14408 331A                        FF            .byte	$FF
14409 331B                        FF            .byte	$FF
14410 331C                        FF            .byte	$FF
14411 331D                        FF            .byte	$FF
14412 331E                        FF            .byte	$FF
14413 331F                        FF            .byte	$FF
14414 3320                        FF            .byte	$FF
14415                                           ! 1588  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
14416 3321                        00            .byte	0
14417 3322                        00            .byte	0
14418 3323                        00            .byte	0
14419 3324                        00            .byte	0
14420 3325                        00            .byte	0
14421 3326                        00            .byte	0
14422 3327                        00            .byte	0
14423 3328                        FF            .byte	$FF
14424 3329                        FF            .byte	$FF
14425 332A                        FF            .byte	$FF
14426 332B                        FF            .byte	$FF
14427 332C                        FF            .byte	$FF
14428 332D                        FF            .byte	$FF
14429 332E                        FF            .byte	$FF
14430 332F                        FF            .byte	$FF
14431 3330                        FF            .byte	$FF
14432                                           ! 1589  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
14433 3331                        F0            .byte	$F0
14434 3332                        F0            .byte	$F0
14435 3333                        F0            .byte	$F0
14436 3334                        F0            .byte	$F0
14437 3335                        F0            .byte	$F0
14438 3336                        F0            .byte	$F0
14439 3337                        F0            .byte	$F0
14440 3338                        F0            .byte	$F0
14441 3339                        F0            .byte	$F0
14442 333A                        F0            .byte	$F0
14443 333B                        F0            .byte	$F0
14444 333C                        F0            .byte	$F0
14445 333D                        F0            .byte	$F0
14446 333E                        F0            .byte	$F0
14447 333F                        F0            .byte	$F0
14448 3340                        F0            .byte	$F0
14449                                           ! 1590  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
14450 3341                        0F            .byte	$F
14451 3342                        0F            .byte	$F
14452 3343                        0F            .byte	$F
14453 3344                        0F            .byte	$F
14454 3345                        0F            .byte	$F
14455 3346                        0F            .byte	$F
14456 3347                        0F            .byte	$F
14457 3348                        0F            .byte	$F
14458 3349                        0F            .byte	$F
14459 334A                        0F            .byte	$F
14460 334B                        0F            .byte	$F
14461 334C                        0F            .byte	$F
14462 334D                        0F            .byte	$F
14463 334E                        0F            .byte	$F
14464 334F                        0F            .byte	$F
14465 3350                        0F            .byte	$F
14466                                           ! 1591  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14467 3351                        FF            .byte	$FF
14468 3352                        FF            .byte	$FF
14469 3353                        FF            .byte	$FF
14470 3354                        FF            .byte	$FF
14471 3355                        FF            .byte	$FF
14472 3356                        FF            .byte	$FF
14473 3357                        FF            .byte	$FF
14474 3358                        00            .byte	0
14475 3359                        00            .byte	0
14476 335A                        00            .byte	0
14477 335B                        00            .byte	0
14478 335C                        00            .byte	0
14479 335D                        00            .byte	0
14480 335E                        00            .byte	0
14481 335F                        00            .byte	0
14482 3360                        00            .byte	0
14483                                           ! 1592  0x00, 0x00, 0
14484 3361                        00            .byte	0
14485 3362                        00            .byte	0
14486                                           ! 1592 x00, 0x00, 0x00, 0x76, 0xdc, 0xd8, 0xd8, 0xd8, 0xdc, 0x76, 0x00, 0x00, 0x00, 0x00,
14487 3363                        00            .byte	0
14488 3364                        00            .byte	0
14489 3365                        00            .byte	0
14490 3366                        76            .byte	$76
14491 3367                        DC            .byte	$DC
14492 3368                        D8            .byte	$D8
14493 3369                        D8            .byte	$D8
14494 336A                        D8            .byte	$D8
14495 336B                        DC            .byte	$DC
14496 336C                        76            .byte	$76
14497 336D                        00            .byte	0
14498 336E                        00            .byte	0
14499 336F                        00            .byte	0
14500 3370                        00            .byte	0
14501                                           ! 1593  0x00, 0x00, 0x78, 0xcc, 0xcc, 0xcc, 0xd8, 0xcc, 0xc6, 0xc6, 0xc6, 0xcc, 0x00, 0x00, 0x00, 0x00,
14502 3371                        00            .byte	0
14503 3372                        00            .byte	0
14504 3373                        78            .byte	$78
14505 3374                        CC            .byte	$CC
14506 3375                        CC            .byte	$CC
14507 3376                        CC            .byte	$CC
14508 3377                        D8            .byte	$D8
14509 3378                        CC            .byte	$CC
14510 3379                        C6            .byte	$C6
14511 337A                        C6            .byte	$C6
14512 337B                        C6            .byte	$C6
14513 337C                        CC            .byte	$CC
14514 337D                        00            .byte	0
14515 337E                        00            .byte	0
14516 337F                        00            .byte	0
14517 3380                        00            .byte	0
14518                                           ! 1594  0x00, 0x00, 0xfe, 0xc6, 0xc6, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00,
14519 3381                        00            .byte	0
14520 3382                        00            .byte	0
14521 3383                        FE            .byte	$FE
14522 3384                        C6            .byte	$C6
14523 3385                        C6            .byte	$C6
14524 3386                        C0            .byte	$C0
14525 3387                        C0            .byte	$C0
14526 3388                        C0            .byte	$C0
14527 3389                        C0            .byte	$C0
14528 338A                        C0            .byte	$C0
14529 338B                        C0            .byte	$C0
14530 338C                        C0            .byte	$C0
14531 338D                        00            .byte	0
14532 338E                        00            .byte	0
14533 338F                        00            .byte	0
14534 3390                        00            .byte	0
14535                                           ! 1595  0x00, 0x00, 0x00, 0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00,
14536 3391                        00            .byte	0
14537 3392                        00            .byte	0
14538 3393                        00            .byte	0
14539 3394                        00            .byte	0
14540 3395                        FE            .byte	$FE
14541 3396                        6C            .byte	$6C
14542 3397                        6C            .byte	$6C
14543 3398                        6C            .byte	$6C
14544 3399                        6C            .byte	$6C
14545 339A                        6C            .byte	$6C
14546 339B                        6C            .byte	$6C
14547 339C                        6C            .byte	$6C
14548 339D                        00            .byte	0
14549 339E                        00            .byte	0
14550 339F                        00            .byte	0
14551 33A0                        00            .byte	0
14552                                           ! 1596  0x00, 0x00, 0x00, 0xfe, 0xc6, 0x60, 0x30, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
14553 33A1                        00            .byte	0
14554 33A2                        00            .byte	0
14555 33A3                        00            .byte	0
14556 33A4                        FE            .byte	$FE
14557 33A5                        C6            .byte	$C6
14558 33A6                        60            .byte	$60
14559 33A7                        30            .byte	$30
14560 33A8                        18            .byte	$18
14561 33A9                        30            .byte	$30
14562 33AA                        60            .byte	$60
14563 33AB                        C6            .byte	$C6
14564 33AC                        FE            .byte	$FE
14565 33AD                        00            .byte	0
14566 33AE                        00            .byte	0
14567 33AF                        00            .byte	0
14568 33B0                        00            .byte	0
14569                                           ! 1597  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00, 0x00,
14570 33B1                        00            .byte	0
14571 33B2                        00            .byte	0
14572 33B3                        00            .byte	0
14573 33B4                        00            .byte	0
14574 33B5                        00            .byte	0
14575 33B6                        7E            .byte	$7E
14576 33B7                        D8            .byte	$D8
14577 33B8                        D8            .byte	$D8
14578 33B9                        D8            .byte	$D8
14579 33BA                        D8            .byte	$D8
14580 33BB                        D8            .byte	$D8
14581 33BC                        70            .byte	$70
14582 33BD                        00            .byte	0
14583 33BE                        00            .byte	0
14584 33BF                        00            .byte	0
14585 33C0                        00            .byte	0
14586                                           ! 1598  0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xc0, 0x00, 0x00, 0x00,
14587 33C1                        00            .byte	0
14588 33C2                        00            .byte	0
14589 33C3                        00            .byte	0
14590 33C4                        00            .byte	0
14591 33C5                        66            .byte	$66
14592 33C6                        66            .byte	$66
14593 33C7                        66            .byte	$66
14594 33C8                        66            .byte	$66
14595 33C9                        66            .byte	$66
14596 33CA                        7C            .byte	$7C
14597 33CB                        60            .byte	$60
14598 33CC                        60            .byte	$60
14599 33CD                        C0            .byte	$C0
14600 33CE                        00            .byte	0
14601 33CF                        00            .byte	0
14602 33D0                        00            .byte	0
14603                                           ! 1599  0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
14604 33D1                        00            .byte	0
14605 33D2                        00            .byte	0
14606 33D3                        00            .byte	0
14607 33D4                        00            .byte	0
14608 33D5                        76            .byte	$76
14609 33D6                        DC            .byte	$DC
14610 33D7                        18            .byte	$18
14611 33D8                        18            .byte	$18
14612 33D9                        18            .byte	$18
14613 33DA                        18            .byte	$18
14614 33DB                        18            .byte	$18
14615 33DC                        18            .byte	$18
14616 33DD                        00            .byte	0
14617 33DE                        00            .byte	0
14618 33DF                        00            .byte	0
14619 33E0                        00            .byte	0
14620                                           ! 1600  0x00, 0x00, 0x00, 0x7e, 0x18, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
14621 33E1                        00            .byte	0
14622 33E2                        00            .byte	0
14623 33E3                        00            .byte	0
14624 33E4                        7E            .byte	$7E
14625 33E5                        18            .byte	$18
14626 33E6                        3C            .byte	$3C
14627 33E7                        66            .byte	$66
14628 33E8                        66            .byte	$66
14629 33E9                        66            .byte	$66
14630 33EA                        3C            .byte	$3C
14631 33EB                        18            .byte	$18
14632 33EC                        7E            .byte	$7E
14633 33ED                        00            .byte	0
14634 33EE                        00            .byte	0
14635 33EF                        00            .byte	0
14636 33F0                        00            .byte	0
14637                                           ! 1601  0x00, 0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00,
14638 33F1                        00            .byte	0
14639 33F2                        00            .byte	0
14640 33F3                        00            .byte	0
14641 33F4                        38            .byte	$38
14642 33F5                        6C            .byte	$6C
14643 33F6                        C6            .byte	$C6
14644 33F7                        C6            .byte	$C6
14645 33F8                        FE            .byte	$FE
14646 33F9                        C6            .byte	$C6
14647 33FA                        C6            .byte	$C6
14648 33FB                        6C            .byte	$6C
14649 33FC                        38            .byte	$38
14650 33FD                        00            .byte	0
14651 33FE                        00            .byte	0
14652 33FF                        00            .byte	0
14653 3400                        00            .byte	0
14654                                           ! 1602  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x6c, 0x6c, 0x6c, 0xee, 0x00, 0x00, 0x00, 0x00,
14655 3401                        00            .byte	0
14656 3402                        00            .byte	0
14657 3403                        38            .byte	$38
14658 3404                        6C            .byte	$6C
14659 3405                        C6            .byte	$C6
14660 3406                        C6            .byte	$C6
14661 3407                        C6            .byte	$C6
14662 3408                        6C            .byte	$6C
14663 3409                        6C            .byte	$6C
14664 340A                        6C            .byte	$6C
14665 340B                        6C            .byte	$6C
14666 340C                        EE            .byte	$EE
14667 340D                        00            .byte	0
14668 340E                        00            .byte	0
14669 340F                        00            .byte	0
14670 3410                        00            .byte	0
14671                                           ! 1603  0x00, 0x00, 0x1e, 0x30, 0x18, 0x0c, 0x3e, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
14672 3411                        00            .byte	0
14673 3412                        00            .byte	0
14674 3413                        1E            .byte	$1E
14675 3414                        30            .byte	$30
14676 3415                        18            .byte	$18
14677 3416                        0C            .byte	$C
14678 3417                        3E            .byte	$3E
14679 3418                        66            .byte	$66
14680 3419                        66            .byte	$66
14681 341A                        66            .byte	$66
14682 341B                        66            .byte	$66
14683 341C                        3C            .byte	$3C
14684 341D                        00            .byte	0
14685 341E                        00            .byte	0
14686 341F                        00            .byte	0
14687 3420                        00            .byte	0
14688                                           ! 1604  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xdb, 0xdb, 0xdb, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14689 3421                        00            .byte	0
14690 3422                        00            .byte	0
14691 3423                        00            .byte	0
14692 3424                        00            .byte	0
14693 3425                        00            .byte	0
14694 3426                        7E            .byte	$7E
14695 3427                        DB            .byte	$DB
14696 3428                        DB            .byte	$DB
14697 3429                        DB            .byte	$DB
14698 342A                        7E            .byte	$7E
14699 342B                        00            .byte	0
14700 342C                        00            .byte	0
14701 342D                        00            .byte	0
14702 342E                        00            .byte	0
14703 342F                        00            .byte	0
14704 3430                        00            .byte	0
14705                                           ! 1605  0x00, 0x00, 0x00, 0x03, 0x06, 0x7e, 0xdb, 0xdb, 0xf3, 0x7e, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00,
14706 3431                        00            .byte	0
14707 3432                        00            .byte	0
14708 3433                        00            .byte	0
14709 3434                        03            .byte	3
14710 3435                        06            .byte	6
14711 3436                        7E            .byte	$7E
14712 3437                        DB            .byte	$DB
14713 3438                        DB            .byte	$DB
14714 3439                        F3            .byte	$F3
14715 343A                        7E            .byte	$7E
14716 343B                        60            .byte	$60
14717 343C                        C0            .byte	$C0
14718 343D                        00            .byte	0
14719 343E                        00            .byte	0
14720 343F                        00            .byte	0
14721 3440                        00            .byte	0
14722                                           ! 1606  0x00, 0x00, 0x1c, 0x30, 0x60, 0x60, 0x7c, 0x60, 0x60, 0x60, 0x30, 0x1c, 0x00, 0x00, 0x00, 0x00,
14723 3441                        00            .byte	0
14724 3442                        00            .byte	0
14725 3443                        1C            .byte	$1C
14726 3444                        30            .byte	$30
14727 3445                        60            .byte	$60
14728 3446                        60            .byte	$60
14729 3447                        7C            .byte	$7C
14730 3448                        60            .byte	$60
14731 3449                        60            .byte	$60
14732 344A                        60            .byte	$60
14733 344B                        30            .byte	$30
14734 344C                        1C            .byte	$1C
14735 344D                        00            .byte	0
14736 344E                        00            .byte	0
14737 344F                        00            .byte	0
14738 3450                        00            .byte	0
14739                                           ! 1607  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
14740 3451                        00            .byte	0
14741 3452                        00            .byte	0
14742 3453                        00            .byte	0
14743 3454                        7C            .byte	$7C
14744 3455                        C6            .byte	$C6
14745 3456                        C6            .byte	$C6
14746 3457                        C6            .byte	$C6
14747 3458                        C6            .byte	$C6
14748 3459                        C6            .byte	$C6
14749 345A                        C6            .byte	$C6
14750 345B                        C6            .byte	$C6
14751 345C                        C6            .byte	$C6
14752 345D                        00            .byte	0
14753 345E                        00            .byte	0
14754 345F                        00            .byte	0
14755 3460                        00            .byte	0
14756                                           ! 1608  0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
14757 3461                        00            .byte	0
14758 3462                        00            .byte	0
14759 3463                        00            .byte	0
14760 3464                        00            .byte	0
14761 3465                        FE            .byte	$FE
14762 3466                        00            .byte	0
14763 3467                        00            .byte	0
14764 3468                        FE            .byte	$FE
14765 3469                        00            .byte	0
14766 346A                        00            .byte	0
14767 346B                        FE            .byte	$FE
14768 346C                        00            .byte	0
14769 346D                        00            .byte	0
14770 346E                        00            .byte	0
14771 346F                        00            .byte	0
14772 3470                        00            .byte	0
14773                                           ! 1609  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00,
14774 3471                        00            .byte	0
14775 3472                        00            .byte	0
14776 3473                        00            .byte	0
14777 3474                        00            .byte	0
14778 3475                        18            .byte	$18
14779 3476                        18            .byte	$18
14780 3477                        7E            .byte	$7E
14781 3478                        18            .byte	$18
14782 3479                        18            .byte	$18
14783 347A                        00            .byte	0
14784 347B                        00            .byte	0
14785 347C                        FF            .byte	$FF
14786 347D                        00            .byte	0
14787 347E                        00            .byte	0
14788 347F                        00            .byte	0
14789 3480                        00            .byte	0
14790                                           ! 1610  0x00, 0x00, 0x00, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00,
14791 3481                        00            .byte	0
14792 3482                        00            .byte	0
14793 3483                        00            .byte	0
14794 3484                        30            .byte	$30
14795 3485                        18            .byte	$18
14796 3486                        0C            .byte	$C
14797 3487                        06            .byte	6
14798 3488                        0C            .byte	$C
14799 3489                        18            .byte	$18
14800 348A                        30            .byte	$30
14801 348B                        00            .byte	0
14802 348C                        7E            .byte	$7E
14803 348D                        00            .byte	0
14804 348E                        00            .byte	0
14805 348F                        00            .byte	0
14806 3490                        00            .byte	0
14807                                           ! 1611  0x00, 0x00, 0x00, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00,
14808 3491                        00            .byte	0
14809 3492                        00            .byte	0
14810 3493                        00            .byte	0
14811 3494                        0C            .byte	$C
14812 3495                        18            .byte	$18
14813 3496                        30            .byte	$30
14814 3497                        60            .byte	$60
14815 3498                        30            .byte	$30
14816 3499                        18            .byte	$18
14817 349A                        0C            .byte	$C
14818 349B                        00            .byte	0
14819 349C                        7E            .byte	$7E
14820 349D                        00            .byte	0
14821 349E                        00            .byte	0
14822 349F                        00            .byte	0
14823 34A0                        00            .byte	0
14824                                           ! 1612  0x00, 0x00, 0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14825 34A1                        00            .byte	0
14826 34A2                        00            .byte	0
14827 34A3                        0E            .byte	$E
14828 34A4                        1B            .byte	$1B
14829 34A5                        1B            .byte	$1B
14830 34A6                        18            .byte	$18
14831 34A7                        18            .byte	$18
14832 34A8                        18            .byte	$18
14833 34A9                        18            .byte	$18
14834 34AA                        18            .byte	$18
14835 34AB                        18            .byte	$18
14836 34AC                        18            .byte	$18
14837 34AD                        18            .byte	$18
14838 34AE                        18            .byte	$18
14839 34AF                        18            .byte	$18
14840 34B0                        18            .byte	$18
14841                                           ! 1613  0x18, 0x18, 0x18, 0x18, 
14842 34B1                        18            .byte	$18
14843 34B2                        18            .byte	$18
14844 34B3                        18            .byte	$18
14845 34B4                        18            .byte	$18
14846                                           ! 1613 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00, 0x00,
14847 34B5                        18            .byte	$18
14848 34B6                        18            .byte	$18
14849 34B7                        18            .byte	$18
14850 34B8                        18            .byte	$18
14851 34B9                        D8            .byte	$D8
14852 34BA                        D8            .byte	$D8
14853 34BB                        D8            .byte	$D8
14854 34BC                        70            .byte	$70
14855 34BD                        00            .byte	0
14856 34BE                        00            .byte	0
14857 34BF                        00            .byte	0
14858 34C0                        00            .byte	0
14859                                           ! 1614  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x7e, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
14860 34C1                        00            .byte	0
14861 34C2                        00            .byte	0
14862 34C3                        00            .byte	0
14863 34C4                        00            .byte	0
14864 34C5                        18            .byte	$18
14865 34C6                        18            .byte	$18
14866 34C7                        00            .byte	0
14867 34C8                        7E            .byte	$7E
14868 34C9                        00            .byte	0
14869 34CA                        18            .byte	$18
14870 34CB                        18            .byte	$18
14871 34CC                        00            .byte	0
14872 34CD                        00            .byte	0
14873 34CE                        00            .byte	0
14874 34CF                        00            .byte	0
14875 34D0                        00            .byte	0
14876                                           ! 1615  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14877 34D1                        00            .byte	0
14878 34D2                        00            .byte	0
14879 34D3                        00            .byte	0
14880 34D4                        00            .byte	0
14881 34D5                        00            .byte	0
14882 34D6                        76            .byte	$76
14883 34D7                        DC            .byte	$DC
14884 34D8                        00            .byte	0
14885 34D9                        76            .byte	$76
14886 34DA                        DC            .byte	$DC
14887 34DB                        00            .byte	0
14888 34DC                        00            .byte	0
14889 34DD                        00            .byte	0
14890 34DE                        00            .byte	0
14891 34DF                        00            .byte	0
14892 34E0                        00            .byte	0
14893                                           ! 1616  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14894 34E1                        00            .byte	0
14895 34E2                        38            .byte	$38
14896 34E3                        6C            .byte	$6C
14897 34E4                        6C            .byte	$6C
14898 34E5                        38            .byte	$38
14899 34E6                        00            .byte	0
14900 34E7                        00            .byte	0
14901 34E8                        00            .byte	0
14902 34E9                        00            .byte	0
14903 34EA                        00            .byte	0
14904 34EB                        00            .byte	0
14905 34EC                        00            .byte	0
14906 34ED                        00            .byte	0
14907 34EE                        00            .byte	0
14908 34EF                        00            .byte	0
14909 34F0                        00            .byte	0
14910                                           ! 1617  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14911 34F1                        00            .byte	0
14912 34F2                        00            .byte	0
14913 34F3                        00            .byte	0
14914 34F4                        00            .byte	0
14915 34F5                        00            .byte	0
14916 34F6                        00            .byte	0
14917 34F7                        00            .byte	0
14918 34F8                        18            .byte	$18
14919 34F9                        18            .byte	$18
14920 34FA                        00            .byte	0
14921 34FB                        00            .byte	0
14922 34FC                        00            .byte	0
14923 34FD                        00            .byte	0
14924 34FE                        00            .byte	0
14925 34FF                        00            .byte	0
14926 3500                        00            .byte	0
14927                                           ! 1618  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14928 3501                        00            .byte	0
14929 3502                        00            .byte	0
14930 3503                        00            .byte	0
14931 3504                        00            .byte	0
14932 3505                        00            .byte	0
14933 3506                        00            .byte	0
14934 3507                        00            .byte	0
14935 3508                        00            .byte	0
14936 3509                        18            .byte	$18
14937 350A                        00            .byte	0
14938 350B                        00            .byte	0
14939 350C                        00            .byte	0
14940 350D                        00            .byte	0
14941 350E                        00            .byte	0
14942 350F                        00            .byte	0
14943 3510                        00            .byte	0
14944                                           ! 1619  0x00, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x6c, 0x3c, 0x1c, 0x00, 0x00, 0x00, 0x00,
14945 3511                        00            .byte	0
14946 3512                        0F            .byte	$F
14947 3513                        0C            .byte	$C
14948 3514                        0C            .byte	$C
14949 3515                        0C            .byte	$C
14950 3516                        0C            .byte	$C
14951 3517                        0C            .byte	$C
14952 3518                        EC            .byte	$EC
14953 3519                        6C            .byte	$6C
14954 351A                        6C            .byte	$6C
14955 351B                        3C            .byte	$3C
14956 351C                        1C            .byte	$1C
14957 351D                        00            .byte	0
14958 351E                        00            .byte	0
14959 351F                        00            .byte	0
14960 3520                        00            .byte	0
14961                                           ! 1620  0x00, 0xd8, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14962 3521                        00            .byte	0
14963 3522                        D8            .byte	$D8
14964 3523                        6C            .byte	$6C
14965 3524                        6C            .byte	$6C
14966 3525                        6C            .byte	$6C
14967 3526                        6C            .byte	$6C
14968 3527                        6C            .byte	$6C
14969 3528                        00            .byte	0
14970 3529                        00            .byte	0
14971 352A                        00            .byte	0
14972 352B                        00            .byte	0
14973 352C                        00            .byte	0
14974 352D                        00            .byte	0
14975 352E                        00            .byte	0
14976 352F                        00            .byte	0
14977 3530                        00            .byte	0
14978                                           ! 1621  0x00, 0x70, 0xd8, 0x30, 0x60, 0xc8, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14979 3531                        00            .byte	0
14980 3532                        70            .byte	$70
14981 3533                        D8            .byte	$D8
14982 3534                        30            .byte	$30
14983 3535                        60            .byte	$60
14984 3536                        C8            .byte	$C8
14985 3537                        F8            .byte	$F8
14986 3538                        00            .byte	0
14987 3539                        00            .byte	0
14988 353A                        00            .byte	0
14989 353B                        00            .byte	0
14990 353C                        00            .byte	0
14991 353D                        00            .byte	0
14992 353E                        00            .byte	0
14993 353F                        00            .byte	0
14994 3540                        00            .byte	0
14995                                           ! 1622  0x00, 0x00, 0x00, 0x00, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00,
14996 3541                        00            .byte	0
14997 3542                        00            .byte	0
14998 3543                        00            .byte	0
14999 3544                        00            .byte	0
15000 3545                        7C            .byte	$7C
15001 3546                        7C            .byte	$7C
15002 3547                        7C            .byte	$7C
15003 3548                        7C            .byte	$7C
15004 3549                        7C            .byte	$7C
15005 354A                        7C            .byte	$7C
15006 354B                        7C            .byte	$7C
15007 354C                        00            .byte	0
15008 354D                        00            .byte	0
15009 354E                        00            .byte	0
15010 354F                        00            .byte	0
15011 3550                        00            .byte	0
15012                                           ! 1623  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
15013 3551                        00            .byte	0
15014 3552                        00            .byte	0
15015 3553                        00            .byte	0
15016 3554                        00            .byte	0
15017 3555                        00            .byte	0
15018 3556                        00            .byte	0
15019 3557                        00            .byte	0
15020 3558                        00            .byte	0
15021 3559                        00            .byte	0
15022 355A                        00            .byte	0
15023 355B                        00            .byte	0
15024 355C                        00            .byte	0
15025 355D                        00            .byte	0
15026 355E                        00            .byte	0
15027 355F                        00            .byte	0
15028                                           ! 1624 };
15029 3560                        00            .byte	0
15030                                           !BCC_EOS
15031                                           ! 1625 static Bit8u vgafont14alt[1]={0x00};
15032                       00003561            _vgafont14alt:
15033 3561                        00            .byte	0
15034                                           !BCC_EOS
15035                                           ! 1626 static Bit8u vgafont16alt[1]={0x00};
15036                       00003562            _vgafont16alt:
15037 3562                        00            .byte	0
15038                                           !BCC_EOS
15039                                           ! 1627 #asm
15040                                           !BCC_ASM
15041                       00003563            init_vga_card:
15042                                           ;; switch to color mode and enable CPU access 480 lines
15043 3563           BA                   03C2    mov dx, #0x3C2
15044 3566           B0                     C3    mov al, #0xC3
15045 3568           EE                           outb dx,al
15046                                           ;; more than 64k 3C4/04
15047 3569           BA                   03C4    mov dx, #0x3C4
15048 356C           B0                     04    mov al, #0x04
15049 356E           EE                           outb dx,al
15050 356F           BA                   03C5    mov dx, #0x3C5
15051 3572           B0                     02    mov al, #0x02
15052 3574           EE                           outb dx,al
15053 3575           BB                   357F    mov bx, #msg_vga_init
15054 3578           53                           push bx
15055 3579           E8         46A3              call _printf
15056 357C           44                           inc sp
15057 357D           44                           inc sp
15058 357E           C3                           ret
15059                       0000357F            msg_vga_init:
15060 357F                        56            .ascii "VGABios $Id: vgabios.c,v 1.67 2008/01/27 09:44:12 vruppert Exp $"
15061 35BF                        0D            .byte 0x0d,0x0a,0x00
15062                                           ! 1649 endasm
15063                                           !BCC_ENDASM
15064                                           ! 1650 #asm
15065                                           !BCC_ASM
15066                       000035C2            init_bios_area:
15067 35C2           1E                           push ds
15068 35C3           B8                   0040    mov ax, # 0x40
15069 35C6           8ED8                         mov ds, ax
15070                                           ;; init detected hardware BIOS Area
15071 35C8           BB                   0010    mov bx, # 0x10
15072 35CB           8B07                         mov ax, [bx]
15073 35CD           25                   FFCF    and ax, #0xffcf
15074                                           ;; set 80x25 color (not clear from RBIL but usual)
15075 35D0           0D                   0020    or ax, #0x0020
15076 35D3           8907                         mov [bx], ax
15077                                           ;; Just for the first int10 find its children
15078                                           ;; the default char height
15079 35D5           BB                   0085    mov bx, # 0x85
15080 35D8           B0                     10    mov al, #0x10
15081 35DA           8807                         mov [bx], al
15082                                           ;; Clear the screen
15083 35DC           BB                   0087    mov bx, # 0x87
15084 35DF           B0                     60    mov al, #0x60
15085 35E1           8807                         mov [bx], al
15086                                           ;; Set the basic screen we have
15087 35E3           BB                   0088    mov bx, # 0x88
15088 35E6           B0                     F9    mov al, #0xf9
15089 35E8           8807                         mov [bx], al
15090                                           ;; Set the basic modeset options
15091 35EA           BB                   0089    mov bx, # 0x89
15092 35ED           B0                     51    mov al, #0x51
15093 35EF           8807                         mov [bx], al
15094                                           ;; Set the default MSR
15095 35F1           BB                   0065    mov bx, # 0x65
15096 35F4           B0                     09    mov al, #0x09
15097 35F6           8807                         mov [bx], al
15098 35F8           1F                           pop ds
15099 35F9           C3                           ret
15100                       000035FA            _video_save_pointer_table:
15101 35FA                      0291              .word _video_param_table
15102 35FC                      C000              .word 0xc000
15103 35FE                      0000              .word 0
15104 3600                      0000              .word 0
15105 3602                      0000              .word 0
15106 3604                      0000              .word 0
15107 3606                      0000              .word 0
15108 3608                      0000              .word 0
15109 360A                      0000              .word 0
15110 360C                      0000              .word 0
15111 360E                      0000              .word 0
15112 3610                      0000              .word 0
15113 3612                      0000              .word 0
15114 3614                      0000              .word 0
15115                                           ! 1700 endasm
15116                                           !BCC_ENDASM
15117                                           ! 1701 static void display_splash_screen()
15118                                           ! 1702 {
15119                                           
15120                       00003616            _display_splash_screen:
15121                                           ! 1703 }
15122 3616           C3                         ret
15123                                           ! 1704 static void display_info()
15124                                           ! 1705 {
15125                       00003617            _display_info:
15126                                           ! 1706 #asm
15127                                           !BCC_ASM
15128 3617           B8                   C000   mov ax,#0xc000
15129 361A           8ED8                        mov ds,ax
15130 361C           BE                   0022   mov si,#vgabios_name
15131 361F           E8         0013             call _display_string
15132 3622           BE                   0038   mov si,#vgabios_version
15133 3625           E8         000D             call _display_string
15134                                            ;;mov si,#vgabios_copyright
15135                                            ;;call _display_string
15136                                            ;;mov si,#crlf
15137                                            ;;call _display_string
15138 3628           BE                   007E   mov si,#vgabios_license
15139 362B           E8         0007             call _display_string
15140 362E           BE                   00B3   mov si,#vgabios_website
15141 3631           E8         0001             call _display_string
15142                                           ! 1721 endasm
15143                                           !BCC_ENDASM
15144                                           ! 1722 }
15145 3634           C3                         ret
15146                                           ! 1723 static void display_string()
15147                                           ! 1724 {
15148                       00003635            _display_string:
15149                                           ! 1725 #asm
15150                                           !BCC_ASM
15151 3635           8CD8                        mov ax,ds
15152 3637           8EC0                        mov es,ax
15153 3639           89F7                        mov di,si
15154 363B           31C9                        xor cx,cx
15155 363D           F7D1                        not cx
15156 363F           30C0                        xor al,al
15157 3641           FC                          cld
15158 3642           F2                          repne
15159 3643           AE                           scasb
15160 3644           F7D1                        not cx
15161 3646           49                          dec cx
15162 3647           51                          push cx
15163 3648           B8                   0300   mov ax,#0x0300
15164 364B           BB                   0000   mov bx,#0x0000
15165 364E           CD                     10   int #0x10
15166 3650           59                          pop cx
15167 3651           B8                   1301   mov ax,#0x1301
15168 3654           BB                   000B   mov bx,#0x000b
15169 3657           89F5                        mov bp,si
15170 3659           CD                     10   int #0x10
15171                                           ! 1746 endasm
15172                                           !BCC_ENDASM
15173                                           ! 1747 }
15174 365B           C3                         ret
15175                                           ! 1748 static void int10_func(DI, SI, BP, SP, BX, DX, CX, AX, DS, ES, FLAGS)
15176                                           ! 1749   Bit16u DI, SI, BP, SP, BX, DX, CX, AX, ES, DS, FLAGS;
15177                       0000365C            _int10_func:
15178                                           !BCC_EOS
15179                                           ! 1750 {
15180                                           ! 1751  switch(( AX >> 8 ))
15181 365C           55                         push	bp
15182 365D           89E5                       mov	bp,sp
15183                                           ! Debug: sr int = const 8 to unsigned short AX = [S+2+$10] (used reg = )
15184 365F           8B46         12            mov	ax,$12[bp]
15185 3662           88E0                       mov	al,ah
15186 3664           30E4                       xor	ah,ah
15187                                           ! 1752   {
15188 3666           E9         04D8            br 	.3
15189                                           ! 1753    case 0x00:
15190                                           ! 1754      biosfn_set_video_mode(( AX & 0x00ff ));
15191                       00003669            .4:
15192                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15193 3669           8A46         12            mov	al,$12[bp]
15194                                           ! Debug: list unsigned char = al+0 (used reg = )
15195 366C           30E4                       xor	ah,ah
15196 366E           50                         push	ax
15197                                           ! Debug: func () void = biosfn_set_video_mode+0 (used reg = )
15198 366F           E8         0525            call	_biosfn_set_video_mode
15199 3672           44                         inc	sp
15200 3673           44                         inc	sp
15201                                           !BCC_EOS
15202                                           ! 1755      switch(( AX & 0x00ff )&0x7F)
15203                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15204 3674           8A46         12            mov	al,$12[bp]
15205                                           ! Debug: and int = const $7F to unsigned char = al+0 (used reg = )
15206 3677           24                     7F  and	al,*$7F
15207                                           ! 1756       {case 6:
15208 3679           EB           24            jmp .7
15209                                           ! 1757         AX = ((AX & 0xff00) | (0x3F));
15210                       0000367B            .8:
15211                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15212 367B           8B46         12            mov	ax,$12[bp]
15213 367E           30C0                       xor	al,al
15214                                           ! Debug: or int = const $3F to unsigned int = ax+0 (used reg = )
15215 3680           0C                     3F  or	al,*$3F
15216                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15217 3682           8946         12            mov	$12[bp],ax
15218                                           !BCC_EOS
15219                                           ! 1758         break;
15220 3685           EB           3D            jmp .5
15221                                           !BCC_EOS
15222                                           ! 1759        case 0:
15223                                           ! 1760        case 1:
15224                       00003687            .9:
15225                                           ! 1761        case 2:
15226                       00003687            .A:
15227                                           ! 1762        case 3:
15228                       00003687            .B:
15229                                           ! 1763        case 4:
15230                       00003687            .C:
15231                                           ! 1764        case 5:
15232                       00003687            .D:
15233                                           ! 1765        case 7:
15234                       00003687            .E:
15235                                           ! 1766         AX = ((AX & 0xff00) | (0x30));
15236                       00003687            .F:
15237                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15238 3687           8B46         12            mov	ax,$12[bp]
15239 368A           30C0                       xor	al,al
15240                                           ! Debug: or int = const $30 to unsigned int = ax+0 (used reg = )
15241 368C           0C                     30  or	al,*$30
15242                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15243 368E           8946         12            mov	$12[bp],ax
15244                                           !BCC_EOS
15245                                           ! 1767         break;
15246 3691           EB           31            jmp .5
15247                                           !BCC_EOS
15248                                           ! 1768       default:
15249                                           ! 1769         AX = ((AX & 0xff00) | (0x20));
15250                       00003693            .10:
15251                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15252 3693           8B46         12            mov	ax,$12[bp]
15253 3696           30C0                       xor	al,al
15254                                           ! Debug: or int = const $20 to unsigned int = ax+0 (used reg = )
15255 3698           0C                     20  or	al,*$20
15256                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15257 369A           8946         12            mov	$12[bp],ax
15258                                           !BCC_EOS
15259                                           ! 1770       }
15260                                           ! 1771      break;
15261 369D           EB           25            jmp .5
15262                       0000369F            .7:
15263 369F           2C                     00  sub	al,*0
15264 36A1           72           F0            jb 	.10
15265 36A3           3C                     07  cmp	al,*7
15266 36A5           77           1B            ja  	.11
15267 36A7           30E4                       xor	ah,ah
15268 36A9           D1E0                       shl	ax,*1
15269 36AB           89C3                       mov	bx,ax
15270 36AD           2E                         seg	cs
15271 36AE           FFA7       36B2            br	.12[bx]
15272                       000036B2            .12:
15273 36B2                      3687            .word	.9
15274 36B4                      3687            .word	.A
15275 36B6                      3687            .word	.B
15276 36B8                      3687            .word	.C
15277 36BA                      3687            .word	.D
15278 36BC                      3687            .word	.E
15279 36BE                      367B            .word	.8
15280 36C0                      3687            .word	.F
15281                       000036C2            .11:
15282 36C2           EB           CF            jmp	.10
15283                       000036C4            .5:
15284 36C4           E9         04CE            br 	.1
15285                                           !BCC_EOS
15286                                           ! 1772    case 0x01:
15287                                           ! 1773      biosfn_set_cursor_shape(( CX >> 8 ),( CX & 0x00ff ));
15288                       000036C7            .13:
15289                                           ! Debug: and int = const $FF to unsigned short CX = [S+2+$E] (used reg = )
15290 36C7           8A46         10            mov	al,$10[bp]
15291                                           ! Debug: list unsigned char = al+0 (used reg = )
15292 36CA           30E4                       xor	ah,ah
15293 36CC           50                         push	ax
15294                                           ! Debug: sr int = const 8 to unsigned short CX = [S+4+$E] (used reg = )
15295 36CD           8B46         10            mov	ax,$10[bp]
15296 36D0           88E0                       mov	al,ah
15297 36D2           30E4                       xor	ah,ah
15298                                           ! Debug: list unsigned int = ax+0 (used reg = )
15299 36D4           50                         push	ax
15300                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
15301 36D5           E8         0B57            call	_biosfn_set_cursor_shape
15302 36D8           83C4                   04  add	sp,*4
15303                                           !BCC_EOS
15304                                           ! 1774      break;
15305 36DB           E9         04B7            br 	.1
15306                                           !BCC_EOS
15307                                           ! 1775    case 0x02:
15308                                           ! 1776      biosfn_set_cursor_pos(( BX >> 8 ),DX);
15309                       000036DE            .14:
15310                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15311 36DE           FF76         0E            push	$E[bp]
15312                                           ! Debug: sr int = const 8 to unsigned short BX = [S+4+$A] (used reg = )
15313 36E1           8B46         0C            mov	ax,$C[bp]
15314 36E4           88E0                       mov	al,ah
15315 36E6           30E4                       xor	ah,ah
15316                                           ! Debug: list unsigned int = ax+0 (used reg = )
15317 36E8           50                         push	ax
15318                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
15319 36E9           E8         0C5E            call	_biosfn_set_cursor_pos
15320 36EC           83C4                   04  add	sp,*4
15321                                           !BCC_EOS
15322                                           ! 1777      break;
15323 36EF           E9         04A3            br 	.1
15324                                           !BCC_EOS
15325                                           ! 1778    case 0x03:
15326                                           ! 1779      biosfn_get_cursor_pos(( BX >> 8 ),&CX,&DX);
15327                       000036F2            .15:
15328                                           ! Debug: list * unsigned short DX = S+2+$C (used reg = )
15329 36F2           8D5E         0E            lea	bx,$E[bp]
15330 36F5           53                         push	bx
15331                                           ! Debug: list * unsigned short CX = S+4+$E (used reg = )
15332 36F6           8D5E         10            lea	bx,$10[bp]
15333 36F9           53                         push	bx
15334                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15335 36FA           8B46         0C            mov	ax,$C[bp]
15336 36FD           88E0                       mov	al,ah
15337 36FF           30E4                       xor	ah,ah
15338                                           ! Debug: list unsigned int = ax+0 (used reg = )
15339 3701           50                         push	ax
15340                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
15341 3702           E8         0D45            call	_biosfn_get_cursor_pos
15342 3705           83C4                   06  add	sp,*6
15343                                           !BCC_EOS
15344                                           ! 1780      break;
15345 3708           E9         048A            br 	.1
15346                                           !BCC_EOS
15347                                           ! 1781    case 0x04:
15348                                           ! 1782      AX=0x00;
15349                       0000370B            .16:
15350                                           ! Debug: eq int = const 0 to unsigned short AX = [S+2+$10] (used reg = )
15351 370B           31C0                       xor	ax,ax
15352 370D           8946         12            mov	$12[bp],ax
15353                                           !BCC_EOS
15354                                           ! 1783      BX=0x00;
15355                                           ! Debug: eq int = const 0 to unsigned short BX = [S+2+$A] (used reg = )
15356 3710           31C0                       xor	ax,ax
15357 3712           8946         0C            mov	$C[bp],ax
15358                                           !BCC_EOS
15359                                           ! 1784      CX=0x00;
15360                                           ! Debug: eq int = const 0 to unsigned short CX = [S+2+$E] (used reg = )
15361 3715           31C0                       xor	ax,ax
15362 3717           8946         10            mov	$10[bp],ax
15363                                           !BCC_EOS
15364                                           ! 1785      DX=0x00;
15365                                           ! Debug: eq int = const 0 to unsigned short DX = [S+2+$C] (used reg = )
15366 371A           31C0                       xor	ax,ax
15367 371C           8946         0E            mov	$E[bp],ax
15368                                           !BCC_EOS
15369                                           ! 1786      break;
15370 371F           E9         0473            br 	.1
15371                                           !BCC_EOS
15372                                           ! 1787    case 0x05:
15373                                           ! 1788      biosfn_set_active_page(( AX & 0x00ff ));
15374                       00003722            .17:
15375                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15376 3722           8A46         12            mov	al,$12[bp]
15377                                           ! Debug: list unsigned char = al+0 (used reg = )
15378 3725           30E4                       xor	ah,ah
15379 3727           50                         push	ax
15380                                           ! Debug: func () void = biosfn_set_active_page+0 (used reg = )
15381 3728           E8         0D94            call	_biosfn_set_active_page
15382 372B           44                         inc	sp
15383 372C           44                         inc	sp
15384                                           !BCC_EOS
15385                                           ! 1789      break;
15386 372D           E9         0465            br 	.1
15387                                           !BCC_EOS
15388                                           ! 1790    case 0x06:
15389                                           ! 1791      biosfn_scroll(( AX & 0x00ff ),( BX >> 8 ),( CX >> 8 ),( CX & 0x00ff ),( DX >> 8 ),( DX &
15390                       00003730            .18:
15391                                           ! 1791  0x00ff ),0xFF,1);
15392                                           ! Debug: list int = const 1 (used reg = )
15393 3730           B8                   0001  mov	ax,*1
15394 3733           50                         push	ax
15395                                           ! Debug: list int = const $FF (used reg = )
15396 3734           B8                   00FF  mov	ax,#$FF
15397 3737           50                         push	ax
15398                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
15399 3738           8A46         0E            mov	al,$E[bp]
15400                                           ! Debug: list unsigned char = al+0 (used reg = )
15401 373B           30E4                       xor	ah,ah
15402 373D           50                         push	ax
15403                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
15404 373E           8B46         0E            mov	ax,$E[bp]
15405 3741           88E0                       mov	al,ah
15406 3743           30E4                       xor	ah,ah
15407                                           ! Debug: list unsigned int = ax+0 (used reg = )
15408 3745           50                         push	ax
15409                                           ! Debug: and int = const $FF to unsigned short CX = [S+$A+$E] (used reg = )
15410 3746           8A46         10            mov	al,$10[bp]
15411                                           ! Debug: list unsigned char = al+0 (used reg = )
15412 3749           30E4                       xor	ah,ah
15413 374B           50                         push	ax
15414                                           ! Debug: sr int = const 8 to unsigned short CX = [S+$C+$E] (used reg = )
15415 374C           8B46         10            mov	ax,$10[bp]
15416 374F           88E0                       mov	al,ah
15417 3751           30E4                       xor	ah,ah
15418                                           ! Debug: list unsigned int = ax+0 (used reg = )
15419 3753           50                         push	ax
15420                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
15421 3754           8B46         0C            mov	ax,$C[bp]
15422 3757           88E0                       mov	al,ah
15423 3759           30E4                       xor	ah,ah
15424                                           ! Debug: list unsigned int = ax+0 (used reg = )
15425 375B           50                         push	ax
15426                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
15427 375C           8A46         12            mov	al,$12[bp]
15428                                           ! Debug: list unsigned char = al+0 (used reg = )
15429 375F           30E4                       xor	ah,ah
15430 3761           50                         push	ax
15431                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
15432 3762           E8         11DD            call	_biosfn_scroll
15433 3765           83C4                   10  add	sp,*$10
15434                                           !BCC_EOS
15435                                           ! 1792      break;
15436 3768           E9         042A            br 	.1
15437                                           !BCC_EOS
15438                                           ! 1793    case 0x07:
15439                                           ! 1794      biosfn_scroll(( AX & 0x00ff ),( BX >> 8 ),( CX >> 8 ),( CX & 0x00ff ),( DX >> 8 ),( DX & 0x00ff ),0xFF,0);
15440                       0000376B            .19:
15441                                           ! Debug: list int = const 0 (used reg = )
15442 376B           31C0                       xor	ax,ax
15443 376D           50                         push	ax
15444                                           ! Debug: list int = const $FF (used reg = )
15445 376E           B8                   00FF  mov	ax,#$FF
15446 3771           50                         push	ax
15447                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
15448 3772           8A46         0E            mov	al,$E[bp]
15449                                           ! Debug: list unsigned char = al+0 (used reg = )
15450 3775           30E4                       xor	ah,ah
15451 3777           50                         push	ax
15452                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
15453 3778           8B46         0E            mov	ax,$E[bp]
15454 377B           88E0                       mov	al,ah
15455 377D           30E4                       xor	ah,ah
15456                                           ! Debug: list unsigned int = ax+0 (used reg = )
15457 377F           50                         push	ax
15458                                           ! Debug: and int = const $FF to unsigned short CX = [S+$A+$E] (used reg = )
15459 3780           8A46         10            mov	al,$10[bp]
15460                                           ! Debug: list unsigned char = al+0 (used reg = )
15461 3783           30E4                       xor	ah,ah
15462 3785           50                         push	ax
15463                                           ! Debug: sr int = const 8 to unsigned short CX = [S+$C+$E] (used reg = )
15464 3786           8B46         10            mov	ax,$10[bp]
15465 3789           88E0                       mov	al,ah
15466 378B           30E4                       xor	ah,ah
15467                                           ! Debug: list unsigned int = ax+0 (used reg = )
15468 378D           50                         push	ax
15469                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
15470 378E           8B46         0C            mov	ax,$C[bp]
15471 3791           88E0                       mov	al,ah
15472 3793           30E4                       xor	ah,ah
15473                                           ! Debug: list unsigned int = ax+0 (used reg = )
15474 3795           50                         push	ax
15475                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
15476 3796           8A46         12            mov	al,$12[bp]
15477                                           ! Debug: list unsigned char = al+0 (used reg = )
15478 3799           30E4                       xor	ah,ah
15479 379B           50                         push	ax
15480                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
15481 379C           E8         11A3            call	_biosfn_scroll
15482 379F           83C4                   10  add	sp,*$10
15483                                           !BCC_EOS
15484                                           ! 1795      break;
15485 37A2           E9         03F0            br 	.1
15486                                           !BCC_EOS
15487                                           ! 1796    case 0x08:
15488                                           ! 1797      biosfn_read_char_attr(( BX >> 8 ),&AX);
15489                       000037A5            .1A:
15490                                           ! Debug: list * unsigned short AX = S+2+$10 (used reg = )
15491 37A5           8D5E         12            lea	bx,$12[bp]
15492 37A8           53                         push	bx
15493                                           ! Debug: sr int = const 8 to unsigned short BX = [S+4+$A] (used reg = )
15494 37A9           8B46         0C            mov	ax,$C[bp]
15495 37AC           88E0                       mov	al,ah
15496 37AE           30E4                       xor	ah,ah
15497                                           ! Debug: list unsigned int = ax+0 (used reg = )
15498 37B0           50                         push	ax
15499                                           ! Debug: func () void = biosfn_read_char_attr+0 (used reg = )
15500 37B1           E8         1894            call	_biosfn_read_char_attr
15501 37B4           83C4                   04  add	sp,*4
15502                                           !BCC_EOS
15503                                           ! 1798      break;
15504 37B7           E9         03DB            br 	.1
15505                                           !BCC_EOS
15506                                           ! 1799    case 0x09:
15507                                           ! 1800      biosfn_write_char_attr(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX);
15508                       000037BA            .1B:
15509                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15510 37BA           FF76         10            push	$10[bp]
15511                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15512 37BD           8A46         0C            mov	al,$C[bp]
15513                                           ! Debug: list unsigned char = al+0 (used reg = )
15514 37C0           30E4                       xor	ah,ah
15515 37C2           50                         push	ax
15516                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15517 37C3           8B46         0C            mov	ax,$C[bp]
15518 37C6           88E0                       mov	al,ah
15519 37C8           30E4                       xor	ah,ah
15520                                           ! Debug: list unsigned int = ax+0 (used reg = )
15521 37CA           50                         push	ax
15522                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15523 37CB           8A46         12            mov	al,$12[bp]
15524                                           ! Debug: list unsigned char = al+0 (used reg = )
15525 37CE           30E4                       xor	ah,ah
15526 37D0           50                         push	ax
15527                                           ! Debug: func () void = biosfn_write_char_attr+0 (used reg = )
15528 37D1           E8         1DB9            call	_biosfn_write_char_attr
15529 37D4           83C4                   08  add	sp,*8
15530                                           !BCC_EOS
15531                                           ! 1801      break;
15532 37D7           E9         03BB            br 	.1
15533                                           !BCC_EOS
15534                                           ! 1802    case 0x0A:
15535                                           ! 1803      biosfn_write_char_only(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX);
15536                       000037DA            .1C:
15537                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15538 37DA           FF76         10            push	$10[bp]
15539                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15540 37DD           8A46         0C            mov	al,$C[bp]
15541                                           ! Debug: list unsigned char = al+0 (used reg = )
15542 37E0           30E4                       xor	ah,ah
15543 37E2           50                         push	ax
15544                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15545 37E3           8B46         0C            mov	ax,$C[bp]
15546 37E6           88E0                       mov	al,ah
15547 37E8           30E4                       xor	ah,ah
15548                                           ! Debug: list unsigned int = ax+0 (used reg = )
15549 37EA           50                         push	ax
15550                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15551 37EB           8A46         12            mov	al,$12[bp]
15552                                           ! Debug: list unsigned char = al+0 (used reg = )
15553 37EE           30E4                       xor	ah,ah
15554 37F0           50                         push	ax
15555                                           ! Debug: func () void = biosfn_write_char_only+0 (used reg = )
15556 37F1           E8         1F8E            call	_biosfn_write_char_only
15557 37F4           83C4                   08  add	sp,*8
15558                                           !BCC_EOS
15559                                           ! 1804      break;
15560 37F7           E9         039B            br 	.1
15561                                           !BCC_EOS
15562                                           ! 1805    case 0x0C:
15563                                           ! 1806      biosfn_write_pixel(( BX >> 8 ),( AX & 0x00ff ),CX,DX);
15564                       000037FA            .1D:
15565                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15566 37FA           FF76         0E            push	$E[bp]
15567                                           ! Debug: list unsigned short CX = [S+4+$E] (used reg = )
15568 37FD           FF76         10            push	$10[bp]
15569                                           ! Debug: and int = const $FF to unsigned short AX = [S+6+$10] (used reg = )
15570 3800           8A46         12            mov	al,$12[bp]
15571                                           ! Debug: list unsigned char = al+0 (used reg = )
15572 3803           30E4                       xor	ah,ah
15573 3805           50                         push	ax
15574                                           ! Debug: sr int = const 8 to unsigned short BX = [S+8+$A] (used reg = )
15575 3806           8B46         0C            mov	ax,$C[bp]
15576 3809           88E0                       mov	al,ah
15577 380B           30E4                       xor	ah,ah
15578                                           ! Debug: list unsigned int = ax+0 (used reg = )
15579 380D           50                         push	ax
15580                                           ! Debug: func () void = biosfn_write_pixel+0 (used reg = )
15581 380E           E8         21DF            call	_biosfn_write_pixel
15582 3811           83C4                   08  add	sp,*8
15583                                           !BCC_EOS
15584                                           ! 1807      break;
15585 3814           E9         037E            br 	.1
15586                                           !BCC_EOS
15587                                           ! 1808    case 0x0D:
15588                                           ! 1809      biosfn_read_pixel(( BX >> 8 ),CX,DX,&AX);
15589                       00003817            .1E:
15590                                           ! Debug: list * unsigned short AX = S+2+$10 (used reg = )
15591 3817           8D5E         12            lea	bx,$12[bp]
15592 381A           53                         push	bx
15593                                           ! Debug: list unsigned short DX = [S+4+$C] (used reg = )
15594 381B           FF76         0E            push	$E[bp]
15595                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
15596 381E           FF76         10            push	$10[bp]
15597                                           ! Debug: sr int = const 8 to unsigned short BX = [S+8+$A] (used reg = )
15598 3821           8B46         0C            mov	ax,$C[bp]
15599 3824           88E0                       mov	al,ah
15600 3826           30E4                       xor	ah,ah
15601                                           ! Debug: list unsigned int = ax+0 (used reg = )
15602 3828           50                         push	ax
15603                                           ! Debug: func () void = biosfn_read_pixel+0 (used reg = )
15604 3829           E8         2460            call	_biosfn_read_pixel
15605 382C           83C4                   08  add	sp,*8
15606                                           !BCC_EOS
15607                                           ! 1810      break;
15608 382F           E9         0363            br 	.1
15609                                           !BCC_EOS
15610                                           ! 1811    case 0x0E:
15611                                           ! 1812      biosfn_write_teletype(( AX & 0x00ff ),0xff,( BX & 0x00ff ),2);
15612                       00003832            .1F:
15613                                           ! Debug: list int = const 2 (used reg = )
15614 3832           B8                   0002  mov	ax,*2
15615 3835           50                         push	ax
15616                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15617 3836           8A46         0C            mov	al,$C[bp]
15618                                           ! Debug: list unsigned char = al+0 (used reg = )
15619 3839           30E4                       xor	ah,ah
15620 383B           50                         push	ax
15621                                           ! Debug: list int = const $FF (used reg = )
15622 383C           B8                   00FF  mov	ax,#$FF
15623 383F           50                         push	ax
15624                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15625 3840           8A46         12            mov	al,$12[bp]
15626                                           ! Debug: list unsigned char = al+0 (used reg = )
15627 3843           30E4                       xor	ah,ah
15628 3845           50                         push	ax
15629                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
15630 3846           E8         264B            call	_biosfn_write_teletype
15631 3849           83C4                   08  add	sp,*8
15632                                           !BCC_EOS
15633                                           ! 1813      break;
15634 384C           E9         0346            br 	.1
15635                                           !BCC_EOS
15636                                           ! 1814    case 0x10:
15637                                           ! 1815      biosfn_perform_gray_scale_summing(BX,CX);
15638                       0000384F            .20:
15639                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15640 384F           FF76         10            push	$10[bp]
15641                                           ! Debug: list unsigned short BX = [S+4+$A] (used reg = )
15642 3852           FF76         0C            push	$C[bp]
15643                                           ! Debug: func () void = biosfn_perform_gray_scale_summing+0 (used reg = )
15644 3855           E8         2C31            call	_biosfn_perform_gray_scale_summing
15645 3858           83C4                   04  add	sp,*4
15646                                           !BCC_EOS
15647                                           ! 1816      break;
15648 385B           E9         0337            br 	.1
15649                                           !BCC_EOS
15650                                           ! 1817    case 0x11:
15651                                           ! 1818      switch(( AX & 0x00ff ))
15652                       0000385E            .21:
15653                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15654 385E           8A46         12            mov	al,$12[bp]
15655                                           ! 1819       {
15656 3861           E9         00E1            br 	.24
15657                                           ! 1820        case 0x00:
15658                                           ! 1821        case 0x10:
15659                       00003864            .25:
15660                                           ! 1822         biosfn_load_text_user_pat(( AX & 0x00ff ),ES,BP,CX,DX,( BX & 0x00ff ),( BX >> 8 ));
15661                       00003864            .26:
15662                                           ! Debug: sr int = const 8 to unsigned short BX = [S+2+$A] (used reg = )
15663 3864           8B46         0C            mov	ax,$C[bp]
15664 3867           88E0                       mov	al,ah
15665 3869           30E4                       xor	ah,ah
15666                                           ! Debug: list unsigned int = ax+0 (used reg = )
15667 386B           50                         push	ax
15668                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15669 386C           8A46         0C            mov	al,$C[bp]
15670                                           ! Debug: list unsigned char = al+0 (used reg = )
15671 386F           30E4                       xor	ah,ah
15672 3871           50                         push	ax
15673                                           ! Debug: list unsigned short DX = [S+6+$C] (used reg = )
15674 3872           FF76         0E            push	$E[bp]
15675                                           ! Debug: list unsigned short CX = [S+8+$E] (used reg = )
15676 3875           FF76         10            push	$10[bp]
15677                                           ! Debug: list unsigned short BP = [S+$A+6] (used reg = )
15678 3878           FF76         08            push	8[bp]
15679                                           ! Debug: list unsigned short ES = [S+$C+$14] (used reg = )
15680 387B           FF76         16            push	$16[bp]
15681                                           ! Debug: and int = const $FF to unsigned short AX = [S+$E+$10] (used reg = )
15682 387E           8A46         12            mov	al,$12[bp]
15683                                           ! Debug: list unsigned char = al+0 (used reg = )
15684 3881           30E4                       xor	ah,ah
15685 3883           50                         push	ax
15686                                           ! Debug: func () void = biosfn_load_text_user_pat+0 (used reg = )
15687 3884           E8         2EA9            call	_biosfn_load_text_user_pat
15688 3887           83C4                   0E  add	sp,*$E
15689                                           !BCC_EOS
15690                                           ! 1823         break;
15691 388A           E9         010C            br 	.22
15692                                           !BCC_EOS
15693                                           ! 1824        case 0x01:
15694                                           ! 1825        case 0x11:
15695                       0000388D            .27:
15696                                           ! 1826         biosfn_load_text_8_14_pat(( AX & 0x00ff ),( BX & 0x00ff ));
15697                       0000388D            .28:
15698                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15699 388D           8A46         0C            mov	al,$C[bp]
15700                                           ! Debug: list unsigned char = al+0 (used reg = )
15701 3890           30E4                       xor	ah,ah
15702 3892           50                         push	ax
15703                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15704 3893           8A46         12            mov	al,$12[bp]
15705                                           ! Debug: list unsigned char = al+0 (used reg = )
15706 3896           30E4                       xor	ah,ah
15707 3898           50                         push	ax
15708                                           ! Debug: func () void = biosfn_load_text_8_14_pat+0 (used reg = )
15709 3899           E8         2F30            call	_biosfn_load_text_8_14_pat
15710 389C           83C4                   04  add	sp,*4
15711                                           !BCC_EOS
15712                                           ! 1827         break;
15713 389F           E9         00F7            br 	.22
15714                                           !BCC_EOS
15715                                           ! 1828        case 0x02:
15716                                           ! 1829        case 0x12:
15717                       000038A2            .29:
15718                                           ! 1830         biosfn_load_text_8_8_pat(( AX & 0x00ff ),( BX & 0x00ff ));
15719                       000038A2            .2A:
15720                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15721 38A2           8A46         0C            mov	al,$C[bp]
15722                                           ! Debug: list unsigned char = al+0 (used reg = )
15723 38A5           30E4                       xor	ah,ah
15724 38A7           50                         push	ax
15725                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15726 38A8           8A46         12            mov	al,$12[bp]
15727                                           ! Debug: list unsigned char = al+0 (used reg = )
15728 38AB           30E4                       xor	ah,ah
15729 38AD           50                         push	ax
15730                                           ! Debug: func () void = biosfn_load_text_8_8_pat+0 (used reg = )
15731 38AE           E8         2FB2            call	_biosfn_load_text_8_8_pat
15732 38B1           83C4                   04  add	sp,*4
15733                                           !BCC_EOS
15734                                           ! 1831         break;
15735 38B4           E9         00E2            br 	.22
15736                                           !BCC_EOS
15737                                           ! 1832        case 0x04:
15738                                           ! 1833        case 0x14:
15739                       000038B7            .2B:
15740                                           ! 1834         biosfn_load_text_8_16_pat(( AX & 0x00ff ),( BX & 0x00ff ));
15741                       000038B7            .2C:
15742                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15743 38B7           8A46         0C            mov	al,$C[bp]
15744                                           ! Debug: list unsigned char = al+0 (used reg = )
15745 38BA           30E4                       xor	ah,ah
15746 38BC           50                         push	ax
15747                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15748 38BD           8A46         12            mov	al,$12[bp]
15749                                           ! Debug: list unsigned char = al+0 (used reg = )
15750 38C0           30E4                       xor	ah,ah
15751 38C2           50                         push	ax
15752                                           ! Debug: func () void = biosfn_load_text_8_16_pat+0 (used reg = )
15753 38C3           E8         303B            call	_biosfn_load_text_8_16_pat
15754 38C6           83C4                   04  add	sp,*4
15755                                           !BCC_EOS
15756                                           ! 1835         break;
15757 38C9           E9         00CD            br 	.22
15758                                           !BCC_EOS
15759                                           ! 1836        case 0x20:
15760                                           ! 1837         biosfn_load_gfx_8_8_chars(ES,BP);
15761                       000038CC            .2D:
15762                                           ! Debug: list unsigned short BP = [S+2+6] (used reg = )
15763 38CC           FF76         08            push	8[bp]
15764                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15765 38CF           FF76         16            push	$16[bp]
15766                                           ! Debug: func () void = biosfn_load_gfx_8_8_chars+0 (used reg = )
15767 38D2           E8         30BD            call	_biosfn_load_gfx_8_8_chars
15768 38D5           83C4                   04  add	sp,*4
15769                                           !BCC_EOS
15770                                           ! 1838         break;
15771 38D8           E9         00BE            br 	.22
15772                                           !BCC_EOS
15773                                           ! 1839        case 0x21:
15774                                           ! 1840         biosfn_load_gfx_user_chars(ES,BP,CX,( BX & 0x00ff ),( DX & 0x00ff ));
15775                       000038DB            .2E:
15776                                           ! Debug: and int = const $FF to unsigned short DX = [S+2+$C] (used reg = )
15777 38DB           8A46         0E            mov	al,$E[bp]
15778                                           ! Debug: list unsigned char = al+0 (used reg = )
15779 38DE           30E4                       xor	ah,ah
15780 38E0           50                         push	ax
15781                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15782 38E1           8A46         0C            mov	al,$C[bp]
15783                                           ! Debug: list unsigned char = al+0 (used reg = )
15784 38E4           30E4                       xor	ah,ah
15785 38E6           50                         push	ax
15786                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
15787 38E7           FF76         10            push	$10[bp]
15788                                           ! Debug: list unsigned short BP = [S+8+6] (used reg = )
15789 38EA           FF76         08            push	8[bp]
15790                                           ! Debug: list unsigned short ES = [S+$A+$14] (used reg = )
15791 38ED           FF76         16            push	$16[bp]
15792                                           ! Debug: func () void = biosfn_load_gfx_user_chars+0 (used reg = )
15793 38F0           E8         30A0            call	_biosfn_load_gfx_user_chars
15794 38F3           83C4                   0A  add	sp,*$A
15795                                           !BCC_EOS
15796                                           ! 1841         break;
15797 38F6           E9         00A0            br 	.22
15798                                           !BCC_EOS
15799                                           ! 1842        case 0x22:
15800                                           ! 1843         biosfn_load_gfx_8_14_chars(( BX & 0x00ff ));
15801                       000038F9            .2F:
15802                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15803 38F9           8A46         0C            mov	al,$C[bp]
15804                                           ! Debug: list unsigned char = al+0 (used reg = )
15805 38FC           30E4                       xor	ah,ah
15806 38FE           50                         push	ax
15807                                           ! Debug: func () void = biosfn_load_gfx_8_14_chars+0 (used reg = )
15808 38FF           E8         3092            call	_biosfn_load_gfx_8_14_chars
15809 3902           44                         inc	sp
15810 3903           44                         inc	sp
15811                                           !BCC_EOS
15812                                           ! 1844         break;
15813 3904           E9         0092            br 	.22
15814                                           !BCC_EOS
15815                                           ! 1845        case 0x23:
15816                                           ! 1846         biosfn_load_gfx_8_8_dd_chars(( BX & 0x00ff ));
15817                       00003907            .30:
15818                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15819 3907           8A46         0C            mov	al,$C[bp]
15820                                           ! Debug: list unsigned char = al+0 (used reg = )
15821 390A           30E4                       xor	ah,ah
15822 390C           50                         push	ax
15823                                           ! Debug: func () void = biosfn_load_gfx_8_8_dd_chars+0 (used reg = )
15824 390D           E8         3085            call	_biosfn_load_gfx_8_8_dd_chars
15825 3910           44                         inc	sp
15826 3911           44                         inc	sp
15827                                           !BCC_EOS
15828                                           ! 1847         break;
15829 3912           E9         0084            br 	.22
15830                                           !BCC_EOS
15831                                           ! 1848        case 0x24:
15832                                           ! 1849         biosfn_load_gfx_8_16_chars(( BX & 0x00ff ));
15833                       00003915            .31:
15834                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15835 3915           8A46         0C            mov	al,$C[bp]
15836                                           ! Debug: list unsigned char = al+0 (used reg = )
15837 3918           30E4                       xor	ah,ah
15838 391A           50                         push	ax
15839                                           ! Debug: func () void = biosfn_load_gfx_8_16_chars+0 (used reg = )
15840 391B           E8         3078            call	_biosfn_load_gfx_8_16_chars
15841 391E           44                         inc	sp
15842 391F           44                         inc	sp
15843                                           !BCC_EOS
15844                                           ! 1850         break;
15845 3920           E9         0076            br 	.22
15846                                           !BCC_EOS
15847                                           ! 1851        case 0x30:
15848                                           ! 1852         biosfn_get_font_info(( BX >> 8 ),&ES,&BP,&CX,&DX);
15849                       00003923            .32:
15850                                           ! Debug: list * unsigned short DX = S+2+$C (used reg = )
15851 3923           8D5E         0E            lea	bx,$E[bp]
15852 3926           53                         push	bx
15853                                           ! Debug: list * unsigned short CX = S+4+$E (used reg = )
15854 3927           8D5E         10            lea	bx,$10[bp]
15855 392A           53                         push	bx
15856                                           ! Debug: list * unsigned short BP = S+6+6 (used reg = )
15857 392B           8D5E         08            lea	bx,8[bp]
15858 392E           53                         push	bx
15859                                           ! Debug: list * unsigned short ES = S+8+$14 (used reg = )
15860 392F           8D5E         16            lea	bx,$16[bp]
15861 3932           53                         push	bx
15862                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$A+$A] (used reg = )
15863 3933           8B46         0C            mov	ax,$C[bp]
15864 3936           88E0                       mov	al,ah
15865 3938           30E4                       xor	ah,ah
15866                                           ! Debug: list unsigned int = ax+0 (used reg = )
15867 393A           50                         push	ax
15868                                           ! Debug: func () void = biosfn_get_font_info+0 (used reg = )
15869 393B           E8         3059            call	_biosfn_get_font_info
15870 393E           83C4                   0A  add	sp,*$A
15871                                           !BCC_EOS
15872                                           ! 1853         break;
15873 3941           EB           56            jmp .22
15874                                           !BCC_EOS
15875                                           ! 1854       }
15876                                           ! 1855      break;
15877 3943           EB           54            jmp .22
15878                       00003945            .24:
15879 3945           2C                     00  sub	al,*0
15880 3947         0F84         FF19            beq 	.25
15881 394B           2C                     01  sub	al,*1
15882 394D         0F84         FF3C            beq 	.27
15883 3951           2C                     01  sub	al,*1
15884 3953         0F84         FF4B            beq 	.29
15885 3957           2C                     02  sub	al,*2
15886 3959         0F84         FF5A            beq 	.2B
15887 395D           2C                     0C  sub	al,*$C
15888 395F         0F84         FF01            beq 	.26
15889 3963           2C                     01  sub	al,*1
15890 3965         0F84         FF24            beq 	.28
15891 3969           2C                     01  sub	al,*1
15892 396B         0F84         FF33            beq 	.2A
15893 396F           2C                     02  sub	al,*2
15894 3971         0F84         FF42            beq 	.2C
15895 3975           2C                     0C  sub	al,*$C
15896 3977         0F84         FF51            beq 	.2D
15897 397B           2C                     01  sub	al,*1
15898 397D         0F84         FF5A            beq 	.2E
15899 3981           2C                     01  sub	al,*1
15900 3983         0F84         FF72            beq 	.2F
15901 3987           2C                     01  sub	al,*1
15902 3989         0F84         FF7A            beq 	.30
15903 398D           2C                     01  sub	al,*1
15904 398F         0F84         FF82            beq 	.31
15905 3993           2C                     0C  sub	al,*$C
15906 3995         0F84         FF8A            beq 	.32
15907                       00003999            .22:
15908 3999           E9         01F9            br 	.1
15909                                           !BCC_EOS
15910                                           ! 1856    case 0x12:
15911                                           ! 1857      switch(( BX & 0x00ff ))
15912                       0000399C            .33:
15913                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15914 399C           8A46         0C            mov	al,$C[bp]
15915                                           ! 1858       {
15916 399F           EB           3C            jmp .36
15917                                           ! 1859        case 0x20:
15918                                           ! 1860         biosfn_alternate_prtsc();
15919                       000039A1            .37:
15920                                           ! Debug: func () void = biosfn_alternate_prtsc+0 (used reg = )
15921 39A1           E8         31CD            call	_biosfn_alternate_prtsc
15922                                           !BCC_EOS
15923                                           ! 1861         break;
15924 39A4           EB           43            jmp .34
15925                                           !BCC_EOS
15926                                           ! 1862        case 0x35:
15927                                           ! 1863         biosfn_switch_video_inte
15928                                           ! 1863 rface(( AX & 0x00ff ),ES,DX);
15929                       000039A6            .38:
15930                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15931 39A6           FF76         0E            push	$E[bp]
15932                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15933 39A9           FF76         16            push	$16[bp]
15934                                           ! Debug: and int = const $FF to unsigned short AX = [S+6+$10] (used reg = )
15935 39AC           8A46         12            mov	al,$12[bp]
15936                                           ! Debug: list unsigned char = al+0 (used reg = )
15937 39AF           30E4                       xor	ah,ah
15938 39B1           50                         push	ax
15939                                           ! Debug: func () void = biosfn_switch_video_interface+0 (used reg = )
15940 39B2           E8         3296            call	_biosfn_switch_video_interface
15941 39B5           83C4                   06  add	sp,*6
15942                                           !BCC_EOS
15943                                           ! 1864         AX = ((AX & 0xff00) | (0x12));
15944                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15945 39B8           8B46         12            mov	ax,$12[bp]
15946 39BB           30C0                       xor	al,al
15947                                           ! Debug: or int = const $12 to unsigned int = ax+0 (used reg = )
15948 39BD           0C                     12  or	al,*$12
15949                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15950 39BF           8946         12            mov	$12[bp],ax
15951                                           !BCC_EOS
15952                                           ! 1865         break;
15953 39C2           EB           25            jmp .34
15954                                           !BCC_EOS
15955                                           ! 1866        case 0x36:
15956                                           ! 1867         biosfn_enable_video_refresh_control(( AX & 0x00ff ));
15957                       000039C4            .39:
15958                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15959 39C4           8A46         12            mov	al,$12[bp]
15960                                           ! Debug: list unsigned char = al+0 (used reg = )
15961 39C7           30E4                       xor	ah,ah
15962 39C9           50                         push	ax
15963                                           ! Debug: func () void = biosfn_enable_video_refresh_control+0 (used reg = )
15964 39CA           E8         327F            call	_biosfn_enable_video_refresh_control
15965 39CD           44                         inc	sp
15966 39CE           44                         inc	sp
15967                                           !BCC_EOS
15968                                           ! 1868         AX = ((AX & 0xff00) | (0x12));
15969                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15970 39CF           8B46         12            mov	ax,$12[bp]
15971 39D2           30C0                       xor	al,al
15972                                           ! Debug: or int = const $12 to unsigned int = ax+0 (used reg = )
15973 39D4           0C                     12  or	al,*$12
15974                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15975 39D6           8946         12            mov	$12[bp],ax
15976                                           !BCC_EOS
15977                                           ! 1869         break;
15978 39D9           EB           0E            jmp .34
15979                                           !BCC_EOS
15980                                           ! 1870       }
15981                                           ! 1871      break;
15982 39DB           EB           0C            jmp .34
15983                       000039DD            .36:
15984 39DD           2C                     20  sub	al,*$20
15985 39DF           74           C0            je 	.37
15986 39E1           2C                     15  sub	al,*$15
15987 39E3           74           C1            je 	.38
15988 39E5           2C                     01  sub	al,*1
15989 39E7           74           DB            je 	.39
15990                       000039E9            .34:
15991 39E9           E9         01A9            br 	.1
15992                                           !BCC_EOS
15993                                           ! 1872    case 0x13:
15994                                           ! 1873      biosfn_write_string(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX,( DX >> 8 ),( DX & 0x00ff ),ES,BP);
15995                       000039EC            .3A:
15996                                           ! Debug: list unsigned short BP = [S+2+6] (used reg = )
15997 39EC           FF76         08            push	8[bp]
15998                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15999 39EF           FF76         16            push	$16[bp]
16000                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
16001 39F2           8A46         0E            mov	al,$E[bp]
16002                                           ! Debug: list unsigned char = al+0 (used reg = )
16003 39F5           30E4                       xor	ah,ah
16004 39F7           50                         push	ax
16005                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
16006 39F8           8B46         0E            mov	ax,$E[bp]
16007 39FB           88E0                       mov	al,ah
16008 39FD           30E4                       xor	ah,ah
16009                                           ! Debug: list unsigned int = ax+0 (used reg = )
16010 39FF           50                         push	ax
16011                                           ! Debug: list unsigned short CX = [S+$A+$E] (used reg = )
16012 3A00           FF76         10            push	$10[bp]
16013                                           ! Debug: and int = const $FF to unsigned short BX = [S+$C+$A] (used reg = )
16014 3A03           8A46         0C            mov	al,$C[bp]
16015                                           ! Debug: list unsigned char = al+0 (used reg = )
16016 3A06           30E4                       xor	ah,ah
16017 3A08           50                         push	ax
16018                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
16019 3A09           8B46         0C            mov	ax,$C[bp]
16020 3A0C           88E0                       mov	al,ah
16021 3A0E           30E4                       xor	ah,ah
16022                                           ! Debug: list unsigned int = ax+0 (used reg = )
16023 3A10           50                         push	ax
16024                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
16025 3A11           8A46         12            mov	al,$12[bp]
16026                                           ! Debug: list unsigned char = al+0 (used reg = )
16027 3A14           30E4                       xor	ah,ah
16028 3A16           50                         push	ax
16029                                           ! Debug: func () void = biosfn_write_string+0 (used reg = )
16030 3A17           E8         3233            call	_biosfn_write_string
16031 3A1A           83C4                   10  add	sp,*$10
16032                                           !BCC_EOS
16033                                           ! 1874      break;
16034 3A1D           E9         0175            br 	.1
16035                                           !BCC_EOS
16036                                           ! 1875    case 0x1B:
16037                                           ! 1876      biosfn_read_state_info(BX,ES,DI);
16038                       00003A20            .3B:
16039                                           ! Debug: list unsigned short DI = [S+2+2] (used reg = )
16040 3A20           FF76         04            push	4[bp]
16041                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16042 3A23           FF76         16            push	$16[bp]
16043                                           ! Debug: list unsigned short BX = [S+6+$A] (used reg = )
16044 3A26           FF76         0C            push	$C[bp]
16045                                           ! Debug: func () void = biosfn_read_state_info+0 (used reg = )
16046 3A29           E8         332D            call	_biosfn_read_state_info
16047 3A2C           83C4                   06  add	sp,*6
16048                                           !BCC_EOS
16049                                           ! 1877      AX = ((AX & 0xff00) | (0x1B));
16050                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
16051 3A2F           8B46         12            mov	ax,$12[bp]
16052 3A32           30C0                       xor	al,al
16053                                           ! Debug: or int = const $1B to unsigned int = ax+0 (used reg = )
16054 3A34           0C                     1B  or	al,*$1B
16055                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
16056 3A36           8946         12            mov	$12[bp],ax
16057                                           !BCC_EOS
16058                                           ! 1878      break;
16059 3A39           E9         0159            br 	.1
16060                                           !BCC_EOS
16061                                           ! 1879    case 0x1C:
16062                                           ! 1880      switch(( AX & 0x00ff ))
16063                       00003A3C            .3C:
16064                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
16065 3A3C           8A46         12            mov	al,$12[bp]
16066                                           ! 1881       {
16067 3A3F           E9         0033            br 	.3F
16068                                           ! 1882        case 0x00:
16069                                           ! 1883         biosfn_read_video_state_size(CX,&BX);
16070                       00003A42            .40:
16071                                           ! Debug: list * unsigned short BX = S+2+$A (used reg = )
16072 3A42           8D5E         0C            lea	bx,$C[bp]
16073 3A45           53                         push	bx
16074                                           ! Debug: list unsigned short CX = [S+4+$E] (used reg = )
16075 3A46           FF76         10            push	$10[bp]
16076                                           ! Debug: func () void = biosfn_read_video_state_size+0 (used reg = )
16077 3A49           E8         348C            call	_biosfn_read_video_state_size
16078 3A4C           83C4                   04  add	sp,*4
16079                                           !BCC_EOS
16080                                           ! 1884         break;
16081 3A4F           EB           30            jmp .3D
16082                                           !BCC_EOS
16083                                           ! 1885        case 0x01:
16084                                           ! 1886         biosfn_save_video_state(CX,ES,BX);
16085                       00003A51            .41:
16086                                           ! Debug: list unsigned short BX = [S+2+$A] (used reg = )
16087 3A51           FF76         0C            push	$C[bp]
16088                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16089 3A54           FF76         16            push	$16[bp]
16090                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
16091 3A57           FF76         10            push	$10[bp]
16092                                           ! Debug: func () unsigned short = biosfn_save_video_state+0 (used reg = )
16093 3A5A           E8         349F            call	_biosfn_save_video_state
16094 3A5D           83C4                   06  add	sp,*6
16095                                           !BCC_EOS
16096                                           ! 1887         break;
16097 3A60           EB           1F            jmp .3D
16098                                           !BCC_EOS
16099                                           ! 1888        case 0x02:
16100                                           ! 1889         biosfn_restore_video_state(CX,ES,BX);
16101                       00003A62            .42:
16102                                           ! Debug: list unsigned short BX = [S+2+$A] (used reg = )
16103 3A62           FF76         0C            push	$C[bp]
16104                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16105 3A65           FF76         16            push	$16[bp]
16106                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
16107 3A68           FF76         10            push	$10[bp]
16108                                           ! Debug: func () unsigned short = biosfn_restore_video_state+0 (used reg = )
16109 3A6B           E8         3A58            call	_biosfn_restore_video_state
16110 3A6E           83C4                   06  add	sp,*6
16111                                           !BCC_EOS
16112                                           ! 1890         break;
16113 3A71           EB           0E            jmp .3D
16114                                           !BCC_EOS
16115                                           ! 1891       }
16116                                           ! 1892      AX = ((AX & 0xff00) | (0x1C));
16117 3A73           EB           0C            jmp .3D
16118                       00003A75            .3F:
16119 3A75           2C                     00  sub	al,*0
16120 3A77           74           C9            je 	.40
16121 3A79           2C                     01  sub	al,*1
16122 3A7B           74           D4            je 	.41
16123 3A7D           2C                     01  sub	al,*1
16124 3A7F           74           E1            je 	.42
16125                       00003A81            .3D:
16126                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
16127 3A81           8B46         12            mov	ax,$12[bp]
16128 3A84           30C0                       xor	al,al
16129                                           ! Debug: or int = const $1C to unsigned int = ax+0 (used reg = )
16130 3A86           0C                     1C  or	al,*$1C
16131                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
16132 3A88           8946         12            mov	$12[bp],ax
16133                                           !BCC_EOS
16134                                           ! 1893      break;
16135 3A8B           E9         0107            br 	.1
16136                                           !BCC_EOS
16137                                           ! 1894    case 0x4f:
16138                                           ! 1895      if (vbe_has_vbe_display()) {
16139                       00003A8E            .43:
16140                                           ! Debug: func () unsigned short = vbe_has_vbe_display+0 (used reg = )
16141 3A8E           E8         587B            call	_vbe_has_vbe_display
16142 3A91           85C0                       test	ax,ax
16143 3A93         0F84         00A0            beq 	.44
16144                       00003A97            .45:
16145                                           ! 1896        switch(( AX & 0x00ff ))
16146                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
16147 3A97           8A46         12            mov	al,$12[bp]
16148                                           ! 1897        {
16149 3A9A           EB           6E            jmp .48
16150                                           ! 1898          case 0x00:
16151                                           ! 1899           vbe_biosfn_return_controller_information(&AX,ES,DI);
16152                       00003A9C            .49:
16153                                           ! Debug: list unsigned short DI = [S+2+2] (used reg = )
16154 3A9C           FF76         04            push	4[bp]
16155                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16156 3A9F           FF76         16            push	$16[bp]
16157                                           ! Debug: list * unsigned short AX = S+6+$10 (used reg = )
16158 3AA2           8D5E         12            lea	bx,$12[bp]
16159 3AA5           53                         push	bx
16160                                           ! Debug: func () void = vbe_biosfn_return_controller_information+0 (used reg = )
16161 3AA6           E8         58DC            call	_vbe_biosfn_return_controller_information
16162 3AA9           83C4                   06  add	sp,*6
16163                                           !BCC_EOS
16164                                           ! 1900           break;
16165 3AAC           E9         0086            br 	.46
16166                                           !BCC_EOS
16167                                           ! 1901          case 0x01:
16168                                           ! 1902           vbe_biosfn_return_mode_information(&AX,CX,ES,DI);
16169                       00003AAF            .4A:
16170                                           ! Debug: list unsigned short DI = [S+2+2] (used reg = )
16171 3AAF           FF76         04            push	4[bp]
16172                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16173 3AB2           FF76         16            push	$16[bp]
16174                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
16175 3AB5           FF76         10            push	$10[bp]
16176                                           ! Debug: list * unsigned short AX = S+8+$10 (used reg = )
16177 3AB8           8D5E         12            lea	bx,$12[bp]
16178 3ABB           53                         push	bx
16179                                           ! Debug: func () void = vbe_biosfn_return_mode_information+0 (used reg = )
16180 3ABC           E8         5B0A            call	_vbe_biosfn_return_mode_information
16181 3ABF           83C4                   08  add	sp,*8
16182                                           !BCC_EOS
16183                                           ! 1903           break;
16184 3AC2           EB           71            jmp .46
16185                                           !BCC_EOS
16186                                           ! 1904          case 0x02:
16187                                           ! 1905           vbe_biosfn_set_mode(&AX,BX,ES,DI);
16188                       00003AC4            .4B:
16189                                           ! Debug: list unsigned short DI = [S+2+2] (used reg = )
16190 3AC4           FF76         04            push	4[bp]
16191                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16192 3AC7           FF76         16            push	$16[bp]
16193                                           ! Debug: list unsigned short BX = [S+6+$A] (used reg = )
16194 3ACA           FF76         0C            push	$C[bp]
16195                                           ! Debug: list * unsigned short AX = S+8+$10 (used reg = )
16196 3ACD           8D5E         12            lea	bx,$12[bp]
16197 3AD0           53                         push	bx
16198                                           ! Debug: func () void = vbe_biosfn_set_mode+0 (used reg = )
16199 3AD1           E8         5C52            call	_vbe_biosfn_set_mode
16200 3AD4           83C4                   08  add	sp,*8
16201                                           !BCC_EOS
16202                                           ! 1906           break;
16203 3AD7           EB           5C            jmp .46
16204                                           !BCC_EOS
16205                                           ! 1907          case 0x04:
16206                                           ! 1908           vbe_biosfn_save_restore_state(&AX, CX, DX, ES, &BX);
16207                       00003AD9            .4C:
16208                                           ! Debug: list * unsigned short BX = S+2+$A (used reg = )
16209 3AD9           8D5E         0C            lea	bx,$C[bp]
16210 3ADC           53                         push	bx
16211                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16212 3ADD           FF76         16            push	$16[bp]
16213                                           ! Debug: list unsigned short DX = [S+6+$C] (used reg = )
16214 3AE0           FF76         0E            push	$E[bp]
16215                                           ! Debug: list unsigned short CX = [S+8+$E] (used reg = )
16216 3AE3           FF76         10            push	$10[bp]
16217                                           ! Debug: list * unsigned short AX = S+$A+$10 (used reg = )
16218 3AE6           8D5E         12            lea	bx,$12[bp]
16219 3AE9           53                         push	bx
16220                                           ! Debug: func () void = vbe_biosfn_save_restore_state+0 (used reg = )
16221 3AEA           E8         5F6D            call	_vbe_biosfn_save_restore_state
16222 3AED           83C4                   0A  add	sp,*$A
16223                                           !BCC_EOS
16224                                           ! 1909           break;
16225 3AF0           EB           43            jmp .46
16226                                           !BCC_EOS
16227                                           ! 1910          case 0x09:
16228                                           ! 1911           AX=0x100;
16229                       00003AF2            .4D:
16230                                           ! Debug: eq int = const $100 to unsigned short AX = [S+2+$10] (used reg = )
16231 3AF2           B8                   0100  mov	ax,#$100
16232 3AF5           8946         12            mov	$12[bp],ax
16233                                           !BCC_EOS
16234                                           ! 1912           break;
16235 3AF8           EB           3B            jmp .46
16236                                           !BCC_EOS
16237                                           ! 1913          case 0x0A:
16238                                           ! 1914           AX=0x100;
16239                       00003AFA            .4E:
16240                                           ! Debug: eq int = const $100 to unsigned short AX = [S+2+$10] (used reg = )
16241 3AFA           B8                   0100  mov	ax,#$100
16242 3AFD           8946         12            mov	$12[bp],ax
16243                                           !BCC_EOS
16244                                           ! 1915           break;
16245 3B00           EB           33            jmp .46
16246                                           !BCC_EOS
16247                                           ! 1916          default:
16248                                           ! 1917           AX=0x100;
16249                       00003B02            .4F:
16250                                           ! Debug: eq int = const $100 to unsigned short AX = [S+2+$10] (used reg = )
16251 3B02           B8                   0100  mov	ax,#$100
16252 3B05           8946         12            mov	$12[bp],ax
16253                                           !BCC_EOS
16254                                           ! 1918           }
16255                                           ! 1919         }
16256 3B08           EB           2B            jmp .46
16257                       00003B0A            .48:
16258 3B0A           2C                     00  sub	al,*0
16259 3B0C           72           F4            jb 	.4F
16260 3B0E           3C                     0A  cmp	al,*$A
16261 3B10           77           21            ja  	.50
16262 3B12           30E4                       xor	ah,ah
16263 3B14           D1E0                       shl	ax,*1
16264 3B16           89C3                       mov	bx,ax
16265 3B18           2E                         seg	cs
16266 3B19           FFA7       3B1D            br	.51[bx]
16267                       00003B1D            .51:
16268 3B1D                      3A9C            .word	.49
16269 3B1F                      3AAF            .word	.4A
16270 3B21                      3AC4            .word	.4B
16271 3B23                      3B02            .word	.4F
16272 3B25                      3AD9            .word	.4C
16273 3B27                      3B02            .word	.4F
16274 3B29                      3B02            .word	.4F
16275 3B2B                      3B02            .word	.4F
16276 3B2D                      3B02            .word	.4F
16277 3B2F                      3AF2            .word	.4D
16278 3B31                      3AFA            .word	.4E
16279                       00003B33            .50:
16280 3B33           EB           CD            jmp	.4F
16281                       00003B35            .46:
16282                                           ! 1920         else {
16283 3B35           EB           06            jmp .52
16284                       00003B37            .44:
16285                                           ! 1921           AX=0x0100;
16286                                           ! Debug: eq int = const $100 to unsigned short AX = [S+2+$10] (used reg = )
16287 3B37           B8                   0100  mov	ax,#$100
16288 3B3A           8946         12            mov	$12[bp],ax
16289                                           !BCC_EOS
16290                                           ! 1922           }
16291                                           ! 1923         break;
16292                       00003B3D            .52:
16293 3B3D           EB           56            jmp .1
16294                                           !BCC_EOS
16295                                           ! 1924   }
16296                                           ! 1925 }
16297 3B3F           EB           54            jmp .1
16298                       00003B41            .3:
16299 3B41           2D                   0000  sub	ax,*0
16300 3B44           7C           4F            jl  	.1
16301 3B46           3D                   001C  cmp	ax,*$1C
16302 3B49           77           43            ja  	.53
16303 3B4B           D1E0                       shl	ax,*1
16304 3B4D           89C3                       mov	bx,ax
16305 3B4F           2E                         seg	cs
16306 3B50           FFA7       3B54            br	.54[bx]
16307                       00003B54            .54:
16308 3B54                      3669            .word	.4
16309 3B56                      36C7            .word	.13
16310 3B58                      36DE            .word	.14
16311 3B5A                      36F2            .word	.15
16312 3B5C                      370B            .word	.16
16313 3B5E                      3722            .word	.17
16314 3B60                      3730            .word	.18
16315 3B62                      376B            .word	.19
16316 3B64                      37A5            .word	.1A
16317 3B66                      37BA            .word	.1B
16318 3B68                      37DA            .word	.1C
16319 3B6A                      3B95            .word	.1
16320 3B6C                      37FA            .word	.1D
16321 3B6E                      3817            .word	.1E
16322 3B70                      3832            .word	.1F
16323 3B72                      3B95            .word	.1
16324 3B74                      384F            .word	.20
16325 3B76                      385E            .word	.21
16326 3B78                      399C            .word	.33
16327 3B7A                      39EC            .word	.3A
16328 3B7C                      3B95            .word	.1
16329 3B7E                      3B95            .word	.1
16330 3B80                      3B95            .word	.1
16331 3B82                      3B95            .word	.1
16332 3B84                      3B95            .word	.1
16333 3B86                      3B95            .word	.1
16334 3B88                      3B95            .word	.1
16335 3B8A                      3A20            .word	.3B
16336 3B8C                      3A3C            .word	.3C
16337                       00003B8E            .53:
16338 3B8E           2D                   004F  sub	ax,*$4F
16339 3B91         0F84         FEF9            beq 	.43
16340                       00003B95            .1:
16341                       FFFFFFFE            ..FFFF	=	-2
16342 3B95           5D                         pop	bp
16343 3B96           C3                         ret
16344                                           ! 1926 static void biosfn_set_video_mode(mode) Bit8u mode;
16345                                           ! Register BX used in function int10_func
16346                       00003B97            _biosfn_set_video_mode:
16347                                           !BCC_EOS
16348                                           ! 1927 {
16349                                           ! 1928  Bit8u noclearmem=mode&0x80;
16350 3B97           55                         push	bp
16351 3B98           89E5                       mov	bp,sp
16352 3B9A           4C                         dec	sp
16353                                           ! Debug: and int = const $80 to unsigned char mode = [S+3+2] (used reg = )
16354 3B9B           8A46         04            mov	al,4[bp]
16355 3B9E           24                     80  and	al,#$80
16356                                           ! Debug: eq unsigned char = al+0 to unsigned char noclearmem = [S+3-3] (used reg = )
16357 3BA0           8846         FF            mov	-1[bp],al
16358                                           !BCC_EOS
16359                                           ! 1929  Bit8u line,mmask,*palette,vpti;
16360                                           !BCC_EOS
16361                                           ! 1930  Bit16u i,twidth,theightm1,cheight;
16362                                           !BCC_EOS
16363                                           ! 1931  Bit8u modeset_ctl,video_ctl,vga_switches;
16364                                           !BCC_EOS
16365                                           ! 1932  Bit16u crtc_addr;
16366                                           !BCC_EOS
16367                                           ! 1933  if (vbe_has_vbe_display()) {
16368 3BA3           83C4                   EB  add	sp,*-$15
16369                                           ! Debug: func () unsigned short = vbe_has_vbe_display+0 (used reg = )
16370 3BA6           E8         5763            call	_vbe_has_vbe_display
16371 3BA9           85C0                       test	ax,ax
16372 3BAB           74           08            je  	.55
16373                       00003BAD            .56:
16374                                           ! 1934    dispi_set_enable(0x00);
16375                                           ! Debug: list int = const 0 (used reg = )
16376 3BAD           31C0                       xor	ax,ax
16377 3BAF           50                         push	ax
16378                                           ! Debug: func () void = dispi_set_enable+0 (used reg = )
16379 3BB0           E8         5526            call	_dispi_set_enable
16380 3BB3           44                         inc	sp
16381 3BB4           44                         inc	sp
16382                                           !BCC_EOS
16383                                           ! 1935   }
16384                                           ! 1936  mode=mode&0x7f;
16385                       00003BB5            .55:
16386                                           ! Debug: and int = const $7F to unsigned char mode = [S+$18+2] (used reg = )
16387 3BB5           8A46         04            mov	al,4[bp]
16388 3BB8           24                     7F  and	al,*$7F
16389                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$18+2] (used reg = )
16390 3BBA           8846         04            mov	4[bp],al
16391                                           !BCC_EOS
16392                                           ! 1937  line=find_vga_entry(mode);
16393                                           ! Debug: list unsigned char mode = [S+$18+2] (used reg = )
16394 3BBD           8A46         04            mov	al,4[bp]
16395 3BC0           30E4                       xor	ah,ah
16396 3BC2           50                         push	ax
16397                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
16398 3BC3           E8         3EDE            call	_find_vga_entry
16399 3BC6           44                         inc	sp
16400 3BC7           44                         inc	sp
16401                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$18-4] (used reg = )
16402 3BC8           8846         FE            mov	-2[bp],al
16403                                           !BCC_EOS
16404                                           ! 1938  if(line==0xFF)
16405                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$18-4] (used reg = )
16406 3BCB           8A46         FE            mov	al,-2[bp]
16407 3BCE           3C                     FF  cmp	al,#$FF
16408 3BD0           75           04            jne 	.57
16409                       00003BD2            .58:
16410                                           ! 1939   return;
16411 3BD2           89EC                       mov	sp,bp
16412 3BD4           5D                         pop	bp
16413 3BD5           C3                         ret
16414                                           !BCC_EOS
16415                                           ! 1940  vpti=line_to_vpti[line];
16416                       00003BD6            .57:
16417                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] unsigned char = line_to_vpti+0 (used reg = )
16418 3BD6           8A46         FE            mov	al,-2[bp]
16419 3BD9           30E4                       xor	ah,ah
16420 3BDB           89C3                       mov	bx,ax
16421                                           ! Debug: eq unsigned char = [bx+_line_to_vpti+0] to unsigned char vpti = [S+$18-9] (used reg = )
16422 3BDD           8A87       027D            mov	al,_line_to_vpti[bx]
16423 3BE1           8846         F9            mov	-7[bp],al
16424                                           !BCC_EOS
16425                                           ! 1941  twidth=video_param_table[vpti].twidth;
16426                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16427 3BE4           8A46         F9            mov	al,-7[bp]
16428 3BE7           30E4                       xor	ah,ah
16429 3BE9           B1                     06  mov	cl,*6
16430 3BEB           D3E0                       shl	ax,cl
16431 3BED           89C3                       mov	bx,ax
16432                                           ! Debug: eq unsigned char = [bx+_video_param_table+0] to unsigned short twidth = [S+$18-$E] (used reg = )
16433 3BEF           8A87       0291            mov	al,_video_param_table[bx]
16434 3BF3           30E4                       xor	ah,ah
16435 3BF5           8946         F4            mov	-$C[bp],ax
16436                                           !BCC_EOS
16437                                           ! 1942  theightm1=video_param_table[vpti].theightm1;
16438                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16439 3BF8           8A46         F9            mov	al,-7[bp]
16440 3BFB           30E4                       xor	ah,ah
16441 3BFD           B1                     06  mov	cl,*6
16442 3BFF           D3E0                       shl	ax,cl
16443 3C01           89C3                       mov	bx,ax
16444 3C03           81C3                 0291  add	bx,#_video_param_table
16445                                           ! Debug: eq unsigned char = [bx+1] to unsigned short theightm1 = [S+$18-$10] (used reg = )
16446 3C07           8A47         01            mov	al,1[bx]
16447 3C0A           30E4                       xor	ah,ah
16448 3C0C           8946         F2            mov	-$E[bp],ax
16449                                           !BCC_EOS
16450                                           ! 1943  cheight=video_param_table[vpti].cheight;
16451                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16452 3C0F           8A46         F9            mov	al,-7[bp]
16453 3C12           30E4                       xor	ah,ah
16454 3C14           B1                     06  mov	cl,*6
16455 3C16           D3E0                       shl	ax,cl
16456 3C18           89C3                       mov	bx,ax
16457 3C1A           81C3                 0291  add	bx,#_video_param_table
16458                                           ! Debug: eq unsigned char = [bx+2] to unsigned short cheight = [S+$18-$12] (used reg = )
16459 3C1E           8A47         02            mov	al,2[bx]
16460 3C21           30E4                       xor	ah,ah
16461 3C23           8946         F0            mov	-$10[bp],ax
16462                                           !BCC_EOS
16463                                           ! 1944  video_ctl=read_byte(0x4
16464                                           ! 1944 0,0x87);
16465                                           ! Debug: list int = const $87 (used reg = )
16466 3C26           B8                   0087  mov	ax,#$87
16467 3C29           50                         push	ax
16468                                           ! Debug: list int = const $40 (used reg = )
16469 3C2A           B8                   0040  mov	ax,*$40
16470 3C2D           50                         push	ax
16471                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16472 3C2E           E8         3F5F            call	_read_byte
16473 3C31           83C4                   04  add	sp,*4
16474                                           ! Debug: eq unsigned char = al+0 to unsigned char video_ctl = [S+$18-$14] (used reg = )
16475 3C34           8846         EE            mov	-$12[bp],al
16476                                           !BCC_EOS
16477                                           ! 1945  vga_switches=read_byte(0x40,0x88);
16478                                           ! Debug: list int = const $88 (used reg = )
16479 3C37           B8                   0088  mov	ax,#$88
16480 3C3A           50                         push	ax
16481                                           ! Debug: list int = const $40 (used reg = )
16482 3C3B           B8                   0040  mov	ax,*$40
16483 3C3E           50                         push	ax
16484                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16485 3C3F           E8         3F4E            call	_read_byte
16486 3C42           83C4                   04  add	sp,*4
16487                                           ! Debug: eq unsigned char = al+0 to unsigned char vga_switches = [S+$18-$15] (used reg = )
16488 3C45           8846         ED            mov	-$13[bp],al
16489                                           !BCC_EOS
16490                                           ! 1946  modeset_ctl=read_byte(0x40,0x89);
16491                                           ! Debug: list int = const $89 (used reg = )
16492 3C48           B8                   0089  mov	ax,#$89
16493 3C4B           50                         push	ax
16494                                           ! Debug: list int = const $40 (used reg = )
16495 3C4C           B8                   0040  mov	ax,*$40
16496 3C4F           50                         push	ax
16497                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16498 3C50           E8         3F3D            call	_read_byte
16499 3C53           83C4                   04  add	sp,*4
16500                                           ! Debug: eq unsigned char = al+0 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16501 3C56           8846         EF            mov	-$11[bp],al
16502                                           !BCC_EOS
16503                                           ! 1947  if((modeset_ctl&0x08)==0)
16504                                           ! Debug: and int = const 8 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16505 3C59           8A46         EF            mov	al,-$11[bp]
16506 3C5C           24                     08  and	al,*8
16507                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
16508 3C5E           84C0                       test	al,al
16509 3C60         0F85         0145            bne 	.59
16510                       00003C64            .5A:
16511                                           ! 1948   {
16512                                           ! 1949    outb(0x3c6,vga_modes[line].pelmask);
16513                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16514 3C64           8A46         FE            mov	al,-2[bp]
16515 3C67           30E4                       xor	ah,ah
16516 3C69           B1                     03  mov	cl,*3
16517 3C6B           D3E0                       shl	ax,cl
16518 3C6D           89C3                       mov	bx,ax
16519 3C6F           81C3                 01FD  add	bx,#_vga_modes
16520                                           ! Debug: list unsigned char = [bx+6] (used reg = )
16521 3C73           8A47         06            mov	al,6[bx]
16522 3C76           30E4                       xor	ah,ah
16523 3C78           50                         push	ax
16524                                           ! Debug: list int = const $3C6 (used reg = )
16525 3C79           B8                   03C6  mov	ax,#$3C6
16526 3C7C           50                         push	ax
16527                                           ! Debug: func () void = outb+0 (used reg = )
16528 3C7D           E8         3F7C            call	_outb
16529 3C80           83C4                   04  add	sp,*4
16530                                           !BCC_EOS
16531                                           ! 1950    outb(0x3c8,0x00);
16532                                           ! Debug: list int = const 0 (used reg = )
16533 3C83           31C0                       xor	ax,ax
16534 3C85           50                         push	ax
16535                                           ! Debug: list int = const $3C8 (used reg = )
16536 3C86           B8                   03C8  mov	ax,#$3C8
16537 3C89           50                         push	ax
16538                                           ! Debug: func () void = outb+0 (used reg = )
16539 3C8A           E8         3F6F            call	_outb
16540 3C8D           83C4                   04  add	sp,*4
16541                                           !BCC_EOS
16542                                           ! 1951    switch(vga_modes[line].dacmodel)
16543                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16544 3C90           8A46         FE            mov	al,-2[bp]
16545 3C93           30E4                       xor	ah,ah
16546 3C95           B1                     03  mov	cl,*3
16547 3C97           D3E0                       shl	ax,cl
16548 3C99           89C3                       mov	bx,ax
16549 3C9B           81C3                 01FD  add	bx,#_vga_modes
16550 3C9F           8A47         07            mov	al,7[bx]
16551                                           ! 1952     {case 0:
16552 3CA2           EB           22            jmp .5D
16553                                           ! 1953       palette=&palette0;
16554                       00003CA4            .5E:
16555                                           ! Debug: eq * [$40] [3] unsigned char = palette0+0 to * unsigned char palette = [S+$18-8] (used reg = )
16556 3CA4           BB                   0A11  mov	bx,#_palette0
16557 3CA7           895E         FA            mov	-6[bp],bx
16558                                           !BCC_EOS
16559                                           ! 1954       break;
16560 3CAA           EB           2A            jmp .5B
16561                                           !BCC_EOS
16562                                           ! 1955      case 1:
16563                                           ! 1956       palette=&palette1;
16564                       00003CAC            .5F:
16565                                           ! Debug: eq * [$40] [3] unsigned char = palette1+0 to * unsigned char palette = [S+$18-8] (used reg = )
16566 3CAC           BB                   0AD1  mov	bx,#_palette1
16567 3CAF           895E         FA            mov	-6[bp],bx
16568                                           !BCC_EOS
16569                                           ! 1957       break;
16570 3CB2           EB           22            jmp .5B
16571                                           !BCC_EOS
16572                                           ! 1958      case 2:
16573                                           ! 1959       palette=&palette2;
16574                       00003CB4            .60:
16575                                           ! Debug: eq * [$40] [3] unsigned char = palette2+0 to * unsigned char palette = [S+$18-8] (used reg = )
16576 3CB4           BB                   0B91  mov	bx,#_palette2
16577 3CB7           895E         FA            mov	-6[bp],bx
16578                                           !BCC_EOS
16579                                           ! 1960       break;
16580 3CBA           EB           1A            jmp .5B
16581                                           !BCC_EOS
16582                                           ! 1961      case 3:
16583                                           ! 1962       palette=&palette3;
16584                       00003CBC            .61:
16585                                           ! Debug: eq * [$100] [3] unsigned char = palette3+0 to * unsigned char palette = [S+$18-8] (used reg = )
16586 3CBC           BB                   0C51  mov	bx,#_palette3
16587 3CBF           895E         FA            mov	-6[bp],bx
16588                                           !BCC_EOS
16589                                           ! 1963       break;
16590 3CC2           EB           12            jmp .5B
16591                                           !BCC_EOS
16592                                           ! 1964     }
16593                                           ! 1965    for(i=0;i<0x0100;i++)
16594 3CC4           EB           10            jmp .5B
16595                       00003CC6            .5D:
16596 3CC6           2C                     00  sub	al,*0
16597 3CC8           74           DA            je 	.5E
16598 3CCA           2C                     01  sub	al,*1
16599 3CCC           74           DE            je 	.5F
16600 3CCE           2C                     01  sub	al,*1
16601 3CD0           74           E2            je 	.60
16602 3CD2           2C                     01  sub	al,*1
16603 3CD4           74           E6            je 	.61
16604                       00003CD6            .5B:
16605                       FFFFFFE8            ..FFFE	=	-$18
16606                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
16607 3CD6           31C0                       xor	ax,ax
16608 3CD8           8946         F6            mov	-$A[bp],ax
16609                                           !BCC_EOS
16610                                           !BCC_EOS
16611                                           ! 1966     {if(i<=dac_regs[vga_modes[line].dacmodel])
16612 3CDB           E9         00AB            br 	.64
16613                       00003CDE            .65:
16614                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16615 3CDE           8A46         FE            mov	al,-2[bp]
16616 3CE1           30E4                       xor	ah,ah
16617 3CE3           B1                     03  mov	cl,*3
16618 3CE5           D3E0                       shl	ax,cl
16619 3CE7           89C3                       mov	bx,ax
16620 3CE9           81C3                 01FD  add	bx,#_vga_modes
16621                                           ! Debug: ptradd unsigned char = [bx+7] to [4] unsigned char = dac_regs+0 (used reg = )
16622 3CED           8A47         07            mov	al,7[bx]
16623 3CF0           30E4                       xor	ah,ah
16624 3CF2           89C3                       mov	bx,ax
16625                                           ! Debug: le unsigned char = [bx+_dac_regs+0] to unsigned short i = [S+$18-$C] (used reg = )
16626 3CF4           8A87       028D            mov	al,_dac_regs[bx]
16627 3CF8           30E4                       xor	ah,ah
16628 3CFA           3B46         F6            cmp	ax,-$A[bp]
16629 3CFD           72           5C            jb  	.66
16630                       00003CFF            .67:
16631                                           ! 1967       {outb(0x3c9,palette[(i*3)+0]);
16632                                           ! Debug: mul int = const 3 to unsigned short i = [S+$18-$C] (used reg = )
16633 3CFF           8B46         F6            mov	ax,-$A[bp]
16634 3D02           89C2                       mov	dx,ax
16635 3D04           D1E0                       shl	ax,*1
16636 3D06           01D0                       add	ax,dx
16637                                           ! Debug: add int = const 0 to unsigned int = ax+0 (used reg = )
16638                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char palette = [S+$18-8] (used reg = )
16639 3D08           0346         FA            add	ax,-6[bp]
16640 3D0B           89C3                       mov	bx,ax
16641                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16642 3D0D           8A07                       mov	al,[bx]
16643 3D0F           30E4                       xor	ah,ah
16644 3D11           50                         push	ax
16645                                           ! Debug: list int = const $3C9 (used reg = )
16646 3D12           B8                   03C9  mov	ax,#$3C9
16647 3D15           50                         push	ax
16648                                           ! Debug: func () void = outb+0 (used reg = )
16649 3D16           E8         3EE3            call	_outb
16650 3D19           83C4                   04  add	sp,*4
16651                                           !BCC_EOS
16652                                           ! 1968        outb(0x3c9,palette[(i*3)+1]);
16653                                           ! Debug: mul int = const 3 to unsigned short i = [S+$18-$C] (used reg = )
16654 3D1C           8B46         F6            mov	ax,-$A[bp]
16655 3D1F           89C2                       mov	dx,ax
16656 3D21           D1E0                       shl	ax,*1
16657 3D23           01D0                       add	ax,dx
16658                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
16659                                           ! Debug: ptradd unsigned int = ax+1 to * unsigned char palette = [S+$18-8] (used reg = )
16660 3D25           40                         inc	ax
16661 3D26           0346         FA            add	ax,-6[bp]
16662 3D29           89C3                       mov	bx,ax
16663                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16664 3D2B           8A07                       mov	al,[bx]
16665 3D2D           30E4                       xor	ah,ah
16666 3D2F           50                         push	ax
16667                                           ! Debug: list int = const $3C9 (used reg = )
16668 3D30           B8                   03C9  mov	ax,#$3C9
16669 3D33           50                         push	ax
16670                                           ! Debug: func () void = outb+0 (used reg = )
16671 3D34           E8         3EC5            call	_outb
16672 3D37           83C4                   04  add	sp,*4
16673                                           !BCC_EOS
16674                                           ! 1969        outb(0x3c9,palette[(i*3)+2]);
16675                                           ! Debug: mul int = const 3 to unsigned short i = [S+$18-$C] (used reg = )
16676 3D3A           8B46         F6            mov	ax,-$A[bp]
16677 3D3D           89C2                       mov	dx,ax
16678 3D3F           D1E0                       shl	ax,*1
16679 3D41           01D0                       add	ax,dx
16680                                           ! Debug: add int = const 2 to unsigned int = ax+0 (used reg = )
16681                                           ! Debug: ptradd unsigned int = ax+2 to * unsigned char palette = [S+$18-8] (used reg = )
16682 3D43           40                         inc	ax
16683 3D44           40                         inc	ax
16684 3D45           0346         FA            add	ax,-6[bp]
16685 3D48           89C3                       mov	bx,ax
16686                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16687 3D4A           8A07                       mov	al,[bx]
16688 3D4C           30E4                       xor	ah,ah
16689 3D4E           50                         push	ax
16690                                           ! Debug: list int = const $3C9 (used reg = )
16691 3D4F           B8                   03C9  mov	ax,#$3C9
16692 3D52           50                         push	ax
16693                                           ! Debug: func () void = outb+0 (used reg = )
16694 3D53           E8         3EA6            call	_outb
16695 3D56           83C4                   04  add	sp,*4
16696                                           !BCC_EOS
16697                                           ! 1970       }
16698                                           ! 1971      else
16699                                           ! 1972       {outb(0x3c9,0);
16700 3D59           EB           27            jmp .68
16701                       00003D5B            .66:
16702                                           ! Debug: list int = const 0 (used reg = )
16703 3D5B           31C0                       xor	ax,ax
16704 3D5D           50                         push	ax
16705                                           ! Debug: list int = const $3C9 (used reg = )
16706 3D5E           B8                   03C9  mov	ax,#$3C9
16707 3D61           50                         push	ax
16708                                           ! Debug: func () void = outb+0 (used reg = )
16709 3D62           E8         3E97            call	_outb
16710 3D65           83C4                   04  add	sp,*4
16711                                           !BCC_EOS
16712                                           ! 1973        outb(0x3c9,0);
16713                                           ! Debug: list int = const 0 (used reg = )
16714 3D68           31C0                       xor	ax,ax
16715 3D6A           50                         push	ax
16716                                           ! Debug: list int = const $3C9 (used reg = )
16717 3D6B           B8                   03C9  mov	ax,#$3C9
16718 3D6E           50                         push	ax
16719                                           ! Debug: func () void = outb+0 (used reg = )
16720 3D6F           E8         3E8A            call	_outb
16721 3D72           83C4                   04  add	sp,*4
16722                                           !BCC_EOS
16723                                           ! 1974        outb(0x3c9,0);
16724                                           ! Debug: list int = const 0 (used reg = )
16725 3D75           31C0                       xor	ax,ax
16726 3D77           50                         push	ax
16727                                           ! Debug: list int = const $3C9 (used reg = )
16728 3D78           B8                   03C9  mov	ax,#$3C9
16729 3D7B           50                         push	ax
16730                                           ! Debug: func () void = outb+0 (used reg = )
16731 3D7C           E8         3E7D            call	_outb
16732 3D7F           83C4                   04  add	sp,*4
16733                                           !BCC_EOS
16734                                           ! 1975       }
16735                                           ! 1976     }
16736                       00003D82            .68:
16737                                           ! 1977    if((modeset_ctl&0x02)==0x02)
16738                       00003D82            .63:
16739                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16740 3D82           8B46         F6            mov	ax,-$A[bp]
16741 3D85           40                         inc	ax
16742 3D86           8946         F6            mov	-$A[bp],ax
16743                       00003D89            .64:
16744                                           ! Debug: lt int = const $100 to unsigned short i = [S+$18-$C] (used reg = )
16745 3D89           8B46         F6            mov	ax,-$A[bp]
16746 3D8C           3D                   0100  cmp	ax,#$100
16747 3D8F         0F82         FF4B            blo 	.65
16748                       00003D93            .69:
16749                       00003D93            .62:
16750                                           ! Debug: and int = const 2 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16751 3D93           8A46         EF            mov	al,-$11[bp]
16752 3D96           24                     02  and	al,*2
16753                                           ! Debug: logeq int = const 2 to unsigned char = al+0 (used reg = )
16754 3D98           3C                     02  cmp	al,*2
16755 3D9A           75           0D            jne 	.6A
16756                       00003D9C            .6B:
16757                                           ! 1978     {
16758                                           ! 1979      biosfn_perform_gray_scale_summing(0x00, 0x100);
16759                                           ! Debug: list int = const $100 (used reg = )
16760 3D9C           B8                   0100  mov	ax,#$100
16761 3D9F           50                         push	ax
16762                                           ! Debug: list int = const 0 (used reg = )
16763 3DA0           31C0                       xor	ax,ax
16764 3DA2           50                         push	ax
16765                                           ! Debug: func () void = biosfn_perform_gray_scale_summing+0 (used reg = )
16766 3DA3           E8         26E3            call	_biosfn_perform_gray_scale_summing
16767 3DA6           83C4                   04  add	sp,*4
16768                                           !BCC_EOS
16769                                           ! 1980     }
16770                                           ! 1981   }
16771                       00003DA9            .6A:
16772                                           ! 1982  inb(0x3da);
16773                       00003DA9            .59:
16774                                           ! Debug: list int = const $3DA (used reg = )
16775 3DA9           B8                   03DA  mov	ax,#$3DA
16776 3DAC           50                         push	ax
16777                                           ! Debug: func () unsigned char = inb+0 (used reg = )
16778 3DAD           E8         3E36            call	_inb
16779 3DB0           44                         inc	sp
16780 3DB1           44                         inc	sp
16781                                           !BCC_EOS
16782                                           ! 1983  for(i=0;i<=0x13;i++)
16783                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
16784 3DB2           31C0                       xor	ax,ax
16785 3DB4           8946         F6            mov	-$A[bp],ax
16786                                           !BCC_EOS
16787                                           !BCC_EOS
16788                                           ! 1984   {outb(0x3c0,i);
16789 3DB7           EB           38            jmp .6E
16790                       00003DB9            .6F:
16791                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
16792 3DB9           FF76         F6            push	-$A[bp]
16793                                           ! Debug: list int = const $3C0 (used reg = )
16794 3DBC           B8                   03C0  mov	ax,#$3C0
16795 3DBF           50                         push	ax
16796                                           ! Debug: func () void = outb+0 (used reg = )
16797 3DC0           E8         3E39            call	_outb
16798 3DC3           83C4                   04  add	sp,*4
16799                                           !BCC_EOS
16800                                           ! 1985    outb(0x3c0,video_param_table[vpti].actl_regs[i]);
16801                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16802 3DC6           8A46         F9            mov	al,-7[bp]
16803 3DC9           30E4                       xor	ah,ah
16804 3DCB           B1                     06  mov	cl,*6
16805 3DCD           D3E0                       shl	ax,cl
16806 3DCF           89C3                       mov	bx,ax
16807 3DD1           81C3                 0291  add	bx,#_video_param_table
16808                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [$14] unsigned char = bx+$23 (used reg = )
16809 3DD5           8B46         F6            mov	ax,-$A[bp]
16810 3DD8           01C3                       add	bx,ax
16811                                           ! Debug: list unsigned char = [bx+$23] (used reg = )
16812 3DDA           8A47         23            mov	al,$23[bx]
16813 3DDD           30E4                       xor	ah,ah
16814 3DDF           50                         push	ax
16815                                           ! Debug: list int = const $3C0 (used reg = )
16816 3DE0           B8                   03C0  mov	ax,#$3C0
16817 3DE3           50                         push	ax
16818                                           ! Debug: func () void = outb+0 (used reg = )
16819 3DE4           E8         3E15            call	_outb
16820 3DE7           83C4                   04  add	sp,*4
16821                                           !BCC_EOS
16822                                           ! 1986   }
16823                                           ! 1987  outb(0x3c0,0x14);
16824                       00003DEA            .6D:
16825                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16826 3DEA           8B46         F6            mov	ax,-$A[bp]
16827 3DED           40                         inc	ax
16828 3DEE           8946         F6            mov	-$A[bp],ax
16829                       00003DF1            .6E:
16830                                           ! Debug: le int = const $13 to unsigned short i = [S+$18-$C] (used reg = )
16831 3DF1           8B46         F6            mov	ax,-$A[bp]
16832 3DF4           3D                   0013  cmp	ax,*$13
16833 3DF7           76           C0            jbe	.6F
16834                       00003DF9            .70:
16835                       00003DF9            .6C:
16836                                           ! Debug: list int = const $14 (used reg = )
16837 3DF9           B8                   0014  mov	ax,*$14
16838 3DFC           50                         push	ax
16839                                           ! Debug: list int = const $3C0 (used reg = )
16840 3DFD           B8                   03C0  mov	ax,#$3C0
16841 3E00           50                         push	ax
16842                                           ! Debug: func () void = outb+0 (used reg = )
16843 3E01           E8         3DF8            call	_outb
16844 3E04           83C4                   04  add	sp,*4
16845                                           !BCC_EOS
16846                                           ! 1988  outb(0x3c0,0x00);
16847                                           ! Debug: list int = const 0 (used reg = )
16848 3E07           31C0                       xor	ax,ax
16849 3E09           50                         push	ax
16850                                           ! Debug: list int = const $3C0 (used reg = )
16851 3E0A           B8                   03C0  mov	ax,#$3C0
16852 3E0D           50                         push	ax
16853                                           ! Debug: func () void = outb+0 (used reg = )
16854 3E0E           E8         3DEB            call	_outb
16855 3E11           83C4                   04  add	sp,*4
16856                                           !BCC_EOS
16857                                           ! 1989  outb(0x3c4,0);
16858                                           ! Debug: list int = const 0 (used reg = )
16859 3E14           31C0                       xor	ax,ax
16860 3E16           50                         push	ax
16861                                           ! Debug: list int = const $3C4 (used reg = )
16862 3E17           B8                   03C4  mov	ax,#$3C4
16863 3E1A           50                         push	ax
16864                                           ! Debug: func () void = outb+0 (used reg = )
16865 3E1B           E8         3DDE            call	_outb
16866 3E1E           83C4                   04  add	sp,*4
16867                                           !BCC_EOS
16868                                           ! 1990  outb(0x3c5,0x03);
16869                                           ! Debug: list int = const 3 (used reg = )
16870 3E21           B8                   0003  mov	ax,*3
16871 3E24           50                         push	ax
16872                                           ! Debug: list int = const $3C5 (used reg = )
16873 3E25           B8                   03C5  mov	ax,#$3C5
16874 3E28           50                         push	ax
16875                                           ! Debug: func () void = outb+0 (used reg = )
16876 3E29           E8         3DD0            call	_outb
16877 3E2C           83C4                   04  add	sp,*4
16878                                           !BCC_EOS
16879                                           ! 1991  for(i=1;i<=4;i++)
16880                                           ! Debug: eq int = const 1 to unsigned short i = [S+$18-$C] (used reg = )
16881 3E2F           B8                   0001  mov	ax,*1
16882 3E32           8946         F6            mov	-$A[bp],ax
16883                                           !BCC_EOS
16884                                           !BCC_EOS
16885                                           ! 1992   {outb(0x3c4,i);
16886 3E35           EB           3F            jmp .73
16887                       00003E37            .74:
16888                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
16889 3E37           FF76         F6            push	-$A[bp]
16890                                           ! Debug: list int = const $3C4 (used reg = )
16891 3E3A           B8                   03C4  mov	ax,#$3C4
16892 3E3D           50                         push	ax
16893                                           ! Debug: func () void = outb+0 (used reg = )
16894 3E3E           E8         3DBB            call	_outb
16895 3E41           83C4                   04  add	sp,*4
16896                                           !BCC_EOS
16897                                           ! 1993    outb(0x3c5,video_param_table[vpti].sequ_regs[i - 1]);
16898                                           ! Debug: sub int = const 1 to unsigned short i = [S+$18-$C] (used reg = )
16899 3E44           8B46         F6            mov	ax,-$A[bp]
16900 3E47           48                         dec	ax
16901 3E48           50                         push	ax
16902                                           ! Debug: ptradd unsigned char vpti = [S+$1A-9] to [$1E] struct  = video_param_table+0 (used reg = )
16903 3E49           8A46         F9            mov	al,-7[bp]
16904 3E4C           30E4                       xor	ah,ah
16905 3E4E           B1                     06  mov	cl,*6
16906 3E50           D3E0                       shl	ax,cl
16907 3E52           89C3                       mov	bx,ax
16908 3E54           81C3                 0291  add	bx,#_video_param_table
16909                                           ! Debug: ptradd unsigned int (temp) = [S+$1A-$1A] to [4] unsigned char = bx+5 (used reg = )
16910 3E58           8B46         E8            mov	ax,-$18[bp]
16911 3E5B           01C3                       add	bx,ax
16912 3E5D           44                         inc	sp
16913 3E5E           44                         inc	sp
16914                                           ! Debug: list unsigned char = [bx+5] (used reg = )
16915 3E5F           8A47         05            mov	al,5[bx]
16916 3E62           30E4                       xor	ah,ah
16917 3E64           50                         push	ax
16918                                           ! Debug: list int = const $3C5 (used reg = )
16919 3E65           B8                   03C5  mov	ax,#$3C5
16920 3E68           50                         push	ax
16921                                           ! Debug: func () void = outb+0 (used reg = )
16922 3E69           E8         3D90            call	_outb
16923 3E6C           83C4                   04  add	sp,*4
16924                                           !BCC_EOS
16925                                           ! 1994   }
16926                                           ! 1995  for(i=0;i<=8;i++)
16927                       00003E6F            .72:
16928                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16929 3E6F           8B46         F6            mov	ax,-$A[bp]
16930 3E72           40                         inc	ax
16931 3E73           8946         F6            mov	-$A[bp],ax
16932                       00003E76            .73:
16933                                           ! Debug: le int = const 4 to unsigned short i = [S+$18-$C] (used reg = )
16934 3E76           8B46         F6            mov	ax,-$A[bp]
16935 3E79           3D                   0004  cmp	ax,*4
16936 3E7C           76           B9            jbe	.74
16937                       00003E7E            .75:
16938                       00003E7E            .71:
16939                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
16940 3E7E           31C0                       xor	ax,ax
16941 3E80           8946         F6            mov	-$A[bp],ax
16942                                           !BCC_EOS
16943                                           !BCC_EOS
16944                                           ! 1996   {outb(0x3ce,i);
16945 3E83           EB           38            jmp .78
16946                       00003E85            .79:
16947                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
16948 3E85           FF76         F6            push	-$A[bp]
16949                                           ! Debug: list int = const $3CE (used reg = )
16950 3E88           B8                   03CE  mov	ax,#$3CE
16951 3E8B           50                         push	ax
16952                                           ! Debug: func () void = outb+0 (used reg = )
16953 3E8C           E8         3D6D            call	_outb
16954 3E8F           83C4                   04  add	sp,*4
16955                                           !BCC_EOS
16956                                           ! 1997    outb(0x3cf,video_param_table[vpti].grdc_regs[i]);
16957                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16958 3E92           8A46         F9            mov	al,-7[bp]
16959 3E95           30E4                       xor	ah,ah
16960 3E97           B1                     06  mov	cl,*6
16961 3E99           D3E0                       shl	ax,cl
16962 3E9B           89C3                       mov	bx,ax
16963 3E9D           81C3                 0291  add	bx,#_video_param_table
16964                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [9] unsigned char = bx+$37 (used reg = )
16965 3EA1           8B46         F6            mov	ax,-$A[bp]
16966 3EA4           01C3                       add	bx,ax
16967                                           ! Debug: list unsigned char = [bx+$37] (used reg = )
16968 3EA6           8A47         37            mov	al,$37[bx]
16969 3EA9           30E4                       xor	ah,ah
16970 3EAB           50                         push	ax
16971                                           ! Debug: list int = const $3CF (used reg = )
16972 3EAC           B8                   03CF  mov	ax,#$3CF
16973 3EAF           50                         push	ax
16974                                           ! Debug: func () void = outb+0 (used reg = )
16975 3EB0           E8         3D49            call	_outb
16976 3EB3           83C4                   04  add	sp,*4
16977                                           !BCC_EOS
16978                                           ! 1998   }
16979                                           ! 1999  crtc_addr=vga_modes[line].memmodel==0x01?0x3b4:0x3d4;
16980                       00003EB6            .77:
16981                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16982 3EB6           8B46         F6            mov	ax,-$A[bp]
16983 3EB9           40                         inc	ax
16984 3EBA           8946         F6            mov	-$A[bp],ax
16985                       00003EBD            .78:
16986                                           ! Debug: le int = const 8 to unsigned short i = [S+$18-$C] (used reg = )
16987 3EBD           8B46         F6            mov	ax,-$A[bp]
16988 3EC0           3D                   0008  cmp	ax,*8
16989 3EC3           76           C0            jbe	.79
16990                       00003EC5            .7A:
16991                       00003EC5            .76:
16992                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16993 3EC5           8A46         FE            mov	al,-2[bp]
16994 3EC8           30E4                       xor	ah,ah
16995 3ECA           B1                     03  mov	cl,*3
16996 3ECC           D3E0                       shl	ax,cl
16997 3ECE           89C3                       mov	bx,ax
16998 3ED0           81C3                 01FD  add	bx,#_vga_modes
16999                                           ! Debug: logeq int = const 1 to unsigned char = [bx+2] (used reg = )
17000 3ED4           8A47         02            mov	al,2[bx]
17001 3ED7           3C                     01  cmp	al,*1
17002 3ED9           75           05            jne 	.7B
17003                       00003EDB            .7C:
17004 3EDB           B8                   03B4  mov	ax,#$3B4
17005 3EDE           EB           03            jmp .7D
17006                       00003EE0            .7B:
17007 3EE0           B8                   03D4  mov	ax,#$3D4
17008                       00003EE3            .7D:
17009                                           ! Debug: eq int = ax+0 to unsigned short crtc_addr = [S+$18-$18] (used reg = )
17010 3EE3           8946         EA            mov	-$16[bp],ax
17011                                           !BCC_EOS
17012                                           ! 2000  outw(crtc_addr,0x0011);
17013                                           ! Debug: list int = const $11 (used reg = )
17014 3EE6           B8                   0011  mov	ax,*$11
17015 3EE9           50                         push	ax
17016                                           ! Debug: list unsigned short crtc_addr = [S+$1A-$18] (used reg = )
17017 3EEA           FF76         EA            push	-$16[bp]
17018                                           ! Debug: func () void = outw+0 (used reg = )
17019 3EED           E8         3D1C            call	_outw
17020 3EF0           83C4                   04  add	sp,*4
17021                                           !BCC_EOS
17022                                           ! 2001  for(i=0;i<=0x18;i++)
17023                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
17024 3EF3           31C0                       xor	ax,ax
17025 3EF5           8946         F6            mov	-$A[bp],ax
17026                                           !BCC_EOS
17027                                           !BCC_EOS
17028                                           ! 2002   {outb(crtc_addr,i);
17029 3EF8           EB           38            jmp .80
17030                       00003EFA            .81:
17031                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
17032 3EFA           FF76         F6            push	-$A[bp]
17033                                           ! Debug: list unsigned short crtc_addr = [S+$1A-$18] (used reg = )
17034 3EFD           FF76         EA            push	-$16[bp]
17035                                           ! Debug: func () void = outb+0 (used reg = )
17036 3F00           E8         3CF9            call	_outb
17037 3F03           83C4                   04  add	sp,*4
17038                                           !BCC_EOS
17039                                           ! 2003    outb(crtc_addr+1,video_param_table[vpti].crtc_regs[i]);
17040                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
17041 3F06           8A46         F9            mov	al,-7[bp]
17042 3F09           30E4                       xor	ah,ah
17043 3F0B           B1                     06  mov	cl,*6
17044 3F0D           D3E0                       shl	ax,cl
17045 3F0F           89C3                       mov	bx,ax
17046 3F11           81C3                 0291  add	bx,#_video_param_table
17047                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [$19] unsigned char = bx+$A (used reg = )
17048 3F15           8B46         F6            mov	ax,-$A[bp]
17049 3F18           01C3                       add	bx,ax
17050                                           ! Debug: list unsigned char = [bx+$A] (used reg = )
17051 3F1A           8A47         0A            mov	al,$A[bx]
17052 3F1D           30E4                       xor	ah,ah
17053 3F1F           50                         push	ax
17054                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$1A-$18] (used reg = )
17055 3F20           8B46         EA            mov	ax,-$16[bp]
17056                                           ! Debug: list unsigned int = ax+1 (used reg = )
17057 3F23           40                         inc	ax
17058 3F24           50                         push	ax
17059                                           ! Debug: func () void = outb+0 (used reg = )
17060 3F25           E8         3CD4            call	_outb
17061 3F28           83C4                   04  add	sp,*4
17062                                           !BCC_EOS
17063                                           ! 2004   }
17064                                           ! 2005  outb(0x3c2,video_param_table[vpti].miscreg);
17065                       00003F2B            .7F:
17066                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
17067 3F2B           8B46         F6            mov	ax,-$A[bp]
17068 3F2E           40                         inc	ax
17069 3F2F           8946         F6            mov	-$A[bp],ax
17070                       00003F32            .80:
17071                                           ! Debug: le int = const $18 to unsigned short i = [S+$18-$C] (used reg = )
17072 3F32           8B46         F6            mov	ax,-$A[bp]
17073 3F35           3D                   0018  cmp	ax,*$18
17074 3F38           76           C0            jbe	.81
17075                       00003F3A            .82:
17076                       00003F3A            .7E:
17077                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
17078 3F3A           8A46         F9            mov	al,-7[bp]
17079 3F3D           30E4                       xor	ah,ah
17080 3F3F           B1                     06  mov	cl,*6
17081 3F41           D3E0                       shl	ax,cl
17082 3F43           89C3                       mov	bx,ax
17083 3F45           81C3                 0291  add	bx,#_video_param_table
17084                                           ! Debug: list unsigned char = [bx+9] (used reg = )
17085 3F49           8A47         09            mov	al,9[bx]
17086 3F4C           30E4                       xor	ah,ah
17087 3F4E           50                         push	ax
17088                                           ! Debug: list int = const $3C2 (used reg = )
17089 3F4F           B8                   03C2  mov	ax,#$3C2
17090 3F52           50                         push	ax
17091                                           ! Debug: func () void = outb+0 (used reg = )
17092 3F53           E8         3CA6            call	_outb
17093 3F56           83C4                   04  add	sp,*4
17094                                           !BCC_EOS
17095                                           ! 2006  outb(0x3c0,0x20);
17096                                           ! Debug: list int = const $20 (used reg = )
17097 3F59           B8                   0020  mov	ax,*$20
17098 3F5C           50                         push	ax
17099                                           ! Debug: list int = const $3C0 (used reg = )
17100 3F5D           B8                   03C0  mov	ax,#$3C0
17101 3F60           50                         push	ax
17102                                           ! Debug: func () void = outb+0 (used reg = )
17103 3F61           E8         3C98            call	_outb
17104 3F64           83C4                   04  add	sp,*4
17105                                           !BCC_EOS
17106                                           ! 2007  inb(0x3da);
17107                                           ! Debug: list int = const $3DA (used reg = )
17108 3F67           B8                   03DA  mov	ax,#$3DA
17109 3F6A           50                         push	ax
17110                                           ! Debug: func () unsigned char = inb+0 (used reg = )
17111 3F6B           E8         3C78            call	_inb
17112 3F6E           44                         inc	sp
17113 3F6F           44                         inc	sp
17114                                           !BCC_EOS
17115                                           ! 2008  if(noclearmem==0x00)
17116                                           ! Debug: logeq int = const 0 to unsigned char noclearmem = [S+$18-3] (used reg = )
17117 3F70           8A46         FF            mov	al,-1[bp]
17118 3F73           84C0                       test	al,al
17119 3F75         0F85         00C1            bne 	.83
17120                       00003F79            .84:
17121                                           ! 2009   {
17122                                           ! 2010    if(vga_modes[line].class==0x00)
17123                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
17124 3F79           8A46         FE            mov	al,-2[bp]
17125 3F7C           30E4                       xor	ah,ah
17126 3F7E           B1                     03  mov	cl,*3
17127 3F80           D3E0                       shl	ax,cl
17128 3F82           89C3                       mov	bx,ax
17129 3F84           81C3                 01FD  add	bx,#_vga_modes
17130                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
17131 3F88           8A47         01            mov	al,1[bx]
17132 3F8B           84C0                       test	al,al
17133 3F8D           75           26            jne 	.85
17134                       00003F8F            .86:
17135                                           ! 2011     {
17136                                           ! 2012      memsetw(vga_modes[line].sstart,0,0x0720,0x4000);
17137                                           ! Debug: list int = const $4000 (used reg = )
17138 3F8F           B8                   4000  mov	ax,#$4000
17139 3F92           50                         push	ax
17140                                           ! Debug: list int = const $720 (used reg = )
17141 3F93           B8                   0720  mov	ax,#$720
17142 3F96           50                         push	ax
17143                                           ! Debug: list int = const 0 (used reg = )
17144 3F97           31C0                       xor	ax,ax
17145 3F99           50                         push	ax
17146                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$10] struct  = vga_modes+0 (used reg = )
17147 3F9A           8A46         FE            mov	al,-2[bp]
17148 3F9D           30E4                       xor	ah,ah
17149 3F9F           B1                     03  mov	cl,*3
17150 3FA1           D3E0                       shl	ax,cl
17151 3FA3           89C3                       mov	bx,ax
17152 3FA5           81C3                 01FD  add	bx,#_vga_modes
17153                                           ! Debug: list unsigned short = [bx+4] (used reg = )
17154 3FA9           FF77         04            push	4[bx]
17155                                           ! Debug: func () void = memsetw+0 (used reg = )
17156 3FAC           E8         3B5C            call	_memsetw
17157 3FAF           83C4                   08  add	sp,*8
17158                                           !BCC_EOS
17159                                           ! 2013     }
17160                                           ! 2014    else
17161                                           ! 2015     {
17162 3FB2           E9         0085            br 	.87
17163                       00003FB5            .85:
17164                                           ! 2016      if(mode<0x0d)
17165                                           ! Debug: lt int = const $D to unsigned char mode = [S+$18+2] (used reg = )
17166 3FB5           8A46         04            mov	al,4[bp]
17167 3FB8           3C                     0D  cmp	al,*$D
17168 3FBA           73           24            jae 	.88
17169                       00003FBC            .89:
17170                                           ! 2017       {
17171                                           ! 2018        memsetw(vga_modes[line].sstart,0,0x0000,0x4000);
17172                                           ! Debug: list int = const $4000 (used reg = )
17173 3FBC           B8                   4000  mov	ax,#$4000
17174 3FBF           50                         push	ax
17175                                           ! Debug: list int = const 0 (used reg = )
17176 3FC0           31C0                       xor	ax,ax
17177 3FC2           50                         push	ax
17178                                           ! Debug: list int = const 0 (used reg = )
17179 3FC3           31C0                       xor	ax,ax
17180 3FC5           50                         push	ax
17181                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$10] struct  = vga_modes+0 (used reg = )
17182 3FC6           8A46         FE            mov	al,-2[bp]
17183 3FC9           30E4                       xor	ah,ah
17184 3FCB           B1                     03  mov	cl,*3
17185 3FCD           D3E0                       shl	ax,cl
17186 3FCF           89C3                       mov	bx,ax
17187 3FD1           81C3                 01FD  add	bx,#_vga_modes
17188                                           ! Debug: list unsigned short = [bx+4] (used reg = )
17189 3FD5           FF77         04            push	4[bx]
17190                                           ! Debug: func () void = memsetw+0 (used reg = )
17191 3FD8           E8         3B30            call	_memsetw
17192 3FDB           83C4                   08  add	sp,*8
17193                                           !BCC_EOS
17194                                           ! 2019       }
17195                                           ! 2020      else
17196                                           ! 2021       {
17197 3FDE           EB           5A            jmp .8A
17198                       00003FE0            .88:
17199                                           ! 2022        outb( 0x3c4, 0x02 );
17200                                           ! Debug: list int = const 2 (used reg = )
17201 3FE0           B8                   0002  mov	ax,*2
17202 3FE3           50                         push	ax
17203                                           ! Debug: list int = const $3C4 (used reg = )
17204 3FE4           B8                   03C4  mov	ax,#$3C4
17205 3FE7           50                         push	ax
17206                                           ! Debug: func () void = outb+0 (used reg = )
17207 3FE8           E8         3C11            call	_outb
17208 3FEB           83C4                   04  add	sp,*4
17209                                           !BCC_EOS
17210                                           ! 2023        mmask = inb( 0x3c5 );
17211                                           ! Debug: list int = const $3C5 (used reg = )
17212 3FEE           B8                   03C5  mov	ax,#$3C5
17213 3FF1           50                         push	ax
17214                                           ! Debug: func () unsigned char = inb+0 (used reg = )
17215 3FF2           E8         3BF1            call	_inb
17216 3FF5           44                         inc	sp
17217 3FF6           44                         inc	sp
17218                                           ! Debug: eq unsigned char = al+0 to unsigned char mmask = [S+$18-5] (used reg = )
17219 3FF7           8846         FD            mov	-3[bp],al
17220                                           !BCC_EOS
17221                                           ! 2024        outb( 0x3c5, 0x0f );
17222                                           ! Debug: list int = const $F (used reg = )
17223 3FFA           B8                   000F  mov	ax,*$F
17224 3FFD           50                         push	ax
17225                                           ! Debug: list int = const $3C5 (used reg = )
17226 3FFE           B8                   03C5  mov	ax,#$3C5
17227 4001           50                         push	ax
17228                                           ! Debug: func () void = outb+0 (used reg = )
17229 4002           E8         3BF7            call	_outb
17230 4005           83C4                   04  add	sp,*4
17231                                           !BCC_EOS
17232                                           ! 2025        memsetw(vga_modes[line].sstart,0,0x0000,0x8000);
17233                                           ! Debug: list unsigned int = const $8000 (used reg = )
17234 4008           B8                   8000  mov	ax,#$8000
17235 400B           50                         push	ax
17236                                           ! Debug: list int = const 0 (used reg = )
17237 400C           31C0                       xor	ax,ax
17238 400E           50                         push	ax
17239                                           ! Debug: list int = const 0 (used reg = )
17240 400F           31C0                       xor	ax,ax
17241 4011           50                         push	ax
17242                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$10] struct  = vga_modes+0 (used reg = )
17243 4012           8A46         FE            mov	al,-2[bp]
17244 4015           30E4                       xor	ah,ah
17245 4017           B1                     03  mov	cl,*3
17246 4019           D3E0                       shl	ax,cl
17247 401B           89C3                       mov	bx,ax
17248 401D           81C3                 01FD  add	bx,#_vga_modes
17249                                           ! Debug: list unsigned short = [bx+4] (used reg = )
17250 4021           FF77         04            push	4[bx]
17251                                           ! Debug: func () void = memsetw+0 (used reg = )
17252 4024           E8         3AE4            call	_memsetw
17253 4027           83C4                   08  add	sp,*8
17254                                           !BCC_EOS
17255                                           ! 2026        outb( 0x3c5, mmask );
17256                                           ! Debug: list unsigned char mmask = [S+$18-5] (used reg = )
17257 402A           8A46         FD            mov	al,-3[bp]
17258 402D           30E4                       xor	ah,ah
17259 402F           50                         push	ax
17260                                           ! Debug: list int = const $3C5 (used reg = )
17261 4030           B8                   03C5  mov	ax,#$3C5
17262 4033           50                         push	ax
17263                                           ! Debug: func () void = outb+0 (used reg = )
17264 4034           E8         3BC5            call	_outb
17265 4037           83C4                   04  add	sp,*4
17266                                           !BCC_EOS
17267                                           ! 2027       }
17268                                           ! 2028     }
17269                       0000403A            .8A:
17270                                           ! 2029   }
17271                       0000403A            .87:
17272                                           ! 2030  write_byte(0x40,0x49,mode);
17273                       0000403A            .83:
17274                                           ! Debug: list unsigned char mode = [S+$18+2] (used reg = )
17275 403A           8A46         04            mov	al,4[bp]
17276 403D           30E4                       xor	ah,ah
17277 403F           50                         push	ax
17278                                           ! Debug: list int = const $49 (used reg = )
17279 4040           B8                   0049  mov	ax,*$49
17280 4043           50                         push	ax
17281                                           ! Debug: list int = const $40 (used reg = )
17282 4044           B8                   0040  mov	ax,*$40
17283 4047           50                         push	ax
17284                                           ! Debug: func () void = write_byte+0 (used reg = )
17285 4048           E8         3B6B            call	_write_byte
17286 404B           83C4                   06  add	sp,*6
17287                                           !BCC_EOS
17288                                           ! 2031  write_word(0x40,0x4A,twidth);
17289                                           ! Debug: list unsigned short twidth = [S+$18-$E] (used reg = )
17290 404E           FF76         F4            push	-$C[bp]
17291                                           ! Debug: list int = const $4A (used reg = )
17292 4051           B8                   004A  mov	ax,*$4A
17293 4054           50                         push	ax
17294                                           ! Debug: list int = const $40 (used reg = )
17295 4055           B8                   0040  mov	ax,*$40
17296 4058           50                         push	ax
17297                                           ! Debug: func () void = write_word+0 (used reg = )
17298 4059           E8         3B72            call	_write_word
17299 405C           83C4                   06  add	sp,*6
17300                                           !BCC_EOS
17301                                           ! 2032  write_word(0x40,0x4C,*(Bit16u *)&video_param_table[vpti].slength_l);
17302                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
17303 405F           8A46         F9            mov	al,-7[bp]
17304 4062           30E4                       xor	ah,ah
17305 4064           B1                     06  mov	cl,*6
17306 4066           D3E0                       shl	ax,cl
17307 4068           89C3                       mov	bx,ax
17308 406A           81C3                 0291  add	bx,#_video_param_table
17309                                           ! Debug: address unsigned char = [bx+3] (used reg = )
17310                                           ! Debug: cast * unsigned short = const 0 to * unsigned char = bx+3 (used reg = )
17311                                           ! Debug: list unsigned short = [bx+3] (used reg = )
17312 406E           FF77         03            push	3[bx]
17313                                           ! Debug: list int = const $4C (used reg = )
17314 4071           B8                   004C  mov	ax,*$4C
17315 4074           50                         push	ax
17316                                           ! Debug: list int = const $40 (used reg = )
17317 4075           B8                   0040  mov	ax,*$40
17318 4078           50                         push	ax
17319                                           ! Debug: func () void = write_word+0 (used reg = )
17320 4079           E8         3B52            call	_write_word
17321 407C           83C4                   06  add	sp,*6
17322                                           !BCC_EOS
17323                                           ! 2033  write_word(0x40,0x63,crtc_addr);
17324                                           ! Debug: list unsigned short crtc_addr = [S+$18-$18] (used reg = )
17325 407F           FF76         EA            push	-$16[bp]
17326                                           ! Debug: list int = const $63 (used reg = )
17327 4082           B8                   0063  mov	ax,*$63
17328 4085           50                         push	ax
17329                                           ! Debug: list int = const $40 (used reg = )
17330 4086           B8                   0040  mov	ax,*$40
17331 4089           50                         push	ax
17332                                           ! Debug: func () void = write_word+0 (used reg = )
17333 408A           E8         3B41            call	_write_word
17334 408D           83C4                   06  add	sp,*6
17335                                           !BCC_EOS
17336                                           ! 2034  write
17337                                           ! 2034 _byte(0x40,0x84,theightm1);
17338                                           ! Debug: list unsigned short theightm1 = [S+$18-$10] (used reg = )
17339 4090           FF76         F2            push	-$E[bp]
17340                                           ! Debug: list int = const $84 (used reg = )
17341 4093           B8                   0084  mov	ax,#$84
17342 4096           50                         push	ax
17343                                           ! Debug: list int = const $40 (used reg = )
17344 4097           B8                   0040  mov	ax,*$40
17345 409A           50                         push	ax
17346                                           ! Debug: func () void = write_byte+0 (used reg = )
17347 409B           E8         3B18            call	_write_byte
17348 409E           83C4                   06  add	sp,*6
17349                                           !BCC_EOS
17350                                           ! 2035  write_word(0x40,0x85,cheight);
17351                                           ! Debug: list unsigned short cheight = [S+$18-$12] (used reg = )
17352 40A1           FF76         F0            push	-$10[bp]
17353                                           ! Debug: list int = const $85 (used reg = )
17354 40A4           B8                   0085  mov	ax,#$85
17355 40A7           50                         push	ax
17356                                           ! Debug: list int = const $40 (used reg = )
17357 40A8           B8                   0040  mov	ax,*$40
17358 40AB           50                         push	ax
17359                                           ! Debug: func () void = write_word+0 (used reg = )
17360 40AC           E8         3B1F            call	_write_word
17361 40AF           83C4                   06  add	sp,*6
17362                                           !BCC_EOS
17363                                           ! 2036  write_byte(0x40,0x87,(0x60|noclearmem));
17364                                           ! Debug: or unsigned char noclearmem = [S+$18-3] to int = const $60 (used reg = )
17365                                           ! Debug: expression subtree swapping
17366 40B2           8A46         FF            mov	al,-1[bp]
17367 40B5           0C                     60  or	al,*$60
17368                                           ! Debug: list unsigned char = al+0 (used reg = )
17369 40B7           30E4                       xor	ah,ah
17370 40B9           50                         push	ax
17371                                           ! Debug: list int = const $87 (used reg = )
17372 40BA           B8                   0087  mov	ax,#$87
17373 40BD           50                         push	ax
17374                                           ! Debug: list int = const $40 (used reg = )
17375 40BE           B8                   0040  mov	ax,*$40
17376 40C1           50                         push	ax
17377                                           ! Debug: func () void = write_byte+0 (used reg = )
17378 40C2           E8         3AF1            call	_write_byte
17379 40C5           83C4                   06  add	sp,*6
17380                                           !BCC_EOS
17381                                           ! 2037  write_byte(0x40,0x88,0xF9);
17382                                           ! Debug: list int = const $F9 (used reg = )
17383 40C8           B8                   00F9  mov	ax,#$F9
17384 40CB           50                         push	ax
17385                                           ! Debug: list int = const $88 (used reg = )
17386 40CC           B8                   0088  mov	ax,#$88
17387 40CF           50                         push	ax
17388                                           ! Debug: list int = const $40 (used reg = )
17389 40D0           B8                   0040  mov	ax,*$40
17390 40D3           50                         push	ax
17391                                           ! Debug: func () void = write_byte+0 (used reg = )
17392 40D4           E8         3ADF            call	_write_byte
17393 40D7           83C4                   06  add	sp,*6
17394                                           !BCC_EOS
17395                                           ! 2038  write_byte(0x40,0x89,read_byte(0x40,0x89)&0x7f);
17396                                           ! Debug: list int = const $89 (used reg = )
17397 40DA           B8                   0089  mov	ax,#$89
17398 40DD           50                         push	ax
17399                                           ! Debug: list int = const $40 (used reg = )
17400 40DE           B8                   0040  mov	ax,*$40
17401 40E1           50                         push	ax
17402                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
17403 40E2           E8         3AAB            call	_read_byte
17404 40E5           83C4                   04  add	sp,*4
17405                                           ! Debug: and int = const $7F to unsigned char = al+0 (used reg = )
17406 40E8           24                     7F  and	al,*$7F
17407                                           ! Debug: list unsigned char = al+0 (used reg = )
17408 40EA           30E4                       xor	ah,ah
17409 40EC           50                         push	ax
17410                                           ! Debug: list int = const $89 (used reg = )
17411 40ED           B8                   0089  mov	ax,#$89
17412 40F0           50                         push	ax
17413                                           ! Debug: list int = const $40 (used reg = )
17414 40F1           B8                   0040  mov	ax,*$40
17415 40F4           50                         push	ax
17416                                           ! Debug: func () void = write_byte+0 (used reg = )
17417 40F5           E8         3ABE            call	_write_byte
17418 40F8           83C4                   06  add	sp,*6
17419                                           !BCC_EOS
17420                                           ! 2039  write_byte(0x40,0x8A,0x08);
17421                                           ! Debug: list int = const 8 (used reg = )
17422 40FB           B8                   0008  mov	ax,*8
17423 40FE           50                         push	ax
17424                                           ! Debug: list int = const $8A (used reg = )
17425 40FF           B8                   008A  mov	ax,#$8A
17426 4102           50                         push	ax
17427                                           ! Debug: list int = const $40 (used reg = )
17428 4103           B8                   0040  mov	ax,*$40
17429 4106           50                         push	ax
17430                                           ! Debug: func () void = write_byte+0 (used reg = )
17431 4107           E8         3AAC            call	_write_byte
17432 410A           83C4                   06  add	sp,*6
17433                                           !BCC_EOS
17434                                           ! 2040  write_word(0x40,0xA8, video_save_pointer_table);
17435                                           ! Debug: list * unsigned char = video_save_pointer_table+0 (used reg = )
17436 410D           BB                   35FA  mov	bx,#_video_save_pointer_table
17437 4110           53                         push	bx
17438                                           ! Debug: list int = const $A8 (used reg = )
17439 4111           B8                   00A8  mov	ax,#$A8
17440 4114           50                         push	ax
17441                                           ! Debug: list int = const $40 (used reg = )
17442 4115           B8                   0040  mov	ax,*$40
17443 4118           50                         push	ax
17444                                           ! Debug: func () void = write_word+0 (used reg = )
17445 4119           E8         3AB2            call	_write_word
17446 411C           83C4                   06  add	sp,*6
17447                                           !BCC_EOS
17448                                           ! 2041  write_word(0x40,0xA8 +2, 0xc000);
17449                                           ! Debug: list unsigned int = const $C000 (used reg = )
17450 411F           B8                   C000  mov	ax,#$C000
17451 4122           50                         push	ax
17452                                           ! Debug: list int = const $AA (used reg = )
17453 4123           B8                   00AA  mov	ax,#$AA
17454 4126           50                         push	ax
17455                                           ! Debug: list int = const $40 (used reg = )
17456 4127           B8                   0040  mov	ax,*$40
17457 412A           50                         push	ax
17458                                           ! Debug: func () void = write_word+0 (used reg = )
17459 412B           E8         3AA0            call	_write_word
17460 412E           83C4                   06  add	sp,*6
17461                                           !BCC_EOS
17462                                           ! 2042  write_byte(0x40,0x65,0x00);
17463                                           ! Debug: list int = const 0 (used reg = )
17464 4131           31C0                       xor	ax,ax
17465 4133           50                         push	ax
17466                                           ! Debug: list int = const $65 (used reg = )
17467 4134           B8                   0065  mov	ax,*$65
17468 4137           50                         push	ax
17469                                           ! Debug: list int = const $40 (used reg = )
17470 4138           B8                   0040  mov	ax,*$40
17471 413B           50                         push	ax
17472                                           ! Debug: func () void = write_byte+0 (used reg = )
17473 413C           E8         3A77            call	_write_byte
17474 413F           83C4                   06  add	sp,*6
17475                                           !BCC_EOS
17476                                           ! 2043  write_byte(0x40,0x66,0x00);
17477                                           ! Debug: list int = const 0 (used reg = )
17478 4142           31C0                       xor	ax,ax
17479 4144           50                         push	ax
17480                                           ! Debug: list int = const $66 (used reg = )
17481 4145           B8                   0066  mov	ax,*$66
17482 4148           50                         push	ax
17483                                           ! Debug: list int = const $40 (used reg = )
17484 4149           B8                   0040  mov	ax,*$40
17485 414C           50                         push	ax
17486                                           ! Debug: func () void = write_byte+0 (used reg = )
17487 414D           E8         3A66            call	_write_byte
17488 4150           83C4                   06  add	sp,*6
17489                                           !BCC_EOS
17490                                           ! 2044  if(vga_modes[line].class==0x00)
17491                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
17492 4153           8A46         FE            mov	al,-2[bp]
17493 4156           30E4                       xor	ah,ah
17494 4158           B1                     03  mov	cl,*3
17495 415A           D3E0                       shl	ax,cl
17496 415C           89C3                       mov	bx,ax
17497 415E           81C3                 01FD  add	bx,#_vga_modes
17498                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
17499 4162           8A47         01            mov	al,1[bx]
17500 4165           84C0                       test	al,al
17501 4167           75           0E            jne 	.8B
17502                       00004169            .8C:
17503                                           ! 2045   {
17504                                           ! 2046    biosfn_set_cursor_shape(0x06,0x07);
17505                                           ! Debug: list int = const 7 (used reg = )
17506 4169           B8                   0007  mov	ax,*7
17507 416C           50                         push	ax
17508                                           ! Debug: list int = const 6 (used reg = )
17509 416D           B8                   0006  mov	ax,*6
17510 4170           50                         push	ax
17511                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
17512 4171           E8         00BB            call	_biosfn_set_cursor_shape
17513 4174           83C4                   04  add	sp,*4
17514                                           !BCC_EOS
17515                                           ! 2047   }
17516                                           ! 2048  for(i=0;i<8;i++)
17517                       00004177            .8B:
17518                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
17519 4177           31C0                       xor	ax,ax
17520 4179           8946         F6            mov	-$A[bp],ax
17521                                           !BCC_EOS
17522                                           !BCC_EOS
17523                                           ! 2049   biosfn_set_cursor_pos(i,0x0000);
17524 417C           EB           13            jmp .8F
17525                       0000417E            .90:
17526                                           ! Debug: list int = const 0 (used reg = )
17527 417E           31C0                       xor	ax,ax
17528 4180           50                         push	ax
17529                                           ! Debug: list unsigned short i = [S+$1A-$C] (used reg = )
17530 4181           FF76         F6            push	-$A[bp]
17531                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
17532 4184           E8         01C3            call	_biosfn_set_cursor_pos
17533 4187           83C4                   04  add	sp,*4
17534                                           !BCC_EOS
17535                                           ! 2050  biosfn_set_active_page(0x00);
17536                       0000418A            .8E:
17537                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
17538 418A           8B46         F6            mov	ax,-$A[bp]
17539 418D           40                         inc	ax
17540 418E           8946         F6            mov	-$A[bp],ax
17541                       00004191            .8F:
17542                                           ! Debug: lt int = const 8 to unsigned short i = [S+$18-$C] (used reg = )
17543 4191           8B46         F6            mov	ax,-$A[bp]
17544 4194           3D                   0008  cmp	ax,*8
17545 4197           72           E5            jb 	.90
17546                       00004199            .91:
17547                       00004199            .8D:
17548                                           ! Debug: list int = const 0 (used reg = )
17549 4199           31C0                       xor	ax,ax
17550 419B           50                         push	ax
17551                                           ! Debug: func () void = biosfn_set_active_page+0 (used reg = )
17552 419C           E8         0320            call	_biosfn_set_active_page
17553 419F           44                         inc	sp
17554 41A0           44                         inc	sp
17555                                           !BCC_EOS
17556                                           ! 2051  if(vga_modes[line].class==0x00)
17557                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
17558 41A1           8A46         FE            mov	al,-2[bp]
17559 41A4           30E4                       xor	ah,ah
17560 41A6           B1                     03  mov	cl,*3
17561 41A8           D3E0                       shl	ax,cl
17562 41AA           89C3                       mov	bx,ax
17563 41AC           81C3                 01FD  add	bx,#_vga_modes
17564                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
17565 41B0           8A47         01            mov	al,1[bx]
17566 41B3           84C0                       test	al,al
17567 41B5           75           0E            jne 	.92
17568                       000041B7            .93:
17569                                           ! 2052   {
17570                                           ! 2053 #asm
17571                                           !BCC_EOS
17572                                           !BCC_ASM
17573                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17574                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17575                       00000008            _biosfn_set_video_mode.theightm1	set	8
17576                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17577                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17578                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17579                       00000014            _biosfn_set_video_mode.line	set	$14
17580                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17581                       00000006            _biosfn_set_video_mode.cheight	set	6
17582                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17583                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17584                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17585                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17586                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17587                       0000000C            _biosfn_set_video_mode.i	set	$C
17588                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17589                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17590                       00000004            .biosfn_set_video_mode.mode	set	4
17591                       00000010            _biosfn_set_video_mode.palette	set	$10
17592                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17593                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17594                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17595                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17596                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17597                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17598                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17599                       00000013            _biosfn_set_video_mode.mmask	set	$13
17600                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17601                                             ;; copy and activate 8x16 font
17602 41B7           B8                   1104    mov ax, #0x1104
17603 41BA           B3                     00    mov bl, #0x00
17604 41BC           CD                     10    int #0x10
17605 41BE           B8                   1103    mov ax, #0x1103
17606 41C1           B3                     00    mov bl, #0x00
17607 41C3           CD                     10    int #0x10
17608                                           ! 2061 endasm
17609                                           !BCC_ENDASM
17610                                           !BCC_EOS
17611                                           ! 2062   }
17612                                           ! 2063 #asm
17613                       000041C5            .92:
17614                                           !BCC_EOS
17615                                           !BCC_ASM
17616                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17617                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17618                       00000008            _biosfn_set_video_mode.theightm1	set	8
17619                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17620                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17621                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17622                       00000014            _biosfn_set_video_mode.line	set	$14
17623                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17624                       00000006            _biosfn_set_video_mode.cheight	set	6
17625                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17626                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17627                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17628                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17629                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17630                       0000000C            _biosfn_set_video_mode.i	set	$C
17631                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17632                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17633                       00000004            .biosfn_set_video_mode.mode	set	4
17634                       00000010            _biosfn_set_video_mode.palette	set	$10
17635                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17636                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17637                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17638                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17639                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17640                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17641                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17642                       00000013            _biosfn_set_video_mode.mmask	set	$13
17643                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17644                                            SET_INT_VECTOR(0x1f, #0xC000, #_vgafont8+128*8)
 +a   41C5           1E                           push ds
 +a   41C6           31C0                         xor ax, ax
 +a   41C8           8ED8                         mov ds, ax
 +a   41CA           B8                   1361    mov ax,  #_vgafont8+128*8
 +a   41CD           A3         007C              mov 0x1f*4, ax
 +a   41D0           B8                   C000    mov ax,  #0xC000
 +a   41D3           A3         007E              mov 0x1f*4+2, ax
 +a   41D6           1F                           pop ds
17645                                           ! 2065 endasm
17646                                           !BCC_ENDASM
17647                                           !BCC_EOS
17648                                           ! 2066   switch(cheight)
17649 41D7           8B46         F0            mov	ax,-$10[bp]
17650                                           ! 2067    {case 8:
17651 41DA           E9         003F            br 	.96
17652                                           ! 2068 #asm
17653                       000041DD            .97:
17654                                           !BCC_EOS
17655                                           !BCC_ASM
17656                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17657                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17658                       00000008            _biosfn_set_video_mode.theightm1	set	8
17659                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17660                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17661                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17662                       00000014            _biosfn_set_video_mode.line	set	$14
17663                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17664                       00000006            _biosfn_set_video_mode.cheight	set	6
17665                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17666                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17667                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17668                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17669                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17670                       0000000C            _biosfn_set_video_mode.i	set	$C
17671                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17672                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17673                       00000004            .biosfn_set_video_mode.mode	set	4
17674                       00000010            _biosfn_set_video_mode.palette	set	$10
17675                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17676                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17677                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17678                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17679                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17680                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17681                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17682                       00000013            _biosfn_set_video_mode.mmask	set	$13
17683                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17684                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont8)
 +a   41DD           1E                           push ds
 +a   41DE           31C0                         xor ax, ax
 +a   41E0           8ED8                         mov ds, ax
 +a   41E2           B8                   0F61    mov ax,  #_vgafont8
 +a   41E5           A3         010C              mov 0x43*4, ax
 +a   41E8           B8                   C000    mov ax,  #0xC000
 +a   41EB           A3         010E              mov 0x43*4+2, ax
 +a   41EE           1F                           pop ds
17685                                           ! 2070 endasm
17686                                           !BCC_ENDASM
17687                                           !BCC_EOS
17688                                           ! 2071      break;
17689 41EF           E9         0039            br 	.94
17690                                           !BCC_EOS
17691                                           ! 2072     case 14:
17692                                           ! 2073 #asm
17693                       000041F2            .98:
17694                                           !BCC_EOS
17695                                           !BCC_ASM
17696                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17697                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17698                       00000008            _biosfn_set_video_mode.theightm1	set	8
17699                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17700                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17701                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17702                       00000014            _biosfn_set_video_mode.line	set	$14
17703                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17704                       00000006            _biosfn_set_video_mode.cheight	set	6
17705                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17706                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17707                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17708                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17709                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17710                       0000000C            _biosfn_set_video_mode.i	set	$C
17711                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17712                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17713                       00000004            .biosfn_set_video_mode.mode	set	4
17714                       00000010            _biosfn_set_video_mode.palette	set	$10
17715                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17716                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17717                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17718                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17719                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17720                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17721                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17722                       00000013            _biosfn_set_video_mode.mmask	set	$13
17723                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17724                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont14)
 +a   41F2           1E                           push ds
 +a   41F3           31C0                         xor ax, ax
 +a   41F5           8ED8                         mov ds, ax
 +a   41F7           B8                   1761    mov ax,  #_vgafont14
 +a   41FA           A3         010C              mov 0x43*4, ax
 +a   41FD           B8                   C000    mov ax,  #0xC000
 +a   4200           A3         010E              mov 0x43*4+2, ax
 +a   4203           1F                           pop ds
17725                                           ! 2075 endasm
17726                                           !BCC_ENDASM
17727                                           !BCC_EOS
17728                                           ! 2076      break;
17729 4204           EB           25            jmp .94
17730                                           !BCC_EOS
17731                                           ! 2077     case 16:
17732                                           ! 2078 #asm
17733                       00004206            .99:
17734                                           !BCC_EOS
17735                                           !BCC_ASM
17736                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17737                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17738                       00000008            _biosfn_set_video_mode.theightm1	set	8
17739                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17740                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17741                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17742                       00000014            _biosfn_set_video_mode.line	set	$14
17743                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17744                       00000006            _biosfn_set_video_mode.cheight	set	6
17745                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17746                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17747                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17748                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17749                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17750                       0000000C            _biosfn_set_video_mode.i	set	$C
17751                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17752                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17753                       00000004            .biosfn_set_video_mode.mode	set	4
17754                       00000010            _biosfn_set_video_mode.palette	set	$10
17755                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17756                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17757                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17758                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17759                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17760                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17761                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17762                       00000013            _biosfn_set_video_mode.mmask	set	$13
17763                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17764                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont16)
 +a   4206           1E                           push ds
 +a   4207           31C0                         xor ax, ax
 +a   4209           8ED8                         mov ds, ax
 +a   420B           B8                   2561    mov ax,  #_vgafont16
 +a   420E           A3         010C              mov 0x43*4, ax
 +a   4211           B8                   C000    mov ax,  #0xC000
 +a   4214           A3         010E              mov 0x43*4+2, ax
 +a   4217           1F                           pop ds
17765                                           ! 2080 endasm
17766                                           !BCC_ENDASM
17767                                           !BCC_EOS
17768                                           ! 2081      break;
17769 4218           EB           11            jmp .94
17770                                           !BCC_EOS
17771                                           ! 2082    }
17772                                           ! 2083 }
17773 421A           EB           0F            jmp .94
17774                       0000421C            .96:
17775 421C           2D                   0008  sub	ax,*8
17776 421F           74           BC            je 	.97
17777 4221           2D                   0006  sub	ax,*6
17778 4224           74           CC            je 	.98
17779 4226           2D                   0002  sub	ax,*2
17780 4229           74           DB            je 	.99
17781                       0000422B            .94:
17782                       FFFFFFE8            ..FFFD	=	-$18
17783 422B           89EC                       mov	sp,bp
17784 422D           5D                         pop	bp
17785 422E           C3                         ret
17786                                           ! 2084 static void biosfn_set_cursor_shape (CH,CL)
17787                                           ! Register BX used in function biosfn_set_video_mode
17788                                           ! 2085 Bit8u CH;Bit8u CL;
17789                       0000422F            _biosfn_set_cursor_shape:
17790                                           !BCC_EOS
17791                                           !BCC_EOS
17792                                           ! 2086 {Bit16u cheight,curs,crtc_addr;
17793                                           !BCC_EOS
17794                                           ! 2087  Bit8u modeset_ctl;
17795                                           !BCC_EOS
17796                                           ! 2088  CH&=0x3f;
17797 422F           55                         push	bp
17798 4230           89E5                       mov	bp,sp
17799 4232           83C4                   F8  add	sp,*-8
17800                                           ! Debug: andab int = const $3F to unsigned char CH = [S+$A+2] (used reg = )
17801 4235           8A46         04            mov	al,4[bp]
17802 4238           24                     3F  and	al,*$3F
17803 423A           8846         04            mov	4[bp],al
17804                                           !BCC_EOS
17805                                           ! 2089  CL&=0x1f;
17806                                           ! Debug: andab int = const $1F to unsigned char CL = [S+$A+4] (used reg = )
17807 423D           8A46         06            mov	al,6[bp]
17808 4240           24                     1F  and	al,*$1F
17809 4242           8846         06            mov	6[bp],al
17810                                           !BCC_EOS
17811                                           ! 2090  curs=(CH<<8)+CL;
17812                                           ! Debug: sl int = const 8 to unsigned char CH = [S+$A+2] (used reg = )
17813 4245           8A46         04            mov	al,4[bp]
17814 4248           30E4                       xor	ah,ah
17815 424A           88C4                       mov	ah,al
17816 424C           30C0                       xor	al,al
17817                                           ! Debug: add unsigned char CL = [S+$A+4] to unsigned int = ax+0 (used reg = )
17818 424E           0246         06            add	al,6[bp]
17819 4251           80D4                   00  adc	ah,*0
17820                                           ! Debug: eq unsigned int = ax+0 to unsigned short curs = [S+$A-6] (used reg = )
17821 4254           8946         FC            mov	-4[bp],ax
17822                                           !BCC_EOS
17823                                           ! 2091  write_word(0x40,0x60,curs);
17824                                           ! Debug: list unsigned short curs = [S+$A-6] (used reg = )
17825 4257           FF76         FC            push	-4[bp]
17826                                           ! Debug: list int = const $60 (used reg = )
17827 425A           B8                   0060  mov	ax,*$60
17828 425D           50                         push	ax
17829                                           ! Debug: list int = const $40 (used reg = )
17830 425E           B8                   0040  mov	ax,*$40
17831 4261           50                         push	ax
17832                                           ! Debug: func () void = write_word+0 (used reg = )
17833 4262           E8         3969            call	_write_word
17834 4265           83C4                   06  add	sp,*6
17835                                           !BCC_EOS
17836                                           ! 2092  modeset_ctl=read_byte(0x40,0x89);
17837                                           ! Debug: list int = const $89 (used reg = )
17838 4268           B8                   0089  mov	ax,#$89
17839 426B           50                         push	ax
17840                                           ! Debug: list int = const $40 (used reg = )
17841 426C           B8                   0040  mov	ax,*$40
17842 426F           50                         push	ax
17843                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
17844 4270           E8         391D            call	_read_byte
17845 4273           83C4                   04  add	sp,*4
17846                                           ! Debug: eq unsigned char = al+0 to unsigned char modeset_ctl = [S+$A-9] (used reg = )
17847 4276           8846         F9            mov	-7[bp],al
17848                                           !BCC_EOS
17849                                           ! 2093  cheight = read_word(0x40,0x85);
17850                                           ! Debug: list int = const $85 (used reg = )
17851 4279           B8                   0085  mov	ax,#$85
17852 427C           50                         push	ax
17853                                           ! Debug: list int = const $40 (used reg = )
17854 427D           B8                   0040  mov	ax,*$40
17855 4280           50                         push	ax
17856                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17857 4281           E8         391F            call	_read_word
17858 4284           83C4                   04  add	sp,*4
17859                                           ! Debug: eq unsigned short = ax+0 to unsigned short cheight = [S+$A-4] (used reg = )
17860 4287           8946         FE            mov	-2[bp],ax
17861                                           !BCC_EOS
17862                                           ! 2094  if((modeset_ctl&0x01) && (cheight>8) && (CL<8) && (CH<0x20))
17863                                           ! Debug: and int = const 1 to unsigned char modeset_ctl = [S+$A-9] (used reg = )
17864 428A           8A46         F9            mov	al,-7[bp]
17865 428D           24                     01  and	al,*1
17866 428F           84C0                       test	al,al
17867 4291           74           66            je  	.9A
17868                       00004293            .9E:
17869                                           ! Debug: gt int = const 8 to unsigned short cheight = [S+$A-4] (used reg = )
17870 4293           8B46         FE            mov	ax,-2[bp]
17871 4296           3D                   0008  cmp	ax,*8
17872 4299           76           5E            jbe 	.9A
17873                       0000429B            .9D:
17874                                           ! Debug: lt int = const 8 to unsigned char CL = [S+$A+4] (used reg = )
17875 429B           8A46         06            mov	al,6[bp]
17876 429E           3C                     08  cmp	al,*8
17877 42A0           73           57            jae 	.9A
17878                       000042A2            .9C:
17879                                           ! Debug: lt int = const $20 to unsigned char CH = [S+$A+2] (used reg = )
17880 42A2           8A46         04            mov	al,4[bp]
17881 42A5           3C                     20  cmp	al,*$20
17882 42A7           73           50            jae 	.9A
17883                       000042A9            .9B:
17884                                           ! 2095   {
17885                                           ! 2096    if(CL!=(CH+1))
17886                                           ! Debug: add int = const 1 to unsigned char CH = [S+$A+2] (used reg = )
17887 42A9           8A46         04            mov	al,4[bp]
17888 42AC           30E4                       xor	ah,ah
17889                                           ! Debug: ne unsigned int = ax+1 to unsigned char CL = [S+$A+4] (used reg = )
17890                                           ! Debug: expression subtree swapping
17891 42AE           40                         inc	ax
17892 42AF           50                         push	ax
17893 42B0           8A46         06            mov	al,6[bp]
17894 42B3           30E4                       xor	ah,ah
17895 42B5           3B46         F6            cmp	ax,-$A[bp]
17896 42B8           8D66         F8            lea	sp,-8[bp]
17897 42BB           74           15            je  	.9F
17898                       000042BD            .A0:
17899                                           ! 2097     {
17900                                           ! 2098      CH = ((CH+1) * cheight / 8) -1;
17901                                           ! Debug: add int = const 1 to unsigned char CH = [S+$A+2] (used reg = )
17902 42BD           8A46         04            mov	al,4[bp]
17903 42C0           30E4                       xor	ah,ah
17904                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
17905 42C2           40                         inc	ax
17906 42C3           8B4E         FE            mov	cx,-2[bp]
17907 42C6           F7E9                       imul	cx
17908                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
17909 42C8           B1                     03  mov	cl,*3
17910 42CA           D3E8                       shr	ax,cl
17911                                           ! Debug: sub int = const 1 to unsigned int = ax+0 (used reg = )
17912                                           ! Debug: eq unsigned int = ax-1 to unsigned char CH = [S+$A+2] (used reg = )
17913 42CC           48                         dec	ax
17914 42CD           8846         04            mov	4[bp],al
17915                                           !BCC_EOS
17916                                           ! 2099     }
17917                                           ! 2100    else
17918                                           ! 2101     {
17919 42D0           EB           14            jmp .A1
17920                       000042D2            .9F:
17921                                           ! 2102      CH = ((CL+1) * cheight / 8) - 2;
17922                                           ! Debug: add int = const 1 to unsigned char CL = [S+$A+4] (used reg = )
17923 42D2           8A46         06            mov	al,6[bp]
17924 42D5           30E4                       xor	ah,ah
17925                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
17926 42D7           40                         inc	ax
17927 42D8           8B4E         FE            mov	cx,-2[bp]
17928 42DB           F7E9                       imul	cx
17929                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
17930 42DD           B1                     03  mov	cl,*3
17931 42DF           D3E8                       shr	ax,cl
17932                                           ! Debug: sub int = const 2 to unsigned int = ax+0 (used reg = )
17933                                           ! Debug: eq unsigned int = ax-2 to unsigned char CH = [S+$A+2] (used reg = )
17934 42E1           48                         dec	ax
17935 42E2           48                         dec	ax
17936 42E3           8846         04            mov	4[bp],al
17937                                           !BCC_EOS
17938                                           ! 2103     }
17939                                           ! 2104    CL = ((CL+1) * cheight / 8) - 1;
17940                       000042E6            .A1:
17941                                           ! Debug: add int = const 1 to unsigned char CL = [S+$A+4] (used reg = )
17942 42E6           8A46         06            mov	al,6[bp]
17943 42E9           30E4                       xor	ah,ah
17944                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
17945 42EB           40                         inc	ax
17946 42EC           8B4E         FE            mov	cx,-2[bp]
17947 42EF           F7E9                       imul	cx
17948                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
17949 42F1           B1                     03  mov	cl,*3
17950 42F3           D3E8                       shr	ax,cl
17951                                           ! Debug: sub int = const 1 to unsigned int = ax+0 (used reg = )
17952                                           ! Debug: eq unsigned int = ax-1 to unsigned char CL = [S+$A+4] (used reg = )
17953 42F5           48                         dec	ax
17954 42F6           8846         06            mov	6[bp],al
17955                                           !BCC_EOS
17956                                           ! 2105   }
17957                                           ! 2106  crtc_addr=read_word(0x40,0x63);
17958                       000042F9            .9A:
17959                                           ! Debug: list int = const $63 (used reg = )
17960 42F9           B8                   0063  mov	ax,*$63
17961 42FC           50                         push	ax
17962                                           ! Debug: list int = const $40 (used reg = )
17963 42FD           B8                   0040  mov	ax,*$40
17964 4300           50                         push	ax
17965                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17966 4301           E8         389F            call	_read_word
17967 4304           83C4                   04  add	sp,*4
17968                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$A-8] (used reg = )
17969 4307           8946         FA            mov	-6[bp],ax
17970                                           !BCC_EOS
17971                                           ! 2107  outb(crtc_addr,0x0a);
17972                                           ! Debug: list int = const $A (used reg = )
17973 430A           B8                   000A  mov	ax,*$A
17974 430D           50                         push	ax
17975                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
17976 430E           FF76         FA            push	-6[bp]
17977                                           ! Debug: func () void = outb+0 (used reg = )
17978 4311           E8         38E8            call	_outb
17979 4314           83C4                   04  add	sp,*4
17980                                           !BCC_EOS
17981                                           ! 2108  outb(crtc_addr+1,CH);
17982                                           ! Debug: list unsigned char CH = [S+$A+2] (used reg = )
17983 4317           8A46         04            mov	al,4[bp]
17984 431A           30E4                       xor	ah,ah
17985 431C           50                         push	ax
17986                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$C-8] (used reg = )
17987 431D           8B46         FA            mov	ax,-6[bp]
17988                                           ! Debug: list unsigned int = ax+1 (used reg = )
17989 4320           40                         inc	ax
17990 4321           50                         push	ax
17991                                           ! Debug: func () void = outb+0 (used reg = )
17992 4322           E8         38D7            call	_outb
17993 4325           83C4                   04  add	sp,*4
17994                                           !BCC_EOS
17995                                           ! 2109  outb(crtc_addr,0x0b);
17996                                           ! Debug: list int = const $B (used reg = )
17997 4328           B8                   000B  mov	ax,*$B
17998 432B           50                         push	ax
17999                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
18000 432C           FF76         FA            push	-6[bp]
18001                                           ! Debug: func () void = outb+0 (used reg = )
18002 432F           E8         38CA            call	_outb
18003 4332           83C4                   04  add	sp,*4
18004                                           !BCC_EOS
18005                                           ! 2110  outb(crtc_addr+1,CL);
18006                                           ! Debug: list unsigned char CL = [S+$A+4] (used reg = )
18007 4335           8A46         06            mov	al,6[bp]
18008 4338           30E4                       xor	ah,ah
18009 433A           50                         push	ax
18010                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$C-8] (used reg = )
18011 433B           8B46         FA            mov	ax,-6[bp]
18012                                           ! Debug: list unsigned int = ax+1 (used reg = )
18013 433E           40                         inc	ax
18014 433F           50                         push	ax
18015                                           ! Debug: func () void = outb+0 (used reg = )
18016 4340           E8         38B9            call	_outb
18017 4343           83C4                   04  add	sp,*4
18018                                           !BCC_EOS
18019                                           ! 2111 }
18020 4346           89EC                       mov	sp,bp
18021 4348           5D                         pop	bp
18022 4349           C3                         ret
18023                                           ! 2112 static void biosfn_set_cursor_pos (page, cursor)
18024                                           ! 2113 Bit8u page;Bit16u cursor;
18025                       0000434A            _biosfn_set_cursor_pos:
18026                                           !BCC_EOS
18027                                           !BCC_EOS
18028                                           ! 2114 {
18029                                           ! 2115  Bit8u xcurs,ycurs,current;
18030                                           !BCC_EOS
18031                                           ! 2116  Bit16u nbcols,nbrows,address,crtc_addr;
18032                                           !BCC_EOS
18033                                           ! 2117  if(page>7)return;
18034 434A           55                         push	bp
18035 434B           89E5                       mov	bp,sp
18036 434D           83C4                   F4  add	sp,*-$C
18037                                           ! Debug: gt int = const 7 to unsigned char page = [S+$E+2] (used reg = )
18038 4350           8A46         04            mov	al,4[bp]
18039 4353           3C                     07  cmp	al,*7
18040 4355           76           04            jbe 	.A2
18041                       00004357            .A3:
18042 4357           89EC                       mov	sp,bp
18043 4359           5D                         pop	bp
18044 435A           C3                         ret
18045                                           !BCC_EOS
18046                                           ! 2118  write_word(0x40, 0x50 +2*page, cursor);
18047                       0000435B            .A2:
18048                                           ! Debug: list unsigned short cursor = [S+$E+4] (used reg = )
18049 435B           FF76         06            push	6[bp]
18050                                           ! Debug: mul unsigned char page = [S+$10+2] to int = const 2 (used reg = )
18051                                           ! Debug: expression subtree swapping
18052 435E           8A46         04            mov	al,4[bp]
18053 4361           30E4                       xor	ah,ah
18054 4363           D1E0                       shl	ax,*1
18055                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
18056                                           ! Debug: expression subtree swapping
18057                                           ! Debug: list unsigned int = ax+$50 (used reg = )
18058 4365           05                   0050  add	ax,*$50
18059 4368           50                         push	ax
18060                                           ! Debug: list int = const $40 (used reg = )
18061 4369           B8                   0040  mov	ax,*$40
18062 436C           50                         push	ax
18063                                           ! Debug: func () void = write_word+0 (used reg = )
18064 436D           E8         385E            call	_write_word
18065 4370           83C4                   06  add	sp,*6
18066                                           !BCC_EOS
18067                                           ! 2119  current=read_byte(0x40,0x62);
18068                                           ! Debug: list int = const $62 (used reg = )
18069 4373           B8                   0062  mov	ax,*$62
18070 4376           50                         push	ax
18071                                           ! Debug: list int = const $40 (used reg = )
18072 4377           B8                   0040  mov	ax,*$40
18073 437A           50                         push	ax
18074                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18075 437B           E8         3812            call	_read_byte
18076 437E           83C4                   04  add	sp,*4
18077                                           ! Debug: eq unsigned char = al+0 to unsigned char current = [S+$E-5] (used reg = )
18078 4381           8846         FD            mov	-3[bp],al
18079                                           !BCC_EOS
18080                                           ! 2120  if(page==current)
18081                                           ! Debug: logeq unsigned char current = [S+$E-5] to unsigned char page = [S+$E+2] (used reg = )
18082 4384           8A46         04            mov	al,4[bp]
18083 4387           3A46         FD            cmp	al,-3[bp]
18084 438A         0F85         00B8            bne 	.A4
18085                       0000438E            .A5:
18086                                           ! 2121   {
18087                                           ! 2122    nbcols=read_word(0x40,0x4A);
18088                                           ! Debug: list int = const $4A (used reg = )
18089 438E           B8                   004A  mov	ax,*$4A
18090 4391           50                         push	ax
18091                                           ! Debug: list int = const $40 (used reg = )
18092 4392           B8                   0040  mov	ax,*$40
18093 4395           50                         push	ax
18094                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18095 4396           E8         380A            call	_read_word
18096 4399           83C4                   04  add	sp,*4
18097                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$E-8] (used reg = )
18098 439C           8946         FA            mov	-6[bp],ax
18099                                           !BCC_EOS
18100                                           ! 2123    nbrows=read_byte(0x40,0x84)+1;
18101                                           ! Debug: list int = const $84 (used reg = )
18102 439F           B8                   0084  mov	ax,#$84
18103 43A2           50                         push	ax
18104                                           ! Debug: list int = const $40 (used reg = )
18105 43A3           B8                   0040  mov	ax,*$40
18106 43A6           50                         push	ax
18107                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18108 43A7           E8         37E6            call	_read_byte
18109 43AA           83C4                   04  add	sp,*4
18110                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
18111 43AD           30E4                       xor	ah,ah
18112                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$E-$A] (used reg = )
18113 43AF           40                         inc	ax
18114 43B0           8946         F8            mov	-8[bp],ax
18115                                           !BCC_EOS
18116                                           ! 2124    xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
18117                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$E+4] (used reg = )
18118 43B3           8A46         06            mov	al,6[bp]
18119                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$E-3] (used reg = )
18120 43B6           8846         FF            mov	-1[bp],al
18121                                           !BCC_EOS
18122                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$E+4] (used reg = )
18123 43B9           8B46         06            mov	ax,6[bp]
18124 43BC           30C0                       xor	al,al
18125                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
18126 43BE           88E0                       mov	al,ah
18127 43C0           30E4                       xor	ah,ah
18128                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$E-4] (used reg = )
18129 43C2           8846         FE            mov	-2[bp],al
18130                                           !BCC_EOS
18131                                           ! 2125    address=((((nbcols*nb
18132                                           ! 2125 rows)|0x00ff)+1)*page)+xcurs+ycurs*nbcols;
18133                                           ! Debug: mul unsigned short nbcols = [S+$E-8] to unsigned char ycurs = [S+$E-4] (used reg = )
18134 43C5           8A46         FE            mov	al,-2[bp]
18135 43C8           30E4                       xor	ah,ah
18136 43CA           8B4E         FA            mov	cx,-6[bp]
18137 43CD           F7E9                       imul	cx
18138 43CF           50                         push	ax
18139                                           ! Debug: mul unsigned short nbrows = [S+$10-$A] to unsigned short nbcols = [S+$10-8] (used reg = )
18140 43D0           8B46         FA            mov	ax,-6[bp]
18141 43D3           8B4E         F8            mov	cx,-8[bp]
18142 43D6           F7E9                       imul	cx
18143                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
18144 43D8           0C                     FF  or	al,#$FF
18145                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
18146                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
18147 43DA           89C3                       mov	bx,ax
18148 43DC           8A46         04            mov	al,4[bp]
18149 43DF           30E4                       xor	ah,ah
18150 43E1           93                         xchg	ax,bx
18151 43E2           40                         inc	ax
18152 43E3           89D9                       mov	cx,bx
18153 43E5           F7E9                       imul	cx
18154                                           ! Debug: add unsigned char xcurs = [S+$10-3] to unsigned int = ax+0 (used reg = )
18155 43E7           0246         FF            add	al,-1[bp]
18156 43EA           80D4                   00  adc	ah,*0
18157                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
18158 43ED           0346         F2            add	ax,-$E[bp]
18159 43F0           44                         inc	sp
18160 43F1           44                         inc	sp
18161                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$E-$C] (used reg = )
18162 43F2           8946         F6            mov	-$A[bp],ax
18163                                           !BCC_EOS
18164                                           ! 2126    crtc_addr=read_word(0x40,0x63);
18165                                           ! Debug: list int = const $63 (used reg = )
18166 43F5           B8                   0063  mov	ax,*$63
18167 43F8           50                         push	ax
18168                                           ! Debug: list int = const $40 (used reg = )
18169 43F9           B8                   0040  mov	ax,*$40
18170 43FC           50                         push	ax
18171                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18172 43FD           E8         37A3            call	_read_word
18173 4400           83C4                   04  add	sp,*4
18174                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$E-$E] (used reg = )
18175 4403           8946         F4            mov	-$C[bp],ax
18176                                           !BCC_EOS
18177                                           ! 2127    outb(crtc_addr,0x0e);
18178                                           ! Debug: list int = const $E (used reg = )
18179 4406           B8                   000E  mov	ax,*$E
18180 4409           50                         push	ax
18181                                           ! Debug: list unsigned short crtc_addr = [S+$10-$E] (used reg = )
18182 440A           FF76         F4            push	-$C[bp]
18183                                           ! Debug: func () void = outb+0 (used reg = )
18184 440D           E8         37EC            call	_outb
18185 4410           83C4                   04  add	sp,*4
18186                                           !BCC_EOS
18187                                           ! 2128    outb(crtc_addr+1,(address&0xff00)>>8);
18188                                           ! Debug: and unsigned int = const $FF00 to unsigned short address = [S+$E-$C] (used reg = )
18189 4413           8B46         F6            mov	ax,-$A[bp]
18190 4416           30C0                       xor	al,al
18191                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
18192 4418           88E0                       mov	al,ah
18193 441A           30E4                       xor	ah,ah
18194                                           ! Debug: list unsigned int = ax+0 (used reg = )
18195 441C           50                         push	ax
18196                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-$E] (used reg = )
18197 441D           8B46         F4            mov	ax,-$C[bp]
18198                                           ! Debug: list unsigned int = ax+1 (used reg = )
18199 4420           40                         inc	ax
18200 4421           50                         push	ax
18201                                           ! Debug: func () void = outb+0 (used reg = )
18202 4422           E8         37D7            call	_outb
18203 4425           83C4                   04  add	sp,*4
18204                                           !BCC_EOS
18205                                           ! 2129    outb(crtc_addr,0x0f);
18206                                           ! Debug: list int = const $F (used reg = )
18207 4428           B8                   000F  mov	ax,*$F
18208 442B           50                         push	ax
18209                                           ! Debug: list unsigned short crtc_addr = [S+$10-$E] (used reg = )
18210 442C           FF76         F4            push	-$C[bp]
18211                                           ! Debug: func () void = outb+0 (used reg = )
18212 442F           E8         37CA            call	_outb
18213 4432           83C4                   04  add	sp,*4
18214                                           !BCC_EOS
18215                                           ! 2130    outb(crtc_addr+1,address&0x00ff);
18216                                           ! Debug: and int = const $FF to unsigned short address = [S+$E-$C] (used reg = )
18217 4435           8A46         F6            mov	al,-$A[bp]
18218                                           ! Debug: list unsigned char = al+0 (used reg = )
18219 4438           30E4                       xor	ah,ah
18220 443A           50                         push	ax
18221                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-$E] (used reg = )
18222 443B           8B46         F4            mov	ax,-$C[bp]
18223                                           ! Debug: list unsigned int = ax+1 (used reg = )
18224 443E           40                         inc	ax
18225 443F           50                         push	ax
18226                                           ! Debug: func () void = outb+0 (used reg = )
18227 4440           E8         37B9            call	_outb
18228 4443           83C4                   04  add	sp,*4
18229                                           !BCC_EOS
18230                                           ! 2131   }
18231                                           ! 2132 }
18232                       00004446            .A4:
18233 4446           89EC                       mov	sp,bp
18234 4448           5D                         pop	bp
18235 4449           C3                         ret
18236                                           ! 2133 static void biosfn_get_cursor_pos (page,shape, pos)
18237                                           ! Register BX used in function biosfn_set_cursor_pos
18238                                           ! 2134 Bit8u page;Bit16u *shape;Bit16u *pos;
18239                       0000444A            _biosfn_get_cursor_pos:
18240                                           !BCC_EOS
18241                                           !BCC_EOS
18242                                           !BCC_EOS
18243                                           ! 2135 {
18244                                           ! 2136  Bit16u ss=get_SS();
18245 444A           55                         push	bp
18246 444B           89E5                       mov	bp,sp
18247 444D           4C                         dec	sp
18248 444E           4C                         dec	sp
18249                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
18250 444F           E8         37CA            call	_get_SS
18251                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
18252 4452           8946         FE            mov	-2[bp],ax
18253                                           !BCC_EOS
18254                                           ! 2137  write_word(ss, shape, 0);
18255                                           ! Debug: list int = const 0 (used reg = )
18256 4455           31C0                       xor	ax,ax
18257 4457           50                         push	ax
18258                                           ! Debug: list * unsigned short shape = [S+6+4] (used reg = )
18259 4458           FF76         06            push	6[bp]
18260                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
18261 445B           FF76         FE            push	-2[bp]
18262                                           ! Debug: func () void = write_word+0 (used reg = )
18263 445E           E8         376D            call	_write_word
18264 4461           83C4                   06  add	sp,*6
18265                                           !BCC_EOS
18266                                           ! 2138  write_word(ss, pos, 0);
18267                                           ! Debug: list int = const 0 (used reg = )
18268 4464           31C0                       xor	ax,ax
18269 4466           50                         push	ax
18270                                           ! Debug: list * unsigned short pos = [S+6+6] (used reg = )
18271 4467           FF76         08            push	8[bp]
18272                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
18273 446A           FF76         FE            push	-2[bp]
18274                                           ! Debug: func () void = write_word+0 (used reg = )
18275 446D           E8         375E            call	_write_word
18276 4470           83C4                   06  add	sp,*6
18277                                           !BCC_EOS
18278                                           ! 2139  if(page>7)return;
18279                                           ! Debug: gt int = const 7 to unsigned char page = [S+4+2] (used reg = )
18280 4473           8A46         04            mov	al,4[bp]
18281 4476           3C                     07  cmp	al,*7
18282 4478           76           04            jbe 	.A6
18283                       0000447A            .A7:
18284 447A           89EC                       mov	sp,bp
18285 447C           5D                         pop	bp
18286 447D           C3                         ret
18287                                           !BCC_EOS
18288                                           ! 2140  write_word(ss,shape,read_word(0x40,0x60));
18289                       0000447E            .A6:
18290                                           ! Debug: list int = const $60 (used reg = )
18291 447E           B8                   0060  mov	ax,*$60
18292 4481           50                         push	ax
18293                                           ! Debug: list int = const $40 (used reg = )
18294 4482           B8                   0040  mov	ax,*$40
18295 4485           50                         push	ax
18296                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18297 4486           E8         371A            call	_read_word
18298 4489           83C4                   04  add	sp,*4
18299                                           ! Debug: list unsigned short = ax+0 (used reg = )
18300 448C           50                         push	ax
18301                                           ! Debug: list * unsigned short shape = [S+6+4] (used reg = )
18302 448D           FF76         06            push	6[bp]
18303                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
18304 4490           FF76         FE            push	-2[bp]
18305                                           ! Debug: func () void = write_word+0 (used reg = )
18306 4493           E8         3738            call	_write_word
18307 4496           83C4                   06  add	sp,*6
18308                                           !BCC_EOS
18309                                           ! 2141  write_word(ss,pos,read_word(0x40,0x50 +page*2));
18310                                           ! Debug: mul int = const 2 to unsigned char page = [S+4+2] (used reg = )
18311 4499           8A46         04            mov	al,4[bp]
18312 449C           30E4                       xor	ah,ah
18313 449E           D1E0                       shl	ax,*1
18314                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
18315                                           ! Debug: expression subtree swapping
18316                                           ! Debug: list unsigned int = ax+$50 (used reg = )
18317 44A0           05                   0050  add	ax,*$50
18318 44A3           50                         push	ax
18319                                           ! Debug: list int = const $40 (used reg = )
18320 44A4           B8                   0040  mov	ax,*$40
18321 44A7           50                         push	ax
18322                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18323 44A8           E8         36F8            call	_read_word
18324 44AB           83C4                   04  add	sp,*4
18325                                           ! Debug: list unsigned short = ax+0 (used reg = )
18326 44AE           50                         push	ax
18327                                           ! Debug: list * unsigned short pos = [S+6+6] (used reg = )
18328 44AF           FF76         08            push	8[bp]
18329                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
18330 44B2           FF76         FE            push	-2[bp]
18331                                           ! Debug: func () void = write_word+0 (used reg = )
18332 44B5           E8         3716            call	_write_word
18333 44B8           83C4                   06  add	sp,*6
18334                                           !BCC_EOS
18335                                           ! 2142 }
18336 44BB           89EC                       mov	sp,bp
18337 44BD           5D                         pop	bp
18338 44BE           C3                         ret
18339                                           ! 2143 static void biosfn_set_active_page (page)
18340                                           ! 2144 Bit8u page;
18341                       000044BF            _biosfn_set_active_page:
18342                                           !BCC_EOS
18343                                           ! 2145 {
18344                                           ! 2146  Bit16u cursor,dummy,crtc_addr;
18345                                           !BCC_EOS
18346                                           ! 2147  Bit16u nbcols,nbrows,address;
18347                                           !BCC_EOS
18348                                           ! 2148  Bit8u mode,line;
18349                                           !BCC_EOS
18350                                           ! 2149  if(page>7)return;
18351 44BF           55                         push	bp
18352 44C0           89E5                       mov	bp,sp
18353 44C2           83C4                   F2  add	sp,*-$E
18354                                           ! Debug: gt int = const 7 to unsigned char page = [S+$10+2] (used reg = )
18355 44C5           8A46         04            mov	al,4[bp]
18356 44C8           3C                     07  cmp	al,*7
18357 44CA           76           04            jbe 	.A8
18358                       000044CC            .A9:
18359 44CC           89EC                       mov	sp,bp
18360 44CE           5D                         pop	bp
18361 44CF           C3                         ret
18362                                           !BCC_EOS
18363                                           ! 2150  mode=read_byte(0x40,0x49);
18364                       000044D0            .A8:
18365                                           ! Debug: list int = const $49 (used reg = )
18366 44D0           B8                   0049  mov	ax,*$49
18367 44D3           50                         push	ax
18368                                           ! Debug: list int = const $40 (used reg = )
18369 44D4           B8                   0040  mov	ax,*$40
18370 44D7           50                         push	ax
18371                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18372 44D8           E8         36B5            call	_read_byte
18373 44DB           83C4                   04  add	sp,*4
18374                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$10-$F] (used reg = )
18375 44DE           8846         F3            mov	-$D[bp],al
18376                                           !BCC_EOS
18377                                           ! 2151  line=find_vga_entry(mode);
18378                                           ! Debug: list unsigned char mode = [S+$10-$F] (used reg = )
18379 44E1           8A46         F3            mov	al,-$D[bp]
18380 44E4           30E4                       xor	ah,ah
18381 44E6           50                         push	ax
18382                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
18383 44E7           E8         35BA            call	_find_vga_entry
18384 44EA           44                         inc	sp
18385 44EB           44                         inc	sp
18386                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$10-$10] (used reg = )
18387 44EC           8846         F2            mov	-$E[bp],al
18388                                           !BCC_EOS
18389                                           ! 2152  if(line==0xFF)return;
18390                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$10-$10] (used reg = )
18391 44EF           8A46         F2            mov	al,-$E[bp]
18392 44F2           3C                     FF  cmp	al,#$FF
18393 44F4           75           04            jne 	.AA
18394                       000044F6            .AB:
18395 44F6           89EC                       mov	sp,bp
18396 44F8           5D                         pop	bp
18397 44F9           C3                         ret
18398                                           !BCC_EOS
18399                                           ! 2153  biosfn_get_cursor_pos(page,&dummy,&cursor);
18400                       000044FA            .AA:
18401                                           ! Debug: list * unsigned short cursor = S+$10-4 (used reg = )
18402 44FA           8D5E         FE            lea	bx,-2[bp]
18403 44FD           53                         push	bx
18404                                           ! Debug: list * unsigned short dummy = S+$12-6 (used reg = )
18405 44FE           8D5E         FC            lea	bx,-4[bp]
18406 4501           53                         push	bx
18407                                           ! Debug: list unsigned char page = [S+$14+2] (used reg = )
18408 4502           8A46         04            mov	al,4[bp]
18409 4505           30E4                       xor	ah,ah
18410 4507           50                         push	ax
18411                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
18412 4508           E8         FF3F            call	_biosfn_get_cursor_pos
18413 450B           83C4                   06  add	sp,*6
18414                                           !BCC_EOS
18415                                           ! 2154  if(vga_modes[line].class==0x00)
18416                                           ! Debug: ptradd unsigned char line = [S+$10-$10] to [$10] struct  = vga_modes+0 (used reg = )
18417 450E           8A46         F2            mov	al,-$E[bp]
18418 4511           30E4                       xor	ah,ah
18419 4513           B1                     03  mov	cl,*3
18420 4515           D3E0                       shl	ax,cl
18421 4517           89C3                       mov	bx,ax
18422 4519           81C3                 01FD  add	bx,#_vga_modes
18423                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
18424 451D           8A47         01            mov	al,1[bx]
18425 4520           84C0                       test	al,al
18426 4522           75           6E            jne 	.AC
18427                       00004524            .AD:
18428                                           ! 2155   {
18429                                           ! 2156    nbcols=read_word(0x40,0x4A);
18430                                           ! Debug: list int = const $4A (used reg = )
18431 4524           B8                   004A  mov	ax,*$4A
18432 4527           50                         push	ax
18433                                           ! Debug: list int = const $40 (used reg = )
18434 4528           B8                   0040  mov	ax,*$40
18435 452B           50                         push	ax
18436                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18437 452C           E8         3674            call	_read_word
18438 452F           83C4                   04  add	sp,*4
18439                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$10-$A] (used reg = )
18440 4532           8946         F8            mov	-8[bp],ax
18441                                           !BCC_EOS
18442                                           ! 2157    nbrows=read_byte(0x40,0x84)+1;
18443                                           ! Debug: list int = const $84 (used reg = )
18444 4535           B8                   0084  mov	ax,#$84
18445 4538           50                         push	ax
18446                                           ! Debug: list int = const $40 (used reg = )
18447 4539           B8                   0040  mov	ax,*$40
18448 453C           50                         push	ax
18449                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18450 453D           E8         3650            call	_read_byte
18451 4540           83C4                   04  add	sp,*4
18452                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
18453 4543           30E4                       xor	ah,ah
18454                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$10-$C] (used reg = )
18455 4545           40                         inc	ax
18456 4546           8946         F6            mov	-$A[bp],ax
18457                                           !BCC_EOS
18458                                           ! 2158    address=((((nbcols*nbrows*2)|0x00ff)+1)*page);
18459                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
18460 4549           8B46         F8            mov	ax,-8[bp]
18461 454C           8B4E         F6            mov	cx,-$A[bp]
18462 454F           F7E9                       imul	cx
18463                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
18464 4551           D1E0                       shl	ax,*1
18465                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
18466 4553           0C                     FF  or	al,#$FF
18467                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
18468                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
18469 4555           89C3                       mov	bx,ax
18470 4557           8A46         04            mov	al,4[bp]
18471 455A           30E4                       xor	ah,ah
18472 455C           93                         xchg	ax,bx
18473 455D           40                         inc	ax
18474 455E           89D9                       mov	cx,bx
18475 4560           F7E9                       imul	cx
18476                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18477 4562           8946         F4            mov	-$C[bp],ax
18478                                           !BCC_EOS
18479                                           ! 2159    write_word(0x40,0x4E,address);
18480                                           ! Debug: list unsigned short address = [S+$10-$E] (used reg = )
18481 4565           FF76         F4            push	-$C[bp]
18482                                           ! Debug: list int = const $4E (used reg = )
18483 4568           B8                   004E  mov	ax,*$4E
18484 456B           50                         push	ax
18485                                           ! Debug: list int = const $40 (used reg = )
18486 456C           B8                   0040  mov	ax,*$40
18487 456F           50                         push	ax
18488                                           ! Debug: func () void = write_word+0 (used reg = )
18489 4570           E8         365B            call	_write_word
18490 4573           83C4                   06  add	sp,*6
18491                                           !BCC_EOS
18492                                           ! 2160    address=((((nbcols*nbrows)|0x00ff)+1)*page);
18493                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
18494 4576           8B46         F8            mov	ax,-8[bp]
18495 4579           8B4E         F6            mov	cx,-$A[bp]
18496 457C           F7E9                       imul	cx
18497                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
18498 457E           0C                     FF  or	al,#$FF
18499                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
18500                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
18501 4580           89C3                       mov	bx,ax
18502 4582           8A46         04            mov	al,4[bp]
18503 4585           30E4                       xor	ah,ah
18504 4587           93                         xchg	ax,bx
18505 4588           40                         inc	ax
18506 4589           89D9                       mov	cx,bx
18507 458B           F7E9                       imul	cx
18508                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18509 458D           8946         F4            mov	-$C[bp],ax
18510                                           !BCC_EOS
18511                                           ! 2161   }
18512                                           ! 2162  else
18513                                           ! 2163   {
18514 4590           EB           24            jmp .AE
18515                       00004592            .AC:
18516                                           ! 2164    address = page * (*(Bit16u *)&video_param_table[line_to_vpti[line]].slength_l);
18517                                           ! Debug: ptradd unsigned char line = [S+$10-$10] to [$10] unsigned char = line_to_vpti+0 (used reg = )
18518 4592           8A46         F2            mov	al,-$E[bp]
18519 4595           30E4                       xor	ah,ah
18520 4597           89C3                       mov	bx,ax
18521                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
18522 4599           8A87       027D            mov	al,_line_to_vpti[bx]
18523 459D           30E4                       xor	ah,ah
18524 459F           B1                     06  mov	cl,*6
18525 45A1           D3E0                       shl	ax,cl
18526 45A3           89C3                       mov	bx,ax
18527 45A5           81C3                 0291  add	bx,#_video_param_table
18528                                           ! Debug: address unsigned char = [bx+3] (used reg = )
18529                                           ! Debug: cast * unsigned short = const 0 to * unsigned char = bx+3 (used reg = )
18530                                           ! Debug: mul unsigned short = [bx+3] to unsigned char page = [S+$10+2] (used reg = )
18531 45A9           8A46         04            mov	al,4[bp]
18532 45AC           30E4                       xor	ah,ah
18533 45AE           8B4F         03            mov	cx,3[bx]
18534 45B1           F7E9                       imul	cx
18535                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18536 45B3           8946         F4            mov	-$C[bp],ax
18537                                           !BCC_EOS
18538                                           ! 2165   }
18539                                           ! 2166  crtc_addr=read_word(0x40,0x63);
18540                       000045B6            .AE:
18541                                           ! Debug: list int = const $63 (used reg = )
18542 45B6           B8                   0063  mov	ax,*$63
18543 45B9           50                         push	ax
18544                                           ! Debug: list int = const $40 (used reg = )
18545 45BA           B8                   0040  mov	ax,*$40
18546 45BD           50                         push	ax
18547                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18548 45BE           E8         35E2            call	_read_word
18549 45C1           83C4                   04  add	sp,*4
18550                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$10-8] (used reg = )
18551 45C4           8946         FA            mov	-6[bp],ax
18552                                           !BCC_EOS
18553                                           ! 2167  outb(crtc_addr,0x0c);
18554                                           ! Debug: list int = const $C (used reg = )
18555 45C7           B8                   000C  mov	ax,*$C
18556 45CA           50                         push	ax
18557                                           ! Debug: list unsigned short crtc_addr = [S+$12-8] (used reg = )
18558 45CB           FF76         FA            push	-6[bp]
18559                                           ! Debug: func () void = outb+0 (used reg = )
18560 45CE           E8         362B            call	_outb
18561 45D1           83C4                   04  add	sp,*4
18562                                           !BCC_EOS
18563                                           ! 2168  outb(crtc_addr+1,(address&0xff00)>>8);
18564                                           ! Debug: and unsigned int = const $FF00 to unsigned short address = [S+$10-$E] (used reg = )
18565 45D4           8B46         F4            mov	ax,-$C[bp]
18566 45D7           30C0                       xor	al,al
18567                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
18568 45D9           88E0                       mov	al,ah
18569 45DB           30E4                       xor	ah,ah
18570                                           ! Debug: list unsigned int = ax+0 (used reg = )
18571 45DD           50                         push	ax
18572                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$12-8] (used reg = )
18573 45DE           8B46         FA            mov	ax,-6[bp]
18574                                           ! Debug: list unsigned int = ax+1 (used reg = )
18575 45E1           40                         inc	ax
18576 45E2           50                         push	ax
18577                                           ! Debug: func () void = outb+0 (used reg = )
18578 45E3           E8         3616            call	_outb
18579 45E6           83C4                   04  add	sp,*4
18580                                           !BCC_EOS
18581                                           ! 2169  outb(crtc_addr,0x0d);
18582                                           ! Debug: list int = const $D (used reg = )
18583 45E9           B8                   000D  mov	ax,*$D
18584 45EC           50                         push	ax
18585                                           ! Debug: list unsigned short crtc_addr = [S+$12-8] (used reg = )
18586 45ED           FF76         FA            push	-6[bp]
18587                                           ! Debug: func () void = outb+0 (used reg = )
18588 45F0           E8         3609            call	_outb
18589 45F3           83C4                   04  add	sp,*4
18590                                           !BCC_EOS
18591                                           ! 2170  outb(crtc_addr+1,address&0x00ff);
18592                                           ! Debug: and int = const $FF to unsigned short address = [S+$10-$E] (used reg = )
18593 45F6           8A46         F4            mov	al,-$C[bp]
18594                                           ! Debug: list unsigned char = al+0 (used reg = )
18595 45F9           30E4                       xor	ah,ah
18596 45FB           50                         push	ax
18597                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$12-8] (used reg = )
18598 45FC           8B46         FA            mov	ax,-6[bp]
18599                                           ! Debug: list unsigned int = ax+1 (used reg = )
18600 45FF           40                         inc	ax
18601 4600           50                         push	ax
18602                                           ! Debug: func () void = outb+0 (used reg = )
18603 4601           E8         35F8            call	_outb
18604 4604           83C4                   04  add	sp,*4
18605                                           !BCC_EOS
18606                                           ! 2171  write_byte(0x40,0x62,page);
18607                                           ! Debug: list unsigned char page = [S+$10+2] (used reg = )
18608 4607           8A46         04            mov	al,4[bp]
18609 460A           30E4                       xor	ah,ah
18610 460C           50                         push	ax
18611                                           ! Debug: list int = const $62 (used reg = )
18612 460D           B8                   0062  mov	ax,*$62
18613 4610           50                         push	ax
18614                                           ! Debug: list int = const $40 (used reg = )
18615 4611           B8                   0040  mov	ax,*$40
18616 4614           50                         push	ax
18617                                           ! Debug: func () void = write_byte+0 (used reg = )
18618 4615           E8         359E            call	_write_byte
18619 4618           83C4                   06  add	sp,*6
18620                                           !BCC_EOS
18621                                           ! 2172  biosfn_set_cursor_pos(page,cursor);
18622                                           ! Debug: list unsigned short cursor = [S+$10-4] (used reg = )
18623 461B           FF76         FE            push	-2[bp]
18624                                           ! Debug: list unsigned char page = [S+$12+2] (used reg = )
18625 461E           8A46         04            mov	al,4[bp]
18626 4621           30E4                       xor	ah,ah
18627 4623           50                         push	ax
18628                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
18629 4624           E8         FD23            call	_biosfn_set_cursor_pos
18630 4627           83C4                   04  add	sp,*4
18631                                           !BCC_EOS
18632                                           ! 2173 }
18633 462A           89EC                       mov	sp,bp
18634 462C           5D                         pop	bp
18635 462D           C3                         ret
18636                                           ! 2174 static void vgamem_copy_pl4(xstart,ysrc,ydest,cols,nbcols,cheight)
18637                                           ! Register BX used in function biosfn_set_active_page
18638                                           ! 2175 Bit8u xstart;Bit8u ysrc;Bit8u ydest;Bit8u cols;Bit8u nbcols;Bit8u cheight;
18639                       0000462E            _vgamem_copy_pl4:
18640                                           !BCC_EOS
18641                                           !BCC_EOS
18642                                           !BCC_EOS
18643                                           !BCC_EOS
18644                                           !BCC_EOS
18645                                           !BCC_EOS
18646                                           ! 2176 {
18647                                           ! 2177  Bit16u src,dest;
18648                                           !BCC_EOS
18649                                           ! 2178  Bit8u i;
18650                                           !BCC_EOS
18651                                           ! 2179  src=ysrc*cheight*nbcols+xstart;
18652 462E           55                         push	bp
18653 462F           89E5                       mov	bp,sp
18654 4631           83C4                   FA  add	sp,*-6
18655                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ysrc = [S+8+4] (used reg = )
18656 4634           8A46         0E            mov	al,$E[bp]
18657 4637           30E4                       xor	ah,ah
18658 4639           89C3                       mov	bx,ax
18659 463B           8A46         06            mov	al,6[bp]
18660 463E           30E4                       xor	ah,ah
18661 4640           89D9                       mov	cx,bx
18662 4642           F7E9                       imul	cx
18663                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18664 4644           89C3                       mov	bx,ax
18665 4646           8A46         0C            mov	al,$C[bp]
18666 4649           30E4                       xor	ah,ah
18667 464B           93                         xchg	ax,bx
18668 464C           89D9                       mov	cx,bx
18669 464E           F7E9                       imul	cx
18670                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18671 4650           0246         04            add	al,4[bp]
18672 4653           80D4                   00  adc	ah,*0
18673                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+8-4] (used reg = )
18674 4656           8946         FE            mov	-2[bp],ax
18675                                           !BCC_EOS
18676                                           ! 2180  dest=ydest*cheight*nbcols+xstart;
18677                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ydest = [S+8+6] (used reg = )
18678 4659           8A46         0E            mov	al,$E[bp]
18679 465C           30E4                       xor	ah,ah
18680 465E           89C3                       mov	bx,ax
18681 4660           8A46         08            mov	al,8[bp]
18682 4663           30E4                       xor	ah,ah
18683 4665           89D9                       mov	cx,bx
18684 4667           F7E9                       imul	cx
18685                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18686 4669           89C3                       mov	bx,ax
18687 466B           8A46         0C            mov	al,$C[bp]
18688 466E           30E4                       xor	ah,ah
18689 4670           93                         xchg	ax,bx
18690 4671           89D9                       mov	cx,bx
18691 4673           F7E9                       imul	cx
18692                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18693 4675           0246         04            add	al,4[bp]
18694 4678           80D4                   00  adc	ah,*0
18695                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+8-6] (used reg = )
18696 467B           8946         FC            mov	-4[bp],ax
18697                                           !BCC_EOS
18698                                           ! 2181  outw(0x3ce, 0x0105);
18699                                           ! Debug: list int = const $105 (used reg = )
18700 467E           B8                   0105  mov	ax,#$105
18701 4681           50                         push	ax
18702                                           ! Debug: list int = const $3CE (used reg = )
18703 4682           B8                   03CE  mov	ax,#$3CE
18704 4685           50                         push	ax
18705                                           ! Debug: func () void = outw+0 (used reg = )
18706 4686           E8         3583            call	_outw
18707 4689           83C4                   04  add	sp,*4
18708                                           !BCC_EOS
18709                                           ! 2182  for(i=0;i<cheight;i++)
18710                                           ! Debug: eq int = const 0 to unsigned char i = [S+8-7] (used reg = )
18711 468C           30C0                       xor	al,al
18712 468E           8846         FB            mov	-5[bp],al
18713                                           !BCC_EOS
18714                                           !BCC_EOS
18715                                           ! 2183   {
18716 4691           EB           43            jmp .B1
18717                       00004693            .B2:
18718                                           ! 2184    memcpyb(0xa000,dest+i*nbcols,0xa000,src+i*nbcols,cols);
18719                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
18720 4693           8A46         0A            mov	al,$A[bp]
18721 4696           30E4                       xor	ah,ah
18722 4698           50                         push	ax
18723                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned char i = [S+$A-7] (used reg = )
18724 4699           8A46         0C            mov	al,$C[bp]
18725 469C           30E4                       xor	ah,ah
18726 469E           89C3                       mov	bx,ax
18727 46A0           8A46         FB            mov	al,-5[bp]
18728 46A3           30E4                       xor	ah,ah
18729 46A5           89D9                       mov	cx,bx
18730 46A7           F7E9                       imul	cx
18731                                           ! Debug: add unsigned int = ax+0 to unsigned short src = [S+$A-4] (used reg = )
18732                                           ! Debug: expression subtree swapping
18733 46A9           0346         FE            add	ax,-2[bp]
18734                                           ! Debug: list unsigned int = ax+0 (used reg = )
18735 46AC           50                         push	ax
18736                                           ! Debug: list unsigned int = const $A000 (used reg = )
18737 46AD           B8                   A000  mov	ax,#$A000
18738 46B0           50                         push	ax
18739                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-7] (used reg = )
18740 46B1           8A46         0C            mov	al,$C[bp]
18741 46B4           30E4                       xor	ah,ah
18742 46B6           89C3                       mov	bx,ax
18743 46B8           8A46         FB            mov	al,-5[bp]
18744 46BB           30E4                       xor	ah,ah
18745 46BD           89D9                       mov	cx,bx
18746 46BF           F7E9                       imul	cx
18747                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$E-6] (used reg = )
18748                                           ! Debug: expression subtree swapping
18749 46C1           0346         FC            add	ax,-4[bp]
18750                                           ! Debug: list unsigned int = ax+0 (used reg = )
18751 46C4           50                         push	ax
18752                                           ! Debug: list unsigned int = const $A000 (used reg = )
18753 46C5           B8                   A000  mov	ax,#$A000
18754 46C8           50                         push	ax
18755                                           ! Debug: func () void = memcpyb+0 (used reg = )
18756 46C9           E8         3464            call	_memcpyb
18757 46CC           83C4                   0A  add	sp,*$A
18758                                           !BCC_EOS
18759                                           ! 2185   }
18760                                           ! 2186  outw(0x3ce, 0x0005);
18761                       000046CF            .B0:
18762                                           ! Debug: postinc unsigned char i = [S+8-7] (used reg = )
18763 46CF           8A46         FB            mov	al,-5[bp]
18764 46D2           40                         inc	ax
18765 46D3           8846         FB            mov	-5[bp],al
18766                       000046D6            .B1:
18767                                           ! Debug: lt unsigned char cheight = [S+8+$C] to unsigned char i = [S+8-7] (used reg = )
18768 46D6           8A46         FB            mov	al,-5[bp]
18769 46D9           3A46         0E            cmp	al,$E[bp]
18770 46DC           72           B5            jb 	.B2
18771                       000046DE            .B3:
18772                       000046DE            .AF:
18773                                           ! Debug: list int = const 5 (used reg = )
18774 46DE           B8                   0005  mov	ax,*5
18775 46E1           50                         push	ax
18776                                           ! Debug: list int = const $3CE (used reg = )
18777 46E2           B8                   03CE  mov	ax,#$3CE
18778 46E5           50                         push	ax
18779                                           ! Debug: func () void = outw+0 (used reg = )
18780 46E6           E8         3523            call	_outw
18781 46E9           83C4                   04  add	sp,*4
18782                                           !BCC_EOS
18783                                           ! 2187 }
18784 46EC           89EC                       mov	sp,bp
18785 46EE           5D                         pop	bp
18786 46EF           C3                         ret
18787                                           ! 2188 static void vgamem_fill_pl4(xstart,ystart,cols,nbcols,cheight,attr)
18788                                           ! Register BX used in function vgamem_copy_pl4
18789                                           ! 2189 Bit8u xstart;Bit8u ystart;Bit8u cols;Bit8u nbcols;Bit8u cheight;Bit8u attr;
18790                       000046F0            _vgamem_fill_pl4:
18791                                           !BCC_EOS
18792                                           !BCC_EOS
18793                                           !BCC_EOS
18794                                           !BCC_EOS
18795                                           !BCC_EOS
18796                                           !BCC_EOS
18797                                           ! 2190 {
18798                                           ! 2191  Bit16u dest;
18799                                           !BCC_EOS
18800                                           ! 2192  Bit8u i;
18801                                           !BCC_EOS
18802                                           ! 2193  dest=ystart*cheight*nbcols+xstart;
18803 46F0           55                         push	bp
18804 46F1           89E5                       mov	bp,sp
18805 46F3           83C4                   FC  add	sp,*-4
18806                                           ! Debug: mul unsigned char cheight = [S+6+$A] to unsigned char ystart = [S+6+4] (used reg = )
18807 46F6           8A46         0C            mov	al,$C[bp]
18808 46F9           30E4                       xor	ah,ah
18809 46FB           89C3                       mov	bx,ax
18810 46FD           8A46         06            mov	al,6[bp]
18811 4700           30E4                       xor	ah,ah
18812 4702           89D9                       mov	cx,bx
18813 4704           F7E9                       imul	cx
18814                                           ! Debug: mul unsigned char nbcols = [S+6+8] to unsigned int = ax+0 (used reg = )
18815 4706           89C3                       mov	bx,ax
18816 4708           8A46         0A            mov	al,$A[bp]
18817 470B           30E4                       xor	ah,ah
18818 470D           93                         xchg	ax,bx
18819 470E           89D9                       mov	cx,bx
18820 4710           F7E9                       imul	cx
18821                                           ! Debug: add unsigned char xstart = [S+6+2] to unsigned int = ax+0 (used reg = )
18822 4712           0246         04            add	al,4[bp]
18823 4715           80D4                   00  adc	ah,*0
18824                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+6-4] (used reg = )
18825 4718           8946         FE            mov	-2[bp],ax
18826                                           !BCC_EOS
18827                                           ! 2194  outw(0x3ce, 0x0205);
18828                                           ! Debug: list int = const $205 (used reg = )
18829 471B           B8                   0205  mov	ax,#$205
18830 471E           50                         push	ax
18831                                           ! Debug: list int = const $3CE (used reg = )
18832 471F           B8                   03CE  mov	ax,#$3CE
18833 4722           50                         push	ax
18834                                           ! Debug: func () void = outw+0 (used reg = )
18835 4723           E8         34E6            call	_outw
18836 4726           83C4                   04  add	sp,*4
18837                                           !BCC_EOS
18838                                           ! 2195  for(i=0;i<cheight;i++)
18839                                           ! Debug: eq int = const 0 to unsigned char i = [S+6-5] (used reg = )
18840 4729           30C0                       xor	al,al
18841 472B           8846         FD            mov	-3[bp],al
18842                                           !BCC_EOS
18843                                           !BCC_EOS
18844                                           ! 2196   {
18845 472E           EB           31            jmp .B6
18846                       00004730            .B7:
18847                                           ! 2197    memsetb(0xa000,dest+i*nbcols,attr,cols);
18848                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
18849 4730           8A46         08            mov	al,8[bp]
18850 4733           30E4                       xor	ah,ah
18851 4735           50                         push	ax
18852                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
18853 4736           8A46         0E            mov	al,$E[bp]
18854 4739           30E4                       xor	ah,ah
18855 473B           50                         push	ax
18856                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned char i = [S+$A-5] (used reg = )
18857 473C           8A46         0A            mov	al,$A[bp]
18858 473F           30E4                       xor	ah,ah
18859 4741           89C3                       mov	bx,ax
18860 4743           8A46         FD            mov	al,-3[bp]
18861 4746           30E4                       xor	ah,ah
18862 4748           89D9                       mov	cx,bx
18863 474A           F7E9                       imul	cx
18864                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$A-4] (used reg = )
18865                                           ! Debug: expression subtree swapping
18866 474C           0346         FE            add	ax,-2[bp]
18867                                           ! Debug: list unsigned int = ax+0 (used reg = )
18868 474F           50                         push	ax
18869                                           ! Debug: list unsigned int = const $A000 (used reg = )
18870 4750           B8                   A000  mov	ax,#$A000
18871 4753           50                         push	ax
18872                                           ! Debug: func () void = memsetb+0 (used reg = )
18873 4754           E8         338F            call	_memsetb
18874 4757           83C4                   08  add	sp,*8
18875                                           !BCC_EOS
18876                                           ! 2198   }
18877                                           ! 2199  outw(0x3ce, 0x0005);
18878                       0000475A            .B5:
18879                                           ! Debug: postinc unsigned char i = [S+6-5] (used reg = )
18880 475A           8A46         FD            mov	al,-3[bp]
18881 475D           40                         inc	ax
18882 475E           8846         FD            mov	-3[bp],al
18883                       00004761            .B6:
18884                                           ! Debug: lt unsigned char cheight = [S+6+$A] to unsigned char i = [S+6-5] (used reg = )
18885 4761           8A46         FD            mov	al,-3[bp]
18886 4764           3A46         0C            cmp	al,$C[bp]
18887 4767           72           C7            jb 	.B7
18888                       00004769            .B8:
18889                       00004769            .B4:
18890                                           ! Debug: list int = const 5 (used reg = )
18891 4769           B8                   0005  mov	ax,*5
18892 476C           50                         push	ax
18893                                           ! Debug: list int = const $3CE (used reg = )
18894 476D           B8                   03CE  mov	ax,#$3CE
18895 4770           50                         push	ax
18896                                           ! Debug: func () void = outw+0 (used reg = )
18897 4771           E8         3498            call	_outw
18898 4774           83C4                   04  add	sp,*4
18899                                           !BCC_EOS
18900                                           ! 2200 }
18901 4777           89EC                       mov	sp,bp
18902 4779           5D                         pop	bp
18903 477A           C3                         ret
18904                                           ! 2201 static void 
18905                                           ! Register BX used in function vgamem_fill_pl4
18906                                           ! 2201 vgamem_copy_cga(xstart,ysrc,ydest,cols,nbcols,cheight)
18907                                           ! 2202 Bit8u xstart;Bit8u ysrc;Bit8u ydest;Bit8u cols;Bit8u nbcols;Bit8u cheight;
18908                       0000477B            _vgamem_copy_cga:
18909                                           !BCC_EOS
18910                                           !BCC_EOS
18911                                           !BCC_EOS
18912                                           !BCC_EOS
18913                                           !BCC_EOS
18914                                           !BCC_EOS
18915                                           ! 2203 {
18916                                           ! 2204  Bit16u src,dest;
18917                                           !BCC_EOS
18918                                           ! 2205  Bit8u i;
18919                                           !BCC_EOS
18920                                           ! 2206  src=((ysrc*cheight*nbcols)>>1)+xstart;
18921 477B           55                         push	bp
18922 477C           89E5                       mov	bp,sp
18923 477E           83C4                   FA  add	sp,*-6
18924                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ysrc = [S+8+4] (used reg = )
18925 4781           8A46         0E            mov	al,$E[bp]
18926 4784           30E4                       xor	ah,ah
18927 4786           89C3                       mov	bx,ax
18928 4788           8A46         06            mov	al,6[bp]
18929 478B           30E4                       xor	ah,ah
18930 478D           89D9                       mov	cx,bx
18931 478F           F7E9                       imul	cx
18932                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18933 4791           89C3                       mov	bx,ax
18934 4793           8A46         0C            mov	al,$C[bp]
18935 4796           30E4                       xor	ah,ah
18936 4798           93                         xchg	ax,bx
18937 4799           89D9                       mov	cx,bx
18938 479B           F7E9                       imul	cx
18939                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
18940 479D           D1E8                       shr	ax,*1
18941                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18942 479F           0246         04            add	al,4[bp]
18943 47A2           80D4                   00  adc	ah,*0
18944                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+8-4] (used reg = )
18945 47A5           8946         FE            mov	-2[bp],ax
18946                                           !BCC_EOS
18947                                           ! 2207  dest=((ydest*cheight*nbcols)>>1)+xstart;
18948                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ydest = [S+8+6] (used reg = )
18949 47A8           8A46         0E            mov	al,$E[bp]
18950 47AB           30E4                       xor	ah,ah
18951 47AD           89C3                       mov	bx,ax
18952 47AF           8A46         08            mov	al,8[bp]
18953 47B2           30E4                       xor	ah,ah
18954 47B4           89D9                       mov	cx,bx
18955 47B6           F7E9                       imul	cx
18956                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18957 47B8           89C3                       mov	bx,ax
18958 47BA           8A46         0C            mov	al,$C[bp]
18959 47BD           30E4                       xor	ah,ah
18960 47BF           93                         xchg	ax,bx
18961 47C0           89D9                       mov	cx,bx
18962 47C2           F7E9                       imul	cx
18963                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
18964 47C4           D1E8                       shr	ax,*1
18965                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18966 47C6           0246         04            add	al,4[bp]
18967 47C9           80D4                   00  adc	ah,*0
18968                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+8-6] (used reg = )
18969 47CC           8946         FC            mov	-4[bp],ax
18970                                           !BCC_EOS
18971                                           ! 2208  for(i=0;i<cheight;i++)
18972                                           ! Debug: eq int = const 0 to unsigned char i = [S+8-7] (used reg = )
18973 47CF           30C0                       xor	al,al
18974 47D1           8846         FB            mov	-5[bp],al
18975                                           !BCC_EOS
18976                                           !BCC_EOS
18977                                           ! 2209   {
18978 47D4           E9         00A8            br 	.BB
18979                       000047D7            .BC:
18980                                           ! 2210    if (i & 1)
18981                                           ! Debug: and int = const 1 to unsigned char i = [S+8-7] (used reg = )
18982 47D7           8A46         FB            mov	al,-5[bp]
18983 47DA           24                     01  and	al,*1
18984 47DC           84C0                       test	al,al
18985 47DE           74           56            je  	.BD
18986                       000047E0            .BE:
18987                                           ! 2211      memcpyb(0xb800,0x2000+dest+(i>>1)*nbcols,0xb800,0x2000+src+(i>>1)*nbcols,cols);
18988                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
18989 47E0           8A46         0A            mov	al,$A[bp]
18990 47E3           30E4                       xor	ah,ah
18991 47E5           50                         push	ax
18992                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-7] (used reg = )
18993 47E6           8A46         FB            mov	al,-5[bp]
18994 47E9           30E4                       xor	ah,ah
18995 47EB           D1E8                       shr	ax,*1
18996                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned int = ax+0 (used reg = )
18997 47ED           89C3                       mov	bx,ax
18998 47EF           8A46         0C            mov	al,$C[bp]
18999 47F2           30E4                       xor	ah,ah
19000 47F4           93                         xchg	ax,bx
19001 47F5           89D9                       mov	cx,bx
19002 47F7           F7E9                       imul	cx
19003 47F9           50                         push	ax
19004                                           ! Debug: add unsigned short src = [S+$C-4] to int = const $2000 (used reg = )
19005                                           ! Debug: expression subtree swapping
19006 47FA           8B46         FE            mov	ax,-2[bp]
19007                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+$2000 (used reg = )
19008 47FD           05                   2000  add	ax,#$2000
19009 4800           0346         F6            add	ax,-$A[bp]
19010 4803           44                         inc	sp
19011 4804           44                         inc	sp
19012                                           ! Debug: list unsigned int = ax+0 (used reg = )
19013 4805           50                         push	ax
19014                                           ! Debug: list unsigned int = const $B800 (used reg = )
19015 4806           B8                   B800  mov	ax,#$B800
19016 4809           50                         push	ax
19017                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-7] (used reg = )
19018 480A           8A46         FB            mov	al,-5[bp]
19019 480D           30E4                       xor	ah,ah
19020 480F           D1E8                       shr	ax,*1
19021                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
19022 4811           89C3                       mov	bx,ax
19023 4813           8A46         0C            mov	al,$C[bp]
19024 4816           30E4                       xor	ah,ah
19025 4818           93                         xchg	ax,bx
19026 4819           89D9                       mov	cx,bx
19027 481B           F7E9                       imul	cx
19028 481D           50                         push	ax
19029                                           ! Debug: add unsigned short dest = [S+$10-6] to int = const $2000 (used reg = )
19030                                           ! Debug: expression subtree swapping
19031 481E           8B46         FC            mov	ax,-4[bp]
19032                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+$2000 (used reg = )
19033 4821           05                   2000  add	ax,#$2000
19034 4824           0346         F2            add	ax,-$E[bp]
19035 4827           44                         inc	sp
19036 4828           44                         inc	sp
19037                                           ! Debug: list unsigned int = ax+0 (used reg = )
19038 4829           50                         push	ax
19039                                           ! Debug: list unsigned int = const $B800 (used reg = )
19040 482A           B8                   B800  mov	ax,#$B800
19041 482D           50                         push	ax
19042                                           ! Debug: func () void = memcpyb+0 (used reg = )
19043 482E           E8         32FF            call	_memcpyb
19044 4831           83C4                   0A  add	sp,*$A
19045                                           !BCC_EOS
19046                                           ! 2212    else
19047                                           ! 2213      memcpyb(0xb800,dest+(i>>1)*nbcols,0xb800,src+(i>>1)*nbcols,cols);
19048 4834           EB           42            jmp .BF
19049                       00004836            .BD:
19050                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
19051 4836           8A46         0A            mov	al,$A[bp]
19052 4839           30E4                       xor	ah,ah
19053 483B           50                         push	ax
19054                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-7] (used reg = )
19055 483C           8A46         FB            mov	al,-5[bp]
19056 483F           30E4                       xor	ah,ah
19057 4841           D1E8                       shr	ax,*1
19058                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned int = ax+0 (used reg = )
19059 4843           89C3                       mov	bx,ax
19060 4845           8A46         0C            mov	al,$C[bp]
19061 4848           30E4                       xor	ah,ah
19062 484A           93                         xchg	ax,bx
19063 484B           89D9                       mov	cx,bx
19064 484D           F7E9                       imul	cx
19065                                           ! Debug: add unsigned int = ax+0 to unsigned short src = [S+$A-4] (used reg = )
19066                                           ! Debug: expression subtree swapping
19067 484F           0346         FE            add	ax,-2[bp]
19068                                           ! Debug: list unsigned int = ax+0 (used reg = )
19069 4852           50                         push	ax
19070                                           ! Debug: list unsigned int = const $B800 (used reg = )
19071 4853           B8                   B800  mov	ax,#$B800
19072 4856           50                         push	ax
19073                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-7] (used reg = )
19074 4857           8A46         FB            mov	al,-5[bp]
19075 485A           30E4                       xor	ah,ah
19076 485C           D1E8                       shr	ax,*1
19077                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
19078 485E           89C3                       mov	bx,ax
19079 4860           8A46         0C            mov	al,$C[bp]
19080 4863           30E4                       xor	ah,ah
19081 4865           93                         xchg	ax,bx
19082 4866           89D9                       mov	cx,bx
19083 4868           F7E9                       imul	cx
19084                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$E-6] (used reg = )
19085                                           ! Debug: expression subtree swapping
19086 486A           0346         FC            add	ax,-4[bp]
19087                                           ! Debug: list unsigned int = ax+0 (used reg = )
19088 486D           50                         push	ax
19089                                           ! Debug: list unsigned int = const $B800 (used reg = )
19090 486E           B8                   B800  mov	ax,#$B800
19091 4871           50                         push	ax
19092                                           ! Debug: func () void = memcpyb+0 (used reg = )
19093 4872           E8         32BB            call	_memcpyb
19094 4875           83C4                   0A  add	sp,*$A
19095                                           !BCC_EOS
19096                                           ! 2214   }
19097                       00004878            .BF:
19098                                           ! 2215 }
19099                       00004878            .BA:
19100                                           ! Debug: postinc unsigned char i = [S+8-7] (used reg = )
19101 4878           8A46         FB            mov	al,-5[bp]
19102 487B           40                         inc	ax
19103 487C           8846         FB            mov	-5[bp],al
19104                       0000487F            .BB:
19105                                           ! Debug: lt unsigned char cheight = [S+8+$C] to unsigned char i = [S+8-7] (used reg = )
19106 487F           8A46         FB            mov	al,-5[bp]
19107 4882           3A46         0E            cmp	al,$E[bp]
19108 4885         0F82         FF4E            blo 	.BC
19109                       00004889            .C0:
19110                       00004889            .B9:
19111 4889           89EC                       mov	sp,bp
19112 488B           5D                         pop	bp
19113 488C           C3                         ret
19114                                           ! 2216 static void vgamem_fill_cga(xstart,ystart,cols,nbcols,cheight,attr)
19115                                           ! Register BX used in function vgamem_copy_cga
19116                                           ! 2217 Bit8u xstart;Bit8u ystart;Bit8u cols;Bit8u nbcols;Bit8u cheight;Bit8u attr;
19117                       0000488D            _vgamem_fill_cga:
19118                                           !BCC_EOS
19119                                           !BCC_EOS
19120                                           !BCC_EOS
19121                                           !BCC_EOS
19122                                           !BCC_EOS
19123                                           !BCC_EOS
19124                                           ! 2218 {
19125                                           ! 2219  Bit16u dest;
19126                                           !BCC_EOS
19127                                           ! 2220  Bit8u i;
19128                                           !BCC_EOS
19129                                           ! 2221  dest=((ystart*cheight*nbcols)>>1)+xstart;
19130 488D           55                         push	bp
19131 488E           89E5                       mov	bp,sp
19132 4890           83C4                   FC  add	sp,*-4
19133                                           ! Debug: mul unsigned char cheight = [S+6+$A] to unsigned char ystart = [S+6+4] (used reg = )
19134 4893           8A46         0C            mov	al,$C[bp]
19135 4896           30E4                       xor	ah,ah
19136 4898           89C3                       mov	bx,ax
19137 489A           8A46         06            mov	al,6[bp]
19138 489D           30E4                       xor	ah,ah
19139 489F           89D9                       mov	cx,bx
19140 48A1           F7E9                       imul	cx
19141                                           ! Debug: mul unsigned char nbcols = [S+6+8] to unsigned int = ax+0 (used reg = )
19142 48A3           89C3                       mov	bx,ax
19143 48A5           8A46         0A            mov	al,$A[bp]
19144 48A8           30E4                       xor	ah,ah
19145 48AA           93                         xchg	ax,bx
19146 48AB           89D9                       mov	cx,bx
19147 48AD           F7E9                       imul	cx
19148                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
19149 48AF           D1E8                       shr	ax,*1
19150                                           ! Debug: add unsigned char xstart = [S+6+2] to unsigned int = ax+0 (used reg = )
19151 48B1           0246         04            add	al,4[bp]
19152 48B4           80D4                   00  adc	ah,*0
19153                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+6-4] (used reg = )
19154 48B7           8946         FE            mov	-2[bp],ax
19155                                           !BCC_EOS
19156                                           ! 2222  for(i=0;i<cheight;i++)
19157                                           ! Debug: eq int = const 0 to unsigned char i = [S+6-5] (used reg = )
19158 48BA           30C0                       xor	al,al
19159 48BC           8846         FD            mov	-3[bp],al
19160                                           !BCC_EOS
19161                                           !BCC_EOS
19162                                           ! 2223   {
19163 48BF           EB           75            jmp .C3
19164                       000048C1            .C4:
19165                                           ! 2224    if (i & 1)
19166                                           ! Debug: and int = const 1 to unsigned char i = [S+6-5] (used reg = )
19167 48C1           8A46         FD            mov	al,-3[bp]
19168 48C4           24                     01  and	al,*1
19169 48C6           84C0                       test	al,al
19170 48C8           74           38            je  	.C5
19171                       000048CA            .C6:
19172                                           ! 2225      memsetb(0xb800,0x2000+dest+(i>>1)*nbcols,attr,cols);
19173                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
19174 48CA           8A46         08            mov	al,8[bp]
19175 48CD           30E4                       xor	ah,ah
19176 48CF           50                         push	ax
19177                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
19178 48D0           8A46         0E            mov	al,$E[bp]
19179 48D3           30E4                       xor	ah,ah
19180 48D5           50                         push	ax
19181                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-5] (used reg = )
19182 48D6           8A46         FD            mov	al,-3[bp]
19183 48D9           30E4                       xor	ah,ah
19184 48DB           D1E8                       shr	ax,*1
19185                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned int = ax+0 (used reg = )
19186 48DD           89C3                       mov	bx,ax
19187 48DF           8A46         0A            mov	al,$A[bp]
19188 48E2           30E4                       xor	ah,ah
19189 48E4           93                         xchg	ax,bx
19190 48E5           89D9                       mov	cx,bx
19191 48E7           F7E9                       imul	cx
19192 48E9           50                         push	ax
19193                                           ! Debug: add unsigned short dest = [S+$C-4] to int = const $2000 (used reg = )
19194                                           ! Debug: expression subtree swapping
19195 48EA           8B46         FE            mov	ax,-2[bp]
19196                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+$2000 (used reg = )
19197 48ED           05                   2000  add	ax,#$2000
19198 48F0           0346         F6            add	ax,-$A[bp]
19199 48F3           44                         inc	sp
19200 48F4           44                         inc	sp
19201                                           ! Debug: list unsigned int = ax+0 (used reg = )
19202 48F5           50                         push	ax
19203                                           ! Debug: list unsigned int = const $B800 (used reg = )
19204 48F6           B8                   B800  mov	ax,#$B800
19205 48F9           50                         push	ax
19206                                           ! Debug: func () void = memsetb+0 (used reg = )
19207 48FA           E8         31E9            call	_memsetb
19208 48FD           83C4                   08  add	sp,*8
19209                                           !BCC_EOS
19210                                           ! 2226    else
19211                                           ! 2227      memsetb(0xb800,dest+(i>>1)*nbcols,attr,cols);
19212 4900           EB           2D            jmp .C7
19213                       00004902            .C5:
19214                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
19215 4902           8A46         08            mov	al,8[bp]
19216 4905           30E4                       xor	ah,ah
19217 4907           50                         push	ax
19218                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
19219 4908           8A46         0E            mov	al,$E[bp]
19220 490B           30E4                       xor	ah,ah
19221 490D           50                         push	ax
19222                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-5] (used reg = )
19223 490E           8A46         FD            mov	al,-3[bp]
19224 4911           30E4                       xor	ah,ah
19225 4913           D1E8                       shr	ax,*1
19226                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned int = ax+0 (used reg = )
19227 4915           89C3                       mov	bx,ax
19228 4917           8A46         0A            mov	al,$A[bp]
19229 491A           30E4                       xor	ah,ah
19230 491C           93                         xchg	ax,bx
19231 491D           89D9                       mov	cx,bx
19232 491F           F7E9                       imul	cx
19233                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$A-4] (used reg = )
19234                                           ! Debug: expression subtree swapping
19235 4921           0346         FE            add	ax,-2[bp]
19236                                           ! Debug: list unsigned int = ax+0 (used reg = )
19237 4924           50                         push	ax
19238                                           ! Debug: list unsigned int = const $B800 (used reg = )
19239 4925           B8                   B800  mov	ax,#$B800
19240 4928           50                         push	ax
19241                                           ! Debug: func () void = memsetb+0 (used reg = )
19242 4929           E8         31BA            call	_memsetb
19243 492C           83C4                   08  add	sp,*8
19244                                           !BCC_EOS
19245                                           ! 2228   }
19246                       0000492F            .C7:
19247                                           ! 2229 }
19248                       0000492F            .C2:
19249                                           ! Debug: postinc unsigned char i = [S+6-5] (used reg = )
19250 492F           8A46         FD            mov	al,-3[bp]
19251 4932           40                         inc	ax
19252 4933           8846         FD            mov	-3[bp],al
19253                       00004936            .C3:
19254                                           ! Debug: lt unsigned char cheight = [S+6+$A] to unsigned char i = [S+6-5] (used reg = )
19255 4936           8A46         FD            mov	al,-3[bp]
19256 4939           3A46         0C            cmp	al,$C[bp]
19257 493C           72           83            jb 	.C4
19258                       0000493E            .C8:
19259                       0000493E            .C1:
19260 493E           89EC                       mov	sp,bp
19261 4940           5D                         pop	bp
19262 4941           C3                         ret
19263                                           ! 2230 static void biosfn_scroll (nblines,attr,rul,cul,rlr,clr,page,dir)
19264                                           ! Register BX used in function vgamem_fill_cga
19265                                           ! 2231 Bit8u nblines;Bit8u attr;Bit8u rul;Bit8u cul;Bit8u rlr;Bit8u clr;Bit8u page;Bit8u dir;
19266                       00004942            _biosfn_scroll:
19267                                           !BCC_EOS
19268                                           !BCC_EOS
19269                                           !BCC_EOS
19270                                           !BCC_EOS
19271                                           !BCC_EOS
19272                                           !BCC_EOS
19273                                           !BCC_EOS
19274                                           !BCC_EOS
19275                                           ! 2232 {
19276                                           ! 2233  Bit8u mode,line,cheight,bpp,cols;
19277                                           !BCC_EOS
19278                                           ! 2234  Bit16u nbcols,nbrows,i;
19279                                           !BCC_EOS
19280                                           ! 2235  Bit16u address;
19281                                           !BCC_EOS
19282                                           ! 2236  if(rul>rlr)return;
19283 4942           55                         push	bp
19284 4943           89E5                       mov	bp,sp
19285 4945           83C4                   F2  add	sp,*-$E
19286                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned char rul = [S+$10+6] (used reg = )
19287 4948           8A46         08            mov	al,8[bp]
19288 494B           3A46         0C            cmp	al,$C[bp]
19289 494E           76           04            jbe 	.C9
19290                       00004950            .CA:
19291 4950           89EC                       mov	sp,bp
19292 4952           5D                         pop	bp
19293 4953           C3                         ret
19294                                           !BCC_EOS
19295                                           ! 2237  if(cul>clr)return;
19296                       00004954            .C9:
19297                                           ! Debug: gt unsigned char clr = [S+$10+$C] to unsigned char cul = [S+$10+8] (used reg = )
19298 4954           8A46         0A            mov	al,$A[bp]
19299 4957           3A46         0E            cmp	al,$E[bp]
19300 495A           76           04            jbe 	.CB
19301                       0000495C            .CC:
19302 495C           89EC                       mov	sp,bp
19303 495E           5D                         pop	bp
19304 495F           C3                         ret
19305                                           !BCC_EOS
19306                                           ! 2238  mode=read_byte(0x40,0x49);
19307                       00004960            .CB:
19308                                           ! Debug: list int = const $49 (used reg = )
19309 4960           B8                   0049  mov	ax,*$49
19310 4963           50                         push	ax
19311                                           ! Debug: list int = const $40 (used reg = )
19312 4964           B8                   0040  mov	ax,*$40
19313 4967           50                         push	ax
19314                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
19315 4968           E8         3225            call	_read_byte
19316 496B           83C4                   04  add	sp,*4
19317                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$10-3] (used reg = )
19318 496E           8846         FF            mov	-1[bp],al
19319                                           !BCC_EOS
19320                                           ! 2239  line=find_vga_entry(mode);
19321                                           ! Debug: list unsigned char mode = [S+$10-3] (used reg = )
19322 4971           8A46         FF            mov	al,-1[bp]
19323 4974           30E4                       xor	ah,ah
19324 4976           50                         push	ax
19325                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
19326 4977           E8         312A            call	_find_vga_entry
19327 497A           44                         inc	sp
19328 497B           44                         inc	sp
19329                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$10-4] (used reg = )
19330 497C           8846         FE            mov	-2[bp],al
19331                                           !BCC_EOS
19332                                           ! 2240  if(line==0xFF)return;
19333                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$10-4] (used reg = )
19334 497F           8A46         FE            mov	al,-2[bp]
19335 4982           3C                     FF  cmp	al,#$FF
19336 4984           75           04            jne 	.CD
19337                       00004986            .CE:
19338 4986           89EC                       mov	sp,bp
19339 4988           5D                         pop	bp
19340 4989           C3                         ret
19341                                           !BCC_EOS
19342                                           ! 2241  nbrows=read_byte(0x40,0x84)+1;
19343                       0000498A            .CD:
19344                                           ! Debug: list int = const $84 (used reg = )
19345 498A           B8                   0084  mov	ax,#$84
19346 498D           50                         push	ax
19347                                           ! Debug: list int = const $40 (used reg = )
19348 498E           B8                   0040  mov	ax,*$40
19349 4991           50                         push	ax
19350                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
19351 4992           E8         31FB            call	_read_byte
19352 4995           83C4                   04  add	sp,*4
19353                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
19354 4998           30E4                       xor	ah,ah
19355                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19356 499A           40                         inc	ax
19357 499B           8946         F6            mov	-$A[bp],ax
19358                                           !BCC_EOS
19359                                           ! 2242  nbcols=read_word(0x40,0x4A);
19360                                           ! Debug: list int = const $4A (used reg = )
19361 499E           B8                   004A  mov	ax,*$4A
19362 49A1           50                         push	ax
19363                                           ! Debug: list int = const $40 (used reg = )
19364 49A2           B8                   0040  mov	ax,*$40
19365 49A5           50                         push	ax
19366                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
19367 49A6           E8         31FA            call	_read_word
19368 49A9           83C4                   04  add	sp,*4
19369                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$10-$A] (used reg = )
19370 49AC           8946         F8            mov	-8[bp],ax
19371                                           !BCC_EOS
19372                                           ! 2243  if(page==0xFF)
19373                                           ! Debug: logeq int = const $FF to unsigned char page = [S+$10+$E] (used reg = )
19374 49AF           8A46         10            mov	al,$10[bp]
19375 49B2           3C                     FF  cmp	al,#$FF
19376 49B4           75           11            jne 	.CF
19377                       000049B6            .D0:
19378                                           ! 2244   page=read_byte(0x40,0x62);
19379                                           ! Debug: list int = const $62 (used reg = )
19380 49B6           B8                   0062  mov	ax,*$62
19381 49B9           50                         push	ax
19382                                           ! Debug: list int = const $40 (used reg = )
19383 49BA           B8                   0040  mov	ax,*$40
19384 49BD           50                         push	ax
19385                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
19386 49BE           E8         31CF            call	_read_byte
19387 49C1           83C4                   04  add	sp,*4
19388                                           ! Debug: eq unsigned char = al+0 to unsigned char page = [S+$10+$E] (used reg = )
19389 49C4           8846         10            mov	$10[bp],al
19390                                           !BCC_EOS
19391                                           ! 2245  if(rlr>=nbrows)rlr=nbrows-1;
19392                       000049C7            .CF:
19393                                           ! Debug: ge unsigned short nbrows = [S+$10-$C] to unsigned char rlr = [S+$10+$A] (used reg = )
19394 49C7           8A46         0C            mov	al,$C[bp]
19395 49CA           30E4                       xor	ah,ah
19396 49CC           3B46         F6            cmp	ax,-$A[bp]
19397 49CF           72           07            jb  	.D1
19398                       000049D1            .D2:
19399                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19400 49D1           8B46         F6            mov	ax,-$A[bp]
19401                                           ! Debug: eq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
19402 49D4           48                         dec	ax
19403 49D5           8846         0C            mov	$C[bp],al
19404                                           !BCC_EOS
19405                                           ! 2246  if(clr>=nbcols)clr=nbcols-1;
19406                       000049D8            .D1:
19407                                           ! Debug: ge unsigned short nbcols = [S+$10-$A] to unsigned char clr = [S+$10+$C] (used reg = )
19408 49D8           8A46         0E            mov	al,$E[bp]
19409 49DB           30E4                       xor	ah,ah
19410 49DD           3B46         F8            cmp	ax,-8[bp]
19411 49E0           72           07            jb  	.D3
19412                       000049E2            .D4:
19413                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19414 49E2           8B46         F8            mov	ax,-8[bp]
19415                                           ! Debug: eq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
19416 49E5           48                         dec	ax
19417 49E6           8846         0E            mov	$E[bp],al
19418                                           !BCC_EOS
19419                                           ! 2247  if(nblines>nbrows)nblines=0;
19420                       000049E9            .D3:
19421                                           ! Debug: gt unsigned short nbrows = [S+$10-$C] to unsigned char nblines = [S+$10+2] (used reg = )
19422 49E9           8A46         04            mov	al,4[bp]
19423 49EC           30E4                       xor	ah,ah
19424 49EE           3B46         F6            cmp	ax,-$A[bp]
19425 49F1           76           05            jbe 	.D5
19426                       000049F3            .D6:
19427                                           ! Debug: eq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19428 49F3           30C0                       xor	al,al
19429 49F5           8846         04            mov	4[bp],al
19430                                           !BCC_EOS
19431                                           ! 2248  cols=clr-cul+1;
19432                       000049F8            .D5:
19433                                           ! Debug: sub unsigned char cul = [S+$10+8] to unsigned char clr = [S+$10+$C] (used reg = )
19434 49F8           8A46         0E            mov	al,$E[bp]
19435 49FB           30E4                       xor	ah,ah
19436 49FD           2A46         0A            sub	al,$A[bp]
19437 4A00           80DC                   00  sbb	ah,*0
19438                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
19439                                           ! Debug: eq unsigned int = ax+1 to unsigned char cols = [S+$10-7] (used reg = )
19440 4A03           40                         inc	ax
19441 4A04           8846         FB            mov	-5[bp],al
19442                                           !BCC_EOS
19443                                           ! 2249  if(vga_modes[line].class==0x00)
19444                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] struct  = vga_modes+0 (used reg = )
19445 4A07           8A46         FE            mov	al,-2[bp]
19446 4A0A           30E4                       xor	ah,ah
19447 4A0C           B1                     03  mov	cl,*3
19448 4A0E           D3E0                       shl	ax,cl
19449 4A10           89C3                       mov	bx,ax
19450 4A12           81C3                 01FD  add	bx,#_vga_modes
19451                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
19452 4A16           8A47         01            mov	al,1[bx]
19453 4A19           84C0                       test	al,al
19454 4A1B         0F85         0250            bne 	.D7
19455                       00004A1F            .D8:
19456                                           ! 2250   {
19457                                           ! 2251    address=((((nbcols*nbrows*2)|0x00ff)+1)*page);
19458                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
19459 4A1F           8B46         F8            mov	ax,-8[bp]
19460 4A22           8B4E         F6            mov	cx,-$A[bp]
19461 4A25           F7E9                       imul	cx
19462                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19463 4A27           D1E0                       shl	ax,*1
19464                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
19465 4A29           0C                     FF  or	al,#$FF
19466                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
19467                                           ! Debug: mul unsigned char page = [S+$10+$E] to unsigned int = ax+1 (used reg = )
19468 4A2B           89C3                       mov	bx,ax
19469 4A2D           8A46         10            mov	al,$10[bp]
19470 4A30           30E4                       xor	ah,ah
19471 4A32           93                         xchg	ax,bx
19472 4A33           40                         inc	ax
19473 4A34           89D9                       mov	cx,bx
19474 4A36           F7E9                       imul	cx
19475                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$10] (used reg = )
19476 4A38           8946         F2            mov	-$E[bp],ax
19477                                           !BCC_EOS
19478                                           ! 2252    if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
19479                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19480 4A3B           8A46         04            mov	al,4[bp]
19481 4A3E           84C0                       test	al,al
19482 4A40           75           67            jne 	.D9
19483                       00004A42            .DE:
19484                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
19485 4A42           8A46         08            mov	al,8[bp]
19486 4A45           84C0                       test	al,al
19487 4A47           75           60            jne 	.D9
19488                       00004A49            .DD:
19489                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
19490 4A49           8A46         0A            mov	al,$A[bp]
19491 4A4C           84C0                       test	al,al
19492 4A4E           75           59            jne 	.D9
19493                       00004A50            .DC:
19494                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19495 4A50           8B46         F6            mov	ax,-$A[bp]
19496                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
19497                                           ! Debug: expression subtree swapping
19498 4A53           48                         dec	ax
19499 4A54           50                         push	ax
19500 4A55           8A46         0C            mov	al,$C[bp]
19501 4A58           30E4                       xor	ah,ah
19502 4A5A           3B46         F0            cmp	ax,-$10[bp]
19503 4A5D           8D66         F2            lea	sp,-$E[bp]
19504 4A60           75           47            jne 	.D9
19505                       00004A62            .DB:
19506                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19507 4A62           8B46         F8            mov	ax,-8[bp]
19508                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
19509                                           ! Debug: expression subtree swapping
19510 4A65           48                         dec	ax
19511 4A66           50                         push	ax
19512 4A67           8A46         0E            mov	al,$E[bp]
19513 4A6A           30E4                       xor	ah,ah
19514 4A6C           3B46         F0            cmp	ax,-$10[bp]
19515 4A6F           8D66         F2            lea	sp,-$E[bp]
19516 4A72           75           35            jne 	.D9
19517                       00004A74            .DA:
19518                                           ! 2253     {
19519                                           ! 2254      memsetw(vga_modes[line].sstart,address,(Bit16u)attr*0x100+' ',nbrows*nbcols);
19520                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
19521 4A74           8B46         F6            mov	ax,-$A[bp]
19522 4A77           8B4E         F8            mov	cx,-8[bp]
19523 4A7A           F7E9                       imul	cx
19524                                           ! Debug: list unsigned int = ax+0 (used reg = )
19525 4A7C           50                         push	ax
19526                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19527 4A7D           8A46         06            mov	al,6[bp]
19528 4A80           30E4                       xor	ah,ah
19529                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19530 4A82           B9                   0100  mov	cx,#$100
19531 4A85           F7E9                       imul	cx
19532                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19533                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19534 4A87           05                   0020  add	ax,*$20
19535 4A8A           50                         push	ax
19536                                           ! Debug: list unsigned short address = [S+$14-$10] (used reg = )
19537 4A8B           FF76         F2            push	-$E[bp]
19538                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19539 4A8E           8A46         FE            mov	al,-2[bp]
19540 4A91           30E4                       xor	ah,ah
19541 4A93           B1                     03  mov	cl,*3
19542 4A95           D3E0                       shl	ax,cl
19543 4A97           89C3                       mov	bx,ax
19544 4A99           81C3                 01FD  add	bx,#_vga_modes
19545                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19546 4A9D           FF77         04            push	4[bx]
19547                                           ! Debug: func () void = memsetw+0 (used reg = )
19548 4AA0           E8         3068            call	_memsetw
19549 4AA3           83C4                   08  add	sp,*8
19550                                           !BCC_EOS
19551                                           ! 2255     }
19552                                           ! 2256    else
19553                                           ! 2257     {
19554 4AA6           E9         01C3            br 	.DF
19555                       00004AA9            .D9:
19556                                           ! 2258      if(dir==1)
19557                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
19558 4AA9           8A46         12            mov	al,$12[bp]
19559 4AAC           3C                     01  cmp	al,*1
19560 4AAE         0F85         00DC            bne 	.E0
19561                       00004AB2            .E1:
19562                                           ! 2259       {for(i=rul;i<=rlr;i++)
19563                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
19564 4AB2           8A46         08            mov	al,8[bp]
19565 4AB5           30E4                       xor	ah,ah
19566 4AB7           8946         F4            mov	-$C[bp],ax
19567                                           !BCC_EOS
19568                                           !BCC_EOS
19569                                           ! 2260         {
19570 4ABA           E9         00C2            br 	.E4
19571                       00004ABD            .E5:
19572                                           ! 2261          if((i+nblines>rlr)||(nblines==0))
19573                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
19574 4ABD           8B46         F4            mov	ax,-$C[bp]
19575 4AC0           0246         04            add	al,4[bp]
19576 4AC3           80D4                   00  adc	ah,*0
19577                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
19578 4AC6           50                         push	ax
19579 4AC7           8A46         0C            mov	al,$C[bp]
19580 4ACA           30E4                       xor	ah,ah
19581 4ACC           3B46         F0            cmp	ax,-$10[bp]
19582 4ACF           8D66         F2            lea	sp,-$E[bp]
19583 4AD2           72           07            jb  	.E7
19584                       00004AD4            .E8:
19585                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19586 4AD4           8A46         04            mov	al,4[bp]
19587 4AD7           84C0                       test	al,al
19588 4AD9           75           42            jne 	.E6
19589                       00004ADB            .E7:
19590                                           ! 2262           memsetw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,(Bit16u)attr*0x100+' ',cols);
19591                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19592 4ADB           8A46         FB            mov	al,-5[bp]
19593 4ADE           30E4                       xor	ah,ah
19594 4AE0           50                         push	ax
19595                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19596 4AE1           8A46         06            mov	al,6[bp]
19597 4AE4           30E4                       xor	ah,ah
19598                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19599 4AE6           B9                   0100  mov	cx,#$100
19600 4AE9           F7E9                       imul	cx
19601                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19602                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19603 4AEB           05                   0020  add	ax,*$20
19604 4AEE           50                         push	ax
19605                                           ! Debug: mul unsigned short nbcols = [S+$14-$A] to unsigned short i = [S+$14-$E] (used reg = )
19606 4AEF           8B46         F4            mov	ax,-$C[bp]
19607 4AF2           8B4E         F8            mov	cx,-8[bp]
19608 4AF5           F7E9                       imul	cx
19609                                           ! Debug: add unsigned char cul = [S+$14+8] to unsigned int = ax+0 (used reg = )
19610 4AF7           0246         0A            add	al,$A[bp]
19611 4AFA           80D4                   00  adc	ah,*0
19612                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19613 4AFD           D1E0                       shl	ax,*1
19614                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$14-$10] (used reg = )
19615                                           ! Debug: expression subtree swapping
19616 4AFF           0346         F2            add	ax,-$E[bp]
19617                                           ! Debug: list unsigned int = ax+0 (used reg = )
19618 4B02           50                         push	ax
19619                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19620 4B03           8A46         FE            mov	al,-2[bp]
19621 4B06           30E4                       xor	ah,ah
19622 4B08           B1                     03  mov	cl,*3
19623 4B0A           D3E0                       shl	ax,cl
19624 4B0C           89C3                       mov	bx,ax
19625 4B0E           81C3                 01FD  add	bx,#_vga_modes
19626                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19627 4B12           FF77         04            push	4[bx]
19628                                           ! Debug: func () void = memsetw+0 (used reg = )
19629 4B15           E8         2FF3            call	_memsetw
19630 4B18           83C4                   08  add	sp,*8
19631                                           !BCC_EOS
19632                                           ! 2263          else
19633                                           ! 2264           memcpyw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,vga_modes[line].sstart,((i+nblines)*nbcols+cul)*2,cols);
19634 4B1B           EB           5B            jmp .E9
19635                       00004B1D            .E6:
19636                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19637 4B1D           8A46         FB            mov	al,-5[bp]
19638 4B20           30E4                       xor	ah,ah
19639 4B22           50                         push	ax
19640                                           ! Debug: add unsigned char nblines = [S+$12+2] to unsigned short i = [S+$12-$E] (used reg = )
19641 4B23           8B46         F4            mov	ax,-$C[bp]
19642 4B26           0246         04            add	al,4[bp]
19643 4B29           80D4                   00  adc	ah,*0
19644                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned int = ax+0 (used reg = )
19645 4B2C           8B4E         F8            mov	cx,-8[bp]
19646 4B2F           F7E9                       imul	cx
19647                                           ! Debug: add unsigned char cul = [S+$12+8] to unsigned int = ax+0 (used reg = )
19648 4B31           0246         0A            add	al,$A[bp]
19649 4B34           80D4                   00  adc	ah,*0
19650                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19651 4B37           D1E0                       shl	ax,*1
19652                                           ! Debug: list unsigned int = ax+0 (used reg = )
19653 4B39           50                         push	ax
19654                                           ! Debug: ptradd unsigned char line = [S+$14-4] to [$10] struct  = vga_modes+0 (used reg = )
19655 4B3A           8A46         FE            mov	al,-2[bp]
19656 4B3D           30E4                       xor	ah,ah
19657 4B3F           B1                     03  mov	cl,*3
19658 4B41           D3E0                       shl	ax,cl
19659 4B43           89C3                       mov	bx,ax
19660 4B45           81C3                 01FD  add	bx,#_vga_modes
19661                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19662 4B49           FF77         04            push	4[bx]
19663                                           ! Debug: mul unsigned short nbcols = [S+$16-$A] to unsigned short i = [S+$16-$E] (used reg = )
19664 4B4C           8B46         F4            mov	ax,-$C[bp]
19665 4B4F           8B4E         F8            mov	cx,-8[bp]
19666 4B52           F7E9                       imul	cx
19667                                           ! Debug: add unsigned char cul = [S+$16+8] to unsigned int = ax+0 (used reg = )
19668 4B54           0246         0A            add	al,$A[bp]
19669 4B57           80D4                   00  adc	ah,*0
19670                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19671 4B5A           D1E0                       shl	ax,*1
19672                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$16-$10] (used reg = )
19673                                           ! Debug: expression subtree swapping
19674 4B5C           0346         F2            add	ax,-$E[bp]
19675                                           ! Debug: list unsigned int = ax+0 (used reg = )
19676 4B5F           50                         push	ax
19677                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
19678 4B60           8A46         FE            mov	al,-2[bp]
19679 4B63           30E4                       xor	ah,ah
19680 4B65           B1                     03  mov	cl,*3
19681 4B67           D3E0                       shl	ax,cl
19682 4B69           89C3                       mov	bx,ax
19683 4B6B           81C3                 01FD  add	bx,#_vga_modes
19684                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19685 4B6F           FF77         04            push	4[bx]
19686                                           ! Debug: func () void = memcpyw+0 (used reg = )
19687 4B72           E8         2FEB            call	_memcpyw
19688 4B75           83C4                   0A  add	sp,*$A
19689                                           !BCC_EOS
19690                                           ! 2265         }
19691                       00004B78            .E9:
19692                                           ! 2266       }
19693                       00004B78            .E3:
19694                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
19695 4B78           8B46         F4            mov	ax,-$C[bp]
19696 4B7B           40                         inc	ax
19697 4B7C           8946         F4            mov	-$C[bp],ax
19698                       00004B7F            .E4:
19699                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19700 4B7F           8A46         0C            mov	al,$C[bp]
19701 4B82           30E4                       xor	ah,ah
19702 4B84           3B46         F4            cmp	ax,-$C[bp]
19703 4B87         0F83         FF32            bhis	.E5
19704                       00004B8B            .EA:
19705                       00004B8B            .E2:
19706                                           ! 2267      else
19707                                           ! 2268       {for(i=rlr;i>=rul;i--)
19708 4B8B           E9         00DE            br 	.EB
19709                       00004B8E            .E0:
19710                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19711 4B8E           8A46         0C            mov	al,$C[bp]
19712 4B91           30E4                       xor	ah,ah
19713 4B93           8946         F4            mov	-$C[bp],ax
19714                                           !BCC_EOS
19715                                           !BCC_EOS
19716                                           ! 2269    
19717                                           ! 2269      {
19718 4B96           E9         00C7            br 	.EE
19719                       00004B99            .EF:
19720                                           ! 2270          if((i<rul+nblines)||(nblines==0))
19721                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
19722 4B99           8A46         08            mov	al,8[bp]
19723 4B9C           30E4                       xor	ah,ah
19724 4B9E           0246         04            add	al,4[bp]
19725 4BA1           80D4                   00  adc	ah,*0
19726                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
19727 4BA4           3B46         F4            cmp	ax,-$C[bp]
19728 4BA7           77           07            ja  	.F1
19729                       00004BA9            .F2:
19730                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19731 4BA9           8A46         04            mov	al,4[bp]
19732 4BAC           84C0                       test	al,al
19733 4BAE           75           42            jne 	.F0
19734                       00004BB0            .F1:
19735                                           ! 2271           memsetw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,(Bit16u)attr*0x100+' ',cols);
19736                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19737 4BB0           8A46         FB            mov	al,-5[bp]
19738 4BB3           30E4                       xor	ah,ah
19739 4BB5           50                         push	ax
19740                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19741 4BB6           8A46         06            mov	al,6[bp]
19742 4BB9           30E4                       xor	ah,ah
19743                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19744 4BBB           B9                   0100  mov	cx,#$100
19745 4BBE           F7E9                       imul	cx
19746                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19747                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19748 4BC0           05                   0020  add	ax,*$20
19749 4BC3           50                         push	ax
19750                                           ! Debug: mul unsigned short nbcols = [S+$14-$A] to unsigned short i = [S+$14-$E] (used reg = )
19751 4BC4           8B46         F4            mov	ax,-$C[bp]
19752 4BC7           8B4E         F8            mov	cx,-8[bp]
19753 4BCA           F7E9                       imul	cx
19754                                           ! Debug: add unsigned char cul = [S+$14+8] to unsigned int = ax+0 (used reg = )
19755 4BCC           0246         0A            add	al,$A[bp]
19756 4BCF           80D4                   00  adc	ah,*0
19757                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19758 4BD2           D1E0                       shl	ax,*1
19759                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$14-$10] (used reg = )
19760                                           ! Debug: expression subtree swapping
19761 4BD4           0346         F2            add	ax,-$E[bp]
19762                                           ! Debug: list unsigned int = ax+0 (used reg = )
19763 4BD7           50                         push	ax
19764                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19765 4BD8           8A46         FE            mov	al,-2[bp]
19766 4BDB           30E4                       xor	ah,ah
19767 4BDD           B1                     03  mov	cl,*3
19768 4BDF           D3E0                       shl	ax,cl
19769 4BE1           89C3                       mov	bx,ax
19770 4BE3           81C3                 01FD  add	bx,#_vga_modes
19771                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19772 4BE7           FF77         04            push	4[bx]
19773                                           ! Debug: func () void = memsetw+0 (used reg = )
19774 4BEA           E8         2F1E            call	_memsetw
19775 4BED           83C4                   08  add	sp,*8
19776                                           !BCC_EOS
19777                                           ! 2272          else
19778                                           ! 2273           memcpyw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,vga_modes[line].sstart,((i-nblines)*nbcols+cul)*2,cols);
19779 4BF0           EB           5B            jmp .F3
19780                       00004BF2            .F0:
19781                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19782 4BF2           8A46         FB            mov	al,-5[bp]
19783 4BF5           30E4                       xor	ah,ah
19784 4BF7           50                         push	ax
19785                                           ! Debug: sub unsigned char nblines = [S+$12+2] to unsigned short i = [S+$12-$E] (used reg = )
19786 4BF8           8B46         F4            mov	ax,-$C[bp]
19787 4BFB           2A46         04            sub	al,4[bp]
19788 4BFE           80DC                   00  sbb	ah,*0
19789                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned int = ax+0 (used reg = )
19790 4C01           8B4E         F8            mov	cx,-8[bp]
19791 4C04           F7E9                       imul	cx
19792                                           ! Debug: add unsigned char cul = [S+$12+8] to unsigned int = ax+0 (used reg = )
19793 4C06           0246         0A            add	al,$A[bp]
19794 4C09           80D4                   00  adc	ah,*0
19795                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19796 4C0C           D1E0                       shl	ax,*1
19797                                           ! Debug: list unsigned int = ax+0 (used reg = )
19798 4C0E           50                         push	ax
19799                                           ! Debug: ptradd unsigned char line = [S+$14-4] to [$10] struct  = vga_modes+0 (used reg = )
19800 4C0F           8A46         FE            mov	al,-2[bp]
19801 4C12           30E4                       xor	ah,ah
19802 4C14           B1                     03  mov	cl,*3
19803 4C16           D3E0                       shl	ax,cl
19804 4C18           89C3                       mov	bx,ax
19805 4C1A           81C3                 01FD  add	bx,#_vga_modes
19806                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19807 4C1E           FF77         04            push	4[bx]
19808                                           ! Debug: mul unsigned short nbcols = [S+$16-$A] to unsigned short i = [S+$16-$E] (used reg = )
19809 4C21           8B46         F4            mov	ax,-$C[bp]
19810 4C24           8B4E         F8            mov	cx,-8[bp]
19811 4C27           F7E9                       imul	cx
19812                                           ! Debug: add unsigned char cul = [S+$16+8] to unsigned int = ax+0 (used reg = )
19813 4C29           0246         0A            add	al,$A[bp]
19814 4C2C           80D4                   00  adc	ah,*0
19815                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19816 4C2F           D1E0                       shl	ax,*1
19817                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$16-$10] (used reg = )
19818                                           ! Debug: expression subtree swapping
19819 4C31           0346         F2            add	ax,-$E[bp]
19820                                           ! Debug: list unsigned int = ax+0 (used reg = )
19821 4C34           50                         push	ax
19822                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
19823 4C35           8A46         FE            mov	al,-2[bp]
19824 4C38           30E4                       xor	ah,ah
19825 4C3A           B1                     03  mov	cl,*3
19826 4C3C           D3E0                       shl	ax,cl
19827 4C3E           89C3                       mov	bx,ax
19828 4C40           81C3                 01FD  add	bx,#_vga_modes
19829                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19830 4C44           FF77         04            push	4[bx]
19831                                           ! Debug: func () void = memcpyw+0 (used reg = )
19832 4C47           E8         2F16            call	_memcpyw
19833 4C4A           83C4                   0A  add	sp,*$A
19834                                           !BCC_EOS
19835                                           ! 2274          if (i>rlr) break;
19836                       00004C4D            .F3:
19837                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19838 4C4D           8A46         0C            mov	al,$C[bp]
19839 4C50           30E4                       xor	ah,ah
19840 4C52           3B46         F4            cmp	ax,-$C[bp]
19841 4C55           73           02            jae 	.F4
19842                       00004C57            .F5:
19843 4C57           EB           13            jmp .EC
19844                                           !BCC_EOS
19845                                           ! 2275         }
19846                       00004C59            .F4:
19847                                           ! 2276       }
19848                       00004C59            .ED:
19849                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
19850 4C59           8B46         F4            mov	ax,-$C[bp]
19851 4C5C           48                         dec	ax
19852 4C5D           8946         F4            mov	-$C[bp],ax
19853                       00004C60            .EE:
19854                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
19855 4C60           8A46         08            mov	al,8[bp]
19856 4C63           30E4                       xor	ah,ah
19857 4C65           3B46         F4            cmp	ax,-$C[bp]
19858 4C68         0F86         FF2D            blos	.EF
19859                       00004C6C            .F6:
19860                       00004C6C            .EC:
19861                                           ! 2277     }
19862                       00004C6C            .EB:
19863                                           ! 2278   }
19864                       00004C6C            .DF:
19865                                           ! 2279  else
19866                                           ! 2280   {
19867 4C6C           E9         03D5            br 	.F7
19868                       00004C6F            .D7:
19869                                           ! 2281    cheight=video_param_table[line_to_vpti[line]].cheight;
19870                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] unsigned char = line_to_vpti+0 (used reg = )
19871 4C6F           8A46         FE            mov	al,-2[bp]
19872 4C72           30E4                       xor	ah,ah
19873 4C74           89C3                       mov	bx,ax
19874                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
19875 4C76           8A87       027D            mov	al,_line_to_vpti[bx]
19876 4C7A           30E4                       xor	ah,ah
19877 4C7C           B1                     06  mov	cl,*6
19878 4C7E           D3E0                       shl	ax,cl
19879 4C80           89C3                       mov	bx,ax
19880 4C82           81C3                 0291  add	bx,#_video_param_table
19881                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$10-5] (used reg = )
19882 4C86           8A47         02            mov	al,2[bx]
19883 4C89           8846         FD            mov	-3[bp],al
19884                                           !BCC_EOS
19885                                           ! 2282    switch(vga_modes[line].memmodel)
19886                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] struct  = vga_modes+0 (used reg = )
19887 4C8C           8A46         FE            mov	al,-2[bp]
19888 4C8F           30E4                       xor	ah,ah
19889 4C91           B1                     03  mov	cl,*3
19890 4C93           D3E0                       shl	ax,cl
19891 4C95           89C3                       mov	bx,ax
19892 4C97           81C3                 01FD  add	bx,#_vga_modes
19893 4C9B           8A47         02            mov	al,2[bx]
19894                                           ! 2283     {
19895 4C9E           E9         0391            br 	.FA
19896                                           ! 2284      case 0x04:
19897                                           ! 2285      case 0x03:
19898                       00004CA1            .FB:
19899                                           ! 2286        if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
19900                       00004CA1            .FC:
19901                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19902 4CA1           8A46         04            mov	al,4[bp]
19903 4CA4           84C0                       test	al,al
19904 4CA6         0F85         0089            bne 	.FD
19905                       00004CAA            .102:
19906                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
19907 4CAA           8A46         08            mov	al,8[bp]
19908 4CAD           84C0                       test	al,al
19909 4CAF         0F85         0080            bne 	.FD
19910                       00004CB3            .101:
19911                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
19912 4CB3           8A46         0A            mov	al,$A[bp]
19913 4CB6           84C0                       test	al,al
19914 4CB8           75           79            jne 	.FD
19915                       00004CBA            .100:
19916                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19917 4CBA           8B46         F6            mov	ax,-$A[bp]
19918                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
19919                                           ! Debug: expression subtree swapping
19920 4CBD           48                         dec	ax
19921 4CBE           50                         push	ax
19922 4CBF           8A46         0C            mov	al,$C[bp]
19923 4CC2           30E4                       xor	ah,ah
19924 4CC4           3B46         F0            cmp	ax,0+..FFFC[bp]
19925 4CC7           8D66         F2            lea	sp,2+..FFFC[bp]
19926 4CCA           75           67            jne 	.FD
19927                       00004CCC            .FF:
19928                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19929 4CCC           8B46         F8            mov	ax,-8[bp]
19930                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
19931                                           ! Debug: expression subtree swapping
19932 4CCF           48                         dec	ax
19933 4CD0           50                         push	ax
19934 4CD1           8A46         0E            mov	al,$E[bp]
19935 4CD4           30E4                       xor	ah,ah
19936 4CD6           3B46         F0            cmp	ax,0+..FFFC[bp]
19937 4CD9           8D66         F2            lea	sp,2+..FFFC[bp]
19938 4CDC           75           55            jne 	.FD
19939                       00004CDE            .FE:
19940                                           ! 2287         {
19941                                           ! 2288          outw(0x3ce, 0x0205);
19942                                           ! Debug: list int = const $205 (used reg = )
19943 4CDE           B8                   0205  mov	ax,#$205
19944 4CE1           50                         push	ax
19945                                           ! Debug: list int = const $3CE (used reg = )
19946 4CE2           B8                   03CE  mov	ax,#$3CE
19947 4CE5           50                         push	ax
19948                                           ! Debug: func () void = outw+0 (used reg = )
19949 4CE6           E8         2F23            call	_outw
19950 4CE9           83C4                   04  add	sp,*4
19951                                           !BCC_EOS
19952                                           ! 2289          memsetb(vga_modes[line].sstart,0,attr,nbrows*nbcols*cheight);
19953                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
19954 4CEC           8B46         F6            mov	ax,-$A[bp]
19955 4CEF           8B4E         F8            mov	cx,-8[bp]
19956 4CF2           F7E9                       imul	cx
19957                                           ! Debug: mul unsigned char cheight = [S+$10-5] to unsigned int = ax+0 (used reg = )
19958 4CF4           89C3                       mov	bx,ax
19959 4CF6           8A46         FD            mov	al,-3[bp]
19960 4CF9           30E4                       xor	ah,ah
19961 4CFB           93                         xchg	ax,bx
19962 4CFC           89D9                       mov	cx,bx
19963 4CFE           F7E9                       imul	cx
19964                                           ! Debug: list unsigned int = ax+0 (used reg = )
19965 4D00           50                         push	ax
19966                                           ! Debug: list unsigned char attr = [S+$12+4] (used reg = )
19967 4D01           8A46         06            mov	al,6[bp]
19968 4D04           30E4                       xor	ah,ah
19969 4D06           50                         push	ax
19970                                           ! Debug: list int = const 0 (used reg = )
19971 4D07           31C0                       xor	ax,ax
19972 4D09           50                         push	ax
19973                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19974 4D0A           8A46         FE            mov	al,-2[bp]
19975 4D0D           30E4                       xor	ah,ah
19976 4D0F           B1                     03  mov	cl,*3
19977 4D11           D3E0                       shl	ax,cl
19978 4D13           89C3                       mov	bx,ax
19979 4D15           81C3                 01FD  add	bx,#_vga_modes
19980                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19981 4D19           FF77         04            push	4[bx]
19982                                           ! Debug: func () void = memsetb+0 (used reg = )
19983 4D1C           E8         2DC7            call	_memsetb
19984 4D1F           83C4                   08  add	sp,*8
19985                                           !BCC_EOS
19986                                           ! 2290          outw(0x3ce, 0x0005);
19987                                           ! Debug: list int = const 5 (used reg = )
19988 4D22           B8                   0005  mov	ax,*5
19989 4D25           50                         push	ax
19990                                           ! Debug: list int = const $3CE (used reg = )
19991 4D26           B8                   03CE  mov	ax,#$3CE
19992 4D29           50                         push	ax
19993                                           ! Debug: func () void = outw+0 (used reg = )
19994 4D2A           E8         2EDF            call	_outw
19995 4D2D           83C4                   04  add	sp,*4
19996                                           !BCC_EOS
19997                                           ! 2291         }
19998                                           ! 2292        else
19999                                           ! 2293         {
20000 4D30           E9         0121            br 	.103
20001                       00004D33            .FD:
20002                                           ! 2294          if(dir==1)
20003                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
20004 4D33           8A46         12            mov	al,$12[bp]
20005 4D36           3C                     01  cmp	al,*1
20006 4D38         0F85         008A            bne 	.104
20007                       00004D3C            .105:
20008                                           ! 2295           {for(i=rul;i<=rlr;i++)
20009                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20010 4D3C           8A46         08            mov	al,8[bp]
20011 4D3F           30E4                       xor	ah,ah
20012 4D41           8946         F4            mov	-$C[bp],ax
20013                                           !BCC_EOS
20014                                           !BCC_EOS
20015                                           ! 2296             {
20016 4D44           EB           73            jmp .108
20017                       00004D46            .109:
20018                                           ! 2297              if((i+nblines>rlr)||(nblines==0))
20019                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
20020 4D46           8B46         F4            mov	ax,-$C[bp]
20021 4D49           0246         04            add	al,4[bp]
20022 4D4C           80D4                   00  adc	ah,*0
20023                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
20024 4D4F           50                         push	ax
20025 4D50           8A46         0C            mov	al,$C[bp]
20026 4D53           30E4                       xor	ah,ah
20027 4D55           3B46         F0            cmp	ax,0+..FFFC[bp]
20028 4D58           8D66         F2            lea	sp,2+..FFFC[bp]
20029 4D5B           72           07            jb  	.10B
20030                       00004D5D            .10C:
20031                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20032 4D5D           8A46         04            mov	al,4[bp]
20033 4D60           84C0                       test	al,al
20034 4D62           75           26            jne 	.10A
20035                       00004D64            .10B:
20036                                           ! 2298               vgamem_fill_pl4(cul,i,cols,nbcols,cheight,attr);
20037                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
20038 4D64           8A46         06            mov	al,6[bp]
20039 4D67           30E4                       xor	ah,ah
20040 4D69           50                         push	ax
20041                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
20042 4D6A           8A46         FD            mov	al,-3[bp]
20043 4D6D           30E4                       xor	ah,ah
20044 4D6F           50                         push	ax
20045                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
20046 4D70           FF76         F8            push	-8[bp]
20047                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
20048 4D73           8A46         FB            mov	al,-5[bp]
20049 4D76           30E4                       xor	ah,ah
20050 4D78           50                         push	ax
20051                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20052 4D79           FF76         F4            push	-$C[bp]
20053                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20054 4D7C           8A46         0A            mov	al,$A[bp]
20055 4D7F           30E4                       xor	ah,ah
20056 4D81           50                         push	ax
20057                                           ! Debug: func () void = vgamem_fill_pl4+0 (used reg = )
20058 4D82           E8         F96B            call	_vgamem_fill_pl4
20059 4D85           83C4                   0C  add	sp,*$C
20060                                           !BCC_EOS
20061                                           ! 2299              else
20062                                           ! 2300               vgamem_copy_pl4(cul,i+nblines,i,cols,nbcols,cheight);
20063 4D88           EB           28            jmp .10D
20064                       00004D8A            .10A:
20065                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
20066 4D8A           8A46         FD            mov	al,-3[bp]
20067 4D8D           30E4                       xor	ah,ah
20068 4D8F           50                         push	ax
20069                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
20070 4D90           FF76         F8            push	-8[bp]
20071                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
20072 4D93           8A46         FB            mov	al,-5[bp]
20073 4D96           30E4                       xor	ah,ah
20074 4D98           50                         push	ax
20075                                           ! Debug: list unsigned short i = [S+$16-$E] (used reg = )
20076 4D99           FF76         F4            push	-$C[bp]
20077                                           ! Debug: add unsigned char nblines = [S+$18+2] to unsigned short i = [S+$18-$E] (used reg = )
20078 4D9C           8B46         F4            mov	ax,-$C[bp]
20079 4D9F           0246         04            add	al,4[bp]
20080 4DA2           80D4                   00  adc	ah,*0
20081                                           ! Debug: list unsigned int = ax+0 (used reg = )
20082 4DA5           50                         push	ax
20083                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20084 4DA6           8A46         0A            mov	al,$A[bp]
20085 4DA9           30E4                       xor	ah,ah
20086 4DAB           50                         push	ax
20087                                           ! Debug: func () void = vgamem_copy_pl4+0 (used reg = )
20088 4DAC           E8         F87F            call	_vgamem_copy_pl4
20089 4DAF           83C4                   0C  add	sp,*$C
20090                                           !BCC_EOS
20091                                           ! 2301             }
20092                       00004DB2            .10D:
20093                                           ! 2302           }
20094                       00004DB2            .107:
20095                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
20096 4DB2           8B46         F4            mov	ax,-$C[bp]
20097 4DB5           40                         inc	ax
20098 4DB6           8946         F4            mov	-$C[bp],ax
20099                       00004DB9            .108:
20100                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20101 4DB9           8A46         0C            mov	al,$C[bp]
20102 4DBC           30E4                       xor	ah,ah
20103 4DBE           3B46         F4            cmp	ax,-$C[bp]
20104 4DC1           73           83            jae	.109
20105                       00004DC3            .10E:
20106                       00004DC3            .106:
20107                                           ! 2303          else
20108                                           ! 2304           {for(i=rlr;i>=rul;i--)
20109 4DC3           E9         008E            br 	.10F
20110                       00004DC6            .104:
20111                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20112 4DC6           8A46         0C            mov	al,$C[bp]
20113 4DC9           30E4                       xor	ah,ah
20114 4DCB           8946         F4            mov	-$C[bp],ax
20115                                           !BCC_EOS
20116                                           !BCC_EOS
20117                                           ! 2305             {
20118 4DCE           EB           78            jmp .112
20119                       00004DD0            .113:
20120                                           ! 2306              if((i<rul+nblines)||(nblines==0))
20121                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
20122 4DD0           8A46         08            mov	al,8[bp]
20123 4DD3           30E4                       xor	ah,ah
20124 4DD5           0246         04            add	al,4[bp]
20125 4DD8           80D4                   00  adc	ah,*0
20126                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
20127 4DDB           3B46         F4            cmp	ax,-$C[bp]
20128 4DDE           77           07            ja  	.115
20129                       00004DE0            .116:
20130                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20131 4DE0           8A46         04            mov	al,4[bp]
20132 4DE3           84C0                       test	al,al
20133 4DE5           75           26            jne 	.114
20134                       00004DE7            .115:
20135                                           ! 2307               vgamem_fill_pl4(cul,i,cols,nbcols,cheight,attr);
20136                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
20137 4DE7           8A46         06            mov	al,6[bp]
20138 4DEA           30E4                       xor	ah,ah
20139 4DEC           50                         push	ax
20140                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
20141 4DED           8A46         FD            mov	al,-3[bp]
20142 4DF0           30E4                       xor	ah,ah
20143 4DF2           50                         push	ax
20144                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
20145 4DF3           FF76         F8            push	-8[bp]
20146                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
20147 4DF6           8A46         FB            mov	al,-5[bp]
20148 4DF9           30E4                       xor	ah,ah
20149 4DFB           50                         push	ax
20150                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20151 4DFC           FF76         F4            push	-$C[bp]
20152                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20153 4DFF           8A46         0A            mov	al,$A[bp]
20154 4E02           30E4                       xor	ah,ah
20155 4E04           50                         push	ax
20156                                           ! Debug: func () void = vgamem_fill_pl4+0 (used reg = )
20157 4E05           E8         F8E8            call	_vgamem_fill_pl4
20158 4E08           83C4                   0C  add	sp,*$C
20159                                           !BCC_EOS
20160                                           ! 2308              else
20161                                           ! 2309               vgamem_copy_pl4(cul,i,i-nblines,cols,nbcols,cheight);
20162 4E0B           EB           28            jmp .117
20163                       00004E0D            .114:
20164                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
20165 4E0D           8A46         FD            mov	al,-3[bp]
20166 4E10           30E4                       xor	ah,ah
20167 4E12           50                         push	ax
20168                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
20169 4E13           FF76         F8            push	-8[bp]
20170                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
20171 4E16           8A46         FB            mov	al,-5[bp]
20172 4E19           30E4                       xor	ah,ah
20173 4E1B           50                         push	ax
20174                                           ! Debug: sub unsigned char nblines = [S+$16+2] to unsigned short i = [S+$16-$E] (used reg = )
20175 4E1C           8B46         F4            mov	ax,-$C[bp]
20176 4E1F           2A46         04            sub	al,4[bp]
20177 4E22           80DC                   00  sbb	ah,*0
20178                                           ! Debug: list unsigned int = ax+0 (used reg = )
20179 4E25           50                         push	ax
20180                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20181 4E26           FF76         F4            push	-$C[bp]
20182                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20183 4E29           8A46         0A            mov	al,$A[bp]
20184 4E2C           30E4                       xor	ah,ah
20185 4E2E           50                         push	ax
20186                                           ! Debug: func () void = vgamem_copy_pl4+0 (used reg = )
20187 4E2F           E8         F7FC            call	_vgamem_copy_pl4
20188 4E32           83C4                   0C  add	sp,*$C
20189                                           !BCC_EOS
20190                                           ! 2310              if (i>rlr) break;
20191                       00004E35            .117:
20192                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20193 4E35           8A46         0C            mov	al,$C[bp]
20194 4E38           30E4                       xor	ah,ah
20195 4E3A           3B46         F4            cmp	ax,-$C[bp]
20196 4E3D           73           02            jae 	.118
20197                       00004E3F            .119:
20198 4E3F           EB           13            jmp .110
20199                                           !BCC_EOS
20200                                           ! 2311             }
20201                       00004E41            .118:
20202                                           ! 2312           }
20203                       00004E41            .111:
20204                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
20205 4E41           8B46         F4            mov	ax,-$C[bp]
20206 4E44           48                         dec	ax
20207 4E45           8946         F4            mov	-$C[bp],ax
20208                       00004E48            .112:
20209                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20210 4E48           8A46         08            mov	al,8[bp]
20211 4E4B           30E4                       xor	ah,ah
20212 4E4D           3B46         F4            cmp	ax,-$C[bp]
20213 4E50         0F86         FF7C            blos	.113
20214                       00004E54            .11A:
20215                       00004E54            .110:
20216                                           ! 2313         }
20217                       00004E54            .10F:
20218                                           ! 2314        break;
20219                       00004E54            .103:
20220 4E54           E9         01ED            br 	.F8
20221                                           !BCC_EOS
20222                                           ! 2315      case 0x02:
20223                                           ! 2316        bpp=vga_modes[line].pixbits;
20224                       00004E57            .11B:
20225                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] struct  = vga_modes+0 (used reg = )
20226 4E57           8A46         FE            mov	al,-2[bp]
20227 4E5A           30E4                       xor	ah,ah
20228 4E5C           B1                     03  mov	cl,*3
20229 4E5E           D3E0                       shl	ax,cl
20230 4E60           89C3                       mov	bx,ax
20231 4E62           81C3                 01FD  add	bx,#_vga_modes
20232                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$10-6] (used reg = )
20233 4E66           8A47         03            mov	al,3[bx]
20234 4E69           8846         FC            mov	-4[bp],al
20235                                           !BCC_EOS
20236                                           ! 2317        if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
20237                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20238 4E6C           8A46         04            mov	al,4[bp]
20239 4E6F           84C0                       test	al,al
20240 4E71           75           77            jne 	.11C
20241                       00004E73            .121:
20242                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
20243 4E73           8A46         08            mov	al,8[bp]
20244 4E76           84C0                       test	al,al
20245 4E78           75           70            jne 	.11C
20246                       00004E7A            .120:
20247                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
20248 4E7A           8A46         0A            mov	al,$A[bp]
20249 4E7D           84C0                       test	al,al
20250 4E7F           75           69            jne 	.11C
20251                       00004E81            .11F:
20252                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
20253 4E81           8B46         F6            mov	ax,-$A[bp]
20254                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
20255                                           ! Debug: expression subtree swapping
20256 4E84           48                         dec	ax
20257 4E85           50                         push	ax
20258 4E86           8A46         0C            mov	al,$C[bp]
20259 4E89           30E4                       xor	ah,ah
20260 4E8B           3B46         F0            cmp	ax,0+..FFFC[bp]
20261 4E8E           8D66         F2            lea	sp,2+..FFFC[bp]
20262 4E91           75           57            jne 	.11C
20263                       00004E93            .11E:
20264                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
20265 4E93           8B46         F8            mov	ax,-8[bp]
20266                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
20267                                           ! Debug: expression subtree swapping
20268 4E96           48                         dec	ax
20269 4E97           50                         push	ax
20270 4E98           8A46         0E            mov	al,$E[bp]
20271 4E9B           30E4                       xor	ah,ah
20272 4E9D           3B46         F0            cmp	ax,0+..FFFC[bp]
20273 4EA0           8D66         F2            lea	sp,2+..FFFC[bp]
20274 4EA3           75           45            jne 	.11C
20275                       00004EA5            .11D:
20276                                           ! 2318         {
20277                                           ! 2319          memsetb(vga_modes[line].sstart,0,attr,nbrows*nbcols*cheight*bpp);
20278                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
20279 4EA5           8B46         F6            mov	ax,-$A[bp]
20280 4EA8           8B4E         F8            mov	cx,-8[bp]
20281 4EAB           F7E9                       imul	cx
20282                                           ! Debug: mul unsigned char cheight = [S+$10-5] to unsigned int = ax+0 (used reg = )
20283 4EAD           89C3                       mov	bx,ax
20284 4EAF           8A46         FD            mov	al,-3[bp]
20285 4EB2           30E4                       xor	ah,ah
20286 4EB4           93                         xchg	ax,bx
20287 4EB5           89D9                       mov	cx,bx
20288 4EB7           F7E9                       imul	cx
20289                                           ! Debug: mul unsigned char bpp = [S+$10-6] to unsigned int = ax+0 (used reg = )
20290 4EB9           89C3                       mov	bx,ax
20291 4EBB           8A46         FC            mov	al,-4[bp]
20292 4EBE           30E4                       xor	ah,ah
20293 4EC0           93                         xchg	ax,bx
20294 4EC1           89D9                       mov	cx,bx
20295 4EC3           F7E9                       imul	cx
20296                                           ! Debug: list unsigned int = ax+0 (used reg = )
20297 4EC5           50                         push	ax
20298                                           ! Debug: list unsigned char attr = [S+$12+4] (used reg = )
20299 4EC6           8A46         06            mov	al,6[bp]
20300 4EC9           30E4                       xor	ah,ah
20301 4ECB           50                         push	ax
20302                                           ! Debug: list int = const 0 (used reg = )
20303 4ECC           31C0                       xor	ax,ax
20304 4ECE           50                         push	ax
20305                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
20306 4ECF           8A46         FE            mov	al,-2[bp]
20307 4ED2           30E4                       xor	ah,ah
20308 4ED4           B1                     03  mov	cl,*3
20309 4ED6           D3E0                       shl	ax,cl
20310 4ED8           89C3                       mov	bx,ax
20311 4EDA           81C3                 01FD  add	bx,#_vga_modes
20312                                           ! Debug: list unsigned short = [bx+4] (used reg = )
20313 4EDE           FF77         04            push	4[bx]
20314                                           ! Debug: func () void = memsetb+0 (used reg = )
20315 4EE1           E8         2C02            call	_memsetb
20316 4EE4           83C4                   08  add	sp,*8
20317                                           !BCC_EOS
20318                                           ! 2320         }
20319                                           ! 2321        else
20320                                           ! 2322         {
20321 4EE7           E9         0144            br 	.122
20322                       00004EEA            .11C:
20323                                           ! 2323          if(bpp==2)
20324                                           ! Debug: logeq int = const 2 to unsigned char bpp = [S+$10-6] (used reg = )
20325 4EEA           8A46         FC            mov	al,-4[bp]
20326 4EED           3C                     02  cmp	al,*2
20327 4EEF           75           1C            jne 	.123
20328                       00004EF1            .124:
20329                                           ! 2324           {
20330                                           ! 2325            cul<<=1;
20331                                           ! Debug: slab int = const 1 to unsigned char cul = [S+$10+8] (used reg = )
20332 4EF1           8A46         0A            mov	al,$A[bp]
20333 4EF4           30E4                       xor	ah,ah
20334 4EF6           D1E0                       shl	ax,*1
20335 4EF8           8846         0A            mov	$A[bp],al
20336                                           !BCC_EOS
20337                                           ! 2326            cols<<=1;
20338                                           ! Debug: slab int = const 1 to unsigned char cols = [S+$10-7] (used reg = )
20339 4EFB           8A46         FB            mov	al,-5[bp]
20340 4EFE           30E4                       xor	ah,ah
20341 4F00           D1E0                       shl	ax,*1
20342 4F02           8846         FB            mov	-5[bp],al
20343                                           !BCC_EOS
20344                                           ! 2327            nbcols<<=1;
20345                                           ! Debug: slab int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
20346 4F05           8B46         F8            mov	ax,-8[bp]
20347 4F08           D1E0                       shl	ax,*1
20348 4F0A           8946         F8            mov	-8[bp],ax
20349                                           !BCC_EOS
20350                                           ! 2328           }
20351                                           ! 2329          if(dir==1)
20352                       00004F0D            .123:
20353                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
20354 4F0D           8A46         12            mov	al,$12[bp]
20355 4F10           3C                     01  cmp	al,*1
20356 4F12         0F85         008A            bne 	.125
20357                       00004F16            .126:
20358                                           ! 2330           {for(i=rul;i<=rlr;i++)
20359                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20360 4F16           8A46         08            mov	al,8[bp]
20361 4F19           30E4                       xor	ah,ah
20362 4F1B           8946         F4            mov	-$C[bp],ax
20363                                           !BCC_EOS
20364                                           !BCC_EOS
20365                                           ! 2331             {
20366 4F1E           EB           73            jmp .129
20367                       00004F20            .12A:
20368                                           ! 2332              if((i+nblines>rlr)||(nblines==0))
20369                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
20370 4F20           8B46         F4            mov	ax,-$C[bp]
20371 4F23           0246         04            add	al,4[bp]
20372 4F26           80D4                   00  adc	ah,*0
20373                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
20374 4F29           50                         push	ax
20375 4F2A           8A46         0C            mov	al,$C[bp]
20376 4F2D           30E4                       xor	ah,ah
20377 4F2F           3B46         F0            cmp	ax,0+..FFFC[bp]
20378 4F32           8D66         F2            lea	sp,2+..FFFC[bp]
20379 4F35           72           07            jb  	.12C
20380                       00004F37            .12D:
20381                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20382 4F37           8A46         04            mov	al,4[bp]
20383 4F3A           84C0                       test	al,al
20384 4F3C           75           26            jne 	.12B
20385                       00004F3E            .12C:
20386                                           ! 2333               vgamem_fill_cga(cul,i,cols,nbcols,cheight,attr);
20387                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
20388 4F3E           8A46         06            mov	al,6[bp]
20389 4F41           30E4                       xor	ah,ah
20390 4F43           50                         push	ax
20391                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
20392 4F44           8A46         FD            mov	al,-3[bp]
20393 4F47           30E4                       xor	ah,ah
20394 4F49           50                         push	ax
20395                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
20396 4F4A           FF76         F8            push	-8[bp]
20397                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
20398 4F4D           8A46         FB            mov	al,-5[bp]
20399 4F50           30E4                       xor	ah,ah
20400 4F52           50                         push	ax
20401                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20402 4F53           FF76         F4            push	-$C[bp]
20403                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20404 4F56           8A46         0A            mov	al,$A[bp]
20405 4F59           30E4                       xor	ah,ah
20406 4F5B           50                         push	ax
20407                                           ! Debug: func () void = vgamem_fill_cga+0 (used reg = )
20408 4F5C           E8         F92E            call	_vgamem_fill_cga
20409 4F5F           83C4                   0C  add	sp,*$C
20410                                           !BCC_EOS
20411                                           ! 2334              else
20412                                           ! 2335               vgamem_copy_cga(cul,i+nblines,i,cols,nbcols,cheight);
20413 4F62           EB           28            jmp .12E
20414                       00004F64            .12B:
20415                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
20416 4F64           8A46         FD            mov	al,-3[bp]
20417 4F67           30E4                       xor	ah,ah
20418 4F69           50                         push	ax
20419                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
20420 4F6A           FF76         F8            push	-8[bp]
20421                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
20422 4F6D           8A46         FB            mov	al,-5[bp]
20423 4F70           30E4                       xor	ah,ah
20424 4F72           50                         push	ax
20425                                           ! Debug: list unsigned short i = [S+$16-$E] (used reg = )
20426 4F73           FF76         F4            push	-$C[bp]
20427                                           ! Debug: add unsigned char nblines = [S+$18+2] to unsigned short i = [S+$18-$E] (used reg = )
20428 4F76           8B46         F4            mov	ax,-$C[bp]
20429 4F79           0246         04            add	al,4[bp]
20430 4F7C           80D4                   00  adc	ah,*0
20431                                           ! Debug: list unsigned int = ax+0 (used reg = )
20432 4F7F           50                         push	ax
20433                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20434 4F80           8A46         0A            mov	al,$A[bp]
20435 4F83           30E4                       xor	ah,ah
20436 4F85           50                         push	ax
20437                                           ! Debug: func () void = vgamem_copy_cga+0 (used reg = )
20438 4F86           E8         F7F2            call	_vgamem_copy_cga
20439 4F89           83C4                   0C  add	sp,*$C
20440                                           !BCC_EOS
20441                                           ! 2336             }
20442                       00004F8C            .12E:
20443                                           ! 2337           }
20444                       00004F8C            .128:
20445                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
20446 4F8C           8B46         F4            mov	ax,-$C[bp]
20447 4F8F           40                         inc	ax
20448 4F90           8946         F4            mov	-$C[bp],ax
20449                       00004F93            .129:
20450                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20451 4F93           8A46         0C            mov	al,$C[bp]
20452 4F96           30E4                       xor	ah,ah
20453 4F98           3B46         F4            cmp	ax,-$C[bp]
20454 4F9B           73           83            jae	.12A
20455                       00004F9D            .12F:
20456                       00004F9D            .127:
20457                                           ! 2338          else
20458                                           ! 2339           {for(i=rlr;i>=rul;i--)
20459 4F9D           E9         008E            br 	.130
20460                       00004FA0            .125:
20461                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20462 4FA0           8A46         0C            mov	al,$C[bp]
20463 4FA3           30E4                       xor	ah,ah
20464 4FA5           8946         F4            mov	-$C[bp],ax
20465                                           !BCC_EOS
20466                                           !BCC_EOS
20467                                           ! 2340             {
20468 4FA8           EB           78            jmp .133
20469                       00004FAA            .134:
20470                                           ! 2341      
20471                                           ! 2341         if((i<rul+nblines)||(nblines==0))
20472                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
20473 4FAA           8A46         08            mov	al,8[bp]
20474 4FAD           30E4                       xor	ah,ah
20475 4FAF           0246         04            add	al,4[bp]
20476 4FB2           80D4                   00  adc	ah,*0
20477                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
20478 4FB5           3B46         F4            cmp	ax,-$C[bp]
20479 4FB8           77           07            ja  	.136
20480                       00004FBA            .137:
20481                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20482 4FBA           8A46         04            mov	al,4[bp]
20483 4FBD           84C0                       test	al,al
20484 4FBF           75           26            jne 	.135
20485                       00004FC1            .136:
20486                                           ! 2342               vgamem_fill_cga(cul,i,cols,nbcols,cheight,attr);
20487                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
20488 4FC1           8A46         06            mov	al,6[bp]
20489 4FC4           30E4                       xor	ah,ah
20490 4FC6           50                         push	ax
20491                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
20492 4FC7           8A46         FD            mov	al,-3[bp]
20493 4FCA           30E4                       xor	ah,ah
20494 4FCC           50                         push	ax
20495                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
20496 4FCD           FF76         F8            push	-8[bp]
20497                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
20498 4FD0           8A46         FB            mov	al,-5[bp]
20499 4FD3           30E4                       xor	ah,ah
20500 4FD5           50                         push	ax
20501                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20502 4FD6           FF76         F4            push	-$C[bp]
20503                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20504 4FD9           8A46         0A            mov	al,$A[bp]
20505 4FDC           30E4                       xor	ah,ah
20506 4FDE           50                         push	ax
20507                                           ! Debug: func () void = vgamem_fill_cga+0 (used reg = )
20508 4FDF           E8         F8AB            call	_vgamem_fill_cga
20509 4FE2           83C4                   0C  add	sp,*$C
20510                                           !BCC_EOS
20511                                           ! 2343              else
20512                                           ! 2344               vgamem_copy_cga(cul,i,i-nblines,cols,nbcols,cheight);
20513 4FE5           EB           28            jmp .138
20514                       00004FE7            .135:
20515                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
20516 4FE7           8A46         FD            mov	al,-3[bp]
20517 4FEA           30E4                       xor	ah,ah
20518 4FEC           50                         push	ax
20519                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
20520 4FED           FF76         F8            push	-8[bp]
20521                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
20522 4FF0           8A46         FB            mov	al,-5[bp]
20523 4FF3           30E4                       xor	ah,ah
20524 4FF5           50                         push	ax
20525                                           ! Debug: sub unsigned char nblines = [S+$16+2] to unsigned short i = [S+$16-$E] (used reg = )
20526 4FF6           8B46         F4            mov	ax,-$C[bp]
20527 4FF9           2A46         04            sub	al,4[bp]
20528 4FFC           80DC                   00  sbb	ah,*0
20529                                           ! Debug: list unsigned int = ax+0 (used reg = )
20530 4FFF           50                         push	ax
20531                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20532 5000           FF76         F4            push	-$C[bp]
20533                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20534 5003           8A46         0A            mov	al,$A[bp]
20535 5006           30E4                       xor	ah,ah
20536 5008           50                         push	ax
20537                                           ! Debug: func () void = vgamem_copy_cga+0 (used reg = )
20538 5009           E8         F76F            call	_vgamem_copy_cga
20539 500C           83C4                   0C  add	sp,*$C
20540                                           !BCC_EOS
20541                                           ! 2345              if (i>rlr) break;
20542                       0000500F            .138:
20543                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20544 500F           8A46         0C            mov	al,$C[bp]
20545 5012           30E4                       xor	ah,ah
20546 5014           3B46         F4            cmp	ax,-$C[bp]
20547 5017           73           02            jae 	.139
20548                       00005019            .13A:
20549 5019           EB           13            jmp .131
20550                                           !BCC_EOS
20551                                           ! 2346             }
20552                       0000501B            .139:
20553                                           ! 2347           }
20554                       0000501B            .132:
20555                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
20556 501B           8B46         F4            mov	ax,-$C[bp]
20557 501E           48                         dec	ax
20558 501F           8946         F4            mov	-$C[bp],ax
20559                       00005022            .133:
20560                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20561 5022           8A46         08            mov	al,8[bp]
20562 5025           30E4                       xor	ah,ah
20563 5027           3B46         F4            cmp	ax,-$C[bp]
20564 502A         0F86         FF7C            blos	.134
20565                       0000502E            .13B:
20566                       0000502E            .131:
20567                                           ! 2348         }
20568                       0000502E            .130:
20569                                           ! 2349        break;
20570                       0000502E            .122:
20571 502E           EB           14            jmp .F8
20572                                           !BCC_EOS
20573                                           ! 2350     }
20574                                           ! 2351   }
20575 5030           EB           12            jmp .F8
20576                       00005032            .FA:
20577 5032           2C                     02  sub	al,*2
20578 5034         0F84         FE1F            beq 	.11B
20579 5038           2C                     01  sub	al,*1
20580 503A         0F84         FC63            beq 	.FC
20581 503E           2C                     01  sub	al,*1
20582 5040         0F84         FC5D            beq 	.FB
20583                       00005044            .F8:
20584                       FFFFFFF0            ..FFFC	=	-$10
20585                                           ! 2352 }
20586                       00005044            .F7:
20587 5044           89EC                       mov	sp,bp
20588 5046           5D                         pop	bp
20589 5047           C3                         ret
20590                                           ! 2353 static void biosfn_read_char_attr (page,car)
20591                                           ! Register BX used in function biosfn_scroll
20592                                           ! 2354 Bit8u page;Bit16u *car;
20593                       00005048            _biosfn_read_char_attr:
20594                                           !BCC_EOS
20595                                           !BCC_EOS
20596                                           ! 2355 {Bit16u ss=get_SS();
20597 5048           55                         push	bp
20598 5049           89E5                       mov	bp,sp
20599 504B           4C                         dec	sp
20600 504C           4C                         dec	sp
20601                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
20602 504D           E8         2BCC            call	_get_SS
20603                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
20604 5050           8946         FE            mov	-2[bp],ax
20605                                           !BCC_EOS
20606                                           ! 2356  Bit8u xcurs,ycurs,mode,line;
20607                                           !BCC_EOS
20608                                           ! 2357  Bit16u nbcols,nbrows,address;
20609                                           !BCC_EOS
20610                                           ! 2358  Bit16u cursor,dummy;
20611                                           !BCC_EOS
20612                                           ! 2359  mode=read_byte(0x40,0x49);
20613 5053           83C4                   F2  add	sp,*-$E
20614                                           ! Debug: list int = const $49 (used reg = )
20615 5056           B8                   0049  mov	ax,*$49
20616 5059           50                         push	ax
20617                                           ! Debug: list int = const $40 (used reg = )
20618 505A           B8                   0040  mov	ax,*$40
20619 505D           50                         push	ax
20620                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20621 505E           E8         2B2F            call	_read_byte
20622 5061           83C4                   04  add	sp,*4
20623                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-7] (used reg = )
20624 5064           8846         FB            mov	-5[bp],al
20625                                           !BCC_EOS
20626                                           ! 2360  line=find_vga_entry(mode);
20627                                           ! Debug: list unsigned char mode = [S+$12-7] (used reg = )
20628 5067           8A46         FB            mov	al,-5[bp]
20629 506A           30E4                       xor	ah,ah
20630 506C           50                         push	ax
20631                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
20632 506D           E8         2A34            call	_find_vga_entry
20633 5070           44                         inc	sp
20634 5071           44                         inc	sp
20635                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-8] (used reg = )
20636 5072           8846         FA            mov	-6[bp],al
20637                                           !BCC_EOS
20638                                           ! 2361  if(line==0xFF)return;
20639                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-8] (used reg = )
20640 5075           8A46         FA            mov	al,-6[bp]
20641 5078           3C                     FF  cmp	al,#$FF
20642 507A           75           04            jne 	.13C
20643                       0000507C            .13D:
20644 507C           89EC                       mov	sp,bp
20645 507E           5D                         pop	bp
20646 507F           C3                         ret
20647                                           !BCC_EOS
20648                                           ! 2362  biosfn_get_cursor_pos(page,&dummy,&cursor);
20649                       00005080            .13C:
20650                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
20651 5080           8D5E         F2            lea	bx,-$E[bp]
20652 5083           53                         push	bx
20653                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
20654 5084           8D5E         F0            lea	bx,-$10[bp]
20655 5087           53                         push	bx
20656                                           ! Debug: list unsigned char page = [S+$16+2] (used reg = )
20657 5088           8A46         04            mov	al,4[bp]
20658 508B           30E4                       xor	ah,ah
20659 508D           50                         push	ax
20660                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
20661 508E           E8         F3B9            call	_biosfn_get_cursor_pos
20662 5091           83C4                   06  add	sp,*6
20663                                           !BCC_EOS
20664                                           ! 2363  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
20665                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
20666 5094           8A46         F2            mov	al,-$E[bp]
20667                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-5] (used reg = )
20668 5097           8846         FD            mov	-3[bp],al
20669                                           !BCC_EOS
20670                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
20671 509A           8B46         F2            mov	ax,-$E[bp]
20672 509D           30C0                       xor	al,al
20673                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
20674 509F           88E0                       mov	al,ah
20675 50A1           30E4                       xor	ah,ah
20676                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-6] (used reg = )
20677 50A3           8846         FC            mov	-4[bp],al
20678                                           !BCC_EOS
20679                                           ! 2364  nbrows=read_byte(0x40,0x84)+1;
20680                                           ! Debug: list int = const $84 (used reg = )
20681 50A6           B8                   0084  mov	ax,#$84
20682 50A9           50                         push	ax
20683                                           ! Debug: list int = const $40 (used reg = )
20684 50AA           B8                   0040  mov	ax,*$40
20685 50AD           50                         push	ax
20686                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20687 50AE           E8         2ADF            call	_read_byte
20688 50B1           83C4                   04  add	sp,*4
20689                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
20690 50B4           30E4                       xor	ah,ah
20691                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
20692 50B6           40                         inc	ax
20693 50B7           8946         F6            mov	-$A[bp],ax
20694                                           !BCC_EOS
20695                                           ! 2365  nbcols=read_word(0x40,0x4A);
20696                                           ! Debug: list int = const $4A (used reg = )
20697 50BA           B8                   004A  mov	ax,*$4A
20698 50BD           50                         push	ax
20699                                           ! Debug: list int = const $40 (used reg = )
20700 50BE           B8                   0040  mov	ax,*$40
20701 50C1           50                         push	ax
20702                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
20703 50C2           E8         2ADE            call	_read_word
20704 50C5           83C4                   04  add	sp,*4
20705                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
20706 50C8           8946         F8            mov	-8[bp],ax
20707                                           !BCC_EOS
20708                                           ! 2366  if(vga_modes[line].class==0x00)
20709                                           ! Debug: ptradd unsigned char line = [S+$12-8] to [$10] struct  = vga_modes+0 (used reg = )
20710 50CB           8A46         FA            mov	al,-6[bp]
20711 50CE           30E4                       xor	ah,ah
20712 50D0           B1                     03  mov	cl,*3
20713 50D2           D3E0                       shl	ax,cl
20714 50D4           89C3                       mov	bx,ax
20715 50D6           81C3                 01FD  add	bx,#_vga_modes
20716                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
20717 50DA           8A47         01            mov	al,1[bx]
20718 50DD           84C0                       test	al,al
20719 50DF           75           5E            jne 	.13E
20720                       000050E1            .13F:
20721                                           ! 2367   {
20722                                           ! 2368    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
20723                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-6] (used reg = )
20724 50E1           8A46         FC            mov	al,-4[bp]
20725 50E4           30E4                       xor	ah,ah
20726 50E6           8B4E         F8            mov	cx,-8[bp]
20727 50E9           F7E9                       imul	cx
20728                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-5] (used reg = )
20729                                           ! Debug: expression subtree swapping
20730 50EB           0246         FD            add	al,-3[bp]
20731 50EE           80D4                   00  adc	ah,*0
20732                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
20733 50F1           D1E0                       shl	ax,*1
20734 50F3           50                         push	ax
20735                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
20736 50F4           8B46         F8            mov	ax,-8[bp]
20737 50F7           8B4E         F6            mov	cx,-$A[bp]
20738 50FA           F7E9                       imul	cx
20739                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
20740 50FC           D1E0                       shl	ax,*1
20741                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
20742 50FE           0C                     FF  or	al,#$FF
20743                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
20744                                           ! Debug: mul unsigned char page = [S+$14+2] to unsigned int = ax+1 (used reg = )
20745 5100           89C3                       mov	bx,ax
20746 5102           8A46         04            mov	al,4[bp]
20747 5105           30E4                       xor	ah,ah
20748 5107           93                         xchg	ax,bx
20749 5108           40                         inc	ax
20750 5109           89D9                       mov	cx,bx
20751 510B           F7E9                       imul	cx
20752                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
20753 510D           0346         EE            add	ax,-$12[bp]
20754 5110           44                         inc	sp
20755 5111           44                         inc	sp
20756                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
20757 5112           8946         F4            mov	-$C[bp],ax
20758                                           !BCC_EOS
20759                                           ! 2369    write_word(ss,car,read_word(vga_modes[line].sstart,address));
20760                                           ! Debug: list unsigned short address = [S+$12-$E] (used reg = )
20761 5115           FF76         F4            push	-$C[bp]
20762                                           ! Debug: ptradd unsigned char line = [S+$14-8] to [$10] struct  = vga_modes+0 (used reg = )
20763 5118           8A46         FA            mov	al,-6[bp]
20764 511B           30E4                       xor	ah,ah
20765 511D           B1                     03  mov	cl,*3
20766 511F           D3E0                       shl	ax,cl
20767 5121           89C3                       mov	bx,ax
20768 5123           81C3                 01FD  add	bx,#_vga_modes
20769                                           ! Debug: list unsigned short = [bx+4] (used reg = )
20770 5127           FF77         04            push	4[bx]
20771                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
20772 512A           E8         2A76            call	_read_word
20773 512D           83C4                   04  add	sp,*4
20774                                           ! Debug: list unsigned short = ax+0 (used reg = )
20775 5130           50                         push	ax
20776                                           ! Debug: list * unsigned short car = [S+$14+4] (used reg = )
20777 5131           FF76         06            push	6[bp]
20778                                           ! Debug: list unsigned short ss = [S+$16-4] (used reg = )
20779 5134           FF76         FE            push	-2[bp]
20780                                           ! Debug: func () void = write_word+0 (used reg = )
20781 5137           E8         2A94            call	_write_word
20782 513A           83C4                   06  add	sp,*6
20783                                           !BCC_EOS
20784                                           ! 2370   }
20785                                           ! 2371  else
20786                                           ! 2372   {
20787 513D           EB           00            jmp .140
20788                       0000513F            .13E:
20789                                           ! 2373   }
20790                                           ! 2374 }
20791                       0000513F            .140:
20792 513F           89EC                       mov	sp,bp
20793 5141           5D                         pop	bp
20794 5142           C3                         ret
20795                                           ! 2375 static void write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight)
20796                                           ! Register BX used in function biosfn_read_char_attr
20797                                           ! 2376 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;Bit8u cheight;
20798                       00005143            _write_gfx_char_pl4:
20799                                           !BCC_EOS
20800                                           !BCC_EOS
20801                                           !BCC_EOS
20802                                           !BCC_EOS
20803                                           !BCC_EOS
20804                                           !BCC_EOS
20805                                           ! 2377 {
20806                                           ! 2378  Bit8u i,j,mask;
20807                                           !BCC_EOS
20808                                           ! 2379  Bit8u *fdata;
20809                                           !BCC_EOS
20810                                           ! 2380  Bit16u addr,dest,src;
20811                                           !BCC_EOS
20812                                           ! 2381  switch(cheight)
20813 5143           55                         push	bp
20814 5144           89E5                       mov	bp,sp
20815 5146           83C4                   F4  add	sp,*-$C
20816 5149           8A46         0E            mov	al,$E[bp]
20817                                           ! 2382   {case 14:
20818 514C           EB           18            jmp .143
20819                                           ! 2383     fdata = &vgafont14;
20820                       0000514E            .144:
20821                                           ! Debug: eq * [$E00] unsigned char = vgafont14+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20822 514E           BB                   1761  mov	bx,#_vgafont14
20823 5151           895E         FA            mov	-6[bp],bx
20824                                           !BCC_EOS
20825                                           ! 2384     break;
20826 5154           EB           1A            jmp .141
20827                                           !BCC_EOS
20828                                           ! 2385    case 16:
20829                                           ! 2386     fdata = &vgafont16;
20830                       00005156            .145:
20831                                           ! Debug: eq * [$1000] unsigned char = vgafont16+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20832 5156           BB                   2561  mov	bx,#_vgafont16
20833 5159           895E         FA            mov	-6[bp],bx
20834                                           !BCC_EOS
20835                                           ! 2387     break;
20836 515C           EB           12            jmp .141
20837                                           !BCC_EOS
20838                                           ! 2388    default:
20839                                           ! 2389     fdata = &vgafont8;
20840                       0000515E            .146:
20841                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20842 515E           BB                   0F61  mov	bx,#_vgafont8
20843 5161           895E         FA            mov	-6[bp],bx
20844                                           !BCC_EOS
20845                                           ! 2390   }
20846                                           ! 2391  addr=xcurs+ycurs*cheight*nbcols;
20847 5164           EB           0A            jmp .141
20848                       00005166            .143:
20849 5166           2C                     0E  sub	al,*$E
20850 5168           74           E4            je 	.144
20851 516A           2C                     02  sub	al,*2
20852 516C           74           E8            je 	.145
20853 516E           EB           EE            jmp	.146
20854                       00005170            .141:
20855                       FFFFFFF2            ..FFFB	=	-$E
20856                                           ! Debug: mul unsigned char cheight = [S+$E+$C] to unsigned char ycurs = [S+$E+8] (used reg = )
20857 5170           8A46         0E            mov	al,$E[bp]
20858 5173           30E4                       xor	ah,ah
20859 5175           89C3                       mov	bx,ax
20860 5177           8A46         0A            mov	al,$A[bp]
20861 517A           30E4                       xor	ah,ah
20862 517C           89D9                       mov	cx,bx
20863 517E           F7E9                       imul	cx
20864                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
20865 5180           89C3                       mov	bx,ax
20866 5182           8A46         0C            mov	al,$C[bp]
20867 5185           30E4                       xor	ah,ah
20868 5187           93                         xchg	ax,bx
20869 5188           89D9                       mov	cx,bx
20870 518A           F7E9                       imul	cx
20871                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$E+6] (used reg = )
20872                                           ! Debug: expression subtree swapping
20873 518C           0246         08            add	al,8[bp]
20874 518F           80D4                   00  adc	ah,*0
20875                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
20876 5192           8946         F8            mov	-8[bp],ax
20877                                           !BCC_EOS
20878                                           ! 2392  src = car * cheight;
20879                                           ! Debug: mul unsigned char cheight = [S+$E+$C] to unsigned char car = [S+$E+2] (used reg = )
20880 5195           8A46         0E            mov	al,$E[bp]
20881 5198           30E4                       xor	ah,ah
20882 519A           89C3                       mov	bx,ax
20883 519C           8A46         04            mov	al,4[bp]
20884 519F           30E4                       xor	ah,ah
20885 51A1           89D9                       mov	cx,bx
20886 51A3           F7E9                       imul	cx
20887                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
20888 51A5           8946         F4            mov	-$C[bp],ax
20889                                           !BCC_EOS
20890                                           ! 2393  outw(0x3c4, 0x0f02);
20891                                           ! Debug: list int = const $F02 (used reg = )
20892 51A8           B8                   0F02  mov	ax,#$F02
20893 51AB           50                         push	ax
20894                                           ! Debug: list int = const $3C4 (used reg = )
20895 51AC           B8                   03C4  mov	ax,#$3C4
20896 51AF           50                         push	ax
20897                                           ! Debug: func () void = outw+0 (used reg = )
20898 51B0           E8         2A59            call	_outw
20899 51B3           83C4                   04  add	sp,*4
20900                                           !BCC_EOS
20901                                           ! 2394  outw(0x3ce, 0x0205);
20902                                           ! Debug: list int = const $205 (used reg = )
20903 51B6           B8                   0205  mov	ax,#$205
20904 51B9           50                         push	ax
20905                                           ! Debug: list int = const $3CE (used reg = )
20906 51BA           B8                   03CE  mov	ax,#$3CE
20907 51BD           50                         push	ax
20908                                           ! Debug: func () void = outw+0 (used reg = )
20909 51BE           E8         2A4B            call	_outw
20910 51C1           83C4                   04  add	sp,*4
20911                                           !BCC_EOS
20912                                           ! 2395  if(attr&0x80)
20913                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
20914 51C4           8A46         06            mov	al,6[bp]
20915 51C7           24                     80  and	al,#$80
20916 51C9           84C0                       test	al,al
20917 51CB           74           10            je  	.147
20918                       000051CD            .148:
20919                                           ! 2396   {
20920                                           ! 2397    outw(0x3ce, 0x1803);
20921                                           ! Debug: list int = const $1803 (used reg = )
20922 51CD           B8                   1803  mov	ax,#$1803
20923 51D0           50                         push	ax
20924                                           ! Debug: list int = const $3CE (used reg = )
20925 51D1           B8                   03CE  mov	ax,#$3CE
20926 51D4           50                         push	ax
20927                                           ! Debug: func () void = outw+0 (used reg = )
20928 51D5           E8         2A34            call	_outw
20929 51D8           83C4                   04  add	sp,*4
20930                                           !BCC_EOS
20931                                           ! 2398   }
20932                                           ! 2399  else
20933                                           ! 2400   {
20934 51DB           EB           0E            jmp .149
20935                       000051DD            .147:
20936                                           ! 2401    outw(0x3ce, 0x0003);
20937                                           ! Debug: list int = const 3 (used reg = )
20938 51DD           B8                   0003  mov	ax,*3
20939 51E0           50                         push	ax
20940                                           ! Debug: list int = const $3CE (used reg = )
20941 51E1           B8                   03CE  mov	ax,#$3CE
20942 51E4           50                         push	ax
20943                                           ! Debug: func () void = outw+0 (used reg = )
20944 51E5           E8         2A24            call	_outw
20945 51E8           83C4                   04  add	sp,*4
20946                                           !BCC_EOS
20947                                           ! 2402   }
20948                                           ! 2403  for(i=0;i<cheight;i++)
20949                       000051EB            .149:
20950                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
20951 51EB           30C0                       xor	al,al
20952 51ED           8846         FF            mov	-1[bp],al
20953                                           !BCC_EOS
20954                                           !BCC_EOS
20955                                           ! 2404   {
20956 51F0           E9         00A6            br 	.14C
20957                       000051F3            .14D:
20958                                           ! 2405    dest=addr+i*nbcols;
20959                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-3] (used reg = )
20960 51F3           8A46         0C            mov	al,$C[bp]
20961 51F6           30E4                       xor	ah,ah
20962 51F8           89C3                       mov	bx,ax
20963 51FA           8A46         FF            mov	al,-1[bp]
20964 51FD           30E4                       xor	ah,ah
20965 51FF           89D9                       mov	cx,bx
20966 5201           F7E9                       imul	cx
20967                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
20968                                           ! Debug: expression subtree swapping
20969 5203           0346         F8            add	ax,-8[bp]
20970                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
20971 5206           8946         F6            mov	-$A[bp],ax
20972                                           !BCC_EOS
20973                                           ! 2406    for(j=0;j<8;j++)
20974                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
20975 5209           30C0                       xor	al,al
20976 520B           8846         FE            mov	-2[bp],al
20977                                           !BCC_EOS
20978                                           !BCC_EOS
20979                                           ! 2407     {
20980 520E           EB           79            jmp .150
20981                       00005210            .151:
20982                                           ! 2408      mask=0x80>>j;
20983                                           ! Debug: sr unsigned char j = [S+$E-4] to int = const $80 (used reg = )
20984 5210           8A46         FE            mov	al,-2[bp]
20985 5213           30E4                       xor	ah,ah
20986 5215           89C3                       mov	bx,ax
20987 5217           B8                   0080  mov	ax,#$80
20988 521A           89D9                       mov	cx,bx
20989 521C           D3F8                       sar	ax,cl
20990                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$E-5] (used reg = )
20991 521E           8846         FD            mov	-3[bp],al
20992                                           !BCC_EOS
20993                                           ! 2409      outw(0x3ce, (mask << 8) | 0x08);
20994                                           ! Debug: sl int = const 8 to unsigned char mask = [S+$E-5] (used reg = )
20995 5221           8A46         FD            mov	al,-3[bp]
20996 5224           30E4                       xor	ah,ah
20997 5226           88C4                       mov	ah,al
20998 5228           30C0                       xor	al,al
20999                                           ! Debug: or int = const 8 to unsigned int = ax+0 (used reg = )
21000 522A           0C                     08  or	al,*8
21001                                           ! Debug: list unsigned int = ax+0 (used reg = )
21002 522C           50                         push	ax
21003                                           ! Debug: list int = const $3CE (used reg = )
21004 522D           B8                   03CE  mov	ax,#$3CE
21005 5230           50                         push	ax
21006                                           ! Debug: func () void = outw+0 (used reg = )
21007 5231           E8         29D8            call	_outw
21008 5234           83C4                   04  add	sp,*4
21009                                           !BCC_EOS
21010                                           ! 2410      read_byte(0xa000,dest);
21011                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
21012 5237           FF76         F6            push	-$A[bp]
21013                                           ! Debug: list unsigned int = const $A000 (used reg = )
21014 523A           B8                   A000  mov	ax,#$A000
21015 523D           50                         push	ax
21016                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21017 523E           E8         294F            call	_read_byte
21018 5241           83C4                   04  add	sp,*4
21019                                           !BCC_EOS
21020                                           ! 2411      if(fdata[src+i]&mask)
21021                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21022 5244           8B46         F4            mov	ax,-$C[bp]
21023 5247           0246         FF            add	al,-1[bp]
21024 524A           80D4                   00  adc	ah,*0
21025                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21026 524D           0346         FA            add	ax,-6[bp]
21027 5250           89C3                       mov	bx,ax
21028                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21029 5252           8A07                       mov	al,[bx]
21030 5254           2246         FD            and	al,-3[bp]
21031 5257           84C0                       test	al,al
21032 5259           74           17            je  	.152
21033                       0000525B            .153:
21034                                           ! 2412       {
21035                                           ! 2413        write_byte(0xa000,dest,attr&0x0f);
21036                                           ! Debug: and int = const $F to unsigned char attr = [S+$E+4] (used reg = )
21037 525B           8A46         06            mov	al,6[bp]
21038 525E           24                     0F  and	al,*$F
21039                                           ! Debug: list unsigned char = al+0 (used reg = )
21040 5260           30E4                       xor	ah,ah
21041 5262           50                         push	ax
21042                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
21043 5263           FF76         F6            push	-$A[bp]
21044                                           ! Debug: list unsigned int = const $A000 (used reg = )
21045 5266           B8                   A000  mov	ax,#$A000
21046 5269           50                         push	ax
21047                                           ! Debug: func () void = write_byte+0 (used reg = )
21048 526A           E8         2949            call	_write_byte
21049 526D           83C4                   06  add	sp,*6
21050                                           !BCC_EOS
21051                                           ! 2414       }
21052                                           ! 2415      else
21053                                           ! 2416       {
21054 5270           EB           10            jmp .154
21055                       00005272            .152:
21056                                           ! 2417        write_byte(0xa000,dest,0x00);
21057                                           ! Debug: list int = const 0 (used reg = )
21058 5272           31C0                       xor	ax,ax
21059 5274           50                         push	ax
21060                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
21061 5275           FF76         F6            push	-$A[bp]
21062                                           ! Debug: list unsigned int = const $A000 (used reg = )
21063 5278           B8                   A000  mov	ax,#$A000
21064 527B           50                         push	ax
21065                                           ! Debug: func () void = write_byte+0 (used reg = )
21066 527C           E8         2937            call	_write_byte
21067 527F           83C4                   06  add	sp,*6
21068                                           !BCC_EOS
21069                                           ! 2418       }
21070                                           ! 2419     }
21071                       00005282            .154:
21072                                           ! 2420   }
21073                       00005282            .14F:
21074                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21075 5282           8A46         FE            mov	al,-2[bp]
21076 5285           40                         inc	ax
21077 5286           8846         FE            mov	-2[bp],al
21078                       00005289            .150:
21079                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
21080 5289           8A46         FE            mov	al,-2[bp]
21081 528C           3C                     08  cmp	al,*8
21082 528E         0F82         FF7E            blo 	.151
21083                       00005292            .155:
21084                       00005292            .14E:
21085                                           ! 2421 #asm
21086                       00005292            .14B:
21087                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
21088 5292           8A46         FF            mov	al,-1[bp]
21089 5295           40                         inc	ax
21090 5296           8846         FF            mov	-1[bp],al
21091                       00005299            .14C:
21092                                           ! Debug: lt unsigned char cheight = [S+$E+$C] to unsigned char i = [S+$E-3] (used reg = )
21093 5299           8A46         FF            mov	al,-1[bp]
21094 529C           3A46         0E            cmp	al,$E[bp]
21095 529F         0F82         FF50            blo 	.14D
21096                       000052A3            .156:
21097                       000052A3            .14A:
21098                                           !BCC_EOS
21099                                           !BCC_ASM
21100                       0000000A            _write_gfx_char_pl4.j	set	$A
21101                       FFFFFFFE            .write_gfx_char_pl4.j	set	-2
21102                       00000006            _write_gfx_char_pl4.fdata	set	6
21103                       FFFFFFFA            .write_gfx_char_pl4.fdata	set	-6
21104                       0000001A            _write_gfx_char_pl4.cheight	set	$1A
21105                       0000000E            .write_gfx_char_pl4.cheight	set	$E
21106                       00000018            _write_gfx_char_pl4.nbcols	set	$18
21107                       0000000C            .write_gfx_char_pl4.nbcols	set	$C
21108                       0000000B            _write_gfx_char_pl4.i	set	$B
21109                       FFFFFFFF            .write_gfx_char_pl4.i	set	-1
21110                       00000016            _write_gfx_char_pl4.ycurs	set	$16
21111                       0000000A            .write_gfx_char_pl4.ycurs	set	$A
21112                       00000009            _write_gfx_char_pl4.mask	set	9
21113                       FFFFFFFD            .write_gfx_char_pl4.mask	set	-3
21114                       00000002            _write_gfx_char_pl4.dest	set	2
21115                       FFFFFFF6            .write_gfx_char_pl4.dest	set	-$A
21116                       00000014            _write_gfx_char_pl4.xcurs	set	$14
21117                       00000008            .write_gfx_char_pl4.xcurs	set	8
21118                       00000000            _write_gfx_char_pl4.src	set	0
21119                       FFFFFFF4            .write_gfx_char_pl4.src	set	-$C
21120                       00000012            _write_gfx_char_pl4.attr	set	$12
21121                       00000006            .write_gfx_char_pl4.attr	set	6
21122                       00000010            _write_gfx_char_pl4.car	set	$10
21123                       00000004            .write_gfx_char_pl4.car	set	4
21124                       00000004            _write_gfx_char_pl4.addr	set	4
21125                       FFFFFFF8            .write_gfx_char_pl4.addr	set	-8
21126 52A3           BA                   03CE    mov dx, # 0x3ce
21127 52A6           B8                   FF08    mov ax, #0xff08
21128 52A9           EF                           out dx, ax
21129 52AA           B8                   0005    mov ax, #0x0005
21130 52AD           EF                           out dx, ax
21131 52AE           B8                   0003    mov ax, #0x0003
21132 52B1           EF                           out dx, ax
21133                                           ! 2429 endasm
21134                                           !BCC_ENDASM
21135                                           !BCC_EOS
21136                                           ! 2430 }
21137 52B2           89EC                       mov	sp,bp
21138 52B4           5D                         pop	bp
21139 52B5           C3                         ret
21140                                           ! 2431 static void write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp)
21141                                           ! Register BX used in function write_gfx_char_pl4
21142                                           ! 2432 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;Bit8u bpp;
21143                       000052B6            _write_gfx_char_cga:
21144                                           !BCC_EOS
21145                                           !BCC_EOS
21146                                           !BCC_EOS
21147                                           !BCC_EOS
21148                                           !BCC_EOS
21149                                           !BCC_EOS
21150                                           ! 2433 {
21151                                           ! 2434  Bit8u i,j,mask,data;
21152                                           !BCC_EOS
21153                                           ! 2435  Bit8u *fdata;
21154                                           !BCC_EOS
21155                                           ! 2436  Bit16u add
21156                                           ! 2436 r,dest,src;
21157                                           !BCC_EOS
21158                                           ! 2437  fdata = &vgafont8;
21159 52B6           55                         push	bp
21160 52B7           89E5                       mov	bp,sp
21161 52B9           83C4                   F4  add	sp,*-$C
21162                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21163 52BC           BB                   0F61  mov	bx,#_vgafont8
21164 52BF           895E         FA            mov	-6[bp],bx
21165                                           !BCC_EOS
21166                                           ! 2438  addr=(xcurs*bpp)+ycurs*320;
21167                                           ! Debug: mul int = const $140 to unsigned char ycurs = [S+$E+8] (used reg = )
21168 52C2           8A46         0A            mov	al,$A[bp]
21169 52C5           30E4                       xor	ah,ah
21170 52C7           B9                   0140  mov	cx,#$140
21171 52CA           F7E9                       imul	cx
21172 52CC           50                         push	ax
21173                                           ! Debug: mul unsigned char bpp = [S+$10+$C] to unsigned char xcurs = [S+$10+6] (used reg = )
21174 52CD           8A46         0E            mov	al,$E[bp]
21175 52D0           30E4                       xor	ah,ah
21176 52D2           89C3                       mov	bx,ax
21177 52D4           8A46         08            mov	al,8[bp]
21178 52D7           30E4                       xor	ah,ah
21179 52D9           89D9                       mov	cx,bx
21180 52DB           F7E9                       imul	cx
21181                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
21182 52DD           0346         F2            add	ax,-$E[bp]
21183 52E0           44                         inc	sp
21184 52E1           44                         inc	sp
21185                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21186 52E2           8946         F8            mov	-8[bp],ax
21187                                           !BCC_EOS
21188                                           ! 2439  src = car * 8;
21189                                           ! Debug: mul int = const 8 to unsigned char car = [S+$E+2] (used reg = )
21190 52E5           8A46         04            mov	al,4[bp]
21191 52E8           30E4                       xor	ah,ah
21192 52EA           B1                     03  mov	cl,*3
21193 52EC           D3E0                       shl	ax,cl
21194                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
21195 52EE           8946         F4            mov	-$C[bp],ax
21196                                           !BCC_EOS
21197                                           ! 2440  for(i=0;i<8;i++)
21198                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
21199 52F1           30C0                       xor	al,al
21200 52F3           8846         FF            mov	-1[bp],al
21201                                           !BCC_EOS
21202                                           !BCC_EOS
21203                                           ! 2441   {
21204 52F6           E9         01B3            br 	.159
21205                       000052F9            .15A:
21206                                           ! 2442    dest=addr+(i>>1)*80;
21207                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-3] (used reg = )
21208 52F9           8A46         FF            mov	al,-1[bp]
21209 52FC           30E4                       xor	ah,ah
21210 52FE           D1E8                       shr	ax,*1
21211                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
21212 5300           B9                   0050  mov	cx,*$50
21213 5303           F7E9                       imul	cx
21214                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21215                                           ! Debug: expression subtree swapping
21216 5305           0346         F8            add	ax,-8[bp]
21217                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
21218 5308           8946         F6            mov	-$A[bp],ax
21219                                           !BCC_EOS
21220                                           ! 2443    if (i & 1) dest += 0x2000;
21221                                           ! Debug: and int = const 1 to unsigned char i = [S+$E-3] (used reg = )
21222 530B           8A46         FF            mov	al,-1[bp]
21223 530E           24                     01  and	al,*1
21224 5310           84C0                       test	al,al
21225 5312           74           09            je  	.15B
21226                       00005314            .15C:
21227                                           ! Debug: addab int = const $2000 to unsigned short dest = [S+$E-$C] (used reg = )
21228 5314           8B46         F6            mov	ax,-$A[bp]
21229 5317           05                   2000  add	ax,#$2000
21230 531A           8946         F6            mov	-$A[bp],ax
21231                                           !BCC_EOS
21232                                           ! 2444    mask = 0x80;
21233                       0000531D            .15B:
21234                                           ! Debug: eq int = const $80 to unsigned char mask = [S+$E-5] (used reg = )
21235 531D           B0                     80  mov	al,#$80
21236 531F           8846         FD            mov	-3[bp],al
21237                                           !BCC_EOS
21238                                           ! 2445    if (bpp == 1)
21239                                           ! Debug: logeq int = const 1 to unsigned char bpp = [S+$E+$C] (used reg = )
21240 5322           8A46         0E            mov	al,$E[bp]
21241 5325           3C                     01  cmp	al,*1
21242 5327         0F85         00B3            bne 	.15D
21243                       0000532B            .15E:
21244                                           ! 2446     {
21245                                           ! 2447      if (attr & 0x80)
21246                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21247 532B           8A46         06            mov	al,6[bp]
21248 532E           24                     80  and	al,#$80
21249 5330           84C0                       test	al,al
21250 5332           74           12            je  	.15F
21251                       00005334            .160:
21252                                           ! 2448       {
21253                                           ! 2449        data = read_byte(0xb800,dest);
21254                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
21255 5334           FF76         F6            push	-$A[bp]
21256                                           ! Debug: list unsigned int = const $B800 (used reg = )
21257 5337           B8                   B800  mov	ax,#$B800
21258 533A           50                         push	ax
21259                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21260 533B           E8         2852            call	_read_byte
21261 533E           83C4                   04  add	sp,*4
21262                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$E-6] (used reg = )
21263 5341           8846         FC            mov	-4[bp],al
21264                                           !BCC_EOS
21265                                           ! 2450       }
21266                                           ! 2451      else
21267                                           ! 2452       {
21268 5344           EB           05            jmp .161
21269                       00005346            .15F:
21270                                           ! 2453        data = 0x00;
21271                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
21272 5346           30C0                       xor	al,al
21273 5348           8846         FC            mov	-4[bp],al
21274                                           !BCC_EOS
21275                                           ! 2454       }
21276                                           ! 2455      for(j=0;j<8;j++)
21277                       0000534B            .161:
21278                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
21279 534B           30C0                       xor	al,al
21280 534D           8846         FE            mov	-2[bp],al
21281                                           !BCC_EOS
21282                                           !BCC_EOS
21283                                           ! 2456       {
21284 5350           EB           6F            jmp .164
21285                       00005352            .165:
21286                                           ! 2457        if (fdata[src+i] & mask)
21287                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21288 5352           8B46         F4            mov	ax,-$C[bp]
21289 5355           0246         FF            add	al,-1[bp]
21290 5358           80D4                   00  adc	ah,*0
21291                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21292 535B           0346         FA            add	ax,-6[bp]
21293 535E           89C3                       mov	bx,ax
21294                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21295 5360           8A07                       mov	al,[bx]
21296 5362           2246         FD            and	al,-3[bp]
21297 5365           84C0                       test	al,al
21298 5367           74           47            je  	.166
21299                       00005369            .167:
21300                                           ! 2458         {
21301                                           ! 2459          if (attr & 0x80)
21302                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21303 5369           8A46         06            mov	al,6[bp]
21304 536C           24                     80  and	al,#$80
21305 536E           84C0                       test	al,al
21306 5370           74           20            je  	.168
21307                       00005372            .169:
21308                                           ! 2460           {
21309                                           ! 2461            data ^= (attr & 0x01) << (7-j);
21310                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 7 (used reg = )
21311 5372           B8                   0007  mov	ax,*7
21312 5375           2A46         FE            sub	al,-2[bp]
21313 5378           80DC                   00  sbb	ah,*0
21314 537B           50                         push	ax
21315                                           ! Debug: and int = const 1 to unsigned char attr = [S+$10+4] (used reg = )
21316 537C           8A46         06            mov	al,6[bp]
21317 537F           24                     01  and	al,*1
21318                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21319 5381           30E4                       xor	ah,ah
21320 5383           8B4E         F2            mov	cx,-$E[bp]
21321 5386           D3E0                       shl	ax,cl
21322 5388           44                         inc	sp
21323 5389           44                         inc	sp
21324                                           ! Debug: eorab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21325 538A           3246         FC            xor	al,-4[bp]
21326 538D           8846         FC            mov	-4[bp],al
21327                                           !BCC_EOS
21328                                           ! 2462           }
21329                                           ! 2463          else
21330                                           ! 2464           {
21331 5390           EB           1E            jmp .16A
21332                       00005392            .168:
21333                                           ! 2465            data |= (attr & 0x01) << (7-j);
21334                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 7 (used reg = )
21335 5392           B8                   0007  mov	ax,*7
21336 5395           2A46         FE            sub	al,-2[bp]
21337 5398           80DC                   00  sbb	ah,*0
21338 539B           50                         push	ax
21339                                           ! Debug: and int = const 1 to unsigned char attr = [S+$10+4] (used reg = )
21340 539C           8A46         06            mov	al,6[bp]
21341 539F           24                     01  and	al,*1
21342                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21343 53A1           30E4                       xor	ah,ah
21344 53A3           8B4E         F2            mov	cx,-$E[bp]
21345 53A6           D3E0                       shl	ax,cl
21346 53A8           44                         inc	sp
21347 53A9           44                         inc	sp
21348                                           ! Debug: orab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21349 53AA           0A46         FC            or	al,-4[bp]
21350 53AD           8846         FC            mov	-4[bp],al
21351                                           !BCC_EOS
21352                                           ! 2466           }
21353                                           ! 2467         }
21354                       000053B0            .16A:
21355                                           ! 2468        mask >>= 1;
21356                       000053B0            .166:
21357                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
21358 53B0           8A46         FD            mov	al,-3[bp]
21359 53B3           30E4                       xor	ah,ah
21360 53B5           D1E8                       shr	ax,*1
21361 53B7           8846         FD            mov	-3[bp],al
21362                                           !BCC_EOS
21363                                           ! 2469       }
21364                                           ! 2470      write_byte(0xb800,dest,data);
21365                       000053BA            .163:
21366                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21367 53BA           8A46         FE            mov	al,-2[bp]
21368 53BD           40                         inc	ax
21369 53BE           8846         FE            mov	-2[bp],al
21370                       000053C1            .164:
21371                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
21372 53C1           8A46         FE            mov	al,-2[bp]
21373 53C4           3C                     08  cmp	al,*8
21374 53C6           72           8A            jb 	.165
21375                       000053C8            .16B:
21376                       000053C8            .162:
21377                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
21378 53C8           8A46         FC            mov	al,-4[bp]
21379 53CB           30E4                       xor	ah,ah
21380 53CD           50                         push	ax
21381                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
21382 53CE           FF76         F6            push	-$A[bp]
21383                                           ! Debug: list unsigned int = const $B800 (used reg = )
21384 53D1           B8                   B800  mov	ax,#$B800
21385 53D4           50                         push	ax
21386                                           ! Debug: func () void = write_byte+0 (used reg = )
21387 53D5           E8         27DE            call	_write_byte
21388 53D8           83C4                   06  add	sp,*6
21389                                           !BCC_EOS
21390                                           ! 2471     }
21391                                           ! 2472    else
21392                                           ! 2473     {
21393 53DB           E9         00C7            br 	.16C
21394                       000053DE            .15D:
21395                                           ! 2474      while (mask > 0)
21396                                           ! 2475       {
21397 53DE           E9         00BB            br 	.16E
21398                       000053E1            .16F:
21399                                           ! 2476        if (attr & 0x80)
21400                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21401 53E1           8A46         06            mov	al,6[bp]
21402 53E4           24                     80  and	al,#$80
21403 53E6           84C0                       test	al,al
21404 53E8           74           12            je  	.170
21405                       000053EA            .171:
21406                                           ! 2477         {
21407                                           ! 2478          data = read_byte(0xb800,dest);
21408                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
21409 53EA           FF76         F6            push	-$A[bp]
21410                                           ! Debug: list unsigned int = const $B800 (used reg = )
21411 53ED           B8                   B800  mov	ax,#$B800
21412 53F0           50                         push	ax
21413                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21414 53F1           E8         279C            call	_read_byte
21415 53F4           83C4                   04  add	sp,*4
21416                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$E-6] (used reg = )
21417 53F7           8846         FC            mov	-4[bp],al
21418                                           !BCC_EOS
21419                                           ! 2479         }
21420                                           ! 2480        else
21421                                           ! 2481         {
21422 53FA           EB           05            jmp .172
21423                       000053FC            .170:
21424                                           ! 2482          data = 0x00;
21425                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
21426 53FC           30C0                       xor	al,al
21427 53FE           8846         FC            mov	-4[bp],al
21428                                           !BCC_EOS
21429                                           ! 2483         }
21430                                           ! 2484        for(j=0;j<4;j++)
21431                       00005401            .172:
21432                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
21433 5401           30C0                       xor	al,al
21434 5403           8846         FE            mov	-2[bp],al
21435                                           !BCC_EOS
21436                                           !BCC_EOS
21437                                           ! 2485         {
21438 5406           EB           73            jmp .175
21439                       00005408            .176:
21440                                           ! 2486          if (fdata[src+i] & mask)
21441                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21442 5408           8B46         F4            mov	ax,-$C[bp]
21443 540B           0246         FF            add	al,-1[bp]
21444 540E           80D4                   00  adc	ah,*0
21445                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21446 5411           0346         FA            add	ax,-6[bp]
21447 5414           89C3                       mov	bx,ax
21448                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21449 5416           8A07                       mov	al,[bx]
21450 5418           2246         FD            and	al,-3[bp]
21451 541B           84C0                       test	al,al
21452 541D           74           4B            je  	.177
21453                       0000541F            .178:
21454                                           ! 2487           {
21455                                           ! 2488            if (attr & 0x80)
21456                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21457 541F           8A46         06            mov	al,6[bp]
21458 5422           24                     80  and	al,#$80
21459 5424           84C0                       test	al,al
21460 5426           74           22            je  	.179
21461                       00005428            .17A:
21462                                           ! 2489             {
21463                                           ! 2490              data ^= (attr & 0x03) << ((3-j)*2);
21464                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 3 (used reg = )
21465 5428           B8                   0003  mov	ax,*3
21466 542B           2A46         FE            sub	al,-2[bp]
21467 542E           80DC                   00  sbb	ah,*0
21468                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21469 5431           D1E0                       shl	ax,*1
21470 5433           50                         push	ax
21471                                           ! Debug: and int = const 3 to unsigned char attr = [S+$10+4] (used reg = )
21472 5434           8A46         06            mov	al,6[bp]
21473 5437           24                     03  and	al,*3
21474                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21475 5439           30E4                       xor	ah,ah
21476 543B           8B4E         F2            mov	cx,-$E[bp]
21477 543E           D3E0                       shl	ax,cl
21478 5440           44                         inc	sp
21479 5441           44                         inc	sp
21480                                           ! Debug: eorab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21481 5442           3246         FC            xor	al,-4[bp]
21482 5445           8846         FC            mov	-4[bp],al
21483                                           !BCC_EOS
21484                                           ! 2491             }
21485                                           ! 2492            else
21486                                           ! 2493             {
21487 5448           EB           20            jmp .17B
21488                       0000544A            .179:
21489                                           ! 2494              data |= (attr & 0x03) << ((3-j)*2);
21490                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 3 (used reg = )
21491 544A           B8                   0003  mov	ax,*3
21492 544D           2A46         FE            sub	al,-2[bp]
21493 5450           80DC                   00  sbb	ah,*0
21494                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21495 5453           D1E0                       shl	ax,*1
21496 5455           50                         push	ax
21497                                           ! Debug: and int = const 3 to unsigned char attr = [S+$10+4] (used reg = )
21498 5456           8A46         06            mov	al,6[bp]
21499 5459           24                     03  and	al,*3
21500                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21501 545B           30E4                       xor	ah,ah
21502 545D           8B4E         F2            mov	cx,-$E[bp]
21503 5460           D3E0                       shl	ax,cl
21504 5462           44                         inc	sp
21505 5463           44                         inc	sp
21506                                           ! Debug: orab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21507 5464           0A46         FC            or	al,-4[bp]
21508 5467           8846         FC            mov	-4[bp],al
21509                                           !BCC_EOS
21510                                           ! 2495             }
21511                                           ! 2496           }
21512                       0000546A            .17B:
21513                                           ! 2497          mask >>= 1;
21514                       0000546A            .177:
21515                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
21516 546A           8A46         FD            mov	al,-3[bp]
21517 546D           30E4                       xor	ah,ah
21518 546F           D1E8                       shr	ax,*1
21519 5471           8846         FD            mov	-3[bp],al
21520                                           !BCC_EOS
21521                                           ! 2498         }
21522                                           ! 2499        write_byte(0xb800,dest,data);
21523                       00005474            .174:
21524                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21525 5474           8A46         FE            mov	al,-2[bp]
21526 5477           40                         inc	ax
21527 5478           8846         FE            mov	-2[bp],al
21528                       0000547B            .175:
21529                                           ! Debug: lt int = const 4 to unsigned char j = [S+$E-4] (used reg = )
21530 547B           8A46         FE            mov	al,-2[bp]
21531 547E           3C                     04  cmp	al,*4
21532 5480           72           86            jb 	.176
21533                       00005482            .17C:
21534                       00005482            .173:
21535                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
21536 5482           8A46         FC            mov	al,-4[bp]
21537 5485           30E4                       xor	ah,ah
21538 5487           50                         push	ax
21539                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
21540 5488           FF76         F6            push	-$A[bp]
21541                                           ! Debug: list unsigned int = const $B800 (used reg = )
21542 548B           B8                   B800  mov	ax,#$B800
21543 548E           50                         push	ax
21544                                           ! Debug: func () void = write_byte+0 (used reg = )
21545 548F           E8         2724            call	_write_byte
21546 5492           83C4                   06  add	sp,*6
21547                                           !BCC_EOS
21548                                           ! 2500        dest += 1;
21549                                           ! Debug: addab int = const 1 to unsigned short dest = [S+$E-$C] (used reg = )
21550 5495           8B46         F6            mov	ax,-$A[bp]
21551 5498           40                         inc	ax
21552 5499           8946         F6            mov	-$A[bp],ax
21553                                           !BCC_EOS
21554                                           ! 2501       }
21555                                           ! 2502     }
21556                       0000549C            .16E:
21557                                           ! Debug: gt int = const 0 to unsigned char mask = [S+$E-5] (used reg = )
21558 549C           8A46         FD            mov	al,-3[bp]
21559 549F           84C0                       test	al,al
21560 54A1         0F85         FF3C            bne 	.16F
21561                       000054A5            .17D:
21562                       000054A5            .16D:
21563                                           ! 2503   }
21564                       000054A5            .16C:
21565                                           ! 2504 }
21566                       000054A5            .158:
21567                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
21568 54A5           8A46         FF            mov	al,-1[bp]
21569 54A8           40                         inc	ax
21570 54A9           8846         FF            mov	-1[bp],al
21571                       000054AC            .159:
21572                                           ! Debug: lt int = const 8 to unsigned char i = [S+$E-3] (used reg = )
21573 54AC           8A46         FF            mov	al,-1[bp]
21574 54AF           3C                     08  cmp	al,*8
21575 54B1         0F82         FE44            blo 	.15A
21576                       000054B5            .17E:
21577                       000054B5            .157:
21578 54B5           89EC                       mov	sp,bp
21579 54B7           5D                         pop	bp
21580 54B8           C3                         ret
21581                                           ! 2505 static void write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols)
21582                                           ! Register BX used in function write_gfx_char_cga
21583                                           ! 2506 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;
21584                       000054B9            _write_gfx_char_lin:
21585                                           !BCC_EOS
21586                                           !BCC_EOS
21587                                           !BCC_EOS
21588                                           !BCC_EOS
21589                                           !BCC_EOS
21590                                           ! 2507 {
21591                                           ! 2508  Bit8u i,j,mask,data;
21592                                           !BCC_EOS
21593                                           ! 2509  Bit8u *fdata;
21594                                           !BCC_EOS
21595                                           ! 2510  Bit16u addr,dest,src;
21596                                           !BCC_EOS
21597                                           ! 2511  fdata = &vgafont8;
21598 54B9           55                         push	bp
21599 54BA           89E5                       mov	bp,sp
21600 54BC           83C4                   F4  add	sp,*-$C
21601                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21602 54BF           BB                   0F61  mov	bx,#_vgafont8
21603 54C2           895E         FA            mov	-6[bp],bx
21604                                           !BCC_EOS
21605                                           ! 2512  addr=xcurs*8+ycurs*nbcols*64;
21606                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char ycurs = [S+$E+8] (used reg = )
21607 54C5           8A46         0C            mov	al,$C[bp]
21608 54C8           30E4                       xor	ah,ah
21609 54CA           89C3                       mov	bx,ax
21610 54CC           8A46         0A            mov	al,$A[bp]
21611 54CF           30E4                       xor	ah,ah
21612 54D1           89D9                       mov	cx,bx
21613 54D3           F7E9                       imul	cx
21614                                           ! Debug: mul int = const $40 to unsigned int = ax+0 (used reg = )
21615 54D5           B1                     06  mov	cl,*6
21616 54D7           D3E0                       shl	ax,cl
21617 54D9           50                         push	ax
21618                                           ! Debug: mul int = const 8 to unsigned char xcurs = [S+$10+6] (used reg = )
21619 54DA           8A46         08            mov	al,8[bp]
21620 54DD           30E4                       xor	ah,ah
21621 54DF           B1                     03  mov	cl,*3
21622 54E1           D3E0                       shl	ax,cl
21623                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
21624 54E3           0346         F2            add	ax,-$E[bp]
21625 54E6           44                         inc	sp
21626 54E7           44                         inc	sp
21627                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21628 54E8           8946         F8            mov	-8[bp],ax
21629                                           !BCC_EOS
21630                                           ! 2513  src = car * 8;
21631                                           ! Debug: mul int = const 8 to unsigned char car = [S+$E+2] (used reg = )
21632 54EB           8A46         04            mov	al,4[bp]
21633 54EE           30E4                       xor	ah,ah
21634 54F0           B1                     03  mov	cl,*3
21635 54F2           D3E0                       shl	ax,cl
21636                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
21637 54F4           8946         F4            mov	-$C[bp],ax
21638                                           !BCC_EOS
21639                                           ! 2514  for(i=0;i<8;i++)
21640                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
21641 54F7           30C0                       xor	al,al
21642 54F9           8846         FF            mov	-1[bp],al
21643                                           !BCC_EOS
21644                                           !BCC_EOS
21645                                           ! 2515   {
21646 54FC           E9         0081            br 	.181
21647                       000054FF            .182:
21648                                           ! 2516    dest=addr+i*nbcols*8;
21649                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-3] (used reg = )
21650 54FF           8A46         0C            mov	al,$C[bp]
21651 5502           30E4                       xor	ah,ah
21652 5504           89C3                       mov	bx,ax
21653 5506           8A46         FF            mov	al,-1[bp]
21654 5509           30E4                       xor	ah,ah
21655 550B           89D9                       mov	cx,bx
21656 550D           F7E9                       imul	cx
21657                                           ! Debug: mul int = const 8 to unsigned int = ax+0 (used reg = )
21658 550F           B1                     03  mov	cl,*3
21659 5511           D3E0                       shl	ax,cl
21660                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21661                                           ! Debug: expression subtree swapping
21662 5513           0346         F8            add	ax,-8[bp]
21663                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
21664 5516           8946         F6            mov	-$A[bp],ax
21665                                           !BCC_EOS
21666                                           ! 2517    mask = 0x80;
21667                                           ! Debug: eq int = const $80 to unsigned char mask = [S+$E-5] (used reg = )
21668 5519           B0                     80  mov	al,#$80
21669 551B           8846         FD            mov	-3[bp],al
21670                                           !BCC_EOS
21671                                           ! 2518    for(j=0;j<8;j++)
21672                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
21673 551E           30C0                       xor	al,al
21674 5520           8846         FE            mov	-2[bp],al
21675                                           !BCC_EOS
21676                                           !BCC_EOS
21677                                           ! 2519     {
21678 5523           EB           4D            jmp .185
21679                       00005525            .186:
21680                                           ! 2520      data = 0x00;
21681                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
21682 5525           30C0                       xor	al,al
21683 5527           8846         FC            mov	-4[bp],al
21684                                           !BCC_EOS
21685                                           ! 2521      if (fdata[src+i] & mask)
21686                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21687 552A           8B46         F4            mov	ax,-$C[bp]
21688 552D           0246         FF            add	al,-1[bp]
21689 5530           80D4                   00  adc	ah,*0
21690                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21691 5533           0346         FA            add	ax,-6[bp]
21692 5536           89C3                       mov	bx,ax
21693                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21694 5538           8A07                       mov	al,[bx]
21695 553A           2246         FD            and	al,-3[bp]
21696 553D           84C0                       test	al,al
21697 553F           74           06            je  	.187
21698                       00005541            .188:
21699                                           ! 2522       {
21700                                           ! 2523        data = attr;
21701                                           ! Debug: eq unsigned char attr = [S+$E+4] to unsigned char data = [S+$E-6] (used reg = )
21702 5541           8A46         06            mov	al,6[bp]
21703 5544           8846         FC            mov	-4[bp],al
21704                                           !BCC_EOS
21705                                           ! 2524       }
21706                                           ! 2525      write_byte(0xa000,dest+j,data);
21707                       00005547            .187:
21708                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
21709 5547           8A46         FC            mov	al,-4[bp]
21710 554A           30E4                       xor	ah,ah
21711 554C           50                         push	ax
21712                                           ! Debug: add unsigned char j = [S+$10-4] to unsigned short dest = [S+$10-$C] (used reg = )
21713 554D           8B46         F6            mov	ax,-$A[bp]
21714 5550           0246         FE            add	al,-2[bp]
21715 5553           80D4                   00  adc	ah,*0
21716                                           ! Debug: list unsigned int = ax+0 (used reg = )
21717 5556           50                         push	ax
21718                                           ! Debug: list unsigned int = const $A000 (used reg = )
21719 5557           B8                   A000  mov	ax,#$A000
21720 555A           50                         push	ax
21721                                           ! Debug: func () void = write_byte+0 (used reg = )
21722 555B           E8         2658            call	_write_byte
21723 555E           83C4                   06  add	sp,*6
21724                                           !BCC_EOS
21725                                           ! 2526      mask >>= 1;
21726                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
21727 5561           8A46         FD            mov	al,-3[bp]
21728 5564           30E4                       xor	ah,ah
21729 5566           D1E8                       shr	ax,*1
21730 5568           8846         FD            mov	-3[bp],al
21731                                           !BCC_EOS
21732                                           ! 2527     }
21733                                           ! 2528   }
21734                       0000556B            .184:
21735                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21736 556B           8A46         FE            mov	al,-2[bp]
21737 556E           40                         inc	ax
21738 556F           8846         FE            mov	-2[bp],al
21739                       00005572            .185:
21740                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
21741 5572           8A46         FE            mov	al,-2[bp]
21742 5575           3C                     08  cmp	al,*8
21743 5577           72           AC            jb 	.186
21744                       00005579            .189:
21745                       00005579            .183:
21746                                           ! 2529 }
21747                       00005579            .180:
21748                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
21749 5579           8A46         FF            mov	al,-1[bp]
21750 557C           40                         inc	ax
21751 557D           8846         FF            mov	-1[bp],al
21752                       00005580            .181:
21753                                           ! Debug: lt int = const 8 to unsigned char i = [S+$E-3] (used reg = )
21754 5580           8A46         FF            mov	al,-1[bp]
21755 5583           3C                     08  cmp	al,*8
21756 5585         0F82         FF76            blo 	.182
21757                       00005589            .18A:
21758                       00005589            .17F:
21759 5589           89EC                       mov	sp,bp
21760 558B           5D                         pop	bp
21761 558C           C3                         ret
21762                                           ! 2530 static void biosfn_write_char_attr (car,page,attr,count)
21763                                           ! Register BX used in function write_gfx_char_lin
21764                                           ! 2531 Bit8u car;Bit8u page;Bit8u attr;Bit16u count;
21765                       0000558D            _biosfn_write_char_attr:
21766                                           !BCC_EOS
21767                                           !BCC_EOS
21768                                           !BCC_EOS
21769                                           !BCC_EOS
21770                                           ! 2532 {
21771                                           ! 2533  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
21772                                           !BCC_EOS
21773                                           ! 2534  Bit16u nbcols,nbrows,address;
21774                                           !BCC_EOS
21775                                           ! 2535  Bit16u cursor,dummy;
21776                                           !BCC_EOS
21777                                           ! 2536  mode=read_byte(0x40,0x49);
21778 558D           55                         push	bp
21779 558E           89E5                       mov	bp,sp
21780 5590           83C4                   F0  add	sp,*-$10
21781                                           ! Debug: list int = const $49 (used reg = )
21782 5593           B8                   0049  mov	ax,*$49
21783 5596           50                         push	ax
21784                                           ! Debug: list int = const $40 (used reg = )
21785 5597           B8                   0040  mov	ax,*$40
21786 559A           50                         push	ax
21787                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21788 559B           E8         25F2            call	_read_byte
21789 559E           83C4                   04  add	sp,*4
21790                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
21791 55A1           8846         FC            mov	-4[bp],al
21792                                           !BCC_EOS
21793                                           ! 2537  line=find_vga_entry(mode);
21794                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
21795 55A4           8A46         FC            mov	al,-4[bp]
21796 55A7           30E4                       xor	ah,ah
21797 55A9           50                         push	ax
21798                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
21799 55AA           E8         24F7            call	_find_vga_entry
21800 55AD           44                         inc	sp
21801 55AE           44                         inc	sp
21802                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
21803 55AF           8846         FB            mov	-5[bp],al
21804                                           !BCC_EOS
21805                                           ! 2538  if(line==0xFF)return;
21806                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
21807 55B2           8A46         FB            mov	al,-5[bp]
21808 55B5           3C                     FF  cmp	al,#$FF
21809 55B7           75           04            jne 	.18B
21810                       000055B9            .18C:
21811 55B9           89EC                       mov	sp,bp
21812 55BB           5D                         pop	bp
21813 55BC           C3                         ret
21814                                           !BCC_EOS
21815                                           ! 2539  biosfn_get_cursor_pos(page,&dummy,&cursor);
21816                       000055BD            .18B:
21817                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
21818 55BD           8D5E         F2            lea	bx,-$E[bp]
21819 55C0           53                         push	bx
21820                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
21821 55C1           8D5E         F0            lea	bx,-$10[bp]
21822 55C4           53                         push	bx
21823                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
21824 55C5           8A46         06            mov	al,6[bp]
21825 55C8           30E4                       xor	ah,ah
21826 55CA           50                         push	ax
21827                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
21828 55CB           E8         EE7C            call	_biosfn_get_cursor_pos
21829 55CE           83C4                   06  add	sp,*6
21830                                           !BCC_EOS
21831                                           ! 2540  xcurs=cursor&0x00ff;
21832                                           ! 2540 ycurs=(cursor&0xff00)>>8;
21833                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
21834 55D1           8A46         F2            mov	al,-$E[bp]
21835                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
21836 55D4           8846         FE            mov	-2[bp],al
21837                                           !BCC_EOS
21838                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
21839 55D7           8B46         F2            mov	ax,-$E[bp]
21840 55DA           30C0                       xor	al,al
21841                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
21842 55DC           88E0                       mov	al,ah
21843 55DE           30E4                       xor	ah,ah
21844                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
21845 55E0           8846         FD            mov	-3[bp],al
21846                                           !BCC_EOS
21847                                           ! 2541  nbrows=read_byte(0x40,0x84)+1;
21848                                           ! Debug: list int = const $84 (used reg = )
21849 55E3           B8                   0084  mov	ax,#$84
21850 55E6           50                         push	ax
21851                                           ! Debug: list int = const $40 (used reg = )
21852 55E7           B8                   0040  mov	ax,*$40
21853 55EA           50                         push	ax
21854                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21855 55EB           E8         25A2            call	_read_byte
21856 55EE           83C4                   04  add	sp,*4
21857                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
21858 55F1           30E4                       xor	ah,ah
21859                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
21860 55F3           40                         inc	ax
21861 55F4           8946         F6            mov	-$A[bp],ax
21862                                           !BCC_EOS
21863                                           ! 2542  nbcols=read_word(0x40,0x4A);
21864                                           ! Debug: list int = const $4A (used reg = )
21865 55F7           B8                   004A  mov	ax,*$4A
21866 55FA           50                         push	ax
21867                                           ! Debug: list int = const $40 (used reg = )
21868 55FB           B8                   0040  mov	ax,*$40
21869 55FE           50                         push	ax
21870                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
21871 55FF           E8         25A1            call	_read_word
21872 5602           83C4                   04  add	sp,*4
21873                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
21874 5605           8946         F8            mov	-8[bp],ax
21875                                           !BCC_EOS
21876                                           ! 2543  if(vga_modes[line].class==0x00)
21877                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
21878 5608           8A46         FB            mov	al,-5[bp]
21879 560B           30E4                       xor	ah,ah
21880 560D           B1                     03  mov	cl,*3
21881 560F           D3E0                       shl	ax,cl
21882 5611           89C3                       mov	bx,ax
21883 5613           81C3                 01FD  add	bx,#_vga_modes
21884                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
21885 5617           8A47         01            mov	al,1[bx]
21886 561A           84C0                       test	al,al
21887 561C         0F85         006A            bne 	.18D
21888                       00005620            .18E:
21889                                           ! 2544   {
21890                                           ! 2545    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
21891                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
21892 5620           8A46         FD            mov	al,-3[bp]
21893 5623           30E4                       xor	ah,ah
21894 5625           8B4E         F8            mov	cx,-8[bp]
21895 5628           F7E9                       imul	cx
21896                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
21897                                           ! Debug: expression subtree swapping
21898 562A           0246         FE            add	al,-2[bp]
21899 562D           80D4                   00  adc	ah,*0
21900                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21901 5630           D1E0                       shl	ax,*1
21902 5632           50                         push	ax
21903                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
21904 5633           8B46         F8            mov	ax,-8[bp]
21905 5636           8B4E         F6            mov	cx,-$A[bp]
21906 5639           F7E9                       imul	cx
21907                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21908 563B           D1E0                       shl	ax,*1
21909                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
21910 563D           0C                     FF  or	al,#$FF
21911                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
21912                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
21913 563F           89C3                       mov	bx,ax
21914 5641           8A46         06            mov	al,6[bp]
21915 5644           30E4                       xor	ah,ah
21916 5646           93                         xchg	ax,bx
21917 5647           40                         inc	ax
21918 5648           89D9                       mov	cx,bx
21919 564A           F7E9                       imul	cx
21920                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
21921 564C           0346         EE            add	ax,-$12[bp]
21922 564F           44                         inc	sp
21923 5650           44                         inc	sp
21924                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
21925 5651           8946         F4            mov	-$C[bp],ax
21926                                           !BCC_EOS
21927                                           ! 2546    dummy=((Bit16u)attr<<8)+car;
21928                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+6] (used reg = )
21929 5654           8A46         08            mov	al,8[bp]
21930 5657           30E4                       xor	ah,ah
21931                                           ! Debug: sl int = const 8 to unsigned short = ax+0 (used reg = )
21932 5659           88C4                       mov	ah,al
21933 565B           30C0                       xor	al,al
21934                                           ! Debug: add unsigned char car = [S+$12+2] to unsigned int = ax+0 (used reg = )
21935 565D           0246         04            add	al,4[bp]
21936 5660           80D4                   00  adc	ah,*0
21937                                           ! Debug: eq unsigned int = ax+0 to unsigned short dummy = [S+$12-$12] (used reg = )
21938 5663           8946         F0            mov	-$10[bp],ax
21939                                           !BCC_EOS
21940                                           ! 2547    memsetw(vga_modes[line].sstart,address,dummy,count);
21941                                           ! Debug: list unsigned short count = [S+$12+8] (used reg = )
21942 5666           FF76         0A            push	$A[bp]
21943                                           ! Debug: list unsigned short dummy = [S+$14-$12] (used reg = )
21944 5669           FF76         F0            push	-$10[bp]
21945                                           ! Debug: list unsigned short address = [S+$16-$E] (used reg = )
21946 566C           FF76         F4            push	-$C[bp]
21947                                           ! Debug: ptradd unsigned char line = [S+$18-7] to [$10] struct  = vga_modes+0 (used reg = )
21948 566F           8A46         FB            mov	al,-5[bp]
21949 5672           30E4                       xor	ah,ah
21950 5674           B1                     03  mov	cl,*3
21951 5676           D3E0                       shl	ax,cl
21952 5678           89C3                       mov	bx,ax
21953 567A           81C3                 01FD  add	bx,#_vga_modes
21954                                           ! Debug: list unsigned short = [bx+4] (used reg = )
21955 567E           FF77         04            push	4[bx]
21956                                           ! Debug: func () void = memsetw+0 (used reg = )
21957 5681           E8         2487            call	_memsetw
21958 5684           83C4                   08  add	sp,*8
21959                                           !BCC_EOS
21960                                           ! 2548   }
21961                                           ! 2549  else
21962                                           ! 2550   {
21963 5687           E9         00F4            br 	.18F
21964                       0000568A            .18D:
21965                                           ! 2551    cheight=video_param_table[line_to_vpti[line]].cheight;
21966                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] unsigned char = line_to_vpti+0 (used reg = )
21967 568A           8A46         FB            mov	al,-5[bp]
21968 568D           30E4                       xor	ah,ah
21969 568F           89C3                       mov	bx,ax
21970                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
21971 5691           8A87       027D            mov	al,_line_to_vpti[bx]
21972 5695           30E4                       xor	ah,ah
21973 5697           B1                     06  mov	cl,*6
21974 5699           D3E0                       shl	ax,cl
21975 569B           89C3                       mov	bx,ax
21976 569D           81C3                 0291  add	bx,#_video_param_table
21977                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$12-3] (used reg = )
21978 56A1           8A47         02            mov	al,2[bx]
21979 56A4           8846         FF            mov	-1[bp],al
21980                                           !BCC_EOS
21981                                           ! 2552    bpp=vga_modes[line].pixbits;
21982                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
21983 56A7           8A46         FB            mov	al,-5[bp]
21984 56AA           30E4                       xor	ah,ah
21985 56AC           B1                     03  mov	cl,*3
21986 56AE           D3E0                       shl	ax,cl
21987 56B0           89C3                       mov	bx,ax
21988 56B2           81C3                 01FD  add	bx,#_vga_modes
21989                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
21990 56B6           8A47         03            mov	al,3[bx]
21991 56B9           8846         FA            mov	-6[bp],al
21992                                           !BCC_EOS
21993                                           ! 2553    while((count-->0) && (xcurs<nbcols))
21994                                           ! 2554     {
21995 56BC           E9         00A7            br 	.191
21996                       000056BF            .192:
21997                                           ! 2555      switch(vga_modes[line].memmodel)
21998                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
21999 56BF           8A46         FB            mov	al,-5[bp]
22000 56C2           30E4                       xor	ah,ah
22001 56C4           B1                     03  mov	cl,*3
22002 56C6           D3E0                       shl	ax,cl
22003 56C8           89C3                       mov	bx,ax
22004 56CA           81C3                 01FD  add	bx,#_vga_modes
22005 56CE           8A47         02            mov	al,2[bx]
22006                                           ! 2556       {
22007 56D1           EB           78            jmp .195
22008                                           ! 2557        case 0x04:
22009                                           ! 2558        case 0x03:
22010                       000056D3            .196:
22011                                           ! 2559          write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight);
22012                       000056D3            .197:
22013                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
22014 56D3           8A46         FF            mov	al,-1[bp]
22015 56D6           30E4                       xor	ah,ah
22016 56D8           50                         push	ax
22017                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
22018 56D9           FF76         F8            push	-8[bp]
22019                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
22020 56DC           8A46         FD            mov	al,-3[bp]
22021 56DF           30E4                       xor	ah,ah
22022 56E1           50                         push	ax
22023                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
22024 56E2           8A46         FE            mov	al,-2[bp]
22025 56E5           30E4                       xor	ah,ah
22026 56E7           50                         push	ax
22027                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
22028 56E8           8A46         08            mov	al,8[bp]
22029 56EB           30E4                       xor	ah,ah
22030 56ED           50                         push	ax
22031                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
22032 56EE           8A46         04            mov	al,4[bp]
22033 56F1           30E4                       xor	ah,ah
22034 56F3           50                         push	ax
22035                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
22036 56F4           E8         FA4C            call	_write_gfx_char_pl4
22037 56F7           83C4                   0C  add	sp,*$C
22038                                           !BCC_EOS
22039                                           ! 2560          break;
22040 56FA           E9         0062            br 	.193
22041                                           !BCC_EOS
22042                                           ! 2561        case 0x02:
22043                                           ! 2562          write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp);
22044                       000056FD            .198:
22045                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
22046 56FD           8A46         FA            mov	al,-6[bp]
22047 5700           30E4                       xor	ah,ah
22048 5702           50                         push	ax
22049                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
22050 5703           FF76         F8            push	-8[bp]
22051                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
22052 5706           8A46         FD            mov	al,-3[bp]
22053 5709           30E4                       xor	ah,ah
22054 570B           50                         push	ax
22055                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
22056 570C           8A46         FE            mov	al,-2[bp]
22057 570F           30E4                       xor	ah,ah
22058 5711           50                         push	ax
22059                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
22060 5712           8A46         08            mov	al,8[bp]
22061 5715           30E4                       xor	ah,ah
22062 5717           50                         push	ax
22063                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
22064 5718           8A46         04            mov	al,4[bp]
22065 571B           30E4                       xor	ah,ah
22066 571D           50                         push	ax
22067                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
22068 571E           E8         FB95            call	_write_gfx_char_cga
22069 5721           83C4                   0C  add	sp,*$C
22070                                           !BCC_EOS
22071                                           ! 2563          break;
22072 5724           EB           39            jmp .193
22073                                           !BCC_EOS
22074                                           ! 2564        case 0x05:
22075                                           ! 2565          write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
22076                       00005726            .199:
22077                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
22078 5726           FF76         F8            push	-8[bp]
22079                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
22080 5729           8A46         FD            mov	al,-3[bp]
22081 572C           30E4                       xor	ah,ah
22082 572E           50                         push	ax
22083                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
22084 572F           8A46         FE            mov	al,-2[bp]
22085 5732           30E4                       xor	ah,ah
22086 5734           50                         push	ax
22087                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
22088 5735           8A46         08            mov	al,8[bp]
22089 5738           30E4                       xor	ah,ah
22090 573A           50                         push	ax
22091                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
22092 573B           8A46         04            mov	al,4[bp]
22093 573E           30E4                       xor	ah,ah
22094 5740           50                         push	ax
22095                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
22096 5741           E8         FD75            call	_write_gfx_char_lin
22097 5744           83C4                   0A  add	sp,*$A
22098                                           !BCC_EOS
22099                                           ! 2566          break;
22100 5747           EB           16            jmp .193
22101                                           !BCC_EOS
22102                                           ! 2567       }
22103                                           ! 2568      xcurs++;
22104 5749           EB           14            jmp .193
22105                       0000574B            .195:
22106 574B           2C                     02  sub	al,*2
22107 574D           74           AE            je 	.198
22108 574F           2C                     01  sub	al,*1
22109 5751         0F84         FF7E            beq 	.197
22110 5755           2C                     01  sub	al,*1
22111 5757         0F84         FF78            beq 	.196
22112 575B           2C                     01  sub	al,*1
22113 575D           74           C7            je 	.199
22114                       0000575F            .193:
22115                       FFFFFFEE            ..FFFA	=	-$12
22116                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
22117 575F           8A46         FE            mov	al,-2[bp]
22118 5762           40                         inc	ax
22119 5763           8846         FE            mov	-2[bp],al
22120                                           !BCC_EOS
22121                                           ! 2569     }
22122                                           ! 2570   }
22123                       00005766            .191:
22124                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
22125 5766           8B46         0A            mov	ax,$A[bp]
22126 5769           48                         dec	ax
22127 576A           8946         0A            mov	$A[bp],ax
22128                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
22129 576D           3D                   FFFF  cmp	ax,*-1
22130 5770           74           0C            je  	.19A
22131                       00005772            .19B:
22132                                           ! Debug: lt unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
22133 5772           8A46         FE            mov	al,-2[bp]
22134 5775           30E4                       xor	ah,ah
22135 5777           3B46         F8            cmp	ax,-8[bp]
22136 577A         0F82         FF41            blo 	.192
22137                       0000577E            .19A:
22138                       0000577E            .190:
22139                                           ! 2571 }
22140                       0000577E            .18F:
22141 577E           89EC                       mov	sp,bp
22142 5780           5D                         pop	bp
22143 5781           C3                         ret
22144                                           ! 2572 static void biosfn_write_char_only (car,page,attr,count)
22145                                           ! Register BX used in function biosfn_write_char_attr
22146                                           ! 2573 Bit8u car;Bit8u page;Bit8u attr;Bit16u count;
22147                       00005782            _biosfn_write_char_only:
22148                                           !BCC_EOS
22149                                           !BCC_EOS
22150                                           !BCC_EOS
22151                                           !BCC_EOS
22152                                           ! 2574 {
22153                                           ! 2575  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
22154                                           !BCC_EOS
22155                                           ! 2576  Bit16u nbcols,nbrows,address;
22156                                           !BCC_EOS
22157                                           ! 2577  Bit16u cursor,dummy;
22158                                           !BCC_EOS
22159                                           ! 2578  mode=read_byte(0x40,0x49);
22160 5782           55                         push	bp
22161 5783           89E5                       mov	bp,sp
22162 5785           83C4                   F0  add	sp,*-$10
22163                                           ! Debug: list int = const $49 (used reg = )
22164 5788           B8                   0049  mov	ax,*$49
22165 578B           50                         push	ax
22166                                           ! Debug: list int = const $40 (used reg = )
22167 578C           B8                   0040  mov	ax,*$40
22168 578F           50                         push	ax
22169                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22170 5790           E8         23FD            call	_read_byte
22171 5793           83C4                   04  add	sp,*4
22172                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
22173 5796           8846         FC            mov	-4[bp],al
22174                                           !BCC_EOS
22175                                           ! 2579  line=find_vga_entry(mode);
22176                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
22177 5799           8A46         FC            mov	al,-4[bp]
22178 579C           30E4                       xor	ah,ah
22179 579E           50                         push	ax
22180                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
22181 579F           E8         2302            call	_find_vga_entry
22182 57A2           44                         inc	sp
22183 57A3           44                         inc	sp
22184                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
22185 57A4           8846         FB            mov	-5[bp],al
22186                                           !BCC_EOS
22187                                           ! 2580  if(line==0xFF)return;
22188                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
22189 57A7           8A46         FB            mov	al,-5[bp]
22190 57AA           3C                     FF  cmp	al,#$FF
22191 57AC           75           04            jne 	.19C
22192                       000057AE            .19D:
22193 57AE           89EC                       mov	sp,bp
22194 57B0           5D                         pop	bp
22195 57B1           C3                         ret
22196                                           !BCC_EOS
22197                                           ! 2581  biosfn_get_cursor_pos(page,&dummy,&cursor);
22198                       000057B2            .19C:
22199                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
22200 57B2           8D5E         F2            lea	bx,-$E[bp]
22201 57B5           53                         push	bx
22202                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
22203 57B6           8D5E         F0            lea	bx,-$10[bp]
22204 57B9           53                         push	bx
22205                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
22206 57BA           8A46         06            mov	al,6[bp]
22207 57BD           30E4                       xor	ah,ah
22208 57BF           50                         push	ax
22209                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
22210 57C0           E8         EC87            call	_biosfn_get_cursor_pos
22211 57C3           83C4                   06  add	sp,*6
22212                                           !BCC_EOS
22213                                           ! 2582  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
22214                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
22215 57C6           8A46         F2            mov	al,-$E[bp]
22216                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
22217 57C9           8846         FE            mov	-2[bp],al
22218                                           !BCC_EOS
22219                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
22220 57CC           8B46         F2            mov	ax,-$E[bp]
22221 57CF           30C0                       xor	al,al
22222                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
22223 57D1           88E0                       mov	al,ah
22224 57D3           30E4                       xor	ah,ah
22225                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
22226 57D5           8846         FD            mov	-3[bp],al
22227                                           !BCC_EOS
22228                                           ! 2583  nbrows=read_byte(0x40,0x84)+1;
22229                                           ! Debug: list int = const $84 (used reg = )
22230 57D8           B8                   0084  mov	ax,#$84
22231 57DB           50                         push	ax
22232                                           ! Debug: list int = const $40 (used reg = )
22233 57DC           B8                   0040  mov	ax,*$40
22234 57DF           50                         push	ax
22235                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22236 57E0           E8         23AD            call	_read_byte
22237 57E3           83C4                   04  add	sp,*4
22238                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
22239 57E6           30E4                       xor	ah,ah
22240                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
22241 57E8           40                         inc	ax
22242 57E9           8946         F6            mov	-$A[bp],ax
22243                                           !BCC_EOS
22244                                           ! 2584  nbcols=read_word(0x40,0x4A);
22245                                           ! Debug: list int = const $4A (used reg = )
22246 57EC           B8                   004A  mov	ax,*$4A
22247 57EF           50                         push	ax
22248                                           ! Debug: list int = const $40 (used reg = )
22249 57F0           B8                   0040  mov	ax,*$40
22250 57F3           50                         push	ax
22251                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
22252 57F4           E8         23AC            call	_read_word
22253 57F7           83C4                   04  add	sp,*4
22254                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
22255 57FA           8946         F8            mov	-8[bp],ax
22256                                           !BCC_EOS
22257                                           ! 2585  if(vga_modes[line].class==0x00)
22258                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
22259 57FD           8A46         FB            mov	al,-5[bp]
22260 5800           30E4                       xor	ah,ah
22261 5802           B1                     03  mov	cl,*3
22262 5804           D3E0                       shl	ax,cl
22263 5806           89C3                       mov	bx,ax
22264 5808           81C3                 01FD  add	bx,#_vga_modes
22265                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
22266 580C           8A47         01            mov	al,1[bx]
22267 580F           84C0                       test	al,al
22268 5811           75           6E            jne 	.19E
22269                       00005813            .19F:
22270                                           ! 2586   {
22271                                           ! 2587    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
22272                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
22273 5813           8A46         FD            mov	al,-3[bp]
22274 5816           30E4                       xor	ah,ah
22275 5818           8B4E         F8            mov	cx,-8[bp]
22276 581B           F7E9                       imul	cx
22277                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
22278                                           ! Debug: expression subtree swapping
22279 581D           0246         FE            add	al,-2[bp]
22280 5820           80D4                   00  adc	ah,*0
22281                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22282 5823           D1E0                       shl	ax,*1
22283 5825           50                         push	ax
22284                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
22285 5826           8B46         F8            mov	ax,-8[bp]
22286 5829           8B4E         F6            mov	cx,-$A[bp]
22287 582C           F7E9                       imul	cx
22288                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22289 582E           D1E0                       shl	ax,*1
22290                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
22291 5830           0C                     FF  or	al,#$FF
22292                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
22293                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
22294 5832           89C3                       mov	bx,ax
22295 5834           8A46         06            mov	al,6[bp]
22296 5837           30E4                       xor	ah,ah
22297 5839           93                         xchg	ax,bx
22298 583A           40                         inc	ax
22299 583B           89D9                       mov	cx,bx
22300 583D           F7E9                       imul	cx
22301                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
22302 583F           0346         EE            add	ax,-$12[bp]
22303 5842           44                         inc	sp
22304 5843           44                         inc	sp
22305                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
22306 5844           8946         F4            mov	-$C[bp],ax
22307                                           !BCC_EOS
22308                                           ! 2588    while(count-->0)
22309                                           ! 2589     {write_byte(vga_modes[line].sstart,address,car);
22310 5847           EB           29            jmp .1A1
22311                       00005849            .1A2:
22312                                           ! Debug: list unsigned char car = [S+$12+2] (used reg = )
22313 5849           8A46         04            mov	al,4[bp]
22314 584C           30E4                       xor	ah,ah
22315 584E           50                         push	ax
22316                                           ! Debug: list unsigned short address = [S+$14-$E] (used reg = )
22317 584F           FF76         F4            push	-$C[bp]
22318                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$10] struct  = vga_modes+0 (used reg = )
22319 5852           8A46         FB            mov	al,-5[bp]
22320 5855           30E4                       xor	ah,ah
22321 5857           B1                     03  mov	cl,*3
22322 5859           D3E0                       shl	ax,cl
22323 585B           89C3                       mov	bx,ax
22324 585D           81C3                 01FD  add	bx,#_vga_modes
22325                                           ! Debug: list unsigned short = [bx+4] (used reg = )
22326 5861           FF77         04            push	4[bx]
22327                                           ! Debug: func () void = write_byte+0 (used reg = )
22328 5864           E8         234F            call	_write_byte
22329 5867           83C4                   06  add	sp,*6
22330                                           !BCC_EOS
22331                                           ! 2590      address+=2;
22332                                           ! Debug: addab int = const 2 to unsigned short address = [S+$12-$E] (used reg = )
22333 586A           8B46         F4            mov	ax,-$C[bp]
22334 586D           40                         inc	ax
22335 586E           40                         inc	ax
22336 586F           8946         F4            mov	-$C[bp],ax
22337                                           !BCC_EOS
22338                                           ! 2591     }
22339                                           ! 2592   }
22340                       00005872            .1A1:
22341                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
22342 5872           8B46         0A            mov	ax,$A[bp]
22343 5875           48                         dec	ax
22344 5876           8946         0A            mov	$A[bp],ax
22345                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
22346 5879           3D                   FFFF  cmp	ax,*-1
22347 587C           75           CB            jne	.1A2
22348                       0000587E            .1A3:
22349                       0000587E            .1A0:
22350                                           ! 2593  else
22351                                           ! 2594   {
22352 587E           E9         00F3            br 	.1A4
22353                       00005881            .19E:
22354                                           ! 2595    cheight=video_param_table[line_to_vpti[line]].cheight;
22355                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] unsigned char = line_to_vpti+0 (used reg = )
22356 5881           8A46         FB            mov	al,-5[bp]
22357 5884           30E4                       xor	ah,ah
22358 5886           89C3                       mov	bx,ax
22359                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
22360 5888           8A87       027D            mov	al,_line_to_vpti[bx]
22361 588C           30E4                       xor	ah,ah
22362 588E           B1                     06  mov	cl,*6
22363 5890           D3E0                       shl	ax,cl
22364 5892           89C3                       mov	bx,ax
22365 5894           81C3                 0291  add	bx,#_video_param_table
22366                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$12-3] (used reg = )
22367 5898           8A47         02            mov	al,2[bx]
22368 589B           8846         FF            mov	-1[bp],al
22369                                           !BCC_EOS
22370                                           ! 2596    bpp=vga_modes[line].pixbits;
22371                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
22372 589E           8A46         FB            mov	al,-5[bp]
22373 58A1           30E4                       xor	ah,ah
22374 58A3           B1                     03  mov	cl,*3
22375 58A5           D3E0                       shl	ax,cl
22376 58A7           89C3                       mov	bx,ax
22377 58A9           81C3                 01FD  add	bx,#_vga_modes
22378                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
22379 58AD           8A47         03            mov	al,3[bx]
22380 58B0           8846         FA            mov	-6[bp],al
22381                                           !BCC_EOS
22382                                           ! 2597    while((count-->0) && (xcurs<nbcols))
22383                                           ! 2598     {
22384 58B3           E9         00A6            br 	.1A6
22385                       000058B6            .1A7:
22386                                           ! 2599      switch(vga_modes[line].memmodel)
22387                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
22388 58B6           8A46         FB            mov	al,-5[bp]
22389 58B9           30E4                       xor	ah,ah
22390 58BB           B1                     03  mov	cl,*3
22391 58BD           D3E0                       shl	ax,cl
22392 58BF           89C3                       mov	bx,ax
22393 58C1           81C3                 01FD  add	bx,#_vga_modes
22394 58C5           8A47         02            mov	al,2[bx]
22395                                           ! 2600       {
22396 58C8           EB           77            jmp .1AA
22397                                           ! 2601        case 0x04:
22398                                           ! 2602        case 0x03:
22399                       000058CA            .1AB:
22400                                           ! 2603          write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight);
22401                       000058CA            .1AC:
22402                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
22403 58CA           8A46         FF            mov	al,-1[bp]
22404 58CD           30E4                       xor	ah,ah
22405 58CF           50                         push	ax
22406                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
22407 58D0           FF76         F8            push	-8[bp]
22408                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
22409 58D3           8A46         FD            mov	al,-3[bp]
22410 58D6           30E4                       xor	ah,ah
22411 58D8           50                         push	ax
22412                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
22413 58D9           8A46         FE            mov	al,-2[bp]
22414 58DC           30E4                       xor	ah,ah
22415 58DE           50                         push	ax
22416                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
22417 58DF           8A46         08            mov	al,8[bp]
22418 58E2           30E4                       xor	ah,ah
22419 58E4           50                         push	ax
22420                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
22421 58E5           8A46         04            mov	al,4[bp]
22422 58E8           30E4                       xor	ah,ah
22423 58EA           50                         push	ax
22424                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
22425 58EB           E8         F855            call	_write_gfx_char_pl4
22426 58EE           83C4                   0C  add	sp,*$C
22427                                           !BCC_EOS
22428                                           ! 2604          break;
22429 58F1           EB           62            jmp .1A8
22430                                           !BCC_EOS
22431                                           ! 2605        case 0x02:
22432                                           ! 2606          write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp);
22433                       000058F3            .1AD:
22434                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
22435 58F3           8A46         FA            mov	al,-6[bp]
22436 58F6           30E4                       xor	ah,ah
22437 58F8           50                         push	ax
22438                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
22439 58F9           FF76         F8            push	-8[bp]
22440                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
22441 58FC           8A46         FD            mov	al,-3[bp]
22442 58FF           30E4                       xor	ah,ah
22443 5901           50                         push	ax
22444                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
22445 5902           8A46         FE            mov	al,-2[bp]
22446 5905           30E4                       xor	ah,ah
22447 5907           50                         push	ax
22448                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
22449 5908           8A46         08            mov	al,8[bp]
22450 590B           30E4                       xor	ah,ah
22451 590D           50                         push	ax
22452                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
22453 590E           8A46         04            mov	al,4[bp]
22454 5911           30E4                       xor	ah,ah
22455 5913           50                         push	ax
22456                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
22457 5914           E8         F99F            call	_write_gfx_char_cga
22458 5917           83C4                   0C  add	sp,*$C
22459                                           !BCC_EOS
22460                                           ! 2607          break;
22461 591A           EB           39            jmp .1A8
22462                                           !BCC_EOS
22463                                           ! 2608        case 0x05:
22464                                           ! 2609          write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
22465                       0000591C            .1AE:
22466                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
22467 591C           FF76         F8            push	-8[bp]
22468                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
22469 591F           8A46         FD            mov	al,-3[bp]
22470 5922           30E4                       xor	ah,ah
22471 5924           50                         push	ax
22472                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
22473 5925           8A46         FE            mov	al,-2[bp]
22474 5928           30E4                       xor	ah,ah
22475 592A           50                         push	ax
22476                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
22477 592B           8A46         08            mov	al,8[bp]
22478 592E           30E4                       xor	ah,ah
22479 5930           50                         push	ax
22480                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
22481 5931           8A46         04            mov	al,4[bp]
22482 5934           30E4                       xor	ah,ah
22483 5936           50                         push	ax
22484                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
22485 5937           E8         FB7F            call	_write_gfx_char_lin
22486 593A           83C4                   0A  add	sp,*$A
22487                                           !BCC_EOS
22488                                           ! 2610          break;
22489 593D           EB           16            jmp .1A8
22490                                           !BCC_EOS
22491                                           ! 2611       }
22492                                           ! 2612      xcurs++;
22493 593F           EB           14            jmp .1A8
22494                       00005941            .1AA:
22495 5941           2C                     02  sub	al,*2
22496 5943           74           AE            je 	.1AD
22497 5945           2C                     01  sub	al,*1
22498 5947         0F84         FF7F            beq 	.1AC
22499 594B           2C                     01  sub	al,*1
22500 594D         0F84         FF79            beq 	.1AB
22501 5951           2C                     01  sub	al,*1
22502 5953           74           C7            je 	.1AE
22503                       00005955            .1A8:
22504                       FFFFFFEE            ..FFF9	=	-$12
22505                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
22506 5955           8A46         FE            mov	al,-2[bp]
22507 5958           40                         inc	ax
22508 5959           8846         FE            mov	-2[bp],al
22509                                           !BCC_EOS
22510                                           ! 2613     }
22511                                           ! 2614   }
22512                       0000595C            .1A6:
22513                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
22514 595C           8B46         0A            mov	ax,$A[bp]
22515 595F           48                         dec	ax
22516 5960           8946         0A            mov	$A[bp],ax
22517                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
22518 5963           3D                   FFFF  cmp	ax,*-1
22519 5966           74           0C            je  	.1AF
22520                       00005968            .1B0:
22521                                           ! Debug: lt unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
22522 5968           8A46         FE            mov	al,-2[bp]
22523 596B           30E4                       xor	ah,ah
22524 596D           3B46         F8            cmp	ax,-8[bp]
22525 5970         0F82         FF42            blo 	.1A7
22526                       00005974            .1AF:
22527                       00005974            .1A5:
22528                                           ! 2615 }
22529                       00005974            .1A4:
22530 5974           89EC                       mov	sp,bp
22531 5976           5D                         pop	bp
22532 5977           C3                         ret
22533                                           ! 2616 #asm
22534                                           !BCC_ASM
22535                       00000008            _biosfn_write_char_only.count	set	8
22536                       00000006            _biosfn_write_char_only.attr	set	6
22537                       00000004            _biosfn_write_char_only.page	set	4
22538                       00000002            _biosfn_write_char_only.car	set	2
22539                       00005978            biosfn_group_0B:
22540 5978           80FF                   00    cmp bh, #0x00
22541 597B           74           06              je biosfn_set_border_color
22542 597D           80FF                   01    cmp bh, #0x01
22543 5980           74           40              je biosfn_set_palette
22544 5982           C3                           ret
22545                       00005983            biosfn_set_border_color:
22546 5983           50                           push ax
22547 5984           53                           push bx
22548 5985           51                           push cx
22549 5986           52                           push dx
22550 5987           BA                   03DA    mov dx, # 0x3da
22551 598A           EC                           in al, dx
22552 598B           BA                   03C0    mov dx, # 0x3c0
22553 598E           B0                     00    mov al, #0x00
22554 5990           EE                           out dx, al
22555 5991           88D8                         mov al, bl
22556 5993           24                     0F    and al, #0x0f
22557 5995           A8                     08    test al, #0x08
22558 5997           74           02              jz set_low_border
22559 5999           04                     08    add al, #0x08
22560                       0000599B            set_low_border:
22561 599B           EE                           out dx, al
22562 599C           B1                     01    mov cl, #0x01
22563 599E           80E3                   10    and bl, #0x10
22564                       000059A1            set_intensity_loop:
22565 59A1           BA                   03C0    mov dx, # 0x3c0
22566 59A4           88C8                         mov al, cl
22567 59A6           EE                           out dx, al
22568 59A7           BA                   03C1    mov dx, # 0x3c1
22569 59AA           EC                           in al, dx
22570 59AB           24                     EF    and al, #0xef
22571 59AD           08D8                         or al, bl
22572 59AF           BA                   03C0    mov dx, # 0x3c0
22573 59B2           EE                           out dx, al
22574 59B3           FEC1                         inc cl
22575 59B5           80F9                   04    cmp cl, #0x04
22576 59B8           75           E7              jne set_intensity_loop
22577 59BA           B0                     20    mov al, #0x20
22578 59BC           EE                           out dx, al
22579 59BD           5A                           pop dx
22580 59BE           59                           pop cx
22581 59BF           5B                           pop bx
22582 59C0           58                           pop ax
22583 59C1           C3                           ret
22584                       000059C2            biosfn_set_palette:
22585 59C2           50                           push ax
22586 59C3           53                           push bx
22587 59C4           51                           push cx
22588 59C5           52                           push dx
22589 59C6           BA                   03DA    mov dx, # 0x3da
22590 59C9           EC                           in al, dx
22591 59CA           B1                     01    mov cl, #0x01
22592 59CC           80E3                   01    and bl, #0x01
22593                       000059CF            set_cga_palette_loop:
22594 59CF           BA                   03C0    mov dx, # 0x3c0
22595 59D2           88C8                         mov al, cl
22596 59D4           EE                           out dx, al
22597 59D5           BA                   03C1    mov dx, # 0x3c1
22598 59D8           EC                           in al, dx
22599 59D9           24                     FE    and al, #0xfe
22600 59DB           08D8                         or al, bl
22601 59DD           BA                   03C0    mov dx, # 0x3c0
22602 59E0           EE                           out dx, al
22603 59E1           FEC1                         inc cl
22604 59E3           80F9                   04    cmp cl, #0x04
22605 59E6           75           E7              jne set_cga_palette_loop
22606 59E8           B0                     20    mov al, #0x20
22607 59EA           EE                           out dx, al
22608 59EB           5A                           pop dx
22609 59EC           59                           pop cx
22610 59ED           5B                           pop bx
22611 59EE           58                           pop ax
22612 59EF           C3                           ret
22613                                           ! 2691 endasm
22614                                           !BCC_ENDASM
22615                                           ! 2692 static void biosfn_write_pixel (BH,AL,CX,DX) Bit8u BH;Bit8u AL;Bit16u CX;Bit16u DX;
22616                                           ! Register BX used in function biosfn_write_char_only
22617                       000059F0            _biosfn_write_pixel:
22618                                           !BCC_EOS
22619                                           !BCC_EOS
22620                                           !BCC_EOS
22621                                           !BCC_EOS
22622                                           ! 2693 {
22623                                           ! 2694  Bit8u mode,line,mask,attr,data;
22624                                           !BCC_EOS
22625                                           ! 2695  Bit16u addr;
22626                                           !BCC_EOS
22627                                           ! 2696  mode=read_byte(0x40,0x49);
22628 59F0           55                         push	bp
22629 59F1           89E5                       mov	bp,sp
22630 59F3           83C4                   F8  add	sp,*-8
22631                                           ! Debug: list int = const $49 (used reg = )
22632 59F6           B8                   0049  mov	ax,*$49
22633 59F9           50                         push	ax
22634                                           ! Debug: list int = const $40 (used reg = )
22635 59FA           B8                   0040  mov	ax,*$40
22636 59FD           50                         push	ax
22637                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22638 59FE           E8         218F            call	_read_byte
22639 5A01           83C4                   04  add	sp,*4
22640                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$A-3] (used reg = )
22641 5A04           8846         FF            mov	-1[bp],al
22642                                           !BCC_EOS
22643                                           ! 2697  line=find_vga_entry(mode);
22644                                           ! Debug: list unsigned char mode = [S+$A-3] (used reg = )
22645 5A07           8A46         FF            mov	al,-1[bp]
22646 5A0A           30E4                       xor	ah,ah
22647 5A0C           50                         push	ax
22648                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
22649 5A0D           E8         2094            call	_find_vga_entry
22650 5A10           44                         inc	sp
22651 5A11           44                         inc	sp
22652                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$A-4] (used reg = )
22653 5A12           8846         FE            mov	-2[bp],al
22654                                           !BCC_EOS
22655                                           ! 2698  if(line==0xFF)return;
22656                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$A-4] (used reg = )
22657 5A15           8A46         FE            mov	al,-2[bp]
22658 5A18           3C                     FF  cmp	al,#$FF
22659 5A1A           75           04            jne 	.1B1
22660                       00005A1C            .1B2:
22661 5A1C           89EC                       mov	sp,bp
22662 5A1E           5D                         pop	bp
22663 5A1F           C3                         ret
22664                                           !BCC_EOS
22665                                           ! 2699  if(vga_modes[line].class==0x00)return;
22666                       00005A20            .1B1:
22667                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22668 5A20           8A46         FE            mov	al,-2[bp]
22669 5A23           30E4                       xor	ah,ah
22670 5A25           B1                     03  mov	cl,*3
22671 5A27           D3E0                       shl	ax,cl
22672 5A29           89C3                       mov	bx,ax
22673 5A2B           81C3                 01FD  add	bx,#_vga_modes
22674                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
22675 5A2F           8A47         01            mov	al,1[bx]
22676 5A32           84C0                       test	al,al
22677 5A34           75           04            jne 	.1B3
22678                       00005A36            .1B4:
22679 5A36           89EC                       mov	sp,bp
22680 5A38           5D                         pop	bp
22681 5A39           C3                         ret
22682                                           !BCC_EOS
22683                                           ! 2700  switch(vga_modes[line].memmodel)
22684                       00005A3A            .1B3:
22685                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22686 5A3A           8A46         FE            mov	al,-2[bp]
22687 5A3D           30E4                       xor	ah,ah
22688 5A3F           B1                     03  mov	cl,*3
22689 5A41           D3E0                       shl	ax,cl
22690 5A43           89C3                       mov	bx,ax
22691 5A45           81C3                 01FD  add	bx,#_vga_modes
22692 5A49           8A47         02            mov	al,2[bx]
22693                                           ! 2701   {
22694 5A4C           E9         0223            br 	.1B7
22695                                           ! 2702    case 0x04:
22696                                           ! 2703    case 0x03:
22697                       00005A4F            .1B8:
22698                                           ! 2704      addr = CX/8+DX*read_word(0x40,0x4A);
22699                       00005A4F            .1B9:
22700                                           ! Debug: list int = const $4A (used reg = )
22701 5A4F           B8                   004A  mov	ax,*$4A
22702 5A52           50                         push	ax
22703                                           ! Debug: list int = const $40 (used reg = )
22704 5A53           B8                   0040  mov	ax,*$40
22705 5A56           50                         push	ax
22706                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
22707 5A57           E8         2149            call	_read_word
22708 5A5A           83C4                   04  add	sp,*4
22709                                           ! Debug: mul unsigned short = ax+0 to unsigned short DX = [S+$A+8] (used reg = )
22710                                           ! Debug: expression subtree swapping
22711 5A5D           8B4E         0A            mov	cx,$A[bp]
22712 5A60           F7E9                       imul	cx
22713 5A62           50                         push	ax
22714                                           ! Debug: div int = const 8 to unsigned short CX = [S+$C+6] (used reg = )
22715 5A63           8B46         08            mov	ax,8[bp]
22716 5A66           B1                     03  mov	cl,*3
22717 5A68           D3E8                       shr	ax,cl
22718                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
22719 5A6A           0346         F6            add	ax,0+..FFF8[bp]
22720 5A6D           44                         inc	sp
22721 5A6E           44                         inc	sp
22722                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
22723 5A6F           8946         F8            mov	-8[bp],ax
22724                                           !BCC_EOS
22725                                           ! 2705      mask = 0x80 >> (CX & 0x07);
22726                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
22727 5A72           8A46         08            mov	al,8[bp]
22728 5A75           24                     07  and	al,*7
22729                                           ! Debug: sr unsigned char = al+0 to int = const $80 (used reg = )
22730 5A77           30E4                       xor	ah,ah
22731 5A79           89C3                       mov	bx,ax
22732 5A7B           B8                   0080  mov	ax,#$80
22733 5A7E           89D9                       mov	cx,bx
22734 5A80           D3F8                       sar	ax,cl
22735                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
22736 5A82           8846         FD            mov	-3[bp],al
22737                                           !BCC_EOS
22738                                           ! 2706      outw(0x3ce, (mask << 8) | 0x08);
22739                                           ! Debug: sl int = const 8 to unsigned char mask = [S+$A-5] (used reg = )
22740 5A85           8A46         FD            mov	al,-3[bp]
22741 5A88           30E4                       xor	ah,ah
22742 5A8A           88C4                       mov	ah,al
22743 5A8C           30C0                       xor	al,al
22744                                           ! Debug: or int = const 8 to unsigned int = ax+0 (used reg = )
22745 5A8E           0C                     08  or	al,*8
22746                                           ! Debug: list unsigned int = ax+0 (used reg = )
22747 5A90           50                         push	ax
22748                                           ! Debug: list int = const $3CE (used reg = )
22749 5A91           B8                   03CE  mov	ax,#$3CE
22750 5A94           50                         push	ax
22751                                           ! Debug: func () void = outw+0 (used reg = )
22752 5A95           E8         2174            call	_outw
22753 5A98           83C4                   04  add	sp,*4
22754                                           !BCC_EOS
22755                                           ! 2707      outw(0x3ce, 0x0205);
22756                                           ! Debug: list int = const $205 (used reg = )
22757 5A9B           B8                   0205  mov	ax,#$205
22758 5A9E           50                         push	ax
22759                                           ! Debug: list int = const $3CE (used reg = )
22760 5A9F           B8                   03CE  mov	ax,#$3CE
22761 5AA2           50                         push	ax
22762                                           ! Debug: func () void = outw+0 (used reg = )
22763 5AA3           E8         2166            call	_outw
22764 5AA6           83C4                   04  add	sp,*4
22765                                           !BCC_EOS
22766                                           ! 2708      data = read_byte(0xa000,addr);
22767                                           ! Debug: list unsigned short addr = [S+$A-$A] (used reg = )
22768 5AA9           FF76         F8            push	-8[bp]
22769                                           ! Debug: list unsigned int = const $A000 (used reg = )
22770 5AAC           B8                   A000  mov	ax,#$A000
22771 5AAF           50                         push	ax
22772                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22773 5AB0           E8         20DD            call	_read_byte
22774 5AB3           83C4                   04  add	sp,*4
22775                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$A-7] (used reg = )
22776 5AB6           8846         FB            mov	-5[bp],al
22777                                           !BCC_EOS
22778                                           ! 2709      if (AL & 0x80)
22779                                           ! Debug: and int = const $80 to unsigned char AL = [S+$A+4] (used reg = )
22780 5AB9           8A46         06            mov	al,6[bp]
22781 5ABC           24                     80  and	al,#$80
22782 5ABE           84C0                       test	al,al
22783 5AC0           74           0E            je  	.1BA
22784                       00005AC2            .1BB:
22785                                           ! 2710       {
22786                                           ! 2711        outw(0x3ce, 0x1803);
22787                                           ! Debug: list int = const $1803 (used reg = )
22788 5AC2           B8                   1803  mov	ax,#$1803
22789 5AC5           50                         push	ax
22790                                           ! Debug: list int = const $3CE (used reg = )
22791 5AC6           B8                   03CE  mov	ax,#$3CE
22792 5AC9           50                         push	ax
22793                                           ! Debug: func () void = outw+0 (used reg = )
22794 5ACA           E8         213F            call	_outw
22795 5ACD           83C4                   04  add	sp,*4
22796                                           !BCC_EOS
22797                                           ! 2712       }
22798                                           ! 2713      write_byte(0xa000,addr,AL);
22799                       00005AD0            .1BA:
22800                                           ! Debug: list unsigned char AL = [S+$A+4] (used reg = )
22801 5AD0           8A46         06            mov	al,6[bp]
22802 5AD3           30E4                       xor	ah,ah
22803 5AD5           50                         push	ax
22804                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
22805 5AD6           FF76         F8            push	-8[bp]
22806                                           ! Debug: list unsigned int = const $A000 (used reg = )
22807 5AD9           B8                   A000  mov	ax,#$A000
22808 5ADC           50                         push	ax
22809                                           ! Debug: func () void = write_byte+0 (used reg = )
22810 5ADD           E8         20D6            call	_write_byte
22811 5AE0           83C4                   06  add	sp,*6
22812                                           !BCC_EOS
22813                                           ! 2714 #asm
22814                                           !BCC_EOS
22815                                           !BCC_ASM
22816                       0000000C            _biosfn_write_pixel.BH	set	$C
22817                       00000004            .biosfn_write_pixel.BH	set	4
22818                       00000010            _biosfn_write_pixel.CX	set	$10
22819                       00000008            .biosfn_write_pixel.CX	set	8
22820                       00000006            _biosfn_write_pixel.line	set	6
22821                       FFFFFFFE            .biosfn_write_pixel.line	set	-2
22822                       0000000E            _biosfn_write_pixel.AL	set	$E
22823                       00000006            .biosfn_write_pixel.AL	set	6
22824                       00000003            _biosfn_write_pixel.data	set	3
22825                       FFFFFFFB            .biosfn_write_pixel.data	set	-5
22826                       00000012            _biosfn_write_pixel.DX	set	$12
22827                       0000000A            .biosfn_write_pixel.DX	set	$A
22828                       00000005            _biosfn_write_pixel.mask	set	5
22829                       FFFFFFFD            .biosfn_write_pixel.mask	set	-3
22830                       00000004            _biosfn_write_pixel.attr	set	4
22831                       FFFFFFFC            .biosfn_write_pixel.attr	set	-4
22832                       00000007            _biosfn_write_pixel.mode	set	7
22833                       FFFFFFFF            .biosfn_write_pixel.mode	set	-1
22834                       00000000            _biosfn_write_pixel.addr	set	0
22835                       FFFFFFF8            .biosfn_write_pixel.addr	set	-8
22836 5AE3           BA                   03CE       mov dx, # 0x3ce
22837 5AE6           B8                   FF08       mov ax, #0xff08
22838 5AE9           EF                              out dx, ax
22839 5AEA           B8                   0005       mov ax, #0x0005
22840 5AED           EF                              out dx, ax
22841 5AEE           B8                   0003       mov ax, #0x0003
22842 5AF1           EF                              out dx, ax
22843                                           ! 2722 endasm
22844                                           !BCC_ENDASM
22845                                           !BCC_EOS
22846                                           ! 2723      break;
22847 5AF2           E9         0193            br 	.1B5
22848                                           !BCC_EOS
22849                                           ! 2724    case 0x02:
22850                                           ! 2725      if(vga_modes[line].pixbits==2)
22851                       00005AF5            .1BC:
22852                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22853 5AF5           8A46         FE            mov	al,-2[bp]
22854 5AF8           30E4                       xor	ah,ah
22855 5AFA           B1                     03  mov	cl,*3
22856 5AFC           D3E0                       shl	ax,cl
22857 5AFE           89C3                       mov	bx,ax
22858 5B00           81C3                 01FD  add	bx,#_vga_modes
22859                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
22860 5B04           8A47         03            mov	al,3[bx]
22861 5B07           3C                     02  cmp	al,*2
22862 5B09           75           1C            jne 	.1BD
22863                       00005B0B            .1BE:
22864                                           ! 2726       {
22865                                           ! 2727        addr=(CX>>2)+(DX>>1)*80;
22866                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
22867 5B0B           8B46         0A            mov	ax,$A[bp]
22868 5B0E           D1E8                       shr	ax,*1
22869                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
22870 5B10           B9                   0050  mov	cx,*$50
22871 5B13           F7E9                       imul	cx
22872 5B15           50                         push	ax
22873                                           ! Debug: sr int = const 2 to unsigned short CX = [S+$C+6] (used reg = )
22874 5B16           8B46         08            mov	ax,8[bp]
22875 5B19           D1E8                       shr	ax,*1
22876 5B1B           D1E8                       shr	ax,*1
22877                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
22878 5B1D           0346         F6            add	ax,0+..FFF8[bp]
22879 5B20           44                         inc	sp
22880 5B21           44                         inc	sp
22881                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
22882 5B22           8946         F8            mov	-8[bp],ax
22883                                           !BCC_EOS
22884                                           ! 2728       }
22885                                           ! 2729      else
22886                                           ! 2730       {
22887 5B25           EB           1A            jmp .1BF
22888                       00005B27            .1BD:
22889                                           ! 2731        addr=(CX>>3)+(DX>>1)*80;
22890                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
22891 5B27           8B46         0A            mov	ax,$A[bp]
22892 5B2A           D1E8                       shr	ax,*1
22893                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
22894 5B2C           B9                   0050  mov	cx,*$50
22895 5B2F           F7E9                       imul	cx
22896 5B31           50                         push	ax
22897                                           ! Debug: sr int = const 3 to unsigned short CX = [S+$C+6] (used reg = )
22898 5B32           8B46         08            mov	ax,8[bp]
22899 5B35           B1                     03  mov	cl,*3
22900 5B37           D3E8                       shr	ax,cl
22901                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
22902 5B39           0346         F6            add	ax,0+..FFF8[bp]
22903 5B3C           44                         inc	sp
22904 5B3D           44                         inc	sp
22905                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
22906 5B3E           8946         F8            mov	-8[bp],ax
22907                                           !BCC_EOS
22908                                           ! 2732       }
22909                                           ! 2733      if (DX & 1) addr += 0x2000;
22910                       00005B41            .1BF:
22911                                           ! Debug: and int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
22912 5B41           8A46         0A            mov	al,$A[bp]
22913 5B44           24                     01  and	al,*1
22914 5B46           84C0                       test	al,al
22915 5B48           74           09            je  	.1C0
22916                       00005B4A            .1C1:
22917                                           ! Debug: addab int = const $2000 to unsigned short addr = [S+$A-$A] (used reg = )
22918 5B4A           8B46         F8            mov	ax,-8[bp]
22919 5B4D           05                   2000  add	ax,#$2000
22920 5B50           8946         F8            mov	-8[bp],ax
22921                                           !BCC_EOS
22922                                           ! 2734      data = read_byte(0xb800,addr);
22923                       00005B53            .1C0:
22924                                           ! Debug: list unsigned short addr = [S+$A-$A] (used reg = )
22925 5B53           FF76         F8            push	-8[bp]
22926                                           ! Debug: list unsigned int = const $B800 (used reg = )
22927 5B56           B8                   B800  mov	ax,#$B800
22928 5B59           50                         push	ax
22929                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22930 5B5A           E8         2033            call	_read_byte
22931 5B5D           83C4                   04  add	sp,*4
22932                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$A-7] (used reg = )
22933 5B60           8846         FB            mov	-5[bp],al
22934                                           !BCC_EOS
22935                                           ! 2735      if(vga_modes[line].pixbits==2)
22936                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22937 5B63           8A46         FE            mov	al,-2[bp]
22938 5B66           30E4                       xor	ah,ah
22939 5B68           B1                     03  mov	cl,*3
22940 5B6A           D3E0                       shl	ax,cl
22941 5B6C           89C3                       mov	bx,ax
22942 5B6E           81C3                 01FD  add	bx,#_vga_modes
22943                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
22944 5B72           8A47         03            mov	al,3[bx]
22945 5B75           3C                     02  cmp	al,*2
22946 5B77           75           46            jne 	.1C2
22947                       00005B79            .1C3:
22948                                           ! 2736       {
22949                                           ! 2737    
22950                                           ! 2737     attr = (AL & 0x03) << ((3 - (CX & 0x03)) * 2);
22951                                           ! Debug: and int = const 3 to unsigned short CX = [S+$A+6] (used reg = )
22952 5B79           8A46         08            mov	al,8[bp]
22953 5B7C           24                     03  and	al,*3
22954                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
22955 5B7E           50                         push	ax
22956 5B7F           B8                   0003  mov	ax,*3
22957 5B82           2A46         F6            sub	al,0+..FFF8[bp]
22958 5B85           80DC                   00  sbb	ah,*0
22959 5B88           44                         inc	sp
22960 5B89           44                         inc	sp
22961                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22962 5B8A           D1E0                       shl	ax,*1
22963 5B8C           50                         push	ax
22964                                           ! Debug: and int = const 3 to unsigned char AL = [S+$C+4] (used reg = )
22965 5B8D           8A46         06            mov	al,6[bp]
22966 5B90           24                     03  and	al,*3
22967                                           ! Debug: sl unsigned int (temp) = [S+$C-$C] to unsigned char = al+0 (used reg = )
22968 5B92           30E4                       xor	ah,ah
22969 5B94           8B4E         F6            mov	cx,0+..FFF8[bp]
22970 5B97           D3E0                       shl	ax,cl
22971 5B99           44                         inc	sp
22972 5B9A           44                         inc	sp
22973                                           ! Debug: eq unsigned int = ax+0 to unsigned char attr = [S+$A-6] (used reg = )
22974 5B9B           8846         FC            mov	-4[bp],al
22975                                           !BCC_EOS
22976                                           ! 2738        mask = 0x03 << ((3 - (CX & 0x03)) * 2);
22977                                           ! Debug: and int = const 3 to unsigned short CX = [S+$A+6] (used reg = )
22978 5B9E           8A46         08            mov	al,8[bp]
22979 5BA1           24                     03  and	al,*3
22980                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
22981 5BA3           50                         push	ax
22982 5BA4           B8                   0003  mov	ax,*3
22983 5BA7           2A46         F6            sub	al,0+..FFF8[bp]
22984 5BAA           80DC                   00  sbb	ah,*0
22985 5BAD           44                         inc	sp
22986 5BAE           44                         inc	sp
22987                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22988 5BAF           D1E0                       shl	ax,*1
22989                                           ! Debug: sl unsigned int = ax+0 to int = const 3 (used reg = )
22990 5BB1           89C3                       mov	bx,ax
22991 5BB3           B8                   0003  mov	ax,*3
22992 5BB6           89D9                       mov	cx,bx
22993 5BB8           D3E0                       shl	ax,cl
22994                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
22995 5BBA           8846         FD            mov	-3[bp],al
22996                                           !BCC_EOS
22997                                           ! 2739       }
22998                                           ! 2740      else
22999                                           ! 2741       {
23000 5BBD           EB           40            jmp .1C4
23001                       00005BBF            .1C2:
23002                                           ! 2742        attr = (AL & 0x01) << (7 - (CX & 0x07));
23003                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
23004 5BBF           8A46         08            mov	al,8[bp]
23005 5BC2           24                     07  and	al,*7
23006                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
23007 5BC4           50                         push	ax
23008 5BC5           B8                   0007  mov	ax,*7
23009 5BC8           2A46         F6            sub	al,0+..FFF8[bp]
23010 5BCB           80DC                   00  sbb	ah,*0
23011 5BCE           44                         inc	sp
23012 5BCF           44                         inc	sp
23013 5BD0           50                         push	ax
23014                                           ! Debug: and int = const 1 to unsigned char AL = [S+$C+4] (used reg = )
23015 5BD1           8A46         06            mov	al,6[bp]
23016 5BD4           24                     01  and	al,*1
23017                                           ! Debug: sl unsigned int (temp) = [S+$C-$C] to unsigned char = al+0 (used reg = )
23018 5BD6           30E4                       xor	ah,ah
23019 5BD8           8B4E         F6            mov	cx,0+..FFF8[bp]
23020 5BDB           D3E0                       shl	ax,cl
23021 5BDD           44                         inc	sp
23022 5BDE           44                         inc	sp
23023                                           ! Debug: eq unsigned int = ax+0 to unsigned char attr = [S+$A-6] (used reg = )
23024 5BDF           8846         FC            mov	-4[bp],al
23025                                           !BCC_EOS
23026                                           ! 2743        mask = 0x01 << (7 - (CX & 0x07));
23027                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
23028 5BE2           8A46         08            mov	al,8[bp]
23029 5BE5           24                     07  and	al,*7
23030                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
23031 5BE7           50                         push	ax
23032 5BE8           B8                   0007  mov	ax,*7
23033 5BEB           2A46         F6            sub	al,0+..FFF8[bp]
23034 5BEE           80DC                   00  sbb	ah,*0
23035 5BF1           44                         inc	sp
23036 5BF2           44                         inc	sp
23037                                           ! Debug: sl unsigned int = ax+0 to int = const 1 (used reg = )
23038 5BF3           89C3                       mov	bx,ax
23039 5BF5           B8                   0001  mov	ax,*1
23040 5BF8           89D9                       mov	cx,bx
23041 5BFA           D3E0                       shl	ax,cl
23042                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
23043 5BFC           8846         FD            mov	-3[bp],al
23044                                           !BCC_EOS
23045                                           ! 2744       }
23046                                           ! 2745      if (AL & 0x80)
23047                       00005BFF            .1C4:
23048                                           ! Debug: and int = const $80 to unsigned char AL = [S+$A+4] (used reg = )
23049 5BFF           8A46         06            mov	al,6[bp]
23050 5C02           24                     80  and	al,#$80
23051 5C04           84C0                       test	al,al
23052 5C06           74           0B            je  	.1C5
23053                       00005C08            .1C6:
23054                                           ! 2746       {
23055                                           ! 2747        data ^= attr;
23056                                           ! Debug: eorab unsigned char attr = [S+$A-6] to unsigned char data = [S+$A-7] (used reg = )
23057 5C08           8A46         FB            mov	al,-5[bp]
23058 5C0B           3246         FC            xor	al,-4[bp]
23059 5C0E           8846         FB            mov	-5[bp],al
23060                                           !BCC_EOS
23061                                           ! 2748       }
23062                                           ! 2749      else
23063                                           ! 2750       {
23064 5C11           EB           16            jmp .1C7
23065                       00005C13            .1C5:
23066                                           ! 2751        data &= ~mask;
23067                                           ! Debug: not unsigned char mask = [S+$A-5] (used reg = )
23068 5C13           8A46         FD            mov	al,-3[bp]
23069 5C16           30E4                       xor	ah,ah
23070 5C18           F7D0                       not	ax
23071                                           ! Debug: andab unsigned int = ax+0 to unsigned char data = [S+$A-7] (used reg = )
23072 5C1A           2246         FB            and	al,-5[bp]
23073 5C1D           8846         FB            mov	-5[bp],al
23074                                           !BCC_EOS
23075                                           ! 2752        data |= attr;
23076                                           ! Debug: orab unsigned char attr = [S+$A-6] to unsigned char data = [S+$A-7] (used reg = )
23077 5C20           8A46         FB            mov	al,-5[bp]
23078 5C23           0A46         FC            or	al,-4[bp]
23079 5C26           8846         FB            mov	-5[bp],al
23080                                           !BCC_EOS
23081                                           ! 2753       }
23082                                           ! 2754      write_byte(0xb800,addr,data);
23083                       00005C29            .1C7:
23084                                           ! Debug: list unsigned char data = [S+$A-7] (used reg = )
23085 5C29           8A46         FB            mov	al,-5[bp]
23086 5C2C           30E4                       xor	ah,ah
23087 5C2E           50                         push	ax
23088                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23089 5C2F           FF76         F8            push	-8[bp]
23090                                           ! Debug: list unsigned int = const $B800 (used reg = )
23091 5C32           B8                   B800  mov	ax,#$B800
23092 5C35           50                         push	ax
23093                                           ! Debug: func () void = write_byte+0 (used reg = )
23094 5C36           E8         1F7D            call	_write_byte
23095 5C39           83C4                   06  add	sp,*6
23096                                           !BCC_EOS
23097                                           ! 2755      break;
23098 5C3C           EB           4A            jmp .1B5
23099                                           !BCC_EOS
23100                                           ! 2756    case 0x05:
23101                                           ! 2757      addr=CX+DX*(read_word(0x40,0x4A)*8);
23102                       00005C3E            .1C8:
23103                                           ! Debug: list int = const $4A (used reg = )
23104 5C3E           B8                   004A  mov	ax,*$4A
23105 5C41           50                         push	ax
23106                                           ! Debug: list int = const $40 (used reg = )
23107 5C42           B8                   0040  mov	ax,*$40
23108 5C45           50                         push	ax
23109                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23110 5C46           E8         1F5A            call	_read_word
23111 5C49           83C4                   04  add	sp,*4
23112                                           ! Debug: mul int = const 8 to unsigned short = ax+0 (used reg = )
23113 5C4C           B1                     03  mov	cl,*3
23114 5C4E           D3E0                       shl	ax,cl
23115                                           ! Debug: mul unsigned int = ax+0 to unsigned short DX = [S+$A+8] (used reg = )
23116                                           ! Debug: expression subtree swapping
23117 5C50           8B4E         0A            mov	cx,$A[bp]
23118 5C53           F7E9                       imul	cx
23119                                           ! Debug: add unsigned int = ax+0 to unsigned short CX = [S+$A+6] (used reg = )
23120                                           ! Debug: expression subtree swapping
23121 5C55           0346         08            add	ax,8[bp]
23122                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
23123 5C58           8946         F8            mov	-8[bp],ax
23124                                           !BCC_EOS
23125                                           ! 2758      write_byte(0xa000,addr,AL);
23126                                           ! Debug: list unsigned char AL = [S+$A+4] (used reg = )
23127 5C5B           8A46         06            mov	al,6[bp]
23128 5C5E           30E4                       xor	ah,ah
23129 5C60           50                         push	ax
23130                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23131 5C61           FF76         F8            push	-8[bp]
23132                                           ! Debug: list unsigned int = const $A000 (used reg = )
23133 5C64           B8                   A000  mov	ax,#$A000
23134 5C67           50                         push	ax
23135                                           ! Debug: func () void = write_byte+0 (used reg = )
23136 5C68           E8         1F4B            call	_write_byte
23137 5C6B           83C4                   06  add	sp,*6
23138                                           !BCC_EOS
23139                                           ! 2759      break;
23140 5C6E           EB           18            jmp .1B5
23141                                           !BCC_EOS
23142                                           ! 2760   }
23143                                           ! 2761 }
23144 5C70           EB           16            jmp .1B5
23145                       00005C72            .1B7:
23146 5C72           2C                     02  sub	al,*2
23147 5C74         0F84         FE7D            beq 	.1BC
23148 5C78           2C                     01  sub	al,*1
23149 5C7A         0F84         FDD1            beq 	.1B9
23150 5C7E           2C                     01  sub	al,*1
23151 5C80         0F84         FDCB            beq 	.1B8
23152 5C84           2C                     01  sub	al,*1
23153 5C86           74           B6            je 	.1C8
23154                       00005C88            .1B5:
23155                       FFFFFFF6            ..FFF8	=	-$A
23156 5C88           89EC                       mov	sp,bp
23157 5C8A           5D                         pop	bp
23158 5C8B           C3                         ret
23159                                           ! 2762 static void biosfn_read_pixel (BH,CX,DX,AX) Bit8u BH;Bit16u CX;Bit16u DX;Bit16u *AX;
23160                                           ! Register BX used in function biosfn_write_pixel
23161                       00005C8C            _biosfn_read_pixel:
23162                                           !BCC_EOS
23163                                           !BCC_EOS
23164                                           !BCC_EOS
23165                                           !BCC_EOS
23166                                           ! 2763 {
23167                                           ! 2764  Bit8u mode,line,mask,attr,data,i;
23168                                           !BCC_EOS
23169                                           ! 2765  Bit16u addr;
23170                                           !BCC_EOS
23171                                           ! 2766  Bit16u ss=get_SS();
23172 5C8C           55                         push	bp
23173 5C8D           89E5                       mov	bp,sp
23174 5C8F           83C4                   F6  add	sp,*-$A
23175                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
23176 5C92           E8         1F87            call	_get_SS
23177                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+$C-$C] (used reg = )
23178 5C95           8946         F6            mov	-$A[bp],ax
23179                                           !BCC_EOS
23180                                           ! 2767  mode=read_byte(0x40,0x49);
23181                                           ! Debug: list int = const $49 (used reg = )
23182 5C98           B8                   0049  mov	ax,*$49
23183 5C9B           50                         push	ax
23184                                           ! Debug: list int = const $40 (used reg = )
23185 5C9C           B8                   0040  mov	ax,*$40
23186 5C9F           50                         push	ax
23187                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23188 5CA0           E8         1EED            call	_read_byte
23189 5CA3           83C4                   04  add	sp,*4
23190                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$C-3] (used reg = )
23191 5CA6           8846         FF            mov	-1[bp],al
23192                                           !BCC_EOS
23193                                           ! 2768  line=find_vga_entry(mode);
23194                                           ! Debug: list unsigned char mode = [S+$C-3] (used reg = )
23195 5CA9           8A46         FF            mov	al,-1[bp]
23196 5CAC           30E4                       xor	ah,ah
23197 5CAE           50                         push	ax
23198                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
23199 5CAF           E8         1DF2            call	_find_vga_entry
23200 5CB2           44                         inc	sp
23201 5CB3           44                         inc	sp
23202                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$C-4] (used reg = )
23203 5CB4           8846         FE            mov	-2[bp],al
23204                                           !BCC_EOS
23205                                           ! 2769  if(line==0xFF)return;
23206                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$C-4] (used reg = )
23207 5CB7           8A46         FE            mov	al,-2[bp]
23208 5CBA           3C                     FF  cmp	al,#$FF
23209 5CBC           75           04            jne 	.1C9
23210                       00005CBE            .1CA:
23211 5CBE           89EC                       mov	sp,bp
23212 5CC0           5D                         pop	bp
23213 5CC1           C3                         ret
23214                                           !BCC_EOS
23215                                           ! 2770  if(vga_modes[line].class==0x00)return;
23216                       00005CC2            .1C9:
23217                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$10] struct  = vga_modes+0 (used reg = )
23218 5CC2           8A46         FE            mov	al,-2[bp]
23219 5CC5           30E4                       xor	ah,ah
23220 5CC7           B1                     03  mov	cl,*3
23221 5CC9           D3E0                       shl	ax,cl
23222 5CCB           89C3                       mov	bx,ax
23223 5CCD           81C3                 01FD  add	bx,#_vga_modes
23224                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
23225 5CD1           8A47         01            mov	al,1[bx]
23226 5CD4           84C0                       test	al,al
23227 5CD6           75           04            jne 	.1CB
23228                       00005CD8            .1CC:
23229 5CD8           89EC                       mov	sp,bp
23230 5CDA           5D                         pop	bp
23231 5CDB           C3                         ret
23232                                           !BCC_EOS
23233                                           ! 2771  switch(vga_modes[line].memmodel)
23234                       00005CDC            .1CB:
23235                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$10] struct  = vga_modes+0 (used reg = )
23236 5CDC           8A46         FE            mov	al,-2[bp]
23237 5CDF           30E4                       xor	ah,ah
23238 5CE1           B1                     03  mov	cl,*3
23239 5CE3           D3E0                       shl	ax,cl
23240 5CE5           89C3                       mov	bx,ax
23241 5CE7           81C3                 01FD  add	bx,#_vga_modes
23242 5CEB           8A47         02            mov	al,2[bx]
23243                                           ! 2772   {
23244 5CEE           E9         0169            br 	.1CF
23245                                           ! 2773    case 0x04:
23246                                           ! 2774    case 0x03:
23247                       00005CF1            .1D0:
23248                                           ! 2775      addr = CX/8+DX*read_word(0x40,0x4A);
23249                       00005CF1            .1D1:
23250                                           ! Debug: list int = const $4A (used reg = )
23251 5CF1           B8                   004A  mov	ax,*$4A
23252 5CF4           50                         push	ax
23253                                           ! Debug: list int = const $40 (used reg = )
23254 5CF5           B8                   0040  mov	ax,*$40
23255 5CF8           50                         push	ax
23256                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23257 5CF9           E8         1EA7            call	_read_word
23258 5CFC           83C4                   04  add	sp,*4
23259                                           ! Debug: mul unsigned short = ax+0 to unsigned short DX = [S+$C+6] (used reg = )
23260                                           ! Debug: expression subtree swapping
23261 5CFF           8B4E         08            mov	cx,8[bp]
23262 5D02           F7E9                       imul	cx
23263 5D04           50                         push	ax
23264                                           ! Debug: div int = const 8 to unsigned short CX = [S+$E+4] (used reg = )
23265 5D05           8B46         06            mov	ax,6[bp]
23266 5D08           B1                     03  mov	cl,*3
23267 5D0A           D3E8                       shr	ax,cl
23268                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
23269 5D0C           0346         F4            add	ax,0+..FFF7[bp]
23270 5D0F           44                         inc	sp
23271 5D10           44                         inc	sp
23272                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
23273 5D11           8946         F8            mov	-8[bp],ax
23274                                           !BCC_EOS
23275                                           ! 2776      mask = 0x80 >> (CX & 0x07);
23276                                           ! Debug: and int = const 7 to unsigned short CX = [S+$C+4] (used reg = )
23277 5D14           8A46         06            mov	al,6[bp]
23278 5D17           24                     07  and	al,*7
23279                                           ! Debug: sr unsigned char = al+0 to int = const $80 (used reg = )
23280 5D19           30E4                       xor	ah,ah
23281 5D1B           89C3                       mov	bx,ax
23282 5D1D           B8                   0080  mov	ax,#$80
23283 5D20           89D9                       mov	cx,bx
23284 5D22           D3F8                       sar	ax,cl
23285                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$C-5] (used reg = )
23286 5D24           8846         FD            mov	-3[bp],al
23287                                           !BCC_EOS
23288                                           ! 2777      attr = 0x00;
23289                                           ! Debug: eq int = const 0 to unsigned char attr = [S+$C-6] (used reg = )
23290 5D27           30C0                       xor	al,al
23291 5D29           8846         FC            mov	-4[bp],al
23292                                           !BCC_EOS
23293                                           ! 2778      for(i=0;i<4;i++)
23294                                           ! Debug: eq int = const 0 to unsigned char i = [S+$C-8] (used reg = )
23295 5D2C           30C0                       xor	al,al
23296 5D2E           8846         FA            mov	-6[bp],al
23297                                           !BCC_EOS
23298                                           !BCC_EOS
23299                                           ! 2779       {
23300 5D31           EB           4B            jmp .1D4
23301                       00005D33            .1D5:
23302                                           ! 2780        outw(0x3ce, (i << 8) | 0x04);
23303                                           ! Debug: sl int = const 8 to unsigned char i = [S+$C-8] (used reg = )
23304 5D33           8A46         FA            mov	al,-6[bp]
23305 5D36           30E4                       xor	ah,ah
23306 5D38           88C4                       mov	ah,al
23307 5D3A           30C0                       xor	al,al
23308                                           ! Debug: or int = const 4 to unsigned int = ax+0 (used reg = )
23309 5D3C           0C                     04  or	al,*4
23310                                           ! Debug: list unsigned int = ax+0 (used reg = )
23311 5D3E           50                         push	ax
23312                                           ! Debug: list int = const $3CE (used reg = )
23313 5D3F           B8                   03CE  mov	ax,#$3CE
23314 5D42           50                         push	ax
23315                                           ! Debug: func () void = outw+0 (used reg = )
23316 5D43           E8         1EC6            call	_outw
23317 5D46           83C4                   04  add	sp,*4
23318                                           !BCC_EOS
23319                                           ! 2781        data = read_byte(0xa000,addr) & mask;
23320                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23321 5D49           FF76         F8            push	-8[bp]
23322                                           ! Debug: list unsigned int = const $A000 (used reg = )
23323 5D4C           B8                   A000  mov	ax,#$A000
23324 5D4F           50                         push	ax
23325                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23326 5D50           E8         1E3D            call	_read_byte
23327 5D53           83C4                   04  add	sp,*4
23328                                           ! Debug: and unsigned char mask = [S+$C-5] to unsigned char = al+0 (used reg = )
23329 5D56           2246         FD            and	al,-3[bp]
23330                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$C-7] (used reg = )
23331 5D59           8846         FB            mov	-5[bp],al
23332                                           !BCC_EOS
23333                                           ! 2782        if (data > 0) attr |= (0x01 << i);
23334                                           ! Debug: gt int = const 0 to unsigned char data = [S+$C-7] (used reg = )
23335 5D5C           8A46         FB            mov	al,-5[bp]
23336 5D5F           84C0                       test	al,al
23337 5D61           74           14            je  	.1D6
23338                       00005D63            .1D7:
23339                                           ! Debug: sl unsigned char i = [S+$C-8] to int = const 1 (used reg = )
23340 5D63           8A46         FA            mov	al,-6[bp]
23341 5D66           30E4                       xor	ah,ah
23342 5D68           89C3                       mov	bx,ax
23343 5D6A           B8                   0001  mov	ax,*1
23344 5D6D           89D9                       mov	cx,bx
23345 5D6F           D3E0                       shl	ax,cl
23346                                           ! Debug: orab int = ax+0 to unsigned char attr = [S+$C-6] (used reg = )
23347 5D71           0A46         FC            or	al,-4[bp]
23348 5D74           8846         FC            mov	-4[bp],al
23349                                           !BCC_EOS
23350                                           ! 2783       }
23351                       00005D77            .1D6:
23352                                           ! 2784      break;
23353                       00005D77            .1D3:
23354                                           ! Debug: postinc unsigned char i = [S+$C-8] (used reg = )
23355 5D77           8A46         FA            mov	al,-6[bp]
23356 5D7A           40                         inc	ax
23357 5D7B           8846         FA            mov	-6[bp],al
23358                       00005D7E            .1D4:
23359                                           ! Debug: lt int = const 4 to unsigned char i = [S+$C-8] (used reg = )
23360 5D7E           8A46         FA            mov	al,-6[bp]
23361 5D81           3C                     04  cmp	al,*4
23362 5D83           72           AE            jb 	.1D5
23363                       00005D85            .1D8:
23364                       00005D85            .1D2:
23365 5D85           E9         00EA            br 	.1CD
23366                                           !BCC_EOS
23367                                           ! 2785    case 0x02:
23368                                           ! 2786      addr=(CX>>2)+(DX>>1)*80;
23369                       00005D88            .1D9:
23370                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$C+6] (used reg = )
23371 5D88           8B46         08            mov	ax,8[bp]
23372 5D8B           D1E8                       shr	ax,*1
23373                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
23374 5D8D           B9                   0050  mov	cx,*$50
23375 5D90           F7E9                       imul	cx
23376 5D92           50                         push	ax
23377                                           ! Debug: sr int = const 2 to unsigned short CX = [S+$E+4] (used reg = )
23378 5D93           8B46         06            mov	ax,6[bp]
23379 5D96           D1E8                       shr	ax,*1
23380 5D98           D1E8                       shr	ax,*1
23381                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
23382 5D9A           0346         F4            add	ax,0+..FFF7[bp]
23383 5D9D           44                         inc	sp
23384 5D9E           44                         inc	sp
23385                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
23386 5D9F           8946         F8            mov	-8[bp],ax
23387                                           !BCC_EOS
23388                                           ! 2787      if (DX & 1) addr += 0x2000;
23389                                           ! Debug: and int = const 1 to unsigned short DX = [S+$C+6] (used reg = )
23390 5DA2           8A46         08            mov	al,8[bp]
23391 5DA5           24                     01  and	al,*1
23392 5DA7           84C0                       test	al,al
23393 5DA9           74           09            je  	.1DA
23394                       00005DAB            .1DB:
23395                                           ! Debug: addab int = const $2000 to unsigned short addr = [S+$C-$A] (used reg = )
23396 5DAB           8B46         F8            mov	ax,-8[bp]
23397 5DAE           05                   2000  add	ax,#$2000
23398 5DB1           8946         F8            mov	-8[bp],ax
23399                                           !BCC_EOS
23400                                           ! 2788      data = read_byte(0xb800,addr);
23401                       00005DB4            .1DA:
23402                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23403 5DB4           FF76         F8            push	-8[bp]
23404                                           ! Debug: list unsigned int = const $B800 (used reg = )
23405 5DB7           B8                   B800  mov	ax,#$B800
23406 5DBA           50                         push	ax
23407                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23408 5DBB           E8         1DD2            call	_read_byte
23409 5DBE           83C4                   04  add	sp,*4
23410                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$C-7] (used reg = )
23411 5DC1           8846         FB            mov	-5[bp],al
23412                                           !BCC_EOS
23413                                           ! 2789      if(vga_modes[line].pixbits==2)
23414                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$10] struct  = vga_modes+0 (used reg = )
23415 5DC4           8A46         FE            mov	al,-2[bp]
23416 5DC7           30E4                       xor	ah,ah
23417 5DC9           B1                     03  mov	cl,*3
23418 5DCB           D3E0                       shl	ax,cl
23419 5DCD           89C3                       mov	bx,ax
23420 5DCF           81C3                 01FD  add	bx,#_vga_modes
23421                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
23422 5DD3           8A47         03            mov	al,3[bx]
23423 5DD6           3C                     02  cmp	al,*2
23424 5DD8         0F85         0025            bne 	.1DC
23425                       00005DDC            .1DD:
23426                                           ! 2790       {
23427                                           ! 2791        attr = (data >> ((3 - (CX & 0x03)) * 2)) & 0x03;
23428                                           ! Debug: and int = const 3 to unsigned short CX = [S+$C+4] (used reg = )
23429 5DDC           8A46         06            mov	al,6[bp]
23430 5DDF           24                     03  and	al,*3
23431                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
23432 5DE1           50                         push	ax
23433 5DE2           B8                   0003  mov	ax,*3
23434 5DE5           2A46         F4            sub	al,0+..FFF7[bp]
23435 5DE8           80DC                   00  sbb	ah,*0
23436 5DEB           44                         inc	sp
23437 5DEC           44                         inc	sp
23438                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23439 5DED           D1E0                       shl	ax,*1
23440                                           ! Debug: sr unsigned int = ax+0 to unsigned char data = [S+$C-7] (used reg = )
23441 5DEF           89C3                       mov	bx,ax
23442 5DF1           8A46         FB            mov	al,-5[bp]
23443 5DF4           30E4                       xor	ah,ah
23444 5DF6           89D9                       mov	cx,bx
23445 5DF8           D3E8                       shr	ax,cl
23446                                           ! Debug: and int = const 3 to unsigned int = ax+0 (used reg = )
23447 5DFA           24                     03  and	al,*3
23448                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
23449 5DFC           8846         FC            mov	-4[bp],al
23450                                           !BCC_EOS
23451                                           ! 2792       }
23452                                           ! 2793      else
23453                                           ! 2794       {
23454 5DFF           EB           21            jmp .1DE
23455                       00005E01            .1DC:
23456                                           ! 2795        attr = (data >> (7 - (CX & 0x07))) & 0x01;
23457                                           ! Debug: and int = const 7 to unsigned short CX = [S+$C+4] (used reg = )
23458 5E01           8A46         06            mov	al,6[bp]
23459 5E04           24                     07  and	al,*7
23460                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
23461 5E06           50                         push	ax
23462 5E07           B8                   0007  mov	ax,*7
23463 5E0A           2A46         F4            sub	al,0+..FFF7[bp]
23464 5E0D           80DC                   00  sbb	ah,*0
23465 5E10           44                         inc	sp
23466 5E11           44                         inc	sp
23467                                           ! Debug: sr unsigned int = ax+0 to unsigned char data = [S+$C-7] (used reg = )
23468 5E12           89C3                       mov	bx,ax
23469 5E14           8A46         FB            mov	al,-5[bp]
23470 5E17           30E4                       xor	ah,ah
23471 5E19           89D9                       mov	cx,bx
23472 5E1B           D3E8                       shr	ax,cl
23473                                           ! Debug: and int = const 1 to unsigned int = ax+0 (used reg = )
23474 5E1D           24                     01  and	al,*1
23475                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
23476 5E1F           8846         FC            mov	-4[bp],al
23477                                           !BCC_EOS
23478                                           ! 2796       }
23479                                           ! 2797      break;
23480                       00005E22            .1DE:
23481 5E22           EB           4E            jmp .1CD
23482                                           !BCC_EOS
23483                                           ! 2798    case 0x05:
23484                                           ! 2799      addr=CX+DX*(read_word(0x40,0x4A)*8);
23485                       00005E24            .1DF:
23486                                           ! Debug: list int = const $4A (used reg = )
23487 5E24           B8                   004A  mov	ax,*$4A
23488 5E27           50                         push	ax
23489                                           ! Debug: list int = const $40 (used reg = )
23490 5E28           B8                   0040  mov	ax,*$40
23491 5E2B           50                         push	ax
23492                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23493 5E2C           E8         1D74            call	_read_word
23494 5E2F           83C4                   04  add	sp,*4
23495                                           ! Debug: mul int = const 8 to unsigned short = ax+0 (used reg = )
23496 5E32           B1                     03  mov	cl,*3
23497 5E34           D3E0                       shl	ax,cl
23498                                           ! Debug: mul unsigned int = ax+0 to unsigned short DX = [S+$C+6] (used reg = )
23499                                           ! Debug: expression subtree swapping
23500 5E36           8B4E         08            mov	cx,8[bp]
23501 5E39           F7E9                       imul	cx
23502                                           ! Debug: add unsigned int = ax+0 to unsigned short CX = [S+$C+4] (used reg = )
23503                                           ! Debug: expression subtree swapping
23504 5E3B           0346         06            add	ax,6[bp]
23505                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
23506 5E3E           8946         F8            mov	-8[bp],ax
23507                                           !BCC_EOS
23508                                           ! 2800      attr=read_byte(0xa000,addr);
23509                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23510 5E41           FF76         F8            push	-8[bp]
23511                                           ! Debug: list unsigned int = const $A000 (used reg = )
23512 5E44           B8                   A000  mov	ax,#$A000
23513 5E47           50                         push	ax
23514                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23515 5E48           E8         1D45            call	_read_byte
23516 5E4B           83C4                   04  add	sp,*4
23517                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
23518 5E4E           8846         FC            mov	-4[bp],al
23519                                           !BCC_EOS
23520                                           ! 2801      break;
23521 5E51           EB           1F            jmp .1CD
23522                                           !BCC_EOS
23523                                           ! 2802    default:
23524                                           ! 2803      attr = 0;
23525                       00005E53            .1E0:
23526                                           ! Debug: eq int = const 0 to unsigned char attr = [S+$C-6] (used reg = )
23527 5E53           30C0                       xor	al,al
23528 5E55           8846         FC            mov	-4[bp],al
23529                                           !BCC_EOS
23530                                           ! 2804   }
23531                                           ! 2805  write_word(ss,AX,(read_word(ss,AX) & 0xff00) | attr);
23532 5E58           EB           18            jmp .1CD
23533                       00005E5A            .1CF:
23534 5E5A           2C                     02  sub	al,*2
23535 5E5C         0F84         FF28            beq 	.1D9
23536 5E60           2C                     01  sub	al,*1
23537 5E62         0F84         FE8B            beq 	.1D1
23538 5E66           2C                     01  sub	al,*1
23539 5E68         0F84         FE85            beq 	.1D0
23540 5E6C           2C                     01  sub	al,*1
23541 5E6E           74           B4            je 	.1DF
23542 5E70           EB           E1            jmp	.1E0
23543                       00005E72            .1CD:
23544                       FFFFFFF4            ..FFF7	=	-$C
23545                                           ! Debug: list * unsigned short AX = [S+$C+8] (used reg = )
23546 5E72           FF76         0A            push	$A[bp]
23547                                           ! Debug: list unsigned short ss = [S+$E-$C] (used reg = )
23548 5E75           FF76         F6            push	-$A[bp]
23549                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23550 5E78           E8         1D28            call	_read_word
23551 5E7B           83C4                   04  add	sp,*4
23552                                           ! Debug: and unsigned int = const $FF00 to unsigned short = ax+0 (used reg = )
23553 5E7E           30C0                       xor	al,al
23554                                           ! Debug: or unsigned char attr = [S+$C-6] to unsigned int = ax+0 (used reg = )
23555 5E80           0A46         FC            or	al,-4[bp]
23556                                           ! Debug: list unsigned int = ax+0 (used reg = )
23557 5E83           50                         push	ax
23558                                           ! Debug: list * unsigned short AX = [S+$E+8] (used reg = )
23559 5E84           FF76         0A            push	$A[bp]
23560                                           ! Debug: list unsigned short ss = [S+$10-$C] (used reg = )
23561 5E87           FF76         F6            push	-$A[bp]
23562                                           ! Debug: func () void = write_word+0 (used reg = )
23563 5E8A           E8         1D41            call	_write_word
23564 5E8D           83C4                   06  add	sp,*6
23565                                           !BCC_EOS
23566                                           ! 2806 }
23567 5E90           89EC                       mov	sp,bp
23568 5E92           5D                         pop	bp
23569 5E93           C3                         ret
23570                                           ! 2807 static void biosfn_write_teletype (car, page, attr, flag)
23571                                           ! Register BX used in function biosfn_read_pixel
23572                                           ! 2808 Bit8u car;Bit8u page;Bit8u attr;Bit8u flag;
23573                       00005E94            _biosfn_write_teletype:
23574                                           !BCC_EOS
23575                                           !BCC_EOS
23576                                           !BCC_EOS
23577                                           !BCC_EOS
23578                                           ! 2809 {
23579                                           ! 2810  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
23580                                           !BCC_EOS
23581                                           ! 2811  Bit16u nbcols,nbrows,address;
23582                                           !BCC_EOS
23583                                           ! 2812  Bit16u cursor,dummy;
23584                                           !BCC_EOS
23585                                           ! 2813  if(page==0xff)
23586 5E94           55                         push	bp
23587 5E95           89E5                       mov	bp,sp
23588 5E97           83C4                   F0  add	sp,*-$10
23589                                           ! Debug: logeq int = const $FF to unsigned char page = [S+$12+4] (used reg = )
23590 5E9A           8A46         06            mov	al,6[bp]
23591 5E9D           3C                     FF  cmp	al,#$FF
23592 5E9F           75           11            jne 	.1E1
23593                       00005EA1            .1E2:
23594                                           ! 2814   page=read_byte(0x40,0x62);
23595                                           ! Debug: list int = const $62 (used reg = )
23596 5EA1           B8                   0062  mov	ax,*$62
23597 5EA4           50                         push	ax
23598                                           ! Debug: list int = const $40 (used reg = )
23599 5EA5           B8                   0040  mov	ax,*$40
23600 5EA8           50                         push	ax
23601                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23602 5EA9           E8         1CE4            call	_read_byte
23603 5EAC           83C4                   04  add	sp,*4
23604                                           ! Debug: eq unsigned char = al+0 to unsigned char page = [S+$12+4] (used reg = )
23605 5EAF           8846         06            mov	6[bp],al
23606                                           !BCC_EOS
23607                                           ! 2815  mode=read_byte(0x40,0x49);
23608                       00005EB2            .1E1:
23609                                           ! Debug: list int = const $49 (used reg = )
23610 5EB2           B8                   0049  mov	ax,*$49
23611 5EB5           50                         push	ax
23612                                           ! Debug: list int = const $40 (used reg = )
23613 5EB6           B8                   0040  mov	ax,*$40
23614 5EB9           50                         push	ax
23615                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23616 5EBA           E8         1CD3            call	_read_byte
23617 5EBD           83C4                   04  add	sp,*4
23618                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
23619 5EC0           8846         FC            mov	-4[bp],al
23620                                           !BCC_EOS
23621                                           ! 2816  line=find_vga_entry(mode);
23622                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
23623 5EC3           8A46         FC            mov	al,-4[bp]
23624 5EC6           30E4                       xor	ah,ah
23625 5EC8           50                         push	ax
23626                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
23627 5EC9           E8         1BD8            call	_find_vga_entry
23628 5ECC           44                         inc	sp
23629 5ECD           44                         inc	sp
23630                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
23631 5ECE           8846         FB            mov	-5[bp],al
23632                                           !BCC_EOS
23633                                           ! 2817  if(line==0xFF)return;
23634                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
23635 5ED1           8A46         FB            mov	al,-5[bp]
23636 5ED4           3C                     FF  cmp	al,#$FF
23637 5ED6           75           04            jne 	.1E3
23638                       00005ED8            .1E4:
23639 5ED8           89EC                       mov	sp,bp
23640 5EDA           5D                         pop	bp
23641 5EDB           C3                         ret
23642                                           !BCC_EOS
23643                                           ! 2818  biosfn_get_cursor_pos(page,&dummy,&cursor);
23644                       00005EDC            .1E3:
23645                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
23646 5EDC           8D5E         F2            lea	bx,-$E[bp]
23647 5EDF           53                         push	bx
23648                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
23649 5EE0           8D5E         F0            lea	bx,-$10[bp]
23650 5EE3           53                         push	bx
23651                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
23652 5EE4           8A46         06            mov	al,6[bp]
23653 5EE7           30E4                       xor	ah,ah
23654 5EE9           50                         push	ax
23655                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
23656 5EEA           E8         E55D            call	_biosfn_get_cursor_pos
23657 5EED           83C4                   06  add	sp,*6
23658                                           !BCC_EOS
23659                                           ! 2819  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
23660                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
23661 5EF0           8A46         F2            mov	al,-$E[bp]
23662                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
23663 5EF3           8846         FE            mov	-2[bp],al
23664                                           !BCC_EOS
23665                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
23666 5EF6           8B46         F2            mov	ax,-$E[bp]
23667 5EF9           30C0                       xor	al,al
23668                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
23669 5EFB           88E0                       mov	al,ah
23670 5EFD           30E4                       xor	ah,ah
23671                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
23672 5EFF           8846         FD            mov	-3[bp],al
23673                                           !BCC_EOS
23674                                           ! 2820  nbrows=read_byte(0x40,0
23675                                           ! 2820 x84)+1;
23676                                           ! Debug: list int = const $84 (used reg = )
23677 5F02           B8                   0084  mov	ax,#$84
23678 5F05           50                         push	ax
23679                                           ! Debug: list int = const $40 (used reg = )
23680 5F06           B8                   0040  mov	ax,*$40
23681 5F09           50                         push	ax
23682                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23683 5F0A           E8         1C83            call	_read_byte
23684 5F0D           83C4                   04  add	sp,*4
23685                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
23686 5F10           30E4                       xor	ah,ah
23687                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
23688 5F12           40                         inc	ax
23689 5F13           8946         F6            mov	-$A[bp],ax
23690                                           !BCC_EOS
23691                                           ! 2821  nbcols=read_word(0x40,0x4A);
23692                                           ! Debug: list int = const $4A (used reg = )
23693 5F16           B8                   004A  mov	ax,*$4A
23694 5F19           50                         push	ax
23695                                           ! Debug: list int = const $40 (used reg = )
23696 5F1A           B8                   0040  mov	ax,*$40
23697 5F1D           50                         push	ax
23698                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23699 5F1E           E8         1C82            call	_read_word
23700 5F21           83C4                   04  add	sp,*4
23701                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
23702 5F24           8946         F8            mov	-8[bp],ax
23703                                           !BCC_EOS
23704                                           ! 2822  switch(car)
23705 5F27           8A46         04            mov	al,4[bp]
23706                                           ! 2823   {
23707 5F2A           E9         01EA            br 	.1E7
23708                                           ! 2824    case 7:
23709                                           ! 2825     break;
23710                       00005F2D            .1E8:
23711 5F2D           E9         0208            br 	.1E5
23712                                           !BCC_EOS
23713                                           ! 2826    case 8:
23714                                           ! 2827     if(xcurs>0)xcurs--;
23715                       00005F30            .1E9:
23716                                           ! Debug: gt int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
23717 5F30           8A46         FE            mov	al,-2[bp]
23718 5F33           84C0                       test	al,al
23719 5F35           74           07            je  	.1EA
23720                       00005F37            .1EB:
23721                                           ! Debug: postdec unsigned char xcurs = [S+$12-4] (used reg = )
23722 5F37           8A46         FE            mov	al,-2[bp]
23723 5F3A           48                         dec	ax
23724 5F3B           8846         FE            mov	-2[bp],al
23725                                           !BCC_EOS
23726                                           ! 2828     break;
23727                       00005F3E            .1EA:
23728 5F3E           E9         01F7            br 	.1E5
23729                                           !BCC_EOS
23730                                           ! 2829    case '\r':
23731                                           ! 2830     xcurs=0;
23732                       00005F41            .1EC:
23733                                           ! Debug: eq int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
23734 5F41           30C0                       xor	al,al
23735 5F43           8846         FE            mov	-2[bp],al
23736                                           !BCC_EOS
23737                                           ! 2831     break;
23738 5F46           E9         01EF            br 	.1E5
23739                                           !BCC_EOS
23740                                           ! 2832    case '\n':
23741                                           ! 2833     ycurs++;
23742                       00005F49            .1ED:
23743                                           ! Debug: postinc unsigned char ycurs = [S+$12-5] (used reg = )
23744 5F49           8A46         FD            mov	al,-3[bp]
23745 5F4C           40                         inc	ax
23746 5F4D           8846         FD            mov	-3[bp],al
23747                                           !BCC_EOS
23748                                           ! 2834     break;
23749 5F50           E9         01E5            br 	.1E5
23750                                           !BCC_EOS
23751                                           ! 2835    case '\t':
23752                                           ! 2836     do
23753                       00005F53            .1EE:
23754                                           ! 2837      {
23755                       00005F53            .1F1:
23756                                           ! 2838       biosfn_write_teletype(' ',page,attr,flag);
23757                                           ! Debug: list unsigned char flag = [S+$12+8] (used reg = )
23758 5F53           8A46         0A            mov	al,$A[bp]
23759 5F56           30E4                       xor	ah,ah
23760 5F58           50                         push	ax
23761                                           ! Debug: list unsigned char attr = [S+$14+6] (used reg = )
23762 5F59           8A46         08            mov	al,8[bp]
23763 5F5C           30E4                       xor	ah,ah
23764 5F5E           50                         push	ax
23765                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
23766 5F5F           8A46         06            mov	al,6[bp]
23767 5F62           30E4                       xor	ah,ah
23768 5F64           50                         push	ax
23769                                           ! Debug: list int = const $20 (used reg = )
23770 5F65           B8                   0020  mov	ax,*$20
23771 5F68           50                         push	ax
23772                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
23773 5F69           E8         FF28            call	_biosfn_write_teletype
23774 5F6C           83C4                   08  add	sp,*8
23775                                           !BCC_EOS
23776                                           ! 2839       biosfn_get_cursor_pos(page,&dummy,&cursor);
23777                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
23778 5F6F           8D5E         F2            lea	bx,-$E[bp]
23779 5F72           53                         push	bx
23780                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
23781 5F73           8D5E         F0            lea	bx,-$10[bp]
23782 5F76           53                         push	bx
23783                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
23784 5F77           8A46         06            mov	al,6[bp]
23785 5F7A           30E4                       xor	ah,ah
23786 5F7C           50                         push	ax
23787                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
23788 5F7D           E8         E4CA            call	_biosfn_get_cursor_pos
23789 5F80           83C4                   06  add	sp,*6
23790                                           !BCC_EOS
23791                                           ! 2840       xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
23792                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
23793 5F83           8A46         F2            mov	al,-$E[bp]
23794                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
23795 5F86           8846         FE            mov	-2[bp],al
23796                                           !BCC_EOS
23797                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
23798 5F89           8B46         F2            mov	ax,-$E[bp]
23799 5F8C           30C0                       xor	al,al
23800                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
23801 5F8E           88E0                       mov	al,ah
23802 5F90           30E4                       xor	ah,ah
23803                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
23804 5F92           8846         FD            mov	-3[bp],al
23805                                           !BCC_EOS
23806                                           ! 2841      }while(xcurs%8==0);
23807                       00005F95            .1F0:
23808                                           ! Debug: mod int = const 8 to unsigned char xcurs = [S+$12-4] (used reg = )
23809 5F95           8A46         FE            mov	al,-2[bp]
23810 5F98           30E4                       xor	ah,ah
23811 5F9A           24                     07  and	al,*7
23812                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
23813 5F9C           84C0                       test	al,al
23814 5F9E           74           B3            je 	.1F1
23815                       00005FA0            .1F2:
23816                                           !BCC_EOS
23817                                           ! 2842     break;
23818                       00005FA0            .1EF:
23819 5FA0           E9         0195            br 	.1E5
23820                                           !BCC_EOS
23821                                           ! 2843    default:
23822                                           ! 2844     if(vga_modes[line].class==0x00)
23823                       00005FA3            .1F3:
23824                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
23825 5FA3           8A46         FB            mov	al,-5[bp]
23826 5FA6           30E4                       xor	ah,ah
23827 5FA8           B1                     03  mov	cl,*3
23828 5FAA           D3E0                       shl	ax,cl
23829 5FAC           89C3                       mov	bx,ax
23830 5FAE           81C3                 01FD  add	bx,#_vga_modes
23831                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
23832 5FB2           8A47         01            mov	al,1[bx]
23833 5FB5           84C0                       test	al,al
23834 5FB7         0F85         0082            bne 	.1F4
23835                       00005FBB            .1F5:
23836                                           ! 2845      {
23837                                           ! 2846       address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
23838                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
23839 5FBB           8A46         FD            mov	al,-3[bp]
23840 5FBE           30E4                       xor	ah,ah
23841 5FC0           8B4E         F8            mov	cx,-8[bp]
23842 5FC3           F7E9                       imul	cx
23843                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
23844                                           ! Debug: expression subtree swapping
23845 5FC5           0246         FE            add	al,-2[bp]
23846 5FC8           80D4                   00  adc	ah,*0
23847                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23848 5FCB           D1E0                       shl	ax,*1
23849 5FCD           50                         push	ax
23850                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
23851 5FCE           8B46         F8            mov	ax,-8[bp]
23852 5FD1           8B4E         F6            mov	cx,-$A[bp]
23853 5FD4           F7E9                       imul	cx
23854                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23855 5FD6           D1E0                       shl	ax,*1
23856                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
23857 5FD8           0C                     FF  or	al,#$FF
23858                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
23859                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
23860 5FDA           89C3                       mov	bx,ax
23861 5FDC           8A46         06            mov	al,6[bp]
23862 5FDF           30E4                       xor	ah,ah
23863 5FE1           93                         xchg	ax,bx
23864 5FE2           40                         inc	ax
23865 5FE3           89D9                       mov	cx,bx
23866 5FE5           F7E9                       imul	cx
23867                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
23868 5FE7           0346         EE            add	ax,0+..FFF6[bp]
23869 5FEA           44                         inc	sp
23870 5FEB           44                         inc	sp
23871                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
23872 5FEC           8946         F4            mov	-$C[bp],ax
23873                                           !BCC_EOS
23874                                           ! 2847       write_byte(vga_modes[line].sstart,address,car);
23875                                           ! Debug: list unsigned char car = [S+$12+2] (used reg = )
23876 5FEF           8A46         04            mov	al,4[bp]
23877 5FF2           30E4                       xor	ah,ah
23878 5FF4           50                         push	ax
23879                                           ! Debug: list unsigned short address = [S+$14-$E] (used reg = )
23880 5FF5           FF76         F4            push	-$C[bp]
23881                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$10] struct  = vga_modes+0 (used reg = )
23882 5FF8           8A46         FB            mov	al,-5[bp]
23883 5FFB           30E4                       xor	ah,ah
23884 5FFD           B1                     03  mov	cl,*3
23885 5FFF           D3E0                       shl	ax,cl
23886 6001           89C3                       mov	bx,ax
23887 6003           81C3                 01FD  add	bx,#_vga_modes
23888                                           ! Debug: list unsigned short = [bx+4] (used reg = )
23889 6007           FF77         04            push	4[bx]
23890                                           ! Debug: func () void = write_byte+0 (used reg = )
23891 600A           E8         1BA9            call	_write_byte
23892 600D           83C4                   06  add	sp,*6
23893                                           !BCC_EOS
23894                                           ! 2848       if(flag==3)
23895                                           ! Debug: logeq int = const 3 to unsigned char flag = [S+$12+8] (used reg = )
23896 6010           8A46         0A            mov	al,$A[bp]
23897 6013           3C                     03  cmp	al,*3
23898 6015           75           23            jne 	.1F6
23899                       00006017            .1F7:
23900                                           ! 2849        write_byte(vga_modes[line].sstart,address+1,attr);
23901                                           ! Debug: list unsigned char attr = [S+$12+6] (used reg = )
23902 6017           8A46         08            mov	al,8[bp]
23903 601A           30E4                       xor	ah,ah
23904 601C           50                         push	ax
23905                                           ! Debug: add int = const 1 to unsigned short address = [S+$14-$E] (used reg = )
23906 601D           8B46         F4            mov	ax,-$C[bp]
23907                                           ! Debug: list unsigned int = ax+1 (used reg = )
23908 6020           40                         inc	ax
23909 6021           50                         push	ax
23910                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$10] struct  = vga_modes+0 (used reg = )
23911 6022           8A46         FB            mov	al,-5[bp]
23912 6025           30E4                       xor	ah,ah
23913 6027           B1                     03  mov	cl,*3
23914 6029           D3E0                       shl	ax,cl
23915 602B           89C3                       mov	bx,ax
23916 602D           81C3                 01FD  add	bx,#_vga_modes
23917                                           ! Debug: list unsigned short = [bx+4] (used reg = )
23918 6031           FF77         04            push	4[bx]
23919                                           ! Debug: func () void = write_byte+0 (used reg = )
23920 6034           E8         1B7F            call	_write_byte
23921 6037           83C4                   06  add	sp,*6
23922                                           !BCC_EOS
23923                                           ! 2850      }
23924                       0000603A            .1F6:
23925                                           ! 2851     else
23926                                           ! 2852      {
23927 603A           E9         00D1            br 	.1F8
23928                       0000603D            .1F4:
23929                                           ! 2853       cheight=video_param_table[line_to_vpti[line]].cheight;
23930                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] unsigned char = line_to_vpti+0 (used reg = )
23931 603D           8A46         FB            mov	al,-5[bp]
23932 6040           30E4                       xor	ah,ah
23933 6042           89C3                       mov	bx,ax
23934                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
23935 6044           8A87       027D            mov	al,_line_to_vpti[bx]
23936 6048           30E4                       xor	ah,ah
23937 604A           B1                     06  mov	cl,*6
23938 604C           D3E0                       shl	ax,cl
23939 604E           89C3                       mov	bx,ax
23940 6050           81C3                 0291  add	bx,#_video_param_table
23941                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$12-3] (used reg = )
23942 6054           8A47         02            mov	al,2[bx]
23943 6057           8846         FF            mov	-1[bp],al
23944                                           !BCC_EOS
23945                                           ! 2854       bpp=vga_modes[line].pixbits;
23946                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
23947 605A           8A46         FB            mov	al,-5[bp]
23948 605D           30E4                       xor	ah,ah
23949 605F           B1                     03  mov	cl,*3
23950 6061           D3E0                       shl	ax,cl
23951 6063           89C3                       mov	bx,ax
23952 6065           81C3                 01FD  add	bx,#_vga_modes
23953                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
23954 6069           8A47         03            mov	al,3[bx]
23955 606C           8846         FA            mov	-6[bp],al
23956                                           !BCC_EOS
23957                                           ! 2855       switch(vga_modes[line].memmodel)
23958                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
23959 606F           8A46         FB            mov	al,-5[bp]
23960 6072           30E4                       xor	ah,ah
23961 6074           B1                     03  mov	cl,*3
23962 6076           D3E0                       shl	ax,cl
23963 6078           89C3                       mov	bx,ax
23964 607A           81C3                 01FD  add	bx,#_vga_modes
23965 607E           8A47         02            mov	al,2[bx]
23966                                           ! 2856        {
23967 6081           EB           77            jmp .1FB
23968                                           ! 2857         case 0x04:
23969                                           ! 2858         case 0x03:
23970                       00006083            .1FC:
23971                                           ! 2859           write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight);
23972                       00006083            .1FD:
23973                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
23974 6083           8A46         FF            mov	al,-1[bp]
23975 6086           30E4                       xor	ah,ah
23976 6088           50                         push	ax
23977                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
23978 6089           FF76         F8            push	-8[bp]
23979                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
23980 608C           8A46         FD            mov	al,-3[bp]
23981 608F           30E4                       xor	ah,ah
23982 6091           50                         push	ax
23983                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
23984 6092           8A46         FE            mov	al,-2[bp]
23985 6095           30E4                       xor	ah,ah
23986 6097           50                         push	ax
23987                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
23988 6098           8A46         08            mov	al,8[bp]
23989 609B           30E4                       xor	ah,ah
23990 609D           50                         push	ax
23991                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
23992 609E           8A46         04            mov	al,4[bp]
23993 60A1           30E4                       xor	ah,ah
23994 60A3           50                         push	ax
23995                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
23996 60A4           E8         F09C            call	_write_gfx_char_pl4
23997 60A7           83C4                   0C  add	sp,*$C
23998                                           !BCC_EOS
23999                                           ! 2860           break;
24000 60AA           EB           62            jmp .1F9
24001                                           !BCC_EOS
24002                                           ! 2861         case 0x02:
24003                                           ! 2862           write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp);
24004                       000060AC            .1FE:
24005                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
24006 60AC           8A46         FA            mov	al,-6[bp]
24007 60AF           30E4                       xor	ah,ah
24008 60B1           50                         push	ax
24009                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
24010 60B2           FF76         F8            push	-8[bp]
24011                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
24012 60B5           8A46         FD            mov	al,-3[bp]
24013 60B8           30E4                       xor	ah,ah
24014 60BA           50                         push	ax
24015                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
24016 60BB           8A46         FE            mov	al,-2[bp]
24017 60BE           30E4                       xor	ah,ah
24018 60C0           50                         push	ax
24019                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
24020 60C1           8A46         08            mov	al,8[bp]
24021 60C4           30E4                       xor	ah,ah
24022 60C6           50                         push	ax
24023                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
24024 60C7           8A46         04            mov	al,4[bp]
24025 60CA           30E4                       xor	ah,ah
24026 60CC           50                         push	ax
24027                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
24028 60CD           E8         F1E6            call	_write_gfx_char_cga
24029 60D0           83C4                   0C  add	sp,*$C
24030                                           !BCC_EOS
24031                                           ! 2863           break;
24032 60D3           EB           39            jmp .1F9
24033                                           !BCC_EOS
24034                                           ! 2864         case 0x05:
24035                                           ! 2865           write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
24036                       000060D5            .1FF:
24037                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
24038 60D5           FF76         F8            push	-8[bp]
24039                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
24040 60D8           8A46         FD            mov	al,-3[bp]
24041 60DB           30E4                       xor	ah,ah
24042 60DD           50                         push	ax
24043                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
24044 60DE           8A46         FE            mov	al,-2[bp]
24045 60E1           30E4                       xor	ah,ah
24046 60E3           50                         push	ax
24047                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
24048 60E4           8A46         08            mov	al,8[bp]
24049 60E7           30E4                       xor	ah,ah
24050 60E9           50                         push	ax
24051                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
24052 60EA           8A46         04            mov	al,4[bp]
24053 60ED           30E4                       xor	ah,ah
24054 60EF           50                         push	ax
24055                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
24056 60F0           E8         F3C6            call	_write_gfx_char_lin
24057 60F3           83C4                   0A  add	sp,*$A
24058                                           !BCC_EOS
24059                                           ! 2866           break;
24060 60F6           EB           16            jmp .1F9
24061                                           !BCC_EOS
24062                                           ! 2867        }
24063                                           ! 2868      }
24064 60F8           EB           14            jmp .1F9
24065                       000060FA            .1FB:
24066 60FA           2C                     02  sub	al,*2
24067 60FC           74           AE            je 	.1FE
24068 60FE           2C                     01  sub	al,*1
24069 6100         0F84         FF7F            beq 	.1FD
24070 6104           2C                     01  sub	al,*1
24071 6106         0F84         FF79            beq 	.1FC
24072 610A           2C                     01  sub	al,*1
24073 610C           74           C7            je 	.1FF
24074                       0000610E            .1F9:
24075                                           ! 2869     xcurs++;
24076                       0000610E            .1F8:
24077                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
24078 610E           8A46         FE            mov	al,-2[bp]
24079 6111           40                         inc	ax
24080 6112           8846         FE            mov	-2[bp],al
24081                                           !BCC_EOS
24082                                           ! 2870   }
24083                                           ! 2871  if(xcurs==nbcols)
24084 6115           EB           21            jmp .1E5
24085                       00006117            .1E7:
24086 6117           2C                     07  sub	al,*7
24087 6119         0F84         FE10            beq 	.1E8
24088 611D           2C                     01  sub	al,*1
24089 611F         0F84         FE0D            beq 	.1E9
24090 6123           2C                     01  sub	al,*1
24091 6125         0F84         FE2A            beq 	.1EE
24092 6129           2C                     01  sub	al,*1
24093 612B         0F84         FE1A            beq 	.1ED
24094 612F           2C                     03  sub	al,*3
24095 6131         0F84         FE0C            beq 	.1EC
24096 6135           E9         FE6B            br 	.1F3
24097                       00006138            .1E5:
24098                       FFFFFFEE            ..FFF6	=	-$12
24099                                           ! Debug: logeq unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
24100 6138           8A46         FE            mov	al,-2[bp]
24101 613B           30E4                       xor	ah,ah
24102 613D           3B46         F8            cmp	ax,-8[bp]
24103 6140           75           0C            jne 	.200
24104                       00006142            .201:
24105                                           ! 2872   {xcurs=0;
24106                                           ! Debug: eq int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
24107 6142           30C0                       xor	al,al
24108 6144           8846         FE            mov	-2[bp],al
24109                                           !BCC_EOS
24110                                           ! 2873    ycurs++;
24111                                           ! Debug: postinc unsigned char ycurs = [S+$12-5] (used reg = )
24112 6147           8A46         FD            mov	al,-3[bp]
24113 614A           40                         inc	ax
24114 614B           8846         FD            mov	-3[bp],al
24115                                           !BCC_EOS
24116                                           ! 2874   }
24117                                           ! 2875  if(ycurs==nbrows)
24118                       0000614E            .200:
24119                                           ! Debug: logeq unsigned short nbrows = [S+$12-$C] to unsigned char ycurs = [S+$12-5] (used reg = )
24120 614E           8A46         FD            mov	al,-3[bp]
24121 6151           30E4                       xor	ah,ah
24122 6153           3B46         F6            cmp	ax,-$A[bp]
24123 6156           75           70            jne 	.202
24124                       00006158            .203:
24125                                           ! 2876   {
24126                                           ! 2877    if(vga_modes[line].class==0x00)
24127                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
24128 6158           8A46         FB            mov	al,-5[bp]
24129 615B           30E4                       xor	ah,ah
24130 615D           B1                     03  mov	cl,*3
24131 615F           D3E0                       shl	ax,cl
24132 6161           89C3                       mov	bx,ax
24133 6163           81C3                 01FD  add	bx,#_vga_modes
24134                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
24135 6167           8A47         01            mov	al,1[bx]
24136 616A           84C0                       test	al,al
24137 616C           75           2A            jne 	.204
24138                       0000616E            .205:
24139                                           ! 2878     {
24140                                           ! 2879      biosfn_scroll(0x01,0x07,0,0,nbrows-1,nbcols-1,page,1);
24141                                           ! Debug: list int = const 1 (used reg = )
24142 616E           B8                   0001  mov	ax,*1
24143 6171           50                         push	ax
24144                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
24145 6172           8A46         06            mov	al,6[bp]
24146 6175           30E4                       xor	ah,ah
24147 6177           50                         push	ax
24148                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$16-$A] (used reg = )
24149 6178           8B46         F8            mov	ax,-8[bp]
24150                                           ! Debug: list unsigned int = ax-1 (used reg = )
24151 617B           48                         dec	ax
24152 617C           50                         push	ax
24153                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$18-$C] (used reg = )
24154 617D           8B46         F6            mov	ax,-$A[bp]
24155                                           ! Debug: list unsigned int = ax-1 (used reg = )
24156 6180           48                         dec	ax
24157 6181           50                         push	ax
24158                                           ! Debug: list int = const 0 (used reg = )
24159 6182           31C0                       xor	ax,ax
24160 6184           50                         push	ax
24161                                           ! Debug: list int = const 0 (used reg = )
24162 6185           31C0                       xor	ax,ax
24163 6187           50                         push	ax
24164                                           ! Debug: list int = const 7 (used reg = )
24165 6188           B8                   0007  mov	ax,*7
24166 618B           50                         push	ax
24167                                           ! Debug: list int = const 1 (used reg = )
24168 618C           B8                   0001  mov	ax,*1
24169 618F           50                         push	ax
24170                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
24171 6190           E8         E7AF            call	_biosfn_scroll
24172 6193           83C4                   10  add	sp,*$10
24173                                           !BCC_EOS
24174                                           ! 2880     }
24175                                           ! 2881    else
24176                                           ! 2882     {
24177 6196           EB           27            jmp .206
24178                       00006198            .204:
24179                                           ! 2883      biosfn_scroll(0x01,0x00,0,0,nbrows-1,nbcols-1,page,1);
24180                                           ! Debug: list int = const 1 (used reg = )
24181 6198           B8                   0001  mov	ax,*1
24182 619B           50                         push	ax
24183                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
24184 619C           8A46         06            mov	al,6[bp]
24185 619F           30E4                       xor	ah,ah
24186 61A1           50                         push	ax
24187                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$16-$A] (used reg = )
24188 61A2           8B46         F8            mov	ax,-8[bp]
24189                                           ! Debug: list unsigned int = ax-1 (used reg = )
24190 61A5           48                         dec	ax
24191 61A6           50                         push	ax
24192                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$18-$C] (used reg = )
24193 61A7           8B46         F6            mov	ax,-$A[bp]
24194                                           ! Debug: list unsigned int = ax-1 (used reg = )
24195 61AA           48                         dec	ax
24196 61AB           50                         push	ax
24197                                           ! Debug: list int = const 0 (used reg = )
24198 61AC           31C0                       xor	ax,ax
24199 61AE           50                         push	ax
24200                                           ! Debug: list int = const 0 (used reg = )
24201 61AF           31C0                       xor	ax,ax
24202 61B1           50                         push	ax
24203                                           ! Debug: list int = const 0 (used reg = )
24204 61B2           31C0                       xor	ax,ax
24205 61B4           50                         push	ax
24206                                           ! Debug: list int = const 1 (used reg = )
24207 61B5           B8                   0001  mov	ax,*1
24208 61B8           50                         push	ax
24209                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
24210 61B9           E8         E786            call	_biosfn_scroll
24211 61BC           83C4                   10  add	sp,*$10
24212                                           !BCC_EOS
24213                                           ! 2884     }
24214                                           ! 2885    ycurs-=1;
24215                       000061BF            .206:
24216                                           ! Debug: subab int = const 1 to unsigned char ycurs = [S+$12-5] (used reg = )
24217 61BF           8A46         FD            mov	al,-3[bp]
24218 61C2           30E4                       xor	ah,ah
24219 61C4           48                         dec	ax
24220 61C5           8846         FD            mov	-3[bp],al
24221                                           !BCC_EOS
24222                                           ! 2886   }
24223                                           ! 2887  cursor=ycurs; cursor<<=8; cursor+=xcurs;
24224                       000061C8            .202:
24225                                           ! Debug: eq unsigned char ycurs = [S+$12-5] to unsigned short cursor = [S+$12-$10] (used reg = )
24226 61C8           8A46         FD            mov	al,-3[bp]
24227 61CB           30E4                       xor	ah,ah
24228 61CD           8946         F2            mov	-$E[bp],ax
24229                                           !BCC_EOS
24230                                           ! Debug: slab int = const 8 to unsigned short cursor = [S+$12-$10] (used reg = )
24231 61D0           8B46         F2            mov	ax,-$E[bp]
24232 61D3           88C4                       mov	ah,al
24233 61D5           30C0                       xor	al,al
24234 61D7           8946         F2            mov	-$E[bp],ax
24235                                           !BCC_EOS
24236                                           ! Debug: addab unsigned char xcurs = [S+$12-4] to unsigned short cursor = [S+$12-$10] (used reg = )
24237 61DA           8B46         F2            mov	ax,-$E[bp]
24238 61DD           0246         FE            add	al,-2[bp]
24239 61E0           80D4                   00  adc	ah,*0
24240 61E3           8946         F2            mov	-$E[bp],ax
24241                                           !BCC_EOS
24242                                           ! 2888  biosfn_set_cursor_pos(page,cursor);
24243                                           ! Debug: list unsigned short cursor = [S+$12-$10] (used reg = )
24244 61E6           FF76         F2            push	-$E[bp]
24245                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
24246 61E9           8A46         06            mov	al,6[bp]
24247 61EC           30E4                       xor	ah,ah
24248 61EE           50                         push	ax
24249                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
24250 61EF           E8         E158            call	_biosfn_set_cursor_pos
24251 61F2           83C4                   04  add	sp,*4
24252                                           !BCC_EOS
24253                                           ! 2889 }
24254 61F5           89EC                       mov	sp,bp
24255 61F7           5D                         pop	bp
24256 61F8           C3                         ret
24257                                           ! 2890 #asm
24258                                           !BCC_ASM
24259                       00000008            _biosfn_write_teletype.flag	set	8
24260                       00000006            _biosfn_write_teletype.attr	set	6
24261                       00000004            _biosfn_write_teletype.page	set	4
24262                       00000002            _biosfn_write_teletype.car	set	2
24263                       000061F9            biosfn_get_video_mode:
24264 61F9           1E                           push ds
24265 61FA           B8                   0040    mov ax, # 0x40
24266 61FD           8ED8                         mov ds, ax
24267 61FF           53                           push bx
24268 6200           BB                   0062    mov bx, # 0x62
24269 6203           8A07                         mov al, [bx]
24270 6205           5B                           pop bx
24271 6206           88C7                         mov bh, al
24272 6208           53                           push bx
24273 6209           BB                   0087    mov bx, # 0x87
24274 620C           8A27                         mov ah, [bx]
24275 620E           80E4                   80    and ah, #0x80
24276 6211           BB                   0049    mov bx, # 0x49
24277 6214           8A07                         mov al, [bx]
24278 6216           08E0                         or al, ah
24279 6218           BB                   004A    mov bx, # 0x4A
24280 621B           8A27                         mov ah, [bx]
24281 621D           5B                           pop bx
24282 621E           1F                           pop ds
24283 621F           C3                           ret
24284                                           ! 2912 endasm
24285                                           !BCC_ENDASM
24286                                           ! 2913 #asm
24287                                           !BCC_ASM
24288                       00000008            _biosfn_write_teletype.flag	set	8
24289                       00000006            _biosfn_write_teletype.attr	set	6
24290                       00000004            _biosfn_write_teletype.page	set	4
24291                       00000002            _biosfn_write_teletype.car	set	2
24292                       00006220            biosfn_group_10:
24293 6220           3C                     00    cmp al, #0x00
24294 6222           75           02              jne int10_test_1001
24295 6224           EB           61              jmp biosfn_set_single_palette_reg
24296                       00006226            int10_test_1001:
24297 6226           3C                     01    cmp al, #0x01
24298 6228           75           02              jne int10_test_1002
24299 622A           EB           75              jmp biosfn_set_overscan_border_color
24300                       0000622C            int10_test_1002:
24301 622C           3C                     02    cmp al, #0x02
24302 622E           75           02              jne int10_test_1003
24303 6230           EB           77              jmp biosfn_set_all_palette_reg
24304                       00006232            int10_test_1003:
24305 6232           3C                     03    cmp al, #0x03
24306 6234           75           03              jne int10_test_1007
24307 6236           E9         009D              jmp biosfn_toggle_intensity
24308                       00006239            int10_test_1007:
24309 6239           3C                     07    cmp al, #0x07
24310 623B           75           03              jne int10_test_1008
24311 623D           E9         00BC              jmp biosfn_get_single_palette_reg
24312                       00006240            int10_test_1008:
24313 6240           3C                     08    cmp al, #0x08
24314 6242           75           03              jne int10_test_1009
24315 6244           E9         00D9              jmp biosfn_read_overscan_border_color
24316                       00006247            int10_test_1009:
24317 6247           3C                     09    cmp al, #0x09
24318 6249           75           03              jne int10_test_1010
24319 624B           E9         00E0              jmp biosfn_get_all_palette_reg
24320                       0000624E            int10_test_1010:
24321 624E           3C                     10    cmp al, #0x10
24322 6250           75           03              jne int10_test_1012
24323 6252           E9         011A              jmp biosfn_set_single_dac_reg
24324                       00006255            int10_test_1012:
24325 6255           3C                     12    cmp al, #0x12
24326 6257           75           03              jne int10_test_1013
24327 6259           E9         012C              jmp biosfn_set_all_dac_reg
24328                       0000625C            int10_test_1013:
24329 625C           3C                     13    cmp al, #0x13
24330 625E           75           03              jne int10_test_1015
24331 6260           E9         014D              jmp biosfn_select_video_dac_color_page
24332                       00006263            int10_test_1015:
24333 6263           3C                     15    cmp al, #0x15
24334 6265           75           03              jne int10_test_1017
24335 6267           E9         0189              jmp biosfn_read_single_dac_reg
24336                       0000626A            int10_test_1017:
24337 626A           3C                     17    cmp al, #0x17
24338 626C           75           03              jne int10_test_1018
24339 626E           E9         019D              jmp biosfn_read_all_dac_reg
24340                       00006271            int10_test_1018:
24341 6271           3C                     18    cmp al, #0x18
24342 6273           75           03              jne int10_test_1019
24343 6275           E9         01BE              jmp biosfn_set_pel_mask
24344                       00006278            int10_test_1019:
24345 6278           3C                     19    cmp al, #0x19
24346 627A           75           03              jne int10_test_101A
24347 627C           E9         01C2              jmp biosfn_read_pel_mask
24348                       0000627F            int10_test_101A:
24349 627F           3C                     1A    cmp al, #0x1a
24350 6281           75           03              jne int10_group_10_unknown
24351 6283           E9         01C6              jmp biosfn_read_video_dac_state
24352                       00006286            int10_group_10_unknown:
24353 6286           C3                           ret
24354                       00006287            biosfn_set_single_palette_reg:
24355 6287           80FB                   14    cmp bl, #0x14
24356 628A           77           14              ja no_actl_reg1
24357 628C           50                           push ax
24358 628D           52                           push dx
24359 628E           BA                   03DA    mov dx, # 0x3da
24360 6291           EC                           in al, dx
24361 6292           BA                   03C0    mov dx, # 0x3c0
24362 6295           88D8                         mov al, bl
24363 6297           EE                           out dx, al
24364 6298           88F8                         mov al, bh
24365 629A           EE                           out dx, al
24366 629B           B0                     20    mov al, #0x20
24367 629D           EE                           out dx, al
24368 629E           5A                           pop dx
24369 629F           58                           pop ax
24370                       000062A0            no_actl_reg1:
24371 62A0           C3                           ret
24372                                           ! 2994 endasm
24373                                           !BCC_ENDASM
24374                                           ! 2995 #asm
24375                                           !BCC_ASM
24376                       00000008            _biosfn_write_teletype.flag	set	8
24377                       00000006            _biosfn_write_teletype.attr	set	6
24378                       00000004            _biosfn_write_teletype.page	set	4
24379                       00000002            _biosfn_write_teletype.car	set	2
24380                       000062A1            biosfn_set_overscan_border_color:
24381 62A1           53                           push bx
24382 62A2           B3                     11    mov bl, #0x11
24383 62A4           E8         FFE0              call biosfn_set_single_palette_reg
24384 62A7           5B                           pop bx
24385 62A8           C3                           ret
24386                                           ! 3002 endasm
24387                                           !BCC_ENDASM
24388                                           ! 3003 #asm
24389                                           !BCC_ASM
24390                       00000008            _biosfn_write_teletype.flag	set	8
24391                       00000006            _biosfn_write_teletype.attr	set	6
24392                       00000004            _biosfn_write_teletype.page	set	4
24393                       00000002            _biosfn_write_teletype.car	set	2
24394                       000062A9            biosfn_set_all_palette_reg:
24395 62A9           50                           push ax
24396 62AA           53                           push bx
24397 62AB           51                           push cx
24398 62AC           52                           push dx
24399 62AD           89D3                         mov bx, dx
24400 62AF           BA                   03DA    mov dx, # 0x3da
24401 62B2           EC                           in al, dx
24402 62B3           B1                     00    mov cl, #0x00
24403 62B5           BA                   03C0    mov dx, # 0x3c0
24404                       000062B8            set_palette_loop:
24405 62B8           88C8                         mov al, cl
24406 62BA           EE                           out dx, al
24407 62BB           26                           seg es
24408 62BC           8A07                         mov al, [bx]
24409 62BE           EE                           out dx, al
24410 62BF           43                           inc bx
24411 62C0           FEC1                         inc cl
24412 62C2           80F9                   10    cmp cl, #0x10
24413 62C5           75           F1              jne set_palette_loop
24414 62C7           B0                     11    mov al, #0x11
24415 62C9           EE                           out dx, al
24416 62CA           26                           seg es
24417 62CB           8A07                         mov al, [bx]
24418 62CD           EE                           out dx, al
24419 62CE           B0                     20    mov al, #0x20
24420 62D0           EE                           out dx, al
24421 62D1           5A                           pop dx
24422 62D2           59                           pop cx
24423 62D3           5B                           pop bx
24424 62D4           58                           pop ax
24425 62D5           C3                           ret
24426                                           ! 3036 endasm
24427                                           !BCC_ENDASM
24428                                           ! 3037 #asm
24429                                           !BCC_ASM
24430                       00000008            _biosfn_write_teletype.flag	set	8
24431                       00000006            _biosfn_write_teletype.attr	set	6
24432                       00000004            _biosfn_write_teletype.page	set	4
24433                       00000002            _biosfn_write_teletype.car	set	2
24434                       000062D6            biosfn_toggle_intensity:
24435 62D6           50                           push ax
24436 62D7           53                           push bx
24437 62D8           52                           push dx
24438 62D9           BA                   03DA    mov dx, # 0x3da
24439 62DC           EC                           in al, dx
24440 62DD           BA                   03C0    mov dx, # 0x3c0
24441 62E0           B0                     10    mov al, #0x10
24442 62E2           EE                           out dx, al
24443 62E3           BA                   03C1    mov dx, # 0x3c1
24444 62E6           EC                           in al, dx
24445 62E7           24                     F7    and al, #0xf7
24446 62E9           80E3                   01    and bl, #0x01
24447 62EC           C0E3                   03    shl bl, 3
24448 62EF           08D8                         or al, bl
24449 62F1           BA                   03C0    mov dx, # 0x3c0
24450 62F4           EE                           out dx, al
24451 62F5           B0                     20    mov al, #0x20
24452 62F7           EE                           out dx, al
24453 62F8           5A                           pop dx
24454 62F9           5B                           pop bx
24455 62FA           58                           pop ax
24456 62FB           C3                           ret
24457                                           ! 3061 endasm
24458                                           !BCC_ENDASM
24459                                           ! 3062 #asm
24460                                           !BCC_ASM
24461                       00000008            _biosfn_write_teletype.flag	set	8
24462                       00000006            _biosfn_write_teletype.attr	set	6
24463                       00000004            _biosfn_write_teletype.page	set	4
24464                       00000002            _biosfn_write_teletype.car	set	2
24465                       000062FC            biosfn_get_single_palette_reg:
24466 62FC           80FB                   14    cmp bl, #0x14
24467 62FF           77           1E              ja no_actl_reg2
24468 6301           50                           push ax
24469 6302           52                           push dx
24470 6303           BA                   03DA    mov dx, # 0x3da
24471 6306           EC                           in al, dx
24472 6307           BA                   03C0    mov dx, # 0x3c0
24473 630A           88D8                         mov al, bl
24474 630C           EE                           out dx, al
24475 630D           BA                   03C1    mov dx, # 0x3c1
24476 6310           EC                           in al, dx
24477 6311           88C7                         mov bh, al
24478 6313           BA                   03DA    mov dx, # 0x3da
24479 6316           EC                           in al, dx
24480 6317           BA                   03C0    mov dx, # 0x3c0
24481 631A           B0                     20    mov al, #0x20
24482 631C           EE                           out dx, al
24483 631D           5A                           pop dx
24484 631E           58                           pop ax
24485                       0000631F            no_actl_reg2:
24486 631F           C3                           ret
24487                                           ! 3085 endasm
24488                                           !BCC_ENDASM
24489                                           ! 3086 #asm
24490                                           !BCC_ASM
24491                       00000008            _biosfn_write_teletype.flag	set	8
24492                       00000006            _biosfn_write_teletype.attr	set	6
24493                       00000004            _biosfn_write_teletype.page	set	4
24494                       00000002            _biosfn_write_teletype.car	set	2
24495                       00006320            biosfn_read_overscan_border_color:
24496 6320           50                           push ax
24497 6321           53                           push bx
24498 6322           B3                     11    mov bl, #0x11
24499 6324           E8         FFD5              call biosfn_get_single_palette_reg
24500 6327           88F8                         mov al, bh
24501 6329           5B                           pop bx
24502 632A           88C7                         mov bh, al
24503 632C           58                           pop ax
24504 632D           C3                           ret
24505                                           ! 3097 endasm
24506                                           !BCC_ENDASM
24507                                           ! 3098 #asm
24508                                           !BCC_ASM
24509                       00000008            _biosfn_write_teletype.flag	set	8
24510                       00000006            _biosfn_write_teletype.attr	set	6
24511                       00000004            _biosfn_write_teletype.page	set	4
24512                       00000002            _biosfn_write_teletype.car	set	2
24513                       0000632E            biosfn_get_all_palette_reg:
24514 632E           50                           push ax
24515 632F           53                           push bx
24516 6330           51                           push cx
24517 6331           52                           push dx
24518 6332           89D3                         mov bx, dx
24519 6334           B1                     00    mov cl, #0x00
24520                       00006336            get_palette_loop:
24521 6336           BA                   03DA    mov dx, # 0x3da
24522 6339           EC                           in al, dx
24523 633A           BA                   03C0    mov dx, # 0x3c0
24524 633D           88C8                         mov al, cl
24525 633F           EE                           out dx, al
24526 6340           BA                   03C1    mov dx, # 0x3c1
24527 6343           EC                           in al, dx
24528 6344           26                           seg es
24529 6345           8807                         mov [bx], al
24530 6347           43                           inc bx
24531 6348           FEC1                         inc cl
24532 634A           80F9                   10    cmp cl, #0x10
24533 634D           75           E7              jne get_palette_loop
24534 634F           BA                   03DA    mov dx, # 0x3da
24535 6352           EC                           in al, dx
24536 6353           BA                   03C0    mov dx, # 0x3c0
24537 6356           B0                     11    mov al, #0x11
24538 6358           EE                           out dx, al
24539 6359           BA                   03C1    mov dx, # 0x3c1
24540 635C           EC                           in al, dx
24541 635D           26                           seg es
24542 635E           8807                         mov [bx], al
24543 6360           BA                   03DA    mov dx, # 0x3da
24544 6363           EC                           in al, dx
24545 6364           BA                   03C0    mov dx, # 0x3c0
24546 6367           B0                     20    mov al, #0x20
24547 6369           EE                           out dx, al
24548 636A           5A                           pop dx
24549 636B           59                           pop cx
24550 636C           5B                           pop bx
24551 636D           58                           pop ax
24552 636E           C3                           ret
24553                                           ! 3139 endasm
24554                                           !BCC_ENDASM
24555                                           ! 3140 #asm
24556                                           !BCC_ASM
24557                       00000008            _biosfn_write_teletype.flag	set	8
24558                       00000006            _biosfn_write_teletype.attr	set	6
24559                       00000004            _biosfn_write_teletype.page	set	4
24560                       00000002            _biosfn_write_teletype.car	set	2
24561                       0000636F            biosfn_set_single_dac_reg:
24562 636F           50                           push ax
24563 6370           52                           push dx
24564 6371           BA                   03C8    mov dx, # 0x3c8
24565 6374           88D8                         mov al, bl
24566 6376           EE                           out dx, al
24567 6377           BA                   03C9    mov dx, # 0x3c9
24568 637A           58                           pop ax
24569 637B           50                           push ax
24570 637C           88E0                         mov al, ah
24571 637E           EE                           out dx, al
24572 637F           88E8                         mov al, ch
24573 6381           EE                           out dx, al
24574 6382           88C8                         mov al, cl
24575 6384           EE                           out dx, al
24576 6385           5A                           pop dx
24577 6386           58                           pop ax
24578 6387           C3                           ret
24579                                           ! 3159 endasm
24580                                           !BCC_ENDASM
24581                                           ! 3160 #asm
24582                                           !BCC_ASM
24583                       00000008            _biosfn_write_teletype.flag	set	8
24584                       00000006            _biosfn_write_teletype.attr	set	6
24585                       00000004            _biosfn_write_teletype.page	set	4
24586                       00000002            _biosfn_write_teletype.car	set	2
24587                       00006388            biosfn_set_all_dac_reg:
24588 6388           50                           push ax
24589 6389           53                           push bx
24590 638A           51                           push cx
24591 638B           52                           push dx
24592 638C           BA                   03C8    mov dx, # 0x3c8
24593 638F           88D8                         mov al, bl
24594 6391           EE                           out dx, al
24595 6392           5A                           pop dx
24596 6393           52                           push dx
24597 6394           89D3                         mov bx, dx
24598 6396           BA                   03C9    mov dx, # 0x3c9
24599                       00006399            set_dac_loop:
24600 6399           26                           seg es
24601 639A           8A07                         mov al, [bx]
24602 639C           EE                           out dx, al
24603 639D           43                           inc bx
24604 639E           26                           seg es
24605 639F           8A07                         mov al, [bx]
24606 63A1           EE                           out dx, al
24607 63A2           43                           inc bx
24608 63A3           26                           seg es
24609 63A4           8A07                         mov al, [bx]
24610 63A6           EE                           out dx, al
24611 63A7           43                           inc bx
24612 63A8           49                           dec cx
24613 63A9           75           EE              jnz set_dac_loop
24614 63AB           5A                           pop dx
24615 63AC           59                           pop cx
24616 63AD           5B                           pop bx
24617 63AE           58                           pop ax
24618 63AF           C3                           ret
24619                                           ! 3193 endasm
24620                                           !BCC_ENDASM
24621                                           ! 3194 #asm
24622                                           !BCC_ASM
24623                       00000008            _biosfn_write_teletype.flag	set	8
24624                       00000006            _biosfn_write_teletype.attr	set	6
24625                       00000004            _biosfn_write_teletype.page	set	4
24626                       00000002            _biosfn_write_teletype.car	set	2
24627                       000063B0            biosfn_select_video_dac_color_page:
24628 63B0           50                           push ax
24629 63B1           53                           push bx
24630 63B2           52                           push dx
24631 63B3           BA                   03DA    mov dx, # 0x3da
24632 63B6           EC                           in al, dx
24633 63B7           BA                   03C0    mov dx, # 0x3c0
24634 63BA           B0                     10    mov al, #0x10
24635 63BC           EE                           out dx, al
24636 63BD           BA                   03C1    mov dx, # 0x3c1
24637 63C0           EC                           in al, dx
24638 63C1           80E3                   01    and bl, #0x01
24639 63C4           75           0D              jnz set_dac_page
24640 63C6           24                     7F    and al, #0x7f
24641 63C8           C0E7                   07    shl bh, 7
24642 63CB           08F8                         or al, bh
24643 63CD           BA                   03C0    mov dx, # 0x3c0
24644 63D0           EE                           out dx, al
24645 63D1           EB           19              jmp set_actl_normal
24646                       000063D3            set_dac_page:
24647 63D3           50                           push ax
24648 63D4           BA                   03DA    mov dx, # 0x3da
24649 63D7           EC                           in al, dx
24650 63D8           BA                   03C0    mov dx, # 0x3c0
24651 63DB           B0                     14    mov al, #0x14
24652 63DD           EE                           out dx, al
24653 63DE           58                           pop ax
24654 63DF           24                     80    and al, #0x80
24655 63E1           75           03              jnz set_dac_16_page
24656 63E3           C0E7                   02    shl bh, 2
24657                       000063E6            set_dac_16_page:
24658 63E6           80E7                   0F    and bh, #0x0f
24659 63E9           88F8                         mov al, bh
24660 63EB           EE                           out dx, al
24661                       000063EC            set_actl_normal:
24662 63EC           B0                     20    mov al, #0x20
24663 63EE           EE                           out dx, al
24664 63EF           5A                           pop dx
24665 63F0           5B                           pop bx
24666 63F1           58                           pop ax
24667 63F2           C3                           ret
24668                                           ! 3236 endasm
24669                                           !BCC_ENDASM
24670                                           ! 3237 #asm
24671                                           !BCC_ASM
24672                       00000008            _biosfn_write_teletype.flag	set	8
24673                       00000006            _biosfn_write_teletype.attr	set	6
24674                       00000004            _biosfn_write_teletype.page	set	4
24675                       00000002            _biosfn_write_teletype.car	set	2
24676                       000063F3            biosfn_read_single_dac_reg:
24677 63F3           50                           push ax
24678 63F4           52                           push dx
24679 63F5           BA                   03C7    mov dx, # 0x3c7
24680 63F8           88D8                         mov al, bl
24681 63FA           EE                           out dx, al
24682 63FB           58                           pop ax
24683 63FC           88C4                         mov ah, al
24684 63FE           BA                   03C9    mov dx, # 0x3c9
24685 6401           EC                           in al, dx
24686 6402           86E0                         xchg al, ah
24687 6404           50                           push ax
24688 6405           EC                           in al, dx
24689 6406           88C5                         mov ch, al
24690 6408           EC                           in al, dx
24691 6409           88C1                         mov cl, al
24692 640B           5A                           pop dx
24693 640C           58                           pop ax
24694 640D           C3                           ret
24695                                           ! 3257 endasm
24696                                           !BCC_ENDASM
24697                                           ! 3258 #asm
24698                                           !BCC_ASM
24699                       00000008            _biosfn_write_teletype.flag	set	8
24700                       00000006            _biosfn_write_teletype.attr	set	6
24701                       00000004            _biosfn_write_teletype.page	set	4
24702                       00000002            _biosfn_write_teletype.car	set	2
24703                       0000640E            biosfn_read_all_dac_reg:
24704 640E           50                           push ax
24705 640F           53                           push bx
24706 6410           51                           push cx
24707 6411           52                           push dx
24708 6412           BA                   03C7    mov dx, # 0x3c7
24709 6415           88D8                         mov al, bl
24710 6417           EE                           out dx, al
24711 6418           5A                           pop dx
24712 6419           52                           push dx
24713 641A           89D3                         mov bx, dx
24714 641C           BA                   03C9    mov dx, # 0x3c9
24715                       0000641F            read_dac_loop:
24716 641F           EC                           in al, dx
24717 6420           26                           seg es
24718 6421           8807                         mov [bx], al
24719 6423           43                           inc bx
24720 6424           EC                           in al, dx
24721 6425           26                           seg es
24722 6426           8807                         mov [bx], al
24723 6428           43                           inc bx
24724 6429           EC                           in al, dx
24725 642A           26                           seg es
24726 642B           8807                         mov [bx], al
24727 642D           43                           inc bx
24728 642E           49                           dec cx
24729 642F           75           EE              jnz read_dac_loop
24730 6431           5A                           pop dx
24731 6432           59                           pop cx
24732 6433           5B                           pop bx
24733 6434           58                           pop ax
24734 6435           C3                           ret
24735                                           ! 3291 endasm
24736                                           !BCC_ENDASM
24737                                           ! 3292 #asm
24738                                           !BCC_ASM
24739                       00000008            _biosfn_write_teletype.flag	set	8
24740                       00000006            _biosfn_write_teletype.attr	set	6
24741                       00000004            _biosfn_write_teletype.page	set	4
24742                       00000002            _biosfn_write_teletype.car	set	2
24743                       00006436            biosfn_set_pel_mask:
24744 6436           50                           push ax
24745 6437           52                           push dx
24746 6438           BA                   03C6    mov dx, # 0x3c6
24747 643B           88D8                         mov al, bl
24748 643D           EE                           out dx, al
24749 643E           5A                           pop dx
24750 643F           58                           pop ax
24751 6440           C3                           ret
24752                                           ! 3302 endasm
24753                                           !BCC_ENDASM
24754                                           ! 3303 #asm
24755                                           !BCC_ASM
24756                       00000008            _biosfn_write_teletype.flag	set	8
24757                       00000006            _biosfn_write_teletype.attr	set	6
24758                       00000004            _biosfn_write_teletype.page	set	4
24759                       00000002            _biosfn_write_teletype.car	set	2
24760                       00006441            biosfn_read_pel_mask:
24761 6441           50                           push ax
24762 6442           52                           push dx
24763 6443           BA                   03C6    mov dx, # 0x3c6
24764 6446           EC                           in al, dx
24765 6447           88C3                         mov bl, al
24766 6449           5A                           pop dx
24767 644A           58                           pop ax
24768 644B           C3                           ret
24769                                           ! 3313 endasm
24770                                           !BCC_ENDASM
24771                                           ! 3314 #asm
24772                                           !BCC_ASM
24773                       00000008            _biosfn_write_teletype.flag	set	8
24774                       00000006            _biosfn_write_teletype.attr	set	6
24775                       00000004            _biosfn_write_teletype.page	set	4
24776                       00000002            _biosfn_write_teletype.car	set	2
24777                       0000644C            biosfn_read_video_dac_state:
24778 644C           50                           push ax
24779 644D           52                           push dx
24780 644E           BA                   03DA    mov dx, # 0x3da
24781 6451           EC                           in al, dx
24782 6452           BA                   03C0    mov dx, # 0x3c0
24783 6455           B0                     10    mov al, #0x10
24784 6457           EE                           out dx, al
24785 6458           BA                   03C1    mov dx, # 0x3c1
24786 645B           EC                           in al, dx
24787 645C           88C3                         mov bl, al
24788 645E           C0EB                   07    shr bl, 7
24789 6461           BA                   03DA    mov dx, # 0x3da
24790 6464           EC                           in al, dx
24791 6465           BA                   03C0    mov dx, # 0x3c0
24792 6468           B0                     14    mov al, #0x14
24793 646A           EE                           out dx, al
24794 646B           BA                   03C1    mov dx, # 0x3c1
24795 646E           EC                           in al, dx
24796 646F           88C7                         mov bh, al
24797 6471           80E7                   0F    and bh, #0x0f
24798 6474           F6C3                   01    test bl, #0x01
24799 6477           75           03              jnz get_dac_16_page
24800 6479           C0EF                   02    shr bh, 2
24801                       0000647C            get_dac_16_page:
24802 647C           BA                   03DA    mov dx, # 0x3da
24803 647F           EC                           in al, dx
24804 6480           BA                   03C0    mov dx, # 0x3c0
24805 6483           B0                     20    mov al, #0x20
24806 6485           EE                           out dx, al
24807 6486           5A                           pop dx
24808 6487           58                           pop ax
24809 6488           C3                           ret
24810                                           ! 3348 endasm
24811                                           !BCC_ENDASM
24812                                           ! 3349 static void biosfn_perform_gray_scale_summing (start,count)
24813                                           ! Register BX used in function biosfn_write_teletype
24814                                           ! 3350 Bit16u start;Bit16u count;
24815                       00006489            _biosfn_perform_gray_scale_summing:
24816                                           !BCC_EOS
24817                                           !BCC_EOS
24818                                           ! 3351 {Bit8u r,g,b;
24819                                           !BCC_EOS
24820                                           ! 3352  Bit16u i;
24821                                           !BCC_EOS
24822                                           ! 3353  Bit16u index;
24823                                           !BCC_EOS
24824                                           ! 3354  inb(0x3da
24825 6489           55                         push	bp
24826 648A           89E5                       mov	bp,sp
24827 648C           83C4                   F8  add	sp,*-8
24828                                           ! 3354 );
24829                                           ! Debug: list int = const $3DA (used reg = )
24830 648F           B8                   03DA  mov	ax,#$3DA
24831 6492           50                         push	ax
24832                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24833 6493           E8         1750            call	_inb
24834 6496           44                         inc	sp
24835 6497           44                         inc	sp
24836                                           !BCC_EOS
24837                                           ! 3355  outb(0x3c0,0x00);
24838                                           ! Debug: list int = const 0 (used reg = )
24839 6498           31C0                       xor	ax,ax
24840 649A           50                         push	ax
24841                                           ! Debug: list int = const $3C0 (used reg = )
24842 649B           B8                   03C0  mov	ax,#$3C0
24843 649E           50                         push	ax
24844                                           ! Debug: func () void = outb+0 (used reg = )
24845 649F           E8         175A            call	_outb
24846 64A2           83C4                   04  add	sp,*4
24847                                           !BCC_EOS
24848                                           ! 3356  for( index = 0; index < count; index++ )
24849                                           ! Debug: eq int = const 0 to unsigned short index = [S+$A-$A] (used reg = )
24850 64A5           31C0                       xor	ax,ax
24851 64A7           8946         F8            mov	-8[bp],ax
24852                                           !BCC_EOS
24853                                           !BCC_EOS
24854                                           ! 3357   {
24855 64AA           E9         00BE            br 	.209
24856                       000064AD            .20A:
24857                                           ! 3358    outb(0x3c7,start);
24858                                           ! Debug: list unsigned short start = [S+$A+2] (used reg = )
24859 64AD           FF76         04            push	4[bp]
24860                                           ! Debug: list int = const $3C7 (used reg = )
24861 64B0           B8                   03C7  mov	ax,#$3C7
24862 64B3           50                         push	ax
24863                                           ! Debug: func () void = outb+0 (used reg = )
24864 64B4           E8         1745            call	_outb
24865 64B7           83C4                   04  add	sp,*4
24866                                           !BCC_EOS
24867                                           ! 3359    r=inb( 0x3c9 );
24868                                           ! Debug: list int = const $3C9 (used reg = )
24869 64BA           B8                   03C9  mov	ax,#$3C9
24870 64BD           50                         push	ax
24871                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24872 64BE           E8         1725            call	_inb
24873 64C1           44                         inc	sp
24874 64C2           44                         inc	sp
24875                                           ! Debug: eq unsigned char = al+0 to unsigned char r = [S+$A-3] (used reg = )
24876 64C3           8846         FF            mov	-1[bp],al
24877                                           !BCC_EOS
24878                                           ! 3360    g=inb( 0x3c9 );
24879                                           ! Debug: list int = const $3C9 (used reg = )
24880 64C6           B8                   03C9  mov	ax,#$3C9
24881 64C9           50                         push	ax
24882                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24883 64CA           E8         1719            call	_inb
24884 64CD           44                         inc	sp
24885 64CE           44                         inc	sp
24886                                           ! Debug: eq unsigned char = al+0 to unsigned char g = [S+$A-4] (used reg = )
24887 64CF           8846         FE            mov	-2[bp],al
24888                                           !BCC_EOS
24889                                           ! 3361    b=inb( 0x3c9 );
24890                                           ! Debug: list int = const $3C9 (used reg = )
24891 64D2           B8                   03C9  mov	ax,#$3C9
24892 64D5           50                         push	ax
24893                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24894 64D6           E8         170D            call	_inb
24895 64D9           44                         inc	sp
24896 64DA           44                         inc	sp
24897                                           ! Debug: eq unsigned char = al+0 to unsigned char b = [S+$A-5] (used reg = )
24898 64DB           8846         FD            mov	-3[bp],al
24899                                           !BCC_EOS
24900                                           ! 3362    i = ( ( 77*r + 151*g + 28*b ) + 0x80 ) >> 8;
24901                                           ! Debug: mul unsigned char b = [S+$A-5] to int = const $1C (used reg = )
24902                                           ! Debug: expression subtree swapping
24903 64DE           8A46         FD            mov	al,-3[bp]
24904 64E1           30E4                       xor	ah,ah
24905 64E3           B9                   001C  mov	cx,*$1C
24906 64E6           F7E9                       imul	cx
24907 64E8           50                         push	ax
24908                                           ! Debug: mul unsigned char g = [S+$C-4] to int = const $97 (used reg = )
24909                                           ! Debug: expression subtree swapping
24910 64E9           8A46         FE            mov	al,-2[bp]
24911 64EC           30E4                       xor	ah,ah
24912 64EE           B9                   0097  mov	cx,#$97
24913 64F1           F7E9                       imul	cx
24914 64F3           50                         push	ax
24915                                           ! Debug: mul unsigned char r = [S+$E-3] to int = const $4D (used reg = )
24916                                           ! Debug: expression subtree swapping
24917 64F4           8A46         FF            mov	al,-1[bp]
24918 64F7           30E4                       xor	ah,ah
24919 64F9           B9                   004D  mov	cx,*$4D
24920 64FC           F7E9                       imul	cx
24921                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
24922 64FE           0346         F4            add	ax,-$C[bp]
24923 6501           44                         inc	sp
24924 6502           44                         inc	sp
24925                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
24926 6503           0346         F6            add	ax,-$A[bp]
24927 6506           44                         inc	sp
24928 6507           44                         inc	sp
24929                                           ! Debug: add int = const $80 to unsigned int = ax+0 (used reg = )
24930                                           ! Debug: sr int = const 8 to unsigned int = ax+$80 (used reg = )
24931 6508           05                   0080  add	ax,#$80
24932 650B           88E0                       mov	al,ah
24933 650D           30E4                       xor	ah,ah
24934                                           ! Debug: eq unsigned int = ax+0 to unsigned short i = [S+$A-8] (used reg = )
24935 650F           8946         FA            mov	-6[bp],ax
24936                                           !BCC_EOS
24937                                           ! 3363    if(i>0x3f)i=0x3f;
24938                                           ! Debug: gt int = const $3F to unsigned short i = [S+$A-8] (used reg = )
24939 6512           8B46         FA            mov	ax,-6[bp]
24940 6515           3D                   003F  cmp	ax,*$3F
24941 6518           76           06            jbe 	.20B
24942                       0000651A            .20C:
24943                                           ! Debug: eq int = const $3F to unsigned short i = [S+$A-8] (used reg = )
24944 651A           B8                   003F  mov	ax,*$3F
24945 651D           8946         FA            mov	-6[bp],ax
24946                                           !BCC_EOS
24947                                           ! 3364    outb(0x3c8,start);
24948                       00006520            .20B:
24949                                           ! Debug: list unsigned short start = [S+$A+2] (used reg = )
24950 6520           FF76         04            push	4[bp]
24951                                           ! Debug: list int = const $3C8 (used reg = )
24952 6523           B8                   03C8  mov	ax,#$3C8
24953 6526           50                         push	ax
24954                                           ! Debug: func () void = outb+0 (used reg = )
24955 6527           E8         16D2            call	_outb
24956 652A           83C4                   04  add	sp,*4
24957                                           !BCC_EOS
24958                                           ! 3365    outb( 0x3c9, i&0xff );
24959                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
24960 652D           8A46         FA            mov	al,-6[bp]
24961                                           ! Debug: list unsigned char = al+0 (used reg = )
24962 6530           30E4                       xor	ah,ah
24963 6532           50                         push	ax
24964                                           ! Debug: list int = const $3C9 (used reg = )
24965 6533           B8                   03C9  mov	ax,#$3C9
24966 6536           50                         push	ax
24967                                           ! Debug: func () void = outb+0 (used reg = )
24968 6537           E8         16C2            call	_outb
24969 653A           83C4                   04  add	sp,*4
24970                                           !BCC_EOS
24971                                           ! 3366    outb( 0x3c9, i&0xff );
24972                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
24973 653D           8A46         FA            mov	al,-6[bp]
24974                                           ! Debug: list unsigned char = al+0 (used reg = )
24975 6540           30E4                       xor	ah,ah
24976 6542           50                         push	ax
24977                                           ! Debug: list int = const $3C9 (used reg = )
24978 6543           B8                   03C9  mov	ax,#$3C9
24979 6546           50                         push	ax
24980                                           ! Debug: func () void = outb+0 (used reg = )
24981 6547           E8         16B2            call	_outb
24982 654A           83C4                   04  add	sp,*4
24983                                           !BCC_EOS
24984                                           ! 3367    outb( 0x3c9, i&0xff );
24985                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
24986 654D           8A46         FA            mov	al,-6[bp]
24987                                           ! Debug: list unsigned char = al+0 (used reg = )
24988 6550           30E4                       xor	ah,ah
24989 6552           50                         push	ax
24990                                           ! Debug: list int = const $3C9 (used reg = )
24991 6553           B8                   03C9  mov	ax,#$3C9
24992 6556           50                         push	ax
24993                                           ! Debug: func () void = outb+0 (used reg = )
24994 6557           E8         16A2            call	_outb
24995 655A           83C4                   04  add	sp,*4
24996                                           !BCC_EOS
24997                                           ! 3368    start++;
24998                                           ! Debug: postinc unsigned short start = [S+$A+2] (used reg = )
24999 655D           8B46         04            mov	ax,4[bp]
25000 6560           40                         inc	ax
25001 6561           8946         04            mov	4[bp],ax
25002                                           !BCC_EOS
25003                                           ! 3369   }
25004                                           ! 3370  inb(0x3da);
25005                       00006564            .208:
25006                                           ! Debug: postinc unsigned short index = [S+$A-$A] (used reg = )
25007 6564           8B46         F8            mov	ax,-8[bp]
25008 6567           40                         inc	ax
25009 6568           8946         F8            mov	-8[bp],ax
25010                       0000656B            .209:
25011                                           ! Debug: lt unsigned short count = [S+$A+4] to unsigned short index = [S+$A-$A] (used reg = )
25012 656B           8B46         F8            mov	ax,-8[bp]
25013 656E           3B46         06            cmp	ax,6[bp]
25014 6571         0F82         FF38            blo 	.20A
25015                       00006575            .20D:
25016                       00006575            .207:
25017                                           ! Debug: list int = const $3DA (used reg = )
25018 6575           B8                   03DA  mov	ax,#$3DA
25019 6578           50                         push	ax
25020                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25021 6579           E8         166A            call	_inb
25022 657C           44                         inc	sp
25023 657D           44                         inc	sp
25024                                           !BCC_EOS
25025                                           ! 3371  outb(0x3c0,0x20);
25026                                           ! Debug: list int = const $20 (used reg = )
25027 657E           B8                   0020  mov	ax,*$20
25028 6581           50                         push	ax
25029                                           ! Debug: list int = const $3C0 (used reg = )
25030 6582           B8                   03C0  mov	ax,#$3C0
25031 6585           50                         push	ax
25032                                           ! Debug: func () void = outb+0 (used reg = )
25033 6586           E8         1673            call	_outb
25034 6589           83C4                   04  add	sp,*4
25035                                           !BCC_EOS
25036                                           ! 3372 }
25037 658C           89EC                       mov	sp,bp
25038 658E           5D                         pop	bp
25039 658F           C3                         ret
25040                                           ! 3373 static void get_font_access()
25041                                           ! 3374 {
25042                       00006590            _get_font_access:
25043                                           ! 3375 #asm
25044                                           !BCC_ASM
25045 6590           BA                   03C4   mov dx, # 0x3c4
25046 6593           B8                   0100   mov ax, #0x0100
25047 6596           EF                          out dx, ax
25048 6597           B8                   0402   mov ax, #0x0402
25049 659A           EF                          out dx, ax
25050 659B           B8                   0704   mov ax, #0x0704
25051 659E           EF                          out dx, ax
25052 659F           B8                   0300   mov ax, #0x0300
25053 65A2           EF                          out dx, ax
25054 65A3           BA                   03CE   mov dx, # 0x3ce
25055 65A6           B8                   0204   mov ax, #0x0204
25056 65A9           EF                          out dx, ax
25057 65AA           B8                   0005   mov ax, #0x0005
25058 65AD           EF                          out dx, ax
25059 65AE           B8                   0406   mov ax, #0x0406
25060 65B1           EF                          out dx, ax
25061                                           ! 3392 endasm
25062                                           !BCC_ENDASM
25063                                           ! 3393 }
25064 65B2           C3                         ret
25065                                           ! 3394 static void release_font_access()
25066                                           ! 3395 {
25067                       000065B3            _release_font_access:
25068                                           ! 3396 #asm
25069                                           !BCC_ASM
25070 65B3           BA                   03C4   mov dx, # 0x3c4
25071 65B6           B8                   0100   mov ax, #0x0100
25072 65B9           EF                          out dx, ax
25073 65BA           B8                   0302   mov ax, #0x0302
25074 65BD           EF                          out dx, ax
25075 65BE           B8                   0304   mov ax, #0x0304
25076 65C1           EF                          out dx, ax
25077 65C2           B8                   0300   mov ax, #0x0300
25078 65C5           EF                          out dx, ax
25079 65C6           BA                   03CC   mov dx, # 0x3cc
25080 65C9           EC                          in al, dx
25081 65CA           24                     01   and al, #0x01
25082 65CC           C0E0                   02   shl al, 2
25083 65CF           0C                     0A   or al, #0x0a
25084 65D1           88C4                        mov ah, al
25085 65D3           B0                     06   mov al, #0x06
25086 65D5           BA                   03CE   mov dx, # 0x3ce
25087 65D8           EF                          out dx, ax
25088 65D9           B8                   0004   mov ax, #0x0004
25089 65DC           EF                          out dx, ax
25090 65DD           B8                   1005   mov ax, #0x1005
25091 65E0           EF                          out dx, ax
25092                                           ! 3419 endasm
25093                                           !BCC_ENDASM
25094                                           ! 3420 }
25095 65E1           C3                         ret
25096                                           ! 3421 #asm
25097                                           !BCC_ASM
25098                       000065E2            idiv_u:
25099 65E2           31D2                         xor dx,dx
25100 65E4           F7F3                         div bx
25101 65E6           C3                           ret
25102                                           ! 3426 endasm
25103                                           !BCC_ENDASM
25104                                           ! 3427 static void set_scan_lines(lines) Bit8u lines;
25105                       000065E7            _set_scan_lines:
25106                                           !BCC_EOS
25107                                           ! 3428 {
25108                                           ! 3429  Bit16u crtc_addr,cols,page,vde;
25109                                           !BCC_EOS
25110                                           ! 3430  Bit8u crtc_r9,ovl,rows;
25111                                           !BCC_EOS
25112                                           ! 3431  crtc_addr = read_word(0x40,0x63);
25113 65E7           55                         push	bp
25114 65E8           89E5                       mov	bp,sp
25115 65EA           83C4                   F4  add	sp,*-$C
25116                                           ! Debug: list int = const $63 (used reg = )
25117 65ED           B8                   0063  mov	ax,*$63
25118 65F0           50                         push	ax
25119                                           ! Debug: list int = const $40 (used reg = )
25120 65F1           B8                   0040  mov	ax,*$40
25121 65F4           50                         push	ax
25122                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
25123 65F5           E8         15AB            call	_read_word
25124 65F8           83C4                   04  add	sp,*4
25125                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$E-4] (used reg = )
25126 65FB           8946         FE            mov	-2[bp],ax
25127                                           !BCC_EOS
25128                                           ! 3432  outb(crtc_addr, 0x09);
25129                                           ! Debug: list int = const 9 (used reg = )
25130 65FE           B8                   0009  mov	ax,*9
25131 6601           50                         push	ax
25132                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
25133 6602           FF76         FE            push	-2[bp]
25134                                           ! Debug: func () void = outb+0 (used reg = )
25135 6605           E8         15F4            call	_outb
25136 6608           83C4                   04  add	sp,*4
25137                                           !BCC_EOS
25138                                           ! 3433  crtc_r9 = inb(crtc_addr+1);
25139                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
25140 660B           8B46         FE            mov	ax,-2[bp]
25141                                           ! Debug: list unsigned int = ax+1 (used reg = )
25142 660E           40                         inc	ax
25143 660F           50                         push	ax
25144                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25145 6610           E8         15D3            call	_inb
25146 6613           44                         inc	sp
25147 6614           44                         inc	sp
25148                                           ! Debug: eq unsigned char = al+0 to unsigned char crtc_r9 = [S+$E-$B] (used reg = )
25149 6615           8846         F7            mov	-9[bp],al
25150                                           !BCC_EOS
25151                                           ! 3434  crtc_r9 = (crtc_r9 & 0xe0) | (lines - 1);
25152                                           ! Debug: sub int = const 1 to unsigned char lines = [S+$E+2] (used reg = )
25153 6618           8A46         04            mov	al,4[bp]
25154 661B           30E4                       xor	ah,ah
25155 661D           48                         dec	ax
25156 661E           50                         push	ax
25157                                           ! Debug: and int = const $E0 to unsigned char crtc_r9 = [S+$10-$B] (used reg = )
25158 661F           8A46         F7            mov	al,-9[bp]
25159 6622           24                     E0  and	al,#$E0
25160                                           ! Debug: or unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
25161 6624           30E4                       xor	ah,ah
25162 6626           0B46         F2            or	ax,-$E[bp]
25163 6629           44                         inc	sp
25164 662A           44                         inc	sp
25165                                           ! Debug: eq unsigned int = ax+0 to unsigned char crtc_r9 = [S+$E-$B] (used reg = )
25166 662B           8846         F7            mov	-9[bp],al
25167                                           !BCC_EOS
25168                                           ! 3435  outb(crtc_addr+1, crtc_r9);
25169                                           ! Debug: list unsigned char crtc_r9 = [S+$E-$B] (used reg = )
25170 662E           8A46         F7            mov	al,-9[bp]
25171 6631           30E4                       xor	ah,ah
25172 6633           50                         push	ax
25173                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-4] (used reg = )
25174 6634           8B46         FE            mov	ax,-2[bp]
25175                                           ! Debug: list unsigned int = ax+1 (used reg = )
25176 6637           40                         inc	ax
25177 6638           50                         push	ax
25178                                           ! Debug: func () void = outb+0 (used reg = )
25179 6639           E8         15C0            call	_outb
25180 663C           83C4                   04  add	sp,*4
25181                                           !BCC_EOS
25182                                           ! 3436  if(lines==8)
25183                                           ! Debug: logeq int = const 8 to unsigned char lines = [S+$E+2] (used reg = )
25184 663F           8A46         04            mov	al,4[bp]
25185 6642           3C                     08  cmp	al,*8
25186 6644           75           10            jne 	.20E
25187                       00006646            .20F:
25188                                           ! 3437   {
25189                                           ! 3438    biosfn_set_cursor_shape(0x06,0x07);
25190                                           ! Debug: list int = const 7 (used reg = )
25191 6646           B8                   0007  mov	ax,*7
25192 6649           50                         push	ax
25193                                           ! Debug: list int = const 6 (used reg = )
25194 664A           B8                   0006  mov	ax,*6
25195 664D           50                         push	ax
25196                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
25197 664E           E8         DBDE            call	_biosfn_set_cursor_shape
25198 6651           83C4                   04  add	sp,*4
25199                                           !BCC_EOS
25200                                           ! 3439   }
25201                                           ! 3440  else
25202                                           ! 3441   {
25203 6654           EB           18            jmp .210
25204                       00006656            .20E:
25205                                           ! 3442    biosfn_set_cursor_shape(lines-4,lines-3);
25206                                           ! Debug: sub int = const 3 to unsigned char lines = [S+$E+2] (used reg = )
25207 6656           8A46         04            mov	al,4[bp]
25208 6659           30E4                       xor	ah,ah
25209                                           ! Debug: list unsigned int = ax-3 (used reg = )
25210 665B           05                   FFFD  add	ax,*-3
25211 665E           50                         push	ax
25212                                           ! Debug: sub int = const 4 to unsigned char lines = [S+$10+2] (used reg = )
25213 665F           8A46         04            mov	al,4[bp]
25214 6662           30E4                       xor	ah,ah
25215                                           ! Debug: list unsigned int = ax-4 (used reg = )
25216 6664           05                   FFFC  add	ax,*-4
25217 6667           50                         push	ax
25218                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
25219 6668           E8         DBC4            call	_biosfn_set_cursor_shape
25220 666B           83C4                   04  add	sp,*4
25221                                           !BCC_EOS
25222                                           ! 3443   }
25223                                           ! 3444  write_word(0x40,0x85, lines);
25224                       0000666E            .210:
25225                                           ! Debug: list unsigned char lines = [S+$E+2] (used reg = )
25226 666E           8A46         04            mov	al,4[bp]
25227 6671           30E4                       xor	ah,ah
25228 6673           50                         push	ax
25229                                           ! Debug: list int = const $85 (used reg = )
25230 6674           B8                   0085  mov	ax,#$85
25231 6677           50                         push	ax
25232                                           ! Debug: list int = const $40 (used reg = )
25233 6678           B8                   0040  mov	ax,*$40
25234 667B           50                         push	ax
25235                                           ! Debug: func () void = write_word+0 (used reg = )
25236 667C           E8         154F            call	_write_word
25237 667F           83C4                   06  add	sp,*6
25238                                           !BCC_EOS
25239                                           ! 3445  outb(crtc_addr, 0x12);
25240                                           ! Debug: list int = const $12 (used reg = )
25241 6682           B8                   0012  mov	ax,*$12
25242 6685           50                         push	ax
25243                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
25244 6686           FF76         FE            push	-2[bp]
25245                                           ! Debug: func () void = outb+0 (used reg = )
25246 6689           E8         1570            call	_outb
25247 668C           83C4                   04  add	sp,*4
25248                                           !BCC_EOS
25249                                           ! 3446  vde = inb(crtc_addr+1);
25250                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
25251 668F           8B46         FE            mov	ax,-2[bp]
25252                                           ! Debug: list unsigned int = ax+1 (used reg = )
25253 6692           40                         inc	ax
25254 6693           50                         push	ax
25255                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25256 6694           E8         154F            call	_inb
25257 6697           44                         inc	sp
25258 6698           44                         inc	sp
25259                                           ! Debug: eq unsigned char = al+0 to unsigned short vde = [S+$E-$A] (used reg = )
25260 6699           30E4                       xor	ah,ah
25261 669B           8946         F8            mov	-8[bp],ax
25262                                           !BCC_EOS
25263                                           ! 3447  outb(crtc_addr, 0x07);
25264                                           ! Debug: list int = const 7 (used reg = )
25265 669E           B8                   0007  mov	ax,*7
25266 66A1           50                         push	ax
25267                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
25268 66A2           FF76         FE            push	-2[bp]
25269                                           ! Debug: func () void = outb+0 (used reg = )
25270 66A5           E8         1554            call	_outb
25271 66A8           83C4                   04  add	sp,*4
25272                                           !BCC_EOS
25273                                           ! 3448  ovl = inb(crtc_addr+1);
25274                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
25275 66AB           8B46         FE            mov	ax,-2[bp]
25276                                           ! Debug: list unsigned int = ax+1 (used reg = )
25277 66AE           40                         inc	ax
25278 66AF           50                         push	ax
25279                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25280 66B0           E8         1533            call	_inb
25281 66B3           44                         inc	sp
25282 66B4           44                         inc	sp
25283                                           ! Debug: eq unsigned char = al+0 to unsigned char ovl = [S+$E-$C] (used reg = )
25284 66B5           8846         F6            mov	-$A[bp],al
25285                                           !BCC_EOS
25286                                           ! 3449  vde += (((ovl & 0x02) << 7) + ((ovl & 0x40) << 3) + 1);
25287                                           ! Debug: and int = const $40 to unsigned char ovl = [S+$E-$C] (used reg = )
25288 66B8           8A46         F6            mov	al,-$A[bp]
25289 66BB           24                     40  and	al,*$40
25290                                           ! Debug: sl int = const 3 to unsigned char = al+0 (used reg = )
25291 66BD           30E4                       xor	ah,ah
25292 66BF           B1                     03  mov	cl,*3
25293 66C1           D3E0                       shl	ax,cl
25294 66C3           50                         push	ax
25295                                           ! Debug: and int = const 2 to unsigned char ovl = [S+$10-$C] (used reg = )
25296 66C4           8A46         F6            mov	al,-$A[bp]
25297 66C7           24                     02  and	al,*2
25298                                           ! Debug: sl int = const 7 to unsigned char = al+0 (used reg = )
25299 66C9           30E4                       xor	ah,ah
25300 66CB           B1                     07  mov	cl,*7
25301 66CD           D3E0                       shl	ax,cl
25302                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
25303 66CF           0346         F2            add	ax,-$E[bp]
25304 66D2           44                         inc	sp
25305 66D3           44                         inc	sp
25306                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
25307                                           ! Debug: addab unsigned int = ax+1 to unsigned short vde = [S+$E-$A] (used reg = )
25308 66D4           40                         inc	ax
25309 66D5           0346         F8            add	ax,-8[bp]
25310 66D8           8946         F8            mov	-8[bp],ax
25311                                           !BCC_EOS
25312                                           ! 3450  rows = vde / lines;
25313                                           ! Debug: div unsigned char lines = [S+$E+2] to unsigned short vde = [S+$E-$A] (used reg = )
25314 66DB           8A46         04            mov	al,4[bp]
25315 66DE           30E4                       xor	ah,ah
25316 66E0           89C3                       mov	bx,ax
25317 66E2           8B46         F8            mov	ax,-8[bp]
25318 66E5           E8         FEFA            call	idiv_u
25319                                           ! Debug: eq unsigned int = ax+0 to unsigned char rows = [S+$E-$D] (used reg = )
25320 66E8           8846         F5            mov	-$B[bp],al
25321                                           !BCC_EOS
25322                                           ! 3451  write_byte(0x40,0x84, rows-1);
25323                                           ! Debug: sub int = const 1 to unsigned char rows = [S+$E-$D] (used reg = )
25324 66EB           8A46         F5            mov	al,-$B[bp]
25325 66EE           30E4                       xor	ah,ah
25326                                           ! Debug: list unsigned int = ax-1 (used reg = )
25327 66F0           48                         dec	ax
25328 66F1           50                         push	ax
25329                                           ! Debug: list int = const $84 (used reg = )
25330 66F2           B8                   0084  mov	ax,#$84
25331 66F5           50                         push	ax
25332                                           ! Debug: list int = const $40 (used reg = )
25333 66F6           B8                   0040  mov	ax,*$40
25334 66F9           50                         push	ax
25335                                           ! Debug: func () void = write_byte+0 (used reg = )
25336 66FA           E8         14B9            call	_write_byte
25337 66FD           83C4                   06  add	sp,*6
25338                                           !BCC_EOS
25339                                           ! 3452  cols = read_word(0x40,0x4A);
25340                                           ! Debug: list int = const $4A (used reg = )
25341 6700           B8                   004A  mov	ax,*$4A
25342 6703           50                         push	ax
25343                                           ! Debug: list int = const $40 (used reg = )
25344 6704           B8                   0040  mov	ax,*$40
25345 6707           50                         push	ax
25346                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
25347 6708           E8         1498            call	_read_word
25348 670B           83C4                   04  add	sp,*4
25349                                           ! Debug: eq unsigned short = ax+0 to unsigned short cols = [S+$E-6] (used reg = )
25350 670E           8946         FC            mov	-4[bp],ax
25351                                           !BCC_EOS
25352                                           ! 3453  write_word(0x40,0x4C, rows * cols * 2);
25353                                           ! Debug: mul unsigned short cols = [S+$E-6] to unsigned char rows = [S+$E-$D] (used reg = )
25354 6711           8A46         F5            mov	al,-$B[bp]
25355 6714           30E4                       xor	ah,ah
25356 6716           8B4E         FC            mov	cx,-4[bp]
25357 6719           F7E9                       imul	cx
25358                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
25359 671B           D1E0                       shl	ax,*1
25360                                           ! Debug: list unsigned int = ax+0 (used reg = )
25361 671D           50                         push	ax
25362                                           ! Debug: list int = const $4C (used reg = )
25363 671E           B8                   004C  mov	ax,*$4C
25364 6721           50                         push	ax
25365                                           ! Debug: list int = const $40 (used reg = )
25366 6722           B8                   0040  mov	ax,*$40
25367 6725           50                         push	ax
25368                                           ! Debug: func () void = write_word+0 (used reg = )
25369 6726           E8         14A5            call	_write_word
25370 6729           83C4                   06  add	sp,*6
25371                                           !BCC_EOS
25372                                           ! 3454 }
25373 672C           89EC                       mov	sp,bp
25374 672E           5D                         pop	bp
25375 672F           C3                         ret
25376                                           ! 3455 static void biosfn_load_text_user_pat (AL,ES,BP,CX,DX,BL,BH) Bit8u AL;Bit16u ES;Bit16u BP;Bit16u CX;Bit16u DX;Bit8u BL;Bit8u BH;
25377                                           ! Register BX used in function set_scan_lines
25378                       00006730            _biosfn_load_text_user_pat:
25379                                           !BCC_EOS
25380                                           !BCC_EOS
25381                                           !BCC_EOS
25382                                           !BCC_EOS
25383                                           !BCC_EOS
25384                                           !BCC_EOS
25385                                           !BCC_EOS
25386                                           ! 3456 {
25387                                           ! 3457  Bit16u blockaddr,dest,i,src;
25388                                           !BCC_EOS
25389                                           ! 3458  get_font_access();
25390 6730           55                         push	bp
25391 6731           89E5                       mov	bp,sp
25392 6733           83C4                   F8  add	sp,*-8
25393                                           ! Debug: func () void = get_font_access+0 (used reg = )
25394 6736           E8         FE57            call	_get_font_access
25395                                           !BCC_EOS
25396                                           ! 3459  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25397                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+$C] (used reg = )
25398 6739           8A46         0E            mov	al,$E[bp]
25399 673C           24                     04  and	al,*4
25400                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25401 673E           30E4                       xor	ah,ah
25402 6740           88C4                       mov	ah,al
25403 6742           30C0                       xor	al,al
25404 6744           B1                     03  mov	cl,*3
25405 6746           D3E0                       shl	ax,cl
25406 6748           50                         push	ax
25407                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+$C] (used reg = )
25408 6749           8A46         0E            mov	al,$E[bp]
25409 674C           24                     03  and	al,*3
25410                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25411 674E           30E4                       xor	ah,ah
25412 6750           88C4                       mov	ah,al
25413 6752           30C0                       xor	al,al
25414 6754           B1                     06  mov	cl,*6
25415 6756           D3E0                       shl	ax,cl
25416                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25417 6758           0346         F6            add	ax,-$A[bp]
25418 675B           44                         inc	sp
25419 675C           44                         inc	sp
25420                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25421 675D           8946         FE            mov	-2[bp],ax
25422                                           !BCC_EOS
25423                                           ! 3460  for(i=0;i<CX;i++)
25424                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25425 6760           31C0                       xor	ax,ax
25426 6762           8946         FA            mov	-6[bp],ax
25427                                           !BCC_EOS
25428                                           !BCC_EOS
25429                                           ! 3461   {
25430 6765           EB           44            jmp .213
25431                       00006767            .214:
25432                                           ! 3462    src = BP + i * BH;
25433                                           ! Debug: mul unsigned char BH = [S+$A+$E] to unsigned short i = [S+$A-8] (used reg = )
25434 6767           8A46         10            mov	al,$10[bp]
25435 676A           30E4                       xor	ah,ah
25436 676C           89C3                       mov	bx,ax
25437 676E           8B46         FA            mov	ax,-6[bp]
25438 6771           89D9                       mov	cx,bx
25439 6773           F7E9                       imul	cx
25440                                           ! Debug: add unsigned int = ax+0 to unsigned short BP = [S+$A+6] (used reg = )
25441                                           ! Debug: expression subtree swapping
25442 6775           0346         08            add	ax,8[bp]
25443                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25444 6778           8946         F8            mov	-8[bp],ax
25445                                           !BCC_EOS
25446                                           ! 3463    
25447                                           ! 3463 dest = blockaddr + (DX + i) * 32;
25448                                           ! Debug: add unsigned short i = [S+$A-8] to unsigned short DX = [S+$A+$A] (used reg = )
25449 677B           8B46         0C            mov	ax,$C[bp]
25450 677E           0346         FA            add	ax,-6[bp]
25451                                           ! Debug: mul int = const $20 to unsigned int = ax+0 (used reg = )
25452 6781           B1                     05  mov	cl,*5
25453 6783           D3E0                       shl	ax,cl
25454                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25455                                           ! Debug: expression subtree swapping
25456 6785           0346         FE            add	ax,-2[bp]
25457                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25458 6788           8946         FC            mov	-4[bp],ax
25459                                           !BCC_EOS
25460                                           ! 3464    memcpyb(0xA000, dest, ES, src, BH);
25461                                           ! Debug: list unsigned char BH = [S+$A+$E] (used reg = )
25462 678B           8A46         10            mov	al,$10[bp]
25463 678E           30E4                       xor	ah,ah
25464 6790           50                         push	ax
25465                                           ! Debug: list unsigned short src = [S+$C-$A] (used reg = )
25466 6791           FF76         F8            push	-8[bp]
25467                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
25468 6794           FF76         06            push	6[bp]
25469                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25470 6797           FF76         FC            push	-4[bp]
25471                                           ! Debug: list unsigned int = const $A000 (used reg = )
25472 679A           B8                   A000  mov	ax,#$A000
25473 679D           50                         push	ax
25474                                           ! Debug: func () void = memcpyb+0 (used reg = )
25475 679E           E8         138F            call	_memcpyb
25476 67A1           83C4                   0A  add	sp,*$A
25477                                           !BCC_EOS
25478                                           ! 3465   }
25479                                           ! 3466  release_font_access();
25480                       000067A4            .212:
25481                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25482 67A4           8B46         FA            mov	ax,-6[bp]
25483 67A7           40                         inc	ax
25484 67A8           8946         FA            mov	-6[bp],ax
25485                       000067AB            .213:
25486                                           ! Debug: lt unsigned short CX = [S+$A+8] to unsigned short i = [S+$A-8] (used reg = )
25487 67AB           8B46         FA            mov	ax,-6[bp]
25488 67AE           3B46         0A            cmp	ax,$A[bp]
25489 67B1           72           B4            jb 	.214
25490                       000067B3            .215:
25491                       000067B3            .211:
25492                                           ! Debug: func () void = release_font_access+0 (used reg = )
25493 67B3           E8         FDFD            call	_release_font_access
25494                                           !BCC_EOS
25495                                           ! 3467  if(AL>=0x10)
25496                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25497 67B6           8A46         04            mov	al,4[bp]
25498 67B9           3C                     10  cmp	al,*$10
25499 67BB           72           0B            jb  	.216
25500                       000067BD            .217:
25501                                           ! 3468   {
25502                                           ! 3469    set_scan_lines(BH);
25503                                           ! Debug: list unsigned char BH = [S+$A+$E] (used reg = )
25504 67BD           8A46         10            mov	al,$10[bp]
25505 67C0           30E4                       xor	ah,ah
25506 67C2           50                         push	ax
25507                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25508 67C3           E8         FE21            call	_set_scan_lines
25509 67C6           44                         inc	sp
25510 67C7           44                         inc	sp
25511                                           !BCC_EOS
25512                                           ! 3470   }
25513                                           ! 3471 }
25514                       000067C8            .216:
25515 67C8           89EC                       mov	sp,bp
25516 67CA           5D                         pop	bp
25517 67CB           C3                         ret
25518                                           ! 3472 static void biosfn_load_text_8_14_pat (AL,BL) Bit8u AL;Bit8u BL;
25519                                           ! Register BX used in function biosfn_load_text_user_pat
25520                       000067CC            _biosfn_load_text_8_14_pat:
25521                                           !BCC_EOS
25522                                           !BCC_EOS
25523                                           ! 3473 {
25524                                           ! 3474  Bit16u blockaddr,dest,i,src;
25525                                           !BCC_EOS
25526                                           ! 3475  get_font_access();
25527 67CC           55                         push	bp
25528 67CD           89E5                       mov	bp,sp
25529 67CF           83C4                   F8  add	sp,*-8
25530                                           ! Debug: func () void = get_font_access+0 (used reg = )
25531 67D2           E8         FDBB            call	_get_font_access
25532                                           !BCC_EOS
25533                                           ! 3476  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25534                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
25535 67D5           8A46         06            mov	al,6[bp]
25536 67D8           24                     04  and	al,*4
25537                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25538 67DA           30E4                       xor	ah,ah
25539 67DC           88C4                       mov	ah,al
25540 67DE           30C0                       xor	al,al
25541 67E0           B1                     03  mov	cl,*3
25542 67E2           D3E0                       shl	ax,cl
25543 67E4           50                         push	ax
25544                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
25545 67E5           8A46         06            mov	al,6[bp]
25546 67E8           24                     03  and	al,*3
25547                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25548 67EA           30E4                       xor	ah,ah
25549 67EC           88C4                       mov	ah,al
25550 67EE           30C0                       xor	al,al
25551 67F0           B1                     06  mov	cl,*6
25552 67F2           D3E0                       shl	ax,cl
25553                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25554 67F4           0346         F6            add	ax,-$A[bp]
25555 67F7           44                         inc	sp
25556 67F8           44                         inc	sp
25557                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25558 67F9           8946         FE            mov	-2[bp],ax
25559                                           !BCC_EOS
25560                                           ! 3477  for(i=0;i<0x100;i++)
25561                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25562 67FC           31C0                       xor	ax,ax
25563 67FE           8946         FA            mov	-6[bp],ax
25564                                           !BCC_EOS
25565                                           !BCC_EOS
25566                                           ! 3478   {
25567 6801           EB           41            jmp .21A
25568                       00006803            .21B:
25569                                           ! 3479    src = i * 14;
25570                                           ! Debug: mul int = const $E to unsigned short i = [S+$A-8] (used reg = )
25571 6803           8B46         FA            mov	ax,-6[bp]
25572 6806           89C2                       mov	dx,ax
25573 6808           B1                     03  mov	cl,*3
25574 680A           D3E0                       shl	ax,cl
25575 680C           29D0                       sub	ax,dx
25576 680E           D1E0                       shl	ax,*1
25577                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25578 6810           8946         F8            mov	-8[bp],ax
25579                                           !BCC_EOS
25580                                           ! 3480    dest = blockaddr + i * 32;
25581                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
25582 6813           8B46         FA            mov	ax,-6[bp]
25583 6816           B1                     05  mov	cl,*5
25584 6818           D3E0                       shl	ax,cl
25585                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25586                                           ! Debug: expression subtree swapping
25587 681A           0346         FE            add	ax,-2[bp]
25588                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25589 681D           8946         FC            mov	-4[bp],ax
25590                                           !BCC_EOS
25591                                           ! 3481    memcpyb(0xA000, dest, 0xC000, vgafont14+src, 14);
25592                                           ! Debug: list int = const $E (used reg = )
25593 6820           B8                   000E  mov	ax,*$E
25594 6823           50                         push	ax
25595                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$E00] unsigned char = vgafont14+0 (used reg = )
25596 6824           8B5E         F8            mov	bx,-8[bp]
25597                                           ! Debug: cast * unsigned char = const 0 to [$E00] unsigned char = bx+_vgafont14+0 (used reg = )
25598                                           ! Debug: list * unsigned char = bx+_vgafont14+0 (used reg = )
25599 6827           81C3                 1761  add	bx,#_vgafont14
25600 682B           53                         push	bx
25601                                           ! Debug: list unsigned int = const $C000 (used reg = )
25602 682C           B8                   C000  mov	ax,#$C000
25603 682F           50                         push	ax
25604                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25605 6830           FF76         FC            push	-4[bp]
25606                                           ! Debug: list unsigned int = const $A000 (used reg = )
25607 6833           B8                   A000  mov	ax,#$A000
25608 6836           50                         push	ax
25609                                           ! Debug: func () void = memcpyb+0 (used reg = )
25610 6837           E8         12F6            call	_memcpyb
25611 683A           83C4                   0A  add	sp,*$A
25612                                           !BCC_EOS
25613                                           ! 3482   }
25614                                           ! 3483  release_font_access();
25615                       0000683D            .219:
25616                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25617 683D           8B46         FA            mov	ax,-6[bp]
25618 6840           40                         inc	ax
25619 6841           8946         FA            mov	-6[bp],ax
25620                       00006844            .21A:
25621                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
25622 6844           8B46         FA            mov	ax,-6[bp]
25623 6847           3D                   0100  cmp	ax,#$100
25624 684A           72           B7            jb 	.21B
25625                       0000684C            .21C:
25626                       0000684C            .218:
25627                                           ! Debug: func () void = release_font_access+0 (used reg = )
25628 684C           E8         FD64            call	_release_font_access
25629                                           !BCC_EOS
25630                                           ! 3484  if(AL>=0x10)
25631                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25632 684F           8A46         04            mov	al,4[bp]
25633 6852           3C                     10  cmp	al,*$10
25634 6854           72           09            jb  	.21D
25635                       00006856            .21E:
25636                                           ! 3485   {
25637                                           ! 3486    set_scan_lines(14);
25638                                           ! Debug: list int = const $E (used reg = )
25639 6856           B8                   000E  mov	ax,*$E
25640 6859           50                         push	ax
25641                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25642 685A           E8         FD8A            call	_set_scan_lines
25643 685D           44                         inc	sp
25644 685E           44                         inc	sp
25645                                           !BCC_EOS
25646                                           ! 3487   }
25647                                           ! 3488 }
25648                       0000685F            .21D:
25649 685F           89EC                       mov	sp,bp
25650 6861           5D                         pop	bp
25651 6862           C3                         ret
25652                                           ! 3489 static void biosfn_load_text_8_8_pat (AL,BL) Bit8u AL;Bit8u BL;
25653                                           ! Register BX used in function biosfn_load_text_8_14_pat
25654                       00006863            _biosfn_load_text_8_8_pat:
25655                                           !BCC_EOS
25656                                           !BCC_EOS
25657                                           ! 3490 {
25658                                           ! 3491  Bit16u blockaddr,dest,i,src;
25659                                           !BCC_EOS
25660                                           ! 3492  get_font_access();
25661 6863           55                         push	bp
25662 6864           89E5                       mov	bp,sp
25663 6866           83C4                   F8  add	sp,*-8
25664                                           ! Debug: func () void = get_font_access+0 (used reg = )
25665 6869           E8         FD24            call	_get_font_access
25666                                           !BCC_EOS
25667                                           ! 3493  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25668                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
25669 686C           8A46         06            mov	al,6[bp]
25670 686F           24                     04  and	al,*4
25671                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25672 6871           30E4                       xor	ah,ah
25673 6873           88C4                       mov	ah,al
25674 6875           30C0                       xor	al,al
25675 6877           B1                     03  mov	cl,*3
25676 6879           D3E0                       shl	ax,cl
25677 687B           50                         push	ax
25678                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
25679 687C           8A46         06            mov	al,6[bp]
25680 687F           24                     03  and	al,*3
25681                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25682 6881           30E4                       xor	ah,ah
25683 6883           88C4                       mov	ah,al
25684 6885           30C0                       xor	al,al
25685 6887           B1                     06  mov	cl,*6
25686 6889           D3E0                       shl	ax,cl
25687                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25688 688B           0346         F6            add	ax,-$A[bp]
25689 688E           44                         inc	sp
25690 688F           44                         inc	sp
25691                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25692 6890           8946         FE            mov	-2[bp],ax
25693                                           !BCC_EOS
25694                                           ! 3494  for(i=0;i<0x100;i++)
25695                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25696 6893           31C0                       xor	ax,ax
25697 6895           8946         FA            mov	-6[bp],ax
25698                                           !BCC_EOS
25699                                           !BCC_EOS
25700                                           ! 3495   {
25701 6898           EB           3B            jmp .221
25702                       0000689A            .222:
25703                                           ! 3496    src = i * 8;
25704                                           ! Debug: mul int = const 8 to unsigned short i = [S+$A-8] (used reg = )
25705 689A           8B46         FA            mov	ax,-6[bp]
25706 689D           B1                     03  mov	cl,*3
25707 689F           D3E0                       shl	ax,cl
25708                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25709 68A1           8946         F8            mov	-8[bp],ax
25710                                           !BCC_EOS
25711                                           ! 3497    dest = blockaddr + i * 32;
25712                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
25713 68A4           8B46         FA            mov	ax,-6[bp]
25714 68A7           B1                     05  mov	cl,*5
25715 68A9           D3E0                       shl	ax,cl
25716                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25717                                           ! Debug: expression subtree swapping
25718 68AB           0346         FE            add	ax,-2[bp]
25719                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25720 68AE           8946         FC            mov	-4[bp],ax
25721                                           !BCC_EOS
25722                                           ! 3498    memcpyb(0xA000, dest, 0xC000, vgafont8+src, 8);
25723                                           ! Debug: list int = const 8 (used reg = )
25724 68B1           B8                   0008  mov	ax,*8
25725 68B4           50                         push	ax
25726                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$800] unsigned char = vgafont8+0 (used reg = )
25727 68B5           8B5E         F8            mov	bx,-8[bp]
25728                                           ! Debug: cast * unsigned char = const 0 to [$800] unsigned char = bx+_vgafont8+0 (used reg = )
25729                                           ! Debug: list * unsigned char = bx+_vgafont8+0 (used reg = )
25730 68B8           81C3                 0F61  add	bx,#_vgafont8
25731 68BC           53                         push	bx
25732                                           ! Debug: list unsigned int = const $C000 (used reg = )
25733 68BD           B8                   C000  mov	ax,#$C000
25734 68C0           50                         push	ax
25735                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25736 68C1           FF76         FC            push	-4[bp]
25737                                           ! Debug: list unsigned int = const $A000 (used reg = )
25738 68C4           B8                   A000  mov	ax,#$A000
25739 68C7           50                         push	ax
25740                                           ! Debug: func () void = memcpyb+0 (used reg = )
25741 68C8           E8         1265            call	_memcpyb
25742 68CB           83C4                   0A  add	sp,*$A
25743                                           !BCC_EOS
25744                                           ! 3499   }
25745                                           ! 3500  release_font_access();
25746                       000068CE            .220:
25747                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25748 68CE           8B46         FA            mov	ax,-6[bp]
25749 68D1           40                         inc	ax
25750 68D2           8946         FA            mov	-6[bp],ax
25751                       000068D5            .221:
25752                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
25753 68D5           8B46         FA            mov	ax,-6[bp]
25754 68D8           3D                   0100  cmp	ax,#$100
25755 68DB           72           BD            jb 	.222
25756                       000068DD            .223:
25757                       000068DD            .21F:
25758                                           ! Debug: func () void = release_font_access+0 (used reg = )
25759 68DD           E8         FCD3            call	_release_font_access
25760                                           !BCC_EOS
25761                                           ! 3501  if(AL>=0x10)
25762                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25763 68E0           8A46         04            mov	al,4[bp]
25764 68E3           3C                     10  cmp	al,*$10
25765 68E5           72           09            jb  	.224
25766                       000068E7            .225:
25767                                           ! 3502   {
25768                                           ! 3503    set_scan_lines(8);
25769                                           ! Debug: list int = const 8 (used reg = )
25770 68E7           B8                   0008  mov	ax,*8
25771 68EA           50                         push	ax
25772                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25773 68EB           E8         FCF9            call	_set_scan_lines
25774 68EE           44                         inc	sp
25775 68EF           44                         inc	sp
25776                                           !BCC_EOS
25777                                           ! 3504   }
25778                                           ! 3505 }
25779                       000068F0            .224:
25780 68F0           89EC                       mov	sp,bp
25781 68F2           5D                         pop	bp
25782 68F3           C3                         ret
25783                                           ! 3506 #asm
25784                                           !BCC_ASM
25785                       00000002            _biosfn_load_text_8_8_pat.AL	set	2
25786                       00000004            _biosfn_load_text_8_8_pat.BL	set	4
25787                       000068F4            biosfn_set_text_block_specifier:
25788 68F4           50                           push ax
25789 68F5           52                           push dx
25790 68F6           BA                   03C4    mov dx, # 0x3c4
25791 68F9           88DC                         mov ah, bl
25792 68FB           B0                     03    mov al, #0x03
25793 68FD           EF                           out dx, ax
25794 68FE           5A                           pop dx
25795 68FF           58                           pop ax
25796 6900           C3                           ret
25797                                           ! 3517 endasm
25798                                           !BCC_ENDASM
25799                                           ! 3518 static void biosfn_load_text_8_16_pat (AL,BL) Bit8u AL;Bit8u BL;
25800                                           ! Register BX used in function biosfn_load_text_8_8_pat
25801                       00006901            _biosfn_load_text_8_16_pat:
25802                                           !BCC_EOS
25803                                           !BCC_EOS
25804                                           ! 3519 {
25805                                           ! 3520  Bit16u blockaddr,dest,i,src;
25806                                           !BCC_EOS
25807                                           ! 3521  get_font_access();
25808 6901           55                         push	bp
25809 6902           89E5                       mov	bp,sp
25810 6904           83C4                   F8  add	sp,*-8
25811                                           ! Debug: func () void = get_font_access+0 (used reg = )
25812 6907           E8         FC86            call	_get_font_access
25813                                           !BCC_EOS
25814                                           ! 3522  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25815                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
25816 690A           8A46         06            mov	al,6[bp]
25817 690D           24                     04  and	al,*4
25818                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25819 690F           30E4                       xor	ah,ah
25820 6911           88C4                       mov	ah,al
25821 6913           30C0                       xor	al,al
25822 6915           B1                     03  mov	cl,*3
25823 6917           D3E0                       shl	ax,cl
25824 6919           50                         push	ax
25825                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
25826 691A           8A46         06            mov	al,6[bp]
25827 691D           24                     03  and	al,*3
25828                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25829 691F           30E4                       xor	ah,ah
25830 6921           88C4                       mov	ah,al
25831 6923           30C0                       xor	al,al
25832 6925           B1                     06  mov	cl,*6
25833 6927           D3E0                       shl	ax,cl
25834                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25835 6929           0346         F6            add	ax,-$A[bp]
25836 692C           44                         inc	sp
25837 692D           44                         inc	sp
25838                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25839 692E           8946         FE            mov	-2[bp],ax
25840                                           !BCC_EOS
25841                                           ! 3523  for(i=0;i<0x100;i++)
25842                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25843 6931           31C0                       xor	ax,ax
25844 6933           8946         FA            mov	-6[bp],ax
25845                                           !BCC_EOS
25846                                           !BCC_EOS
25847                                           ! 3524   {
25848 6936           EB           3B            jmp .228
25849                       00006938            .229:
25850                                           ! 3525    src = i * 16;
25851                                           ! Debug: mul int = const $10 to unsigned short i = [S+$A-8] (used reg = )
25852 6938           8B46         FA            mov	ax,-6[bp]
25853 693B           B1                     04  mov	cl,*4
25854 693D           D3E0                       shl	ax,cl
25855                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25856 693F           8946         F8            mov	-8[bp],ax
25857                                           !BCC_EOS
25858                                           ! 3526    dest = blockaddr + i * 32;
25859                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
25860 6942           8B46         FA            mov	ax,-6[bp]
25861 6945           B1                     05  mov	cl,*5
25862 6947           D3E0                       shl	ax,cl
25863                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25864                                           ! Debug: expression subtree swapping
25865 6949           0346         FE            add	ax,-2[bp]
25866                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25867 694C           8946         FC            mov	-4[bp],ax
25868                                           !BCC_EOS
25869                                           ! 3527    memcpyb(0xA000, dest, 0xC000, vgafont16+src, 16);
25870                                           ! Debug: list int = const $10 (used reg = )
25871 694F           B8                   0010  mov	ax,*$10
25872 6952           50                         push	ax
25873                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$1000] unsigned char = vgafont16+0 (used reg = )
25874 6953           8B5E         F8            mov	bx,-8[bp]
25875                                           ! Debug: cast * unsigned char = const 0 to [$1000] unsigned char = bx+_vgafont16+0 (used reg = )
25876                                           ! Debug: list * unsigned char = bx+_vgafont16+0 (used reg = )
25877 6956           81C3                 2561  add	bx,#_vgafont16
25878 695A           53                         push	bx
25879                                           ! Debug: list unsigned int = const $C000 (used reg = )
25880 695B           B8                   C000  mov	ax,#$C000
25881 695E           50                         push	ax
25882                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25883 695F           FF76         FC            push	-4[bp]
25884                                           ! Debug: list unsigned int = const $A000 (used reg = )
25885 6962           B8                   A000  mov	ax,#$A000
25886 6965           50                         push	ax
25887                                           ! Debug: func () void = memcpyb+0 (used reg = )
25888 6966           E8         11C7            call	_memcpyb
25889 6969           83C4                   0A  add	sp,*$A
25890                                           !BCC_EOS
25891                                           ! 3528   }
25892                                           ! 3529  release_font_access();
25893                       0000696C            .227:
25894                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25895 696C           8B46         FA            mov	ax,-6[bp]
25896 696F           40                         inc	ax
25897 6970           8946         FA            mov	-6[bp],ax
25898                       00006973            .228:
25899                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
25900 6973           8B46         FA            mov	ax,-6[bp]
25901 6976           3D                   0100  cmp	ax,#$100
25902 6979           72           BD            jb 	.229
25903                       0000697B            .22A:
25904                       0000697B            .226:
25905                                           ! Debug: func () void = release_font_access+0 (used reg = )
25906 697B           E8         FC35            call	_release_font_access
25907                                           !BCC_EOS
25908                                           ! 3530  if(AL>=0x10)
25909                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25910 697E           8A46         04            mov	al,4[bp]
25911 6981           3C                     10  cmp	al,*$10
25912 6983           72           09            jb  	.22B
25913                       00006985            .22C:
25914                                           ! 3531   {
25915                                           ! 3532    set_scan_lines(16);
25916                                           ! Debug: list int = const $10 (used reg = )
25917 6985           B8                   0010  mov	ax,*$10
25918 6988           50                         push	ax
25919                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25920 6989           E8         FC5B            call	_set_scan_lines
25921 698C           44                         inc	sp
25922 698D           44                         inc	sp
25923                                           !BCC_EOS
25924                                           ! 3533   }
25925                                           ! 3534 }
25926                       0000698E            .22B:
25927 698E           89EC                       mov	sp,bp
25928 6990           5D                         pop	bp
25929 6991           C3                         ret
25930                                           ! 3535 static void biosfn_load_gfx_8_8_chars (ES,BP) Bit16u ES;Bit16u BP;
25931                                           ! Register BX used in function biosfn_load_text_8_16_pat
25932                       00006992            _biosfn_load_gfx_8_8_chars:
25933                                           !BCC_EOS
25934                                           !BCC_EOS
25935                                           ! 3536 {
25936                                           ! 3537 }
25937 6992           C3                         ret
25938                                           ! 3538 static void biosfn_load_gfx_user_chars (ES,BP,CX,BL,DL) Bit16u ES;Bit16u BP;Bit16u CX;Bit8u BL;Bit8u DL;
25939                       00006993            _biosfn_load_gfx_user_chars:
25940                                           !BCC_EOS
25941                                           !BCC_EOS
25942                                           !BCC_EOS
25943                                           !BCC_EOS
25944                                           !BCC_EOS
25945                                           ! 3539 {
25946                                           ! 3540 }
25947 6993           C3                         ret
25948                                           ! 3541 static void biosfn_load_gfx_8_14_chars (BL) Bit8u BL;
25949                       00006994            _biosfn_load_gfx_8_14_chars:
25950                                           !BCC_EOS
25951                                           ! 3542 {
25952                                           ! 3543 }
25953 6994           C3                         ret
25954                                           ! 3544 static void biosfn_load_gfx_8_8_dd_chars (BL) Bit8u BL;
25955                       00006995            _biosfn_load_gfx_8_8_dd_chars:
25956                                           !BCC_EOS
25957                                           ! 3545 {
25958                                           ! 3546 }
25959 6995           C3                         ret
25960                                           ! 3547 static void biosfn_load_gfx_8_16_chars (BL) Bit8u BL;
25961                       00006996            _biosfn_load_gfx_8_16_chars:
25962                                           !BCC_EOS
25963                                           ! 3548 {
25964                                           ! 3549 }
25965 6996           C3                         ret
25966                                           ! 3550 static void biosfn_get_font_info (BH,ES,BP,CX,DX)
25967                                           ! 3551 Bit8u BH;Bit16u *ES;Bit16u *BP;Bit16u *CX;Bit16u *DX;
25968                       00006997            _biosfn_get_font_info:
25969                                           !BCC_EOS
25970                                           !BCC_EOS
25971                                           !BCC_EOS
25972                                           !BCC_EOS
25973                                           !BCC_EOS
25974                                           ! 3552 {Bit16u ss=get_SS();
25975 6997           55                         push	bp
25976 6998           89E5                       mov	bp,sp
25977 699A           4C                         dec	sp
25978 699B           4C                         dec	sp
25979                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
25980 699C           E8         127D            call	_get_SS
25981                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
25982 699F           8946         FE            mov	-2[bp],ax
25983                                           !BCC_EOS
25984                                           ! 3553  switch(BH)
25985 69A2           8A46         04            mov	al,4[bp]
25986                                           ! 3554   {case 0x00:
25987 69A5           E9         0143            br 	.22F
25988                                           ! 3555     write_word(ss,ES,read_word(0x00,0x1f*4));
25989                       000069A8            .230:
25990                                           ! Debug: list int = const $7C (used reg = )
25991 69A8           B8                   007C  mov	ax,*$7C
25992 69AB           50                         push	ax
25993                                           ! Debug: list int = const 0 (used reg = )
25994 69AC           31C0                       xor	ax,ax
25995 69AE           50                         push	ax
25996                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
25997 69AF           E8         11F1            call	_read_word
25998 69B2           83C4                   04  add	sp,*4
25999                                           ! Debug: list unsigned short = ax+0 (used reg = )
26000 69B5           50                         push	ax
26001                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26002 69B6           FF76         06            push	6[bp]
26003                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26004 69B9           FF76         FE            push	-2[bp]
26005                                           ! Debug: func () void = write_word+0 (used reg = )
26006 69BC           E8         120F            call	_write_word
26007 69BF           83C4                   06  add	sp,*6
26008                                           !BCC_EOS
26009                                           ! 3556     write_word(ss,BP,read_word(0x00,(0x1f*4)+2));
26010                                           ! Debug: list int = const $7E (used reg = )
26011 69C2           B8                   007E  mov	ax,*$7E
26012 69C5           50                         push	ax
26013                                           ! Debug: list int = const 0 (used reg = )
26014 69C6           31C0                       xor	ax,ax
26015 69C8           50                         push	ax
26016                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
26017 69C9           E8         11D7            call	_read_word
26018 69CC           83C4                   04  add	sp,*4
26019                                           ! Debug: list unsigned short = ax+0 (used reg = )
26020 69CF           50                         push	ax
26021                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26022 69D0           FF76         08            push	8[bp]
26023                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26024 69D3           FF76         FE            push	-2[bp]
26025                                           ! Debug: func () void = write_word+0 (used reg = )
26026 69D6           E8         11F5            call	_write_word
26027 69D9           83C4                   06  add	sp,*6
26028                                           !BCC_EOS
26029                                           ! 3557     break;
26030 69DC           E9         0131            br 	.22D
26031                                           !BCC_EOS
26032                                           ! 3558    case 0x01:
26033                                           ! 3559     w
26034                                           ! 3559 rite_word(ss,ES,read_word(0x00,0x43*4));
26035                       000069DF            .231:
26036                                           ! Debug: list int = const $10C (used reg = )
26037 69DF           B8                   010C  mov	ax,#$10C
26038 69E2           50                         push	ax
26039                                           ! Debug: list int = const 0 (used reg = )
26040 69E3           31C0                       xor	ax,ax
26041 69E5           50                         push	ax
26042                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
26043 69E6           E8         11BA            call	_read_word
26044 69E9           83C4                   04  add	sp,*4
26045                                           ! Debug: list unsigned short = ax+0 (used reg = )
26046 69EC           50                         push	ax
26047                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26048 69ED           FF76         06            push	6[bp]
26049                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26050 69F0           FF76         FE            push	-2[bp]
26051                                           ! Debug: func () void = write_word+0 (used reg = )
26052 69F3           E8         11D8            call	_write_word
26053 69F6           83C4                   06  add	sp,*6
26054                                           !BCC_EOS
26055                                           ! 3560     write_word(ss,BP,read_word(0x00,(0x43*4)+2));
26056                                           ! Debug: list int = const $10E (used reg = )
26057 69F9           B8                   010E  mov	ax,#$10E
26058 69FC           50                         push	ax
26059                                           ! Debug: list int = const 0 (used reg = )
26060 69FD           31C0                       xor	ax,ax
26061 69FF           50                         push	ax
26062                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
26063 6A00           E8         11A0            call	_read_word
26064 6A03           83C4                   04  add	sp,*4
26065                                           ! Debug: list unsigned short = ax+0 (used reg = )
26066 6A06           50                         push	ax
26067                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26068 6A07           FF76         08            push	8[bp]
26069                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26070 6A0A           FF76         FE            push	-2[bp]
26071                                           ! Debug: func () void = write_word+0 (used reg = )
26072 6A0D           E8         11BE            call	_write_word
26073 6A10           83C4                   06  add	sp,*6
26074                                           !BCC_EOS
26075                                           ! 3561     break;
26076 6A13           E9         00FA            br 	.22D
26077                                           !BCC_EOS
26078                                           ! 3562    case 0x02:
26079                                           ! 3563     write_word(ss,ES,0xC000);
26080                       00006A16            .232:
26081                                           ! Debug: list unsigned int = const $C000 (used reg = )
26082 6A16           B8                   C000  mov	ax,#$C000
26083 6A19           50                         push	ax
26084                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26085 6A1A           FF76         06            push	6[bp]
26086                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26087 6A1D           FF76         FE            push	-2[bp]
26088                                           ! Debug: func () void = write_word+0 (used reg = )
26089 6A20           E8         11AB            call	_write_word
26090 6A23           83C4                   06  add	sp,*6
26091                                           !BCC_EOS
26092                                           ! 3564     write_word(ss,BP,vgafont14);
26093                                           ! Debug: list * unsigned char = vgafont14+0 (used reg = )
26094 6A26           BB                   1761  mov	bx,#_vgafont14
26095 6A29           53                         push	bx
26096                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26097 6A2A           FF76         08            push	8[bp]
26098                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26099 6A2D           FF76         FE            push	-2[bp]
26100                                           ! Debug: func () void = write_word+0 (used reg = )
26101 6A30           E8         119B            call	_write_word
26102 6A33           83C4                   06  add	sp,*6
26103                                           !BCC_EOS
26104                                           ! 3565     break;
26105 6A36           E9         00D7            br 	.22D
26106                                           !BCC_EOS
26107                                           ! 3566    case 0x03:
26108                                           ! 3567     write_word(ss,ES,0xC000);
26109                       00006A39            .233:
26110                                           ! Debug: list unsigned int = const $C000 (used reg = )
26111 6A39           B8                   C000  mov	ax,#$C000
26112 6A3C           50                         push	ax
26113                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26114 6A3D           FF76         06            push	6[bp]
26115                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26116 6A40           FF76         FE            push	-2[bp]
26117                                           ! Debug: func () void = write_word+0 (used reg = )
26118 6A43           E8         1188            call	_write_word
26119 6A46           83C4                   06  add	sp,*6
26120                                           !BCC_EOS
26121                                           ! 3568     write_word(ss,BP,vgafont8);
26122                                           ! Debug: list * unsigned char = vgafont8+0 (used reg = )
26123 6A49           BB                   0F61  mov	bx,#_vgafont8
26124 6A4C           53                         push	bx
26125                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26126 6A4D           FF76         08            push	8[bp]
26127                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26128 6A50           FF76         FE            push	-2[bp]
26129                                           ! Debug: func () void = write_word+0 (used reg = )
26130 6A53           E8         1178            call	_write_word
26131 6A56           83C4                   06  add	sp,*6
26132                                           !BCC_EOS
26133                                           ! 3569     break;
26134 6A59           E9         00B4            br 	.22D
26135                                           !BCC_EOS
26136                                           ! 3570    case 0x04:
26137                                           ! 3571     write_word(ss,ES,0xC000);
26138                       00006A5C            .234:
26139                                           ! Debug: list unsigned int = const $C000 (used reg = )
26140 6A5C           B8                   C000  mov	ax,#$C000
26141 6A5F           50                         push	ax
26142                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26143 6A60           FF76         06            push	6[bp]
26144                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26145 6A63           FF76         FE            push	-2[bp]
26146                                           ! Debug: func () void = write_word+0 (used reg = )
26147 6A66           E8         1165            call	_write_word
26148 6A69           83C4                   06  add	sp,*6
26149                                           !BCC_EOS
26150                                           ! 3572     write_word(ss,BP,vgafont8+128*8);
26151                                           ! Debug: list * unsigned char = vgafont8+$400 (used reg = )
26152 6A6C           BB                   1361  mov	bx,#_vgafont8+$400
26153 6A6F           53                         push	bx
26154                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26155 6A70           FF76         08            push	8[bp]
26156                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26157 6A73           FF76         FE            push	-2[bp]
26158                                           ! Debug: func () void = write_word+0 (used reg = )
26159 6A76           E8         1155            call	_write_word
26160 6A79           83C4                   06  add	sp,*6
26161                                           !BCC_EOS
26162                                           ! 3573     break;
26163 6A7C           E9         0091            br 	.22D
26164                                           !BCC_EOS
26165                                           ! 3574    case 0x05:
26166                                           ! 3575     write_word(ss,ES,0xC000);
26167                       00006A7F            .235:
26168                                           ! Debug: list unsigned int = const $C000 (used reg = )
26169 6A7F           B8                   C000  mov	ax,#$C000
26170 6A82           50                         push	ax
26171                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26172 6A83           FF76         06            push	6[bp]
26173                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26174 6A86           FF76         FE            push	-2[bp]
26175                                           ! Debug: func () void = write_word+0 (used reg = )
26176 6A89           E8         1142            call	_write_word
26177 6A8C           83C4                   06  add	sp,*6
26178                                           !BCC_EOS
26179                                           ! 3576     write_word(ss,BP,vgafont14alt);
26180                                           ! Debug: list * unsigned char = vgafont14alt+0 (used reg = )
26181 6A8F           BB                   3561  mov	bx,#_vgafont14alt
26182 6A92           53                         push	bx
26183                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26184 6A93           FF76         08            push	8[bp]
26185                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26186 6A96           FF76         FE            push	-2[bp]
26187                                           ! Debug: func () void = write_word+0 (used reg = )
26188 6A99           E8         1132            call	_write_word
26189 6A9C           83C4                   06  add	sp,*6
26190                                           !BCC_EOS
26191                                           ! 3577     break;
26192 6A9F           EB           6F            jmp .22D
26193                                           !BCC_EOS
26194                                           ! 3578    case 0x06:
26195                                           ! 3579     write_word(ss,ES,0xC000);
26196                       00006AA1            .236:
26197                                           ! Debug: list unsigned int = const $C000 (used reg = )
26198 6AA1           B8                   C000  mov	ax,#$C000
26199 6AA4           50                         push	ax
26200                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26201 6AA5           FF76         06            push	6[bp]
26202                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26203 6AA8           FF76         FE            push	-2[bp]
26204                                           ! Debug: func () void = write_word+0 (used reg = )
26205 6AAB           E8         1120            call	_write_word
26206 6AAE           83C4                   06  add	sp,*6
26207                                           !BCC_EOS
26208                                           ! 3580     write_word(ss,BP,vgafont16);
26209                                           ! Debug: list * unsigned char = vgafont16+0 (used reg = )
26210 6AB1           BB                   2561  mov	bx,#_vgafont16
26211 6AB4           53                         push	bx
26212                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26213 6AB5           FF76         08            push	8[bp]
26214                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26215 6AB8           FF76         FE            push	-2[bp]
26216                                           ! Debug: func () void = write_word+0 (used reg = )
26217 6ABB           E8         1110            call	_write_word
26218 6ABE           83C4                   06  add	sp,*6
26219                                           !BCC_EOS
26220                                           ! 3581     break;
26221 6AC1           EB           4D            jmp .22D
26222                                           !BCC_EOS
26223                                           ! 3582    case 0x07:
26224                                           ! 3583     write_word(ss,ES,0xC000);
26225                       00006AC3            .237:
26226                                           ! Debug: list unsigned int = const $C000 (used reg = )
26227 6AC3           B8                   C000  mov	ax,#$C000
26228 6AC6           50                         push	ax
26229                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26230 6AC7           FF76         06            push	6[bp]
26231                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26232 6ACA           FF76         FE            push	-2[bp]
26233                                           ! Debug: func () void = write_word+0 (used reg = )
26234 6ACD           E8         10FE            call	_write_word
26235 6AD0           83C4                   06  add	sp,*6
26236                                           !BCC_EOS
26237                                           ! 3584     write_word(ss,BP,vgafont16alt);
26238                                           ! Debug: list * unsigned char = vgafont16alt+0 (used reg = )
26239 6AD3           BB                   3562  mov	bx,#_vgafont16alt
26240 6AD6           53                         push	bx
26241                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26242 6AD7           FF76         08            push	8[bp]
26243                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26244 6ADA           FF76         FE            push	-2[bp]
26245                                           ! Debug: func () void = write_word+0 (used reg = )
26246 6ADD           E8         10EE            call	_write_word
26247 6AE0           83C4                   06  add	sp,*6
26248                                           !BCC_EOS
26249                                           ! 3585     break;
26250 6AE3           EB           2B            jmp .22D
26251                                           !BCC_EOS
26252                                           ! 3586    default:
26253                                           ! 3587     return;
26254                       00006AE5            .238:
26255 6AE5           89EC                       mov	sp,bp
26256 6AE7           5D                         pop	bp
26257 6AE8           C3                         ret
26258                                           !BCC_EOS
26259                                           ! 3588   }
26260                                           ! 3589  write_word(ss,CX,(Bit16u)read_byte(0x40,0x85));
26261 6AE9           EB           25            jmp .22D
26262                       00006AEB            .22F:
26263 6AEB           2C                     00  sub	al,*0
26264 6AED           72           F6            jb 	.238
26265 6AEF           3C                     07  cmp	al,*7
26266 6AF1           77           1B            ja  	.239
26267 6AF3           30E4                       xor	ah,ah
26268 6AF5           D1E0                       shl	ax,*1
26269 6AF7           89C3                       mov	bx,ax
26270 6AF9           2E                         seg	cs
26271 6AFA           FFA7       6AFE            br	.23A[bx]
26272                       00006AFE            .23A:
26273 6AFE                      69A8            .word	.230
26274 6B00                      69DF            .word	.231
26275 6B02                      6A16            .word	.232
26276 6B04                      6A39            .word	.233
26277 6B06                      6A5C            .word	.234
26278 6B08                      6A7F            .word	.235
26279 6B0A                      6AA1            .word	.236
26280 6B0C                      6AC3            .word	.237
26281                       00006B0E            .239:
26282 6B0E           EB           D5            jmp	.238
26283                       00006B10            .22D:
26284                       FFFFFFFC            ..FFF5	=	-4
26285                                           ! Debug: list int = const $85 (used reg = )
26286 6B10           B8                   0085  mov	ax,#$85
26287 6B13           50                         push	ax
26288                                           ! Debug: list int = const $40 (used reg = )
26289 6B14           B8                   0040  mov	ax,*$40
26290 6B17           50                         push	ax
26291                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26292 6B18           E8         1075            call	_read_byte
26293 6B1B           83C4                   04  add	sp,*4
26294                                           ! Debug: cast unsigned short = const 0 to unsigned char = al+0 (used reg = )
26295 6B1E           30E4                       xor	ah,ah
26296                                           ! Debug: list unsigned short = ax+0 (used reg = )
26297 6B20           50                         push	ax
26298                                           ! Debug: list * unsigned short CX = [S+6+8] (used reg = )
26299 6B21           FF76         0A            push	$A[bp]
26300                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26301 6B24           FF76         FE            push	-2[bp]
26302                                           ! Debug: func () void = write_word+0 (used reg = )
26303 6B27           E8         10A4            call	_write_word
26304 6B2A           83C4                   06  add	sp,*6
26305                                           !BCC_EOS
26306                                           ! 3590  write_word(ss,DX,(Bit16u)read_byte(0x40,0x84));
26307                                           ! Debug: list int = const $84 (used reg = )
26308 6B2D           B8                   0084  mov	ax,#$84
26309 6B30           50                         push	ax
26310                                           ! Debug: list int = const $40 (used reg = )
26311 6B31           B8                   0040  mov	ax,*$40
26312 6B34           50                         push	ax
26313                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26314 6B35           E8         1058            call	_read_byte
26315 6B38           83C4                   04  add	sp,*4
26316                                           ! Debug: cast unsigned short = const 0 to unsigned char = al+0 (used reg = )
26317 6B3B           30E4                       xor	ah,ah
26318                                           ! Debug: list unsigned short = ax+0 (used reg = )
26319 6B3D           50                         push	ax
26320                                           ! Debug: list * unsigned short DX = [S+6+$A] (used reg = )
26321 6B3E           FF76         0C            push	$C[bp]
26322                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26323 6B41           FF76         FE            push	-2[bp]
26324                                           ! Debug: func () void = write_word+0 (used reg = )
26325 6B44           E8         1087            call	_write_word
26326 6B47           83C4                   06  add	sp,*6
26327                                           !BCC_EOS
26328                                           ! 3591 }
26329 6B4A           89EC                       mov	sp,bp
26330 6B4C           5D                         pop	bp
26331 6B4D           C3                         ret
26332                                           ! 3592 #asm
26333                                           !BCC_ASM
26334                       00000006            _biosfn_get_font_info.BP	set	6
26335                       00000002            _biosfn_get_font_info.BH	set	2
26336                       00000008            _biosfn_get_font_info.CX	set	8
26337                       0000000A            _biosfn_get_font_info.DX	set	$A
26338                       00000004            _biosfn_get_font_info.ES	set	4
26339                       00006B4E            biosfn_get_ega_info:
26340 6B4E           1E                           push ds
26341 6B4F           50                           push ax
26342 6B50           B8                   0040    mov ax, # 0x40
26343 6B53           8ED8                         mov ds, ax
26344 6B55           30ED                         xor ch, ch
26345 6B57           BB                   0088    mov bx, # 0x88
26346 6B5A           8A0F                         mov cl, [bx]
26347 6B5C           80E1                   0F    and cl, #0x0f
26348 6B5F           BB                   0063    mov bx, # 0x63
26349 6B62           8B07                         mov ax, [bx]
26350 6B64           BB                   0003    mov bx, #0x0003
26351 6B67           3D                   03B4    cmp ax, # 0x3b4
26352 6B6A           75           02              jne mode_ega_color
26353 6B6C           B7                     01    mov bh, #0x01
26354                       00006B6E            mode_ega_color:
26355 6B6E           58                           pop ax
26356 6B6F           1F                           pop ds
26357 6B70           C3                           ret
26358                                           ! 3612 endasm
26359                                           !BCC_ENDASM
26360                                           ! 3613 static void biosfn_alternate_prtsc()
26361                                           ! Register BX used in function biosfn_get_font_info
26362                                           ! 3614 {
26363                       00006B71            _biosfn_alternate_prtsc:
26364                                           ! 3615 }
26365 6B71           C3                         ret
26366                                           ! 3616 #asm
26367                                           !BCC_ASM
26368                       00006B72            biosfn_select_vert_res:
26369                                           ; res : 00 200 lines, 01 350 lines, 02 400 lines
26370 6B72           1E                           push ds
26371 6B73           53                           push bx
26372 6B74           52                           push dx
26373 6B75           88C2                         mov dl, al
26374 6B77           B8                   0040    mov ax, # 0x40
26375 6B7A           8ED8                         mov ds, ax
26376 6B7C           BB                   0089    mov bx, # 0x89
26377 6B7F           8A07                         mov al, [bx]
26378 6B81           BB                   0088    mov bx, # 0x88
26379 6B84           8A27                         mov ah, [bx]
26380 6B86           80FA                   01    cmp dl, #0x01
26381 6B89           74           15              je vert_res_350
26382 6B8B           72           1D              jb vert_res_200
26383 6B8D           80FA                   02    cmp dl, #0x02
26384 6B90           74           02              je vert_res_400
26385 6B92           EB           2A              jmp set_retcode
26386                       00006B94            vert_res_400:
26387                                             ; reset modeset ctl bit 7 and set bit 4
26388                                             ; set switches bit 3-0 to 0x09
26389 6B94           24                     7F    and al, #0x7f
26390 6B96           0C                     10    or al, #0x10
26391 6B98           80E4                   F0    and ah, #0xf0
26392 6B9B           80CC                   09    or ah, #0x09
26393 6B9E           75           14              jnz set_vert_res
26394                       00006BA0            vert_res_350:
26395                                             ; reset modeset ctl bit 7 and bit 4
26396                                             ; set switches bit 3-0 to 0x09
26397 6BA0           24                     6F    and al, #0x6f
26398 6BA2           80E4                   F0    and ah, #0xf0
26399 6BA5           80CC                   09    or ah, #0x09
26400 6BA8           75           0A              jnz set_vert_res
26401                       00006BAA            vert_res_200:
26402                                             ; set modeset ctl bit 7 and reset bit 4
26403                                             ; set switches bit 3-0 to 0x08
26404 6BAA           24                     EF    and al, #0xef
26405 6BAC           0C                     80    or al, #0x80
26406 6BAE           80E4                   F0    and ah, #0xf0
26407 6BB1           80CC                   08    or ah, #0x08
26408                       00006BB4            set_vert_res:
26409 6BB4           BB                   0089    mov bx, # 0x89
26410 6BB7           8807                         mov [bx], al
26411 6BB9           BB                   0088    mov bx, # 0x88
26412 6BBC           8827                         mov [bx], ah
26413                       00006BBE            set_retcode:
26414 6BBE           B8                   1212    mov ax, #0x1212
26415 6BC1           5A                           pop dx
26416 6BC2           5B                           pop bx
26417 6BC3           1F                           pop ds
26418 6BC4           C3                           ret
26419                       00006BC5            biosfn_enable_default_palette_loading:
26420 6BC5           1E                           push ds
26421 6BC6           53                           push bx
26422 6BC7           52                           push dx
26423 6BC8           88C2                         mov dl, al
26424 6BCA           80E2                   01    and dl, #0x01
26425 6BCD           C0E2                   03    shl dl, 3
26426 6BD0           B8                   0040    mov ax, # 0x40
26427 6BD3           8ED8                         mov ds, ax
26428 6BD5           BB                   0089    mov bx, # 0x89
26429 6BD8           8A07                         mov al, [bx]
26430 6BDA           24                     F7    and al, #0xf7
26431 6BDC           08D0                         or al, dl
26432 6BDE           8807                         mov [bx], al
26433 6BE0           B8                   1212    mov ax, #0x1212
26434 6BE3           5A                           pop dx
26435 6BE4           5B                           pop bx
26436 6BE5           1F                           pop ds
26437 6BE6           C3                           ret
26438                       00006BE7            biosfn_enable_video_addressing:
26439 6BE7           53                           push bx
26440 6BE8           52                           push dx
26441 6BE9           88C3                         mov bl, al
26442 6BEB           80E3                   01    and bl, #0x01
26443 6BEE           80F3                   01    xor bl, #0x01
26444 6BF1           D0E3                         shl bl, 1
26445 6BF3           BA                   03CC    mov dx, # 0x3cc
26446 6BF6           EC                           in al, dx
26447 6BF7           24                     FD    and al, #0xfd
26448 6BF9           08D8                         or al, bl
26449 6BFB           BA                   03C2    mov dx, # 0x3c2
26450 6BFE           EE                           out dx, al
26451 6BFF           B8                   1212    mov ax, #0x1212
26452 6C02           5A                           pop dx
26453 6C03           5B                           pop bx
26454 6C04           C3                           ret
26455                       00006C05            biosfn_enable_grayscale_summing:
26456 6C05           1E                           push ds
26457 6C06           53                           push bx
26458 6C07           52                           push dx
26459 6C08           88C2                         mov dl, al
26460 6C0A           80E2                   01    and dl, #0x01
26461 6C0D           80F2                   01    xor dl, #0x01
26462 6C10           D0E2                         shl dl, 1
26463 6C12           B8                   0040    mov ax, # 0x40
26464 6C15           8ED8                         mov ds, ax
26465 6C17           BB                   0089    mov bx, # 0x89
26466 6C1A           8A07                         mov al, [bx]
26467 6C1C           24                     FD    and al, #0xfd
26468 6C1E           08D0                         or al, dl
26469 6C20           8807                         mov [bx], al
26470 6C22           B8                   1212    mov ax, #0x1212
26471 6C25           5A                           pop dx
26472 6C26           5B                           pop bx
26473 6C27           1F                           pop ds
26474 6C28           C3                           ret
26475                       00006C29            biosfn_enable_cursor_emulation:
26476 6C29           1E                           push ds
26477 6C2A           53                           push bx
26478 6C2B           52                           push dx
26479 6C2C           88C2                         mov dl, al
26480 6C2E           80E2                   01    and dl, #0x01
26481 6C31           80F2                   01    xor dl, #0x01
26482 6C34           B8                   0040    mov ax, # 0x40
26483 6C37           8ED8                         mov ds, ax
26484 6C39           BB                   0089    mov bx, # 0x89
26485 6C3C           8A07                         mov al, [bx]
26486 6C3E           24                     FE    and al, #0xfe
26487 6C40           08D0                         or al, dl
26488 6C42           8807                         mov [bx], al
26489 6C44           B8                   1212    mov ax, #0x1212
26490 6C47           5A                           pop dx
26491 6C48           5B                           pop bx
26492 6C49           1F                           pop ds
26493 6C4A           C3                           ret
26494                                           ! 3743 endasm
26495                                           !BCC_ENDASM
26496                                           ! 3744 static void biosfn_switch_video_interface (AL,ES,DX) Bit8u AL;Bit16u ES;Bit16u DX;
26497                       00006C4B            _biosfn_switch_video_interface:
26498                                           !BCC_EOS
26499                                           !BCC_EOS
26500                                           !BCC_EOS
26501                                           ! 3745 {
26502                                           ! 3746 }
26503 6C4B           C3                         ret
26504                                           ! 3747 static void biosfn_enable_video_refresh_control (AL) Bit8u AL;
26505                       00006C4C            _biosfn_enable_video_refresh_control:
26506                                           !BCC_EOS
26507                                           ! 3748 {
26508                                           ! 3749 }
26509 6C4C           C3                         ret
26510                                           ! 3750 static void biosfn_write_string (flag,page,attr,count,row,col,seg,offset)
26511                                           ! 3751 Bit8u flag;Bit8u page;Bit8u attr;Bit16u count;Bit8u row;Bit8u col;Bit16u seg;Bit16u offset;
26512                       00006C4D            _biosfn_write_string:
26513                                           !BCC_EOS
26514                                           !BCC_EOS
26515                                           !BCC_EOS
26516                                           !BCC_EOS
26517                                           !BCC_EOS
26518                                           !BCC_EOS
26519                                           !BCC_EOS
26520                                           !BCC_EOS
26521                                           ! 3752 {
26522                                           ! 3753  Bit16u newcurs,oldcurs,dummy;
26523                                           !BCC_EOS
26524                                           ! 3754  Bit8u car,carattr;
26525                                           !BCC_EOS
26526                                           ! 3755  biosfn_get_cursor_pos(page,&dummy,&oldcurs);
26527 6C4D           55                         push	bp
26528 6C4E           89E5                       mov	bp,sp
26529 6C50           83C4                   F8  add	sp,*-8
26530                                           ! Debug: list * unsigned short oldcurs = S+$A-6 (used reg = )
26531 6C53           8D5E         FC            lea	bx,-4[bp]
26532 6C56           53                         push	bx
26533                                           ! Debug: list * unsigned short dummy = S+$C-8 (used reg = )
26534 6C57           8D5E         FA            lea	bx,-6[bp]
26535 6C5A           53                         push	bx
26536                                           ! Debug: list unsigned char page = [S+$E+4] (used reg = )
26537 6C5B           8A46         06            mov	al,6[bp]
26538 6C5E           30E4                       xor	ah,ah
26539 6C60           50                         push	ax
26540                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
26541 6C61           E8         D7E6            call	_biosfn_get_cursor_pos
26542 6C64           83C4                   06  add	sp,*6
26543                                           !BCC_EOS
26544                                           ! 3756  if(row==0xff)
26545                                           ! Debug: logeq int = const $FF to unsigned char row = [S+$A+$A] (used reg = )
26546 6C67           8A46         0C            mov	al,$C[bp]
26547 6C6A           3C                     FF  cmp	al,#$FF
26548 6C6C           75           12            jne 	.23B
26549                       00006C6E            .23C:
26550                                           ! 3757   {col=oldcurs&0x00ff;
26551                                           ! Debug: and int = const $FF to unsigned short oldcurs = [S+$A-6] (used reg = )
26552 6C6E           8A46         FC            mov	al,-4[bp]
26553                                           ! Debug: eq unsigned char = al+0 to unsigned char col = [S+$A+$C] (used reg = )
26554 6C71           8846         0E            mov	$E[bp],al
26555                                           !BCC_EOS
26556                                           ! 3758    row=(oldcurs&0xff00)>>8;
26557                                           ! Debug: and unsigned int = const $FF00 to unsigned short oldcurs = [S+$A-6] (used reg = )
26558 6C74           8B46         FC            mov	ax,-4[bp]
26559 6C77           30C0                       xor	al,al
26560                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
26561 6C79           88E0                       mov	al,ah
26562 6C7B           30E4                       xor	ah,ah
26563                                           ! Debug: eq unsigned int = ax+0 to unsigned char row = [S+$A+$A] (used reg = )
26564 6C7D           8846         0C            mov	$C[bp],al
26565                                           !BCC_EOS
26566                                           ! 3759   }
26567                                           ! 3760  newcurs=row; newcurs<<=8; newcurs+=col;
26568                       00006C80            .23B:
26569                                           ! Debug: eq unsigned char row = [S+$A+$A] to unsigned short newcurs = [S+$A-4] (used reg = )
26570 6C80           8A46         0C            mov	al,$C[bp]
26571 6C83           30E4                       xor	ah,ah
26572 6C85           8946         FE            mov	-2[bp],ax
26573                                           !BCC_EOS
26574                                           ! Debug: slab int = const 8 to unsigned short newcurs = [S+$A-4] (used reg = )
26575 6C88           8B46         FE            mov	ax,-2[bp]
26576 6C8B           88C4                       mov	ah,al
26577 6C8D           30C0                       xor	al,al
26578 6C8F           8946         FE            mov	-2[bp],ax
26579                                           !BCC_EOS
26580                                           ! Debug: addab unsigned char col = [S+$A+$C] to unsigned short newcurs = [S+$A-4] (used reg = )
26581 6C92           8B46         FE            mov	ax,-2[bp]
26582 6C95           0246         0E            add	al,$E[bp]
26583 6C98           80D4                   00  adc	ah,*0
26584 6C9B           8946         FE            mov	-2[bp],ax
26585                                           !BCC_EOS
26586                                           ! 3761  biosfn_set_cursor_pos(page,newcurs);
26587                                           ! Debug: list unsigned short newcurs = [S+$A-4] (used reg = )
26588 6C9E           FF76         FE            push	-2[bp]
26589                                           ! Debug: list unsigned char page = [S+$C+4] (used reg = )
26590 6CA1           8A46         06            mov	al,6[bp]
26591 6CA4           30E4                       xor	ah,ah
26592 6CA6           50                         push	ax
26593                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
26594 6CA7           E8         D6A0            call	_biosfn_set_cursor_pos
26595 6CAA           83C4                   04  add	sp,*4
26596                                           !BCC_EOS
26597                                           ! 3762  while(count--!=0)
26598                                           ! 3763   {
26599 6CAD           EB           4F            jmp .23E
26600                       00006CAF            .23F:
26601                                           ! 3764    car=read_byte(seg,offset++);
26602                                           ! Debug: postinc unsigned short offset = [S+$A+$10] (used reg = )
26603 6CAF           8B46         12            mov	ax,$12[bp]
26604 6CB2           40                         inc	ax
26605 6CB3           8946         12            mov	$12[bp],ax
26606                                           ! Debug: list unsigned short = ax-1 (used reg = )
26607 6CB6           48                         dec	ax
26608 6CB7           50                         push	ax
26609                                           ! Debug: list unsigned short seg = [S+$C+$E] (used reg = )
26610 6CB8           FF76         10            push	$10[bp]
26611                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26612 6CBB           E8         0ED2            call	_read_byte
26613 6CBE           83C4                   04  add	sp,*4
26614                                           ! Debug: eq unsigned char = al+0 to unsigned char car = [S+$A-9] (used reg = )
26615 6CC1           8846         F9            mov	-7[bp],al
26616                                           !BCC_EOS
26617                                           ! 3765    if((flag&0x02)!=0)
26618                                           ! Debug: and int = const 2 to unsigned char flag = [S+$A+2] (used reg = )
26619 6CC4           8A46         04            mov	al,4[bp]
26620 6CC7           24                     02  and	al,*2
26621                                           ! Debug: ne int = const 0 to unsigned char = al+0 (used reg = )
26622 6CC9           84C0                       test	al,al
26623 6CCB           74           15            je  	.240
26624                       00006CCD            .241:
26625                                           ! 3766     attr=read_byte(seg,offset++);
26626                                           ! Debug: postinc unsigned short offset = [S+$A+$10] (used reg = )
26627 6CCD           8B46         12            mov	ax,$12[bp]
26628 6CD0           40                         inc	ax
26629 6CD1           8946         12            mov	$12[bp],ax
26630                                           ! Debug: list unsigned short = ax-1 (used reg = )
26631 6CD4           48                         dec	ax
26632 6CD5           50                         push	ax
26633                                           ! Debug: list unsigned short seg = [S+$C+$E] (used reg = )
26634 6CD6           FF76         10            push	$10[bp]
26635                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26636 6CD9           E8         0EB4            call	_read_byte
26637 6CDC           83C4                   04  add	sp,*4
26638                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$A+6] (used reg = )
26639 6CDF           8846         08            mov	8[bp],al
26640                                           !BCC_EOS
26641                                           ! 3767    biosfn_write_teletype(car,page,attr,3);
26642                       00006CE2            .240:
26643                                           ! Debug: list int = const 3 (used reg = )
26644 6CE2           B8                   0003  mov	ax,*3
26645 6CE5           50                         push	ax
26646                                           ! Debug: list unsigned char attr = [S+$C+6] (used reg = )
26647 6CE6           8A46         08            mov	al,8[bp]
26648 6CE9           30E4                       xor	ah,ah
26649 6CEB           50                         push	ax
26650                                           ! Debug: list unsigned char page = [S+$E+4] (used reg = )
26651 6CEC           8A46         06            mov	al,6[bp]
26652 6CEF           30E4                       xor	ah,ah
26653 6CF1           50                         push	ax
26654                                           ! Debug: list unsigned char car = [S+$10-9] (used reg = )
26655 6CF2           8A46         F9            mov	al,-7[bp]
26656 6CF5           30E4                       xor	ah,ah
26657 6CF7           50                         push	ax
26658                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
26659 6CF8           E8         F199            call	_biosfn_write_teletype
26660 6CFB           83C4                   08  add	sp,*8
26661                                           !BCC_EOS
26662                                           ! 3768   }
26663                                           ! 3769  if((flag&0x01)==0)
26664                       00006CFE            .23E:
26665                                           ! Debug: postdec unsigned short count = [S+$A+8] (used reg = )
26666 6CFE           8B46         0A            mov	ax,$A[bp]
26667 6D01           48                         dec	ax
26668 6D02           8946         0A            mov	$A[bp],ax
26669                                           ! Debug: ne int = const 0 to unsigned short = ax+1 (used reg = )
26670 6D05           3D                   FFFF  cmp	ax,*-1
26671 6D08           75           A5            jne	.23F
26672                       00006D0A            .242:
26673                       00006D0A            .23D:
26674                                           ! Debug: and int = const 1 to unsigned char flag = [S+$A+2] (used reg = )
26675 6D0A           8A46         04            mov	al,4[bp]
26676 6D0D           24                     01  and	al,*1
26677                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
26678 6D0F           84C0                       test	al,al
26679 6D11           75           0F            jne 	.243
26680                       00006D13            .244:
26681                                           ! 3770   biosfn_set_cursor_pos(page,oldcurs);
26682                                           ! Debug: list unsigned short oldcurs = [S+$A-6] (used reg = )
26683 6D13           FF76         FC            push	-4[bp]
26684                                           ! Debug: list unsigned char page = [S+$C+4] (used reg = )
26685 6D16           8A46         06            mov	al,6[bp]
26686 6D19           30E4                       xor	ah,ah
26687 6D1B           50                         push	ax
26688                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
26689 6D1C           E8         D62B            call	_biosfn_set_cursor_pos
26690 6D1F           83C4                   04  add	sp,*4
26691                                           !BCC_EOS
26692                                           ! 3771 }
26693                       00006D22            .243:
26694 6D22           89EC                       mov	sp,bp
26695 6D24           5D                         pop	bp
26696 6D25           C3                         ret
26697                                           ! 3772 #asm
26698                                           !BCC_ASM
26699                       00000008            _biosfn_write_string.count	set	8
26700                       0000000E            _biosfn_write_string.seg	set	$E
26701                       0000000C            _biosfn_write_string.col	set	$C
26702                       00000002            _biosfn_write_string.flag	set	2
26703                       00000006            _biosfn_write_string.attr	set	6
26704                       00000004            _biosfn_write_string.page	set	4
26705                       0000000A            _biosfn_write_string.row	set	$A
26706                       00000010            _biosfn_write_string.offset	set	$10
26707                       00006D26            biosfn_group_1A:
26708 6D26           3C                     00    cmp al, #0x00
26709 6D28           74           05              je biosfn_read_display_code
26710 6D2A           3C                     01    cmp al, #0x01
26711 6D2C           74           16              je biosfn_set_display_code
26712 6D2E           C3                           ret
26713                       00006D2F            biosfn_read_display_code:
26714 6D2F           1E                           push ds
26715 6D30           50                           push ax
26716 6D31           B8                   0040    mov ax, # 0x40
26717 6D34           8ED8                         mov ds, ax
26718 6D36           BB                   008A    mov bx, # 0x8A
26719 6D39           8A07                         mov al, [bx]
26720 6D3B           88C3                         mov bl, al
26721 6D3D           30FF                         xor bh, bh
26722 6D3F           58                           pop ax
26723 6D40           88E0                         mov al, ah
26724 6D42           1F                           pop ds
26725 6D43           C3                           ret
26726                       00006D44            biosfn_set_display_code:
26727 6D44           1E                           push ds
26728 6D45           50                           push ax
26729 6D46           53                           push bx
26730 6D47           B8                   0040    mov ax, # 0x40
26731 6D4A           8ED8                         mov ds, ax
26732 6D4C           89D8                         mov ax, bx
26733 6D4E           BB                   008A    mov bx, # 0x8A
26734 6D51           8807                         mov [bx], al
26735 6D53           5B                           pop bx
26736 6D54           58                           pop ax
26737 6D55           88E0                         mov al, ah
26738 6D57           1F                           pop ds
26739 6D58           C3                           ret
26740                                           ! 3806 endasm
26741                                           !BCC_ENDASM
26742                                           ! 3807 static void biosfn_read_state_info (BX,ES,DI)
26743                                           ! Register BX used in function biosfn_write_string
26744                                           ! 3808 Bit16u BX;Bit16u ES;Bit16u DI;
26745                       00006D59            _biosfn_read_state_info:
26746                                           !BCC_EOS
26747                                           !BCC_EOS
26748                                           !BCC_EOS
26749                                           ! 3809 {
26750                                           ! 3810  write_word(ES,DI+0x00,&static_functionality);
26751 6D59           55                         push	bp
26752 6D5A           89E5                       mov	bp,sp
26753                                           ! Debug: list * [$10] unsigned char = static_functionality+0 (used reg = )
26754 6D5C           BB                   0F51  mov	bx,#_static_functionality
26755 6D5F           53                         push	bx
26756                                           ! Debug: add int = const 0 to unsigned short DI = [S+4+6] (used reg = )
26757 6D60           8B46         08            mov	ax,8[bp]
26758                                           ! Debug: list unsigned int = ax+0 (used reg = )
26759 6D63           50                         push	ax
26760                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26761 6D64           FF76         06            push	6[bp]
26762                                           ! Debug: func () void = write_word+0 (used reg = )
26763 6D67           E8         0E64            call	_write_word
26764 6D6A           89EC                       mov	sp,bp
26765                                           !BCC_EOS
26766                                           ! 3811  write_word(ES,DI+0x02,0xC000);
26767                                           ! Debug: list unsigned int = const $C000 (used reg = )
26768 6D6C           B8                   C000  mov	ax,#$C000
26769 6D6F           50                         push	ax
26770                                           ! Debug: add int = const 2 to unsigned short DI = [S+4+6] (used reg = )
26771 6D70           8B46         08            mov	ax,8[bp]
26772                                           ! Debug: list unsigned int = ax+2 (used reg = )
26773 6D73           40                         inc	ax
26774 6D74           40                         inc	ax
26775 6D75           50                         push	ax
26776                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26777 6D76           FF76         06            push	6[bp]
26778                                           ! Debug: func () void = write_word+0 (used reg = )
26779 6D79           E8         0E52            call	_write_word
26780 6D7C           89EC                       mov	sp,bp
26781                                           !BCC_EOS
26782                                           ! 3812  memcpyb(ES,DI+0x04,0x40,0x49,30);
26783                                           ! Debug: list int = const $1E (used reg = )
26784 6D7E           B8                   001E  mov	ax,*$1E
26785 6D81           50                         push	ax
26786                                           ! Debug: list int = const $49 (used reg = )
26787 6D82           B8                   0049  mov	ax,*$49
26788 6D85           50                         push	ax
26789                                           ! Debug: list int = const $40 (used reg = )
26790 6D86           B8                   0040  mov	ax,*$40
26791 6D89           50                         push	ax
26792                                           ! Debug: add int = const 4 to unsigned short DI = [S+8+6] (used reg = )
26793 6D8A           8B46         08            mov	ax,8[bp]
26794                                           ! Debug: list unsigned int = ax+4 (used reg = )
26795 6D8D           05                   0004  add	ax,*4
26796 6D90           50                         push	ax
26797                                           ! Debug: list unsigned short ES = [S+$A+4] (used reg = )
26798 6D91           FF76         06            push	6[bp]
26799                                           ! Debug: func () void = memcpyb+0 (used reg = )
26800 6D94           E8         0D99            call	_memcpyb
26801 6D97           89EC                       mov	sp,bp
26802                                           !BCC_EOS
26803                                           ! 3813  memcpyb(ES,DI+0x22,0x40,0x84,3);
26804                                           ! Debug: list int = const 3 (used reg = )
26805 6D99           B8                   0003  mov	ax,*3
26806 6D9C           50                         push	ax
26807                                           ! Debug: list int = const $84 (used reg = )
26808 6D9D           B8                   0084  mov	ax,#$84
26809 6DA0           50                         push	ax
26810                                           ! Debug: list int = const $40 (used reg = )
26811 6DA1           B8                   0040  mov	ax,*$40
26812 6DA4           50                         push	ax
26813                                           ! Debug: add int = const $22 to unsigned short DI = [S+8+6] (used reg = )
26814 6DA5           8B46         08            mov	ax,8[bp]
26815                                           ! Debug: list unsigned int = ax+$22 (used reg = )
26816 6DA8           05                   0022  add	ax,*$22
26817 6DAB           50                         push	ax
26818                                           ! Debug: list unsigned short ES = [S+$A+4] (used reg = )
26819 6DAC           FF76         06            push	6[bp]
26820                                           ! Debug: func () void = memcpyb+0 (used reg = )
26821 6DAF           E8         0D7E            call	_memcpyb
26822 6DB2           89EC                       mov	sp,bp
26823                                           !BCC_EOS
26824                                           ! 3814  write_byte(ES,DI+0x25,read_byte(0x40,0x8A));
26825                                           ! Debug: list int = const $8A (used reg = )
26826 6DB4           B8                   008A  mov	ax,#$8A
26827 6DB7           50                         push	ax
26828                                           ! Debug: list int = const $40 (used reg = )
26829 6DB8           B8                   0040  mov	ax,*$40
26830 6DBB           50                         push	ax
26831                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26832 6DBC           E8         0DD1            call	_read_byte
26833 6DBF           89EC                       mov	sp,bp
26834                                           ! Debug: list unsigned char = al+0 (used reg = )
26835 6DC1           30E4                       xor	ah,ah
26836 6DC3           50                         push	ax
26837                                           ! Debug: add int = const $25 to unsigned short DI = [S+4+6] (used reg = )
26838 6DC4           8B46         08            mov	ax,8[bp]
26839                                           ! Debug: list unsigned int = ax+$25 (used reg = )
26840 6DC7           05                   0025  add	ax,*$25
26841 6DCA           50                         push	ax
26842                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26843 6DCB           FF76         06            push	6[bp]
26844                                           ! Debug: func () void = write_byte+0 (used reg = )
26845 6DCE           E8         0DE5            call	_write_byte
26846 6DD1           89EC                       mov	sp,bp
26847                                           !BCC_EOS
26848                                           ! 3815  write_byte(ES,DI+0x26,0);
26849                                           ! Debug: list int = const 0 (used reg = )
26850 6DD3           31C0                       xor	ax,ax
26851 6DD5           50                         push	ax
26852                                           ! Debug: add int = const $26 to unsigned short DI = [S+4+6] (used reg = )
26853 6DD6           8B46         08            mov	ax,8[bp]
26854                                           ! Debug: list unsigned int = ax+$26 (used reg = )
26855 6DD9           05                   0026  add	ax,*$26
26856 6DDC           50                         push	ax
26857                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26858 6DDD           FF76         06            push	6[bp]
26859                                           ! Debug: func () void = write_byte+0 (used reg = )
26860 6DE0           E8         0DD3            call	_write_byte
26861 6DE3           89EC                       mov	sp,bp
26862                                           !BCC_EOS
26863                                           ! 3816  write_byte(ES,DI+0x27,16);
26864                                           ! Debug: list int = const $10 (used reg = )
26865 6DE5           B8                   0010  mov	ax,*$10
26866 6DE8           50                         push	ax
26867                                           ! Debug: add int = const $27 to unsigned short DI = [S+4+6] (used reg = )
26868 6DE9           8B46         08            mov	ax,8[bp]
26869                                           ! Debug: list unsigned int = ax+$27 (used reg = )
26870 6DEC           05                   0027  add	ax,*$27
26871 6DEF           50                         push	ax
26872                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26873 6DF0           FF76         06            push	6[bp]
26874                                           ! Debug: func () void = write_byte+0 (used reg = )
26875 6DF3           E8         0DC0            call	_write_byte
26876 6DF6           89EC                       mov	sp,bp
26877                                           !BCC_EOS
26878                                           ! 3817  write_byte(ES,DI+0x28,0);
26879                                           ! Debug: list int = const 0 (used reg = )
26880 6DF8           31C0                       xor	ax,ax
26881 6DFA           50                         push	ax
26882                                           ! Debug: add int = const $28 to unsigned short DI = [S+4+6] (used reg = )
26883 6DFB           8B46         08            mov	ax,8[bp]
26884                                           ! Debug: list unsigned int = ax+$28 (used reg = )
26885 6DFE           05                   0028  add	ax,*$28
26886 6E01           50                         push	ax
26887                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26888 6E02           FF76         06            push	6[bp]
26889                                           ! Debug: func () void = write_byte+0 (used reg = )
26890 6E05           E8         0DAE            call	_write_byte
26891 6E08           89EC                       mov	sp,bp
26892                                           !BCC_EOS
26893                                           ! 3818  write_byte(ES,DI+0x29,8);
26894                                           ! Debug: list int = const 8 (used reg = )
26895 6E0A           B8                   0008  mov	ax,*8
26896 6E0D           50                         push	ax
26897                                           ! Debug: add int = const $29 to unsigned short DI = [S+4+6] (used reg = )
26898 6E0E           8B46         08            mov	ax,8[bp]
26899                                           ! Debug: list unsigned int = ax+$29 (used reg = )
26900 6E11           05                   0029  add	ax,*$29
26901 6E14           50                         push	ax
26902                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26903 6E15           FF76         06            push	6[bp]
26904                                           ! Debug: func () void = write_byte+0 (used reg = )
26905 6E18           E8         0D9B            call	_write_byte
26906 6E1B           89EC                       mov	sp,bp
26907                                           !BCC_EOS
26908                                           ! 3819  write_byte(ES,DI+0x2a,2);
26909                                           ! Debug: list int = const 2 (used reg = )
26910 6E1D           B8                   0002  mov	ax,*2
26911 6E20           50                         push	ax
26912                                           ! Debug: add int = const $2A to unsigned short DI = [S+4+6] (used reg = )
26913 6E21           8B46         08            mov	ax,8[bp]
26914                                           ! Debug: list unsigned int = ax+$2A (used reg = )
26915 6E24           05                   002A  add	ax,*$2A
26916 6E27           50                         push	ax
26917                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26918 6E28           FF76         06            push	6[bp]
26919                                           ! Debug: func () void = write_byte+0 (used reg = )
26920 6E2B           E8         0D88            call	_write_byte
26921 6E2E           89EC                       mov	sp,bp
26922                                           !BCC_EOS
26923                                           ! 3820  write_byte(ES,DI+0x2b,0);
26924                                           ! Debug: list int = const 0 (used reg = )
26925 6E30           31C0                       xor	ax,ax
26926 6E32           50                         push	ax
26927                                           ! Debug: add int = const $2B to unsigned short DI = [S+4+6] (used reg = )
26928 6E33           8B46         08            mov	ax,8[bp]
26929                                           ! Debug: list unsigned int = ax+$2B (used reg = )
26930 6E36           05                   002B  add	ax,*$2B
26931 6E39           50                         push	ax
26932                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26933 6E3A           FF76         06            push	6[bp]
26934                                           ! Debug: func () void = write_byte+0 (used reg = )
26935 6E3D           E8         0D76            call	_write_byte
26936 6E40           89EC                       mov	sp,bp
26937                                           !BCC_EOS
26938                                           ! 3821  write_byte(ES,DI+0x2c,0);
26939                                           ! Debug: list int = const 0 (used reg = )
26940 6E42           31C0                       xor	ax,ax
26941 6E44           50                         push	ax
26942                                           ! Debug: add int = const $2C to unsigned short DI = [S+4+6] (used reg = )
26943 6E45           8B46         08            mov	ax,8[bp]
26944                                           ! Debug: list unsigned int = ax+$2C (used reg = )
26945 6E48           05                   002C  add	ax,*$2C
26946 6E4B           50                         push	ax
26947                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26948 6E4C           FF76         06            push	6[bp]
26949                                           ! Debug: func () void = write_byte+0 (used reg = )
26950 6E4F           E8         0D64            call	_write_byte
26951 6E52           89EC                       mov	sp,bp
26952                                           !BCC_EOS
26953                                           ! 3822  write_byte(ES,DI+0x31,3);
26954                                           ! Debug: list int = const 3 (used reg = )
26955 6E54           B8                   0003  mov	ax,*3
26956 6E57           50                         push	ax
26957                                           ! Debug: add int = const $31 to unsigned short DI = [S+4+6] (used reg = )
26958 6E58           8B46         08            mov	ax,8[bp]
26959                                           ! Debug: list unsigned int = ax+$31 (used reg = )
26960 6E5B           05                   0031  add	ax,*$31
26961 6E5E           50                         push	ax
26962                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26963 6E5F           FF76         06            push	6[bp]
26964                                           ! Debug: func () void = write_byte+0 (used reg = )
26965 6E62           E8         0D51            call	_write_byte
26966 6E65           89EC                       mov	sp,bp
26967                                           !BCC_EOS
26968                                           ! 3823  write_byte(ES,DI+0x32,0);
26969                                           ! Debug: list int = const 0 (used reg = )
26970 6E67           31C0                       xor	ax,ax
26971 6E69           50                         push	ax
26972                                           ! Debug: add int = const $32 to unsigned short DI = [S+4+6] (used reg = )
26973 6E6A           8B46         08            mov	ax,8[bp]
26974                                           ! Debug: list unsigned int = ax+$32 (used reg = )
26975 6E6D           05                   0032  add	ax,*$32
26976 6E70           50                         push	ax
26977                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26978 6E71           FF76         06            push	6[bp]
26979                                           ! Debug: func () void = write_byte+0 (used reg = )
26980 6E74           E8         0D3F            call	_write_byte
26981 6E77           89EC                       mov	sp,bp
26982                                           !BCC_EOS
26983                                           ! 3824  memsetb(ES,DI+0x33,0,13);
26984                                           ! Debug: list int = const $D (used reg = )
26985 6E79           B8                   000D  mov	ax,*$D
26986 6E7C           50                         push	ax
26987                                           ! Debug: list int = const 0 (used reg = )
26988 6E7D           31C0                       xor	ax,ax
26989 6E7F           50                         push	ax
26990                                           ! Debug: add int = const $33 to unsigned short DI = [S+6+6] (used reg = )
26991 6E80           8B46         08            mov	ax,8[bp]
26992                                           ! Debug: list unsigned int = ax+$33 (used reg = )
26993 6E83           05                   0033  add	ax,*$33
26994 6E86           50                         push	ax
26995                                           ! Debug: list unsigned short ES = [S+8+4] (used reg = )
26996 6E87           FF76         06            push	6[bp]
26997                                           ! Debug: func () void = memsetb+0 (used reg = )
26998 6E8A           E8         0C59            call	_memsetb
26999 6E8D           89EC                       mov	sp,bp
27000                                           !BCC_EOS
27001                                           ! 3825 }
27002 6E8F           5D                         pop	bp
27003 6E90           C3                         ret
27004                                           ! 3826 static Bit16u biosfn_read_video_state_size2 (CX)
27005                                           ! Register BX used in function biosfn_read_state_info
27006                                           ! 3827      Bit16u CX;
27007                       00006E91            _biosfn_read_video_state_size2:
27008                                           !BCC_EOS
27009                                           ! 3828 {
27010                                           ! 3829     Bit16u size;
27011                                           !BCC_EOS
27012                                           ! 3830     size = 0;
27013 6E91           55                         push	bp
27014 6E92           89E5                       mov	bp,sp
27015 6E94           4C                         dec	sp
27016 6E95           4C                         dec	sp
27017                                           ! Debug: eq int = const 0 to unsigned short size = [S+4-4] (used reg = )
27018 6E96           31C0                       xor	ax,ax
27019 6E98           8946         FE            mov	-2[bp],ax
27020                                           !BCC_EOS
27021                                           ! 3831     if (CX & 1) {
27022                                           ! Debug: and int = const 1 to unsigned short CX = [S+4+2] (used reg = )
27023 6E9B           8A46         04            mov	al,4[bp]
27024 6E9E           24                     01  and	al,*1
27025 6EA0           84C0                       test	al,al
27026 6EA2           74           09            je  	.245
27027                       00006EA4            .246:
27028                                           ! 3832         size += 0x46;
27029                                           ! Debug: addab int = const $46 to unsigned short size = [S+4-4] (used reg = )
27030 6EA4           8B46         FE            mov	ax,-2[bp]
27031 6EA7           05                   0046  add	ax,*$46
27032 6EAA           8946         FE            mov	-2[bp],ax
27033                                           !BCC_EOS
27034                                           ! 3833     }
27035                                           ! 3834     if (CX & 2) {
27036                       00006EAD            .245:
27037                                           ! Debug: and int = const 2 to unsigned short CX = [S+4+2] (used reg = )
27038 6EAD           8A46         04            mov	al,4[bp]
27039 6EB0           24                     02  and	al,*2
27040 6EB2           84C0                       test	al,al
27041 6EB4           74           09            je  	.247
27042                       00006EB6            .248:
27043                                           ! 3835         size += (5 + 8 + 5) * 2 + 6;
27044                                           ! Debug: addab int = const $2A to unsigned short size = [S+4-4] (used reg = )
27045 6EB6           8B46         FE            mov	ax,-2[bp]
27046 6EB9           05                   002A  add	ax,*$2A
27047 6EBC           8946         FE            mov	-2[bp],ax
27048                                           !BCC_EOS
27049                                           ! 3836     }
27050                                           ! 3837     if (CX & 4) {
27051                       00006EBF            .247:
27052                                           ! Debug: and int = const 4 to unsigned short CX = [S+4+2] (used reg = )
27053 6EBF           8A46         04            mov	al,4[bp]
27054 6EC2           24                     04  and	al,*4
27055 6EC4           84C0                       test	al,al
27056 6EC6           74           09            je  	.249
27057                       00006EC8            .24A:
27058                                           ! 3838         size += 3 + 256 * 3 + 1;
27059                                           ! Debug: addab int = const $304 to unsigned short size = [S+4-4] (used reg = )
27060 6EC8           8B46         FE            mov	ax,-2[bp]
27061 6ECB           05                   0304  add	ax,#$304
27062 6ECE           8946         FE            mov	-2[bp],ax
27063                                           !BCC_EOS
27064                                           ! 3839 }
27065                                           ! 3840     return size;
27066                       00006ED1            .249:
27067 6ED1           8B46         FE            mov	ax,-2[bp]
27068 6ED4           89EC                       mov	sp,bp
27069 6ED6           5D                         pop	bp
27070 6ED7           C3                         ret
27071                                           !BCC_EOS
27072                                           ! 3841 }
27073                                           ! 3842 static void biosfn_read_video_state_size (CX, BX)
27074                                           ! 3843      Bit16u CX; Bit16u *BX;
27075                       00006ED8            _biosfn_read_video_state_size:
27076                                           !BCC_EOS
27077                                           !BCC_EOS
27078                                           ! 3844 {
27079                                           ! 3845     Bit16u ss=get_SS();
27080 6ED8           55                         push	bp
27081 6ED9           89E5                       mov	bp,sp
27082 6EDB           4C                         dec	sp
27083 6EDC           4C                         dec	sp
27084                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
27085 6EDD           E8         0D3C            call	_get_SS
27086                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
27087 6EE0           8946         FE            mov	-2[bp],ax
27088                                           !BCC_EOS
27089                                           ! 3846     write_word(ss, BX, biosfn_read_video_state_size2(CX));
27090                                           ! Debug: list unsigned short CX = [S+4+2] (used reg = )
27091 6EE3           FF76         04            push	4[bp]
27092                                           ! Debug: func () unsigned short = biosfn_read_video_state_size2+0 (used reg = )
27093 6EE6           E8         FFA8            call	_biosfn_read_video_state_size2
27094 6EE9           44                         inc	sp
27095 6EEA           44                         inc	sp
27096                                           ! Debug: list unsigned short = ax+0 (used reg = )
27097 6EEB           50                         push	ax
27098                                           ! Debug: list * unsigned short BX = [S+6+4] (used reg = )
27099 6EEC           FF76         06            push	6[bp]
27100                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
27101 6EEF           FF76         FE            push	-2[bp]
27102                                           ! Debug: func () void = write_word+0 (used reg = )
27103 6EF2           E8         0CD9            call	_write_word
27104 6EF5           83C4                   06  add	sp,*6
27105                                           !BCC_EOS
27106                                           ! 3847 }
27107 6EF8           89EC                       mov	sp,bp
27108 6EFA           5D                         pop	bp
27109 6EFB           C3                         ret
27110                                           ! 3848 static Bit16u biosfn_save_video_state (CX,ES,BX)
27111                                           ! 3849      Bit16u CX;Bit16u ES;Bit16u BX;
27112                       00006EFC            _biosfn_save_video_state:
27113                                           !BCC_EOS
27114                                           !BCC_EOS
27115                                           !BCC_EOS
27116                                           ! 3850 {
27117                                           ! 3851     Bit16u i, v, crtc_addr, ar_index;
27118                                           !BCC_EOS
27119                                           ! 3852     crtc_addr = read_word(0x40, 0x63);
27120 6EFC           55                         push	bp
27121 6EFD           89E5                       mov	bp,sp
27122 6EFF           83C4                   F8  add	sp,*-8
27123                                           ! Debug: list int = const $63 (used reg = )
27124 6F02           B8                   0063  mov	ax,*$63
27125 6F05           50                         push	ax
27126                                           ! Debug: list int = const $40 (used reg = )
27127 6F06           B8                   0040  mov	ax,*$40
27128 6F09           50                         push	ax
27129                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27130 6F0A           E8         0C96            call	_read_word
27131 6F0D           83C4                   04  add	sp,*4
27132                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$A-8] (used reg = )
27133 6F10           8946         FA            mov	-6[bp],ax
27134                                           !BCC_EOS
27135                                           ! 3853     if (CX & 1) {
27136                                           ! Debug: and int = const 1 to unsigned short CX = [S+$A+2] (used reg = )
27137 6F13           8A46         04            mov	al,4[bp]
27138 6F16           24                     01  and	al,*1
27139 6F18           84C0                       test	al,al
27140 6F1A         0F84         0266            beq 	.24B
27141                       00006F1E            .24C:
27142                                           ! 3854         write_byte(ES, BX, inb(0x3c4)); BX++;
27143                                           ! Debug: list int = const $3C4 (used reg = )
27144 6F1E           B8                   03C4  mov	ax,#$3C4
27145 6F21           50                         push	ax
27146                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27147 6F22           E8         0CC1            call	_inb
27148 6F25           44                         inc	sp
27149 6F26           44                         inc	sp
27150                                           ! Debug: list unsigned char = al+0 (used reg = )
27151 6F27           30E4                       xor	ah,ah
27152 6F29           50                         push	ax
27153                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27154 6F2A           FF76         08            push	8[bp]
27155                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27156 6F2D           FF76         06            push	6[bp]
27157                                           ! Debug: func () void = write_byte+0 (used reg = )
27158 6F30           E8         0C83            call	_write_byte
27159 6F33           83C4                   06  add	sp,*6
27160                                           !BCC_EOS
27161                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27162 6F36           8B46         08            mov	ax,8[bp]
27163 6F39           40                         inc	ax
27164 6F3A           8946         08            mov	8[bp],ax
27165                                           !BCC_EOS
27166                                           ! 3855         write_byte(ES, BX, inb(crtc_addr)); BX++;
27167                                           ! Debug: list unsigned short crtc_addr = [S+$A-8] (used reg = )
27168 6F3D           FF76         FA            push	-6[bp]
27169                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27170 6F40           E8         0CA3            call	_inb
27171 6F43           44                         inc	sp
27172 6F44           44                         inc	sp
27173                                           ! Debug: list unsigned char = al+0 (used reg = )
27174 6F45           30E4                       xor	ah,ah
27175 6F47           50                         push	ax
27176                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27177 6F48           FF76         08            push	8[bp]
27178                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27179 6F4B           FF76         06            push	6[bp]
27180                                           ! Debug: func () void = write_byte+0 (used reg = )
27181 6F4E           E8         0C65            call	_write_byte
27182 6F51           83C4                   06  add	sp,*6
27183                                           !BCC_EOS
27184                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27185 6F54           8B46         08            mov	ax,8[bp]
27186 6F57           40                         inc	ax
27187 6F58           8946         08            mov	8[bp],ax
27188                                           !BCC_EOS
27189                                           ! 3856         write_byte(ES, BX, inb(0x3ce)); BX++;
27190                                           ! Debug: list int = const $3CE (used reg = )
27191 6F5B           B8                   03CE  mov	ax,#$3CE
27192 6F5E           50                         push	ax
27193                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27194 6F5F           E8         0C84            call	_inb
27195 6F62           44                         inc	sp
27196 6F63           44                         inc	sp
27197                                           ! Debug: list unsigned char = al+0 (used reg = )
27198 6F64           30E4                       xor	ah,ah
27199 6F66           50                         push	ax
27200                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27201 6F67           FF76         08            push	8[bp]
27202                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27203 6F6A           FF76         06            push	6[bp]
27204                                           ! Debug: func () void = write_byte+0 (used reg = )
27205 6F6D           E8         0C46            call	_write_byte
27206 6F70           83C4                   06  add	sp,*6
27207                                           !BCC_EOS
27208                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27209 6F73           8B46         08            mov	ax,8[bp]
27210 6F76           40                         inc	ax
27211 6F77           8946         08            mov	8[bp],ax
27212                                           !BCC_EOS
27213                                           ! 3857         inb(0x3da);
27214                                           ! Debug: list int = const $3DA (used reg = )
27215 6F7A           B8                   03DA  mov	ax,#$3DA
27216 6F7D           50                         push	ax
27217                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27218 6F7E           E8         0C65            call	_inb
27219 6F81           44                         inc	sp
27220 6F82           44                         inc	sp
27221                                           !BCC_EOS
27222                                           ! 3858         ar_index = inb(0x3c0);
27223                                           ! Debug: list int = const $3C0 (used reg = )
27224 6F83           B8                   03C0  mov	ax,#$3C0
27225 6F86           50                         push	ax
27226                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27227 6F87           E8         0C5C            call	_inb
27228 6F8A           44                         inc	sp
27229 6F8B           44                         inc	sp
27230                                           ! Debug: eq unsigned char = al+0 to unsigned short ar_index = [S+$A-$A] (used reg = )
27231 6F8C           30E4                       xor	ah,ah
27232 6F8E           8946         F8            mov	-8[bp],ax
27233                                           !BCC_EOS
27234                                           ! 3859         write_byte(ES, BX, ar_index); BX++;
27235                                           ! Debug: list unsigned short ar_index = [S+$A-$A] (used reg = )
27236 6F91           FF76         F8            push	-8[bp]
27237                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27238 6F94           FF76         08            push	8[bp]
27239                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27240 6F97           FF76         06            push	6[bp]
27241                                           ! Debug: func () void = write_byte+0 (used reg = )
27242 6F9A           E8         0C19            call	_write_byte
27243 6F9D           83C4                   06  add	sp,*6
27244                                           !BCC_EOS
27245                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27246 6FA0           8B46         08            mov	ax,8[bp]
27247 6FA3           40                         inc	ax
27248 6FA4           8946         08            mov	8[bp],ax
27249                                           !BCC_EOS
27250                                           ! 3860         write_byte(ES, BX, inb(0x3ca)); BX++;
27251                                           ! Debug: list int = const $3CA (used reg = )
27252 6FA7           B8                   03CA  mov	ax,#$3CA
27253 6FAA           50                         push	ax
27254                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27255 6FAB           E8         0C38            call	_inb
27256 6FAE           44                         inc	sp
27257 6FAF           44                         inc	sp
27258                                           ! Debug: list unsigned char = al+0 (used reg = )
27259 6FB0           30E4                       xor	ah,ah
27260 6FB2           50                         push	ax
27261                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27262 6FB3           FF76         08            push	8[bp]
27263                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27264 6FB6           FF76         06            push	6[bp]
27265                                           ! Debug: func () void = write_byte+0 (used reg = )
27266 6FB9           E8         0BFA            call	_write_byte
27267 6FBC           83C4                   06  add	sp,*6
27268                                           !BCC_EOS
27269                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27270 6FBF           8B46         08            mov	ax,8[bp]
27271 6FC2           40                         inc	ax
27272 6FC3           8946         08            mov	8[bp],ax
27273                                           !BCC_EOS
27274                                           ! 3861         for(i=1;i<=4;i++){
27275                                           ! Debug: eq int = const 1 to unsigned short i = [S+$A-4] (used reg = )
27276 6FC6           B8                   0001  mov	ax,*1
27277 6FC9           8946         FE            mov	-2[bp],ax
27278                                           !BCC_EOS
27279                                           !BCC_EOS
27280 6FCC           EB           33            jmp .24F
27281                       00006FCE            .250:
27282                                           ! 3862             outb(0x3c4, i);
27283                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
27284 6FCE           FF76         FE            push	-2[bp]
27285                                           ! Debug: list int = const $3C4 (used reg = )
27286 6FD1           B8                   03C4  mov	ax,#$3C4
27287 6FD4           50                         push	ax
27288                                           ! Debug: func () void = outb+0 (used reg = )
27289 6FD5           E8         0C24            call	_outb
27290 6FD8           83C4                   04  add	sp,*4
27291                                           !BCC_EOS
27292                                           ! 3863             write_byte(ES, BX, inb(0x3c5)); BX++;
27293                                           ! Debug: list int = const $3C5 (used reg = )
27294 6FDB           B8                   03C5  mov	ax,#$3C5
27295 6FDE           50                         push	ax
27296                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27297 6FDF           E8         0C04            call	_inb
27298 6FE2           44                         inc	sp
27299 6FE3           44                         inc	sp
27300                                           ! Debug: list unsigned char = al+0 (used reg = )
27301 6FE4           30E4                       xor	ah,ah
27302 6FE6           50                         push	ax
27303                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27304 6FE7           FF76         08            push	8[bp]
27305                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27306 6FEA           FF76         06            push	6[bp]
27307                                           ! Debug: func () void = write_byte+0 (used reg = )
27308 6FED           E8         0BC6            call	_write_byte
27309 6FF0           83C4                   06  add	sp,*6
27310                                           !BCC_EOS
27311                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27312 6FF3           8B46         08            mov	ax,8[bp]
27313 6FF6           40                         inc	ax
27314 6FF7           8946         08            mov	8[bp],ax
27315                                           !BCC_EOS
27316                                           ! 3864         }
27317                                           ! 3865         outb(0x3c4, 0);
27318                       00006FFA            .24E:
27319                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27320 6FFA           8B46         FE            mov	ax,-2[bp]
27321 6FFD           40                         inc	ax
27322 6FFE           8946         FE            mov	-2[bp],ax
27323                       00007001            .24F:
27324                                           ! Debug: le int = const 4 to unsigned short i = [S+$A-4] (used reg = )
27325 7001           8B46         FE            mov	ax,-2[bp]
27326 7004           3D                   0004  cmp	ax,*4
27327 7007           76           C5            jbe	.250
27328                       00007009            .251:
27329                       00007009            .24D:
27330                                           ! Debug: list int = const 0 (used reg = )
27331 7009           31C0                       xor	ax,ax
27332 700B           50                         push	ax
27333                                           ! Debug: list int = const $3C4 (used reg = )
27334 700C           B8                   03C4  mov	ax,#$3C4
27335 700F           50                         push	ax
27336                                           ! Debug: func () void = outb+0 (used reg = )
27337 7010           E8         0BE9            call	_outb
27338 7013           83C4                   04  add	sp,*4
27339                                           !BCC_EOS
27340                                           ! 3866         write_byte(ES, BX, inb(0x3c5)); BX++;
27341                                           ! Debug: list int = const $3C5 (used reg = )
27342 7016           B8                   03C5  mov	ax,#$3C5
27343 7019           50                         push	ax
27344                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27345 701A           E8         0BC9            call	_inb
27346 701D           44                         inc	sp
27347 701E           44                         inc	sp
27348                                           ! Debug: list unsigned char = al+0 (used reg = )
27349 701F           30E4                       xor	ah,ah
27350 7021           50                         push	ax
27351                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27352 7022           FF76         08            push	8[bp]
27353                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27354 7025           FF76         06            push	6[bp]
27355                                           ! Debug: func () void = write_byte+0 (used reg = )
27356 7028           E8         0B8B            call	_write_byte
27357 702B           83C4                   06  add	sp,*6
27358                                           !BCC_EOS
27359                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27360 702E           8B46         08            mov	ax,8[bp]
27361 7031           40                         inc	ax
27362 7032           8946         08            mov	8[bp],ax
27363                                           !BCC_EOS
27364                                           ! 3867         for(i=0;i<=0x18;i++) {
27365                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27366 7035           31C0                       xor	ax,ax
27367 7037           8946         FE            mov	-2[bp],ax
27368                                           !BCC_EOS
27369                                           !BCC_EOS
27370 703A           EB           33            jmp .254
27371                       0000703C            .255:
27372                                           ! 3868             outb(crtc_addr,i);
27373                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
27374 703C           FF76         FE            push	-2[bp]
27375                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
27376 703F           FF76         FA            push	-6[bp]
27377                                           ! Debug: func () void = outb+0 (used reg = )
27378 7042           E8         0BB7            call	_outb
27379 7045           83C4                   04  add	sp,*4
27380                                           !BCC_EOS
27381                                           ! 3869             write_byte(ES, BX, inb(crtc_addr+1)); BX++;
27382                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$A-8] (used reg = )
27383 7048           8B46         FA            mov	ax,-6[bp]
27384                                           ! Debug: list unsigned int = ax+1 (used reg = )
27385 704B           40                         inc	ax
27386 704C           50                         push	ax
27387                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27388 704D           E8         0B96            call	_inb
27389 7050           44                         inc	sp
27390 7051           44                         inc	sp
27391                                           ! Debug: list unsigned char = al+0 (used reg = )
27392 7052           30E4                       xor	ah,ah
27393 7054           50                         push	ax
27394                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27395 7055           FF76         08            push	8[bp]
27396                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27397 7058           FF76         06            push	6[bp]
27398                                           ! Debug: func () void = write_byte+0 (used reg = )
27399 705B           E8         0B58            call	_write_byte
27400 705E           83C4                   06  add	sp,*6
27401                                           !BCC_EOS
27402                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27403 7061           8B46         08            mov	ax,8[bp]
27404 7064           40                         inc	ax
27405 7065           8946         08            mov	8[bp],ax
27406                                           !BCC_EOS
27407                                           ! 3870         }
27408                                           ! 3871         for(i=0;i<=0x13;i++) {
27409                       00007068            .253:
27410                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27411 7068           8B46         FE            mov	ax,-2[bp]
27412 706B           40                         inc	ax
27413 706C           8946         FE            mov	-2[bp],ax
27414                       0000706F            .254:
27415                                           ! Debug: le int = const $18 to unsigned short i = [S+$A-4] (used reg = )
27416 706F           8B46         FE            mov	ax,-2[bp]
27417 7072           3D                   0018  cmp	ax,*$18
27418 7075           76           C5            jbe	.255
27419                       00007077            .256:
27420                       00007077            .252:
27421                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27422 7077           31C0                       xor	ax,ax
27423 7079           8946         FE            mov	-2[bp],ax
27424                                           !BCC_EOS
27425                                           !BCC_EOS
27426 707C           EB           44            jmp .259
27427                       0000707E            .25A:
27428                                           ! 3872  
27429                                           ! 3872            inb(0x3da);
27430                                           ! Debug: list int = const $3DA (used reg = )
27431 707E           B8                   03DA  mov	ax,#$3DA
27432 7081           50                         push	ax
27433                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27434 7082           E8         0B61            call	_inb
27435 7085           44                         inc	sp
27436 7086           44                         inc	sp
27437                                           !BCC_EOS
27438                                           ! 3873             outb(0x3c0, i | (ar_index & 0x20));
27439                                           ! Debug: and int = const $20 to unsigned short ar_index = [S+$A-$A] (used reg = )
27440 7087           8A46         F8            mov	al,-8[bp]
27441 708A           24                     20  and	al,*$20
27442                                           ! Debug: or unsigned char = al+0 to unsigned short i = [S+$A-4] (used reg = )
27443                                           ! Debug: expression subtree swapping
27444 708C           30E4                       xor	ah,ah
27445 708E           0B46         FE            or	ax,-2[bp]
27446                                           ! Debug: list unsigned int = ax+0 (used reg = )
27447 7091           50                         push	ax
27448                                           ! Debug: list int = const $3C0 (used reg = )
27449 7092           B8                   03C0  mov	ax,#$3C0
27450 7095           50                         push	ax
27451                                           ! Debug: func () void = outb+0 (used reg = )
27452 7096           E8         0B63            call	_outb
27453 7099           83C4                   04  add	sp,*4
27454                                           !BCC_EOS
27455                                           ! 3874             write_byte(ES, BX, inb(0x3c1)); BX++;
27456                                           ! Debug: list int = const $3C1 (used reg = )
27457 709C           B8                   03C1  mov	ax,#$3C1
27458 709F           50                         push	ax
27459                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27460 70A0           E8         0B43            call	_inb
27461 70A3           44                         inc	sp
27462 70A4           44                         inc	sp
27463                                           ! Debug: list unsigned char = al+0 (used reg = )
27464 70A5           30E4                       xor	ah,ah
27465 70A7           50                         push	ax
27466                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27467 70A8           FF76         08            push	8[bp]
27468                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27469 70AB           FF76         06            push	6[bp]
27470                                           ! Debug: func () void = write_byte+0 (used reg = )
27471 70AE           E8         0B05            call	_write_byte
27472 70B1           83C4                   06  add	sp,*6
27473                                           !BCC_EOS
27474                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27475 70B4           8B46         08            mov	ax,8[bp]
27476 70B7           40                         inc	ax
27477 70B8           8946         08            mov	8[bp],ax
27478                                           !BCC_EOS
27479                                           ! 3875         }
27480                                           ! 3876         inb(0x3da);
27481                       000070BB            .258:
27482                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27483 70BB           8B46         FE            mov	ax,-2[bp]
27484 70BE           40                         inc	ax
27485 70BF           8946         FE            mov	-2[bp],ax
27486                       000070C2            .259:
27487                                           ! Debug: le int = const $13 to unsigned short i = [S+$A-4] (used reg = )
27488 70C2           8B46         FE            mov	ax,-2[bp]
27489 70C5           3D                   0013  cmp	ax,*$13
27490 70C8           76           B4            jbe	.25A
27491                       000070CA            .25B:
27492                       000070CA            .257:
27493                                           ! Debug: list int = const $3DA (used reg = )
27494 70CA           B8                   03DA  mov	ax,#$3DA
27495 70CD           50                         push	ax
27496                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27497 70CE           E8         0B15            call	_inb
27498 70D1           44                         inc	sp
27499 70D2           44                         inc	sp
27500                                           !BCC_EOS
27501                                           ! 3877         for(i=0;i<=8;i++) {
27502                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27503 70D3           31C0                       xor	ax,ax
27504 70D5           8946         FE            mov	-2[bp],ax
27505                                           !BCC_EOS
27506                                           !BCC_EOS
27507 70D8           EB           33            jmp .25E
27508                       000070DA            .25F:
27509                                           ! 3878             outb(0x3ce,i);
27510                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
27511 70DA           FF76         FE            push	-2[bp]
27512                                           ! Debug: list int = const $3CE (used reg = )
27513 70DD           B8                   03CE  mov	ax,#$3CE
27514 70E0           50                         push	ax
27515                                           ! Debug: func () void = outb+0 (used reg = )
27516 70E1           E8         0B18            call	_outb
27517 70E4           83C4                   04  add	sp,*4
27518                                           !BCC_EOS
27519                                           ! 3879             write_byte(ES, BX, inb(0x3cf)); BX++;
27520                                           ! Debug: list int = const $3CF (used reg = )
27521 70E7           B8                   03CF  mov	ax,#$3CF
27522 70EA           50                         push	ax
27523                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27524 70EB           E8         0AF8            call	_inb
27525 70EE           44                         inc	sp
27526 70EF           44                         inc	sp
27527                                           ! Debug: list unsigned char = al+0 (used reg = )
27528 70F0           30E4                       xor	ah,ah
27529 70F2           50                         push	ax
27530                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27531 70F3           FF76         08            push	8[bp]
27532                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27533 70F6           FF76         06            push	6[bp]
27534                                           ! Debug: func () void = write_byte+0 (used reg = )
27535 70F9           E8         0ABA            call	_write_byte
27536 70FC           83C4                   06  add	sp,*6
27537                                           !BCC_EOS
27538                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27539 70FF           8B46         08            mov	ax,8[bp]
27540 7102           40                         inc	ax
27541 7103           8946         08            mov	8[bp],ax
27542                                           !BCC_EOS
27543                                           ! 3880         }
27544                                           ! 3881         write_word(ES, BX, crtc_addr); BX+= 2;
27545                       00007106            .25D:
27546                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27547 7106           8B46         FE            mov	ax,-2[bp]
27548 7109           40                         inc	ax
27549 710A           8946         FE            mov	-2[bp],ax
27550                       0000710D            .25E:
27551                                           ! Debug: le int = const 8 to unsigned short i = [S+$A-4] (used reg = )
27552 710D           8B46         FE            mov	ax,-2[bp]
27553 7110           3D                   0008  cmp	ax,*8
27554 7113           76           C5            jbe	.25F
27555                       00007115            .260:
27556                       00007115            .25C:
27557                                           ! Debug: list unsigned short crtc_addr = [S+$A-8] (used reg = )
27558 7115           FF76         FA            push	-6[bp]
27559                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27560 7118           FF76         08            push	8[bp]
27561                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27562 711B           FF76         06            push	6[bp]
27563                                           ! Debug: func () void = write_word+0 (used reg = )
27564 711E           E8         0AAD            call	_write_word
27565 7121           83C4                   06  add	sp,*6
27566                                           !BCC_EOS
27567                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27568 7124           8B46         08            mov	ax,8[bp]
27569 7127           40                         inc	ax
27570 7128           40                         inc	ax
27571 7129           8946         08            mov	8[bp],ax
27572                                           !BCC_EOS
27573                                           ! 3882         write_byte(ES, BX, 0); BX++;
27574                                           ! Debug: list int = const 0 (used reg = )
27575 712C           31C0                       xor	ax,ax
27576 712E           50                         push	ax
27577                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27578 712F           FF76         08            push	8[bp]
27579                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27580 7132           FF76         06            push	6[bp]
27581                                           ! Debug: func () void = write_byte+0 (used reg = )
27582 7135           E8         0A7E            call	_write_byte
27583 7138           83C4                   06  add	sp,*6
27584                                           !BCC_EOS
27585                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27586 713B           8B46         08            mov	ax,8[bp]
27587 713E           40                         inc	ax
27588 713F           8946         08            mov	8[bp],ax
27589                                           !BCC_EOS
27590                                           ! 3883         write_byte(ES, BX, 0); BX++;
27591                                           ! Debug: list int = const 0 (used reg = )
27592 7142           31C0                       xor	ax,ax
27593 7144           50                         push	ax
27594                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27595 7145           FF76         08            push	8[bp]
27596                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27597 7148           FF76         06            push	6[bp]
27598                                           ! Debug: func () void = write_byte+0 (used reg = )
27599 714B           E8         0A68            call	_write_byte
27600 714E           83C4                   06  add	sp,*6
27601                                           !BCC_EOS
27602                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27603 7151           8B46         08            mov	ax,8[bp]
27604 7154           40                         inc	ax
27605 7155           8946         08            mov	8[bp],ax
27606                                           !BCC_EOS
27607                                           ! 3884         write_byte(ES, BX, 0); BX++;
27608                                           ! Debug: list int = const 0 (used reg = )
27609 7158           31C0                       xor	ax,ax
27610 715A           50                         push	ax
27611                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27612 715B           FF76         08            push	8[bp]
27613                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27614 715E           FF76         06            push	6[bp]
27615                                           ! Debug: func () void = write_byte+0 (used reg = )
27616 7161           E8         0A52            call	_write_byte
27617 7164           83C4                   06  add	sp,*6
27618                                           !BCC_EOS
27619                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27620 7167           8B46         08            mov	ax,8[bp]
27621 716A           40                         inc	ax
27622 716B           8946         08            mov	8[bp],ax
27623                                           !BCC_EOS
27624                                           ! 3885         write_byte(ES, BX, 0); BX++;
27625                                           ! Debug: list int = const 0 (used reg = )
27626 716E           31C0                       xor	ax,ax
27627 7170           50                         push	ax
27628                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27629 7171           FF76         08            push	8[bp]
27630                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27631 7174           FF76         06            push	6[bp]
27632                                           ! Debug: func () void = write_byte+0 (used reg = )
27633 7177           E8         0A3C            call	_write_byte
27634 717A           83C4                   06  add	sp,*6
27635                                           !BCC_EOS
27636                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27637 717D           8B46         08            mov	ax,8[bp]
27638 7180           40                         inc	ax
27639 7181           8946         08            mov	8[bp],ax
27640                                           !BCC_EOS
27641                                           ! 3886     }
27642                                           ! 3887     if (CX & 2) {
27643                       00007184            .24B:
27644                                           ! Debug: and int = const 2 to unsigned short CX = [S+$A+2] (used reg = )
27645 7184           8A46         04            mov	al,4[bp]
27646 7187           24                     02  and	al,*2
27647 7189           84C0                       test	al,al
27648 718B         0F84         0270            beq 	.261
27649                       0000718F            .262:
27650                                           ! 3888         write_byte(ES, BX, read_byte(0x40,0x49)); BX++;
27651                                           ! Debug: list int = const $49 (used reg = )
27652 718F           B8                   0049  mov	ax,*$49
27653 7192           50                         push	ax
27654                                           ! Debug: list int = const $40 (used reg = )
27655 7193           B8                   0040  mov	ax,*$40
27656 7196           50                         push	ax
27657                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27658 7197           E8         09F6            call	_read_byte
27659 719A           83C4                   04  add	sp,*4
27660                                           ! Debug: list unsigned char = al+0 (used reg = )
27661 719D           30E4                       xor	ah,ah
27662 719F           50                         push	ax
27663                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27664 71A0           FF76         08            push	8[bp]
27665                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27666 71A3           FF76         06            push	6[bp]
27667                                           ! Debug: func () void = write_byte+0 (used reg = )
27668 71A6           E8         0A0D            call	_write_byte
27669 71A9           83C4                   06  add	sp,*6
27670                                           !BCC_EOS
27671                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27672 71AC           8B46         08            mov	ax,8[bp]
27673 71AF           40                         inc	ax
27674 71B0           8946         08            mov	8[bp],ax
27675                                           !BCC_EOS
27676                                           ! 3889         write_word(ES, BX, read_word(0x40,0x4A)); BX += 2;
27677                                           ! Debug: list int = const $4A (used reg = )
27678 71B3           B8                   004A  mov	ax,*$4A
27679 71B6           50                         push	ax
27680                                           ! Debug: list int = const $40 (used reg = )
27681 71B7           B8                   0040  mov	ax,*$40
27682 71BA           50                         push	ax
27683                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27684 71BB           E8         09E5            call	_read_word
27685 71BE           83C4                   04  add	sp,*4
27686                                           ! Debug: list unsigned short = ax+0 (used reg = )
27687 71C1           50                         push	ax
27688                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27689 71C2           FF76         08            push	8[bp]
27690                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27691 71C5           FF76         06            push	6[bp]
27692                                           ! Debug: func () void = write_word+0 (used reg = )
27693 71C8           E8         0A03            call	_write_word
27694 71CB           83C4                   06  add	sp,*6
27695                                           !BCC_EOS
27696                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27697 71CE           8B46         08            mov	ax,8[bp]
27698 71D1           40                         inc	ax
27699 71D2           40                         inc	ax
27700 71D3           8946         08            mov	8[bp],ax
27701                                           !BCC_EOS
27702                                           ! 3890         write_word(ES, BX, read_word(0x40,0x4C)); BX += 2;
27703                                           ! Debug: list int = const $4C (used reg = )
27704 71D6           B8                   004C  mov	ax,*$4C
27705 71D9           50                         push	ax
27706                                           ! Debug: list int = const $40 (used reg = )
27707 71DA           B8                   0040  mov	ax,*$40
27708 71DD           50                         push	ax
27709                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27710 71DE           E8         09C2            call	_read_word
27711 71E1           83C4                   04  add	sp,*4
27712                                           ! Debug: list unsigned short = ax+0 (used reg = )
27713 71E4           50                         push	ax
27714                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27715 71E5           FF76         08            push	8[bp]
27716                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27717 71E8           FF76         06            push	6[bp]
27718                                           ! Debug: func () void = write_word+0 (used reg = )
27719 71EB           E8         09E0            call	_write_word
27720 71EE           83C4                   06  add	sp,*6
27721                                           !BCC_EOS
27722                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27723 71F1           8B46         08            mov	ax,8[bp]
27724 71F4           40                         inc	ax
27725 71F5           40                         inc	ax
27726 71F6           8946         08            mov	8[bp],ax
27727                                           !BCC_EOS
27728                                           ! 3891         write_word(ES, BX, read_word(0x40,0x63)); BX += 2;
27729                                           ! Debug: list int = const $63 (used reg = )
27730 71F9           B8                   0063  mov	ax,*$63
27731 71FC           50                         push	ax
27732                                           ! Debug: list int = const $40 (used reg = )
27733 71FD           B8                   0040  mov	ax,*$40
27734 7200           50                         push	ax
27735                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27736 7201           E8         099F            call	_read_word
27737 7204           83C4                   04  add	sp,*4
27738                                           ! Debug: list unsigned short = ax+0 (used reg = )
27739 7207           50                         push	ax
27740                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27741 7208           FF76         08            push	8[bp]
27742                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27743 720B           FF76         06            push	6[bp]
27744                                           ! Debug: func () void = write_word+0 (used reg = )
27745 720E           E8         09BD            call	_write_word
27746 7211           83C4                   06  add	sp,*6
27747                                           !BCC_EOS
27748                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27749 7214           8B46         08            mov	ax,8[bp]
27750 7217           40                         inc	ax
27751 7218           40                         inc	ax
27752 7219           8946         08            mov	8[bp],ax
27753                                           !BCC_EOS
27754                                           ! 3892         write_byte(ES, BX, read_byte(0x40,0x84)); BX++;
27755                                           ! Debug: list int = const $84 (used reg = )
27756 721C           B8                   0084  mov	ax,#$84
27757 721F           50                         push	ax
27758                                           ! Debug: list int = const $40 (used reg = )
27759 7220           B8                   0040  mov	ax,*$40
27760 7223           50                         push	ax
27761                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27762 7224           E8         0969            call	_read_byte
27763 7227           83C4                   04  add	sp,*4
27764                                           ! Debug: list unsigned char = al+0 (used reg = )
27765 722A           30E4                       xor	ah,ah
27766 722C           50                         push	ax
27767                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27768 722D           FF76         08            push	8[bp]
27769                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27770 7230           FF76         06            push	6[bp]
27771                                           ! Debug: func () void = write_byte+0 (used reg = )
27772 7233           E8         0980            call	_write_byte
27773 7236           83C4                   06  add	sp,*6
27774                                           !BCC_EOS
27775                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27776 7239           8B46         08            mov	ax,8[bp]
27777 723C           40                         inc	ax
27778 723D           8946         08            mov	8[bp],ax
27779                                           !BCC_EOS
27780                                           ! 3893         write_word(ES, BX, read_word(0x40,0x85)); BX += 2;
27781                                           ! Debug: list int = const $85 (used reg = )
27782 7240           B8                   0085  mov	ax,#$85
27783 7243           50                         push	ax
27784                                           ! Debug: list int = const $40 (used reg = )
27785 7244           B8                   0040  mov	ax,*$40
27786 7247           50                         push	ax
27787                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27788 7248           E8         0958            call	_read_word
27789 724B           83C4                   04  add	sp,*4
27790                                           ! Debug: list unsigned short = ax+0 (used reg = )
27791 724E           50                         push	ax
27792                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27793 724F           FF76         08            push	8[bp]
27794                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27795 7252           FF76         06            push	6[bp]
27796                                           ! Debug: func () void = write_word+0 (used reg = )
27797 7255           E8         0976            call	_write_word
27798 7258           83C4                   06  add	sp,*6
27799                                           !BCC_EOS
27800                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27801 725B           8B46         08            mov	ax,8[bp]
27802 725E           40                         inc	ax
27803 725F           40                         inc	ax
27804 7260           8946         08            mov	8[bp],ax
27805                                           !BCC_EOS
27806                                           ! 3894         write_byte(ES, BX, read_byte(0x40,0x87)); BX++;
27807                                           ! Debug: list int = const $87 (used reg = )
27808 7263           B8                   0087  mov	ax,#$87
27809 7266           50                         push	ax
27810                                           ! Debug: list int = const $40 (used reg = )
27811 7267           B8                   0040  mov	ax,*$40
27812 726A           50                         push	ax
27813                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27814 726B           E8         0922            call	_read_byte
27815 726E           83C4                   04  add	sp,*4
27816                                           ! Debug: list unsigned char = al+0 (used reg = )
27817 7271           30E4                       xor	ah,ah
27818 7273           50                         push	ax
27819                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27820 7274           FF76         08            push	8[bp]
27821                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27822 7277           FF76         06            push	6[bp]
27823                                           ! Debug: func () void = write_byte+0 (used reg = )
27824 727A           E8         0939            call	_write_byte
27825 727D           83C4                   06  add	sp,*6
27826                                           !BCC_EOS
27827                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27828 7280           8B46         08            mov	ax,8[bp]
27829 7283           40                         inc	ax
27830 7284           8946         08            mov	8[bp],ax
27831                                           !BCC_EOS
27832                                           ! 3895         write_byte(ES, BX, read_byte(0x40,0x88)); BX++;
27833                                           ! Debug: list int = const $88 (used reg = )
27834 7287           B8                   0088  mov	ax,#$88
27835 728A           50                         push	ax
27836                                           ! Debug: list int = const $40 (used reg = )
27837 728B           B8                   0040  mov	ax,*$40
27838 728E           50                         push	ax
27839                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27840 728F           E8         08FE            call	_read_byte
27841 7292           83C4                   04  add	sp,*4
27842                                           ! Debug: list unsigned char = al+0 (used reg = )
27843 7295           30E4                       xor	ah,ah
27844 7297           50                         push	ax
27845                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27846 7298           FF76         08            push	8[bp]
27847                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27848 729B           FF76         06            push	6[bp]
27849                                           ! Debug: func () void = write_byte+0 (used reg = )
27850 729E           E8         0915            call	_write_byte
27851 72A1           83C4                   06  add	sp,*6
27852                                           !BCC_EOS
27853                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27854 72A4           8B46         08            mov	ax,8[bp]
27855 72A7           40                         inc	ax
27856 72A8           8946         08            mov	8[bp],ax
27857                                           !BCC_EOS
27858                                           ! 3896         write_byte(ES, BX, read_byte(0x40,0x89)); BX++;
27859                                           ! Debug: list int = const $89 (used reg = )
27860 72AB           B8                   0089  mov	ax,#$89
27861 72AE           50                         push	ax
27862                                           ! Debug: list int = const $40 (used reg = )
27863 72AF           B8                   0040  mov	ax,*$40
27864 72B2           50                         push	ax
27865                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27866 72B3           E8         08DA            call	_read_byte
27867 72B6           83C4                   04  add	sp,*4
27868                                           ! Debug: list unsigned char = al+0 (used reg = )
27869 72B9           30E4                       xor	ah,ah
27870 72BB           50                         push	ax
27871                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27872 72BC           FF76         08            push	8[bp]
27873                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27874 72BF           FF76         06            push	6[bp]
27875                                           ! Debug: func () void = write_byte+0 (used reg = )
27876 72C2           E8         08F1            call	_write_byte
27877 72C5           83C4                   06  add	sp,*6
27878                                           !BCC_EOS
27879                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27880 72C8           8B46         08            mov	ax,8[bp]
27881 72CB           40                         inc	ax
27882 72CC           8946         08            mov	8[bp],ax
27883                                           !BCC_EOS
27884                                           ! 3897         write_word(ES, BX, read_word(0x40,0x60)); BX += 2;
27885                                           ! Debug: list int = const $60 (used reg = )
27886 72CF           B8                   0060  mov	ax,*$60
27887 72D2           50                         push	ax
27888                                           ! Debug: list int = const $40 (used reg = )
27889 72D3           B8                   0040  mov	ax,*$40
27890 72D6           50                         push	ax
27891                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27892 72D7           E8         08C9            call	_read_word
27893 72DA           83C4                   04  add	sp,*4
27894                                           ! Debug: list unsigned short = ax+0 (used reg = )
27895 72DD           50                         push	ax
27896                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27897 72DE           FF76         08            push	8[bp]
27898                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27899 72E1           FF76         06            push	6[bp]
27900                                           ! Debug: func () void = write_word+0 (used reg = )
27901 72E4           E8         08E7            call	_write_word
27902 72E7           83C4                   06  add	sp,*6
27903                                           !BCC_EOS
27904                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27905 72EA           8B46         08            mov	ax,8[bp]
27906 72ED           40                         inc	ax
27907 72EE           40                         inc	ax
27908 72EF           8946         08            mov	8[bp],ax
27909                                           !BCC_EOS
27910                                           ! 3898         for(i=0;i<8;i++) {
27911                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27912 72F2           31C0                       xor	ax,ax
27913 72F4           8946         FE            mov	-2[bp],ax
27914                                           !BCC_EOS
27915                                           !BCC_EOS
27916 72F7           EB           2F            jmp .265
27917                       000072F9            .266:
27918                                           ! 3899             write_word(ES, BX, read_word(0x40, 0x50 +2*i));
27919                                           ! Debug: mul unsigned short i = [S+$A-4] to int = const 2 (used reg = )
27920                                           ! Debug: expression subtree swapping
27921 72F9           8B46         FE            mov	ax,-2[bp]
27922 72FC           D1E0                       shl	ax,*1
27923                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
27924                                           ! Debug: expression subtree swapping
27925                                           ! Debug: list unsigned int = ax+$50 (used reg = )
27926 72FE           05                   0050  add	ax,*$50
27927 7301           50                         push	ax
27928                                           ! Debug: list int = const $40 (used reg = )
27929 7302           B8                   0040  mov	ax,*$40
27930 7305           50                         push	ax
27931                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27932 7306           E8         089A            call	_read_word
27933 7309           83C4                   04  add	sp,*4
27934                                           ! Debug: list unsigned short = ax+0 (used reg = )
27935 730C           50                         push	ax
27936                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27937 730D           FF76         08            push	8[bp]
27938                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27939 7310           FF76         06            push	6[bp]
27940                                           ! Debug: func () void = write_word+0 (used reg = )
27941 7313           E8         08B8            call	_write_word
27942 7316           83C4                   06  add	sp,*6
27943                                           !BCC_EOS
27944                                           ! 3900             BX += 2;
27945                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27946 7319           8B46         08            mov	ax,8[bp]
27947 731C           40                         inc	ax
27948 731D           40                         inc	ax
27949 731E           8946         08            mov	8[bp],ax
27950                                           !BCC_EOS
27951                                           ! 3901         }
27952                                           ! 3902         write_word(ES, BX, read_word(0x40,0x4E)); BX += 2;
27953                       00007321            .264:
27954                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27955 7321           8B46         FE            mov	ax,-2[bp]
27956 7324           40                         inc	ax
27957 7325           8946         FE            mov	-2[bp],ax
27958                       00007328            .265:
27959                                           ! Debug: lt int = const 8 to unsigned short i = [S+$A-4] (used reg = )
27960 7328           8B46         FE            mov	ax,-2[bp]
27961 732B           3D                   0008  cmp	ax,*8
27962 732E           72           C9            jb 	.266
27963                       00007330            .267:
27964                       00007330            .263:
27965                                           ! Debug: list int = const $4E (used reg = )
27966 7330           B8                   004E  mov	ax,*$4E
27967 7333           50                         push	ax
27968                                           ! Debug: list int = const $40 (used reg = )
27969 7334           B8                   0040  mov	ax,*$40
27970 7337           50                         push	ax
27971                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27972 7338           E8         0868            call	_read_word
27973 733B           83C4                   04  add	sp,*4
27974                                           ! Debug: list unsigned short = ax+0 (used reg = )
27975 733E           50                         push	ax
27976                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27977 733F           FF76         08            push	8[bp]
27978                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27979 7342           FF76         06            push	6[bp]
27980                                           ! Debug: func () void = write_word+0 (used reg = )
27981 7345           E8         0886            call	_write_word
27982 7348           83C4                   06  add	sp,*6
27983                                           !BCC_EOS
27984                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27985 734B           8B46         08            mov	ax,8[bp]
27986 734E           40                         inc	ax
27987 734F           40                         inc	ax
27988 7350           8946         08            mov	8[bp],ax
27989                                           !BCC_EOS
27990                                           ! 3903         write_byte(ES, BX, read_byte(0x40,0x62)); BX++;
27991                                           ! Debug: list int = const $62 (used reg = )
27992 7353           B8                   0062  mov	ax,*$62
27993 7356           50                         push	ax
27994                                           ! Debug: list int = const $40 (used reg = )
27995 7357           B8                   0040  mov	ax,*$40
27996 735A           50                         push	ax
27997                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27998 735B           E8         0832            call	_read_byte
27999 735E           83C4                   04  add	sp,*4
28000                                           ! Debug: list unsigned char = al+0 (used reg = )
28001 7361           30E4                       xor	ah,ah
28002 7363           50                         push	ax
28003                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28004 7364           FF76         08            push	8[bp]
28005                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28006 7367           FF76         06            push	6[bp]
28007                                           ! Debug: func () void = write_byte+0 (used reg = )
28008 736A           E8         0849            call	_write_byte
28009 736D           83C4                   06  add	sp,*6
28010                                           !BCC_EOS
28011                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28012 7370           8B46         08            mov	ax,8[bp]
28013 7373           40                         inc	ax
28014 7374           8946         08            mov	8[bp],ax
28015                                           !BCC_EOS
28016                                           ! 3904         write_word(ES, BX, read_word(0, 0x1f * 4)); BX += 2;
28017                                           ! Debug: list int = const $7C (used reg = )
28018 7377           B8                   007C  mov	ax,*$7C
28019 737A           50                         push	ax
28020                                           ! Debug: list int = const 0 (used reg = )
28021 737B           31C0                       xor	ax,ax
28022 737D           50                         push	ax
28023                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28024 737E           E8         0822            call	_read_word
28025 7381           83C4                   04  add	sp,*4
28026                                           ! Debug: list unsigned short = ax+0 (used reg = )
28027 7384           50                         push	ax
28028                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28029 7385           FF76         08            push	8[bp]
28030                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28031 7388           FF76         06            push	6[bp]
28032                                           ! Debug: func () void = write_word+0 (used reg = )
28033 738B           E8         0840            call	_write_word
28034 738E           83C4                   06  add	sp,*6
28035                                           !BCC_EOS
28036                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28037 7391           8B46         08            mov	ax,8[bp]
28038 7394           40                         inc	ax
28039 7395           40                         inc	ax
28040 7396           8946         08            mov	8[bp],ax
28041                                           !BCC_EOS
28042                                           ! 3905         write_word(ES, BX, read_word(0, 0x1f * 4 + 2)); BX += 2;
28043                                           ! Debug: list int = const $7E (used reg = )
28044 7399           B8                   007E  mov	ax,*$7E
28045 739C           50                         push	ax
28046                                           ! Debug: list int = const 0 (used reg = )
28047 739D           31C0                       xor	ax,ax
28048 739F           50                         push	ax
28049                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28050 73A0           E8         0800            call	_read_word
28051 73A3           83C4                   04  add	sp,*4
28052                                           ! Debug: list unsigned short = ax+0 (used reg = )
28053 73A6           50                         push	ax
28054                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28055 73A7           FF76         08            push	8[bp]
28056                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28057 73AA           FF76         06            push	6[bp]
28058                                           ! Debug: func () void = write_word+0 (used reg = )
28059 73AD           E8         081E            call	_write_word
28060 73B0           83C4                   06  add	sp,*6
28061                                           !BCC_EOS
28062                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28063 73B3           8B46         08            mov	ax,8[bp]
28064 73B6           40                         inc	ax
28065 73B7           40                         inc	ax
28066 73B8           8946         08            mov	8[bp],ax
28067                                           !BCC_EOS
28068                                           ! 3906         write_word(ES, BX, read_word(0, 0x43 * 4)); BX += 2;
28069                                           ! Debug: list int = const $10C (used reg = )
28070 73BB           B8                   010C  mov	ax,#$10C
28071 73BE           50                         push	ax
28072                                           ! Debug: list int = const 0 (used reg = )
28073 73BF           31C0                       xor	ax,ax
28074 73C1           50                         push	ax
28075                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28076 73C2           E8         07DE            call	_read_word
28077 73C5           83C4                   04  add	sp,*4
28078                                           ! Debug: list unsigned short = ax+0 (used reg = )
28079 73C8           50                         push	ax
28080                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28081 73C9           FF76         08            push	8[bp]
28082                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28083 73CC           FF76         06            push	6[bp]
28084                                           ! Debug: func () void = write_word+0 (used reg = )
28085 73CF           E8         07FC            call	_write_word
28086 73D2           83C4                   06  add	sp,*6
28087                                           !BCC_EOS
28088                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28089 73D5           8B46         08            mov	ax,8[bp]
28090 73D8           40                         inc	ax
28091 73D9           40                         inc	ax
28092 73DA           8946         08            mov	8[bp],ax
28093                                           !BCC_EOS
28094                                           ! 3907         write_word(ES, BX, read_word(0, 0x43 * 4 + 2)); BX += 2;
28095                                           ! Debug: list int = const $10E (used reg = )
28096 73DD           B8                   010E  mov	ax,#$10E
28097 73E0           50                         push	ax
28098                                           ! Debug: list int = const 0 (used reg = )
28099 73E1           31C0                       xor	ax,ax
28100 73E3           50                         push	ax
28101                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28102 73E4           E8         07BC            call	_read_word
28103 73E7           83C4                   04  add	sp,*4
28104                                           ! Debug: list unsigned short = ax+0 (used reg = )
28105 73EA           50                         push	ax
28106                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28107 73EB           FF76         08            push	8[bp]
28108                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28109 73EE           FF76         06            push	6[bp]
28110                                           ! Debug: func () void = write_word+0 (used reg = )
28111 73F1           E8         07DA            call	_write_word
28112 73F4           83C4                   06  add	sp,*6
28113                                           !BCC_EOS
28114                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28115 73F7           8B46         08            mov	ax,8[bp]
28116 73FA           40                         inc	ax
28117 73FB           40                         inc	ax
28118 73FC           8946         08            mov	8[bp],ax
28119                                           !BCC_EOS
28120                                           ! 3908     }
28121                                           ! 3909     if (CX & 4) {
28122                       000073FF            .261:
28123                                           ! Debug: and int = const 4 to unsigned short CX = [S+$A+2] (used reg = )
28124 73FF           8A46         04            mov	al,4[bp]
28125 7402           24                     04  and	al,*4
28126 7404           84C0                       test	al,al
28127 7406         0F84         00B5            beq 	.268
28128                       0000740A            .269:
28129                                           ! 3910         write_byte(ES, BX, inb(0x3c7)); BX++;
28130                                           ! Debug: list int = const $3C7 (used reg = )
28131 740A           B8                   03C7  mov	ax,#$3C7
28132 740D           50                         push	ax
28133                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28134 740E           E8         07D5            call	_inb
28135 7411           44                         inc	sp
28136 7412           44                         inc	sp
28137                                           ! Debug: list unsigned char = al+0 (used reg = )
28138 7413           30E4                       xor	ah,ah
28139 7415           50                         push	ax
28140                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28141 7416           FF76         08            push	8[bp]
28142                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28143 7419           FF76         06            push	6[bp]
28144                                           ! Debug: func () void = write_byte+0 (used reg = )
28145 741C           E8         0797            call	_write_byte
28146 741F           83C4                   06  add	sp,*6
28147                                           !BCC_EOS
28148                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28149 7422           8B46         08            mov	ax,8[bp]
28150 7425           40                         inc	ax
28151 7426           8946         08            mov	8[bp],ax
28152                                           !BCC_EOS
28153                                           ! 3911         write_byte(ES, BX, inb(0x3c8)); BX++;
28154                                           ! Debug: list int = const $3C8 (used reg = )
28155 7429           B8                   03C8  mov	ax,#$3C8
28156 742C           50                         push	ax
28157                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28158 742D           E8         07B6            call	_inb
28159 7430           44                         inc	sp
28160 7431           44                         inc	sp
28161                                           ! Debug: list unsigned char = al+0 (used reg = )
28162 7432           30E4                       xor	ah,ah
28163 7434           50                         push	ax
28164                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28165 7435           FF76         08            push	8[bp]
28166                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28167 7438           FF76         06            push	6[bp]
28168                                           ! Debug: func () void = write_byte+0 (used reg = )
28169 743B           E8         0778            call	_write_byte
28170 743E           83C4                   06  add	sp,*6
28171                                           !BCC_EOS
28172                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28173 7441           8B46         08            mov	ax,8[bp]
28174 7444           40                         inc	ax
28175 7445           8946         08            mov	8[bp],ax
28176                                           !BCC_EOS
28177                                           ! 3912         write_byte(ES, BX, inb(0x3c6)); BX++;
28178                                           ! Debug: list int = const $3C6 (used reg = )
28179 7448           B8                   03C6  mov	ax,#$3C6
28180 744B           50                         push	ax
28181                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28182 744C           E8         0797            call	_inb
28183 744F           44                         inc	sp
28184 7450           44                         inc	sp
28185                                           ! Debug: list unsigned char = al+0 (used reg = )
28186 7451           30E4                       xor	ah,ah
28187 7453           50                         push	ax
28188                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28189 7454           FF76         08            push	8[bp]
28190                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28191 7457           FF76         06            push	6[bp]
28192                                           ! Debug: func () void = write_byte+0 (used reg = )
28193 745A           E8         0759            call	_write_byte
28194 745D           83C4                   06  add	sp,*6
28195                                           !BCC_EOS
28196                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28197 7460           8B46         08            mov	ax,8[bp]
28198 7463           40                         inc	ax
28199 7464           8946         08            mov	8[bp],ax
28200                                           !BCC_EOS
28201                                           ! 3913         outb(0x3c8,0x00);
28202                                           ! Debug: list int = const 0 (used reg = )
28203 7467           31C0                       xor	ax,ax
28204 7469           50                         push	ax
28205                                           ! Debug: list int = const $3C8 (used reg = )
28206 746A           B8                   03C8  mov	ax,#$3C8
28207 746D           50                         push	ax
28208                                           ! Debug: func () void = outb+0 (used reg = )
28209 746E           E8         078B            call	_outb
28210 7471           83C4                   04  add	sp,*4
28211                                           !BCC_EOS
28212                                           ! 3914         for(i=0;i<256*3;i++) {
28213                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
28214 7474           31C0                       xor	ax,ax
28215 7476           8946         FE            mov	-2[bp],ax
28216                                           !BCC_EOS
28217                                           !BCC_EOS
28218 7479           EB           26            jmp .26C
28219                       0000747B            .26D:
28220                                           ! 3915             write_byte(ES, BX, inb(0x3c9)); BX++;
28221                                           ! Debug: list int = const $3C9 (used reg = )
28222 747B           B8                   03C9  mov	ax,#$3C9
28223 747E           50                         push	ax
28224                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28225 747F           E8         0764            call	_inb
28226 7482           44                         inc	sp
28227 7483           44                         inc	sp
28228                                           ! Debug: list unsigned char = al+0 (used reg = )
28229 7484           30E4                       xor	ah,ah
28230 7486           50                         push	ax
28231                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28232 7487           FF76         08            push	8[bp]
28233                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28234 748A           FF76         06            push	6[bp]
28235                                           ! Debug: func () void = write_byte+0 (used reg = )
28236 748D           E8         0726            call	_write_byte
28237 7490           83C4                   06  add	sp,*6
28238                                           !BCC_EOS
28239                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28240 7493           8B46         08            mov	ax,8[bp]
28241 7496           40                         inc	ax
28242 7497           8946         08            mov	8[bp],ax
28243                                           !BCC_EOS
28244                                           ! 3916         }
28245                                           ! 3917         write_byte(ES, BX, 0); BX++;
28246                       0000749A            .26B:
28247                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
28248 749A           8B46         FE            mov	ax,-2[bp]
28249 749D           40                         inc	ax
28250 749E           8946         FE            mov	-2[bp],ax
28251                       000074A1            .26C:
28252                                           ! Debug: lt int = const $300 to unsigned short i = [S+$A-4] (used reg = )
28253 74A1           8B46         FE            mov	ax,-2[bp]
28254 74A4           3D                   0300  cmp	ax,#$300
28255 74A7           72           D2            jb 	.26D
28256                       000074A9            .26E:
28257                       000074A9            .26A:
28258                                           ! Debug: list int = const 0 (used reg = )
28259 74A9           31C0                       xor	ax,ax
28260 74AB           50                         push	ax
28261                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28262 74AC           FF76         08            push	8[bp]
28263                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28264 74AF           FF76         06            push	6[bp]
28265                                           ! Debug: func () void = write_byte+0 (used reg = )
28266 74B2           E8         0701            call	_write_byte
28267 74B5           83C4                   06  add	sp,*6
28268                                           !BCC_EOS
28269                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28270 74B8           8B46         08            mov	ax,8[bp]
28271 74BB           40                         inc	ax
28272 74BC           8946         08            mov	8[bp],ax
28273                                           !BCC_EOS
28274                                           ! 3918     }
28275                                           ! 3919     return BX;
28276                       000074BF            .268:
28277 74BF           8B46         08            mov	ax,8[bp]
28278 74C2           89EC                       mov	sp,bp
28279 74C4           5D                         pop	bp
28280 74C5           C3                         ret
28281                                           !BCC_EOS
28282                                           ! 3920 }
28283                                           ! 3921 static Bit16u biosfn_restore_video_state (CX,ES,BX)
28284                                           ! 3922      Bit16u CX;Bit16u ES;Bit16u BX;
28285                       000074C6            _biosfn_restore_video_state:
28286                                           !BCC_EOS
28287                                           !BCC_EOS
28288                                           !BCC_EOS
28289                                           ! 3923 {
28290                                           ! 3924     Bit16u i, crtc_addr, v, addr1, ar_index;
28291                                           !BCC_EOS
28292                                           ! 3925     if (CX & 1) {
28293 74C6           55                         push	bp
28294 74C7           89E5                       mov	bp,sp
28295 74C9           83C4                   F6  add	sp,*-$A
28296                                           ! Debug: and int = const 1 to unsigned short CX = [S+$C+2] (used reg = )
28297 74CC           8A46         04            mov	al,4[bp]
28298 74CF           24                     01  and	al,*1
28299 74D1           84C0                       test	al,al
28300 74D3         0F84         02AA            beq 	.26F
28301                       000074D7            .270:
28302                                           ! 3926         inb
28303                                           ! 3926 (0x3da);
28304                                           ! Debug: list int = const $3DA (used reg = )
28305 74D7           B8                   03DA  mov	ax,#$3DA
28306 74DA           50                         push	ax
28307                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28308 74DB           E8         0708            call	_inb
28309 74DE           44                         inc	sp
28310 74DF           44                         inc	sp
28311                                           !BCC_EOS
28312                                           ! 3927         crtc_addr = read_word(ES, BX + 0x40);
28313                                           ! Debug: add int = const $40 to unsigned short BX = [S+$C+6] (used reg = )
28314 74E0           8B46         08            mov	ax,8[bp]
28315                                           ! Debug: list unsigned int = ax+$40 (used reg = )
28316 74E3           05                   0040  add	ax,*$40
28317 74E6           50                         push	ax
28318                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28319 74E7           FF76         06            push	6[bp]
28320                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28321 74EA           E8         06B6            call	_read_word
28322 74ED           83C4                   04  add	sp,*4
28323                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$C-6] (used reg = )
28324 74F0           8946         FC            mov	-4[bp],ax
28325                                           !BCC_EOS
28326                                           ! 3928         addr1 = BX;
28327                                           ! Debug: eq unsigned short BX = [S+$C+6] to unsigned short addr1 = [S+$C-$A] (used reg = )
28328 74F3           8B46         08            mov	ax,8[bp]
28329 74F6           8946         F8            mov	-8[bp],ax
28330                                           !BCC_EOS
28331                                           ! 3929         BX += 5;
28332                                           ! Debug: addab int = const 5 to unsigned short BX = [S+$C+6] (used reg = )
28333 74F9           8B46         08            mov	ax,8[bp]
28334 74FC           05                   0005  add	ax,*5
28335 74FF           8946         08            mov	8[bp],ax
28336                                           !BCC_EOS
28337                                           ! 3930         for(i=1;i<=4;i++){
28338                                           ! Debug: eq int = const 1 to unsigned short i = [S+$C-4] (used reg = )
28339 7502           B8                   0001  mov	ax,*1
28340 7505           8946         FE            mov	-2[bp],ax
28341                                           !BCC_EOS
28342                                           !BCC_EOS
28343 7508           EB           34            jmp .273
28344                       0000750A            .274:
28345                                           ! 3931             outb(0x3c4, i);
28346                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
28347 750A           FF76         FE            push	-2[bp]
28348                                           ! Debug: list int = const $3C4 (used reg = )
28349 750D           B8                   03C4  mov	ax,#$3C4
28350 7510           50                         push	ax
28351                                           ! Debug: func () void = outb+0 (used reg = )
28352 7511           E8         06E8            call	_outb
28353 7514           83C4                   04  add	sp,*4
28354                                           !BCC_EOS
28355                                           ! 3932             outb(0x3c5, read_byte(ES, BX)); BX++;
28356                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28357 7517           FF76         08            push	8[bp]
28358                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28359 751A           FF76         06            push	6[bp]
28360                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28361 751D           E8         0670            call	_read_byte
28362 7520           83C4                   04  add	sp,*4
28363                                           ! Debug: list unsigned char = al+0 (used reg = )
28364 7523           30E4                       xor	ah,ah
28365 7525           50                         push	ax
28366                                           ! Debug: list int = const $3C5 (used reg = )
28367 7526           B8                   03C5  mov	ax,#$3C5
28368 7529           50                         push	ax
28369                                           ! Debug: func () void = outb+0 (used reg = )
28370 752A           E8         06CF            call	_outb
28371 752D           83C4                   04  add	sp,*4
28372                                           !BCC_EOS
28373                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28374 7530           8B46         08            mov	ax,8[bp]
28375 7533           40                         inc	ax
28376 7534           8946         08            mov	8[bp],ax
28377                                           !BCC_EOS
28378                                           ! 3933         }
28379                                           ! 3934         outb(0x3c4, 0);
28380                       00007537            .272:
28381                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28382 7537           8B46         FE            mov	ax,-2[bp]
28383 753A           40                         inc	ax
28384 753B           8946         FE            mov	-2[bp],ax
28385                       0000753E            .273:
28386                                           ! Debug: le int = const 4 to unsigned short i = [S+$C-4] (used reg = )
28387 753E           8B46         FE            mov	ax,-2[bp]
28388 7541           3D                   0004  cmp	ax,*4
28389 7544           76           C4            jbe	.274
28390                       00007546            .275:
28391                       00007546            .271:
28392                                           ! Debug: list int = const 0 (used reg = )
28393 7546           31C0                       xor	ax,ax
28394 7548           50                         push	ax
28395                                           ! Debug: list int = const $3C4 (used reg = )
28396 7549           B8                   03C4  mov	ax,#$3C4
28397 754C           50                         push	ax
28398                                           ! Debug: func () void = outb+0 (used reg = )
28399 754D           E8         06AC            call	_outb
28400 7550           83C4                   04  add	sp,*4
28401                                           !BCC_EOS
28402                                           ! 3935         outb(0x3c5, read_byte(ES, BX)); BX++;
28403                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28404 7553           FF76         08            push	8[bp]
28405                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28406 7556           FF76         06            push	6[bp]
28407                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28408 7559           E8         0634            call	_read_byte
28409 755C           83C4                   04  add	sp,*4
28410                                           ! Debug: list unsigned char = al+0 (used reg = )
28411 755F           30E4                       xor	ah,ah
28412 7561           50                         push	ax
28413                                           ! Debug: list int = const $3C5 (used reg = )
28414 7562           B8                   03C5  mov	ax,#$3C5
28415 7565           50                         push	ax
28416                                           ! Debug: func () void = outb+0 (used reg = )
28417 7566           E8         0693            call	_outb
28418 7569           83C4                   04  add	sp,*4
28419                                           !BCC_EOS
28420                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28421 756C           8B46         08            mov	ax,8[bp]
28422 756F           40                         inc	ax
28423 7570           8946         08            mov	8[bp],ax
28424                                           !BCC_EOS
28425                                           ! 3936         outw(crtc_addr,0x0011);
28426                                           ! Debug: list int = const $11 (used reg = )
28427 7573           B8                   0011  mov	ax,*$11
28428 7576           50                         push	ax
28429                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28430 7577           FF76         FC            push	-4[bp]
28431                                           ! Debug: func () void = outw+0 (used reg = )
28432 757A           E8         068F            call	_outw
28433 757D           83C4                   04  add	sp,*4
28434                                           !BCC_EOS
28435                                           ! 3937         for(i=0;i<=0x18;i++) {
28436                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
28437 7580           31C0                       xor	ax,ax
28438 7582           8946         FE            mov	-2[bp],ax
28439                                           !BCC_EOS
28440                                           !BCC_EOS
28441 7585           EB           3C            jmp .278
28442                       00007587            .279:
28443                                           ! 3938             if (i != 0x11) {
28444                                           ! Debug: ne int = const $11 to unsigned short i = [S+$C-4] (used reg = )
28445 7587           8B46         FE            mov	ax,-2[bp]
28446 758A           3D                   0011  cmp	ax,*$11
28447 758D           74           26            je  	.27A
28448                       0000758F            .27B:
28449                                           ! 3939                 outb(crtc_addr,i);
28450                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
28451 758F           FF76         FE            push	-2[bp]
28452                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28453 7592           FF76         FC            push	-4[bp]
28454                                           ! Debug: func () void = outb+0 (used reg = )
28455 7595           E8         0664            call	_outb
28456 7598           83C4                   04  add	sp,*4
28457                                           !BCC_EOS
28458                                           ! 3940                 outb(crtc_addr+1, read_byte(ES, BX));
28459                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28460 759B           FF76         08            push	8[bp]
28461                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28462 759E           FF76         06            push	6[bp]
28463                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28464 75A1           E8         05EC            call	_read_byte
28465 75A4           83C4                   04  add	sp,*4
28466                                           ! Debug: list unsigned char = al+0 (used reg = )
28467 75A7           30E4                       xor	ah,ah
28468 75A9           50                         push	ax
28469                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-6] (used reg = )
28470 75AA           8B46         FC            mov	ax,-4[bp]
28471                                           ! Debug: list unsigned int = ax+1 (used reg = )
28472 75AD           40                         inc	ax
28473 75AE           50                         push	ax
28474                                           ! Debug: func () void = outb+0 (used reg = )
28475 75AF           E8         064A            call	_outb
28476 75B2           83C4                   04  add	sp,*4
28477                                           !BCC_EOS
28478                                           ! 3941             }
28479                                           ! 3942             BX++;
28480                       000075B5            .27A:
28481                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28482 75B5           8B46         08            mov	ax,8[bp]
28483 75B8           40                         inc	ax
28484 75B9           8946         08            mov	8[bp],ax
28485                                           !BCC_EOS
28486                                           ! 3943         }
28487                                           ! 3944         v = inb(0x3cc) & ~0x01;
28488                       000075BC            .277:
28489                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28490 75BC           8B46         FE            mov	ax,-2[bp]
28491 75BF           40                         inc	ax
28492 75C0           8946         FE            mov	-2[bp],ax
28493                       000075C3            .278:
28494                                           ! Debug: le int = const $18 to unsigned short i = [S+$C-4] (used reg = )
28495 75C3           8B46         FE            mov	ax,-2[bp]
28496 75C6           3D                   0018  cmp	ax,*$18
28497 75C9           76           BC            jbe	.279
28498                       000075CB            .27C:
28499                       000075CB            .276:
28500                                           ! Debug: list int = const $3CC (used reg = )
28501 75CB           B8                   03CC  mov	ax,#$3CC
28502 75CE           50                         push	ax
28503                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28504 75CF           E8         0614            call	_inb
28505 75D2           44                         inc	sp
28506 75D3           44                         inc	sp
28507                                           ! Debug: and int = const -2 to unsigned char = al+0 (used reg = )
28508 75D4           24                     FE  and	al,#$FE
28509                                           ! Debug: eq unsigned char = al+0 to unsigned short v = [S+$C-8] (used reg = )
28510 75D6           30E4                       xor	ah,ah
28511 75D8           8946         FA            mov	-6[bp],ax
28512                                           !BCC_EOS
28513                                           ! 3945         if (crtc_addr = 0x3d4)
28514                                           ! Debug: eq int = const $3D4 to unsigned short crtc_addr = [S+$C-6] (used reg = )
28515 75DB           B8                   03D4  mov	ax,#$3D4
28516 75DE           8946         FC            mov	-4[bp],ax
28517 75E1           85C0                       test	ax,ax
28518 75E3           74           08            je  	.27D
28519                       000075E5            .27E:
28520                                           ! 3946             v |= 0x01;
28521                                           ! Debug: orab int = const 1 to unsigned short v = [S+$C-8] (used reg = )
28522 75E5           8B46         FA            mov	ax,-6[bp]
28523 75E8           0C                     01  or	al,*1
28524 75EA           8946         FA            mov	-6[bp],ax
28525                                           !BCC_EOS
28526                                           ! 3947         outb(0x3c2, v);
28527                       000075ED            .27D:
28528                                           ! Debug: list unsigned short v = [S+$C-8] (used reg = )
28529 75ED           FF76         FA            push	-6[bp]
28530                                           ! Debug: list int = const $3C2 (used reg = )
28531 75F0           B8                   03C2  mov	ax,#$3C2
28532 75F3           50                         push	ax
28533                                           ! Debug: func () void = outb+0 (used reg = )
28534 75F4           E8         0605            call	_outb
28535 75F7           83C4                   04  add	sp,*4
28536                                           !BCC_EOS
28537                                           ! 3948         outb(crtc_addr, 0x11);
28538                                           ! Debug: list int = const $11 (used reg = )
28539 75FA           B8                   0011  mov	ax,*$11
28540 75FD           50                         push	ax
28541                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28542 75FE           FF76         FC            push	-4[bp]
28543                                           ! Debug: func () void = outb+0 (used reg = )
28544 7601           E8         05F8            call	_outb
28545 7604           83C4                   04  add	sp,*4
28546                                           !BCC_EOS
28547                                           ! 3949         outb(crtc_addr+1, read_byte(ES, BX - 0x18 + 0x11));
28548                                           ! Debug: sub int = const $18 to unsigned short BX = [S+$C+6] (used reg = )
28549 7607           8B46         08            mov	ax,8[bp]
28550                                           ! Debug: add int = const $11 to unsigned int = ax-$18 (used reg = )
28551                                           ! Debug: list unsigned int = ax-7 (used reg = )
28552 760A           05                   FFF9  add	ax,*-7
28553 760D           50                         push	ax
28554                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28555 760E           FF76         06            push	6[bp]
28556                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28557 7611           E8         057C            call	_read_byte
28558 7614           83C4                   04  add	sp,*4
28559                                           ! Debug: list unsigned char = al+0 (used reg = )
28560 7617           30E4                       xor	ah,ah
28561 7619           50                         push	ax
28562                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-6] (used reg = )
28563 761A           8B46         FC            mov	ax,-4[bp]
28564                                           ! Debug: list unsigned int = ax+1 (used reg = )
28565 761D           40                         inc	ax
28566 761E           50                         push	ax
28567                                           ! Debug: func () void = outb+0 (used reg = )
28568 761F           E8         05DA            call	_outb
28569 7622           83C4                   04  add	sp,*4
28570                                           !BCC_EOS
28571                                           ! 3950         ar_index = read_byte(ES, addr1 + 0x03);
28572                                           ! Debug: add int = const 3 to unsigned short addr1 = [S+$C-$A] (used reg = )
28573 7625           8B46         F8            mov	ax,-8[bp]
28574                                           ! Debug: list unsigned int = ax+3 (used reg = )
28575 7628           05                   0003  add	ax,*3
28576 762B           50                         push	ax
28577                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28578 762C           FF76         06            push	6[bp]
28579                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28580 762F           E8         055E            call	_read_byte
28581 7632           83C4                   04  add	sp,*4
28582                                           ! Debug: eq unsigned char = al+0 to unsigned short ar_index = [S+$C-$C] (used reg = )
28583 7635           30E4                       xor	ah,ah
28584 7637           8946         F6            mov	-$A[bp],ax
28585                                           !BCC_EOS
28586                                           ! 3951         inb(0x3da);
28587                                           ! Debug: list int = const $3DA (used reg = )
28588 763A           B8                   03DA  mov	ax,#$3DA
28589 763D           50                         push	ax
28590                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28591 763E           E8         05A5            call	_inb
28592 7641           44                         inc	sp
28593 7642           44                         inc	sp
28594                                           !BCC_EOS
28595                                           ! 3952         for(i=0;i<=0x13;i++) {
28596                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
28597 7643           31C0                       xor	ax,ax
28598 7645           8946         FE            mov	-2[bp],ax
28599                                           !BCC_EOS
28600                                           !BCC_EOS
28601 7648           EB           3C            jmp .281
28602                       0000764A            .282:
28603                                           ! 3953             outb(0x3c0, i | (ar_index & 0x20));
28604                                           ! Debug: and int = const $20 to unsigned short ar_index = [S+$C-$C] (used reg = )
28605 764A           8A46         F6            mov	al,-$A[bp]
28606 764D           24                     20  and	al,*$20
28607                                           ! Debug: or unsigned char = al+0 to unsigned short i = [S+$C-4] (used reg = )
28608                                           ! Debug: expression subtree swapping
28609 764F           30E4                       xor	ah,ah
28610 7651           0B46         FE            or	ax,-2[bp]
28611                                           ! Debug: list unsigned int = ax+0 (used reg = )
28612 7654           50                         push	ax
28613                                           ! Debug: list int = const $3C0 (used reg = )
28614 7655           B8                   03C0  mov	ax,#$3C0
28615 7658           50                         push	ax
28616                                           ! Debug: func () void = outb+0 (used reg = )
28617 7659           E8         05A0            call	_outb
28618 765C           83C4                   04  add	sp,*4
28619                                           !BCC_EOS
28620                                           ! 3954             outb(0x3c0, read_byte(ES, BX)); BX++;
28621                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28622 765F           FF76         08            push	8[bp]
28623                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28624 7662           FF76         06            push	6[bp]
28625                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28626 7665           E8         0528            call	_read_byte
28627 7668           83C4                   04  add	sp,*4
28628                                           ! Debug: list unsigned char = al+0 (used reg = )
28629 766B           30E4                       xor	ah,ah
28630 766D           50                         push	ax
28631                                           ! Debug: list int = const $3C0 (used reg = )
28632 766E           B8                   03C0  mov	ax,#$3C0
28633 7671           50                         push	ax
28634                                           ! Debug: func () void = outb+0 (used reg = )
28635 7672           E8         0587            call	_outb
28636 7675           83C4                   04  add	sp,*4
28637                                           !BCC_EOS
28638                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28639 7678           8B46         08            mov	ax,8[bp]
28640 767B           40                         inc	ax
28641 767C           8946         08            mov	8[bp],ax
28642                                           !BCC_EOS
28643                                           ! 3955         }
28644                                           ! 3956         outb(0x3c0, ar_index);
28645                       0000767F            .280:
28646                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28647 767F           8B46         FE            mov	ax,-2[bp]
28648 7682           40                         inc	ax
28649 7683           8946         FE            mov	-2[bp],ax
28650                       00007686            .281:
28651                                           ! Debug: le int = const $13 to unsigned short i = [S+$C-4] (used reg = )
28652 7686           8B46         FE            mov	ax,-2[bp]
28653 7689           3D                   0013  cmp	ax,*$13
28654 768C           76           BC            jbe	.282
28655                       0000768E            .283:
28656                       0000768E            .27F:
28657                                           ! Debug: list unsigned short ar_index = [S+$C-$C] (used reg = )
28658 768E           FF76         F6            push	-$A[bp]
28659                                           ! Debug: list int = const $3C0 (used reg = )
28660 7691           B8                   03C0  mov	ax,#$3C0
28661 7694           50                         push	ax
28662                                           ! Debug: func () void = outb+0 (used reg = )
28663 7695           E8         0564            call	_outb
28664 7698           83C4                   04  add	sp,*4
28665                                           !BCC_EOS
28666                                           ! 3957         inb(0x3da);
28667                                           ! Debug: list int = const $3DA (used reg = )
28668 769B           B8                   03DA  mov	ax,#$3DA
28669 769E           50                         push	ax
28670                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28671 769F           E8         0544            call	_inb
28672 76A2           44                         inc	sp
28673 76A3           44                         inc	sp
28674                                           !BCC_EOS
28675                                           ! 3958         for(i=0;i<=8;i++) {
28676                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
28677 76A4           31C0                       xor	ax,ax
28678 76A6           8946         FE            mov	-2[bp],ax
28679                                           !BCC_EOS
28680                                           !BCC_EOS
28681 76A9           EB           34            jmp .286
28682                       000076AB            .287:
28683                                           ! 3959             outb(0x3ce,i);
28684                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
28685 76AB           FF76         FE            push	-2[bp]
28686                                           ! Debug: list int = const $3CE (used reg = )
28687 76AE           B8                   03CE  mov	ax,#$3CE
28688 76B1           50                         push	ax
28689                                           ! Debug: func () void = outb+0 (used reg = )
28690 76B2           E8         0547            call	_outb
28691 76B5           83C4                   04  add	sp,*4
28692                                           !BCC_EOS
28693                                           ! 3960             outb(0x3cf, read_byte(ES, BX)); BX++;
28694                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28695 76B8           FF76         08            push	8[bp]
28696                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28697 76BB           FF76         06            push	6[bp]
28698                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28699 76BE           E8         04CF            call	_read_byte
28700 76C1           83C4                   04  add	sp,*4
28701                                           ! Debug: list unsigned char = al+0 (used reg = )
28702 76C4           30E4                       xor	ah,ah
28703 76C6           50                         push	ax
28704                                           ! Debug: list int = const $3CF (used reg = )
28705 76C7           B8                   03CF  mov	ax,#$3CF
28706 76CA           50                         push	ax
28707                                           ! Debug: func () void = outb+0 (used reg = )
28708 76CB           E8         052E            call	_outb
28709 76CE           83C4                   04  add	sp,*4
28710                                           !BCC_EOS
28711                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28712 76D1           8B46         08            mov	ax,8[bp]
28713 76D4           40                         inc	ax
28714 76D5           8946         08            mov	8[bp],ax
28715                                           !BCC_EOS
28716                                           ! 3961         }
28717                                           ! 3962         BX += 2;
28718                       000076D8            .285:
28719                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28720 76D8           8B46         FE            mov	ax,-2[bp]
28721 76DB           40                         inc	ax
28722 76DC           8946         FE            mov	-2[bp],ax
28723                       000076DF            .286:
28724                                           ! Debug: le int = const 8 to unsigned short i = [S+$C-4] (used reg = )
28725 76DF           8B46         FE            mov	ax,-2[bp]
28726 76E2           3D                   0008  cmp	ax,*8
28727 76E5           76           C4            jbe	.287
28728                       000076E7            .288:
28729                       000076E7            .284:
28730                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28731 76E7           8B46         08            mov	ax,8[bp]
28732 76EA           40                         inc	ax
28733 76EB           40                         inc	ax
28734 76EC           8946         08            mov	8[bp],ax
28735                                           !BCC_EOS
28736                                           ! 3963         BX += 4;
28737                                           ! Debug: addab int = const 4 to unsigned short BX = [S+$C+6] (used reg = )
28738 76EF           8B46         08            mov	ax,8[bp]
28739 76F2           05                   0004  add	ax,*4
28740 76F5           8946         08            mov	8[bp],ax
28741                                           !BCC_EOS
28742                                           ! 3964         outb(0x3c4, read_byte(ES, addr1)); addr1++;
28743                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
28744 76F8           FF76         F8            push	-8[bp]
28745                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28746 76FB           FF76         06            push	6[bp]
28747                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28748 76FE           E8         048F            call	_read_byte
28749 7701           83C4                   04  add	sp,*4
28750                                           ! Debug: list unsigned char = al+0 (used reg = )
28751 7704           30E4                       xor	ah,ah
28752 7706           50                         push	ax
28753                                           ! Debug: list int = const $3C4 (used reg = )
28754 7707           B8                   03C4  mov	ax,#$3C4
28755 770A           50                         push	ax
28756                                           ! Debug: func () void = outb+0 (used reg = )
28757 770B           E8         04EE            call	_outb
28758 770E           83C4                   04  add	sp,*4
28759                                           !BCC_EOS
28760                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28761 7711           8B46         F8            mov	ax,-8[bp]
28762 7714           40                         inc	ax
28763 7715           8946         F8            mov	-8[bp],ax
28764                                           !BCC_EOS
28765                                           ! 3965         outb(crtc_addr, read_byte(ES, addr1)); addr1++;
28766                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
28767 7718           FF76         F8            push	-8[bp]
28768                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28769 771B           FF76         06            push	6[bp]
28770                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28771 771E           E8         046F            call	_read_byte
28772 7721           83C4                   04  add	sp,*4
28773                                           ! Debug: list unsigned char = al+0 (used reg = )
28774 7724           30E4                       xor	ah,ah
28775 7726           50                         push	ax
28776                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28777 7727           FF76         FC            push	-4[bp]
28778                                           ! Debug: func () void = outb+0 (used reg = )
28779 772A           E8         04CF            call	_outb
28780 772D           83C4                   04  add	sp,*4
28781                                           !BCC_EOS
28782                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28783 7730           8B46         F8            mov	ax,-8[bp]
28784 7733           40                         inc	ax
28785 7734           8946         F8            mov	-8[bp],ax
28786                                           !BCC_EOS
28787                                           ! 3966         outb(0x3ce, read_byte(ES, addr1)); addr1++;
28788                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
28789 7737           FF76         F8            push	-8[bp]
28790                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28791 773A           FF76         06            push	6[bp]
28792                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28793 773D           E8         0450            call	_read_byte
28794 7740           83C4                   04  add	sp,*4
28795                                           ! Debug: list unsigned char = al+0 (used reg = )
28796 7743           30E4                       xor	ah,ah
28797 7745           50                         push	ax
28798                                           ! Debug: list int = const $3CE (used reg = )
28799 7746           B8                   03CE  mov	ax,#$3CE
28800 7749           50                         push	ax
28801                                           ! Debug: func () void = outb+0 (used reg = )
28802 774A           E8         04AF            call	_outb
28803 774D           83C4                   04  add	sp,*4
28804                                           !BCC_EOS
28805                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28806 7750           8B46         F8            mov	ax,-8[bp]
28807 7753           40                         inc	ax
28808 7754           8946         F8            mov	-8[bp],ax
28809                                           !BCC_EOS
28810                                           ! 3967         addr1++;
28811                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28812 7757           8B46         F8            mov	ax,-8[bp]
28813 775A           40                         inc	ax
28814 775B           8946         F8            mov	-8[bp],ax
28815                                           !BCC_EOS
28816                                           ! 3968         outb(crtc_addr - 0x4 + 0xa, read_byte(ES, addr1)); addr1++;
28817                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
28818 775E           FF76         F8            push	-8[bp]
28819                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28820 7761           FF76         06            push	6[bp]
28821                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28822 7764           E8         0429            call	_read_byte
28823 7767           83C4                   04  add	sp,*4
28824                                           ! Debug: list unsigned char = al+0 (used reg = )
28825 776A           30E4                       xor	ah,ah
28826 776C           50                         push	ax
28827                                           ! Debug: sub int = const 4 to unsigned short crtc_addr = [S+$E-6] (used reg = )
28828 776D           8B46         FC            mov	ax,-4[bp]
28829                                           ! Debug: add int = const $A to unsigned int = ax-4 (used reg = )
28830                                           ! Debug: list unsigned int = ax+6 (used reg = )
28831 7770           05                   0006  add	ax,*6
28832 7773           50                         push	ax
28833                                           ! Debug: func () void = outb+0 (used reg = )
28834 7774           E8         0485            call	_outb
28835 7777           83C4                   04  add	sp,*4
28836                                           !BCC_EOS
28837                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28838 777A           8B46         F8            mov	ax,-8[bp]
28839 777D           40                         inc	ax
28840 777E           8946         F8            mov	-8[bp],ax
28841                                           !BCC_EOS
28842                                           ! 3969     }
28843                                           ! 3970     if (CX & 2) {
28844                       00007781            .26F:
28845                                           ! Debug: and int = const 2 to unsigned short CX = [S+$C+2] (used reg = )
28846 7781           8A46         04            mov	al,4[bp]
28847 7784           24                     02  and	al,*2
28848 7786           84C0                       test	al,al
28849 7788         0F84         0270            beq 	.289
28850                       0000778C            .28A:
28851                                           ! 3971         write_byte(0x40,0x49, read_byte(ES, BX)); BX++;
28852                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28853 778C           FF76         08            push	8[bp]
28854                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28855 778F           FF76         06            push	6[bp]
28856                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28857 7792           E8         03FB            call	_read_byte
28858 7795           83C4                   04  add	sp,*4
28859                                           ! Debug: list unsigned char = al+0 (used reg = )
28860 7798           30E4                       xor	ah,ah
28861 779A           50                         push	ax
28862                                           ! Debug: list int = const $49 (used reg = )
28863 779B           B8                   0049  mov	ax,*$49
28864 779E           50                         push	ax
28865                                           ! Debug: list int = const $40 (used reg = )
28866 779F           B8                   0040  mov	ax,*$40
28867 77A2           50                         push	ax
28868                                           ! Debug: func () void = write_byte+0 (used reg = )
28869 77A3           E8         0410            call	_write_byte
28870 77A6           83C4                   06  add	sp,*6
28871                                           !BCC_EOS
28872                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28873 77A9           8B46         08            mov	ax,8[bp]
28874 77AC           40                         inc	ax
28875 77AD           8946         08            mov	8[bp],ax
28876                                           !BCC_EOS
28877                                           ! 3972         write_word(0x40,0x4A, read_word(ES, BX)); BX += 2;
28878                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28879 77B0           FF76         08            push	8[bp]
28880                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28881 77B3           FF76         06            push	6[bp]
28882                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28883 77B6           E8         03EA            call	_read_word
28884 77B9           83C4                   04  add	sp,*4
28885                                           ! Debug: list unsigned short = ax+0 (used reg = )
28886 77BC           50                         push	ax
28887                                           ! Debug: list int = const $4A (used reg = )
28888 77BD           B8                   004A  mov	ax,*$4A
28889 77C0           50                         push	ax
28890                                           ! Debug: list int = const $40 (used reg = )
28891 77C1           B8                   0040  mov	ax,*$40
28892 77C4           50                         push	ax
28893                                           ! Debug: func () void = write_word+0 (used reg = )
28894 77C5           E8         0406            call	_write_word
28895 77C8           83C4                   06  add	sp,*6
28896                                           !BCC_EOS
28897                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28898 77CB           8B46         08            mov	ax,8[bp]
28899 77CE           40                         inc	ax
28900 77CF           40                         inc	ax
28901 77D0           8946         08            mov	8[bp],ax
28902                                           !BCC_EOS
28903                                           ! 3973         write_word(0x40,0x4C, read_word(ES, BX)); BX += 2;
28904                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28905 77D3           FF76         08            push	8[bp]
28906                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28907 77D6           FF76         06            push	6[bp]
28908                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28909 77D9           E8         03C7            call	_read_word
28910 77DC           83C4                   04  add	sp,*4
28911                                           ! Debug: list unsigned short = ax+0 (used reg = )
28912 77DF           50                         push	ax
28913                                           ! Debug: list int = const $4C (used reg = )
28914 77E0           B8                   004C  mov	ax,*$4C
28915 77E3           50                         push	ax
28916                                           ! Debug: list int = const $40 (used reg = )
28917 77E4           B8                   0040  mov	ax,*$40
28918 77E7           50                         push	ax
28919                                           ! Debug: func () void = write_word+0 (used reg = )
28920 77E8           E8         03E3            call	_write_word
28921 77EB           83C4                   06  add	sp,*6
28922                                           !BCC_EOS
28923                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28924 77EE           8B46         08            mov	ax,8[bp]
28925 77F1           40                         inc	ax
28926 77F2           40                         inc	ax
28927 77F3           8946         08            mov	8[bp],ax
28928                                           !BCC_EOS
28929                                           ! 3974         write_word(0x40,0x63, read_word(ES, BX)); BX += 2;
28930                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28931 77F6           FF76         08            push	8[bp]
28932                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28933 77F9           FF76         06            push	6[bp]
28934                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28935 77FC           E8         03A4            call	_read_word
28936 77FF           83C4                   04  add	sp,*4
28937                                           ! Debug: list unsigned short = ax+0 (used reg = )
28938 7802           50                         push	ax
28939                                           ! Debug: list int = const $63 (used reg = )
28940 7803           B8                   0063  mov	ax,*$63
28941 7806           50                         push	ax
28942                                           ! Debug: list int = const $40 (used reg = )
28943 7807           B8                   0040  mov	ax,*$40
28944 780A           50                         push	ax
28945                                           ! Debug: func () void = write_word+0 (used reg = )
28946 780B           E8         03C0            call	_write_word
28947 780E           83C4                   06  add	sp,*6
28948                                           !BCC_EOS
28949                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28950 7811           8B46         08            mov	ax,8[bp]
28951 7814           40                         inc	ax
28952 7815           40                         inc	ax
28953 7816           8946         08            mov	8[bp],ax
28954                                           !BCC_EOS
28955                                           ! 3975         write_byte(0x40,0x84, read_byte(ES, BX)); BX++;
28956                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28957 7819           FF76         08            push	8[bp]
28958                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28959 781C           FF76         06            push	6[bp]
28960                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28961 781F           E8         036E            call	_read_byte
28962 7822           83C4                   04  add	sp,*4
28963                                           ! Debug: list unsigned char = al+0 (used reg = )
28964 7825           30E4                       xor	ah,ah
28965 7827           50                         push	ax
28966                                           ! Debug: list int = const $84 (used reg = )
28967 7828           B8                   0084  mov	ax,#$84
28968 782B           50                         push	ax
28969                                           ! Debug: list int = const $40 (used reg = )
28970 782C           B8                   0040  mov	ax,*$40
28971 782F           50                         push	ax
28972                                           ! Debug: func () void = write_byte+0 (used reg = )
28973 7830           E8         0383            call	_write_byte
28974 7833           83C4                   06  add	sp,*6
28975                                           !BCC_EOS
28976                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28977 7836           8B46         08            mov	ax,8[bp]
28978 7839           40                         inc	ax
28979 783A           8946         08            mov	8[bp],ax
28980                                           !BCC_EOS
28981                                           ! 3976         write_word(0x40,0x85, read_word(ES, BX)); BX += 2;
28982                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28983 783D           FF76         08            push	8[bp]
28984                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28985 7840           FF76         06            push	6[bp]
28986                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28987 7843           E8         035D            call	_read_word
28988 7846           83C4                   04  add	sp,*4
28989                                           ! Debug: list unsigned short = ax+0 (used reg = )
28990 7849           50                         push	ax
28991                                           ! Debug: list int = const $85 (used reg = )
28992 784A           B8                   0085  mov	ax,#$85
28993 784D           50                         push	ax
28994                                           ! Debug: list int = const $40 (used reg = )
28995 784E           B8                   0040  mov	ax,*$40
28996 7851           50                         push	ax
28997                                           ! Debug: func () void = write_word+0 (used reg = )
28998 7852           E8         0379            call	_write_word
28999 7855           83C4                   06  add	sp,*6
29000                                           !BCC_EOS
29001                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29002 7858           8B46         08            mov	ax,8[bp]
29003 785B           40                         inc	ax
29004 785C           40                         inc	ax
29005 785D           8946         08            mov	8[bp],ax
29006                                           !BCC_EOS
29007                                           ! 3977         write_byte(0x40,0x87, read_byte(ES, BX)); BX++;
29008                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29009 7860           FF76         08            push	8[bp]
29010                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29011 7863           FF76         06            push	6[bp]
29012                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29013 7866           E8         0327            call	_read_byte
29014 7869           83C4                   04  add	sp,*4
29015                                           ! Debug: list unsigned char = al+0 (used reg = )
29016 786C           30E4                       xor	ah,ah
29017 786E           50                         push	ax
29018                                           ! Debug: list int = const $87 (used reg = )
29019 786F           B8                   0087  mov	ax,#$87
29020 7872           50                         push	ax
29021                                           ! Debug: list int = const $40 (used reg = )
29022 7873           B8                   0040  mov	ax,*$40
29023 7876           50                         push	ax
29024                                           ! Debug: func () void = write_byte+0 (used reg = )
29025 7877           E8         033C            call	_write_byte
29026 787A           83C4                   06  add	sp,*6
29027                                           !BCC_EOS
29028                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29029 787D           8B46         08            mov	ax,8[bp]
29030 7880           40                         inc	ax
29031 7881           8946         08            mov	8[bp],ax
29032                                           !BCC_EOS
29033                                           ! 3978         write_byte(0x40,0x88, read_byte(ES, BX)); BX++;
29034                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29035 7884           FF76         08            push	8[bp]
29036                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29037 7887           FF76         06            push	6[bp]
29038                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29039 788A           E8         0303            call	_read_byte
29040 788D           83C4                   04  add	sp,*4
29041                                           ! Debug: list unsigned char = al+0 (used reg = )
29042 7890           30E4                       xor	ah,ah
29043 7892           50                         push	ax
29044                                           ! Debug: list int = const $88 (used reg = )
29045 7893           B8                   0088  mov	ax,#$88
29046 7896           50                         push	ax
29047                                           ! Debug: list int = const $40 (used reg = )
29048 7897           B8                   0040  mov	ax,*$40
29049 789A           50                         push	ax
29050                                           ! Debug: func () void = write_byte+0 (used reg = )
29051 789B           E8         0318            call	_write_byte
29052 789E           83C4                   06  add	sp,*6
29053                                           !BCC_EOS
29054                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29055 78A1           8B46         08            mov	ax,8[bp]
29056 78A4           40                         inc	ax
29057 78A5           8946         08            mov	8[bp],ax
29058                                           !BCC_EOS
29059                                           ! 3979         write_byte(0x40,0x89, read_byte(ES, BX)); BX++;
29060                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29061 78A8           FF76         08            push	8[bp]
29062                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29063 78AB           FF76         06            push	6[bp]
29064                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29065 78AE           E8         02DF            call	_read_byte
29066 78B1           83C4                   04  add	sp,*4
29067                                           ! Debug: list unsigned char = al+0 (used reg = )
29068 78B4           30E4                       xor	ah,ah
29069 78B6           50                         push	ax
29070                                           ! Debug: list int = const $89 (used reg = )
29071 78B7           B8                   0089  mov	ax,#$89
29072 78BA           50                         push	ax
29073                                           ! Debug: list int = const $40 (used reg = )
29074 78BB           B8                   0040  mov	ax,*$40
29075 78BE           50                         push	ax
29076                                           ! Debug: func () void = write_byte+0 (used reg = )
29077 78BF           E8         02F4            call	_write_byte
29078 78C2           83C4                   06  add	sp,*6
29079                                           !BCC_EOS
29080                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29081 78C5           8B46         08            mov	ax,8[bp]
29082 78C8           40                         inc	ax
29083 78C9           8946         08            mov	8[bp],ax
29084                                           !BCC_EOS
29085                                           ! 3980         write_word(0x40,0x60, read_word(ES, BX)); BX += 2;
29086                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29087 78CC           FF76         08            push	8[bp]
29088                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29089 78CF           FF76         06            push	6[bp]
29090                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29091 78D2           E8         02CE            call	_read_word
29092 78D5           83C4                   04  add	sp,*4
29093                                           ! Debug: list unsigned short = ax+0 (used reg = )
29094 78D8           50                         push	ax
29095                                           ! Debug: list int = const $60 (used reg = )
29096 78D9           B8                   0060  mov	ax,*$60
29097 78DC           50                         push	ax
29098                                           ! Debug: list int = const $40 (used reg = )
29099 78DD           B8                   0040  mov	ax,*$40
29100 78E0           50                         push	ax
29101                                           ! Debug: func () void = write_word+0 (used reg = )
29102 78E1           E8         02EA            call	_write_word
29103 78E4           83C4                   06  add	sp,*6
29104                                           !BCC_EOS
29105                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29106 78E7           8B46         08            mov	ax,8[bp]
29107 78EA           40                         inc	ax
29108 78EB           40                         inc	ax
29109 78EC           8946         08            mov	8[bp],ax
29110                                           !BCC_EOS
29111                                           ! 3981         for(i=0;i<8;i++) {
29112                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
29113 78EF           31C0                       xor	ax,ax
29114 78F1           8946         FE            mov	-2[bp],ax
29115                                           !BCC_EOS
29116                                           !BCC_EOS
29117 78F4           EB           2F            jmp .28D
29118                       000078F6            .28E:
29119                                           ! 3982             write_word(0x40, 0x50 +2*i, read_word(ES, BX));
29120                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29121 78F6           FF76         08            push	8[bp]
29122                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29123 78F9           FF76         06            push	6[bp]
29124                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29125 78FC           E8         02A4            call	_read_word
29126 78FF           83C4                   04  add	sp,*4
29127                                           ! Debug: list unsigned short = ax+0 (used reg = )
29128 7902           50                         push	ax
29129                                           ! Debug: mul unsigned short i = [S+$E-4] to int = const 2 (used reg = )
29130                                           ! Debug: expression subtree swapping
29131 7903           8B46         FE            mov	ax,-2[bp]
29132 7906           D1E0                       shl	ax,*1
29133                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
29134                                           ! Debug: expression subtree swapping
29135                                           ! Debug: list unsigned int = ax+$50 (used reg = )
29136 7908           05                   0050  add	ax,*$50
29137 790B           50                         push	ax
29138                                           ! Debug: list int = const $40 (used reg = )
29139 790C           B8                   0040  mov	ax,*$40
29140 790F           50                         push	ax
29141                                           ! Debug: func () void = write_word+0 (used reg = )
29142 7910           E8         02BB            call	_write_word
29143 7913           83C4                   06  add	sp,*6
29144                                           !BCC_EOS
29145                                           ! 3983          
29146                                           ! 3983    BX += 2;
29147                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29148 7916           8B46         08            mov	ax,8[bp]
29149 7919           40                         inc	ax
29150 791A           40                         inc	ax
29151 791B           8946         08            mov	8[bp],ax
29152                                           !BCC_EOS
29153                                           ! 3984         }
29154                                           ! 3985         write_word(0x40,0x4E, read_word(ES, BX)); BX += 2;
29155                       0000791E            .28C:
29156                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
29157 791E           8B46         FE            mov	ax,-2[bp]
29158 7921           40                         inc	ax
29159 7922           8946         FE            mov	-2[bp],ax
29160                       00007925            .28D:
29161                                           ! Debug: lt int = const 8 to unsigned short i = [S+$C-4] (used reg = )
29162 7925           8B46         FE            mov	ax,-2[bp]
29163 7928           3D                   0008  cmp	ax,*8
29164 792B           72           C9            jb 	.28E
29165                       0000792D            .28F:
29166                       0000792D            .28B:
29167                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29168 792D           FF76         08            push	8[bp]
29169                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29170 7930           FF76         06            push	6[bp]
29171                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29172 7933           E8         026D            call	_read_word
29173 7936           83C4                   04  add	sp,*4
29174                                           ! Debug: list unsigned short = ax+0 (used reg = )
29175 7939           50                         push	ax
29176                                           ! Debug: list int = const $4E (used reg = )
29177 793A           B8                   004E  mov	ax,*$4E
29178 793D           50                         push	ax
29179                                           ! Debug: list int = const $40 (used reg = )
29180 793E           B8                   0040  mov	ax,*$40
29181 7941           50                         push	ax
29182                                           ! Debug: func () void = write_word+0 (used reg = )
29183 7942           E8         0289            call	_write_word
29184 7945           83C4                   06  add	sp,*6
29185                                           !BCC_EOS
29186                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29187 7948           8B46         08            mov	ax,8[bp]
29188 794B           40                         inc	ax
29189 794C           40                         inc	ax
29190 794D           8946         08            mov	8[bp],ax
29191                                           !BCC_EOS
29192                                           ! 3986         write_byte(0x40,0x62, read_byte(ES, BX)); BX++;
29193                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29194 7950           FF76         08            push	8[bp]
29195                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29196 7953           FF76         06            push	6[bp]
29197                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29198 7956           E8         0237            call	_read_byte
29199 7959           83C4                   04  add	sp,*4
29200                                           ! Debug: list unsigned char = al+0 (used reg = )
29201 795C           30E4                       xor	ah,ah
29202 795E           50                         push	ax
29203                                           ! Debug: list int = const $62 (used reg = )
29204 795F           B8                   0062  mov	ax,*$62
29205 7962           50                         push	ax
29206                                           ! Debug: list int = const $40 (used reg = )
29207 7963           B8                   0040  mov	ax,*$40
29208 7966           50                         push	ax
29209                                           ! Debug: func () void = write_byte+0 (used reg = )
29210 7967           E8         024C            call	_write_byte
29211 796A           83C4                   06  add	sp,*6
29212                                           !BCC_EOS
29213                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29214 796D           8B46         08            mov	ax,8[bp]
29215 7970           40                         inc	ax
29216 7971           8946         08            mov	8[bp],ax
29217                                           !BCC_EOS
29218                                           ! 3987         write_word(0, 0x1f * 4, read_word(ES, BX)); BX += 2;
29219                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29220 7974           FF76         08            push	8[bp]
29221                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29222 7977           FF76         06            push	6[bp]
29223                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29224 797A           E8         0226            call	_read_word
29225 797D           83C4                   04  add	sp,*4
29226                                           ! Debug: list unsigned short = ax+0 (used reg = )
29227 7980           50                         push	ax
29228                                           ! Debug: list int = const $7C (used reg = )
29229 7981           B8                   007C  mov	ax,*$7C
29230 7984           50                         push	ax
29231                                           ! Debug: list int = const 0 (used reg = )
29232 7985           31C0                       xor	ax,ax
29233 7987           50                         push	ax
29234                                           ! Debug: func () void = write_word+0 (used reg = )
29235 7988           E8         0243            call	_write_word
29236 798B           83C4                   06  add	sp,*6
29237                                           !BCC_EOS
29238                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29239 798E           8B46         08            mov	ax,8[bp]
29240 7991           40                         inc	ax
29241 7992           40                         inc	ax
29242 7993           8946         08            mov	8[bp],ax
29243                                           !BCC_EOS
29244                                           ! 3988         write_word(0, 0x1f * 4 + 2, read_word(ES, BX)); BX += 2;
29245                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29246 7996           FF76         08            push	8[bp]
29247                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29248 7999           FF76         06            push	6[bp]
29249                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29250 799C           E8         0204            call	_read_word
29251 799F           83C4                   04  add	sp,*4
29252                                           ! Debug: list unsigned short = ax+0 (used reg = )
29253 79A2           50                         push	ax
29254                                           ! Debug: list int = const $7E (used reg = )
29255 79A3           B8                   007E  mov	ax,*$7E
29256 79A6           50                         push	ax
29257                                           ! Debug: list int = const 0 (used reg = )
29258 79A7           31C0                       xor	ax,ax
29259 79A9           50                         push	ax
29260                                           ! Debug: func () void = write_word+0 (used reg = )
29261 79AA           E8         0221            call	_write_word
29262 79AD           83C4                   06  add	sp,*6
29263                                           !BCC_EOS
29264                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29265 79B0           8B46         08            mov	ax,8[bp]
29266 79B3           40                         inc	ax
29267 79B4           40                         inc	ax
29268 79B5           8946         08            mov	8[bp],ax
29269                                           !BCC_EOS
29270                                           ! 3989         write_word(0, 0x43 * 4, read_word(ES, BX)); BX += 2;
29271                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29272 79B8           FF76         08            push	8[bp]
29273                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29274 79BB           FF76         06            push	6[bp]
29275                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29276 79BE           E8         01E2            call	_read_word
29277 79C1           83C4                   04  add	sp,*4
29278                                           ! Debug: list unsigned short = ax+0 (used reg = )
29279 79C4           50                         push	ax
29280                                           ! Debug: list int = const $10C (used reg = )
29281 79C5           B8                   010C  mov	ax,#$10C
29282 79C8           50                         push	ax
29283                                           ! Debug: list int = const 0 (used reg = )
29284 79C9           31C0                       xor	ax,ax
29285 79CB           50                         push	ax
29286                                           ! Debug: func () void = write_word+0 (used reg = )
29287 79CC           E8         01FF            call	_write_word
29288 79CF           83C4                   06  add	sp,*6
29289                                           !BCC_EOS
29290                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29291 79D2           8B46         08            mov	ax,8[bp]
29292 79D5           40                         inc	ax
29293 79D6           40                         inc	ax
29294 79D7           8946         08            mov	8[bp],ax
29295                                           !BCC_EOS
29296                                           ! 3990         write_word(0, 0x43 * 4 + 2, read_word(ES, BX)); BX += 2;
29297                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29298 79DA           FF76         08            push	8[bp]
29299                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29300 79DD           FF76         06            push	6[bp]
29301                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29302 79E0           E8         01C0            call	_read_word
29303 79E3           83C4                   04  add	sp,*4
29304                                           ! Debug: list unsigned short = ax+0 (used reg = )
29305 79E6           50                         push	ax
29306                                           ! Debug: list int = const $10E (used reg = )
29307 79E7           B8                   010E  mov	ax,#$10E
29308 79EA           50                         push	ax
29309                                           ! Debug: list int = const 0 (used reg = )
29310 79EB           31C0                       xor	ax,ax
29311 79ED           50                         push	ax
29312                                           ! Debug: func () void = write_word+0 (used reg = )
29313 79EE           E8         01DD            call	_write_word
29314 79F1           83C4                   06  add	sp,*6
29315                                           !BCC_EOS
29316                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29317 79F4           8B46         08            mov	ax,8[bp]
29318 79F7           40                         inc	ax
29319 79F8           40                         inc	ax
29320 79F9           8946         08            mov	8[bp],ax
29321                                           !BCC_EOS
29322                                           ! 3991     }
29323                                           ! 3992     if (CX & 4) {
29324                       000079FC            .289:
29325                                           ! Debug: and int = const 4 to unsigned short CX = [S+$C+2] (used reg = )
29326 79FC           8A46         04            mov	al,4[bp]
29327 79FF           24                     04  and	al,*4
29328 7A01           84C0                       test	al,al
29329 7A03         0F84         0096            beq 	.290
29330                       00007A07            .291:
29331                                           ! 3993         BX++;
29332                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29333 7A07           8B46         08            mov	ax,8[bp]
29334 7A0A           40                         inc	ax
29335 7A0B           8946         08            mov	8[bp],ax
29336                                           !BCC_EOS
29337                                           ! 3994         v = read_byte(ES, BX); BX++;
29338                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29339 7A0E           FF76         08            push	8[bp]
29340                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29341 7A11           FF76         06            push	6[bp]
29342                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29343 7A14           E8         0179            call	_read_byte
29344 7A17           83C4                   04  add	sp,*4
29345                                           ! Debug: eq unsigned char = al+0 to unsigned short v = [S+$C-8] (used reg = )
29346 7A1A           30E4                       xor	ah,ah
29347 7A1C           8946         FA            mov	-6[bp],ax
29348                                           !BCC_EOS
29349                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29350 7A1F           8B46         08            mov	ax,8[bp]
29351 7A22           40                         inc	ax
29352 7A23           8946         08            mov	8[bp],ax
29353                                           !BCC_EOS
29354                                           ! 3995         outb(0x3c6, read_byte(ES, BX)); BX++;
29355                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29356 7A26           FF76         08            push	8[bp]
29357                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29358 7A29           FF76         06            push	6[bp]
29359                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29360 7A2C           E8         0161            call	_read_byte
29361 7A2F           83C4                   04  add	sp,*4
29362                                           ! Debug: list unsigned char = al+0 (used reg = )
29363 7A32           30E4                       xor	ah,ah
29364 7A34           50                         push	ax
29365                                           ! Debug: list int = const $3C6 (used reg = )
29366 7A35           B8                   03C6  mov	ax,#$3C6
29367 7A38           50                         push	ax
29368                                           ! Debug: func () void = outb+0 (used reg = )
29369 7A39           E8         01C0            call	_outb
29370 7A3C           83C4                   04  add	sp,*4
29371                                           !BCC_EOS
29372                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29373 7A3F           8B46         08            mov	ax,8[bp]
29374 7A42           40                         inc	ax
29375 7A43           8946         08            mov	8[bp],ax
29376                                           !BCC_EOS
29377                                           ! 3996         outb(0x3c8,0x00);
29378                                           ! Debug: list int = const 0 (used reg = )
29379 7A46           31C0                       xor	ax,ax
29380 7A48           50                         push	ax
29381                                           ! Debug: list int = const $3C8 (used reg = )
29382 7A49           B8                   03C8  mov	ax,#$3C8
29383 7A4C           50                         push	ax
29384                                           ! Debug: func () void = outb+0 (used reg = )
29385 7A4D           E8         01AC            call	_outb
29386 7A50           83C4                   04  add	sp,*4
29387                                           !BCC_EOS
29388                                           ! 3997         for(i=0;i<256*3;i++) {
29389                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
29390 7A53           31C0                       xor	ax,ax
29391 7A55           8946         FE            mov	-2[bp],ax
29392                                           !BCC_EOS
29393                                           !BCC_EOS
29394 7A58           EB           27            jmp .294
29395                       00007A5A            .295:
29396                                           ! 3998             outb(0x3c9, read_byte(ES, BX)); BX++;
29397                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29398 7A5A           FF76         08            push	8[bp]
29399                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29400 7A5D           FF76         06            push	6[bp]
29401                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29402 7A60           E8         012D            call	_read_byte
29403 7A63           83C4                   04  add	sp,*4
29404                                           ! Debug: list unsigned char = al+0 (used reg = )
29405 7A66           30E4                       xor	ah,ah
29406 7A68           50                         push	ax
29407                                           ! Debug: list int = const $3C9 (used reg = )
29408 7A69           B8                   03C9  mov	ax,#$3C9
29409 7A6C           50                         push	ax
29410                                           ! Debug: func () void = outb+0 (used reg = )
29411 7A6D           E8         018C            call	_outb
29412 7A70           83C4                   04  add	sp,*4
29413                                           !BCC_EOS
29414                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29415 7A73           8B46         08            mov	ax,8[bp]
29416 7A76           40                         inc	ax
29417 7A77           8946         08            mov	8[bp],ax
29418                                           !BCC_EOS
29419                                           ! 3999         }
29420                                           ! 4000         BX++;
29421                       00007A7A            .293:
29422                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
29423 7A7A           8B46         FE            mov	ax,-2[bp]
29424 7A7D           40                         inc	ax
29425 7A7E           8946         FE            mov	-2[bp],ax
29426                       00007A81            .294:
29427                                           ! Debug: lt int = const $300 to unsigned short i = [S+$C-4] (used reg = )
29428 7A81           8B46         FE            mov	ax,-2[bp]
29429 7A84           3D                   0300  cmp	ax,#$300
29430 7A87           72           D1            jb 	.295
29431                       00007A89            .296:
29432                       00007A89            .292:
29433                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29434 7A89           8B46         08            mov	ax,8[bp]
29435 7A8C           40                         inc	ax
29436 7A8D           8946         08            mov	8[bp],ax
29437                                           !BCC_EOS
29438                                           ! 4001         outb(0x3c8, v);
29439                                           ! Debug: list unsigned short v = [S+$C-8] (used reg = )
29440 7A90           FF76         FA            push	-6[bp]
29441                                           ! Debug: list int = const $3C8 (used reg = )
29442 7A93           B8                   03C8  mov	ax,#$3C8
29443 7A96           50                         push	ax
29444                                           ! Debug: func () void = outb+0 (used reg = )
29445 7A97           E8         0162            call	_outb
29446 7A9A           83C4                   04  add	sp,*4
29447                                           !BCC_EOS
29448                                           ! 4002     }
29449                                           ! 4003     return BX;
29450                       00007A9D            .290:
29451 7A9D           8B46         08            mov	ax,8[bp]
29452 7AA0           89EC                       mov	sp,bp
29453 7AA2           5D                         pop	bp
29454 7AA3           C3                         ret
29455                                           !BCC_EOS
29456                                           ! 4004 }
29457                                           ! 4005 static Bit8u find_vga_entry(mode)
29458                                           ! 4006 Bit8u mode;
29459                       00007AA4            _find_vga_entry:
29460                                           !BCC_EOS
29461                                           ! 4007 {
29462                                           ! 4008  Bit8u i,line=0xFF;
29463 7AA4           55                         push	bp
29464 7AA5           89E5                       mov	bp,sp
29465 7AA7           4C                         dec	sp
29466 7AA8           4C                         dec	sp
29467                                           ! Debug: eq int = const $FF to unsigned char line = [S+4-4] (used reg = )
29468 7AA9           B0                     FF  mov	al,#$FF
29469 7AAB           8846         FE            mov	-2[bp],al
29470                                           !BCC_EOS
29471                                           ! 4009  for(i=0;i<=15;i++)
29472                                           ! Debug: eq int = const 0 to unsigned char i = [S+4-3] (used reg = )
29473 7AAE           30C0                       xor	al,al
29474 7AB0           8846         FF            mov	-1[bp],al
29475                                           !BCC_EOS
29476                                           !BCC_EOS
29477                                           ! 4010   if(vga_modes[i].svgamode==mode)
29478 7AB3           EB           23            jmp .299
29479                       00007AB5            .29A:
29480                                           ! Debug: ptradd unsigned char i = [S+4-3] to [$10] struct  = vga_modes+0 (used reg = )
29481 7AB5           8A46         FF            mov	al,-1[bp]
29482 7AB8           30E4                       xor	ah,ah
29483 7ABA           B1                     03  mov	cl,*3
29484 7ABC           D3E0                       shl	ax,cl
29485 7ABE           89C3                       mov	bx,ax
29486                                           ! Debug: logeq unsigned char mode = [S+4+2] to unsigned char = [bx+_vga_modes+0] (used reg = )
29487 7AC0           8A87       01FD            mov	al,_vga_modes[bx]
29488 7AC4           3A46         04            cmp	al,4[bp]
29489 7AC7           75           08            jne 	.29B
29490                       00007AC9            .29C:
29491                                           ! 4011    {line=i;
29492                                           ! Debug: eq unsigned char i = [S+4-3] to unsigned char line = [S+4-4] (used reg = )
29493 7AC9           8A46         FF            mov	al,-1[bp]
29494 7ACC           8846         FE            mov	-2[bp],al
29495                                           !BCC_EOS
29496                                           ! 4012     break;
29497 7ACF           EB           0E            jmp .297
29498                                           !BCC_EOS
29499                                           ! 4013    }
29500                                           ! 4014  return line;
29501                       00007AD1            .29B:
29502                       00007AD1            .298:
29503                                           ! Debug: postinc unsigned char i = [S+4-3] (used reg = )
29504 7AD1           8A46         FF            mov	al,-1[bp]
29505 7AD4           40                         inc	ax
29506 7AD5           8846         FF            mov	-1[bp],al
29507                       00007AD8            .299:
29508                                           ! Debug: le int = const $F to unsigned char i = [S+4-3] (used reg = )
29509 7AD8           8A46         FF            mov	al,-1[bp]
29510 7ADB           3C                     0F  cmp	al,*$F
29511 7ADD           76           D6            jbe	.29A
29512                       00007ADF            .29D:
29513                       00007ADF            .297:
29514 7ADF           8A46         FE            mov	al,-2[bp]
29515 7AE2           89EC                       mov	sp,bp
29516 7AE4           5D                         pop	bp
29517 7AE5           C3                         ret
29518                                           !BCC_EOS
29519                                           ! 4015 }
29520                                           ! 4016 static void memsetb(seg,offset,value,count)
29521                                           ! Register BX used in function find_vga_entry
29522                                           ! 4017   Bit16u seg;
29523                       00007AE6            _memsetb:
29524                                           !BCC_EOS
29525                                           ! 4018   Bit16u offset;
29526                                           !BCC_EOS
29527                                           ! 4019   Bit16u value;
29528                                           !BCC_EOS
29529                                           ! 4020   Bit16u count;
29530                                           !BCC_EOS
29531                                           ! 4021 {
29532                                           ! 4022 #asm
29533                                           !BCC_ASM
29534                       00000008            _memsetb.count	set	8
29535                       00000002            _memsetb.seg	set	2
29536                       00000006            _memsetb.value	set	6
29537                       00000004            _memsetb.offset	set	4
29538 7AE6           55                           push bp
29539 7AE7           89E5                         mov bp, sp
29540 7AE9           50                             push ax
29541 7AEA           51                             push cx
29542 7AEB           06                             push es
29543 7AEC           57                             push di
29544 7AED           8B4E         0A                mov cx, 10[bp] ; count
29545 7AF0           83F9                   00      cmp cx, #0x00
29546 7AF3           74           10                je memsetb_end
29547 7AF5           8B46         04                mov ax, 4[bp] ; segment
29548 7AF8           8EC0                           mov es, ax
29549 7AFA           8B46         06                mov ax, 6[bp] ; offset
29550 7AFD           89C7                           mov di, ax
29551 7AFF           8A46         08                mov al, 8[bp] ; value
29552 7B02           FC                             cld
29553 7B03           F3                             rep
29554 7B04           AA                              stosb
29555                       00007B05            memsetb_end:
29556 7B05           5F                             pop di
29557 7B06           07                             pop es
29558 7B07           59                             pop cx
29559 7B08           58                             pop ax
29560 7B09           5D                           pop bp
29561                                           ! 4046 endasm
29562                                           !BCC_ENDASM
29563                                           ! 4047 }
29564 7B0A           C3                         ret
29565                                           ! 4048 static void memsetw(seg,offset,value,count)
29566                                           ! 4049   Bit16u seg;
29567                       00007B0B            _memsetw:
29568                                           !BCC_EOS
29569                                           ! 4050   Bit16u offset;
29570                                           !BCC_EOS
29571                                           ! 4051   Bit16u value;
29572                                           !BCC_EOS
29573                                           ! 4052   Bit16u count;
29574                                           !BCC_EOS
29575                                           ! 4053 {
29576                                           ! 4054 #asm
29577                                           !BCC_ASM
29578                       00000008            _memsetw.count	set	8
29579                       00000002            _memsetw.seg	set	2
29580                       00000006            _memsetw.value	set	6
29581                       00000004            _memsetw.offset	set	4
29582 7B0B           55                           push bp
29583 7B0C           89E5                         mov bp, sp
29584 7B0E           50                             push ax
29585 7B0F           51                             push cx
29586 7B10           06                             push es
29587 7B11           57                             push di
29588 7B12           8B4E         0A                mov cx, 10[bp] ; count
29589 7B15           83F9                   00      cmp cx, #0x00
29590 7B18           74           10                je memsetw_end
29591 7B1A           8B46         04                mov ax, 4[bp] ; segment
29592 7B1D           8EC0                           mov es, ax
29593 7B1F           8B46         06                mov ax, 6[bp] ; offset
29594 7B22           89C7                           mov di, ax
29595 7B24           8B46         08                mov ax, 8[bp] ; value
29596 7B27           FC                             cld
29597 7B28           F3                             rep
29598 7B29           AB                              stosw
29599                       00007B2A            memsetw_end:
29600 7B2A           5F                             pop di
29601 7B2B           07                             pop es
29602 7B2C           59                             pop cx
29603 7B2D           58                             pop ax
29604 7B2E           5D                           pop bp
29605                                           ! 4078 endasm
29606                                           !BCC_ENDASM
29607                                           ! 4079 }
29608 7B2F           C3                         ret
29609                                           ! 4080 static void memcpyb(dseg,doffset,sseg,soffset,count)
29610                                           ! 4081   Bit16u dseg;
29611                       00007B30            _memcpyb:
29612                                           !BCC_EOS
29613                                           ! 4082   Bit16u doffset;
29614                                           !BCC_EOS
29615                                           ! 4083   Bit16u sseg;
29616                                           !BCC_EOS
29617                                           ! 4084   Bit16u soffset;
29618                                           !BCC_EOS
29619                                           ! 4085   Bit16u count;
29620                                           !BCC_EOS
29621                                           ! 4086 {
29622                                           ! 4087 #asm
29623                                           !BCC_ASM
29624                       0000000A            _memcpyb.count	set	$A
29625                       00000006            _memcpyb.sseg	set	6
29626                       00000008            _memcpyb.soffset	set	8
29627                       00000002            _memcpyb.dseg	set	2
29628                       00000004            _memcpyb.doffset	set	4
29629 7B30           55                           push bp
29630 7B31           89E5                         mov bp, sp
29631 7B33           50                             push ax
29632 7B34           51                             push cx
29633 7B35           06                             push es
29634 7B36           57                             push di
29635 7B37           1E                             push ds
29636 7B38           56                             push si
29637 7B39           8B4E         0C                mov cx, 12[bp] ; count
29638 7B3C           83F9                   00      cmp cx, #0x0000
29639 7B3F           74           17                je memcpyb_end
29640 7B41           8B46         04                mov ax, 4[bp] ; dsegment
29641 7B44           8EC0                           mov es, ax
29642 7B46           8B46         06                mov ax, 6[bp] ; doffset
29643 7B49           89C7                           mov di, ax
29644 7B4B           8B46         08                mov ax, 8[bp] ; ssegment
29645 7B4E           8ED8                           mov ds, ax
29646 7B50           8B46         0A                mov ax, 10[bp] ; soffset
29647 7B53           89C6                           mov si, ax
29648 7B55           FC                             cld
29649 7B56           F3                             rep
29650 7B57           A4                              movsb
29651                       00007B58            memcpyb_end:
29652 7B58           5E                             pop si
29653 7B59           1F                             pop ds
29654 7B5A           5F                             pop di
29655 7B5B           07                             pop es
29656 7B5C           59                             pop cx
29657 7B5D           58                             pop ax
29658 7B5E           5D                           pop bp
29659                                           ! 4118 endasm
29660                                           !BCC_ENDASM
29661                                           ! 4119 }
29662 7B5F           C3                         ret
29663                                           ! 4120 static void memcpyw(dseg,doffset,sseg,soffset,count)
29664                                           ! 4121   Bit16u dseg;
29665                       00007B60            _memcpyw:
29666                                           !BCC_EOS
29667                                           ! 4122   Bit16u doffset;
29668                                           !BCC_EOS
29669                                           ! 4123   Bit16u sseg;
29670                                           !BCC_EOS
29671                                           ! 4124   Bit16u soffset;
29672                                           !BCC_EOS
29673                                           ! 4125   Bit16u count;
29674                                           !BCC_EOS
29675                                           ! 4126 {
29676                                           ! 4127 #asm
29677                                           !BCC_ASM
29678                       0000000A            _memcpyw.count	set	$A
29679                       00000006            _memcpyw.sseg	set	6
29680                       00000008            _memcpyw.soffset	set	8
29681                       00000002            _memcpyw.dseg	set	2
29682                       00000004            _memcpyw.doffset	set	4
29683 7B60           55                           push bp
29684 7B61           89E5                         mov bp, sp
29685 7B63           50                             push ax
29686 7B64           51                             push cx
29687 7B65           06                             push es
29688 7B66           57                             push di
29689 7B67           1E                             push ds
29690 7B68           56                             push si
29691 7B69           8B4E         0C                mov cx, 12[bp] ; count
29692 7B6C           83F9                   00      cmp cx, #0x0000
29693 7B6F           74           17                je memcpyw_end
29694 7B71           8B46         04                mov ax, 4[bp] ; dsegment
29695 7B74           8EC0                           mov es, ax
29696 7B76           8B46         06                mov ax, 6[bp] ; doffset
29697 7B79           89C7                           mov di, ax
29698 7B7B           8B46         08                mov ax, 8[bp] ; ssegment
29699 7B7E           8ED8                           mov ds, ax
29700 7B80           8B46         0A                mov ax, 10[bp] ; soffset
29701 7B83           89C6                           mov si, ax
29702 7B85           FC                             cld
29703 7B86           F3                             rep
29704 7B87           A5                              movsw
29705                       00007B88            memcpyw_end:
29706 7B88           5E                             pop si
29707 7B89           1F                             pop ds
29708 7B8A           5F                             pop di
29709 7B8B           07                             pop es
29710 7B8C           59                             pop cx
29711 7B8D           58                             pop ax
29712 7B8E           5D                           pop bp
29713                                           ! 4158 endasm
29714                                           !BCC_ENDASM
29715                                           ! 4159 }
29716 7B8F           C3                         ret
29717                                           ! 4160 static Bit8u
29718                                           ! 4161 read_byte(seg, offset)
29719                                           ! 4162   Bit16u seg;
29720                       00007B90            _read_byte:
29721                                           !BCC_EOS
29722                                           ! 4163   Bit16u offset;
29723                                           !BCC_EOS
29724                                           ! 4164 {
29725                                           ! 4165 #asm
29726                                           !BCC_ASM
29727                       00000002            _read_byte.seg	set	2
29728                       00000004            _read_byte.offset	set	4
29729 7B90           55                           push bp
29730 7B91           89E5                         mov bp, sp
29731 7B93           53                             push bx
29732 7B94           1E                             push ds
29733 7B95           8B46         04                mov ax, 4[bp] ; segment
29734 7B98           8ED8                           mov ds, ax
29735 7B9A           8B5E         06                mov bx, 6[bp] ; offset
29736 7B9D           8A07                           mov al, [bx]
29737                                               ;; al = return value (byte)
29738 7B9F           1F                             pop ds
29739 7BA0           5B                             pop bx
29740 7BA1           5D                           pop bp
29741                                           ! 4178 endasm
29742                                           !BCC_ENDASM
29743                                           ! 4179 }
29744 7BA2           C3                         ret
29745                                           ! 4180 static Bit16u
29746                                           ! 4181 read_word(seg, offset)
29747                                           ! 4182   Bit16u seg;
29748                       00007BA3            _read_word:
29749                                           !BCC_EOS
29750                                           ! 4183   Bit16u offset;
29751                                           !BCC_EOS
29752                                           ! 4184 {
29753                                           ! 4185 #asm
29754                                           !BCC_ASM
29755                       00000002            _read_word.seg	set	2
29756                       00000004            _read_word.offset	set	4
29757 7BA3           55                           push bp
29758 7BA4           89E5                         mov bp, sp
29759 7BA6           53                             push bx
29760 7BA7           1E                             push ds
29761 7BA8           8B46         04                mov ax, 4[bp] ; segment
29762 7BAB           8ED8                           mov ds, ax
29763 7BAD           8B5E         06                mov bx, 6[bp] ; offset
29764 7BB0           8B07                           mov ax, [bx]
29765                                               ;; ax = return value (word)
29766 7BB2           1F                             pop ds
29767 7BB3           5B                             pop bx
29768 7BB4           5D                           pop bp
29769                                           ! 4198 endasm
29770                                           !BCC_ENDASM
29771                                           ! 4199 }
29772 7BB5           C3                         ret
29773                                           ! 4200 static void
29774                                           ! 4201 write_byte(seg, offset, data)
29775                                           ! 4202   Bit16u seg;
29776                       00007BB6            _write_byte:
29777                                           !BCC_EOS
29778                                           ! 4203   Bit16u offset;
29779                                           !BCC_EOS
29780                                           ! 4204   Bit8u data;
29781                                           !BCC_EOS
29782                                           ! 4205 {
29783                                           ! 4206 #asm
29784                                           !BCC_ASM
29785                       00000002            _write_byte.seg	set	2
29786                       00000006            _write_byte.data	set	6
29787                       00000004            _write_byte.offset	set	4
29788 7BB6           55                           push bp
29789 7BB7           89E5                         mov bp, sp
29790 7BB9           50                             push ax
29791 7BBA           53                             push bx
29792 7BBB           1E                             push ds
29793 7BBC           8B46         04                mov ax, 4[bp] ; segment
29794 7BBF           8ED8                           mov ds, ax
29795 7BC1           8B5E         06                mov bx, 6[bp] ; offset
29796 7BC4           8A46         08                mov al, 8[bp] ; data byte
29797 7BC7           8807                           mov [bx], al ; write data byte
29798 7BC9           1F                             pop ds
29799 7BCA           5B                             pop bx
29800 7BCB           58                             pop ax
29801 7BCC           5D                           pop bp
29802                                           ! 4221 endasm
29803                                           !BCC_ENDASM
29804                                           ! 4222 }
29805 7BCD           C3                         ret
29806                                           ! 4223 static void
29807                                           ! 4224 write_word(seg, offset, data)
29808                                           ! 4225   Bit16u seg;
29809                       00007BCE            _write_word:
29810                                           !BCC_EOS
29811                                           ! 4226   Bit16u offset;
29812                                           !BCC_EOS
29813                                           ! 4227   Bit16u data;
29814                                           !BCC_EOS
29815                                           ! 4228 {
29816                                           ! 4229 #asm
29817                                           !BCC_ASM
29818                       00000002            _write_word.seg	set	2
29819                       00000006            _write_word.data	set	6
29820                       00000004            _write_word.offset	set	4
29821 7BCE           55                           push bp
29822 7BCF           89E5                         mov bp, sp
29823 7BD1           50                             push ax
29824 7BD2           53                             push bx
29825 7BD3           1E                             push ds
29826 7BD4           8B46         04                mov ax, 4[bp] ; segment
29827 7BD7           8ED8                           mov ds, ax
29828 7BD9           8B5E         06                mov bx, 6[bp] ; offset
29829 7BDC           8B46         08                mov ax, 8[bp] ; data word
29830 7BDF           8907                           mov [bx], ax ; write data word
29831 7BE1           1F                             pop ds
29832 7BE2           5B                             pop bx
29833 7BE3           58                             pop ax
29834 7BE4           5D                           pop bp
29835                                           ! 4244 endasm
29836                                           !BCC_ENDASM
29837                                           ! 4245 }
29838 7BE5           C3                         ret
29839                                           ! 4246  Bit8u
29840                                           ! 4247 inb(port)
29841                                           ! 4248   Bit16u port;
29842                                           export	_inb
29843                       00007BE6            _inb:
29844                                           !BCC_EOS
29845                                           ! 4249 {
29846                                           ! 4250 #asm
29847                                           !BCC_ASM
29848                       00000002            _inb.port	set	2
29849 7BE6           55                           push bp
29850 7BE7           89E5                         mov bp, sp
29851 7BE9           52                             push dx
29852 7BEA           8B56         04                mov dx, 4[bp]
29853 7BED           EC                             in al, dx
29854 7BEE           5A                             pop dx
29855 7BEF           5D                           pop bp
29856                                           ! 4258 endasm
29857                                           !BCC_ENDASM
29858                                           ! 4259 }
29859 7BF0           C3                         ret
29860                                           ! 4260   Bit16u
29861                                           ! 4261 inw(port)
29862                                           ! 4262   Bit16u port;
29863                                           export	_inw
29864                       00007BF1            _inw:
29865                                           !BCC_EOS
29866                                           ! 4263 {
29867                                           ! 4264 #asm
29868                                           !BCC_ASM
29869                       00000002            _inw.port	set	2
29870 7BF1           55                           push bp
29871 7BF2           89E5                         mov bp, sp
29872 7BF4           52                             push dx
29873 7BF5           8B56         04                mov dx, 4[bp]
29874 7BF8           ED                             in ax, dx
29875 7BF9           5A                             pop dx
29876 7BFA           5D                           pop bp
29877                                           ! 4272 endasm
29878                                           !BCC_ENDASM
29879                                           ! 4273 }
29880 7BFB           C3                         ret
29881                                           ! 4274   void
29882                                           ! 4275 outb(port, val)
29883                                           ! 4276   Bit16u port;
29884                                           export	_outb
29885                       00007BFC            _outb:
29886                                           !BCC_EOS
29887                                           ! 4277   Bit8u val;
29888                                           !BCC_EOS
29889                                           ! 4278 {
29890                                           ! 4279 #asm
29891                                           !BCC_ASM
29892                       00000004            _outb.val	set	4
29893                       00000002            _outb.port	set	2
29894 7BFC           55                           push bp
29895 7BFD           89E5                         mov bp, sp
29896 7BFF           50                             push ax
29897 7C00           52                             push dx
29898 7C01           8B56         04                mov dx, 4[bp]
29899 7C04           8A46         06                mov al, 6[bp]
29900 7C07           EE                             out dx, al
29901 7C08           5A                             pop dx
29902 7C09           58                             pop ax
29903 7C0A           5D                           pop bp
29904                                           ! 4290 endasm
29905                                           !BCC_ENDASM
29906                                           ! 4291 }
29907 7C0B           C3                         ret
29908                                           ! 4292   void
29909                                           ! 4293 outw(port, val)
29910                                           ! 4294   Bit16u port;
29911                                           export	_outw
29912                       00007C0C            _outw:
29913                                           !BCC_EOS
29914                                           ! 4295   Bit16u val;
29915                                           !BCC_EOS
29916                                           ! 4296 {
29917                                           ! 4297 #asm
29918                                           !BCC_ASM
29919                       00000004            _outw.val	set	4
29920                       00000002            _outw.port	set	2
29921 7C0C           55                           push bp
29922 7C0D           89E5                         mov bp, sp
29923 7C0F           50                             push ax
29924 7C10           52                             push dx
29925 7C11           8B56         04                mov dx, 4[bp]
29926 7C14           8B46         06                mov ax, 6[bp]
29927 7C17           EF                             out dx, ax
29928 7C18           5A                             pop dx
29929 7C19           58                             pop ax
29930 7C1A           5D                           pop bp
29931                                           ! 4308 endasm
29932                                           !BCC_ENDASM
29933                                           ! 4309 }
29934 7C1B           C3                         ret
29935                                           ! 4310 Bit16u get_SS()
29936                                           ! 4311 {
29937                                           export	_get_SS
29938                       00007C1C            _get_SS:
29939                                           ! 4312 #asm
29940                                           !BCC_ASM
29941 7C1C           8CD0                         mov ax, ss
29942                                           ! 4314 endasm
29943                                           !BCC_ENDASM
29944                                           ! 4315 }
29945 7C1E           C3                         ret
29946                                           ! 4316 void printf(s)
29947                                           ! 4317   Bit8u *s;
29948                                           export	_printf
29949                       00007C1F            _printf:
29950                                           !BCC_EOS
29951                                           ! 4318 {
29952                                           ! 4319   Bit8u c, format_char;
29953                                           !BCC_EOS
29954                                           ! 4320   Boolean in_format;
29955                                           !BCC_EOS
29956                                           ! 4321   unsigned format_width, i;
29957                                           !BCC_EOS
29958                                           ! 4322   Bit16u *arg_ptr;
29959                                           !BCC_EOS
29960                                           ! 4323   Bit16u arg_seg, arg, digit, nibble, shift_count;
29961                                           !BCC_EOS
29962                                           ! 4324   arg_ptr = &s;
29963 7C1F           55                         push	bp
29964 7C20           89E5                       mov	bp,sp
29965 7C22           83C4                   EC  add	sp,*-$14
29966                                           ! Debug: eq * * unsigned char s = S+$16+2 to * unsigned short arg_ptr = [S+$16-$C] (used reg = )
29967 7C25           8D5E         04            lea	bx,4[bp]
29968 7C28           895E         F6            mov	-$A[bp],bx
29969                                           !BCC_EOS
29970                                           ! 4325   arg_seg = get_SS();
29971                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
29972 7C2B           E8         FFEE            call	_get_SS
29973                                           ! Debug: eq unsigned short = ax+0 to unsigned short arg_seg = [S+$16-$E] (used reg = )
29974 7C2E           8946         F4            mov	-$C[bp],ax
29975                                           !BCC_EOS
29976                                           ! 4326   in_format = 0;
29977                                           ! Debug: eq int = const 0 to unsigned short in_format = [S+$16-6] (used reg = )
29978 7C31           31C0                       xor	ax,ax
29979 7C33           8946         FC            mov	-4[bp],ax
29980                                           !BCC_EOS
29981                                           ! 4327   format_width = 0;
29982                                           ! Debug: eq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
29983 7C36           31C0                       xor	ax,ax
29984 7C38           8946         FA            mov	-6[bp],ax
29985                                           !BCC_EOS
29986                                           ! 4328   while (c = read_byte(0xc000, s)) {
29987 7C3B           E9         0104            br 	.29F
29988                       00007C3E            .2A0:
29989                                           ! 4329     if ( c == '%' ) {
29990                                           ! Debug: logeq int = const $25 to unsigned char c = [S+$16-3] (used reg = )
29991 7C3E           8A46         FF            mov	al,-1[bp]
29992 7C41           3C                     25  cmp	al,*$25
29993 7C43           75           0E            jne 	.2A1
29994                       00007C45            .2A2:
29995                                           ! 4330       in_format = 1;
29996                                           ! Debug: eq int = const 1 to unsigned short in_format = [S+$16-6] (used reg = )
29997 7C45           B8                   0001  mov	ax,*1
29998 7C48           8946         FC            mov	-4[bp],ax
29999                                           !BCC_EOS
30000                                           ! 4331       format_width = 0;
30001                                           ! Debug: eq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
30002 7C4B           31C0                       xor	ax,ax
30003 7C4D           8946         FA            mov	-6[bp],ax
30004                                           !BCC_EOS
30005                                           ! 4332       }
30006                                           ! 4333     else if (in_format) {
30007 7C50           E9         00E8            br 	.2A3
30008                       00007C53            .2A1:
30009 7C53           8B46         FC            mov	ax,-4[bp]
30010 7C56           85C0                       test	ax,ax
30011 7C58         0F84         00CF            beq 	.2A4
30012                       00007C5C            .2A5:
30013                                           ! 4334       if ( (c>='0') && (c<='9') ) {
30014                                           ! Debug: ge int = const $30 to unsigned char c = [S+$16-3] (used reg = )
30015 7C5C           8A46         FF            mov	al,-1[bp]
30016 7C5F           3C                     30  cmp	al,*$30
30017 7C61           72           28            jb  	.2A6
30018                       00007C63            .2A8:
30019                                           ! Debug: le int = const $39 to unsigned char c = [S+$16-3] (used reg = )
30020 7C63           8A46         FF            mov	al,-1[bp]
30021 7C66           3C                     39  cmp	al,*$39
30022 7C68           77           21            ja  	.2A6
30023                       00007C6A            .2A7:
30024                                           ! 4335         format_width = (format_width * 10) + (c - '0');
30025                                           ! Debug: sub int = const $30 to unsigned char c = [S+$16-3] (used reg = )
30026 7C6A           8A46         FF            mov	al,-1[bp]
30027 7C6D           30E4                       xor	ah,ah
30028 7C6F           05                   FFD0  add	ax,*-$30
30029 7C72           50                         push	ax
30030                                           ! Debug: mul int = const $A to unsigned int format_width = [S+$18-8] (used reg = )
30031 7C73           8B46         FA            mov	ax,-6[bp]
30032 7C76           89C2                       mov	dx,ax
30033 7C78           D1E0                       shl	ax,*1
30034 7C7A           D1E0                       shl	ax,*1
30035 7C7C           01D0                       add	ax,dx
30036 7C7E           D1E0                       shl	ax,*1
30037                                           ! Debug: add unsigned int (temp) = [S+$18-$18] to unsigned int = ax+0 (used reg = )
30038 7C80           0346         EA            add	ax,-$16[bp]
30039 7C83           44                         inc	sp
30040 7C84           44                         inc	sp
30041                                           ! Debug: eq unsigned int = ax+0 to unsigned int format_width = [S+$16-8] (used reg = )
30042 7C85           8946         FA            mov	-6[bp],ax
30043                                           !BCC_EOS
30044                                           ! 4336         }
30045                                           ! 4337       else if (c == 'x') {
30046 7C88           E9         009E            br 	.2A9
30047                       00007C8B            .2A6:
30048                                           ! Debug: logeq int = const $78 to unsigned char c = [S+$16-3] (used reg = )
30049 7C8B           8A46         FF            mov	al,-1[bp]
30050 7C8E           3C                     78  cmp	al,*$78
30051 7C90         0F85         0095            bne 	.2AA
30052                       00007C94            .2AB:
30053                                           ! 4338         arg_ptr++;
30054                                           ! Debug: postinc * unsigned short arg_ptr = [S+$16-$C] (used reg = )
30055 7C94           8B5E         F6            mov	bx,-$A[bp]
30056 7C97           43                         inc	bx
30057 7C98           43                         inc	bx
30058 7C99           895E         F6            mov	-$A[bp],bx
30059                                           !BCC_EOS
30060                                           ! 4339         arg = read_word(arg_seg, arg_ptr);
30061                                           ! Debug: list * unsigned short arg_ptr = [S+$16-$C] (used reg = )
30062 7C9C           FF76         F6            push	-$A[bp]
30063                                           ! Debug: list unsigned short arg_seg = [S+$18-$E] (used reg = )
30064 7C9F           FF76         F4            push	-$C[bp]
30065                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
30066 7CA2           E8         FEFE            call	_read_word
30067 7CA5           83C4                   04  add	sp,*4
30068                                           ! Debug: eq unsigned short = ax+0 to unsigned short arg = [S+$16-$10] (used reg = )
30069 7CA8           8946         F2            mov	-$E[bp],ax
30070                                           !BCC_EOS
30071                                           ! 4340         if (format_width == 0)
30072                                           ! Debug: logeq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
30073 7CAB           8B46         FA            mov	ax,-6[bp]
30074 7CAE           85C0                       test	ax,ax
30075 7CB0           75           06            jne 	.2AC
30076                       00007CB2            .2AD:
30077                                           ! 4341           format_width = 4;
30078                                           ! Debug: eq int = const 4 to unsigned int format_width = [S+$16-8] (used reg = )
30079 7CB2           B8                   0004  mov	ax,*4
30080 7CB5           8946         FA            mov	-6[bp],ax
30081                                           !BCC_EOS
30082                                           ! 4342         i = 0;
30083                       00007CB8            .2AC:
30084                                           ! Debug: eq int = const 0 to unsigned int i = [S+$16-$A] (used reg = )
30085 7CB8           31C0                       xor	ax,ax
30086 7CBA           8946         F8            mov	-8[bp],ax
30087                                           !BCC_EOS
30088                                           ! 4343         digit = format_width - 1;
30089                                           ! Debug: sub int = const 1 to unsigned int format_width = [S+$16-8] (used reg = )
30090 7CBD           8B46         FA            mov	ax,-6[bp]
30091                                           ! Debug: eq unsigned int = ax-1 to unsigned short digit = [S+$16-$12] (used reg = )
30092 7CC0           48                         dec	ax
30093 7CC1           8946         F0            mov	-$10[bp],ax
30094                                           !BCC_EOS
30095                                           ! 4344         for (i=0; i<format_width; i++) {
30096                                           ! Debug: eq int = const 0 to unsigned int i = [S+$16-$A] (used reg = )
30097 7CC4           31C0                       xor	ax,ax
30098 7CC6           8946         F8            mov	-8[bp],ax
30099                                           !BCC_EOS
30100                                           !BCC_EOS
30101 7CC9           EB           51            jmp .2B0
30102                       00007CCB            .2B1:
30103                                           ! 4345           nibble = (arg >> (4 * digit)) & 0x000f;
30104                                           ! Debug: mul unsigned short digit = [S+$16-$12] to int = const 4 (used reg = )
30105                                           ! Debug: expression subtree swapping
30106 7CCB           8B46         F0            mov	ax,-$10[bp]
30107 7CCE           D1E0                       shl	ax,*1
30108 7CD0           D1E0                       shl	ax,*1
30109                                           ! Debug: sr unsigned int = ax+0 to unsigned short arg = [S+$16-$10] (used reg = )
30110 7CD2           89C3                       mov	bx,ax
30111 7CD4           8B46         F2            mov	ax,-$E[bp]
30112 7CD7           89D9                       mov	cx,bx
30113 7CD9           D3E8                       shr	ax,cl
30114                                           ! Debug: and int = const $F to unsigned int = ax+0 (used reg = )
30115 7CDB           24                     0F  and	al,*$F
30116                                           ! Debug: eq unsigned char = al+0 to unsigned short nibble = [S+$16-$14] (used reg = )
30117 7CDD           30E4                       xor	ah,ah
30118 7CDF           8946         EE            mov	-$12[bp],ax
30119                                           !BCC_EOS
30120                                           ! 4346           if (nibble <= 9)
30121                                           ! Debug: le int = const 9 to unsigned short nibble = [S+$16-$14] (used reg = )
30122 7CE2           8B46         EE            mov	ax,-$12[bp]
30123 7CE5           3D                   0009  cmp	ax,*9
30124 7CE8           77           13            ja  	.2B2
30125                       00007CEA            .2B3:
30126                                           ! 4347             outb(0xe9, nibble + '0');
30127                                           ! Debug: add int = const $30 to unsigned short nibble = [S+$16-$14] (used reg = )
30128 7CEA           8B46         EE            mov	ax,-$12[bp]
30129                                           ! Debug: list unsigned int = ax+$30 (used reg = )
30130 7CED           05                   0030  add	ax,*$30
30131 7CF0           50                         push	ax
30132                                           ! Debug: list int = const $E9 (used reg = )
30133 7CF1           B8                   00E9  mov	ax,#$E9
30134 7CF4           50                         push	ax
30135                                           ! Debug: func () void = outb+0 (used reg = )
30136 7CF5           E8         FF04            call	_outb
30137 7CF8           83C4                   04  add	sp,*4
30138                                           !BCC_EOS
30139                                           ! 4348           else
30140                                           ! 4349             outb(0xe9, (nibble - 10) + 'A');
30141 7CFB           EB           11            jmp .2B4
30142                       00007CFD            .2B2:
30143                                           ! Debug: sub int = const $A to unsigned short nibble = [S+$16-$14] (used reg = )
30144 7CFD           8B46         EE            mov	ax,-$12[bp]
30145                                           ! Debug: add int = const $41 to unsigned int = ax-$A (used reg = )
30146                                           ! Debug: list unsigned int = ax+$37 (used reg = )
30147 7D00           05                   0037  add	ax,*$37
30148 7D03           50                         push	ax
30149                                           ! Debug: list int = const $E9 (used reg = )
30150 7D04           B8                   00E9  mov	ax,#$E9
30151 7D07           50                         push	ax
30152                                           ! Debug: func () void = outb+0 (used reg = )
30153 7D08           E8         FEF1            call	_outb
30154 7D0B           83C4                   04  add	sp,*4
30155                                           !BCC_EOS
30156                                           ! 4350           digit--;
30157                       00007D0E            .2B4:
30158                                           ! Debug: postdec unsigned short digit = [S+$16-$12] (used reg = )
30159 7D0E           8B46         F0            mov	ax,-$10[bp]
30160 7D11           48                         dec	ax
30161 7D12           8946         F0            mov	-$10[bp],ax
30162                                           !BCC_EOS
30163                                           ! 4351           }
30164                                           ! 4352         in_format = 0;
30165                       00007D15            .2AF:
30166                                           ! Debug: postinc unsigned int i = [S+$16-$A] (used reg = )
30167 7D15           8B46         F8            mov	ax,-8[bp]
30168 7D18           40                         inc	ax
30169 7D19           8946         F8            mov	-8[bp],ax
30170                       00007D1C            .2B0:
30171                                           ! Debug: lt unsigned int format_width = [S+$16-8] to unsigned int i = [S+$16-$A] (used reg = )
30172 7D1C           8B46         F8            mov	ax,-8[bp]
30173 7D1F           3B46         FA            cmp	ax,-6[bp]
30174 7D22           72           A7            jb 	.2B1
30175                       00007D24            .2B5:
30176                       00007D24            .2AE:
30177                                           ! Debug: eq int = const 0 to unsigned short in_format = [S+$16-6] (used reg = )
30178 7D24           31C0                       xor	ax,ax
30179 7D26           8946         FC            mov	-4[bp],ax
30180                                           !BCC_EOS
30181                                           ! 4353         }
30182                                           ! 4354       }
30183                       00007D29            .2AA:
30184                       00007D29            .2A9:
30185                                           ! 4355     else {
30186 7D29           EB           10            jmp .2B6
30187                       00007D2B            .2A4:
30188                                           ! 4356       outb(0xe9, c);
30189                                           ! Debug: list unsigned char c = [S+$16-3] (used reg = )
30190 7D2B           8A46         FF            mov	al,-1[bp]
30191 7D2E           30E4                       xor	ah,ah
30192 7D30           50                         push	ax
30193                                           ! Debug: list int = const $E9 (used reg = )
30194 7D31           B8                   00E9  mov	ax,#$E9
30195 7D34           50                         push	ax
30196                                           ! Debug: func () void = outb+0 (used reg = )
30197 7D35           E8         FEC4            call	_outb
30198 7D38           83C4                   04  add	sp,*4
30199                                           !BCC_EOS
30200                                           ! 4357       }
30201                                           ! 4358     s ++;
30202                       00007D3B            .2B6:
30203                       00007D3B            .2A3:
30204                                           ! Debug: postinc * unsigned char s = [S+$16+2] (used reg = )
30205 7D3B           8B5E         04            mov	bx,4[bp]
30206 7D3E           43                         inc	bx
30207 7D3F           895E         04            mov	4[bp],bx
30208                                           !BCC_EOS
30209                                           ! 4359     }
30210                                           ! 4360 }
30211                       00007D42            .29F:
30212                                           ! Debug: list * unsigned char s = [S+$16+2] (used reg = )
30213 7D42           FF76         04            push	4[bp]
30214                                           ! Debug: list unsigned int = const $C000 (used reg = )
30215 7D45           B8                   C000  mov	ax,#$C000
30216 7D48           50                         push	ax
30217                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
30218 7D49           E8         FE44            call	_read_byte
30219 7D4C           83C4                   04  add	sp,*4
30220                                           ! Debug: eq unsigned char = al+0 to unsigned char c = [S+$16-3] (used reg = )
30221 7D4F           8846         FF            mov	-1[bp],al
30222 7D52           84C0                       test	al,al
30223 7D54         0F85         FEE6            bne 	.2A0
30224                       00007D58            .2B7:
30225                       00007D58            .29E:
30226 7D58           89EC                       mov	sp,bp
30227 7D5A           5D                         pop	bp
30228 7D5B           C3                         ret
30229                                           ! 4361 static ModeInfoListItem mode_info_list[]=
30230                                           ! Register BX used in function printf
30231                                           ! 4362 {
30232                                           
30233                       00007D5C            _mode_info_list:
30234                                           ! 4363 { 0x0100,
30235 7D5C                      0100            .word	$100
30236                                           ! 4364 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
30237 7D5E                      009B            .word	$9B
30238                                           ! 4365                           0x01 | 0x02 | 0x04,
30239 7D60                        07            .byte	7
30240                                           ! 4366                        
30241                                           ! 4366    0,
30242 7D61                        00            .byte	0
30243                                           ! 4367                           64,
30244 7D62                      0040            .word	$40
30245                                           ! 4368                    64,
30246 7D64                      0040            .word	$40
30247                                           ! 4369                        0xA000,
30248 7D66                      A000            .word	$A000
30249                                           ! 4370                        0x0000,
30250 7D68                      0000            .word	0
30251                                           ! 4371                       0,
30252 7D6A                      0000            .word	0
30253 7D6C                      0000            .word	0
30254                                           ! 4372                             640,
30255 7D6E                      0280            .word	$280
30256                                           ! 4373                        640,
30257 7D70                      0280            .word	$280
30258                                           ! 4374                        400,
30259 7D72                      0190            .word	$190
30260                                           ! 4375                      8,
30261 7D74                        08            .byte	8
30262                                           ! 4376                      16,
30263 7D75                        10            .byte	$10
30264                                           ! 4377                           1,
30265 7D76                        01            .byte	1
30266                                           ! 4378                         8,
30267 7D77                        08            .byte	8
30268                                           ! 4379                          4,
30269 7D78                        04            .byte	4
30270                                           ! 4380                        0x04,
30271 7D79                        04            .byte	4
30272                                           ! 4381                     0,
30273 7D7A                        00            .byte	0
30274                                           ! 4382                               64,
30275 7D7B                        40            .byte	$40
30276                                           ! 4383                          0,
30277 7D7C                        00            .byte	0
30278                                           ! 4384                        0,
30279 7D7D                        00            .byte	0
30280                                           ! 4385                             0,
30281 7D7E                        00            .byte	0
30282                                           ! 4386                          0,
30283 7D7F                        00            .byte	0
30284                                           ! 4387                               0,
30285 7D80                        00            .byte	0
30286                                           ! 4388                         0,
30287 7D81                        00            .byte	0
30288                                           ! 4389                              0,
30289 7D82                        00            .byte	0
30290                                           ! 4390                         0,
30291 7D83                        00            .byte	0
30292                                           ! 4391                              0,
30293 7D84                        00            .byte	0
30294                                           ! 4392                                0,
30295 7D85                        00            .byte	0
30296                                           ! 4393                        0xE0000000,
30297 7D86                      0000            .word	0
30298 7D88                      E000            .word	$E000
30299                                           ! 4394                               0,
30300 7D8A                      0000            .word	0
30301 7D8C                      0000            .word	0
30302                                           ! 4395                             0,
30303 7D8E                      0000            .word	0
30304                                           ! 4396                                640,
30305 7D90                      0280            .word	$280
30306                                           ! 4397                             0,
30307 7D92                        00            .byte	0
30308                                           ! 4398                             0,
30309 7D93                        00            .byte	0
30310                                           ! 4399                           0,
30311 7D94                        00            .byte	0
30312                                           ! 4400                                0,
30313 7D95                        00            .byte	0
30314                                           ! 4401                             0,
30315 7D96                        00            .byte	0
30316                                           ! 4402                                  0,
30317 7D97                        00            .byte	0
30318                                           ! 4403                            0,
30319 7D98                        00            .byte	0
30320                                           ! 4404                                 0,
30321 7D99                        00            .byte	0
30322                                           ! 4405                            0,
30323 7D9A                        00            .byte	0
30324                                           ! 4406                                 0,
30325 7D9B                        00            .byte	0
30326                                           ! 4407                          0,
30327 7D9C                      0000            .word	0
30328 7D9E                      0000            .word	0
30329                                           ! 4408 } },
30330                                           ! 4409 { 0x0101,
30331 7DA0                      0101            .word	$101
30332                                           ! 4410 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
30333 7DA2                      009B            .word	$9B
30334                                           ! 4411                           0x01 | 0x02 | 0x04,
30335 7DA4                        07            .byte	7
30336                                           ! 4412                           0,
30337 7DA5                        00            .byte	0
30338                                           ! 4413                           64,
30339 7DA6                      0040            .word	$40
30340                                           ! 4414                    64,
30341 7DA8                      0040            .word	$40
30342                                           ! 4415                        0xA000,
30343 7DAA                      A000            .word	$A000
30344                                           ! 4416                        0x0000,
30345 7DAC                      0000            .word	0
30346                                           ! 4417                       0,
30347 7DAE                      0000            .word	0
30348 7DB0                      0000            .word	0
30349                                           ! 4418                             640,
30350 7DB2                      0280            .word	$280
30351                                           ! 4419                        640,
30352 7DB4                      0280            .word	$280
30353                                           ! 4420                        480,
30354 7DB6                      01E0            .word	$1E0
30355                                           ! 4421                      8,
30356 7DB8                        08            .byte	8
30357                                           ! 4422                      16,
30358 7DB9                        10            .byte	$10
30359                                           ! 4423                           1,
30360 7DBA                        01            .byte	1
30361                                           ! 4424                         8,
30362 7DBB                        08            .byte	8
30363                                           ! 4425                          5,
30364 7DBC                        05            .byte	5
30365                                           ! 4426                        0x04,
30366 7DBD                        04            .byte	4
30367                                           ! 4427                     0,
30368 7DBE                        00            .byte	0
30369                                           ! 4428                               53,
30370 7DBF                        35            .byte	$35
30371                                           ! 4429                          0,
30372 7DC0                        00            .byte	0
30373                                           ! 4430                        0,
30374 7DC1                        00            .byte	0
30375                                           ! 4431                             0,
30376 7DC2                        00            .byte	0
30377                                           ! 4432                          0,
30378 7DC3                        00            .byte	0
30379                                           ! 4433                               0,
30380 7DC4                        00            .byte	0
30381                                           ! 4434                         0,
30382 7DC5                        00            .byte	0
30383                                           ! 4435                              0,
30384 7DC6                        00            .byte	0
30385                                           ! 4436                       
30386                                           ! 4436   0,
30387 7DC7                        00            .byte	0
30388                                           ! 4437                              0,
30389 7DC8                        00            .byte	0
30390                                           ! 4438                                0,
30391 7DC9                        00            .byte	0
30392                                           ! 4439                        0xE0000000,
30393 7DCA                      0000            .word	0
30394 7DCC                      E000            .word	$E000
30395                                           ! 4440                               0,
30396 7DCE                      0000            .word	0
30397 7DD0                      0000            .word	0
30398                                           ! 4441                             0,
30399 7DD2                      0000            .word	0
30400                                           ! 4442                                640,
30401 7DD4                      0280            .word	$280
30402                                           ! 4443                             0,
30403 7DD6                        00            .byte	0
30404                                           ! 4444                             0,
30405 7DD7                        00            .byte	0
30406                                           ! 4445                           0,
30407 7DD8                        00            .byte	0
30408                                           ! 4446                                0,
30409 7DD9                        00            .byte	0
30410                                           ! 4447                             0,
30411 7DDA                        00            .byte	0
30412                                           ! 4448                                  0,
30413 7DDB                        00            .byte	0
30414                                           ! 4449                            0,
30415 7DDC                        00            .byte	0
30416                                           ! 4450                                 0,
30417 7DDD                        00            .byte	0
30418                                           ! 4451                            0,
30419 7DDE                        00            .byte	0
30420                                           ! 4452                                 0,
30421 7DDF                        00            .byte	0
30422                                           ! 4453                          0,
30423 7DE0                      0000            .word	0
30424 7DE2                      0000            .word	0
30425                                           ! 4454 } },
30426                                           ! 4455 { 0x0102,
30427 7DE4                      0102            .word	$102
30428                                           ! 4456 { 0x0001 | 0x0002 | 0x0008 | 0x0004 | 0x0010,
30429 7DE6                      001F            .word	$1F
30430                                           ! 4457                           0x01 | 0x02 | 0x04,
30431 7DE8                        07            .byte	7
30432                                           ! 4458                           0,
30433 7DE9                        00            .byte	0
30434                                           ! 4459                           64,
30435 7DEA                      0040            .word	$40
30436                                           ! 4460                    64,
30437 7DEC                      0040            .word	$40
30438                                           ! 4461                        0xA000,
30439 7DEE                      A000            .word	$A000
30440                                           ! 4462                        0x0000,
30441 7DF0                      0000            .word	0
30442                                           ! 4463                       0,
30443 7DF2                      0000            .word	0
30444 7DF4                      0000            .word	0
30445                                           ! 4464                             100,
30446 7DF6                      0064            .word	$64
30447                                           ! 4465                        800,
30448 7DF8                      0320            .word	$320
30449                                           ! 4466                        600,
30450 7DFA                      0258            .word	$258
30451                                           ! 4467                      8,
30452 7DFC                        08            .byte	8
30453                                           ! 4468                      16,
30454 7DFD                        10            .byte	$10
30455                                           ! 4469                           4,
30456 7DFE                        04            .byte	4
30457                                           ! 4470                         4,
30458 7DFF                        04            .byte	4
30459                                           ! 4471                          1,
30460 7E00                        01            .byte	1
30461                                           ! 4472                        0x03,
30462 7E01                        03            .byte	3
30463                                           ! 4473                     0,
30464 7E02                        00            .byte	0
30465                                           ! 4474                               68,
30466 7E03                        44            .byte	$44
30467                                           ! 4475                          0,
30468 7E04                        00            .byte	0
30469                                           ! 4476                        0,
30470 7E05                        00            .byte	0
30471                                           ! 4477                             0,
30472 7E06                        00            .byte	0
30473                                           ! 4478                          0,
30474 7E07                        00            .byte	0
30475                                           ! 4479                               0,
30476 7E08                        00            .byte	0
30477                                           ! 4480                         0,
30478 7E09                        00            .byte	0
30479                                           ! 4481                              0,
30480 7E0A                        00            .byte	0
30481                                           ! 4482                         0,
30482 7E0B                        00            .byte	0
30483                                           ! 4483                              0,
30484 7E0C                        00            .byte	0
30485                                           ! 4484                                0,
30486 7E0D                        00            .byte	0
30487                                           ! 4485                        0,
30488 7E0E                      0000            .word	0
30489 7E10                      0000            .word	0
30490                                           ! 4486                               0,
30491 7E12                      0000            .word	0
30492 7E14                      0000            .word	0
30493                                           ! 4487                             0,
30494 7E16                      0000            .word	0
30495                                           ! 4488                                100,
30496 7E18                      0064            .word	$64
30497                                           ! 4489                             0,
30498 7E1A                        00            .byte	0
30499                                           ! 4490                             0,
30500 7E1B                        00            .byte	0
30501                                           ! 4491                           0,
30502 7E1C                        00            .byte	0
30503                                           ! 4492                                0,
30504 7E1D                        00            .byte	0
30505                                           ! 4493                             0,
30506 7E1E                        00            .byte	0
30507                                           ! 4494                                  0,
30508 7E1F                        00            .byte	0
30509                                           ! 4495                            0,
30510 7E20                        00            .byte	0
30511                                           ! 4496                                 0,
30512 7E21                        00            .byte	0
30513                                           ! 4497                            0,
30514 7E22                        00            .byte	0
30515                                           ! 4498                                 0,
30516 7E23                        00            .byte	0
30517                                           ! 4499                          0,
30518 7E24                      0000            .word	0
30519 7E26                      0000            .word	0
30520                                           ! 4500 } },
30521                                           ! 4501 { 0x0103,
30522 7E28                      0103            .word	$103
30523                                           ! 4502 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
30524 7E2A                      009B            .word	$9B
30525                                           ! 4503                           0x01 | 0x02 | 0x04,
30526 7E2C                        07            .byte	7
30527                                           ! 4504                           0
30528                                           ! 4504 ,
30529 7E2D                        00            .byte	0
30530                                           ! 4505                           64,
30531 7E2E                      0040            .word	$40
30532                                           ! 4506                    64,
30533 7E30                      0040            .word	$40
30534                                           ! 4507                        0xA000,
30535 7E32                      A000            .word	$A000
30536                                           ! 4508                        0x0000,
30537 7E34                      0000            .word	0
30538                                           ! 4509                       0,
30539 7E36                      0000            .word	0
30540 7E38                      0000            .word	0
30541                                           ! 4510                             800,
30542 7E3A                      0320            .word	$320
30543                                           ! 4511                        800,
30544 7E3C                      0320            .word	$320
30545                                           ! 4512                        600,
30546 7E3E                      0258            .word	$258
30547                                           ! 4513                      8,
30548 7E40                        08            .byte	8
30549                                           ! 4514                      16,
30550 7E41                        10            .byte	$10
30551                                           ! 4515                           1,
30552 7E42                        01            .byte	1
30553                                           ! 4516                         8,
30554 7E43                        08            .byte	8
30555                                           ! 4517                          8,
30556 7E44                        08            .byte	8
30557                                           ! 4518                        0x04,
30558 7E45                        04            .byte	4
30559                                           ! 4519                     0,
30560 7E46                        00            .byte	0
30561                                           ! 4520                               33,
30562 7E47                        21            .byte	$21
30563                                           ! 4521                          0,
30564 7E48                        00            .byte	0
30565                                           ! 4522                        0,
30566 7E49                        00            .byte	0
30567                                           ! 4523                             0,
30568 7E4A                        00            .byte	0
30569                                           ! 4524                          0,
30570 7E4B                        00            .byte	0
30571                                           ! 4525                               0,
30572 7E4C                        00            .byte	0
30573                                           ! 4526                         0,
30574 7E4D                        00            .byte	0
30575                                           ! 4527                              0,
30576 7E4E                        00            .byte	0
30577                                           ! 4528                         0,
30578 7E4F                        00            .byte	0
30579                                           ! 4529                              0,
30580 7E50                        00            .byte	0
30581                                           ! 4530                                0,
30582 7E51                        00            .byte	0
30583                                           ! 4531                        0xE0000000,
30584 7E52                      0000            .word	0
30585 7E54                      E000            .word	$E000
30586                                           ! 4532                               0,
30587 7E56                      0000            .word	0
30588 7E58                      0000            .word	0
30589                                           ! 4533                             0,
30590 7E5A                      0000            .word	0
30591                                           ! 4534                                800,
30592 7E5C                      0320            .word	$320
30593                                           ! 4535                             0,
30594 7E5E                        00            .byte	0
30595                                           ! 4536                             0,
30596 7E5F                        00            .byte	0
30597                                           ! 4537                           0,
30598 7E60                        00            .byte	0
30599                                           ! 4538                                0,
30600 7E61                        00            .byte	0
30601                                           ! 4539                             0,
30602 7E62                        00            .byte	0
30603                                           ! 4540                                  0,
30604 7E63                        00            .byte	0
30605                                           ! 4541                            0,
30606 7E64                        00            .byte	0
30607                                           ! 4542                                 0,
30608 7E65                        00            .byte	0
30609                                           ! 4543                            0,
30610 7E66                        00            .byte	0
30611                                           ! 4544                                 0,
30612 7E67                        00            .byte	0
30613                                           ! 4545                          0,
30614 7E68                      0000            .word	0
30615 7E6A                      0000            .word	0
30616                                           ! 4546 } },
30617                                           ! 4547 { 0x0104,
30618 7E6C                      0104            .word	$104
30619                                           ! 4548 { 0x0001 | 0x0002 | 0x0008 | 0x0004 | 0x0010,
30620 7E6E                      001F            .word	$1F
30621                                           ! 4549                           0x01 | 0x02 | 0x04,
30622 7E70                        07            .byte	7
30623                                           ! 4550                           0,
30624 7E71                        00            .byte	0
30625                                           ! 4551                           64,
30626 7E72                      0040            .word	$40
30627                                           ! 4552                    64,
30628 7E74                      0040            .word	$40
30629                                           ! 4553                        0xA000,
30630 7E76                      A000            .word	$A000
30631                                           ! 4554                        0x0000,
30632 7E78                      0000            .word	0
30633                                           ! 4555                       0,
30634 7E7A                      0000            .word	0
30635 7E7C                      0000            .word	0
30636                                           ! 4556                             128,
30637 7E7E                      0080            .word	$80
30638                                           ! 4557                        1024,
30639 7E80                      0400            .word	$400
30640                                           ! 4558                        768,
30641 7E82                      0300            .word	$300
30642                                           ! 4559                      8,
30643 7E84                        08            .byte	8
30644                                           ! 4560                      16,
30645 7E85                        10            .byte	$10
30646                                           ! 4561                           4,
30647 7E86                        04            .byte	4
30648                                           ! 4562                         4,
30649 7E87                        04            .byte	4
30650                                           ! 4563                          2,
30651 7E88                        02            .byte	2
30652                                           ! 4564                        0x03,
30653 7E89                        03            .byte	3
30654                                           ! 4565                     0,
30655 7E8A                        00            .byte	0
30656                                           ! 4566                               41,
30657 7E8B                        29            .byte	$29
30658                                           ! 4567                          0,
30659 7E8C                        00            .byte	0
30660                                           ! 4568                        0,
30661 7E8D                        00            .byte	0
30662                                           ! 4569                             0,
30663 7E8E                        00            .byte	0
30664                                           ! 4570                          0,
30665 7E8F                        00            .byte	0
30666                                           ! 4571                               0,
30667 7E90                        00            .byte	0
30668                                           ! 4572                         0,
30669 7E91                        00            .byte	0
30670                                           ! 4573                              0,
30671 7E92                        00            .byte	0
30672                                           ! 4574                         0
30673                                           ! 4574 ,
30674 7E93                        00            .byte	0
30675                                           ! 4575                              0,
30676 7E94                        00            .byte	0
30677                                           ! 4576                                0,
30678 7E95                        00            .byte	0
30679                                           ! 4577                        0,
30680 7E96                      0000            .word	0
30681 7E98                      0000            .word	0
30682                                           ! 4578                               0,
30683 7E9A                      0000            .word	0
30684 7E9C                      0000            .word	0
30685                                           ! 4579                             0,
30686 7E9E                      0000            .word	0
30687                                           ! 4580                                128,
30688 7EA0                      0080            .word	$80
30689                                           ! 4581                             0,
30690 7EA2                        00            .byte	0
30691                                           ! 4582                             0,
30692 7EA3                        00            .byte	0
30693                                           ! 4583                           0,
30694 7EA4                        00            .byte	0
30695                                           ! 4584                                0,
30696 7EA5                        00            .byte	0
30697                                           ! 4585                             0,
30698 7EA6                        00            .byte	0
30699                                           ! 4586                                  0,
30700 7EA7                        00            .byte	0
30701                                           ! 4587                            0,
30702 7EA8                        00            .byte	0
30703                                           ! 4588                                 0,
30704 7EA9                        00            .byte	0
30705                                           ! 4589                            0,
30706 7EAA                        00            .byte	0
30707                                           ! 4590                                 0,
30708 7EAB                        00            .byte	0
30709                                           ! 4591                          0,
30710 7EAC                      0000            .word	0
30711 7EAE                      0000            .word	0
30712                                           ! 4592 } },
30713                                           ! 4593 { 0x0105,
30714 7EB0                      0105            .word	$105
30715                                           ! 4594 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
30716 7EB2                      009B            .word	$9B
30717                                           ! 4595                           0x01 | 0x02 | 0x04,
30718 7EB4                        07            .byte	7
30719                                           ! 4596                           0,
30720 7EB5                        00            .byte	0
30721                                           ! 4597                           64,
30722 7EB6                      0040            .word	$40
30723                                           ! 4598                    64,
30724 7EB8                      0040            .word	$40
30725                                           ! 4599                        0xA000,
30726 7EBA                      A000            .word	$A000
30727                                           ! 4600                        0x0000,
30728 7EBC                      0000            .word	0
30729                                           ! 4601                       0,
30730 7EBE                      0000            .word	0
30731 7EC0                      0000            .word	0
30732                                           ! 4602                             1024,
30733 7EC2                      0400            .word	$400
30734                                           ! 4603                        1024,
30735 7EC4                      0400            .word	$400
30736                                           ! 4604                        768,
30737 7EC6                      0300            .word	$300
30738                                           ! 4605                      8,
30739 7EC8                        08            .byte	8
30740                                           ! 4606                      16,
30741 7EC9                        10            .byte	$10
30742                                           ! 4607                           1,
30743 7ECA                        01            .byte	1
30744                                           ! 4608                         8,
30745 7ECB                        08            .byte	8
30746                                           ! 4609                          12,
30747 7ECC                        0C            .byte	$C
30748                                           ! 4610                        0x04,
30749 7ECD                        04            .byte	4
30750                                           ! 4611                     0,
30751 7ECE                        00            .byte	0
30752                                           ! 4612                               20,
30753 7ECF                        14            .byte	$14
30754                                           ! 4613                          0,
30755 7ED0                        00            .byte	0
30756                                           ! 4614                        0,
30757 7ED1                        00            .byte	0
30758                                           ! 4615                             0,
30759 7ED2                        00            .byte	0
30760                                           ! 4616                          0,
30761 7ED3                        00            .byte	0
30762                                           ! 4617                               0,
30763 7ED4                        00            .byte	0
30764                                           ! 4618                         0,
30765 7ED5                        00            .byte	0
30766                                           ! 4619                              0,
30767 7ED6                        00            .byte	0
30768                                           ! 4620                         0,
30769 7ED7                        00            .byte	0
30770                                           ! 4621                              0,
30771 7ED8                        00            .byte	0
30772                                           ! 4622                                0,
30773 7ED9                        00            .byte	0
30774                                           ! 4623                        0xE0000000,
30775 7EDA                      0000            .word	0
30776 7EDC                      E000            .word	$E000
30777                                           ! 4624                               0,
30778 7EDE                      0000            .word	0
30779 7EE0                      0000            .word	0
30780                                           ! 4625                             0,
30781 7EE2                      0000            .word	0
30782                                           ! 4626                                1024,
30783 7EE4                      0400            .word	$400
30784                                           ! 4627                             0,
30785 7EE6                        00            .byte	0
30786                                           ! 4628                             0,
30787 7EE7                        00            .byte	0
30788                                           ! 4629                           0,
30789 7EE8                        00            .byte	0
30790                                           ! 4630                                0,
30791 7EE9                        00            .byte	0
30792                                           ! 4631                             0,
30793 7EEA                        00            .byte	0
30794                                           ! 4632                                  0,
30795 7EEB                        00            .byte	0
30796                                           ! 4633                            0,
30797 7EEC                        00            .byte	0
30798                                           ! 4634                                 0,
30799 7EED                        00            .byte	0
30800                                           ! 4635                            0,
30801 7EEE                        00            .byte	0
30802                                           ! 4636                                 0,
30803 7EEF                        00            .byte	0
30804                                           ! 4637                          0,
30805 7EF0                      0000            .word	0
30806 7EF2                      0000            .word	0
30807                                           ! 4638 } },
30808                                           ! 4639 { 0x0106,
30809 7EF4                      0106            .word	$106
30810                                           ! 4640 { 0x0001 | 0x0002 | 0x0008 | 0x0004 | 0x0010,
30811 7EF6                      001F            .word	$1F
30812                                           ! 4641                           0x01 | 0x02 | 0x04,
30813 7EF8                        07            .byte	7
30814                                           ! 4642                           
30815                                           ! 4642 0,
30816 7EF9                        00            .byte	0
30817                                           ! 4643                           64,
30818 7EFA                      0040            .word	$40
30819                                           ! 4644                    64,
30820 7EFC                      0040            .word	$40
30821                                           ! 4645                        0xA000,
30822 7EFE                      A000            .word	$A000
30823                                           ! 4646                        0x0000,
30824 7F00                      0000            .word	0
30825                                           ! 4647                       0,
30826 7F02                      0000            .word	0
30827 7F04                      0000            .word	0
30828                                           ! 4648                             160,
30829 7F06                      00A0            .word	$A0
30830                                           ! 4649                        1280,
30831 7F08                      0500            .word	$500
30832                                           ! 4650                        1024,
30833 7F0A                      0400            .word	$400
30834                                           ! 4651                      8,
30835 7F0C                        08            .byte	8
30836                                           ! 4652                      16,
30837 7F0D                        10            .byte	$10
30838                                           ! 4653                           4,
30839 7F0E                        04            .byte	4
30840                                           ! 4654                         4,
30841 7F0F                        04            .byte	4
30842                                           ! 4655                          3,
30843 7F10                        03            .byte	3
30844                                           ! 4656                        0x03,
30845 7F11                        03            .byte	3
30846                                           ! 4657                     0,
30847 7F12                        00            .byte	0
30848                                           ! 4658                               24,
30849 7F13                        18            .byte	$18
30850                                           ! 4659                          0,
30851 7F14                        00            .byte	0
30852                                           ! 4660                        0,
30853 7F15                        00            .byte	0
30854                                           ! 4661                             0,
30855 7F16                        00            .byte	0
30856                                           ! 4662                          0,
30857 7F17                        00            .byte	0
30858                                           ! 4663                               0,
30859 7F18                        00            .byte	0
30860                                           ! 4664                         0,
30861 7F19                        00            .byte	0
30862                                           ! 4665                              0,
30863 7F1A                        00            .byte	0
30864                                           ! 4666                         0,
30865 7F1B                        00            .byte	0
30866                                           ! 4667                              0,
30867 7F1C                        00            .byte	0
30868                                           ! 4668                                0,
30869 7F1D                        00            .byte	0
30870                                           ! 4669                        0,
30871 7F1E                      0000            .word	0
30872 7F20                      0000            .word	0
30873                                           ! 4670                               0,
30874 7F22                      0000            .word	0
30875 7F24                      0000            .word	0
30876                                           ! 4671                             0,
30877 7F26                      0000            .word	0
30878                                           ! 4672                                160,
30879 7F28                      00A0            .word	$A0
30880                                           ! 4673                             0,
30881 7F2A                        00            .byte	0
30882                                           ! 4674                             0,
30883 7F2B                        00            .byte	0
30884                                           ! 4675                           0,
30885 7F2C                        00            .byte	0
30886                                           ! 4676                                0,
30887 7F2D                        00            .byte	0
30888                                           ! 4677                             0,
30889 7F2E                        00            .byte	0
30890                                           ! 4678                                  0,
30891 7F2F                        00            .byte	0
30892                                           ! 4679                            0,
30893 7F30                        00            .byte	0
30894                                           ! 4680                                 0,
30895 7F31                        00            .byte	0
30896                                           ! 4681                            0,
30897 7F32                        00            .byte	0
30898                                           ! 4682                                 0,
30899 7F33                        00            .byte	0
30900                                           ! 4683                          0,
30901 7F34                      0000            .word	0
30902 7F36                      0000            .word	0
30903                                           ! 4684 } },
30904                                           ! 4685 { 0x0107,
30905 7F38                      0107            .word	$107
30906                                           ! 4686 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
30907 7F3A                      009B            .word	$9B
30908                                           ! 4687                           0x01 | 0x02 | 0x04,
30909 7F3C                        07            .byte	7
30910                                           ! 4688                           0,
30911 7F3D                        00            .byte	0
30912                                           ! 4689                           64,
30913 7F3E                      0040            .word	$40
30914                                           ! 4690                    64,
30915 7F40                      0040            .word	$40
30916                                           ! 4691                        0xA000,
30917 7F42                      A000            .word	$A000
30918                                           ! 4692                        0x0000,
30919 7F44                      0000            .word	0
30920                                           ! 4693                       0,
30921 7F46                      0000            .word	0
30922 7F48                      0000            .word	0
30923                                           ! 4694                             1280,
30924 7F4A                      0500            .word	$500
30925                                           ! 4695                        1280,
30926 7F4C                      0500            .word	$500
30927                                           ! 4696                        1024,
30928 7F4E                      0400            .word	$400
30929                                           ! 4697                      8,
30930 7F50                        08            .byte	8
30931                                           ! 4698                      16,
30932 7F51                        10            .byte	$10
30933                                           ! 4699                           1,
30934 7F52                        01            .byte	1
30935                                           ! 4700                         8,
30936 7F53                        08            .byte	8
30937                                           ! 4701                          20,
30938 7F54                        14            .byte	$14
30939                                           ! 4702                        0x04,
30940 7F55                        04            .byte	4
30941                                           ! 4703                     0,
30942 7F56                        00            .byte	0
30943                                           ! 4704                               11,
30944 7F57                        0B            .byte	$B
30945                                           ! 4705                          0,
30946 7F58                        00            .byte	0
30947                                           ! 4706                        0,
30948 7F59                        00            .byte	0
30949                                           ! 4707                             0,
30950 7F5A                        00            .byte	0
30951                                           ! 4708                          0,
30952 7F5B                        00            .byte	0
30953                                           ! 4709                               0,
30954 7F5C                        00            .byte	0
30955                                           ! 4710                         0,
30956 7F5D                        00            .byte	0
30957                                           ! 4711                              0,
30958 7F5E                        00            .byte	0
30959                                           ! 4712                         0,
30960 7F5F                        00            .byte	0
30961                                           ! 4713  
30962                                           ! 4713                             0,
30963 7F60                        00            .byte	0
30964                                           ! 4714                                0,
30965 7F61                        00            .byte	0
30966                                           ! 4715                        0xE0000000,
30967 7F62                      0000            .word	0
30968 7F64                      E000            .word	$E000
30969                                           ! 4716                               0,
30970 7F66                      0000            .word	0
30971 7F68                      0000            .word	0
30972                                           ! 4717                             0,
30973 7F6A                      0000            .word	0
30974                                           ! 4718                                1280,
30975 7F6C                      0500            .word	$500
30976                                           ! 4719                             0,
30977 7F6E                        00            .byte	0
30978                                           ! 4720                             0,
30979 7F6F                        00            .byte	0
30980                                           ! 4721                           0,
30981 7F70                        00            .byte	0
30982                                           ! 4722                                0,
30983 7F71                        00            .byte	0
30984                                           ! 4723                             0,
30985 7F72                        00            .byte	0
30986                                           ! 4724                                  0,
30987 7F73                        00            .byte	0
30988                                           ! 4725                            0,
30989 7F74                        00            .byte	0
30990                                           ! 4726                                 0,
30991 7F75                        00            .byte	0
30992                                           ! 4727                            0,
30993 7F76                        00            .byte	0
30994                                           ! 4728                                 0,
30995 7F77                        00            .byte	0
30996                                           ! 4729                          0,
30997 7F78                      0000            .word	0
30998 7F7A                      0000            .word	0
30999                                           ! 4730 } },
31000                                           ! 4731 { 0x010d,
31001 7F7C                      010D            .word	$10D
31002                                           ! 4732 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31003 7F7E                      009B            .word	$9B
31004                                           ! 4733                           0x01 | 0x02 | 0x04,
31005 7F80                        07            .byte	7
31006                                           ! 4734                           0,
31007 7F81                        00            .byte	0
31008                                           ! 4735                           64,
31009 7F82                      0040            .word	$40
31010                                           ! 4736                    64,
31011 7F84                      0040            .word	$40
31012                                           ! 4737                        0xA000,
31013 7F86                      A000            .word	$A000
31014                                           ! 4738                        0x0000,
31015 7F88                      0000            .word	0
31016                                           ! 4739                       0,
31017 7F8A                      0000            .word	0
31018 7F8C                      0000            .word	0
31019                                           ! 4740                             640,
31020 7F8E                      0280            .word	$280
31021                                           ! 4741                        320,
31022 7F90                      0140            .word	$140
31023                                           ! 4742                        200,
31024 7F92                      00C8            .word	$C8
31025                                           ! 4743                      8,
31026 7F94                        08            .byte	8
31027                                           ! 4744                      16,
31028 7F95                        10            .byte	$10
31029                                           ! 4745                           1,
31030 7F96                        01            .byte	1
31031                                           ! 4746                         15,
31032 7F97                        0F            .byte	$F
31033                                           ! 4747                          2,
31034 7F98                        02            .byte	2
31035                                           ! 4748                        0x06,
31036 7F99                        06            .byte	6
31037                                           ! 4749                     0,
31038 7F9A                        00            .byte	0
31039                                           ! 4750                               130,
31040 7F9B                        82            .byte	$82
31041                                           ! 4751                          0,
31042 7F9C                        00            .byte	0
31043                                           ! 4752                        5,
31044 7F9D                        05            .byte	5
31045                                           ! 4753                             10,
31046 7F9E                        0A            .byte	$A
31047                                           ! 4754                          5,
31048 7F9F                        05            .byte	5
31049                                           ! 4755                               5,
31050 7FA0                        05            .byte	5
31051                                           ! 4756                         5,
31052 7FA1                        05            .byte	5
31053                                           ! 4757                              0,
31054 7FA2                        00            .byte	0
31055                                           ! 4758                         1,
31056 7FA3                        01            .byte	1
31057                                           ! 4759                              15,
31058 7FA4                        0F            .byte	$F
31059                                           ! 4760                                0,
31060 7FA5                        00            .byte	0
31061                                           ! 4761                        0xE0000000,
31062 7FA6                      0000            .word	0
31063 7FA8                      E000            .word	$E000
31064                                           ! 4762                               0,
31065 7FAA                      0000            .word	0
31066 7FAC                      0000            .word	0
31067                                           ! 4763                             0,
31068 7FAE                      0000            .word	0
31069                                           ! 4764                                640,
31070 7FB0                      0280            .word	$280
31071                                           ! 4765                             0,
31072 7FB2                        00            .byte	0
31073                                           ! 4766                             0,
31074 7FB3                        00            .byte	0
31075                                           ! 4767                           5,
31076 7FB4                        05            .byte	5
31077                                           ! 4768                                10,
31078 7FB5                        0A            .byte	$A
31079                                           ! 4769                             5,
31080 7FB6                        05            .byte	5
31081                                           ! 4770                                  5,
31082 7FB7                        05            .byte	5
31083                                           ! 4771                            5,
31084 7FB8                        05            .byte	5
31085                                           ! 4772                                 0,
31086 7FB9                        00            .byte	0
31087                                           ! 4773                            1,
31088 7FBA                        01            .byte	1
31089                                           ! 4774                                 15,
31090 7FBB                        0F            .byte	$F
31091                                           ! 4775                          0,
31092 7FBC                      0000            .word	0
31093 7FBE                      0000            .word	0
31094                                           ! 4776 } },
31095                                           ! 4777 { 0x010e,
31096 7FC0                      010E            .word	$10E
31097                                           ! 4778 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31098 7FC2                      009B            .word	$9B
31099                                           ! 4779                           0x01 | 0x02 | 0x04,
31100 7FC4                        07            .byte	7
31101                                           ! 4780                  
31102                                           ! 4780          0,
31103 7FC5                        00            .byte	0
31104                                           ! 4781                           64,
31105 7FC6                      0040            .word	$40
31106                                           ! 4782                    64,
31107 7FC8                      0040            .word	$40
31108                                           ! 4783                        0xA000,
31109 7FCA                      A000            .word	$A000
31110                                           ! 4784                        0x0000,
31111 7FCC                      0000            .word	0
31112                                           ! 4785                       0,
31113 7FCE                      0000            .word	0
31114 7FD0                      0000            .word	0
31115                                           ! 4786                             640,
31116 7FD2                      0280            .word	$280
31117                                           ! 4787                        320,
31118 7FD4                      0140            .word	$140
31119                                           ! 4788                        200,
31120 7FD6                      00C8            .word	$C8
31121                                           ! 4789                      8,
31122 7FD8                        08            .byte	8
31123                                           ! 4790                      16,
31124 7FD9                        10            .byte	$10
31125                                           ! 4791                           1,
31126 7FDA                        01            .byte	1
31127                                           ! 4792                         16,
31128 7FDB                        10            .byte	$10
31129                                           ! 4793                          2,
31130 7FDC                        02            .byte	2
31131                                           ! 4794                        0x06,
31132 7FDD                        06            .byte	6
31133                                           ! 4795                     0,
31134 7FDE                        00            .byte	0
31135                                           ! 4796                               130,
31136 7FDF                        82            .byte	$82
31137                                           ! 4797                          0,
31138 7FE0                        00            .byte	0
31139                                           ! 4798                        5,
31140 7FE1                        05            .byte	5
31141                                           ! 4799                             11,
31142 7FE2                        0B            .byte	$B
31143                                           ! 4800                          6,
31144 7FE3                        06            .byte	6
31145                                           ! 4801                               5,
31146 7FE4                        05            .byte	5
31147                                           ! 4802                         5,
31148 7FE5                        05            .byte	5
31149                                           ! 4803                              0,
31150 7FE6                        00            .byte	0
31151                                           ! 4804                         0,
31152 7FE7                        00            .byte	0
31153                                           ! 4805                              0,
31154 7FE8                        00            .byte	0
31155                                           ! 4806                                0,
31156 7FE9                        00            .byte	0
31157                                           ! 4807                        0xE0000000,
31158 7FEA                      0000            .word	0
31159 7FEC                      E000            .word	$E000
31160                                           ! 4808                               0,
31161 7FEE                      0000            .word	0
31162 7FF0                      0000            .word	0
31163                                           ! 4809                             0,
31164 7FF2                      0000            .word	0
31165                                           ! 4810                                640,
31166 7FF4                      0280            .word	$280
31167                                           ! 4811                             0,
31168 7FF6                        00            .byte	0
31169                                           ! 4812                             0,
31170 7FF7                        00            .byte	0
31171                                           ! 4813                           5,
31172 7FF8                        05            .byte	5
31173                                           ! 4814                                11,
31174 7FF9                        0B            .byte	$B
31175                                           ! 4815                             6,
31176 7FFA                        06            .byte	6
31177                                           ! 4816                                  5,
31178 7FFB                        05            .byte	5
31179                                           ! 4817                            5,
31180 7FFC                        05            .byte	5
31181                                           ! 4818                                 0,
31182 7FFD                        00            .byte	0
31183                                           ! 4819                            0,
31184 7FFE                        00            .byte	0
31185                                           ! 4820                                 0,
31186 7FFF                        00            .byte	0
31187                                           ! 4821                          0,
31188 8000                      0000            .word	0
31189 8002                      0000            .word	0
31190                                           ! 4822 } },
31191                                           ! 4823 { 0x010f,
31192 8004                      010F            .word	$10F
31193                                           ! 4824 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31194 8006                      009B            .word	$9B
31195                                           ! 4825                           0x01 | 0x02 | 0x04,
31196 8008                        07            .byte	7
31197                                           ! 4826                           0,
31198 8009                        00            .byte	0
31199                                           ! 4827                           64,
31200 800A                      0040            .word	$40
31201                                           ! 4828                    64,
31202 800C                      0040            .word	$40
31203                                           ! 4829                        0xA000,
31204 800E                      A000            .word	$A000
31205                                           ! 4830                        0x0000,
31206 8010                      0000            .word	0
31207                                           ! 4831                       0,
31208 8012                      0000            .word	0
31209 8014                      0000            .word	0
31210                                           ! 4832                             960,
31211 8016                      03C0            .word	$3C0
31212                                           ! 4833                        320,
31213 8018                      0140            .word	$140
31214                                           ! 4834                        200,
31215 801A                      00C8            .word	$C8
31216                                           ! 4835                      8,
31217 801C                        08            .byte	8
31218                                           ! 4836                      16,
31219 801D                        10            .byte	$10
31220                                           ! 4837                           1,
31221 801E                        01            .byte	1
31222                                           ! 4838                         24,
31223 801F                        18            .byte	$18
31224                                           ! 4839                          3,
31225 8020                        03            .byte	3
31226                                           ! 4840                        0x06,
31227 8021                        06            .byte	6
31228                                           ! 4841                     0,
31229 8022                        00            .byte	0
31230                                           ! 4842                               86,
31231 8023                        56            .byte	$56
31232                                           ! 4843                          0,
31233 8024                        00            .byte	0
31234                                           ! 4844                        8,
31235 8025                        08            .byte	8
31236                                           ! 4845                             16,
31237 8026                        10            .byte	$10
31238                                           ! 4846                          8,
31239 8027                        08            .byte	8
31240                                           ! 4847                               8,
31241 8028                        08            .byte	8
31242                                           ! 4848                         8,
31243 8029                        08            .byte	8
31244                                           ! 4849                              0,
31245 802A                        00            .byte	0
31246                                           ! 4850           
31247                                           ! 4850               0,
31248 802B                        00            .byte	0
31249                                           ! 4851                              0,
31250 802C                        00            .byte	0
31251                                           ! 4852                                0,
31252 802D                        00            .byte	0
31253                                           ! 4853                        0xE0000000,
31254 802E                      0000            .word	0
31255 8030                      E000            .word	$E000
31256                                           ! 4854                               0,
31257 8032                      0000            .word	0
31258 8034                      0000            .word	0
31259                                           ! 4855                             0,
31260 8036                      0000            .word	0
31261                                           ! 4856                                960,
31262 8038                      03C0            .word	$3C0
31263                                           ! 4857                             0,
31264 803A                        00            .byte	0
31265                                           ! 4858                             0,
31266 803B                        00            .byte	0
31267                                           ! 4859                           8,
31268 803C                        08            .byte	8
31269                                           ! 4860                                16,
31270 803D                        10            .byte	$10
31271                                           ! 4861                             8,
31272 803E                        08            .byte	8
31273                                           ! 4862                                  8,
31274 803F                        08            .byte	8
31275                                           ! 4863                            8,
31276 8040                        08            .byte	8
31277                                           ! 4864                                 0,
31278 8041                        00            .byte	0
31279                                           ! 4865                            0,
31280 8042                        00            .byte	0
31281                                           ! 4866                                 0,
31282 8043                        00            .byte	0
31283                                           ! 4867                          0,
31284 8044                      0000            .word	0
31285 8046                      0000            .word	0
31286                                           ! 4868 } },
31287                                           ! 4869 { 0x0110,
31288 8048                      0110            .word	$110
31289                                           ! 4870 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31290 804A                      009B            .word	$9B
31291                                           ! 4871                           0x01 | 0x02 | 0x04,
31292 804C                        07            .byte	7
31293                                           ! 4872                           0,
31294 804D                        00            .byte	0
31295                                           ! 4873                           64,
31296 804E                      0040            .word	$40
31297                                           ! 4874                    64,
31298 8050                      0040            .word	$40
31299                                           ! 4875                        0xA000,
31300 8052                      A000            .word	$A000
31301                                           ! 4876                        0x0000,
31302 8054                      0000            .word	0
31303                                           ! 4877                       0,
31304 8056                      0000            .word	0
31305 8058                      0000            .word	0
31306                                           ! 4878                             1280,
31307 805A                      0500            .word	$500
31308                                           ! 4879                        640,
31309 805C                      0280            .word	$280
31310                                           ! 4880                        480,
31311 805E                      01E0            .word	$1E0
31312                                           ! 4881                      8,
31313 8060                        08            .byte	8
31314                                           ! 4882                      16,
31315 8061                        10            .byte	$10
31316                                           ! 4883                           1,
31317 8062                        01            .byte	1
31318                                           ! 4884                         15,
31319 8063                        0F            .byte	$F
31320                                           ! 4885                          10,
31321 8064                        0A            .byte	$A
31322                                           ! 4886                        0x06,
31323 8065                        06            .byte	6
31324                                           ! 4887                     0,
31325 8066                        00            .byte	0
31326                                           ! 4888                               26,
31327 8067                        1A            .byte	$1A
31328                                           ! 4889                          0,
31329 8068                        00            .byte	0
31330                                           ! 4890                        5,
31331 8069                        05            .byte	5
31332                                           ! 4891                             10,
31333 806A                        0A            .byte	$A
31334                                           ! 4892                          5,
31335 806B                        05            .byte	5
31336                                           ! 4893                               5,
31337 806C                        05            .byte	5
31338                                           ! 4894                         5,
31339 806D                        05            .byte	5
31340                                           ! 4895                              0,
31341 806E                        00            .byte	0
31342                                           ! 4896                         1,
31343 806F                        01            .byte	1
31344                                           ! 4897                              15,
31345 8070                        0F            .byte	$F
31346                                           ! 4898                                0,
31347 8071                        00            .byte	0
31348                                           ! 4899                        0xE0000000,
31349 8072                      0000            .word	0
31350 8074                      E000            .word	$E000
31351                                           ! 4900                               0,
31352 8076                      0000            .word	0
31353 8078                      0000            .word	0
31354                                           ! 4901                             0,
31355 807A                      0000            .word	0
31356                                           ! 4902                                1280,
31357 807C                      0500            .word	$500
31358                                           ! 4903                             0,
31359 807E                        00            .byte	0
31360                                           ! 4904                             0,
31361 807F                        00            .byte	0
31362                                           ! 4905                           5,
31363 8080                        05            .byte	5
31364                                           ! 4906                                10,
31365 8081                        0A            .byte	$A
31366                                           ! 4907                             5,
31367 8082                        05            .byte	5
31368                                           ! 4908                                  5,
31369 8083                        05            .byte	5
31370                                           ! 4909                            5,
31371 8084                        05            .byte	5
31372                                           ! 4910                                 0,
31373 8085                        00            .byte	0
31374                                           ! 4911                            1,
31375 8086                        01            .byte	1
31376                                           ! 4912                                 15,
31377 8087                        0F            .byte	$F
31378                                           ! 4913                          0,
31379 8088                      0000            .word	0
31380 808A                      0000            .word	0
31381                                           ! 4914 } },
31382                                           ! 4915 { 0x0111,
31383 808C                      0111            .word	$111
31384                                           ! 4916 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31385 808E                      009B            .word	$9B
31386                                           ! 4917                           0x01 | 0x02 | 0x0
31387                                           ! 4917 4,
31388 8090                        07            .byte	7
31389                                           ! 4918                           0,
31390 8091                        00            .byte	0
31391                                           ! 4919                           64,
31392 8092                      0040            .word	$40
31393                                           ! 4920                    64,
31394 8094                      0040            .word	$40
31395                                           ! 4921                        0xA000,
31396 8096                      A000            .word	$A000
31397                                           ! 4922                        0x0000,
31398 8098                      0000            .word	0
31399                                           ! 4923                       0,
31400 809A                      0000            .word	0
31401 809C                      0000            .word	0
31402                                           ! 4924                             1280,
31403 809E                      0500            .word	$500
31404                                           ! 4925                        640,
31405 80A0                      0280            .word	$280
31406                                           ! 4926                        480,
31407 80A2                      01E0            .word	$1E0
31408                                           ! 4927                      8,
31409 80A4                        08            .byte	8
31410                                           ! 4928                      16,
31411 80A5                        10            .byte	$10
31412                                           ! 4929                           1,
31413 80A6                        01            .byte	1
31414                                           ! 4930                         16,
31415 80A7                        10            .byte	$10
31416                                           ! 4931                          10,
31417 80A8                        0A            .byte	$A
31418                                           ! 4932                        0x06,
31419 80A9                        06            .byte	6
31420                                           ! 4933                     0,
31421 80AA                        00            .byte	0
31422                                           ! 4934                               26,
31423 80AB                        1A            .byte	$1A
31424                                           ! 4935                          0,
31425 80AC                        00            .byte	0
31426                                           ! 4936                        5,
31427 80AD                        05            .byte	5
31428                                           ! 4937                             11,
31429 80AE                        0B            .byte	$B
31430                                           ! 4938                          6,
31431 80AF                        06            .byte	6
31432                                           ! 4939                               5,
31433 80B0                        05            .byte	5
31434                                           ! 4940                         5,
31435 80B1                        05            .byte	5
31436                                           ! 4941                              0,
31437 80B2                        00            .byte	0
31438                                           ! 4942                         0,
31439 80B3                        00            .byte	0
31440                                           ! 4943                              0,
31441 80B4                        00            .byte	0
31442                                           ! 4944                                0,
31443 80B5                        00            .byte	0
31444                                           ! 4945                        0xE0000000,
31445 80B6                      0000            .word	0
31446 80B8                      E000            .word	$E000
31447                                           ! 4946                               0,
31448 80BA                      0000            .word	0
31449 80BC                      0000            .word	0
31450                                           ! 4947                             0,
31451 80BE                      0000            .word	0
31452                                           ! 4948                                1280,
31453 80C0                      0500            .word	$500
31454                                           ! 4949                             0,
31455 80C2                        00            .byte	0
31456                                           ! 4950                             0,
31457 80C3                        00            .byte	0
31458                                           ! 4951                           5,
31459 80C4                        05            .byte	5
31460                                           ! 4952                                11,
31461 80C5                        0B            .byte	$B
31462                                           ! 4953                             6,
31463 80C6                        06            .byte	6
31464                                           ! 4954                                  5,
31465 80C7                        05            .byte	5
31466                                           ! 4955                            5,
31467 80C8                        05            .byte	5
31468                                           ! 4956                                 0,
31469 80C9                        00            .byte	0
31470                                           ! 4957                            0,
31471 80CA                        00            .byte	0
31472                                           ! 4958                                 0,
31473 80CB                        00            .byte	0
31474                                           ! 4959                          0,
31475 80CC                      0000            .word	0
31476 80CE                      0000            .word	0
31477                                           ! 4960 } },
31478                                           ! 4961 { 0x0112,
31479 80D0                      0112            .word	$112
31480                                           ! 4962 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31481 80D2                      009B            .word	$9B
31482                                           ! 4963                           0x01 | 0x02 | 0x04,
31483 80D4                        07            .byte	7
31484                                           ! 4964                           0,
31485 80D5                        00            .byte	0
31486                                           ! 4965                           64,
31487 80D6                      0040            .word	$40
31488                                           ! 4966                    64,
31489 80D8                      0040            .word	$40
31490                                           ! 4967                        0xA000,
31491 80DA                      A000            .word	$A000
31492                                           ! 4968                        0x0000,
31493 80DC                      0000            .word	0
31494                                           ! 4969                       0,
31495 80DE                      0000            .word	0
31496 80E0                      0000            .word	0
31497                                           ! 4970                             1920,
31498 80E2                      0780            .word	$780
31499                                           ! 4971                        640,
31500 80E4                      0280            .word	$280
31501                                           ! 4972                        480,
31502 80E6                      01E0            .word	$1E0
31503                                           ! 4973                      8,
31504 80E8                        08            .byte	8
31505                                           ! 4974                      16,
31506 80E9                        10            .byte	$10
31507                                           ! 4975                           1,
31508 80EA                        01            .byte	1
31509                                           ! 4976                         24,
31510 80EB                        18            .byte	$18
31511                                           ! 4977                          15,
31512 80EC                        0F            .byte	$F
31513                                           ! 4978                        0x06,
31514 80ED                        06            .byte	6
31515                                           ! 4979                     0,
31516 80EE                        00            .byte	0
31517                                           ! 4980                               17,
31518 80EF                        11            .byte	$11
31519                                           ! 4981                          0,
31520 80F0                        00            .byte	0
31521                                           ! 4982                        8,
31522 80F1                        08            .byte	8
31523                                           ! 4983                             16,
31524 80F2                        10            .byte	$10
31525                                           ! 4984                          8,
31526 80F3                        08            .byte	8
31527                                           ! 4985                               8,
31528 80F4                        08            .byte	8
31529                                           ! 4986                         8,
31530 80F5                        08            .byte	8
31531                                           ! 4987                   
31532                                           ! 4987            0,
31533 80F6                        00            .byte	0
31534                                           ! 4988                         0,
31535 80F7                        00            .byte	0
31536                                           ! 4989                              0,
31537 80F8                        00            .byte	0
31538                                           ! 4990                                0,
31539 80F9                        00            .byte	0
31540                                           ! 4991                        0xE0000000,
31541 80FA                      0000            .word	0
31542 80FC                      E000            .word	$E000
31543                                           ! 4992                               0,
31544 80FE                      0000            .word	0
31545 8100                      0000            .word	0
31546                                           ! 4993                             0,
31547 8102                      0000            .word	0
31548                                           ! 4994                                1920,
31549 8104                      0780            .word	$780
31550                                           ! 4995                             0,
31551 8106                        00            .byte	0
31552                                           ! 4996                             0,
31553 8107                        00            .byte	0
31554                                           ! 4997                           8,
31555 8108                        08            .byte	8
31556                                           ! 4998                                16,
31557 8109                        10            .byte	$10
31558                                           ! 4999                             8,
31559 810A                        08            .byte	8
31560                                           ! 5000                                  8,
31561 810B                        08            .byte	8
31562                                           ! 5001                            8,
31563 810C                        08            .byte	8
31564                                           ! 5002                                 0,
31565 810D                        00            .byte	0
31566                                           ! 5003                            0,
31567 810E                        00            .byte	0
31568                                           ! 5004                                 0,
31569 810F                        00            .byte	0
31570                                           ! 5005                          0,
31571 8110                      0000            .word	0
31572 8112                      0000            .word	0
31573                                           ! 5006 } },
31574                                           ! 5007 { 0x0113,
31575 8114                      0113            .word	$113
31576                                           ! 5008 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31577 8116                      009B            .word	$9B
31578                                           ! 5009                           0x01 | 0x02 | 0x04,
31579 8118                        07            .byte	7
31580                                           ! 5010                           0,
31581 8119                        00            .byte	0
31582                                           ! 5011                           64,
31583 811A                      0040            .word	$40
31584                                           ! 5012                    64,
31585 811C                      0040            .word	$40
31586                                           ! 5013                        0xA000,
31587 811E                      A000            .word	$A000
31588                                           ! 5014                        0x0000,
31589 8120                      0000            .word	0
31590                                           ! 5015                       0,
31591 8122                      0000            .word	0
31592 8124                      0000            .word	0
31593                                           ! 5016                             1600,
31594 8126                      0640            .word	$640
31595                                           ! 5017                        800,
31596 8128                      0320            .word	$320
31597                                           ! 5018                        600,
31598 812A                      0258            .word	$258
31599                                           ! 5019                      8,
31600 812C                        08            .byte	8
31601                                           ! 5020                      16,
31602 812D                        10            .byte	$10
31603                                           ! 5021                           1,
31604 812E                        01            .byte	1
31605                                           ! 5022                         15,
31606 812F                        0F            .byte	$F
31607                                           ! 5023                          15,
31608 8130                        0F            .byte	$F
31609                                           ! 5024                        0x06,
31610 8131                        06            .byte	6
31611                                           ! 5025                     0,
31612 8132                        00            .byte	0
31613                                           ! 5026                               16,
31614 8133                        10            .byte	$10
31615                                           ! 5027                          0,
31616 8134                        00            .byte	0
31617                                           ! 5028                        5,
31618 8135                        05            .byte	5
31619                                           ! 5029                             10,
31620 8136                        0A            .byte	$A
31621                                           ! 5030                          5,
31622 8137                        05            .byte	5
31623                                           ! 5031                               5,
31624 8138                        05            .byte	5
31625                                           ! 5032                         5,
31626 8139                        05            .byte	5
31627                                           ! 5033                              0,
31628 813A                        00            .byte	0
31629                                           ! 5034                         1,
31630 813B                        01            .byte	1
31631                                           ! 5035                              15,
31632 813C                        0F            .byte	$F
31633                                           ! 5036                                0,
31634 813D                        00            .byte	0
31635                                           ! 5037                        0xE0000000,
31636 813E                      0000            .word	0
31637 8140                      E000            .word	$E000
31638                                           ! 5038                               0,
31639 8142                      0000            .word	0
31640 8144                      0000            .word	0
31641                                           ! 5039                             0,
31642 8146                      0000            .word	0
31643                                           ! 5040                                1600,
31644 8148                      0640            .word	$640
31645                                           ! 5041                             0,
31646 814A                        00            .byte	0
31647                                           ! 5042                             0,
31648 814B                        00            .byte	0
31649                                           ! 5043                           5,
31650 814C                        05            .byte	5
31651                                           ! 5044                                10,
31652 814D                        0A            .byte	$A
31653                                           ! 5045                             5,
31654 814E                        05            .byte	5
31655                                           ! 5046                                  5,
31656 814F                        05            .byte	5
31657                                           ! 5047                            5,
31658 8150                        05            .byte	5
31659                                           ! 5048                                 0,
31660 8151                        00            .byte	0
31661                                           ! 5049                            1,
31662 8152                        01            .byte	1
31663                                           ! 5050                                 15,
31664 8153                        0F            .byte	$F
31665                                           ! 5051                          0,
31666 8154                      0000            .word	0
31667 8156                      0000            .word	0
31668                                           ! 5052 } },
31669                                           ! 5053 { 0x0114,
31670 8158                      0114            .word	$114
31671                                           ! 5054 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31672 815A                      009B            .word	$9B
31673                                           ! 5055                   
31674                                           ! 5055         0x01 | 0x02 | 0x04,
31675 815C                        07            .byte	7
31676                                           ! 5056                           0,
31677 815D                        00            .byte	0
31678                                           ! 5057                           64,
31679 815E                      0040            .word	$40
31680                                           ! 5058                    64,
31681 8160                      0040            .word	$40
31682                                           ! 5059                        0xA000,
31683 8162                      A000            .word	$A000
31684                                           ! 5060                        0x0000,
31685 8164                      0000            .word	0
31686                                           ! 5061                       0,
31687 8166                      0000            .word	0
31688 8168                      0000            .word	0
31689                                           ! 5062                             1600,
31690 816A                      0640            .word	$640
31691                                           ! 5063                        800,
31692 816C                      0320            .word	$320
31693                                           ! 5064                        600,
31694 816E                      0258            .word	$258
31695                                           ! 5065                      8,
31696 8170                        08            .byte	8
31697                                           ! 5066                      16,
31698 8171                        10            .byte	$10
31699                                           ! 5067                           1,
31700 8172                        01            .byte	1
31701                                           ! 5068                         16,
31702 8173                        10            .byte	$10
31703                                           ! 5069                          15,
31704 8174                        0F            .byte	$F
31705                                           ! 5070                        0x06,
31706 8175                        06            .byte	6
31707                                           ! 5071                     0,
31708 8176                        00            .byte	0
31709                                           ! 5072                               16,
31710 8177                        10            .byte	$10
31711                                           ! 5073                          0,
31712 8178                        00            .byte	0
31713                                           ! 5074                        5,
31714 8179                        05            .byte	5
31715                                           ! 5075                             11,
31716 817A                        0B            .byte	$B
31717                                           ! 5076                          6,
31718 817B                        06            .byte	6
31719                                           ! 5077                               5,
31720 817C                        05            .byte	5
31721                                           ! 5078                         5,
31722 817D                        05            .byte	5
31723                                           ! 5079                              0,
31724 817E                        00            .byte	0
31725                                           ! 5080                         0,
31726 817F                        00            .byte	0
31727                                           ! 5081                              0,
31728 8180                        00            .byte	0
31729                                           ! 5082                                0,
31730 8181                        00            .byte	0
31731                                           ! 5083                        0xE0000000,
31732 8182                      0000            .word	0
31733 8184                      E000            .word	$E000
31734                                           ! 5084                               0,
31735 8186                      0000            .word	0
31736 8188                      0000            .word	0
31737                                           ! 5085                             0,
31738 818A                      0000            .word	0
31739                                           ! 5086                                1600,
31740 818C                      0640            .word	$640
31741                                           ! 5087                             0,
31742 818E                        00            .byte	0
31743                                           ! 5088                             0,
31744 818F                        00            .byte	0
31745                                           ! 5089                           5,
31746 8190                        05            .byte	5
31747                                           ! 5090                                11,
31748 8191                        0B            .byte	$B
31749                                           ! 5091                             6,
31750 8192                        06            .byte	6
31751                                           ! 5092                                  5,
31752 8193                        05            .byte	5
31753                                           ! 5093                            5,
31754 8194                        05            .byte	5
31755                                           ! 5094                                 0,
31756 8195                        00            .byte	0
31757                                           ! 5095                            0,
31758 8196                        00            .byte	0
31759                                           ! 5096                                 0,
31760 8197                        00            .byte	0
31761                                           ! 5097                          0,
31762 8198                      0000            .word	0
31763 819A                      0000            .word	0
31764                                           ! 5098 } },
31765                                           ! 5099 { 0x0115,
31766 819C                      0115            .word	$115
31767                                           ! 5100 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31768 819E                      009B            .word	$9B
31769                                           ! 5101                           0x01 | 0x02 | 0x04,
31770 81A0                        07            .byte	7
31771                                           ! 5102                           0,
31772 81A1                        00            .byte	0
31773                                           ! 5103                           64,
31774 81A2                      0040            .word	$40
31775                                           ! 5104                    64,
31776 81A4                      0040            .word	$40
31777                                           ! 5105                        0xA000,
31778 81A6                      A000            .word	$A000
31779                                           ! 5106                        0x0000,
31780 81A8                      0000            .word	0
31781                                           ! 5107                       0,
31782 81AA                      0000            .word	0
31783 81AC                      0000            .word	0
31784                                           ! 5108                             2400,
31785 81AE                      0960            .word	$960
31786                                           ! 5109                        800,
31787 81B0                      0320            .word	$320
31788                                           ! 5110                        600,
31789 81B2                      0258            .word	$258
31790                                           ! 5111                      8,
31791 81B4                        08            .byte	8
31792                                           ! 5112                      16,
31793 81B5                        10            .byte	$10
31794                                           ! 5113                           1,
31795 81B6                        01            .byte	1
31796                                           ! 5114                         24,
31797 81B7                        18            .byte	$18
31798                                           ! 5115                          22,
31799 81B8                        16            .byte	$16
31800                                           ! 5116                        0x06,
31801 81B9                        06            .byte	6
31802                                           ! 5117                     0,
31803 81BA                        00            .byte	0
31804                                           ! 5118                               10,
31805 81BB                        0A            .byte	$A
31806                                           ! 5119                          0,
31807 81BC                        00            .byte	0
31808                                           ! 5120                        8,
31809 81BD                        08            .byte	8
31810                                           ! 5121                             16,
31811 81BE                        10            .byte	$10
31812                                           ! 5122                          8,
31813 81BF                        08            .byte	8
31814                                           ! 5123                               8,
31815 81C0                        08            .byte	8
31816                                           ! 5124                     
31817                                           ! 5124     8,
31818 81C1                        08            .byte	8
31819                                           ! 5125                              0,
31820 81C2                        00            .byte	0
31821                                           ! 5126                         0,
31822 81C3                        00            .byte	0
31823                                           ! 5127                              0,
31824 81C4                        00            .byte	0
31825                                           ! 5128                                0,
31826 81C5                        00            .byte	0
31827                                           ! 5129                        0xE0000000,
31828 81C6                      0000            .word	0
31829 81C8                      E000            .word	$E000
31830                                           ! 5130                               0,
31831 81CA                      0000            .word	0
31832 81CC                      0000            .word	0
31833                                           ! 5131                             0,
31834 81CE                      0000            .word	0
31835                                           ! 5132                                2400,
31836 81D0                      0960            .word	$960
31837                                           ! 5133                             0,
31838 81D2                        00            .byte	0
31839                                           ! 5134                             0,
31840 81D3                        00            .byte	0
31841                                           ! 5135                           8,
31842 81D4                        08            .byte	8
31843                                           ! 5136                                16,
31844 81D5                        10            .byte	$10
31845                                           ! 5137                             8,
31846 81D6                        08            .byte	8
31847                                           ! 5138                                  8,
31848 81D7                        08            .byte	8
31849                                           ! 5139                            8,
31850 81D8                        08            .byte	8
31851                                           ! 5140                                 0,
31852 81D9                        00            .byte	0
31853                                           ! 5141                            0,
31854 81DA                        00            .byte	0
31855                                           ! 5142                                 0,
31856 81DB                        00            .byte	0
31857                                           ! 5143                          0,
31858 81DC                      0000            .word	0
31859 81DE                      0000            .word	0
31860                                           ! 5144 } },
31861                                           ! 5145 { 0x0116,
31862 81E0                      0116            .word	$116
31863                                           ! 5146 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31864 81E2                      009B            .word	$9B
31865                                           ! 5147                           0x01 | 0x02 | 0x04,
31866 81E4                        07            .byte	7
31867                                           ! 5148                           0,
31868 81E5                        00            .byte	0
31869                                           ! 5149                           64,
31870 81E6                      0040            .word	$40
31871                                           ! 5150                    64,
31872 81E8                      0040            .word	$40
31873                                           ! 5151                        0xA000,
31874 81EA                      A000            .word	$A000
31875                                           ! 5152                        0x0000,
31876 81EC                      0000            .word	0
31877                                           ! 5153                       0,
31878 81EE                      0000            .word	0
31879 81F0                      0000            .word	0
31880                                           ! 5154                             2048,
31881 81F2                      0800            .word	$800
31882                                           ! 5155                        1024,
31883 81F4                      0400            .word	$400
31884                                           ! 5156                        768,
31885 81F6                      0300            .word	$300
31886                                           ! 5157                      8,
31887 81F8                        08            .byte	8
31888                                           ! 5158                      16,
31889 81F9                        10            .byte	$10
31890                                           ! 5159                           1,
31891 81FA                        01            .byte	1
31892                                           ! 5160                         15,
31893 81FB                        0F            .byte	$F
31894                                           ! 5161                          24,
31895 81FC                        18            .byte	$18
31896                                           ! 5162                        0x06,
31897 81FD                        06            .byte	6
31898                                           ! 5163                     0,
31899 81FE                        00            .byte	0
31900                                           ! 5164                               9,
31901 81FF                        09            .byte	9
31902                                           ! 5165                          0,
31903 8200                        00            .byte	0
31904                                           ! 5166                        5,
31905 8201                        05            .byte	5
31906                                           ! 5167                             10,
31907 8202                        0A            .byte	$A
31908                                           ! 5168                          5,
31909 8203                        05            .byte	5
31910                                           ! 5169                               5,
31911 8204                        05            .byte	5
31912                                           ! 5170                         5,
31913 8205                        05            .byte	5
31914                                           ! 5171                              0,
31915 8206                        00            .byte	0
31916                                           ! 5172                         1,
31917 8207                        01            .byte	1
31918                                           ! 5173                              15,
31919 8208                        0F            .byte	$F
31920                                           ! 5174                                0,
31921 8209                        00            .byte	0
31922                                           ! 5175                        0xE0000000,
31923 820A                      0000            .word	0
31924 820C                      E000            .word	$E000
31925                                           ! 5176                               0,
31926 820E                      0000            .word	0
31927 8210                      0000            .word	0
31928                                           ! 5177                             0,
31929 8212                      0000            .word	0
31930                                           ! 5178                                2048,
31931 8214                      0800            .word	$800
31932                                           ! 5179                             0,
31933 8216                        00            .byte	0
31934                                           ! 5180                             0,
31935 8217                        00            .byte	0
31936                                           ! 5181                           5,
31937 8218                        05            .byte	5
31938                                           ! 5182                                10,
31939 8219                        0A            .byte	$A
31940                                           ! 5183                             5,
31941 821A                        05            .byte	5
31942                                           ! 5184                                  5,
31943 821B                        05            .byte	5
31944                                           ! 5185                            5,
31945 821C                        05            .byte	5
31946                                           ! 5186                                 0,
31947 821D                        00            .byte	0
31948                                           ! 5187                            1,
31949 821E                        01            .byte	1
31950                                           ! 5188                                 15,
31951 821F                        0F            .byte	$F
31952                                           ! 5189                          0,
31953 8220                      0000            .word	0
31954 8222                      0000            .word	0
31955                                           ! 5190 } },
31956                                           ! 5191 { 0x0117,
31957 8224                      0117            .word	$117
31958                                           ! 5192 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0
31959                                           ! 5192 x0010,
31960 8226                      009B            .word	$9B
31961                                           ! 5193                           0x01 | 0x02 | 0x04,
31962 8228                        07            .byte	7
31963                                           ! 5194                           0,
31964 8229                        00            .byte	0
31965                                           ! 5195                           64,
31966 822A                      0040            .word	$40
31967                                           ! 5196                    64,
31968 822C                      0040            .word	$40
31969                                           ! 5197                        0xA000,
31970 822E                      A000            .word	$A000
31971                                           ! 5198                        0x0000,
31972 8230                      0000            .word	0
31973                                           ! 5199                       0,
31974 8232                      0000            .word	0
31975 8234                      0000            .word	0
31976                                           ! 5200                             2048,
31977 8236                      0800            .word	$800
31978                                           ! 5201                        1024,
31979 8238                      0400            .word	$400
31980                                           ! 5202                        768,
31981 823A                      0300            .word	$300
31982                                           ! 5203                      8,
31983 823C                        08            .byte	8
31984                                           ! 5204                      16,
31985 823D                        10            .byte	$10
31986                                           ! 5205                           1,
31987 823E                        01            .byte	1
31988                                           ! 5206                         16,
31989 823F                        10            .byte	$10
31990                                           ! 5207                          24,
31991 8240                        18            .byte	$18
31992                                           ! 5208                        0x06,
31993 8241                        06            .byte	6
31994                                           ! 5209                     0,
31995 8242                        00            .byte	0
31996                                           ! 5210                               9,
31997 8243                        09            .byte	9
31998                                           ! 5211                          0,
31999 8244                        00            .byte	0
32000                                           ! 5212                        5,
32001 8245                        05            .byte	5
32002                                           ! 5213                             11,
32003 8246                        0B            .byte	$B
32004                                           ! 5214                          6,
32005 8247                        06            .byte	6
32006                                           ! 5215                               5,
32007 8248                        05            .byte	5
32008                                           ! 5216                         5,
32009 8249                        05            .byte	5
32010                                           ! 5217                              0,
32011 824A                        00            .byte	0
32012                                           ! 5218                         0,
32013 824B                        00            .byte	0
32014                                           ! 5219                              0,
32015 824C                        00            .byte	0
32016                                           ! 5220                                0,
32017 824D                        00            .byte	0
32018                                           ! 5221                        0xE0000000,
32019 824E                      0000            .word	0
32020 8250                      E000            .word	$E000
32021                                           ! 5222                               0,
32022 8252                      0000            .word	0
32023 8254                      0000            .word	0
32024                                           ! 5223                             0,
32025 8256                      0000            .word	0
32026                                           ! 5224                                2048,
32027 8258                      0800            .word	$800
32028                                           ! 5225                             0,
32029 825A                        00            .byte	0
32030                                           ! 5226                             0,
32031 825B                        00            .byte	0
32032                                           ! 5227                           5,
32033 825C                        05            .byte	5
32034                                           ! 5228                                11,
32035 825D                        0B            .byte	$B
32036                                           ! 5229                             6,
32037 825E                        06            .byte	6
32038                                           ! 5230                                  5,
32039 825F                        05            .byte	5
32040                                           ! 5231                            5,
32041 8260                        05            .byte	5
32042                                           ! 5232                                 0,
32043 8261                        00            .byte	0
32044                                           ! 5233                            0,
32045 8262                        00            .byte	0
32046                                           ! 5234                                 0,
32047 8263                        00            .byte	0
32048                                           ! 5235                          0,
32049 8264                      0000            .word	0
32050 8266                      0000            .word	0
32051                                           ! 5236 } },
32052                                           ! 5237 { 0x0118,
32053 8268                      0118            .word	$118
32054                                           ! 5238 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32055 826A                      009B            .word	$9B
32056                                           ! 5239                           0x01 | 0x02 | 0x04,
32057 826C                        07            .byte	7
32058                                           ! 5240                           0,
32059 826D                        00            .byte	0
32060                                           ! 5241                           64,
32061 826E                      0040            .word	$40
32062                                           ! 5242                    64,
32063 8270                      0040            .word	$40
32064                                           ! 5243                        0xA000,
32065 8272                      A000            .word	$A000
32066                                           ! 5244                        0x0000,
32067 8274                      0000            .word	0
32068                                           ! 5245                       0,
32069 8276                      0000            .word	0
32070 8278                      0000            .word	0
32071                                           ! 5246                             3072,
32072 827A                      0C00            .word	$C00
32073                                           ! 5247                        1024,
32074 827C                      0400            .word	$400
32075                                           ! 5248                        768,
32076 827E                      0300            .word	$300
32077                                           ! 5249                      8,
32078 8280                        08            .byte	8
32079                                           ! 5250                      16,
32080 8281                        10            .byte	$10
32081                                           ! 5251                           1,
32082 8282                        01            .byte	1
32083                                           ! 5252                         24,
32084 8283                        18            .byte	$18
32085                                           ! 5253                          36,
32086 8284                        24            .byte	$24
32087                                           ! 5254                        0x06,
32088 8285                        06            .byte	6
32089                                           ! 5255                     0,
32090 8286                        00            .byte	0
32091                                           ! 5256                               6,
32092 8287                        06            .byte	6
32093                                           ! 5257                          0,
32094 8288                        00            .byte	0
32095                                           ! 5258                        8,
32096 8289                        08            .byte	8
32097                                           ! 5259                             16,
32098 828A                        10            .byte	$10
32099                                           ! 5260                          8,
32100 828B                        08            .byte	8
32101                                           ! 5261                             
32102                                           ! 5261   8,
32103 828C                        08            .byte	8
32104                                           ! 5262                         8,
32105 828D                        08            .byte	8
32106                                           ! 5263                              0,
32107 828E                        00            .byte	0
32108                                           ! 5264                         0,
32109 828F                        00            .byte	0
32110                                           ! 5265                              0,
32111 8290                        00            .byte	0
32112                                           ! 5266                                0,
32113 8291                        00            .byte	0
32114                                           ! 5267                        0xE0000000,
32115 8292                      0000            .word	0
32116 8294                      E000            .word	$E000
32117                                           ! 5268                               0,
32118 8296                      0000            .word	0
32119 8298                      0000            .word	0
32120                                           ! 5269                             0,
32121 829A                      0000            .word	0
32122                                           ! 5270                                3072,
32123 829C                      0C00            .word	$C00
32124                                           ! 5271                             0,
32125 829E                        00            .byte	0
32126                                           ! 5272                             0,
32127 829F                        00            .byte	0
32128                                           ! 5273                           8,
32129 82A0                        08            .byte	8
32130                                           ! 5274                                16,
32131 82A1                        10            .byte	$10
32132                                           ! 5275                             8,
32133 82A2                        08            .byte	8
32134                                           ! 5276                                  8,
32135 82A3                        08            .byte	8
32136                                           ! 5277                            8,
32137 82A4                        08            .byte	8
32138                                           ! 5278                                 0,
32139 82A5                        00            .byte	0
32140                                           ! 5279                            0,
32141 82A6                        00            .byte	0
32142                                           ! 5280                                 0,
32143 82A7                        00            .byte	0
32144                                           ! 5281                          0,
32145 82A8                      0000            .word	0
32146 82AA                      0000            .word	0
32147                                           ! 5282 } },
32148                                           ! 5283 { 0x0119,
32149 82AC                      0119            .word	$119
32150                                           ! 5284 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32151 82AE                      009B            .word	$9B
32152                                           ! 5285                           0x01 | 0x02 | 0x04,
32153 82B0                        07            .byte	7
32154                                           ! 5286                           0,
32155 82B1                        00            .byte	0
32156                                           ! 5287                           64,
32157 82B2                      0040            .word	$40
32158                                           ! 5288                    64,
32159 82B4                      0040            .word	$40
32160                                           ! 5289                        0xA000,
32161 82B6                      A000            .word	$A000
32162                                           ! 5290                        0x0000,
32163 82B8                      0000            .word	0
32164                                           ! 5291                       0,
32165 82BA                      0000            .word	0
32166 82BC                      0000            .word	0
32167                                           ! 5292                             2560,
32168 82BE                      0A00            .word	$A00
32169                                           ! 5293                        1280,
32170 82C0                      0500            .word	$500
32171                                           ! 5294                        1024,
32172 82C2                      0400            .word	$400
32173                                           ! 5295                      8,
32174 82C4                        08            .byte	8
32175                                           ! 5296                      16,
32176 82C5                        10            .byte	$10
32177                                           ! 5297                           1,
32178 82C6                        01            .byte	1
32179                                           ! 5298                         15,
32180 82C7                        0F            .byte	$F
32181                                           ! 5299                          40,
32182 82C8                        28            .byte	$28
32183                                           ! 5300                        0x06,
32184 82C9                        06            .byte	6
32185                                           ! 5301                     0,
32186 82CA                        00            .byte	0
32187                                           ! 5302                               5,
32188 82CB                        05            .byte	5
32189                                           ! 5303                          0,
32190 82CC                        00            .byte	0
32191                                           ! 5304                        5,
32192 82CD                        05            .byte	5
32193                                           ! 5305                             10,
32194 82CE                        0A            .byte	$A
32195                                           ! 5306                          5,
32196 82CF                        05            .byte	5
32197                                           ! 5307                               5,
32198 82D0                        05            .byte	5
32199                                           ! 5308                         5,
32200 82D1                        05            .byte	5
32201                                           ! 5309                              0,
32202 82D2                        00            .byte	0
32203                                           ! 5310                         1,
32204 82D3                        01            .byte	1
32205                                           ! 5311                              15,
32206 82D4                        0F            .byte	$F
32207                                           ! 5312                                0,
32208 82D5                        00            .byte	0
32209                                           ! 5313                        0xE0000000,
32210 82D6                      0000            .word	0
32211 82D8                      E000            .word	$E000
32212                                           ! 5314                               0,
32213 82DA                      0000            .word	0
32214 82DC                      0000            .word	0
32215                                           ! 5315                             0,
32216 82DE                      0000            .word	0
32217                                           ! 5316                                2560,
32218 82E0                      0A00            .word	$A00
32219                                           ! 5317                             0,
32220 82E2                        00            .byte	0
32221                                           ! 5318                             0,
32222 82E3                        00            .byte	0
32223                                           ! 5319                           5,
32224 82E4                        05            .byte	5
32225                                           ! 5320                                10,
32226 82E5                        0A            .byte	$A
32227                                           ! 5321                             5,
32228 82E6                        05            .byte	5
32229                                           ! 5322                                  5,
32230 82E7                        05            .byte	5
32231                                           ! 5323                            5,
32232 82E8                        05            .byte	5
32233                                           ! 5324                                 0,
32234 82E9                        00            .byte	0
32235                                           ! 5325                            1,
32236 82EA                        01            .byte	1
32237                                           ! 5326                                 15,
32238 82EB                        0F            .byte	$F
32239                                           ! 5327                          0,
32240 82EC                      0000            .word	0
32241 82EE                      0000            .word	0
32242                                           ! 5328 } },
32243                                           ! 5329 { 0x011a,
32244 82F0                      011A            .word	$11A
32245                                           ! 5330 { 0x0001 | 0x
32246                                           ! 5330 0002 | 0x0008 | 0x0080 | 0x0010,
32247 82F2                      009B            .word	$9B
32248                                           ! 5331                           0x01 | 0x02 | 0x04,
32249 82F4                        07            .byte	7
32250                                           ! 5332                           0,
32251 82F5                        00            .byte	0
32252                                           ! 5333                           64,
32253 82F6                      0040            .word	$40
32254                                           ! 5334                    64,
32255 82F8                      0040            .word	$40
32256                                           ! 5335                        0xA000,
32257 82FA                      A000            .word	$A000
32258                                           ! 5336                        0x0000,
32259 82FC                      0000            .word	0
32260                                           ! 5337                       0,
32261 82FE                      0000            .word	0
32262 8300                      0000            .word	0
32263                                           ! 5338                             2560,
32264 8302                      0A00            .word	$A00
32265                                           ! 5339                        1280,
32266 8304                      0500            .word	$500
32267                                           ! 5340                        1024,
32268 8306                      0400            .word	$400
32269                                           ! 5341                      8,
32270 8308                        08            .byte	8
32271                                           ! 5342                      16,
32272 8309                        10            .byte	$10
32273                                           ! 5343                           1,
32274 830A                        01            .byte	1
32275                                           ! 5344                         16,
32276 830B                        10            .byte	$10
32277                                           ! 5345                          40,
32278 830C                        28            .byte	$28
32279                                           ! 5346                        0x06,
32280 830D                        06            .byte	6
32281                                           ! 5347                     0,
32282 830E                        00            .byte	0
32283                                           ! 5348                               5,
32284 830F                        05            .byte	5
32285                                           ! 5349                          0,
32286 8310                        00            .byte	0
32287                                           ! 5350                        5,
32288 8311                        05            .byte	5
32289                                           ! 5351                             11,
32290 8312                        0B            .byte	$B
32291                                           ! 5352                          6,
32292 8313                        06            .byte	6
32293                                           ! 5353                               5,
32294 8314                        05            .byte	5
32295                                           ! 5354                         5,
32296 8315                        05            .byte	5
32297                                           ! 5355                              0,
32298 8316                        00            .byte	0
32299                                           ! 5356                         0,
32300 8317                        00            .byte	0
32301                                           ! 5357                              0,
32302 8318                        00            .byte	0
32303                                           ! 5358                                0,
32304 8319                        00            .byte	0
32305                                           ! 5359                        0xE0000000,
32306 831A                      0000            .word	0
32307 831C                      E000            .word	$E000
32308                                           ! 5360                               0,
32309 831E                      0000            .word	0
32310 8320                      0000            .word	0
32311                                           ! 5361                             0,
32312 8322                      0000            .word	0
32313                                           ! 5362                                2560,
32314 8324                      0A00            .word	$A00
32315                                           ! 5363                             0,
32316 8326                        00            .byte	0
32317                                           ! 5364                             0,
32318 8327                        00            .byte	0
32319                                           ! 5365                           5,
32320 8328                        05            .byte	5
32321                                           ! 5366                                11,
32322 8329                        0B            .byte	$B
32323                                           ! 5367                             6,
32324 832A                        06            .byte	6
32325                                           ! 5368                                  5,
32326 832B                        05            .byte	5
32327                                           ! 5369                            5,
32328 832C                        05            .byte	5
32329                                           ! 5370                                 0,
32330 832D                        00            .byte	0
32331                                           ! 5371                            0,
32332 832E                        00            .byte	0
32333                                           ! 5372                                 0,
32334 832F                        00            .byte	0
32335                                           ! 5373                          0,
32336 8330                      0000            .word	0
32337 8332                      0000            .word	0
32338                                           ! 5374 } },
32339                                           ! 5375 { 0x011b,
32340 8334                      011B            .word	$11B
32341                                           ! 5376 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32342 8336                      009B            .word	$9B
32343                                           ! 5377                           0x01 | 0x02 | 0x04,
32344 8338                        07            .byte	7
32345                                           ! 5378                           0,
32346 8339                        00            .byte	0
32347                                           ! 5379                           64,
32348 833A                      0040            .word	$40
32349                                           ! 5380                    64,
32350 833C                      0040            .word	$40
32351                                           ! 5381                        0xA000,
32352 833E                      A000            .word	$A000
32353                                           ! 5382                        0x0000,
32354 8340                      0000            .word	0
32355                                           ! 5383                       0,
32356 8342                      0000            .word	0
32357 8344                      0000            .word	0
32358                                           ! 5384                             3840,
32359 8346                      0F00            .word	$F00
32360                                           ! 5385                        1280,
32361 8348                      0500            .word	$500
32362                                           ! 5386                        1024,
32363 834A                      0400            .word	$400
32364                                           ! 5387                      8,
32365 834C                        08            .byte	8
32366                                           ! 5388                      16,
32367 834D                        10            .byte	$10
32368                                           ! 5389                           1,
32369 834E                        01            .byte	1
32370                                           ! 5390                         24,
32371 834F                        18            .byte	$18
32372                                           ! 5391                          60,
32373 8350                        3C            .byte	$3C
32374                                           ! 5392                        0x06,
32375 8351                        06            .byte	6
32376                                           ! 5393                     0,
32377 8352                        00            .byte	0
32378                                           ! 5394                               3,
32379 8353                        03            .byte	3
32380                                           ! 5395                          0,
32381 8354                        00            .byte	0
32382                                           ! 5396                        8,
32383 8355                        08            .byte	8
32384                                           ! 5397                             16,
32385 8356                        10            .byte	$10
32386                                           ! 5398                          8,
32387 8357                        08            .byte	8
32388                                           ! 5399 
32389                                           ! 5399                               8,
32390 8358                        08            .byte	8
32391                                           ! 5400                         8,
32392 8359                        08            .byte	8
32393                                           ! 5401                              0,
32394 835A                        00            .byte	0
32395                                           ! 5402                         0,
32396 835B                        00            .byte	0
32397                                           ! 5403                              0,
32398 835C                        00            .byte	0
32399                                           ! 5404                                0,
32400 835D                        00            .byte	0
32401                                           ! 5405                        0xE0000000,
32402 835E                      0000            .word	0
32403 8360                      E000            .word	$E000
32404                                           ! 5406                               0,
32405 8362                      0000            .word	0
32406 8364                      0000            .word	0
32407                                           ! 5407                             0,
32408 8366                      0000            .word	0
32409                                           ! 5408                                3840,
32410 8368                      0F00            .word	$F00
32411                                           ! 5409                             0,
32412 836A                        00            .byte	0
32413                                           ! 5410                             0,
32414 836B                        00            .byte	0
32415                                           ! 5411                           8,
32416 836C                        08            .byte	8
32417                                           ! 5412                                16,
32418 836D                        10            .byte	$10
32419                                           ! 5413                             8,
32420 836E                        08            .byte	8
32421                                           ! 5414                                  8,
32422 836F                        08            .byte	8
32423                                           ! 5415                            8,
32424 8370                        08            .byte	8
32425                                           ! 5416                                 0,
32426 8371                        00            .byte	0
32427                                           ! 5417                            0,
32428 8372                        00            .byte	0
32429                                           ! 5418                                 0,
32430 8373                        00            .byte	0
32431                                           ! 5419                          0,
32432 8374                      0000            .word	0
32433 8376                      0000            .word	0
32434                                           ! 5420 } },
32435                                           ! 5421 { 0x011c,
32436 8378                      011C            .word	$11C
32437                                           ! 5422 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32438 837A                      009B            .word	$9B
32439                                           ! 5423                           0x01 | 0x02 | 0x04,
32440 837C                        07            .byte	7
32441                                           ! 5424                           0,
32442 837D                        00            .byte	0
32443                                           ! 5425                           64,
32444 837E                      0040            .word	$40
32445                                           ! 5426                    64,
32446 8380                      0040            .word	$40
32447                                           ! 5427                        0xA000,
32448 8382                      A000            .word	$A000
32449                                           ! 5428                        0x0000,
32450 8384                      0000            .word	0
32451                                           ! 5429                       0,
32452 8386                      0000            .word	0
32453 8388                      0000            .word	0
32454                                           ! 5430                             1600,
32455 838A                      0640            .word	$640
32456                                           ! 5431                        1600,
32457 838C                      0640            .word	$640
32458                                           ! 5432                        1200,
32459 838E                      04B0            .word	$4B0
32460                                           ! 5433                      8,
32461 8390                        08            .byte	8
32462                                           ! 5434                      16,
32463 8391                        10            .byte	$10
32464                                           ! 5435                           1,
32465 8392                        01            .byte	1
32466                                           ! 5436                         8,
32467 8393                        08            .byte	8
32468                                           ! 5437                          30,
32469 8394                        1E            .byte	$1E
32470                                           ! 5438                        0x04,
32471 8395                        04            .byte	4
32472                                           ! 5439                     0,
32473 8396                        00            .byte	0
32474                                           ! 5440                               7,
32475 8397                        07            .byte	7
32476                                           ! 5441                          0,
32477 8398                        00            .byte	0
32478                                           ! 5442                        0,
32479 8399                        00            .byte	0
32480                                           ! 5443                             0,
32481 839A                        00            .byte	0
32482                                           ! 5444                          0,
32483 839B                        00            .byte	0
32484                                           ! 5445                               0,
32485 839C                        00            .byte	0
32486                                           ! 5446                         0,
32487 839D                        00            .byte	0
32488                                           ! 5447                              0,
32489 839E                        00            .byte	0
32490                                           ! 5448                         0,
32491 839F                        00            .byte	0
32492                                           ! 5449                              0,
32493 83A0                        00            .byte	0
32494                                           ! 5450                                0,
32495 83A1                        00            .byte	0
32496                                           ! 5451                        0xE0000000,
32497 83A2                      0000            .word	0
32498 83A4                      E000            .word	$E000
32499                                           ! 5452                               0,
32500 83A6                      0000            .word	0
32501 83A8                      0000            .word	0
32502                                           ! 5453                             0,
32503 83AA                      0000            .word	0
32504                                           ! 5454                                1600,
32505 83AC                      0640            .word	$640
32506                                           ! 5455                             0,
32507 83AE                        00            .byte	0
32508                                           ! 5456                             0,
32509 83AF                        00            .byte	0
32510                                           ! 5457                           0,
32511 83B0                        00            .byte	0
32512                                           ! 5458                                0,
32513 83B1                        00            .byte	0
32514                                           ! 5459                             0,
32515 83B2                        00            .byte	0
32516                                           ! 5460                                  0,
32517 83B3                        00            .byte	0
32518                                           ! 5461                            0,
32519 83B4                        00            .byte	0
32520                                           ! 5462                                 0,
32521 83B5                        00            .byte	0
32522                                           ! 5463                            0,
32523 83B6                        00            .byte	0
32524                                           ! 5464                                 0,
32525 83B7                        00            .byte	0
32526                                           ! 5465                          0,
32527 83B8                      0000            .word	0
32528 83BA                      0000            .word	0
32529                                           ! 5466 } },
32530                                           ! 5467 
32531                                           ! 5467 { 0x011d,
32532 83BC                      011D            .word	$11D
32533                                           ! 5468 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32534 83BE                      009B            .word	$9B
32535                                           ! 5469                           0x01 | 0x02 | 0x04,
32536 83C0                        07            .byte	7
32537                                           ! 5470                           0,
32538 83C1                        00            .byte	0
32539                                           ! 5471                           64,
32540 83C2                      0040            .word	$40
32541                                           ! 5472                    64,
32542 83C4                      0040            .word	$40
32543                                           ! 5473                        0xA000,
32544 83C6                      A000            .word	$A000
32545                                           ! 5474                        0x0000,
32546 83C8                      0000            .word	0
32547                                           ! 5475                       0,
32548 83CA                      0000            .word	0
32549 83CC                      0000            .word	0
32550                                           ! 5476                             3200,
32551 83CE                      0C80            .word	$C80
32552                                           ! 5477                        1600,
32553 83D0                      0640            .word	$640
32554                                           ! 5478                        1200,
32555 83D2                      04B0            .word	$4B0
32556                                           ! 5479                      8,
32557 83D4                        08            .byte	8
32558                                           ! 5480                      16,
32559 83D5                        10            .byte	$10
32560                                           ! 5481                           1,
32561 83D6                        01            .byte	1
32562                                           ! 5482                         15,
32563 83D7                        0F            .byte	$F
32564                                           ! 5483                          59,
32565 83D8                        3B            .byte	$3B
32566                                           ! 5484                        0x06,
32567 83D9                        06            .byte	6
32568                                           ! 5485                     0,
32569 83DA                        00            .byte	0
32570                                           ! 5486                               3,
32571 83DB                        03            .byte	3
32572                                           ! 5487                          0,
32573 83DC                        00            .byte	0
32574                                           ! 5488                        5,
32575 83DD                        05            .byte	5
32576                                           ! 5489                             10,
32577 83DE                        0A            .byte	$A
32578                                           ! 5490                          5,
32579 83DF                        05            .byte	5
32580                                           ! 5491                               5,
32581 83E0                        05            .byte	5
32582                                           ! 5492                         5,
32583 83E1                        05            .byte	5
32584                                           ! 5493                              0,
32585 83E2                        00            .byte	0
32586                                           ! 5494                         1,
32587 83E3                        01            .byte	1
32588                                           ! 5495                              15,
32589 83E4                        0F            .byte	$F
32590                                           ! 5496                                0,
32591 83E5                        00            .byte	0
32592                                           ! 5497                        0xE0000000,
32593 83E6                      0000            .word	0
32594 83E8                      E000            .word	$E000
32595                                           ! 5498                               0,
32596 83EA                      0000            .word	0
32597 83EC                      0000            .word	0
32598                                           ! 5499                             0,
32599 83EE                      0000            .word	0
32600                                           ! 5500                                3200,
32601 83F0                      0C80            .word	$C80
32602                                           ! 5501                             0,
32603 83F2                        00            .byte	0
32604                                           ! 5502                             0,
32605 83F3                        00            .byte	0
32606                                           ! 5503                           5,
32607 83F4                        05            .byte	5
32608                                           ! 5504                                10,
32609 83F5                        0A            .byte	$A
32610                                           ! 5505                             5,
32611 83F6                        05            .byte	5
32612                                           ! 5506                                  5,
32613 83F7                        05            .byte	5
32614                                           ! 5507                            5,
32615 83F8                        05            .byte	5
32616                                           ! 5508                                 0,
32617 83F9                        00            .byte	0
32618                                           ! 5509                            1,
32619 83FA                        01            .byte	1
32620                                           ! 5510                                 15,
32621 83FB                        0F            .byte	$F
32622                                           ! 5511                          0,
32623 83FC                      0000            .word	0
32624 83FE                      0000            .word	0
32625                                           ! 5512 } },
32626                                           ! 5513 { 0x011e,
32627 8400                      011E            .word	$11E
32628                                           ! 5514 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32629 8402                      009B            .word	$9B
32630                                           ! 5515                           0x01 | 0x02 | 0x04,
32631 8404                        07            .byte	7
32632                                           ! 5516                           0,
32633 8405                        00            .byte	0
32634                                           ! 5517                           64,
32635 8406                      0040            .word	$40
32636                                           ! 5518                    64,
32637 8408                      0040            .word	$40
32638                                           ! 5519                        0xA000,
32639 840A                      A000            .word	$A000
32640                                           ! 5520                        0x0000,
32641 840C                      0000            .word	0
32642                                           ! 5521                       0,
32643 840E                      0000            .word	0
32644 8410                      0000            .word	0
32645                                           ! 5522                             3200,
32646 8412                      0C80            .word	$C80
32647                                           ! 5523                        1600,
32648 8414                      0640            .word	$640
32649                                           ! 5524                        1200,
32650 8416                      04B0            .word	$4B0
32651                                           ! 5525                      8,
32652 8418                        08            .byte	8
32653                                           ! 5526                      16,
32654 8419                        10            .byte	$10
32655                                           ! 5527                           1,
32656 841A                        01            .byte	1
32657                                           ! 5528                         16,
32658 841B                        10            .byte	$10
32659                                           ! 5529                          59,
32660 841C                        3B            .byte	$3B
32661                                           ! 5530                        0x06,
32662 841D                        06            .byte	6
32663                                           ! 5531                     0,
32664 841E                        00            .byte	0
32665                                           ! 5532                               3,
32666 841F                        03            .byte	3
32667                                           ! 5533                          0,
32668 8420                        00            .byte	0
32669                                           ! 5534                        5,
32670 8421                        05            .byte	5
32671                                           ! 5535                             11,
32672 8422                        0B            .byte	$B
32673                                           ! 5536    
32674                                           ! 5536                       6,
32675 8423                        06            .byte	6
32676                                           ! 5537                               5,
32677 8424                        05            .byte	5
32678                                           ! 5538                         5,
32679 8425                        05            .byte	5
32680                                           ! 5539                              0,
32681 8426                        00            .byte	0
32682                                           ! 5540                         0,
32683 8427                        00            .byte	0
32684                                           ! 5541                              0,
32685 8428                        00            .byte	0
32686                                           ! 5542                                0,
32687 8429                        00            .byte	0
32688                                           ! 5543                        0xE0000000,
32689 842A                      0000            .word	0
32690 842C                      E000            .word	$E000
32691                                           ! 5544                               0,
32692 842E                      0000            .word	0
32693 8430                      0000            .word	0
32694                                           ! 5545                             0,
32695 8432                      0000            .word	0
32696                                           ! 5546                                3200,
32697 8434                      0C80            .word	$C80
32698                                           ! 5547                             0,
32699 8436                        00            .byte	0
32700                                           ! 5548                             0,
32701 8437                        00            .byte	0
32702                                           ! 5549                           5,
32703 8438                        05            .byte	5
32704                                           ! 5550                                11,
32705 8439                        0B            .byte	$B
32706                                           ! 5551                             6,
32707 843A                        06            .byte	6
32708                                           ! 5552                                  5,
32709 843B                        05            .byte	5
32710                                           ! 5553                            5,
32711 843C                        05            .byte	5
32712                                           ! 5554                                 0,
32713 843D                        00            .byte	0
32714                                           ! 5555                            0,
32715 843E                        00            .byte	0
32716                                           ! 5556                                 0,
32717 843F                        00            .byte	0
32718                                           ! 5557                          0,
32719 8440                      0000            .word	0
32720 8442                      0000            .word	0
32721                                           ! 5558 } },
32722                                           ! 5559 { 0x011f,
32723 8444                      011F            .word	$11F
32724                                           ! 5560 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32725 8446                      009B            .word	$9B
32726                                           ! 5561                           0x01 | 0x02 | 0x04,
32727 8448                        07            .byte	7
32728                                           ! 5562                           0,
32729 8449                        00            .byte	0
32730                                           ! 5563                           64,
32731 844A                      0040            .word	$40
32732                                           ! 5564                    64,
32733 844C                      0040            .word	$40
32734                                           ! 5565                        0xA000,
32735 844E                      A000            .word	$A000
32736                                           ! 5566                        0x0000,
32737 8450                      0000            .word	0
32738                                           ! 5567                       0,
32739 8452                      0000            .word	0
32740 8454                      0000            .word	0
32741                                           ! 5568                             4800,
32742 8456                      12C0            .word	$12C0
32743                                           ! 5569                        1600,
32744 8458                      0640            .word	$640
32745                                           ! 5570                        1200,
32746 845A                      04B0            .word	$4B0
32747                                           ! 5571                      8,
32748 845C                        08            .byte	8
32749                                           ! 5572                      16,
32750 845D                        10            .byte	$10
32751                                           ! 5573                           1,
32752 845E                        01            .byte	1
32753                                           ! 5574                         24,
32754 845F                        18            .byte	$18
32755                                           ! 5575                          88,
32756 8460                        58            .byte	$58
32757                                           ! 5576                        0x06,
32758 8461                        06            .byte	6
32759                                           ! 5577                     0,
32760 8462                        00            .byte	0
32761                                           ! 5578                               1,
32762 8463                        01            .byte	1
32763                                           ! 5579                          0,
32764 8464                        00            .byte	0
32765                                           ! 5580                        8,
32766 8465                        08            .byte	8
32767                                           ! 5581                             16,
32768 8466                        10            .byte	$10
32769                                           ! 5582                          8,
32770 8467                        08            .byte	8
32771                                           ! 5583                               8,
32772 8468                        08            .byte	8
32773                                           ! 5584                         8,
32774 8469                        08            .byte	8
32775                                           ! 5585                              0,
32776 846A                        00            .byte	0
32777                                           ! 5586                         0,
32778 846B                        00            .byte	0
32779                                           ! 5587                              0,
32780 846C                        00            .byte	0
32781                                           ! 5588                                0,
32782 846D                        00            .byte	0
32783                                           ! 5589                        0xE0000000,
32784 846E                      0000            .word	0
32785 8470                      E000            .word	$E000
32786                                           ! 5590                               0,
32787 8472                      0000            .word	0
32788 8474                      0000            .word	0
32789                                           ! 5591                             0,
32790 8476                      0000            .word	0
32791                                           ! 5592                                4800,
32792 8478                      12C0            .word	$12C0
32793                                           ! 5593                             0,
32794 847A                        00            .byte	0
32795                                           ! 5594                             0,
32796 847B                        00            .byte	0
32797                                           ! 5595                           8,
32798 847C                        08            .byte	8
32799                                           ! 5596                                16,
32800 847D                        10            .byte	$10
32801                                           ! 5597                             8,
32802 847E                        08            .byte	8
32803                                           ! 5598                                  8,
32804 847F                        08            .byte	8
32805                                           ! 5599                            8,
32806 8480                        08            .byte	8
32807                                           ! 5600                                 0,
32808 8481                        00            .byte	0
32809                                           ! 5601                            0,
32810 8482                        00            .byte	0
32811                                           ! 5602                                 0,
32812 8483                        00            .byte	0
32813                                           ! 5603      
32814                                           ! 5603                     0,
32815 8484                      0000            .word	0
32816 8486                      0000            .word	0
32817                                           ! 5604 } },
32818                                           ! 5605 { 0x0140,
32819 8488                      0140            .word	$140
32820                                           ! 5606 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32821 848A                      009B            .word	$9B
32822                                           ! 5607                           0x01 | 0x02 | 0x04,
32823 848C                        07            .byte	7
32824                                           ! 5608                           0,
32825 848D                        00            .byte	0
32826                                           ! 5609                           64,
32827 848E                      0040            .word	$40
32828                                           ! 5610                    64,
32829 8490                      0040            .word	$40
32830                                           ! 5611                        0xA000,
32831 8492                      A000            .word	$A000
32832                                           ! 5612                        0x0000,
32833 8494                      0000            .word	0
32834                                           ! 5613                       0,
32835 8496                      0000            .word	0
32836 8498                      0000            .word	0
32837                                           ! 5614                             1280,
32838 849A                      0500            .word	$500
32839                                           ! 5615                        320,
32840 849C                      0140            .word	$140
32841                                           ! 5616                        200,
32842 849E                      00C8            .word	$C8
32843                                           ! 5617                      8,
32844 84A0                        08            .byte	8
32845                                           ! 5618                      16,
32846 84A1                        10            .byte	$10
32847                                           ! 5619                           1,
32848 84A2                        01            .byte	1
32849                                           ! 5620                         32,
32850 84A3                        20            .byte	$20
32851                                           ! 5621                          4,
32852 84A4                        04            .byte	4
32853                                           ! 5622                        0x06,
32854 84A5                        06            .byte	6
32855                                           ! 5623                     0,
32856 84A6                        00            .byte	0
32857                                           ! 5624                               64,
32858 84A7                        40            .byte	$40
32859                                           ! 5625                          0,
32860 84A8                        00            .byte	0
32861                                           ! 5626                        8,
32862 84A9                        08            .byte	8
32863                                           ! 5627                             16,
32864 84AA                        10            .byte	$10
32865                                           ! 5628                          8,
32866 84AB                        08            .byte	8
32867                                           ! 5629                               8,
32868 84AC                        08            .byte	8
32869                                           ! 5630                         8,
32870 84AD                        08            .byte	8
32871                                           ! 5631                              0,
32872 84AE                        00            .byte	0
32873                                           ! 5632                         8,
32874 84AF                        08            .byte	8
32875                                           ! 5633                              24,
32876 84B0                        18            .byte	$18
32877                                           ! 5634                                0x02,
32878 84B1                        02            .byte	2
32879                                           ! 5635                        0xE0000000,
32880 84B2                      0000            .word	0
32881 84B4                      E000            .word	$E000
32882                                           ! 5636                               0,
32883 84B6                      0000            .word	0
32884 84B8                      0000            .word	0
32885                                           ! 5637                             0,
32886 84BA                      0000            .word	0
32887                                           ! 5638                                1280,
32888 84BC                      0500            .word	$500
32889                                           ! 5639                             0,
32890 84BE                        00            .byte	0
32891                                           ! 5640                             0,
32892 84BF                        00            .byte	0
32893                                           ! 5641                           8,
32894 84C0                        08            .byte	8
32895                                           ! 5642                                16,
32896 84C1                        10            .byte	$10
32897                                           ! 5643                             8,
32898 84C2                        08            .byte	8
32899                                           ! 5644                                  8,
32900 84C3                        08            .byte	8
32901                                           ! 5645                            8,
32902 84C4                        08            .byte	8
32903                                           ! 5646                                 0,
32904 84C5                        00            .byte	0
32905                                           ! 5647                            8,
32906 84C6                        08            .byte	8
32907                                           ! 5648                                 24,
32908 84C7                        18            .byte	$18
32909                                           ! 5649                          0,
32910 84C8                      0000            .word	0
32911 84CA                      0000            .word	0
32912                                           ! 5650 } },
32913                                           ! 5651 { 0x0141,
32914 84CC                      0141            .word	$141
32915                                           ! 5652 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32916 84CE                      009B            .word	$9B
32917                                           ! 5653                           0x01 | 0x02 | 0x04,
32918 84D0                        07            .byte	7
32919                                           ! 5654                           0,
32920 84D1                        00            .byte	0
32921                                           ! 5655                           64,
32922 84D2                      0040            .word	$40
32923                                           ! 5656                    64,
32924 84D4                      0040            .word	$40
32925                                           ! 5657                        0xA000,
32926 84D6                      A000            .word	$A000
32927                                           ! 5658                        0x0000,
32928 84D8                      0000            .word	0
32929                                           ! 5659                       0,
32930 84DA                      0000            .word	0
32931 84DC                      0000            .word	0
32932                                           ! 5660                             2560,
32933 84DE                      0A00            .word	$A00
32934                                           ! 5661                        640,
32935 84E0                      0280            .word	$280
32936                                           ! 5662                        400,
32937 84E2                      0190            .word	$190
32938                                           ! 5663                      8,
32939 84E4                        08            .byte	8
32940                                           ! 5664                      16,
32941 84E5                        10            .byte	$10
32942                                           ! 5665                           1,
32943 84E6                        01            .byte	1
32944                                           ! 5666                         32,
32945 84E7                        20            .byte	$20
32946                                           ! 5667                          16,
32947 84E8                        10            .byte	$10
32948                                           ! 5668                        0x06,
32949 84E9                        06            .byte	6
32950                                           ! 5669                     0,
32951 84EA                        00            .byte	0
32952                                           ! 5670                               15,
32953 84EB                        0F            .byte	$F
32954                                           ! 5671                          0,
32955 84EC                        00            .byte	0
32956                                           ! 5672                        8,
32957 84ED                        08            .byte	8
32958                                           ! 5673        
32959                                           ! 5673                      16,
32960 84EE                        10            .byte	$10
32961                                           ! 5674                          8,
32962 84EF                        08            .byte	8
32963                                           ! 5675                               8,
32964 84F0                        08            .byte	8
32965                                           ! 5676                         8,
32966 84F1                        08            .byte	8
32967                                           ! 5677                              0,
32968 84F2                        00            .byte	0
32969                                           ! 5678                         8,
32970 84F3                        08            .byte	8
32971                                           ! 5679                              24,
32972 84F4                        18            .byte	$18
32973                                           ! 5680                                0x02,
32974 84F5                        02            .byte	2
32975                                           ! 5681                        0xE0000000,
32976 84F6                      0000            .word	0
32977 84F8                      E000            .word	$E000
32978                                           ! 5682                               0,
32979 84FA                      0000            .word	0
32980 84FC                      0000            .word	0
32981                                           ! 5683                             0,
32982 84FE                      0000            .word	0
32983                                           ! 5684                                2560,
32984 8500                      0A00            .word	$A00
32985                                           ! 5685                             0,
32986 8502                        00            .byte	0
32987                                           ! 5686                             0,
32988 8503                        00            .byte	0
32989                                           ! 5687                           8,
32990 8504                        08            .byte	8
32991                                           ! 5688                                16,
32992 8505                        10            .byte	$10
32993                                           ! 5689                             8,
32994 8506                        08            .byte	8
32995                                           ! 5690                                  8,
32996 8507                        08            .byte	8
32997                                           ! 5691                            8,
32998 8508                        08            .byte	8
32999                                           ! 5692                                 0,
33000 8509                        00            .byte	0
33001                                           ! 5693                            8,
33002 850A                        08            .byte	8
33003                                           ! 5694                                 24,
33004 850B                        18            .byte	$18
33005                                           ! 5695                          0,
33006 850C                      0000            .word	0
33007 850E                      0000            .word	0
33008                                           ! 5696 } },
33009                                           ! 5697 { 0x0142,
33010 8510                      0142            .word	$142
33011                                           ! 5698 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33012 8512                      009B            .word	$9B
33013                                           ! 5699                           0x01 | 0x02 | 0x04,
33014 8514                        07            .byte	7
33015                                           ! 5700                           0,
33016 8515                        00            .byte	0
33017                                           ! 5701                           64,
33018 8516                      0040            .word	$40
33019                                           ! 5702                    64,
33020 8518                      0040            .word	$40
33021                                           ! 5703                        0xA000,
33022 851A                      A000            .word	$A000
33023                                           ! 5704                        0x0000,
33024 851C                      0000            .word	0
33025                                           ! 5705                       0,
33026 851E                      0000            .word	0
33027 8520                      0000            .word	0
33028                                           ! 5706                             2560,
33029 8522                      0A00            .word	$A00
33030                                           ! 5707                        640,
33031 8524                      0280            .word	$280
33032                                           ! 5708                        480,
33033 8526                      01E0            .word	$1E0
33034                                           ! 5709                      8,
33035 8528                        08            .byte	8
33036                                           ! 5710                      16,
33037 8529                        10            .byte	$10
33038                                           ! 5711                           1,
33039 852A                        01            .byte	1
33040                                           ! 5712                         32,
33041 852B                        20            .byte	$20
33042                                           ! 5713                          19,
33043 852C                        13            .byte	$13
33044                                           ! 5714                        0x06,
33045 852D                        06            .byte	6
33046                                           ! 5715                     0,
33047 852E                        00            .byte	0
33048                                           ! 5716                               12,
33049 852F                        0C            .byte	$C
33050                                           ! 5717                          0,
33051 8530                        00            .byte	0
33052                                           ! 5718                        8,
33053 8531                        08            .byte	8
33054                                           ! 5719                             16,
33055 8532                        10            .byte	$10
33056                                           ! 5720                          8,
33057 8533                        08            .byte	8
33058                                           ! 5721                               8,
33059 8534                        08            .byte	8
33060                                           ! 5722                         8,
33061 8535                        08            .byte	8
33062                                           ! 5723                              0,
33063 8536                        00            .byte	0
33064                                           ! 5724                         8,
33065 8537                        08            .byte	8
33066                                           ! 5725                              24,
33067 8538                        18            .byte	$18
33068                                           ! 5726                                0x02,
33069 8539                        02            .byte	2
33070                                           ! 5727                        0xE0000000,
33071 853A                      0000            .word	0
33072 853C                      E000            .word	$E000
33073                                           ! 5728                               0,
33074 853E                      0000            .word	0
33075 8540                      0000            .word	0
33076                                           ! 5729                             0,
33077 8542                      0000            .word	0
33078                                           ! 5730                                2560,
33079 8544                      0A00            .word	$A00
33080                                           ! 5731                             0,
33081 8546                        00            .byte	0
33082                                           ! 5732                             0,
33083 8547                        00            .byte	0
33084                                           ! 5733                           8,
33085 8548                        08            .byte	8
33086                                           ! 5734                                16,
33087 8549                        10            .byte	$10
33088                                           ! 5735                             8,
33089 854A                        08            .byte	8
33090                                           ! 5736                                  8,
33091 854B                        08            .byte	8
33092                                           ! 5737                            8,
33093 854C                        08            .byte	8
33094                                           ! 5738                                 0,
33095 854D                        00            .byte	0
33096                                           ! 5739                            8,
33097 854E                        08            .byte	8
33098                                           ! 5740     
33099                                           ! 5740                             24,
33100 854F                        18            .byte	$18
33101                                           ! 5741                          0,
33102 8550                      0000            .word	0
33103 8552                      0000            .word	0
33104                                           ! 5742 } },
33105                                           ! 5743 { 0x0143,
33106 8554                      0143            .word	$143
33107                                           ! 5744 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33108 8556                      009B            .word	$9B
33109                                           ! 5745                           0x01 | 0x02 | 0x04,
33110 8558                        07            .byte	7
33111                                           ! 5746                           0,
33112 8559                        00            .byte	0
33113                                           ! 5747                           64,
33114 855A                      0040            .word	$40
33115                                           ! 5748                    64,
33116 855C                      0040            .word	$40
33117                                           ! 5749                        0xA000,
33118 855E                      A000            .word	$A000
33119                                           ! 5750                        0x0000,
33120 8560                      0000            .word	0
33121                                           ! 5751                       0,
33122 8562                      0000            .word	0
33123 8564                      0000            .word	0
33124                                           ! 5752                             3200,
33125 8566                      0C80            .word	$C80
33126                                           ! 5753                        800,
33127 8568                      0320            .word	$320
33128                                           ! 5754                        600,
33129 856A                      0258            .word	$258
33130                                           ! 5755                      8,
33131 856C                        08            .byte	8
33132                                           ! 5756                      16,
33133 856D                        10            .byte	$10
33134                                           ! 5757                           1,
33135 856E                        01            .byte	1
33136                                           ! 5758                         32,
33137 856F                        20            .byte	$20
33138                                           ! 5759                          30,
33139 8570                        1E            .byte	$1E
33140                                           ! 5760                        0x06,
33141 8571                        06            .byte	6
33142                                           ! 5761                     0,
33143 8572                        00            .byte	0
33144                                           ! 5762                               7,
33145 8573                        07            .byte	7
33146                                           ! 5763                          0,
33147 8574                        00            .byte	0
33148                                           ! 5764                        8,
33149 8575                        08            .byte	8
33150                                           ! 5765                             16,
33151 8576                        10            .byte	$10
33152                                           ! 5766                          8,
33153 8577                        08            .byte	8
33154                                           ! 5767                               8,
33155 8578                        08            .byte	8
33156                                           ! 5768                         8,
33157 8579                        08            .byte	8
33158                                           ! 5769                              0,
33159 857A                        00            .byte	0
33160                                           ! 5770                         8,
33161 857B                        08            .byte	8
33162                                           ! 5771                              24,
33163 857C                        18            .byte	$18
33164                                           ! 5772                                0x02,
33165 857D                        02            .byte	2
33166                                           ! 5773                        0xE0000000,
33167 857E                      0000            .word	0
33168 8580                      E000            .word	$E000
33169                                           ! 5774                               0,
33170 8582                      0000            .word	0
33171 8584                      0000            .word	0
33172                                           ! 5775                             0,
33173 8586                      0000            .word	0
33174                                           ! 5776                                3200,
33175 8588                      0C80            .word	$C80
33176                                           ! 5777                             0,
33177 858A                        00            .byte	0
33178                                           ! 5778                             0,
33179 858B                        00            .byte	0
33180                                           ! 5779                           8,
33181 858C                        08            .byte	8
33182                                           ! 5780                                16,
33183 858D                        10            .byte	$10
33184                                           ! 5781                             8,
33185 858E                        08            .byte	8
33186                                           ! 5782                                  8,
33187 858F                        08            .byte	8
33188                                           ! 5783                            8,
33189 8590                        08            .byte	8
33190                                           ! 5784                                 0,
33191 8591                        00            .byte	0
33192                                           ! 5785                            8,
33193 8592                        08            .byte	8
33194                                           ! 5786                                 24,
33195 8593                        18            .byte	$18
33196                                           ! 5787                          0,
33197 8594                      0000            .word	0
33198 8596                      0000            .word	0
33199                                           ! 5788 } },
33200                                           ! 5789 { 0x0144,
33201 8598                      0144            .word	$144
33202                                           ! 5790 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33203 859A                      009B            .word	$9B
33204                                           ! 5791                           0x01 | 0x02 | 0x04,
33205 859C                        07            .byte	7
33206                                           ! 5792                           0,
33207 859D                        00            .byte	0
33208                                           ! 5793                           64,
33209 859E                      0040            .word	$40
33210                                           ! 5794                    64,
33211 85A0                      0040            .word	$40
33212                                           ! 5795                        0xA000,
33213 85A2                      A000            .word	$A000
33214                                           ! 5796                        0x0000,
33215 85A4                      0000            .word	0
33216                                           ! 5797                       0,
33217 85A6                      0000            .word	0
33218 85A8                      0000            .word	0
33219                                           ! 5798                             4096,
33220 85AA                      1000            .word	$1000
33221                                           ! 5799                        1024,
33222 85AC                      0400            .word	$400
33223                                           ! 5800                        768,
33224 85AE                      0300            .word	$300
33225                                           ! 5801                      8,
33226 85B0                        08            .byte	8
33227                                           ! 5802                      16,
33228 85B1                        10            .byte	$10
33229                                           ! 5803                           1,
33230 85B2                        01            .byte	1
33231                                           ! 5804                         32,
33232 85B3                        20            .byte	$20
33233                                           ! 5805                          48,
33234 85B4                        30            .byte	$30
33235                                           ! 5806                        0x06,
33236 85B5                        06            .byte	6
33237                                           ! 5807                     0,
33238 85B6                        00            .byte	0
33239                                           ! 5808                               4,
33240 85B7                        04            .byte	4
33241                                           ! 5809                         
33242                                           ! 5809  0,
33243 85B8                        00            .byte	0
33244                                           ! 5810                        8,
33245 85B9                        08            .byte	8
33246                                           ! 5811                             16,
33247 85BA                        10            .byte	$10
33248                                           ! 5812                          8,
33249 85BB                        08            .byte	8
33250                                           ! 5813                               8,
33251 85BC                        08            .byte	8
33252                                           ! 5814                         8,
33253 85BD                        08            .byte	8
33254                                           ! 5815                              0,
33255 85BE                        00            .byte	0
33256                                           ! 5816                         8,
33257 85BF                        08            .byte	8
33258                                           ! 5817                              24,
33259 85C0                        18            .byte	$18
33260                                           ! 5818                                0x02,
33261 85C1                        02            .byte	2
33262                                           ! 5819                        0xE0000000,
33263 85C2                      0000            .word	0
33264 85C4                      E000            .word	$E000
33265                                           ! 5820                               0,
33266 85C6                      0000            .word	0
33267 85C8                      0000            .word	0
33268                                           ! 5821                             0,
33269 85CA                      0000            .word	0
33270                                           ! 5822                                4096,
33271 85CC                      1000            .word	$1000
33272                                           ! 5823                             0,
33273 85CE                        00            .byte	0
33274                                           ! 5824                             0,
33275 85CF                        00            .byte	0
33276                                           ! 5825                           8,
33277 85D0                        08            .byte	8
33278                                           ! 5826                                16,
33279 85D1                        10            .byte	$10
33280                                           ! 5827                             8,
33281 85D2                        08            .byte	8
33282                                           ! 5828                                  8,
33283 85D3                        08            .byte	8
33284                                           ! 5829                            8,
33285 85D4                        08            .byte	8
33286                                           ! 5830                                 0,
33287 85D5                        00            .byte	0
33288                                           ! 5831                            8,
33289 85D6                        08            .byte	8
33290                                           ! 5832                                 24,
33291 85D7                        18            .byte	$18
33292                                           ! 5833                          0,
33293 85D8                      0000            .word	0
33294 85DA                      0000            .word	0
33295                                           ! 5834 } },
33296                                           ! 5835 { 0x0145,
33297 85DC                      0145            .word	$145
33298                                           ! 5836 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33299 85DE                      009B            .word	$9B
33300                                           ! 5837                           0x01 | 0x02 | 0x04,
33301 85E0                        07            .byte	7
33302                                           ! 5838                           0,
33303 85E1                        00            .byte	0
33304                                           ! 5839                           64,
33305 85E2                      0040            .word	$40
33306                                           ! 5840                    64,
33307 85E4                      0040            .word	$40
33308                                           ! 5841                        0xA000,
33309 85E6                      A000            .word	$A000
33310                                           ! 5842                        0x0000,
33311 85E8                      0000            .word	0
33312                                           ! 5843                       0,
33313 85EA                      0000            .word	0
33314 85EC                      0000            .word	0
33315                                           ! 5844                             5120,
33316 85EE                      1400            .word	$1400
33317                                           ! 5845                        1280,
33318 85F0                      0500            .word	$500
33319                                           ! 5846                        1024,
33320 85F2                      0400            .word	$400
33321                                           ! 5847                      8,
33322 85F4                        08            .byte	8
33323                                           ! 5848                      16,
33324 85F5                        10            .byte	$10
33325                                           ! 5849                           1,
33326 85F6                        01            .byte	1
33327                                           ! 5850                         32,
33328 85F7                        20            .byte	$20
33329                                           ! 5851                          80,
33330 85F8                        50            .byte	$50
33331                                           ! 5852                        0x06,
33332 85F9                        06            .byte	6
33333                                           ! 5853                     0,
33334 85FA                        00            .byte	0
33335                                           ! 5854                               2,
33336 85FB                        02            .byte	2
33337                                           ! 5855                          0,
33338 85FC                        00            .byte	0
33339                                           ! 5856                        8,
33340 85FD                        08            .byte	8
33341                                           ! 5857                             16,
33342 85FE                        10            .byte	$10
33343                                           ! 5858                          8,
33344 85FF                        08            .byte	8
33345                                           ! 5859                               8,
33346 8600                        08            .byte	8
33347                                           ! 5860                         8,
33348 8601                        08            .byte	8
33349                                           ! 5861                              0,
33350 8602                        00            .byte	0
33351                                           ! 5862                         8,
33352 8603                        08            .byte	8
33353                                           ! 5863                              24,
33354 8604                        18            .byte	$18
33355                                           ! 5864                                0x02,
33356 8605                        02            .byte	2
33357                                           ! 5865                        0xE0000000,
33358 8606                      0000            .word	0
33359 8608                      E000            .word	$E000
33360                                           ! 5866                               0,
33361 860A                      0000            .word	0
33362 860C                      0000            .word	0
33363                                           ! 5867                             0,
33364 860E                      0000            .word	0
33365                                           ! 5868                                5120,
33366 8610                      1400            .word	$1400
33367                                           ! 5869                             0,
33368 8612                        00            .byte	0
33369                                           ! 5870                             0,
33370 8613                        00            .byte	0
33371                                           ! 5871                           8,
33372 8614                        08            .byte	8
33373                                           ! 5872                                16,
33374 8615                        10            .byte	$10
33375                                           ! 5873                             8,
33376 8616                        08            .byte	8
33377                                           ! 5874                                  8,
33378 8617                        08            .byte	8
33379                                           ! 5875                            8,
33380 8618                        08            .byte	8
33381                                           ! 5876                                
33382                                           ! 5876  0,
33383 8619                        00            .byte	0
33384                                           ! 5877                            8,
33385 861A                        08            .byte	8
33386                                           ! 5878                                 24,
33387 861B                        18            .byte	$18
33388                                           ! 5879                          0,
33389 861C                      0000            .word	0
33390 861E                      0000            .word	0
33391                                           ! 5880 } },
33392                                           ! 5881 { 0x0146,
33393 8620                      0146            .word	$146
33394                                           ! 5882 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33395 8622                      009B            .word	$9B
33396                                           ! 5883                           0x01 | 0x02 | 0x04,
33397 8624                        07            .byte	7
33398                                           ! 5884                           0,
33399 8625                        00            .byte	0
33400                                           ! 5885                           64,
33401 8626                      0040            .word	$40
33402                                           ! 5886                    64,
33403 8628                      0040            .word	$40
33404                                           ! 5887                        0xA000,
33405 862A                      A000            .word	$A000
33406                                           ! 5888                        0x0000,
33407 862C                      0000            .word	0
33408                                           ! 5889                       0,
33409 862E                      0000            .word	0
33410 8630                      0000            .word	0
33411                                           ! 5890                             320,
33412 8632                      0140            .word	$140
33413                                           ! 5891                        320,
33414 8634                      0140            .word	$140
33415                                           ! 5892                        200,
33416 8636                      00C8            .word	$C8
33417                                           ! 5893                      8,
33418 8638                        08            .byte	8
33419                                           ! 5894                      16,
33420 8639                        10            .byte	$10
33421                                           ! 5895                           1,
33422 863A                        01            .byte	1
33423                                           ! 5896                         8,
33424 863B                        08            .byte	8
33425                                           ! 5897                          1,
33426 863C                        01            .byte	1
33427                                           ! 5898                        0x04,
33428 863D                        04            .byte	4
33429                                           ! 5899                     0,
33430 863E                        00            .byte	0
33431                                           ! 5900                               261,
33432 863F                        05            .byte	5
33433                                           ! 5901                          0,
33434 8640                        00            .byte	0
33435                                           ! 5902                        0,
33436 8641                        00            .byte	0
33437                                           ! 5903                             0,
33438 8642                        00            .byte	0
33439                                           ! 5904                          0,
33440 8643                        00            .byte	0
33441                                           ! 5905                               0,
33442 8644                        00            .byte	0
33443                                           ! 5906                         0,
33444 8645                        00            .byte	0
33445                                           ! 5907                              0,
33446 8646                        00            .byte	0
33447                                           ! 5908                         0,
33448 8647                        00            .byte	0
33449                                           ! 5909                              0,
33450 8648                        00            .byte	0
33451                                           ! 5910                                0,
33452 8649                        00            .byte	0
33453                                           ! 5911                        0xE0000000,
33454 864A                      0000            .word	0
33455 864C                      E000            .word	$E000
33456                                           ! 5912                               0,
33457 864E                      0000            .word	0
33458 8650                      0000            .word	0
33459                                           ! 5913                             0,
33460 8652                      0000            .word	0
33461                                           ! 5914                                320,
33462 8654                      0140            .word	$140
33463                                           ! 5915                             0,
33464 8656                        00            .byte	0
33465                                           ! 5916                             0,
33466 8657                        00            .byte	0
33467                                           ! 5917                           0,
33468 8658                        00            .byte	0
33469                                           ! 5918                                0,
33470 8659                        00            .byte	0
33471                                           ! 5919                             0,
33472 865A                        00            .byte	0
33473                                           ! 5920                                  0,
33474 865B                        00            .byte	0
33475                                           ! 5921                            0,
33476 865C                        00            .byte	0
33477                                           ! 5922                                 0,
33478 865D                        00            .byte	0
33479                                           ! 5923                            0,
33480 865E                        00            .byte	0
33481                                           ! 5924                                 0,
33482 865F                        00            .byte	0
33483                                           ! 5925                          0,
33484 8660                      0000            .word	0
33485 8662                      0000            .word	0
33486                                           ! 5926 } },
33487                                           ! 5927 { 0x0147,
33488 8664                      0147            .word	$147
33489                                           ! 5928 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33490 8666                      009B            .word	$9B
33491                                           ! 5929                           0x01 | 0x02 | 0x04,
33492 8668                        07            .byte	7
33493                                           ! 5930                           0,
33494 8669                        00            .byte	0
33495                                           ! 5931                           64,
33496 866A                      0040            .word	$40
33497                                           ! 5932                    64,
33498 866C                      0040            .word	$40
33499                                           ! 5933                        0xA000,
33500 866E                      A000            .word	$A000
33501                                           ! 5934                        0x0000,
33502 8670                      0000            .word	0
33503                                           ! 5935                       0,
33504 8672                      0000            .word	0
33505 8674                      0000            .word	0
33506                                           ! 5936                             6400,
33507 8676                      1900            .word	$1900
33508                                           ! 5937                        1600,
33509 8678                      0640            .word	$640
33510                                           ! 5938                        1200,
33511 867A                      04B0            .word	$4B0
33512                                           ! 5939                      8,
33513 867C                        08            .byte	8
33514                                           ! 5940                      16,
33515 867D                        10            .byte	$10
33516                                           ! 5941                           1,
33517 867E                        01            .byte	1
33518                                           ! 5942                         32,
33519 867F                        20            .byte	$20
33520                                           ! 5943                          118,
33521 8680                        76            .byte	$76
33522                                           ! 5944                        0x06,
33523 8681                        06            .byte	6
33524                                           ! 5945                     0,
33525 8682                        00            .byte	0
33526                                           ! 5946                           
33527                                           ! 5946     1,
33528 8683                        01            .byte	1
33529                                           ! 5947                          0,
33530 8684                        00            .byte	0
33531                                           ! 5948                        8,
33532 8685                        08            .byte	8
33533                                           ! 5949                             16,
33534 8686                        10            .byte	$10
33535                                           ! 5950                          8,
33536 8687                        08            .byte	8
33537                                           ! 5951                               8,
33538 8688                        08            .byte	8
33539                                           ! 5952                         8,
33540 8689                        08            .byte	8
33541                                           ! 5953                              0,
33542 868A                        00            .byte	0
33543                                           ! 5954                         8,
33544 868B                        08            .byte	8
33545                                           ! 5955                              24,
33546 868C                        18            .byte	$18
33547                                           ! 5956                                0x02,
33548 868D                        02            .byte	2
33549                                           ! 5957                        0xE0000000,
33550 868E                      0000            .word	0
33551 8690                      E000            .word	$E000
33552                                           ! 5958                               0,
33553 8692                      0000            .word	0
33554 8694                      0000            .word	0
33555                                           ! 5959                             0,
33556 8696                      0000            .word	0
33557                                           ! 5960                                6400,
33558 8698                      1900            .word	$1900
33559                                           ! 5961                             0,
33560 869A                        00            .byte	0
33561                                           ! 5962                             0,
33562 869B                        00            .byte	0
33563                                           ! 5963                           8,
33564 869C                        08            .byte	8
33565                                           ! 5964                                16,
33566 869D                        10            .byte	$10
33567                                           ! 5965                             8,
33568 869E                        08            .byte	8
33569                                           ! 5966                                  8,
33570 869F                        08            .byte	8
33571                                           ! 5967                            8,
33572 86A0                        08            .byte	8
33573                                           ! 5968                                 0,
33574 86A1                        00            .byte	0
33575                                           ! 5969                            8,
33576 86A2                        08            .byte	8
33577                                           ! 5970                                 24,
33578 86A3                        18            .byte	$18
33579                                           ! 5971                          0,
33580 86A4                      0000            .word	0
33581 86A6                      0000            .word	0
33582                                           ! 5972 } },
33583                                           ! 5973 { 0x0148,
33584 86A8                      0148            .word	$148
33585                                           ! 5974 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33586 86AA                      009B            .word	$9B
33587                                           ! 5975                           0x01 | 0x02 | 0x04,
33588 86AC                        07            .byte	7
33589                                           ! 5976                           0,
33590 86AD                        00            .byte	0
33591                                           ! 5977                           64,
33592 86AE                      0040            .word	$40
33593                                           ! 5978                    64,
33594 86B0                      0040            .word	$40
33595                                           ! 5979                        0xA000,
33596 86B2                      A000            .word	$A000
33597                                           ! 5980                        0x0000,
33598 86B4                      0000            .word	0
33599                                           ! 5981                       0,
33600 86B6                      0000            .word	0
33601 86B8                      0000            .word	0
33602                                           ! 5982                             1152,
33603 86BA                      0480            .word	$480
33604                                           ! 5983                        1152,
33605 86BC                      0480            .word	$480
33606                                           ! 5984                        864,
33607 86BE                      0360            .word	$360
33608                                           ! 5985                      8,
33609 86C0                        08            .byte	8
33610                                           ! 5986                      16,
33611 86C1                        10            .byte	$10
33612                                           ! 5987                           1,
33613 86C2                        01            .byte	1
33614                                           ! 5988                         8,
33615 86C3                        08            .byte	8
33616                                           ! 5989                          16,
33617 86C4                        10            .byte	$10
33618                                           ! 5990                        0x04,
33619 86C5                        04            .byte	4
33620                                           ! 5991                     0,
33621 86C6                        00            .byte	0
33622                                           ! 5992                               15,
33623 86C7                        0F            .byte	$F
33624                                           ! 5993                          0,
33625 86C8                        00            .byte	0
33626                                           ! 5994                        0,
33627 86C9                        00            .byte	0
33628                                           ! 5995                             0,
33629 86CA                        00            .byte	0
33630                                           ! 5996                          0,
33631 86CB                        00            .byte	0
33632                                           ! 5997                               0,
33633 86CC                        00            .byte	0
33634                                           ! 5998                         0,
33635 86CD                        00            .byte	0
33636                                           ! 5999                              0,
33637 86CE                        00            .byte	0
33638                                           ! 6000                         0,
33639 86CF                        00            .byte	0
33640                                           ! 6001                              0,
33641 86D0                        00            .byte	0
33642                                           ! 6002                                0,
33643 86D1                        00            .byte	0
33644                                           ! 6003                        0xE0000000,
33645 86D2                      0000            .word	0
33646 86D4                      E000            .word	$E000
33647                                           ! 6004                               0,
33648 86D6                      0000            .word	0
33649 86D8                      0000            .word	0
33650                                           ! 6005                             0,
33651 86DA                      0000            .word	0
33652                                           ! 6006                                1152,
33653 86DC                      0480            .word	$480
33654                                           ! 6007                             0,
33655 86DE                        00            .byte	0
33656                                           ! 6008                             0,
33657 86DF                        00            .byte	0
33658                                           ! 6009                           0,
33659 86E0                        00            .byte	0
33660                                           ! 6010                                0,
33661 86E1                        00            .byte	0
33662                                           ! 6011                             0,
33663 86E2                        00            .byte	0
33664                                           ! 6012                                  0,
33665 86E3                        00            .byte	0
33666                                           ! 6013                            0,
33667 86E4                        00            .byte	0
33668                                           ! 6014        
33669                                           ! 6014                          0,
33670 86E5                        00            .byte	0
33671                                           ! 6015                            0,
33672 86E6                        00            .byte	0
33673                                           ! 6016                                 0,
33674 86E7                        00            .byte	0
33675                                           ! 6017                          0,
33676 86E8                      0000            .word	0
33677 86EA                      0000            .word	0
33678                                           ! 6018 } },
33679                                           ! 6019 { 0x0149,
33680 86EC                      0149            .word	$149
33681                                           ! 6020 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33682 86EE                      009B            .word	$9B
33683                                           ! 6021                           0x01 | 0x02 | 0x04,
33684 86F0                        07            .byte	7
33685                                           ! 6022                           0,
33686 86F1                        00            .byte	0
33687                                           ! 6023                           64,
33688 86F2                      0040            .word	$40
33689                                           ! 6024                    64,
33690 86F4                      0040            .word	$40
33691                                           ! 6025                        0xA000,
33692 86F6                      A000            .word	$A000
33693                                           ! 6026                        0x0000,
33694 86F8                      0000            .word	0
33695                                           ! 6027                       0,
33696 86FA                      0000            .word	0
33697 86FC                      0000            .word	0
33698                                           ! 6028                             2304,
33699 86FE                      0900            .word	$900
33700                                           ! 6029                        1152,
33701 8700                      0480            .word	$480
33702                                           ! 6030                        864,
33703 8702                      0360            .word	$360
33704                                           ! 6031                      8,
33705 8704                        08            .byte	8
33706                                           ! 6032                      16,
33707 8705                        10            .byte	$10
33708                                           ! 6033                           1,
33709 8706                        01            .byte	1
33710                                           ! 6034                         15,
33711 8707                        0F            .byte	$F
33712                                           ! 6035                          31,
33713 8708                        1F            .byte	$1F
33714                                           ! 6036                        0x06,
33715 8709                        06            .byte	6
33716                                           ! 6037                     0,
33717 870A                        00            .byte	0
33718                                           ! 6038                               7,
33719 870B                        07            .byte	7
33720                                           ! 6039                          0,
33721 870C                        00            .byte	0
33722                                           ! 6040                        5,
33723 870D                        05            .byte	5
33724                                           ! 6041                             10,
33725 870E                        0A            .byte	$A
33726                                           ! 6042                          5,
33727 870F                        05            .byte	5
33728                                           ! 6043                               5,
33729 8710                        05            .byte	5
33730                                           ! 6044                         5,
33731 8711                        05            .byte	5
33732                                           ! 6045                              0,
33733 8712                        00            .byte	0
33734                                           ! 6046                         1,
33735 8713                        01            .byte	1
33736                                           ! 6047                              15,
33737 8714                        0F            .byte	$F
33738                                           ! 6048                                0,
33739 8715                        00            .byte	0
33740                                           ! 6049                        0xE0000000,
33741 8716                      0000            .word	0
33742 8718                      E000            .word	$E000
33743                                           ! 6050                               0,
33744 871A                      0000            .word	0
33745 871C                      0000            .word	0
33746                                           ! 6051                             0,
33747 871E                      0000            .word	0
33748                                           ! 6052                                2304,
33749 8720                      0900            .word	$900
33750                                           ! 6053                             0,
33751 8722                        00            .byte	0
33752                                           ! 6054                             0,
33753 8723                        00            .byte	0
33754                                           ! 6055                           5,
33755 8724                        05            .byte	5
33756                                           ! 6056                                10,
33757 8725                        0A            .byte	$A
33758                                           ! 6057                             5,
33759 8726                        05            .byte	5
33760                                           ! 6058                                  5,
33761 8727                        05            .byte	5
33762                                           ! 6059                            5,
33763 8728                        05            .byte	5
33764                                           ! 6060                                 0,
33765 8729                        00            .byte	0
33766                                           ! 6061                            1,
33767 872A                        01            .byte	1
33768                                           ! 6062                                 15,
33769 872B                        0F            .byte	$F
33770                                           ! 6063                          0,
33771 872C                      0000            .word	0
33772 872E                      0000            .word	0
33773                                           ! 6064 } },
33774                                           ! 6065 { 0x014a,
33775 8730                      014A            .word	$14A
33776                                           ! 6066 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33777 8732                      009B            .word	$9B
33778                                           ! 6067                           0x01 | 0x02 | 0x04,
33779 8734                        07            .byte	7
33780                                           ! 6068                           0,
33781 8735                        00            .byte	0
33782                                           ! 6069                           64,
33783 8736                      0040            .word	$40
33784                                           ! 6070                    64,
33785 8738                      0040            .word	$40
33786                                           ! 6071                        0xA000,
33787 873A                      A000            .word	$A000
33788                                           ! 6072                        0x0000,
33789 873C                      0000            .word	0
33790                                           ! 6073                       0,
33791 873E                      0000            .word	0
33792 8740                      0000            .word	0
33793                                           ! 6074                             2304,
33794 8742                      0900            .word	$900
33795                                           ! 6075                        1152,
33796 8744                      0480            .word	$480
33797                                           ! 6076                        864,
33798 8746                      0360            .word	$360
33799                                           ! 6077                      8,
33800 8748                        08            .byte	8
33801                                           ! 6078                      16,
33802 8749                        10            .byte	$10
33803                                           ! 6079                           1,
33804 874A                        01            .byte	1
33805                                           ! 6080                         16,
33806 874B                        10            .byte	$10
33807                                           ! 6081                          31,
33808 874C                        1F            .byte	$1F
33809                                           ! 6082                        0x06,
33810 874D                        06            .byte	6
33811                                           ! 6083                     0
33812                                           ! 6083 ,
33813 874E                        00            .byte	0
33814                                           ! 6084                               7,
33815 874F                        07            .byte	7
33816                                           ! 6085                          0,
33817 8750                        00            .byte	0
33818                                           ! 6086                        5,
33819 8751                        05            .byte	5
33820                                           ! 6087                             11,
33821 8752                        0B            .byte	$B
33822                                           ! 6088                          6,
33823 8753                        06            .byte	6
33824                                           ! 6089                               5,
33825 8754                        05            .byte	5
33826                                           ! 6090                         5,
33827 8755                        05            .byte	5
33828                                           ! 6091                              0,
33829 8756                        00            .byte	0
33830                                           ! 6092                         0,
33831 8757                        00            .byte	0
33832                                           ! 6093                              0,
33833 8758                        00            .byte	0
33834                                           ! 6094                                0,
33835 8759                        00            .byte	0
33836                                           ! 6095                        0xE0000000,
33837 875A                      0000            .word	0
33838 875C                      E000            .word	$E000
33839                                           ! 6096                               0,
33840 875E                      0000            .word	0
33841 8760                      0000            .word	0
33842                                           ! 6097                             0,
33843 8762                      0000            .word	0
33844                                           ! 6098                                2304,
33845 8764                      0900            .word	$900
33846                                           ! 6099                             0,
33847 8766                        00            .byte	0
33848                                           ! 6100                             0,
33849 8767                        00            .byte	0
33850                                           ! 6101                           5,
33851 8768                        05            .byte	5
33852                                           ! 6102                                11,
33853 8769                        0B            .byte	$B
33854                                           ! 6103                             6,
33855 876A                        06            .byte	6
33856                                           ! 6104                                  5,
33857 876B                        05            .byte	5
33858                                           ! 6105                            5,
33859 876C                        05            .byte	5
33860                                           ! 6106                                 0,
33861 876D                        00            .byte	0
33862                                           ! 6107                            0,
33863 876E                        00            .byte	0
33864                                           ! 6108                                 0,
33865 876F                        00            .byte	0
33866                                           ! 6109                          0,
33867 8770                      0000            .word	0
33868 8772                      0000            .word	0
33869                                           ! 6110 } },
33870                                           ! 6111 { 0x014b,
33871 8774                      014B            .word	$14B
33872                                           ! 6112 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33873 8776                      009B            .word	$9B
33874                                           ! 6113                           0x01 | 0x02 | 0x04,
33875 8778                        07            .byte	7
33876                                           ! 6114                           0,
33877 8779                        00            .byte	0
33878                                           ! 6115                           64,
33879 877A                      0040            .word	$40
33880                                           ! 6116                    64,
33881 877C                      0040            .word	$40
33882                                           ! 6117                        0xA000,
33883 877E                      A000            .word	$A000
33884                                           ! 6118                        0x0000,
33885 8780                      0000            .word	0
33886                                           ! 6119                       0,
33887 8782                      0000            .word	0
33888 8784                      0000            .word	0
33889                                           ! 6120                             3456,
33890 8786                      0D80            .word	$D80
33891                                           ! 6121                        1152,
33892 8788                      0480            .word	$480
33893                                           ! 6122                        864,
33894 878A                      0360            .word	$360
33895                                           ! 6123                      8,
33896 878C                        08            .byte	8
33897                                           ! 6124                      16,
33898 878D                        10            .byte	$10
33899                                           ! 6125                           1,
33900 878E                        01            .byte	1
33901                                           ! 6126                         24,
33902 878F                        18            .byte	$18
33903                                           ! 6127                          46,
33904 8790                        2E            .byte	$2E
33905                                           ! 6128                        0x06,
33906 8791                        06            .byte	6
33907                                           ! 6129                     0,
33908 8792                        00            .byte	0
33909                                           ! 6130                               4,
33910 8793                        04            .byte	4
33911                                           ! 6131                          0,
33912 8794                        00            .byte	0
33913                                           ! 6132                        8,
33914 8795                        08            .byte	8
33915                                           ! 6133                             16,
33916 8796                        10            .byte	$10
33917                                           ! 6134                          8,
33918 8797                        08            .byte	8
33919                                           ! 6135                               8,
33920 8798                        08            .byte	8
33921                                           ! 6136                         8,
33922 8799                        08            .byte	8
33923                                           ! 6137                              0,
33924 879A                        00            .byte	0
33925                                           ! 6138                         0,
33926 879B                        00            .byte	0
33927                                           ! 6139                              0,
33928 879C                        00            .byte	0
33929                                           ! 6140                                0,
33930 879D                        00            .byte	0
33931                                           ! 6141                        0xE0000000,
33932 879E                      0000            .word	0
33933 87A0                      E000            .word	$E000
33934                                           ! 6142                               0,
33935 87A2                      0000            .word	0
33936 87A4                      0000            .word	0
33937                                           ! 6143                             0,
33938 87A6                      0000            .word	0
33939                                           ! 6144                                3456,
33940 87A8                      0D80            .word	$D80
33941                                           ! 6145                             0,
33942 87AA                        00            .byte	0
33943                                           ! 6146                             0,
33944 87AB                        00            .byte	0
33945                                           ! 6147                           8,
33946 87AC                        08            .byte	8
33947                                           ! 6148                                16,
33948 87AD                        10            .byte	$10
33949                                           ! 6149                             8,
33950 87AE                        08            .byte	8
33951                                           ! 6150                                  8,
33952 87AF                        08            .byte	8
33953                                           ! 6151             
33954                                           ! 6151                8,
33955 87B0                        08            .byte	8
33956                                           ! 6152                                 0,
33957 87B1                        00            .byte	0
33958                                           ! 6153                            0,
33959 87B2                        00            .byte	0
33960                                           ! 6154                                 0,
33961 87B3                        00            .byte	0
33962                                           ! 6155                          0,
33963 87B4                      0000            .word	0
33964 87B6                      0000            .word	0
33965                                           ! 6156 } },
33966                                           ! 6157 { 0x014c,
33967 87B8                      014C            .word	$14C
33968                                           ! 6158 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33969 87BA                      009B            .word	$9B
33970                                           ! 6159                           0x01 | 0x02 | 0x04,
33971 87BC                        07            .byte	7
33972                                           ! 6160                           0,
33973 87BD                        00            .byte	0
33974                                           ! 6161                           64,
33975 87BE                      0040            .word	$40
33976                                           ! 6162                    64,
33977 87C0                      0040            .word	$40
33978                                           ! 6163                        0xA000,
33979 87C2                      A000            .word	$A000
33980                                           ! 6164                        0x0000,
33981 87C4                      0000            .word	0
33982                                           ! 6165                       0,
33983 87C6                      0000            .word	0
33984 87C8                      0000            .word	0
33985                                           ! 6166                             4608,
33986 87CA                      1200            .word	$1200
33987                                           ! 6167                        1152,
33988 87CC                      0480            .word	$480
33989                                           ! 6168                        864,
33990 87CE                      0360            .word	$360
33991                                           ! 6169                      8,
33992 87D0                        08            .byte	8
33993                                           ! 6170                      16,
33994 87D1                        10            .byte	$10
33995                                           ! 6171                           1,
33996 87D2                        01            .byte	1
33997                                           ! 6172                         32,
33998 87D3                        20            .byte	$20
33999                                           ! 6173                          61,
34000 87D4                        3D            .byte	$3D
34001                                           ! 6174                        0x06,
34002 87D5                        06            .byte	6
34003                                           ! 6175                     0,
34004 87D6                        00            .byte	0
34005                                           ! 6176                               3,
34006 87D7                        03            .byte	3
34007                                           ! 6177                          0,
34008 87D8                        00            .byte	0
34009                                           ! 6178                        8,
34010 87D9                        08            .byte	8
34011                                           ! 6179                             16,
34012 87DA                        10            .byte	$10
34013                                           ! 6180                          8,
34014 87DB                        08            .byte	8
34015                                           ! 6181                               8,
34016 87DC                        08            .byte	8
34017                                           ! 6182                         8,
34018 87DD                        08            .byte	8
34019                                           ! 6183                              0,
34020 87DE                        00            .byte	0
34021                                           ! 6184                         8,
34022 87DF                        08            .byte	8
34023                                           ! 6185                              24,
34024 87E0                        18            .byte	$18
34025                                           ! 6186                                0x02,
34026 87E1                        02            .byte	2
34027                                           ! 6187                        0xE0000000,
34028 87E2                      0000            .word	0
34029 87E4                      E000            .word	$E000
34030                                           ! 6188                               0,
34031 87E6                      0000            .word	0
34032 87E8                      0000            .word	0
34033                                           ! 6189                             0,
34034 87EA                      0000            .word	0
34035                                           ! 6190                                4608,
34036 87EC                      1200            .word	$1200
34037                                           ! 6191                             0,
34038 87EE                        00            .byte	0
34039                                           ! 6192                             0,
34040 87EF                        00            .byte	0
34041                                           ! 6193                           8,
34042 87F0                        08            .byte	8
34043                                           ! 6194                                16,
34044 87F1                        10            .byte	$10
34045                                           ! 6195                             8,
34046 87F2                        08            .byte	8
34047                                           ! 6196                                  8,
34048 87F3                        08            .byte	8
34049                                           ! 6197                            8,
34050 87F4                        08            .byte	8
34051                                           ! 6198                                 0,
34052 87F5                        00            .byte	0
34053                                           ! 6199                            8,
34054 87F6                        08            .byte	8
34055                                           ! 6200                                 24,
34056 87F7                        18            .byte	$18
34057                                           ! 6201                          0,
34058 87F8                      0000            .word	0
34059 87FA                      0000            .word	0
34060                                           ! 6202 } },
34061                                           ! 6203 { 0x0178,
34062 87FC                      0178            .word	$178
34063                                           ! 6204 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34064 87FE                      009B            .word	$9B
34065                                           ! 6205                           0x01 | 0x02 | 0x04,
34066 8800                        07            .byte	7
34067                                           ! 6206                           0,
34068 8801                        00            .byte	0
34069                                           ! 6207                           64,
34070 8802                      0040            .word	$40
34071                                           ! 6208                    64,
34072 8804                      0040            .word	$40
34073                                           ! 6209                        0xA000,
34074 8806                      A000            .word	$A000
34075                                           ! 6210                        0x0000,
34076 8808                      0000            .word	0
34077                                           ! 6211                       0,
34078 880A                      0000            .word	0
34079 880C                      0000            .word	0
34080                                           ! 6212                             2560,
34081 880E                      0A00            .word	$A00
34082                                           ! 6213                        1280,
34083 8810                      0500            .word	$500
34084                                           ! 6214                        800,
34085 8812                      0320            .word	$320
34086                                           ! 6215                      8,
34087 8814                        08            .byte	8
34088                                           ! 6216                      16,
34089 8815                        10            .byte	$10
34090                                           ! 6217                           1,
34091 8816                        01            .byte	1
34092                                           ! 6218                         16,
34093 8817                        10            .byte	$10
34094                                           ! 6219                          32,
34095 8818                        20            .byte	$20
34096                                           ! 6220                       
34097                                           ! 6220  0x06,
34098 8819                        06            .byte	6
34099                                           ! 6221                     0,
34100 881A                        00            .byte	0
34101                                           ! 6222                               7,
34102 881B                        07            .byte	7
34103                                           ! 6223                          0,
34104 881C                        00            .byte	0
34105                                           ! 6224                        5,
34106 881D                        05            .byte	5
34107                                           ! 6225                             11,
34108 881E                        0B            .byte	$B
34109                                           ! 6226                          6,
34110 881F                        06            .byte	6
34111                                           ! 6227                               5,
34112 8820                        05            .byte	5
34113                                           ! 6228                         5,
34114 8821                        05            .byte	5
34115                                           ! 6229                              0,
34116 8822                        00            .byte	0
34117                                           ! 6230                         0,
34118 8823                        00            .byte	0
34119                                           ! 6231                              0,
34120 8824                        00            .byte	0
34121                                           ! 6232                                0,
34122 8825                        00            .byte	0
34123                                           ! 6233                        0xE0000000,
34124 8826                      0000            .word	0
34125 8828                      E000            .word	$E000
34126                                           ! 6234                               0,
34127 882A                      0000            .word	0
34128 882C                      0000            .word	0
34129                                           ! 6235                             0,
34130 882E                      0000            .word	0
34131                                           ! 6236                                2560,
34132 8830                      0A00            .word	$A00
34133                                           ! 6237                             0,
34134 8832                        00            .byte	0
34135                                           ! 6238                             0,
34136 8833                        00            .byte	0
34137                                           ! 6239                           5,
34138 8834                        05            .byte	5
34139                                           ! 6240                                11,
34140 8835                        0B            .byte	$B
34141                                           ! 6241                             6,
34142 8836                        06            .byte	6
34143                                           ! 6242                                  5,
34144 8837                        05            .byte	5
34145                                           ! 6243                            5,
34146 8838                        05            .byte	5
34147                                           ! 6244                                 0,
34148 8839                        00            .byte	0
34149                                           ! 6245                            0,
34150 883A                        00            .byte	0
34151                                           ! 6246                                 0,
34152 883B                        00            .byte	0
34153                                           ! 6247                          0,
34154 883C                      0000            .word	0
34155 883E                      0000            .word	0
34156                                           ! 6248 } },
34157                                           ! 6249 { 0x0179,
34158 8840                      0179            .word	$179
34159                                           ! 6250 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34160 8842                      009B            .word	$9B
34161                                           ! 6251                           0x01 | 0x02 | 0x04,
34162 8844                        07            .byte	7
34163                                           ! 6252                           0,
34164 8845                        00            .byte	0
34165                                           ! 6253                           64,
34166 8846                      0040            .word	$40
34167                                           ! 6254                    64,
34168 8848                      0040            .word	$40
34169                                           ! 6255                        0xA000,
34170 884A                      A000            .word	$A000
34171                                           ! 6256                        0x0000,
34172 884C                      0000            .word	0
34173                                           ! 6257                       0,
34174 884E                      0000            .word	0
34175 8850                      0000            .word	0
34176                                           ! 6258                             3840,
34177 8852                      0F00            .word	$F00
34178                                           ! 6259                        1280,
34179 8854                      0500            .word	$500
34180                                           ! 6260                        800,
34181 8856                      0320            .word	$320
34182                                           ! 6261                      8,
34183 8858                        08            .byte	8
34184                                           ! 6262                      16,
34185 8859                        10            .byte	$10
34186                                           ! 6263                           1,
34187 885A                        01            .byte	1
34188                                           ! 6264                         24,
34189 885B                        18            .byte	$18
34190                                           ! 6265                          47,
34191 885C                        2F            .byte	$2F
34192                                           ! 6266                        0x06,
34193 885D                        06            .byte	6
34194                                           ! 6267                     0,
34195 885E                        00            .byte	0
34196                                           ! 6268                               4,
34197 885F                        04            .byte	4
34198                                           ! 6269                          0,
34199 8860                        00            .byte	0
34200                                           ! 6270                        8,
34201 8861                        08            .byte	8
34202                                           ! 6271                             16,
34203 8862                        10            .byte	$10
34204                                           ! 6272                          8,
34205 8863                        08            .byte	8
34206                                           ! 6273                               8,
34207 8864                        08            .byte	8
34208                                           ! 6274                         8,
34209 8865                        08            .byte	8
34210                                           ! 6275                              0,
34211 8866                        00            .byte	0
34212                                           ! 6276                         0,
34213 8867                        00            .byte	0
34214                                           ! 6277                              0,
34215 8868                        00            .byte	0
34216                                           ! 6278                                0,
34217 8869                        00            .byte	0
34218                                           ! 6279                        0xE0000000,
34219 886A                      0000            .word	0
34220 886C                      E000            .word	$E000
34221                                           ! 6280                               0,
34222 886E                      0000            .word	0
34223 8870                      0000            .word	0
34224                                           ! 6281                             0,
34225 8872                      0000            .word	0
34226                                           ! 6282                                3840,
34227 8874                      0F00            .word	$F00
34228                                           ! 6283                             0,
34229 8876                        00            .byte	0
34230                                           ! 6284                             0,
34231 8877                        00            .byte	0
34232                                           ! 6285                           8,
34233 8878                        08            .byte	8
34234                                           ! 6286                                16,
34235 8879                        10            .byte	$10
34236                                           ! 6287                             8,
34237 887A                        08            .byte	8
34238                                           ! 6288                     
34239                                           ! 6288              8,
34240 887B                        08            .byte	8
34241                                           ! 6289                            8,
34242 887C                        08            .byte	8
34243                                           ! 6290                                 0,
34244 887D                        00            .byte	0
34245                                           ! 6291                            0,
34246 887E                        00            .byte	0
34247                                           ! 6292                                 0,
34248 887F                        00            .byte	0
34249                                           ! 6293                          0,
34250 8880                      0000            .word	0
34251 8882                      0000            .word	0
34252                                           ! 6294 } },
34253                                           ! 6295 { 0x017a,
34254 8884                      017A            .word	$17A
34255                                           ! 6296 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34256 8886                      009B            .word	$9B
34257                                           ! 6297                           0x01 | 0x02 | 0x04,
34258 8888                        07            .byte	7
34259                                           ! 6298                           0,
34260 8889                        00            .byte	0
34261                                           ! 6299                           64,
34262 888A                      0040            .word	$40
34263                                           ! 6300                    64,
34264 888C                      0040            .word	$40
34265                                           ! 6301                        0xA000,
34266 888E                      A000            .word	$A000
34267                                           ! 6302                        0x0000,
34268 8890                      0000            .word	0
34269                                           ! 6303                       0,
34270 8892                      0000            .word	0
34271 8894                      0000            .word	0
34272                                           ! 6304                             5120,
34273 8896                      1400            .word	$1400
34274                                           ! 6305                        1280,
34275 8898                      0500            .word	$500
34276                                           ! 6306                        800,
34277 889A                      0320            .word	$320
34278                                           ! 6307                      8,
34279 889C                        08            .byte	8
34280                                           ! 6308                      16,
34281 889D                        10            .byte	$10
34282                                           ! 6309                           1,
34283 889E                        01            .byte	1
34284                                           ! 6310                         32,
34285 889F                        20            .byte	$20
34286                                           ! 6311                          63,
34287 88A0                        3F            .byte	$3F
34288                                           ! 6312                        0x06,
34289 88A1                        06            .byte	6
34290                                           ! 6313                     0,
34291 88A2                        00            .byte	0
34292                                           ! 6314                               3,
34293 88A3                        03            .byte	3
34294                                           ! 6315                          0,
34295 88A4                        00            .byte	0
34296                                           ! 6316                        8,
34297 88A5                        08            .byte	8
34298                                           ! 6317                             16,
34299 88A6                        10            .byte	$10
34300                                           ! 6318                          8,
34301 88A7                        08            .byte	8
34302                                           ! 6319                               8,
34303 88A8                        08            .byte	8
34304                                           ! 6320                         8,
34305 88A9                        08            .byte	8
34306                                           ! 6321                              0,
34307 88AA                        00            .byte	0
34308                                           ! 6322                         8,
34309 88AB                        08            .byte	8
34310                                           ! 6323                              24,
34311 88AC                        18            .byte	$18
34312                                           ! 6324                                0x02,
34313 88AD                        02            .byte	2
34314                                           ! 6325                        0xE0000000,
34315 88AE                      0000            .word	0
34316 88B0                      E000            .word	$E000
34317                                           ! 6326                               0,
34318 88B2                      0000            .word	0
34319 88B4                      0000            .word	0
34320                                           ! 6327                             0,
34321 88B6                      0000            .word	0
34322                                           ! 6328                                5120,
34323 88B8                      1400            .word	$1400
34324                                           ! 6329                             0,
34325 88BA                        00            .byte	0
34326                                           ! 6330                             0,
34327 88BB                        00            .byte	0
34328                                           ! 6331                           8,
34329 88BC                        08            .byte	8
34330                                           ! 6332                                16,
34331 88BD                        10            .byte	$10
34332                                           ! 6333                             8,
34333 88BE                        08            .byte	8
34334                                           ! 6334                                  8,
34335 88BF                        08            .byte	8
34336                                           ! 6335                            8,
34337 88C0                        08            .byte	8
34338                                           ! 6336                                 0,
34339 88C1                        00            .byte	0
34340                                           ! 6337                            8,
34341 88C2                        08            .byte	8
34342                                           ! 6338                                 24,
34343 88C3                        18            .byte	$18
34344                                           ! 6339                          0,
34345 88C4                      0000            .word	0
34346 88C6                      0000            .word	0
34347                                           ! 6340 } },
34348                                           ! 6341 { 0x017b,
34349 88C8                      017B            .word	$17B
34350                                           ! 6342 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34351 88CA                      009B            .word	$9B
34352                                           ! 6343                           0x01 | 0x02 | 0x04,
34353 88CC                        07            .byte	7
34354                                           ! 6344                           0,
34355 88CD                        00            .byte	0
34356                                           ! 6345                           64,
34357 88CE                      0040            .word	$40
34358                                           ! 6346                    64,
34359 88D0                      0040            .word	$40
34360                                           ! 6347                        0xA000,
34361 88D2                      A000            .word	$A000
34362                                           ! 6348                        0x0000,
34363 88D4                      0000            .word	0
34364                                           ! 6349                       0,
34365 88D6                      0000            .word	0
34366 88D8                      0000            .word	0
34367                                           ! 6350                             2560,
34368 88DA                      0A00            .word	$A00
34369                                           ! 6351                        1280,
34370 88DC                      0500            .word	$500
34371                                           ! 6352                        960,
34372 88DE                      03C0            .word	$3C0
34373                                           ! 6353                      8,
34374 88E0                        08            .byte	8
34375                                           ! 6354                      16,
34376 88E1                        10            .byte	$10
34377                                           ! 6355                           1,
34378 88E2                        01            .byte	1
34379                                           ! 6356                         16,
34380 88E3                        10            .byte	$10
34381                                           ! 6357                        
34382                                           ! 6357   38,
34383 88E4                        26            .byte	$26
34384                                           ! 6358                        0x06,
34385 88E5                        06            .byte	6
34386                                           ! 6359                     0,
34387 88E6                        00            .byte	0
34388                                           ! 6360                               5,
34389 88E7                        05            .byte	5
34390                                           ! 6361                          0,
34391 88E8                        00            .byte	0
34392                                           ! 6362                        5,
34393 88E9                        05            .byte	5
34394                                           ! 6363                             11,
34395 88EA                        0B            .byte	$B
34396                                           ! 6364                          6,
34397 88EB                        06            .byte	6
34398                                           ! 6365                               5,
34399 88EC                        05            .byte	5
34400                                           ! 6366                         5,
34401 88ED                        05            .byte	5
34402                                           ! 6367                              0,
34403 88EE                        00            .byte	0
34404                                           ! 6368                         0,
34405 88EF                        00            .byte	0
34406                                           ! 6369                              0,
34407 88F0                        00            .byte	0
34408                                           ! 6370                                0,
34409 88F1                        00            .byte	0
34410                                           ! 6371                        0xE0000000,
34411 88F2                      0000            .word	0
34412 88F4                      E000            .word	$E000
34413                                           ! 6372                               0,
34414 88F6                      0000            .word	0
34415 88F8                      0000            .word	0
34416                                           ! 6373                             0,
34417 88FA                      0000            .word	0
34418                                           ! 6374                                2560,
34419 88FC                      0A00            .word	$A00
34420                                           ! 6375                             0,
34421 88FE                        00            .byte	0
34422                                           ! 6376                             0,
34423 88FF                        00            .byte	0
34424                                           ! 6377                           5,
34425 8900                        05            .byte	5
34426                                           ! 6378                                11,
34427 8901                        0B            .byte	$B
34428                                           ! 6379                             6,
34429 8902                        06            .byte	6
34430                                           ! 6380                                  5,
34431 8903                        05            .byte	5
34432                                           ! 6381                            5,
34433 8904                        05            .byte	5
34434                                           ! 6382                                 0,
34435 8905                        00            .byte	0
34436                                           ! 6383                            0,
34437 8906                        00            .byte	0
34438                                           ! 6384                                 0,
34439 8907                        00            .byte	0
34440                                           ! 6385                          0,
34441 8908                      0000            .word	0
34442 890A                      0000            .word	0
34443                                           ! 6386 } },
34444                                           ! 6387 { 0x017c,
34445 890C                      017C            .word	$17C
34446                                           ! 6388 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34447 890E                      009B            .word	$9B
34448                                           ! 6389                           0x01 | 0x02 | 0x04,
34449 8910                        07            .byte	7
34450                                           ! 6390                           0,
34451 8911                        00            .byte	0
34452                                           ! 6391                           64,
34453 8912                      0040            .word	$40
34454                                           ! 6392                    64,
34455 8914                      0040            .word	$40
34456                                           ! 6393                        0xA000,
34457 8916                      A000            .word	$A000
34458                                           ! 6394                        0x0000,
34459 8918                      0000            .word	0
34460                                           ! 6395                       0,
34461 891A                      0000            .word	0
34462 891C                      0000            .word	0
34463                                           ! 6396                             3840,
34464 891E                      0F00            .word	$F00
34465                                           ! 6397                        1280,
34466 8920                      0500            .word	$500
34467                                           ! 6398                        960,
34468 8922                      03C0            .word	$3C0
34469                                           ! 6399                      8,
34470 8924                        08            .byte	8
34471                                           ! 6400                      16,
34472 8925                        10            .byte	$10
34473                                           ! 6401                           1,
34474 8926                        01            .byte	1
34475                                           ! 6402                         24,
34476 8927                        18            .byte	$18
34477                                           ! 6403                          57,
34478 8928                        39            .byte	$39
34479                                           ! 6404                        0x06,
34480 8929                        06            .byte	6
34481                                           ! 6405                     0,
34482 892A                        00            .byte	0
34483                                           ! 6406                               3,
34484 892B                        03            .byte	3
34485                                           ! 6407                          0,
34486 892C                        00            .byte	0
34487                                           ! 6408                        8,
34488 892D                        08            .byte	8
34489                                           ! 6409                             16,
34490 892E                        10            .byte	$10
34491                                           ! 6410                          8,
34492 892F                        08            .byte	8
34493                                           ! 6411                               8,
34494 8930                        08            .byte	8
34495                                           ! 6412                         8,
34496 8931                        08            .byte	8
34497                                           ! 6413                              0,
34498 8932                        00            .byte	0
34499                                           ! 6414                         0,
34500 8933                        00            .byte	0
34501                                           ! 6415                              0,
34502 8934                        00            .byte	0
34503                                           ! 6416                                0,
34504 8935                        00            .byte	0
34505                                           ! 6417                        0xE0000000,
34506 8936                      0000            .word	0
34507 8938                      E000            .word	$E000
34508                                           ! 6418                               0,
34509 893A                      0000            .word	0
34510 893C                      0000            .word	0
34511                                           ! 6419                             0,
34512 893E                      0000            .word	0
34513                                           ! 6420                                3840,
34514 8940                      0F00            .word	$F00
34515                                           ! 6421                             0,
34516 8942                        00            .byte	0
34517                                           ! 6422                             0,
34518 8943                        00            .byte	0
34519                                           ! 6423                           8,
34520 8944                        08            .byte	8
34521                                           ! 6424                                16,
34522 8945                        10            .byte	$10
34523                                           ! 6425                        
34524                                           ! 6425      8,
34525 8946                        08            .byte	8
34526                                           ! 6426                                  8,
34527 8947                        08            .byte	8
34528                                           ! 6427                            8,
34529 8948                        08            .byte	8
34530                                           ! 6428                                 0,
34531 8949                        00            .byte	0
34532                                           ! 6429                            0,
34533 894A                        00            .byte	0
34534                                           ! 6430                                 0,
34535 894B                        00            .byte	0
34536                                           ! 6431                          0,
34537 894C                      0000            .word	0
34538 894E                      0000            .word	0
34539                                           ! 6432 } },
34540                                           ! 6433 { 0x017d,
34541 8950                      017D            .word	$17D
34542                                           ! 6434 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34543 8952                      009B            .word	$9B
34544                                           ! 6435                           0x01 | 0x02 | 0x04,
34545 8954                        07            .byte	7
34546                                           ! 6436                           0,
34547 8955                        00            .byte	0
34548                                           ! 6437                           64,
34549 8956                      0040            .word	$40
34550                                           ! 6438                    64,
34551 8958                      0040            .word	$40
34552                                           ! 6439                        0xA000,
34553 895A                      A000            .word	$A000
34554                                           ! 6440                        0x0000,
34555 895C                      0000            .word	0
34556                                           ! 6441                       0,
34557 895E                      0000            .word	0
34558 8960                      0000            .word	0
34559                                           ! 6442                             5120,
34560 8962                      1400            .word	$1400
34561                                           ! 6443                        1280,
34562 8964                      0500            .word	$500
34563                                           ! 6444                        960,
34564 8966                      03C0            .word	$3C0
34565                                           ! 6445                      8,
34566 8968                        08            .byte	8
34567                                           ! 6446                      16,
34568 8969                        10            .byte	$10
34569                                           ! 6447                           1,
34570 896A                        01            .byte	1
34571                                           ! 6448                         32,
34572 896B                        20            .byte	$20
34573                                           ! 6449                          75,
34574 896C                        4B            .byte	$4B
34575                                           ! 6450                        0x06,
34576 896D                        06            .byte	6
34577                                           ! 6451                     0,
34578 896E                        00            .byte	0
34579                                           ! 6452                               2,
34580 896F                        02            .byte	2
34581                                           ! 6453                          0,
34582 8970                        00            .byte	0
34583                                           ! 6454                        8,
34584 8971                        08            .byte	8
34585                                           ! 6455                             16,
34586 8972                        10            .byte	$10
34587                                           ! 6456                          8,
34588 8973                        08            .byte	8
34589                                           ! 6457                               8,
34590 8974                        08            .byte	8
34591                                           ! 6458                         8,
34592 8975                        08            .byte	8
34593                                           ! 6459                              0,
34594 8976                        00            .byte	0
34595                                           ! 6460                         8,
34596 8977                        08            .byte	8
34597                                           ! 6461                              24,
34598 8978                        18            .byte	$18
34599                                           ! 6462                                0x02,
34600 8979                        02            .byte	2
34601                                           ! 6463                        0xE0000000,
34602 897A                      0000            .word	0
34603 897C                      E000            .word	$E000
34604                                           ! 6464                               0,
34605 897E                      0000            .word	0
34606 8980                      0000            .word	0
34607                                           ! 6465                             0,
34608 8982                      0000            .word	0
34609                                           ! 6466                                5120,
34610 8984                      1400            .word	$1400
34611                                           ! 6467                             0,
34612 8986                        00            .byte	0
34613                                           ! 6468                             0,
34614 8987                        00            .byte	0
34615                                           ! 6469                           8,
34616 8988                        08            .byte	8
34617                                           ! 6470                                16,
34618 8989                        10            .byte	$10
34619                                           ! 6471                             8,
34620 898A                        08            .byte	8
34621                                           ! 6472                                  8,
34622 898B                        08            .byte	8
34623                                           ! 6473                            8,
34624 898C                        08            .byte	8
34625                                           ! 6474                                 0,
34626 898D                        00            .byte	0
34627                                           ! 6475                            8,
34628 898E                        08            .byte	8
34629                                           ! 6476                                 24,
34630 898F                        18            .byte	$18
34631                                           ! 6477                          0,
34632 8990                      0000            .word	0
34633 8992                      0000            .word	0
34634                                           ! 6478 } },
34635                                           ! 6479 { 0x017e,
34636 8994                      017E            .word	$17E
34637                                           ! 6480 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34638 8996                      009B            .word	$9B
34639                                           ! 6481                           0x01 | 0x02 | 0x04,
34640 8998                        07            .byte	7
34641                                           ! 6482                           0,
34642 8999                        00            .byte	0
34643                                           ! 6483                           64,
34644 899A                      0040            .word	$40
34645                                           ! 6484                    64,
34646 899C                      0040            .word	$40
34647                                           ! 6485                        0xA000,
34648 899E                      A000            .word	$A000
34649                                           ! 6486                        0x0000,
34650 89A0                      0000            .word	0
34651                                           ! 6487                       0,
34652 89A2                      0000            .word	0
34653 89A4                      0000            .word	0
34654                                           ! 6488                             2880,
34655 89A6                      0B40            .word	$B40
34656                                           ! 6489                        1440,
34657 89A8                      05A0            .word	$5A0
34658                                           ! 6490                        900,
34659 89AA                      0384            .word	$384
34660                                           ! 6491                      8,
34661 89AC                        08            .byte	8
34662                                           ! 6492                      16,
34663 89AD                        10            .byte	$10
34664                                           ! 6493                           1,
34665 89AE                        01            .byte	1
34666                                           ! 6494                        
34667                                           ! 6494  16,
34668 89AF                        10            .byte	$10
34669                                           ! 6495                          40,
34670 89B0                        28            .byte	$28
34671                                           ! 6496                        0x06,
34672 89B1                        06            .byte	6
34673                                           ! 6497                     0,
34674 89B2                        00            .byte	0
34675                                           ! 6498                               5,
34676 89B3                        05            .byte	5
34677                                           ! 6499                          0,
34678 89B4                        00            .byte	0
34679                                           ! 6500                        5,
34680 89B5                        05            .byte	5
34681                                           ! 6501                             11,
34682 89B6                        0B            .byte	$B
34683                                           ! 6502                          6,
34684 89B7                        06            .byte	6
34685                                           ! 6503                               5,
34686 89B8                        05            .byte	5
34687                                           ! 6504                         5,
34688 89B9                        05            .byte	5
34689                                           ! 6505                              0,
34690 89BA                        00            .byte	0
34691                                           ! 6506                         0,
34692 89BB                        00            .byte	0
34693                                           ! 6507                              0,
34694 89BC                        00            .byte	0
34695                                           ! 6508                                0,
34696 89BD                        00            .byte	0
34697                                           ! 6509                        0xE0000000,
34698 89BE                      0000            .word	0
34699 89C0                      E000            .word	$E000
34700                                           ! 6510                               0,
34701 89C2                      0000            .word	0
34702 89C4                      0000            .word	0
34703                                           ! 6511                             0,
34704 89C6                      0000            .word	0
34705                                           ! 6512                                2880,
34706 89C8                      0B40            .word	$B40
34707                                           ! 6513                             0,
34708 89CA                        00            .byte	0
34709                                           ! 6514                             0,
34710 89CB                        00            .byte	0
34711                                           ! 6515                           5,
34712 89CC                        05            .byte	5
34713                                           ! 6516                                11,
34714 89CD                        0B            .byte	$B
34715                                           ! 6517                             6,
34716 89CE                        06            .byte	6
34717                                           ! 6518                                  5,
34718 89CF                        05            .byte	5
34719                                           ! 6519                            5,
34720 89D0                        05            .byte	5
34721                                           ! 6520                                 0,
34722 89D1                        00            .byte	0
34723                                           ! 6521                            0,
34724 89D2                        00            .byte	0
34725                                           ! 6522                                 0,
34726 89D3                        00            .byte	0
34727                                           ! 6523                          0,
34728 89D4                      0000            .word	0
34729 89D6                      0000            .word	0
34730                                           ! 6524 } },
34731                                           ! 6525 { 0x017f,
34732 89D8                      017F            .word	$17F
34733                                           ! 6526 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34734 89DA                      009B            .word	$9B
34735                                           ! 6527                           0x01 | 0x02 | 0x04,
34736 89DC                        07            .byte	7
34737                                           ! 6528                           0,
34738 89DD                        00            .byte	0
34739                                           ! 6529                           64,
34740 89DE                      0040            .word	$40
34741                                           ! 6530                    64,
34742 89E0                      0040            .word	$40
34743                                           ! 6531                        0xA000,
34744 89E2                      A000            .word	$A000
34745                                           ! 6532                        0x0000,
34746 89E4                      0000            .word	0
34747                                           ! 6533                       0,
34748 89E6                      0000            .word	0
34749 89E8                      0000            .word	0
34750                                           ! 6534                             4320,
34751 89EA                      10E0            .word	$10E0
34752                                           ! 6535                        1440,
34753 89EC                      05A0            .word	$5A0
34754                                           ! 6536                        900,
34755 89EE                      0384            .word	$384
34756                                           ! 6537                      8,
34757 89F0                        08            .byte	8
34758                                           ! 6538                      16,
34759 89F1                        10            .byte	$10
34760                                           ! 6539                           1,
34761 89F2                        01            .byte	1
34762                                           ! 6540                         24,
34763 89F3                        18            .byte	$18
34764                                           ! 6541                          60,
34765 89F4                        3C            .byte	$3C
34766                                           ! 6542                        0x06,
34767 89F5                        06            .byte	6
34768                                           ! 6543                     0,
34769 89F6                        00            .byte	0
34770                                           ! 6544                               3,
34771 89F7                        03            .byte	3
34772                                           ! 6545                          0,
34773 89F8                        00            .byte	0
34774                                           ! 6546                        8,
34775 89F9                        08            .byte	8
34776                                           ! 6547                             16,
34777 89FA                        10            .byte	$10
34778                                           ! 6548                          8,
34779 89FB                        08            .byte	8
34780                                           ! 6549                               8,
34781 89FC                        08            .byte	8
34782                                           ! 6550                         8,
34783 89FD                        08            .byte	8
34784                                           ! 6551                              0,
34785 89FE                        00            .byte	0
34786                                           ! 6552                         0,
34787 89FF                        00            .byte	0
34788                                           ! 6553                              0,
34789 8A00                        00            .byte	0
34790                                           ! 6554                                0,
34791 8A01                        00            .byte	0
34792                                           ! 6555                        0xE0000000,
34793 8A02                      0000            .word	0
34794 8A04                      E000            .word	$E000
34795                                           ! 6556                               0,
34796 8A06                      0000            .word	0
34797 8A08                      0000            .word	0
34798                                           ! 6557                             0,
34799 8A0A                      0000            .word	0
34800                                           ! 6558                                4320,
34801 8A0C                      10E0            .word	$10E0
34802                                           ! 6559                             0,
34803 8A0E                        00            .byte	0
34804                                           ! 6560                             0,
34805 8A0F                        00            .byte	0
34806                                           ! 6561                           8,
34807 8A10                        08            .byte	8
34808                                           ! 6562                               
34809                                           ! 6562  16,
34810 8A11                        10            .byte	$10
34811                                           ! 6563                             8,
34812 8A12                        08            .byte	8
34813                                           ! 6564                                  8,
34814 8A13                        08            .byte	8
34815                                           ! 6565                            8,
34816 8A14                        08            .byte	8
34817                                           ! 6566                                 0,
34818 8A15                        00            .byte	0
34819                                           ! 6567                            0,
34820 8A16                        00            .byte	0
34821                                           ! 6568                                 0,
34822 8A17                        00            .byte	0
34823                                           ! 6569                          0,
34824 8A18                      0000            .word	0
34825 8A1A                      0000            .word	0
34826                                           ! 6570 } },
34827                                           ! 6571 { 0x0180,
34828 8A1C                      0180            .word	$180
34829                                           ! 6572 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34830 8A1E                      009B            .word	$9B
34831                                           ! 6573                           0x01 | 0x02 | 0x04,
34832 8A20                        07            .byte	7
34833                                           ! 6574                           0,
34834 8A21                        00            .byte	0
34835                                           ! 6575                           64,
34836 8A22                      0040            .word	$40
34837                                           ! 6576                    64,
34838 8A24                      0040            .word	$40
34839                                           ! 6577                        0xA000,
34840 8A26                      A000            .word	$A000
34841                                           ! 6578                        0x0000,
34842 8A28                      0000            .word	0
34843                                           ! 6579                       0,
34844 8A2A                      0000            .word	0
34845 8A2C                      0000            .word	0
34846                                           ! 6580                             5760,
34847 8A2E                      1680            .word	$1680
34848                                           ! 6581                        1440,
34849 8A30                      05A0            .word	$5A0
34850                                           ! 6582                        900,
34851 8A32                      0384            .word	$384
34852                                           ! 6583                      8,
34853 8A34                        08            .byte	8
34854                                           ! 6584                      16,
34855 8A35                        10            .byte	$10
34856                                           ! 6585                           1,
34857 8A36                        01            .byte	1
34858                                           ! 6586                         32,
34859 8A37                        20            .byte	$20
34860                                           ! 6587                          80,
34861 8A38                        50            .byte	$50
34862                                           ! 6588                        0x06,
34863 8A39                        06            .byte	6
34864                                           ! 6589                     0,
34865 8A3A                        00            .byte	0
34866                                           ! 6590                               2,
34867 8A3B                        02            .byte	2
34868                                           ! 6591                          0,
34869 8A3C                        00            .byte	0
34870                                           ! 6592                        8,
34871 8A3D                        08            .byte	8
34872                                           ! 6593                             16,
34873 8A3E                        10            .byte	$10
34874                                           ! 6594                          8,
34875 8A3F                        08            .byte	8
34876                                           ! 6595                               8,
34877 8A40                        08            .byte	8
34878                                           ! 6596                         8,
34879 8A41                        08            .byte	8
34880                                           ! 6597                              0,
34881 8A42                        00            .byte	0
34882                                           ! 6598                         8,
34883 8A43                        08            .byte	8
34884                                           ! 6599                              24,
34885 8A44                        18            .byte	$18
34886                                           ! 6600                                0x02,
34887 8A45                        02            .byte	2
34888                                           ! 6601                        0xE0000000,
34889 8A46                      0000            .word	0
34890 8A48                      E000            .word	$E000
34891                                           ! 6602                               0,
34892 8A4A                      0000            .word	0
34893 8A4C                      0000            .word	0
34894                                           ! 6603                             0,
34895 8A4E                      0000            .word	0
34896                                           ! 6604                                5760,
34897 8A50                      1680            .word	$1680
34898                                           ! 6605                             0,
34899 8A52                        00            .byte	0
34900                                           ! 6606                             0,
34901 8A53                        00            .byte	0
34902                                           ! 6607                           8,
34903 8A54                        08            .byte	8
34904                                           ! 6608                                16,
34905 8A55                        10            .byte	$10
34906                                           ! 6609                             8,
34907 8A56                        08            .byte	8
34908                                           ! 6610                                  8,
34909 8A57                        08            .byte	8
34910                                           ! 6611                            8,
34911 8A58                        08            .byte	8
34912                                           ! 6612                                 0,
34913 8A59                        00            .byte	0
34914                                           ! 6613                            8,
34915 8A5A                        08            .byte	8
34916                                           ! 6614                                 24,
34917 8A5B                        18            .byte	$18
34918                                           ! 6615                          0,
34919 8A5C                      0000            .word	0
34920 8A5E                      0000            .word	0
34921                                           ! 6616 } },
34922                                           ! 6617 { 0x0181,
34923 8A60                      0181            .word	$181
34924                                           ! 6618 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34925 8A62                      009B            .word	$9B
34926                                           ! 6619                           0x01 | 0x02 | 0x04,
34927 8A64                        07            .byte	7
34928                                           ! 6620                           0,
34929 8A65                        00            .byte	0
34930                                           ! 6621                           64,
34931 8A66                      0040            .word	$40
34932                                           ! 6622                    64,
34933 8A68                      0040            .word	$40
34934                                           ! 6623                        0xA000,
34935 8A6A                      A000            .word	$A000
34936                                           ! 6624                        0x0000,
34937 8A6C                      0000            .word	0
34938                                           ! 6625                       0,
34939 8A6E                      0000            .word	0
34940 8A70                      0000            .word	0
34941                                           ! 6626                             2800,
34942 8A72                      0AF0            .word	$AF0
34943                                           ! 6627                        1400,
34944 8A74                      0578            .word	$578
34945                                           ! 6628                        1050,
34946 8A76                      041A            .word	$41A
34947                                           ! 6629                      8,
34948 8A78                        08            .byte	8
34949                                           ! 6630                      16,
34950 8A79                        10            .byte	$10
34951                                           ! 6631                        
34952                                           ! 6631    1,
34953 8A7A                        01            .byte	1
34954                                           ! 6632                         16,
34955 8A7B                        10            .byte	$10
34956                                           ! 6633                          45,
34957 8A7C                        2D            .byte	$2D
34958                                           ! 6634                        0x06,
34959 8A7D                        06            .byte	6
34960                                           ! 6635                     0,
34961 8A7E                        00            .byte	0
34962                                           ! 6636                               4,
34963 8A7F                        04            .byte	4
34964                                           ! 6637                          0,
34965 8A80                        00            .byte	0
34966                                           ! 6638                        5,
34967 8A81                        05            .byte	5
34968                                           ! 6639                             11,
34969 8A82                        0B            .byte	$B
34970                                           ! 6640                          6,
34971 8A83                        06            .byte	6
34972                                           ! 6641                               5,
34973 8A84                        05            .byte	5
34974                                           ! 6642                         5,
34975 8A85                        05            .byte	5
34976                                           ! 6643                              0,
34977 8A86                        00            .byte	0
34978                                           ! 6644                         0,
34979 8A87                        00            .byte	0
34980                                           ! 6645                              0,
34981 8A88                        00            .byte	0
34982                                           ! 6646                                0,
34983 8A89                        00            .byte	0
34984                                           ! 6647                        0xE0000000,
34985 8A8A                      0000            .word	0
34986 8A8C                      E000            .word	$E000
34987                                           ! 6648                               0,
34988 8A8E                      0000            .word	0
34989 8A90                      0000            .word	0
34990                                           ! 6649                             0,
34991 8A92                      0000            .word	0
34992                                           ! 6650                                2800,
34993 8A94                      0AF0            .word	$AF0
34994                                           ! 6651                             0,
34995 8A96                        00            .byte	0
34996                                           ! 6652                             0,
34997 8A97                        00            .byte	0
34998                                           ! 6653                           5,
34999 8A98                        05            .byte	5
35000                                           ! 6654                                11,
35001 8A99                        0B            .byte	$B
35002                                           ! 6655                             6,
35003 8A9A                        06            .byte	6
35004                                           ! 6656                                  5,
35005 8A9B                        05            .byte	5
35006                                           ! 6657                            5,
35007 8A9C                        05            .byte	5
35008                                           ! 6658                                 0,
35009 8A9D                        00            .byte	0
35010                                           ! 6659                            0,
35011 8A9E                        00            .byte	0
35012                                           ! 6660                                 0,
35013 8A9F                        00            .byte	0
35014                                           ! 6661                          0,
35015 8AA0                      0000            .word	0
35016 8AA2                      0000            .word	0
35017                                           ! 6662 } },
35018                                           ! 6663 { 0x0182,
35019 8AA4                      0182            .word	$182
35020                                           ! 6664 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35021 8AA6                      009B            .word	$9B
35022                                           ! 6665                           0x01 | 0x02 | 0x04,
35023 8AA8                        07            .byte	7
35024                                           ! 6666                           0,
35025 8AA9                        00            .byte	0
35026                                           ! 6667                           64,
35027 8AAA                      0040            .word	$40
35028                                           ! 6668                    64,
35029 8AAC                      0040            .word	$40
35030                                           ! 6669                        0xA000,
35031 8AAE                      A000            .word	$A000
35032                                           ! 6670                        0x0000,
35033 8AB0                      0000            .word	0
35034                                           ! 6671                       0,
35035 8AB2                      0000            .word	0
35036 8AB4                      0000            .word	0
35037                                           ! 6672                             4200,
35038 8AB6                      1068            .word	$1068
35039                                           ! 6673                        1400,
35040 8AB8                      0578            .word	$578
35041                                           ! 6674                        1050,
35042 8ABA                      041A            .word	$41A
35043                                           ! 6675                      8,
35044 8ABC                        08            .byte	8
35045                                           ! 6676                      16,
35046 8ABD                        10            .byte	$10
35047                                           ! 6677                           1,
35048 8ABE                        01            .byte	1
35049                                           ! 6678                         24,
35050 8ABF                        18            .byte	$18
35051                                           ! 6679                          68,
35052 8AC0                        44            .byte	$44
35053                                           ! 6680                        0x06,
35054 8AC1                        06            .byte	6
35055                                           ! 6681                     0,
35056 8AC2                        00            .byte	0
35057                                           ! 6682                               2,
35058 8AC3                        02            .byte	2
35059                                           ! 6683                          0,
35060 8AC4                        00            .byte	0
35061                                           ! 6684                        8,
35062 8AC5                        08            .byte	8
35063                                           ! 6685                             16,
35064 8AC6                        10            .byte	$10
35065                                           ! 6686                          8,
35066 8AC7                        08            .byte	8
35067                                           ! 6687                               8,
35068 8AC8                        08            .byte	8
35069                                           ! 6688                         8,
35070 8AC9                        08            .byte	8
35071                                           ! 6689                              0,
35072 8ACA                        00            .byte	0
35073                                           ! 6690                         0,
35074 8ACB                        00            .byte	0
35075                                           ! 6691                              0,
35076 8ACC                        00            .byte	0
35077                                           ! 6692                                0,
35078 8ACD                        00            .byte	0
35079                                           ! 6693                        0xE0000000,
35080 8ACE                      0000            .word	0
35081 8AD0                      E000            .word	$E000
35082                                           ! 6694                               0,
35083 8AD2                      0000            .word	0
35084 8AD4                      0000            .word	0
35085                                           ! 6695                             0,
35086 8AD6                      0000            .word	0
35087                                           ! 6696                                4200,
35088 8AD8                      1068            .word	$1068
35089                                           ! 6697                             0,
35090 8ADA                        00            .byte	0
35091                                           ! 6698                             0,
35092 8ADB                        00            .byte	0
35093                                           ! 6699                           8,
35094 8ADC                        08            .byte	8
35095                                           ! 6700 
35096                                           ! 6700                                16,
35097 8ADD                        10            .byte	$10
35098                                           ! 6701                             8,
35099 8ADE                        08            .byte	8
35100                                           ! 6702                                  8,
35101 8ADF                        08            .byte	8
35102                                           ! 6703                            8,
35103 8AE0                        08            .byte	8
35104                                           ! 6704                                 0,
35105 8AE1                        00            .byte	0
35106                                           ! 6705                            0,
35107 8AE2                        00            .byte	0
35108                                           ! 6706                                 0,
35109 8AE3                        00            .byte	0
35110                                           ! 6707                          0,
35111 8AE4                      0000            .word	0
35112 8AE6                      0000            .word	0
35113                                           ! 6708 } },
35114                                           ! 6709 { 0x0183,
35115 8AE8                      0183            .word	$183
35116                                           ! 6710 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35117 8AEA                      009B            .word	$9B
35118                                           ! 6711                           0x01 | 0x02 | 0x04,
35119 8AEC                        07            .byte	7
35120                                           ! 6712                           0,
35121 8AED                        00            .byte	0
35122                                           ! 6713                           64,
35123 8AEE                      0040            .word	$40
35124                                           ! 6714                    64,
35125 8AF0                      0040            .word	$40
35126                                           ! 6715                        0xA000,
35127 8AF2                      A000            .word	$A000
35128                                           ! 6716                        0x0000,
35129 8AF4                      0000            .word	0
35130                                           ! 6717                       0,
35131 8AF6                      0000            .word	0
35132 8AF8                      0000            .word	0
35133                                           ! 6718                             5600,
35134 8AFA                      15E0            .word	$15E0
35135                                           ! 6719                        1400,
35136 8AFC                      0578            .word	$578
35137                                           ! 6720                        1050,
35138 8AFE                      041A            .word	$41A
35139                                           ! 6721                      8,
35140 8B00                        08            .byte	8
35141                                           ! 6722                      16,
35142 8B01                        10            .byte	$10
35143                                           ! 6723                           1,
35144 8B02                        01            .byte	1
35145                                           ! 6724                         32,
35146 8B03                        20            .byte	$20
35147                                           ! 6725                          90,
35148 8B04                        5A            .byte	$5A
35149                                           ! 6726                        0x06,
35150 8B05                        06            .byte	6
35151                                           ! 6727                     0,
35152 8B06                        00            .byte	0
35153                                           ! 6728                               1,
35154 8B07                        01            .byte	1
35155                                           ! 6729                          0,
35156 8B08                        00            .byte	0
35157                                           ! 6730                        8,
35158 8B09                        08            .byte	8
35159                                           ! 6731                             16,
35160 8B0A                        10            .byte	$10
35161                                           ! 6732                          8,
35162 8B0B                        08            .byte	8
35163                                           ! 6733                               8,
35164 8B0C                        08            .byte	8
35165                                           ! 6734                         8,
35166 8B0D                        08            .byte	8
35167                                           ! 6735                              0,
35168 8B0E                        00            .byte	0
35169                                           ! 6736                         8,
35170 8B0F                        08            .byte	8
35171                                           ! 6737                              24,
35172 8B10                        18            .byte	$18
35173                                           ! 6738                                0x02,
35174 8B11                        02            .byte	2
35175                                           ! 6739                        0xE0000000,
35176 8B12                      0000            .word	0
35177 8B14                      E000            .word	$E000
35178                                           ! 6740                               0,
35179 8B16                      0000            .word	0
35180 8B18                      0000            .word	0
35181                                           ! 6741                             0,
35182 8B1A                      0000            .word	0
35183                                           ! 6742                                5600,
35184 8B1C                      15E0            .word	$15E0
35185                                           ! 6743                             0,
35186 8B1E                        00            .byte	0
35187                                           ! 6744                             0,
35188 8B1F                        00            .byte	0
35189                                           ! 6745                           8,
35190 8B20                        08            .byte	8
35191                                           ! 6746                                16,
35192 8B21                        10            .byte	$10
35193                                           ! 6747                             8,
35194 8B22                        08            .byte	8
35195                                           ! 6748                                  8,
35196 8B23                        08            .byte	8
35197                                           ! 6749                            8,
35198 8B24                        08            .byte	8
35199                                           ! 6750                                 0,
35200 8B25                        00            .byte	0
35201                                           ! 6751                            8,
35202 8B26                        08            .byte	8
35203                                           ! 6752                                 24,
35204 8B27                        18            .byte	$18
35205                                           ! 6753                          0,
35206 8B28                      0000            .word	0
35207 8B2A                      0000            .word	0
35208                                           ! 6754 } },
35209                                           ! 6755 { 0x0184,
35210 8B2C                      0184            .word	$184
35211                                           ! 6756 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35212 8B2E                      009B            .word	$9B
35213                                           ! 6757                           0x01 | 0x02 | 0x04,
35214 8B30                        07            .byte	7
35215                                           ! 6758                           0,
35216 8B31                        00            .byte	0
35217                                           ! 6759                           64,
35218 8B32                      0040            .word	$40
35219                                           ! 6760                    64,
35220 8B34                      0040            .word	$40
35221                                           ! 6761                        0xA000,
35222 8B36                      A000            .word	$A000
35223                                           ! 6762                        0x0000,
35224 8B38                      0000            .word	0
35225                                           ! 6763                       0,
35226 8B3A                      0000            .word	0
35227 8B3C                      0000            .word	0
35228                                           ! 6764                             3360,
35229 8B3E                      0D20            .word	$D20
35230                                           ! 6765                        1680,
35231 8B40                      0690            .word	$690
35232                                           ! 6766                        1050,
35233 8B42                      041A            .word	$41A
35234                                           ! 6767                      8,
35235 8B44                        08            .byte	8
35236                                           ! 6768                  
35237                                           ! 6768     16,
35238 8B45                        10            .byte	$10
35239                                           ! 6769                           1,
35240 8B46                        01            .byte	1
35241                                           ! 6770                         16,
35242 8B47                        10            .byte	$10
35243                                           ! 6771                          54,
35244 8B48                        36            .byte	$36
35245                                           ! 6772                        0x06,
35246 8B49                        06            .byte	6
35247                                           ! 6773                     0,
35248 8B4A                        00            .byte	0
35249                                           ! 6774                               3,
35250 8B4B                        03            .byte	3
35251                                           ! 6775                          0,
35252 8B4C                        00            .byte	0
35253                                           ! 6776                        5,
35254 8B4D                        05            .byte	5
35255                                           ! 6777                             11,
35256 8B4E                        0B            .byte	$B
35257                                           ! 6778                          6,
35258 8B4F                        06            .byte	6
35259                                           ! 6779                               5,
35260 8B50                        05            .byte	5
35261                                           ! 6780                         5,
35262 8B51                        05            .byte	5
35263                                           ! 6781                              0,
35264 8B52                        00            .byte	0
35265                                           ! 6782                         0,
35266 8B53                        00            .byte	0
35267                                           ! 6783                              0,
35268 8B54                        00            .byte	0
35269                                           ! 6784                                0,
35270 8B55                        00            .byte	0
35271                                           ! 6785                        0xE0000000,
35272 8B56                      0000            .word	0
35273 8B58                      E000            .word	$E000
35274                                           ! 6786                               0,
35275 8B5A                      0000            .word	0
35276 8B5C                      0000            .word	0
35277                                           ! 6787                             0,
35278 8B5E                      0000            .word	0
35279                                           ! 6788                                3360,
35280 8B60                      0D20            .word	$D20
35281                                           ! 6789                             0,
35282 8B62                        00            .byte	0
35283                                           ! 6790                             0,
35284 8B63                        00            .byte	0
35285                                           ! 6791                           5,
35286 8B64                        05            .byte	5
35287                                           ! 6792                                11,
35288 8B65                        0B            .byte	$B
35289                                           ! 6793                             6,
35290 8B66                        06            .byte	6
35291                                           ! 6794                                  5,
35292 8B67                        05            .byte	5
35293                                           ! 6795                            5,
35294 8B68                        05            .byte	5
35295                                           ! 6796                                 0,
35296 8B69                        00            .byte	0
35297                                           ! 6797                            0,
35298 8B6A                        00            .byte	0
35299                                           ! 6798                                 0,
35300 8B6B                        00            .byte	0
35301                                           ! 6799                          0,
35302 8B6C                      0000            .word	0
35303 8B6E                      0000            .word	0
35304                                           ! 6800 } },
35305                                           ! 6801 { 0x0185,
35306 8B70                      0185            .word	$185
35307                                           ! 6802 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35308 8B72                      009B            .word	$9B
35309                                           ! 6803                           0x01 | 0x02 | 0x04,
35310 8B74                        07            .byte	7
35311                                           ! 6804                           0,
35312 8B75                        00            .byte	0
35313                                           ! 6805                           64,
35314 8B76                      0040            .word	$40
35315                                           ! 6806                    64,
35316 8B78                      0040            .word	$40
35317                                           ! 6807                        0xA000,
35318 8B7A                      A000            .word	$A000
35319                                           ! 6808                        0x0000,
35320 8B7C                      0000            .word	0
35321                                           ! 6809                       0,
35322 8B7E                      0000            .word	0
35323 8B80                      0000            .word	0
35324                                           ! 6810                             5040,
35325 8B82                      13B0            .word	$13B0
35326                                           ! 6811                        1680,
35327 8B84                      0690            .word	$690
35328                                           ! 6812                        1050,
35329 8B86                      041A            .word	$41A
35330                                           ! 6813                      8,
35331 8B88                        08            .byte	8
35332                                           ! 6814                      16,
35333 8B89                        10            .byte	$10
35334                                           ! 6815                           1,
35335 8B8A                        01            .byte	1
35336                                           ! 6816                         24,
35337 8B8B                        18            .byte	$18
35338                                           ! 6817                          81,
35339 8B8C                        51            .byte	$51
35340                                           ! 6818                        0x06,
35341 8B8D                        06            .byte	6
35342                                           ! 6819                     0,
35343 8B8E                        00            .byte	0
35344                                           ! 6820                               2,
35345 8B8F                        02            .byte	2
35346                                           ! 6821                          0,
35347 8B90                        00            .byte	0
35348                                           ! 6822                        8,
35349 8B91                        08            .byte	8
35350                                           ! 6823                             16,
35351 8B92                        10            .byte	$10
35352                                           ! 6824                          8,
35353 8B93                        08            .byte	8
35354                                           ! 6825                               8,
35355 8B94                        08            .byte	8
35356                                           ! 6826                         8,
35357 8B95                        08            .byte	8
35358                                           ! 6827                              0,
35359 8B96                        00            .byte	0
35360                                           ! 6828                         0,
35361 8B97                        00            .byte	0
35362                                           ! 6829                              0,
35363 8B98                        00            .byte	0
35364                                           ! 6830                                0,
35365 8B99                        00            .byte	0
35366                                           ! 6831                        0xE0000000,
35367 8B9A                      0000            .word	0
35368 8B9C                      E000            .word	$E000
35369                                           ! 6832                               0,
35370 8B9E                      0000            .word	0
35371 8BA0                      0000            .word	0
35372                                           ! 6833                             0,
35373 8BA2                      0000            .word	0
35374                                           ! 6834                                5040,
35375 8BA4                      13B0            .word	$13B0
35376                                           ! 6835                             0,
35377 8BA6                        00            .byte	0
35378                                           ! 6836                             0
35379                                           ! 6836 ,
35380 8BA7                        00            .byte	0
35381                                           ! 6837                           8,
35382 8BA8                        08            .byte	8
35383                                           ! 6838                                16,
35384 8BA9                        10            .byte	$10
35385                                           ! 6839                             8,
35386 8BAA                        08            .byte	8
35387                                           ! 6840                                  8,
35388 8BAB                        08            .byte	8
35389                                           ! 6841                            8,
35390 8BAC                        08            .byte	8
35391                                           ! 6842                                 0,
35392 8BAD                        00            .byte	0
35393                                           ! 6843                            0,
35394 8BAE                        00            .byte	0
35395                                           ! 6844                                 0,
35396 8BAF                        00            .byte	0
35397                                           ! 6845                          0,
35398 8BB0                      0000            .word	0
35399 8BB2                      0000            .word	0
35400                                           ! 6846 } },
35401                                           ! 6847 { 0x0186,
35402 8BB4                      0186            .word	$186
35403                                           ! 6848 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35404 8BB6                      009B            .word	$9B
35405                                           ! 6849                           0x01 | 0x02 | 0x04,
35406 8BB8                        07            .byte	7
35407                                           ! 6850                           0,
35408 8BB9                        00            .byte	0
35409                                           ! 6851                           64,
35410 8BBA                      0040            .word	$40
35411                                           ! 6852                    64,
35412 8BBC                      0040            .word	$40
35413                                           ! 6853                        0xA000,
35414 8BBE                      A000            .word	$A000
35415                                           ! 6854                        0x0000,
35416 8BC0                      0000            .word	0
35417                                           ! 6855                       0,
35418 8BC2                      0000            .word	0
35419 8BC4                      0000            .word	0
35420                                           ! 6856                             6720,
35421 8BC6                      1A40            .word	$1A40
35422                                           ! 6857                        1680,
35423 8BC8                      0690            .word	$690
35424                                           ! 6858                        1050,
35425 8BCA                      041A            .word	$41A
35426                                           ! 6859                      8,
35427 8BCC                        08            .byte	8
35428                                           ! 6860                      16,
35429 8BCD                        10            .byte	$10
35430                                           ! 6861                           1,
35431 8BCE                        01            .byte	1
35432                                           ! 6862                         32,
35433 8BCF                        20            .byte	$20
35434                                           ! 6863                          108,
35435 8BD0                        6C            .byte	$6C
35436                                           ! 6864                        0x06,
35437 8BD1                        06            .byte	6
35438                                           ! 6865                     0,
35439 8BD2                        00            .byte	0
35440                                           ! 6866                               1,
35441 8BD3                        01            .byte	1
35442                                           ! 6867                          0,
35443 8BD4                        00            .byte	0
35444                                           ! 6868                        8,
35445 8BD5                        08            .byte	8
35446                                           ! 6869                             16,
35447 8BD6                        10            .byte	$10
35448                                           ! 6870                          8,
35449 8BD7                        08            .byte	8
35450                                           ! 6871                               8,
35451 8BD8                        08            .byte	8
35452                                           ! 6872                         8,
35453 8BD9                        08            .byte	8
35454                                           ! 6873                              0,
35455 8BDA                        00            .byte	0
35456                                           ! 6874                         8,
35457 8BDB                        08            .byte	8
35458                                           ! 6875                              24,
35459 8BDC                        18            .byte	$18
35460                                           ! 6876                                0x02,
35461 8BDD                        02            .byte	2
35462                                           ! 6877                        0xE0000000,
35463 8BDE                      0000            .word	0
35464 8BE0                      E000            .word	$E000
35465                                           ! 6878                               0,
35466 8BE2                      0000            .word	0
35467 8BE4                      0000            .word	0
35468                                           ! 6879                             0,
35469 8BE6                      0000            .word	0
35470                                           ! 6880                                6720,
35471 8BE8                      1A40            .word	$1A40
35472                                           ! 6881                             0,
35473 8BEA                        00            .byte	0
35474                                           ! 6882                             0,
35475 8BEB                        00            .byte	0
35476                                           ! 6883                           8,
35477 8BEC                        08            .byte	8
35478                                           ! 6884                                16,
35479 8BED                        10            .byte	$10
35480                                           ! 6885                             8,
35481 8BEE                        08            .byte	8
35482                                           ! 6886                                  8,
35483 8BEF                        08            .byte	8
35484                                           ! 6887                            8,
35485 8BF0                        08            .byte	8
35486                                           ! 6888                                 0,
35487 8BF1                        00            .byte	0
35488                                           ! 6889                            8,
35489 8BF2                        08            .byte	8
35490                                           ! 6890                                 24,
35491 8BF3                        18            .byte	$18
35492                                           ! 6891                          0,
35493 8BF4                      0000            .word	0
35494 8BF6                      0000            .word	0
35495                                           ! 6892 } },
35496                                           ! 6893 { 0x0187,
35497 8BF8                      0187            .word	$187
35498                                           ! 6894 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35499 8BFA                      009B            .word	$9B
35500                                           ! 6895                           0x01 | 0x02 | 0x04,
35501 8BFC                        07            .byte	7
35502                                           ! 6896                           0,
35503 8BFD                        00            .byte	0
35504                                           ! 6897                           64,
35505 8BFE                      0040            .word	$40
35506                                           ! 6898                    64,
35507 8C00                      0040            .word	$40
35508                                           ! 6899                        0xA000,
35509 8C02                      A000            .word	$A000
35510                                           ! 6900                        0x0000,
35511 8C04                      0000            .word	0
35512                                           ! 6901                       0,
35513 8C06                      0000            .word	0
35514 8C08                      0000            .word	0
35515                                           ! 6902                             3840,
35516 8C0A                      0F00            .word	$F00
35517                                           ! 6903                        1920,
35518 8C0C                      0780            .word	$780
35519                                           ! 6904                        1200,
35520 8C0E                      04B0            .word	$4B0
35521                                           ! 6905          
35522                                           ! 6905             8,
35523 8C10                        08            .byte	8
35524                                           ! 6906                      16,
35525 8C11                        10            .byte	$10
35526                                           ! 6907                           1,
35527 8C12                        01            .byte	1
35528                                           ! 6908                         16,
35529 8C13                        10            .byte	$10
35530                                           ! 6909                          71,
35531 8C14                        47            .byte	$47
35532                                           ! 6910                        0x06,
35533 8C15                        06            .byte	6
35534                                           ! 6911                     0,
35535 8C16                        00            .byte	0
35536                                           ! 6912                               2,
35537 8C17                        02            .byte	2
35538                                           ! 6913                          0,
35539 8C18                        00            .byte	0
35540                                           ! 6914                        5,
35541 8C19                        05            .byte	5
35542                                           ! 6915                             11,
35543 8C1A                        0B            .byte	$B
35544                                           ! 6916                          6,
35545 8C1B                        06            .byte	6
35546                                           ! 6917                               5,
35547 8C1C                        05            .byte	5
35548                                           ! 6918                         5,
35549 8C1D                        05            .byte	5
35550                                           ! 6919                              0,
35551 8C1E                        00            .byte	0
35552                                           ! 6920                         0,
35553 8C1F                        00            .byte	0
35554                                           ! 6921                              0,
35555 8C20                        00            .byte	0
35556                                           ! 6922                                0,
35557 8C21                        00            .byte	0
35558                                           ! 6923                        0xE0000000,
35559 8C22                      0000            .word	0
35560 8C24                      E000            .word	$E000
35561                                           ! 6924                               0,
35562 8C26                      0000            .word	0
35563 8C28                      0000            .word	0
35564                                           ! 6925                             0,
35565 8C2A                      0000            .word	0
35566                                           ! 6926                                3840,
35567 8C2C                      0F00            .word	$F00
35568                                           ! 6927                             0,
35569 8C2E                        00            .byte	0
35570                                           ! 6928                             0,
35571 8C2F                        00            .byte	0
35572                                           ! 6929                           5,
35573 8C30                        05            .byte	5
35574                                           ! 6930                                11,
35575 8C31                        0B            .byte	$B
35576                                           ! 6931                             6,
35577 8C32                        06            .byte	6
35578                                           ! 6932                                  5,
35579 8C33                        05            .byte	5
35580                                           ! 6933                            5,
35581 8C34                        05            .byte	5
35582                                           ! 6934                                 0,
35583 8C35                        00            .byte	0
35584                                           ! 6935                            0,
35585 8C36                        00            .byte	0
35586                                           ! 6936                                 0,
35587 8C37                        00            .byte	0
35588                                           ! 6937                          0,
35589 8C38                      0000            .word	0
35590 8C3A                      0000            .word	0
35591                                           ! 6938 } },
35592                                           ! 6939 { 0x0188,
35593 8C3C                      0188            .word	$188
35594                                           ! 6940 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35595 8C3E                      009B            .word	$9B
35596                                           ! 6941                           0x01 | 0x02 | 0x04,
35597 8C40                        07            .byte	7
35598                                           ! 6942                           0,
35599 8C41                        00            .byte	0
35600                                           ! 6943                           64,
35601 8C42                      0040            .word	$40
35602                                           ! 6944                    64,
35603 8C44                      0040            .word	$40
35604                                           ! 6945                        0xA000,
35605 8C46                      A000            .word	$A000
35606                                           ! 6946                        0x0000,
35607 8C48                      0000            .word	0
35608                                           ! 6947                       0,
35609 8C4A                      0000            .word	0
35610 8C4C                      0000            .word	0
35611                                           ! 6948                             5760,
35612 8C4E                      1680            .word	$1680
35613                                           ! 6949                        1920,
35614 8C50                      0780            .word	$780
35615                                           ! 6950                        1200,
35616 8C52                      04B0            .word	$4B0
35617                                           ! 6951                      8,
35618 8C54                        08            .byte	8
35619                                           ! 6952                      16,
35620 8C55                        10            .byte	$10
35621                                           ! 6953                           1,
35622 8C56                        01            .byte	1
35623                                           ! 6954                         24,
35624 8C57                        18            .byte	$18
35625                                           ! 6955                          106,
35626 8C58                        6A            .byte	$6A
35627                                           ! 6956                        0x06,
35628 8C59                        06            .byte	6
35629                                           ! 6957                     0,
35630 8C5A                        00            .byte	0
35631                                           ! 6958                               1,
35632 8C5B                        01            .byte	1
35633                                           ! 6959                          0,
35634 8C5C                        00            .byte	0
35635                                           ! 6960                        8,
35636 8C5D                        08            .byte	8
35637                                           ! 6961                             16,
35638 8C5E                        10            .byte	$10
35639                                           ! 6962                          8,
35640 8C5F                        08            .byte	8
35641                                           ! 6963                               8,
35642 8C60                        08            .byte	8
35643                                           ! 6964                         8,
35644 8C61                        08            .byte	8
35645                                           ! 6965                              0,
35646 8C62                        00            .byte	0
35647                                           ! 6966                         0,
35648 8C63                        00            .byte	0
35649                                           ! 6967                              0,
35650 8C64                        00            .byte	0
35651                                           ! 6968                                0,
35652 8C65                        00            .byte	0
35653                                           ! 6969                        0xE0000000,
35654 8C66                      0000            .word	0
35655 8C68                      E000            .word	$E000
35656                                           ! 6970                               0,
35657 8C6A                      0000            .word	0
35658 8C6C                      0000            .word	0
35659                                           ! 6971                             0,
35660 8C6E                      0000            .word	0
35661                                           ! 6972                                5760,
35662 8C70                      1680            .word	$1680
35663                                           ! 6973                            
35664                                           ! 6973  0,
35665 8C72                        00            .byte	0
35666                                           ! 6974                             0,
35667 8C73                        00            .byte	0
35668                                           ! 6975                           8,
35669 8C74                        08            .byte	8
35670                                           ! 6976                                16,
35671 8C75                        10            .byte	$10
35672                                           ! 6977                             8,
35673 8C76                        08            .byte	8
35674                                           ! 6978                                  8,
35675 8C77                        08            .byte	8
35676                                           ! 6979                            8,
35677 8C78                        08            .byte	8
35678                                           ! 6980                                 0,
35679 8C79                        00            .byte	0
35680                                           ! 6981                            0,
35681 8C7A                        00            .byte	0
35682                                           ! 6982                                 0,
35683 8C7B                        00            .byte	0
35684                                           ! 6983                          0,
35685 8C7C                      0000            .word	0
35686 8C7E                      0000            .word	0
35687                                           ! 6984 } },
35688                                           ! 6985 { 0x0189,
35689 8C80                      0189            .word	$189
35690                                           ! 6986 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35691 8C82                      009B            .word	$9B
35692                                           ! 6987                           0x01 | 0x02 | 0x04,
35693 8C84                        07            .byte	7
35694                                           ! 6988                           0,
35695 8C85                        00            .byte	0
35696                                           ! 6989                           64,
35697 8C86                      0040            .word	$40
35698                                           ! 6990                    64,
35699 8C88                      0040            .word	$40
35700                                           ! 6991                        0xA000,
35701 8C8A                      A000            .word	$A000
35702                                           ! 6992                        0x0000,
35703 8C8C                      0000            .word	0
35704                                           ! 6993                       0,
35705 8C8E                      0000            .word	0
35706 8C90                      0000            .word	0
35707                                           ! 6994                             7680,
35708 8C92                      1E00            .word	$1E00
35709                                           ! 6995                        1920,
35710 8C94                      0780            .word	$780
35711                                           ! 6996                        1200,
35712 8C96                      04B0            .word	$4B0
35713                                           ! 6997                      8,
35714 8C98                        08            .byte	8
35715                                           ! 6998                      16,
35716 8C99                        10            .byte	$10
35717                                           ! 6999                           1,
35718 8C9A                        01            .byte	1
35719                                           ! 7000                         32,
35720 8C9B                        20            .byte	$20
35721                                           ! 7001                          141,
35722 8C9C                        8D            .byte	$8D
35723                                           ! 7002                        0x06,
35724 8C9D                        06            .byte	6
35725                                           ! 7003                     0,
35726 8C9E                        00            .byte	0
35727                                           ! 7004                               0,
35728 8C9F                        00            .byte	0
35729                                           ! 7005                          0,
35730 8CA0                        00            .byte	0
35731                                           ! 7006                        8,
35732 8CA1                        08            .byte	8
35733                                           ! 7007                             16,
35734 8CA2                        10            .byte	$10
35735                                           ! 7008                          8,
35736 8CA3                        08            .byte	8
35737                                           ! 7009                               8,
35738 8CA4                        08            .byte	8
35739                                           ! 7010                         8,
35740 8CA5                        08            .byte	8
35741                                           ! 7011                              0,
35742 8CA6                        00            .byte	0
35743                                           ! 7012                         8,
35744 8CA7                        08            .byte	8
35745                                           ! 7013                              24,
35746 8CA8                        18            .byte	$18
35747                                           ! 7014                                0x02,
35748 8CA9                        02            .byte	2
35749                                           ! 7015                        0xE0000000,
35750 8CAA                      0000            .word	0
35751 8CAC                      E000            .word	$E000
35752                                           ! 7016                               0,
35753 8CAE                      0000            .word	0
35754 8CB0                      0000            .word	0
35755                                           ! 7017                             0,
35756 8CB2                      0000            .word	0
35757                                           ! 7018                                7680,
35758 8CB4                      1E00            .word	$1E00
35759                                           ! 7019                             0,
35760 8CB6                        00            .byte	0
35761                                           ! 7020                             0,
35762 8CB7                        00            .byte	0
35763                                           ! 7021                           8,
35764 8CB8                        08            .byte	8
35765                                           ! 7022                                16,
35766 8CB9                        10            .byte	$10
35767                                           ! 7023                             8,
35768 8CBA                        08            .byte	8
35769                                           ! 7024                                  8,
35770 8CBB                        08            .byte	8
35771                                           ! 7025                            8,
35772 8CBC                        08            .byte	8
35773                                           ! 7026                                 0,
35774 8CBD                        00            .byte	0
35775                                           ! 7027                            8,
35776 8CBE                        08            .byte	8
35777                                           ! 7028                                 24,
35778 8CBF                        18            .byte	$18
35779                                           ! 7029                          0,
35780 8CC0                      0000            .word	0
35781 8CC2                      0000            .word	0
35782                                           ! 7030 } },
35783                                           ! 7031 { 0x018a,
35784 8CC4                      018A            .word	$18A
35785                                           ! 7032 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35786 8CC6                      009B            .word	$9B
35787                                           ! 7033                           0x01 | 0x02 | 0x04,
35788 8CC8                        07            .byte	7
35789                                           ! 7034                           0,
35790 8CC9                        00            .byte	0
35791                                           ! 7035                           64,
35792 8CCA                      0040            .word	$40
35793                                           ! 7036                    64,
35794 8CCC                      0040            .word	$40
35795                                           ! 7037                        0xA000,
35796 8CCE                      A000            .word	$A000
35797                                           ! 7038                        0x0000,
35798 8CD0                      0000            .word	0
35799                                           ! 7039                       0,
35800 8CD2                      0000            .word	0
35801 8CD4                      0000            .word	0
35802                                           ! 7040                             5120,
35803 8CD6                      1400            .word	$1400
35804                                           ! 7041                        2560,
35805 8CD8                      0A00            .word	$A00
35806                                           ! 7042      
35807                                           ! 7042                   1600,
35808 8CDA                      0640            .word	$640
35809                                           ! 7043                      8,
35810 8CDC                        08            .byte	8
35811                                           ! 7044                      16,
35812 8CDD                        10            .byte	$10
35813                                           ! 7045                           1,
35814 8CDE                        01            .byte	1
35815                                           ! 7046                         16,
35816 8CDF                        10            .byte	$10
35817                                           ! 7047                          125,
35818 8CE0                        7D            .byte	$7D
35819                                           ! 7048                        0x06,
35820 8CE1                        06            .byte	6
35821                                           ! 7049                     0,
35822 8CE2                        00            .byte	0
35823                                           ! 7050                               1,
35824 8CE3                        01            .byte	1
35825                                           ! 7051                          0,
35826 8CE4                        00            .byte	0
35827                                           ! 7052                        5,
35828 8CE5                        05            .byte	5
35829                                           ! 7053                             11,
35830 8CE6                        0B            .byte	$B
35831                                           ! 7054                          6,
35832 8CE7                        06            .byte	6
35833                                           ! 7055                               5,
35834 8CE8                        05            .byte	5
35835                                           ! 7056                         5,
35836 8CE9                        05            .byte	5
35837                                           ! 7057                              0,
35838 8CEA                        00            .byte	0
35839                                           ! 7058                         0,
35840 8CEB                        00            .byte	0
35841                                           ! 7059                              0,
35842 8CEC                        00            .byte	0
35843                                           ! 7060                                0,
35844 8CED                        00            .byte	0
35845                                           ! 7061                        0xE0000000,
35846 8CEE                      0000            .word	0
35847 8CF0                      E000            .word	$E000
35848                                           ! 7062                               0,
35849 8CF2                      0000            .word	0
35850 8CF4                      0000            .word	0
35851                                           ! 7063                             0,
35852 8CF6                      0000            .word	0
35853                                           ! 7064                                5120,
35854 8CF8                      1400            .word	$1400
35855                                           ! 7065                             0,
35856 8CFA                        00            .byte	0
35857                                           ! 7066                             0,
35858 8CFB                        00            .byte	0
35859                                           ! 7067                           5,
35860 8CFC                        05            .byte	5
35861                                           ! 7068                                11,
35862 8CFD                        0B            .byte	$B
35863                                           ! 7069                             6,
35864 8CFE                        06            .byte	6
35865                                           ! 7070                                  5,
35866 8CFF                        05            .byte	5
35867                                           ! 7071                            5,
35868 8D00                        05            .byte	5
35869                                           ! 7072                                 0,
35870 8D01                        00            .byte	0
35871                                           ! 7073                            0,
35872 8D02                        00            .byte	0
35873                                           ! 7074                                 0,
35874 8D03                        00            .byte	0
35875                                           ! 7075                          0,
35876 8D04                      0000            .word	0
35877 8D06                      0000            .word	0
35878                                           ! 7076 } },
35879                                           ! 7077 { 0x018b,
35880 8D08                      018B            .word	$18B
35881                                           ! 7078 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35882 8D0A                      009B            .word	$9B
35883                                           ! 7079                           0x01 | 0x02 | 0x04,
35884 8D0C                        07            .byte	7
35885                                           ! 7080                           0,
35886 8D0D                        00            .byte	0
35887                                           ! 7081                           64,
35888 8D0E                      0040            .word	$40
35889                                           ! 7082                    64,
35890 8D10                      0040            .word	$40
35891                                           ! 7083                        0xA000,
35892 8D12                      A000            .word	$A000
35893                                           ! 7084                        0x0000,
35894 8D14                      0000            .word	0
35895                                           ! 7085                       0,
35896 8D16                      0000            .word	0
35897 8D18                      0000            .word	0
35898                                           ! 7086                             7680,
35899 8D1A                      1E00            .word	$1E00
35900                                           ! 7087                        2560,
35901 8D1C                      0A00            .word	$A00
35902                                           ! 7088                        1600,
35903 8D1E                      0640            .word	$640
35904                                           ! 7089                      8,
35905 8D20                        08            .byte	8
35906                                           ! 7090                      16,
35907 8D21                        10            .byte	$10
35908                                           ! 7091                           1,
35909 8D22                        01            .byte	1
35910                                           ! 7092                         24,
35911 8D23                        18            .byte	$18
35912                                           ! 7093                          188,
35913 8D24                        BC            .byte	$BC
35914                                           ! 7094                        0x06,
35915 8D25                        06            .byte	6
35916                                           ! 7095                     0,
35917 8D26                        00            .byte	0
35918                                           ! 7096                               0,
35919 8D27                        00            .byte	0
35920                                           ! 7097                          0,
35921 8D28                        00            .byte	0
35922                                           ! 7098                        8,
35923 8D29                        08            .byte	8
35924                                           ! 7099                             16,
35925 8D2A                        10            .byte	$10
35926                                           ! 7100                          8,
35927 8D2B                        08            .byte	8
35928                                           ! 7101                               8,
35929 8D2C                        08            .byte	8
35930                                           ! 7102                         8,
35931 8D2D                        08            .byte	8
35932                                           ! 7103                              0,
35933 8D2E                        00            .byte	0
35934                                           ! 7104                         0,
35935 8D2F                        00            .byte	0
35936                                           ! 7105                              0,
35937 8D30                        00            .byte	0
35938                                           ! 7106                                0,
35939 8D31                        00            .byte	0
35940                                           ! 7107                        0xE0000000,
35941 8D32                      0000            .word	0
35942 8D34                      E000            .word	$E000
35943                                           ! 7108                               0,
35944 8D36                      0000            .word	0
35945 8D38                      0000            .word	0
35946                                           ! 7109                             0,
35947 8D3A                      0000            .word	0
35948                                           ! 7110                               
35949                                           ! 7110  7680,
35950 8D3C                      1E00            .word	$1E00
35951                                           ! 7111                             0,
35952 8D3E                        00            .byte	0
35953                                           ! 7112                             0,
35954 8D3F                        00            .byte	0
35955                                           ! 7113                           8,
35956 8D40                        08            .byte	8
35957                                           ! 7114                                16,
35958 8D41                        10            .byte	$10
35959                                           ! 7115                             8,
35960 8D42                        08            .byte	8
35961                                           ! 7116                                  8,
35962 8D43                        08            .byte	8
35963                                           ! 7117                            8,
35964 8D44                        08            .byte	8
35965                                           ! 7118                                 0,
35966 8D45                        00            .byte	0
35967                                           ! 7119                            0,
35968 8D46                        00            .byte	0
35969                                           ! 7120                                 0,
35970 8D47                        00            .byte	0
35971                                           ! 7121                          0,
35972 8D48                      0000            .word	0
35973 8D4A                      0000            .word	0
35974                                           ! 7122 } },
35975                                           ! 7123 { 0x018c,
35976 8D4C                      018C            .word	$18C
35977                                           ! 7124 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35978 8D4E                      009B            .word	$9B
35979                                           ! 7125                           0x01 | 0x02 | 0x04,
35980 8D50                        07            .byte	7
35981                                           ! 7126                           0,
35982 8D51                        00            .byte	0
35983                                           ! 7127                           64,
35984 8D52                      0040            .word	$40
35985                                           ! 7128                    64,
35986 8D54                      0040            .word	$40
35987                                           ! 7129                        0xA000,
35988 8D56                      A000            .word	$A000
35989                                           ! 7130                        0x0000,
35990 8D58                      0000            .word	0
35991                                           ! 7131                       0,
35992 8D5A                      0000            .word	0
35993 8D5C                      0000            .word	0
35994                                           ! 7132                             10240,
35995 8D5E                      2800            .word	$2800
35996                                           ! 7133                        2560,
35997 8D60                      0A00            .word	$A00
35998                                           ! 7134                        1600,
35999 8D62                      0640            .word	$640
36000                                           ! 7135                      8,
36001 8D64                        08            .byte	8
36002                                           ! 7136                      16,
36003 8D65                        10            .byte	$10
36004                                           ! 7137                           1,
36005 8D66                        01            .byte	1
36006                                           ! 7138                         32,
36007 8D67                        20            .byte	$20
36008                                           ! 7139                          250,
36009 8D68                        FA            .byte	$FA
36010                                           ! 7140                        0x06,
36011 8D69                        06            .byte	6
36012                                           ! 7141                     0,
36013 8D6A                        00            .byte	0
36014                                           ! 7142                               0,
36015 8D6B                        00            .byte	0
36016                                           ! 7143                          0,
36017 8D6C                        00            .byte	0
36018                                           ! 7144                        8,
36019 8D6D                        08            .byte	8
36020                                           ! 7145                             16,
36021 8D6E                        10            .byte	$10
36022                                           ! 7146                          8,
36023 8D6F                        08            .byte	8
36024                                           ! 7147                               8,
36025 8D70                        08            .byte	8
36026                                           ! 7148                         8,
36027 8D71                        08            .byte	8
36028                                           ! 7149                              0,
36029 8D72                        00            .byte	0
36030                                           ! 7150                         8,
36031 8D73                        08            .byte	8
36032                                           ! 7151                              24,
36033 8D74                        18            .byte	$18
36034                                           ! 7152                                0x02,
36035 8D75                        02            .byte	2
36036                                           ! 7153                        0xE0000000,
36037 8D76                      0000            .word	0
36038 8D78                      E000            .word	$E000
36039                                           ! 7154                               0,
36040 8D7A                      0000            .word	0
36041 8D7C                      0000            .word	0
36042                                           ! 7155                             0,
36043 8D7E                      0000            .word	0
36044                                           ! 7156                                10240,
36045 8D80                      2800            .word	$2800
36046                                           ! 7157                             0,
36047 8D82                        00            .byte	0
36048                                           ! 7158                             0,
36049 8D83                        00            .byte	0
36050                                           ! 7159                           8,
36051 8D84                        08            .byte	8
36052                                           ! 7160                                16,
36053 8D85                        10            .byte	$10
36054                                           ! 7161                             8,
36055 8D86                        08            .byte	8
36056                                           ! 7162                                  8,
36057 8D87                        08            .byte	8
36058                                           ! 7163                            8,
36059 8D88                        08            .byte	8
36060                                           ! 7164                                 0,
36061 8D89                        00            .byte	0
36062                                           ! 7165                            8,
36063 8D8A                        08            .byte	8
36064                                           ! 7166                                 24,
36065 8D8B                        18            .byte	$18
36066                                           ! 7167                          0,
36067 8D8C                      0000            .word	0
36068 8D8E                      0000            .word	0
36069                                           ! 7168 } },
36070                                           ! 7169 { 0xFFFF,
36071 8D90                      FFFF            .word	$FFFF
36072                                           ! 7170 { 0,
36073 8D92                      0000            .word	0
36074                                           ! 7171 } },
36075 8D94                  00000040            .blkb	$40
36076                                           ! 7172 };
36077                                           !BCC_EOS
36078                                           ! 7173 extern char vbebios_copyright;
36079                                           !BCC_EOS
36080                                           ! 7174 extern char vbebios_vendor_name;
36081                                           !BCC_EOS
36082                                           ! 7175 extern char vbebios_product_name;
36083                                           !BCC_EOS
36084                                           ! 7176 extern char vbebios_product_revision;
36085                                           !BCC_EOS
36086                                           ! 7177 #asm
36087                                           !BCC_ASM
36088                       00008DD4            _vbebios_copyright:
36089 8DD4                        42            .ascii "Bochs/Plex86 VBE(C) 2003 http://savannah.nongnu.org/projects/vgabios/"
36090 8E19                        00            .byte 0x00
36091                       00008E1A            _vbebios_vendor_name:
36092 8E1A                        42            .ascii "Bochs/Plex86 Developers"
36093 8E31                        00            .byte 0x00
36094                       00008E32            _vbebios_product_name:
36095 8E32                        42            .ascii "Bochs/Plex86 VBE Adapter"
36096 8E4A                        00            .byte 0x00
36097                       00008E4B            _vbebios_product_revision:
36098 8E4B                        24            .ascii "$Id: vbe.c,v 1.60 2008/03/02 07:47:21 vruppert Exp $"
36099 8E7F                        00            .byte 0x00
36100                       00008E80            _vbebios_info_string:
36101 8E80                        42            .ascii "Bochs VBE Display Adapter enabled"
36102 8EA1                        0A            .byte 0x0a,0x0d
36103 8EA3                        0A            .byte 0x0a,0x0d
36104 8EA5                        00            .byte 0x00
36105                       00008EA6            _no_vbebios_info_string:
36106 8EA6                        4E            .ascii "NO Bochs VBE Support available!"
36107 8EC5                        0A            .byte 0x0a,0x0d
36108 8EC7                        0A            .byte 0x0a,0x0d
36109 8EC9                        00            .byte 0x00
36110                       00008ECA            msg_vbe_init:
36111 8ECA                        56            .ascii "VBE Bios $Id: vbe.c,v 1.60 2008/03/02 07:47:21 vruppert Exp $"
36112 8F07                        0A            .byte 0x0a,0x0d, 0x00
36113 8F0A                  00000002              .align 2
36114                       00008F0A            vesa_pm_start:
36115 8F0A                      0014              dw vesa_pm_set_window - vesa_pm_start
36116 8F0C                      004B              dw vesa_pm_set_display_start - vesa_pm_start
36117 8F0E                      00FC              dw vesa_pm_unimplemented - vesa_pm_start
36118 8F10                      0008              dw vesa_pm_io_ports_table - vesa_pm_start
36119                       00008F12            vesa_pm_io_ports_table:
36120 8F12                      01CE              dw 0x01CE
36121 8F14                      01CF              dw 0x01CE + 1
36122 8F16                      01CF              dw 0x01CF
36123 8F18                      01D0              dw 0x01CF + 1
36124 8F1A                      FFFF              dw 0xffff
36125 8F1C                      FFFF              dw 0xffff
36126                                             USE32
36127                       00008F1E            vesa_pm_set_window:
36128 8F1E     66    83FB                   00    cmp bx, #0x00
36129 8F22           74           05              je vesa_pm_set_display_window1
36130 8F24     66    B8                   0100    mov ax, #0x0100
36131 8F28           C3                           ret
36132                       00008F29            vesa_pm_set_display_window1:
36133 8F29     66    89D0                         mov ax, dx
36134 8F2C     66    52                           push dx
36135 8F2E     66    50                           push ax
36136 8F30     66    BA                   01CE    mov dx, # 0x01CE
36137 8F34     66    B8                   0005    mov ax, # 0x5
36138 8F38     66    EF                           out dx, ax
36139 8F3A     66    58                           pop ax
36140 8F3C     66    BA                   01CF    mov dx, # 0x01CF
36141 8F40     66    EF                           out dx, ax
36142 8F42     66    ED                           in ax, dx
36143 8F44     66    5A                           pop dx
36144 8F46     66    39C2                         cmp dx, ax
36145 8F49           75           05              jne illegal_window
36146 8F4B     66    B8                   004F    mov ax, #0x004f
36147 8F4F           C3                           ret
36148                       00008F50            illegal_window:
36149 8F50     66    B8                   014F    mov ax, #0x014f
36150 8F54           C3                           ret
36151                       00008F55            vesa_pm_set_display_start:
36152 8F55           80FB                   80    cmp bl, #0x80
36153 8F58           74           0A              je vesa_pm_set_display_start1
36154 8F5A           80FB                   00    cmp bl, #0x00
36155 8F5D           74           05              je vesa_pm_set_display_start1
36156 8F5F     66    B8                   0100    mov ax, #0x0100
36157 8F63           C3                           ret
36158                       00008F64            vesa_pm_set_display_start1:
36159                                           ; convert offset to (X, Y) coordinate
36160                                           ; (would be simpler to change Bochs 1 API...)
36161 8F64           50                           push eax
36162 8F65           51                           push ecx
36163 8F66           52                           push edx
36164 8F67           56                           push esi
36165 8F68           57                           push edi
36166 8F69           C1E2                   10    shl edx, #16
36167 8F6C           81E1             0000FFFF    and ecx, #0xffff
36168 8F72           09D1                         or ecx, edx
36169 8F74           C1E1                   02    shl ecx, #2
36170 8F77           89C8                         mov eax, ecx
36171 8F79           50                           push eax
36172 8F7A     66    BA                   01CE    mov dx, # 0x01CE
36173 8F7E     66    B8                   0006    mov ax, # 0x6
36174 8F82     66    EF                           out dx, ax
36175 8F84     66    BA                   01CF    mov dx, # 0x01CF
36176 8F88     66    ED                           in ax, dx
36177 8F8A         0FB7C8                         movzx ecx, ax
36178 8F8D     66    BA                   01CE    mov dx, # 0x01CE
36179 8F91     66    B8                   0003    mov ax, # 0x3
36180 8F95     66    EF                           out dx, ax
36181 8F97     66    BA                   01CF    mov dx, # 0x01CF
36182 8F9B     66    ED                           in ax, dx
36183 8F9D         0FB7F0                         movzx esi, ax
36184 8FA0           58                           pop eax
36185 8FA1           83FE                   04    cmp esi, #4
36186 8FA4           74           17              jz bpp4_mode
36187 8FA6           83C6                   07    add esi, #7
36188 8FA9           C1EE                   03    shr esi, #3
36189 8FAC         0FAFCE                         imul ecx, esi
36190 8FAF           31D2                         xor edx, edx
36191 8FB1           F7F1                         div ecx
36192 8FB3           89C7                         mov edi, eax
36193 8FB5           89D0                         mov eax, edx
36194 8FB7           31D2                         xor edx, edx
36195 8FB9           F7F6                         div esi
36196 8FBB           EB           0C              jmp set_xy_regs
36197                       00008FBD            bpp4_mode:
36198 8FBD           D1E9                         shr ecx, #1
36199 8FBF           31D2                         xor edx, edx
36200 8FC1           F7F1                         div ecx
36201 8FC3           89C7                         mov edi, eax
36202 8FC5           89D0                         mov eax, edx
36203 8FC7           D1E0                         shl eax, #1
36204                       00008FC9            set_xy_regs:
36205 8FC9     66    52                           push dx
36206 8FCB     66    50                           push ax
36207 8FCD     66    BA                   01CE    mov dx, # 0x01CE
36208 8FD1     66    B8                   0008    mov ax, # 0x8
36209 8FD5     66    EF                           out dx, ax
36210 8FD7     66    58                           pop ax
36211 8FD9     66    BA                   01CF    mov dx, # 0x01CF
36212 8FDD     66    EF                           out dx, ax
36213 8FDF     66    5A                           pop dx
36214 8FE1     66    89F8                         mov ax, di
36215 8FE4     66    52                           push dx
36216 8FE6     66    50                           push ax
36217 8FE8     66    BA                   01CE    mov dx, # 0x01CE
36218 8FEC     66    B8                   0009    mov ax, # 0x9
36219 8FF0     66    EF                           out dx, ax
36220 8FF2     66    58                           pop ax
36221 8FF4     66    BA                   01CF    mov dx, # 0x01CF
36222 8FF8     66    EF                           out dx, ax
36223 8FFA     66    5A                           pop dx
36224 8FFC           5F                           pop edi
36225 8FFD           5E                           pop esi
36226 8FFE           5A                           pop edx
36227 8FFF           59                           pop ecx
36228 9000           58                           pop eax
36229 9001     66    B8                   004F    mov ax, #0x004f
36230 9005           C3                           ret
36231                       00009006            vesa_pm_unimplemented:
36232 9006     66    B8                   014F    mov ax, #0x014f
36233 900A           C3                           ret
36234                                             USE16
36235                       0000900B            vesa_pm_end:
36236                                           ; DISPI ioport functions
36237                       0000900B            dispi_get_id:
36238 900B           52                           push dx
36239 900C           BA                   01CE    mov dx, # 0x01CE
36240 900F           B8                   0000    mov ax, # 0x0
36241 9012           EF                           out dx, ax
36242 9013           BA                   01CF    mov dx, # 0x01CF
36243 9016           ED                           in ax, dx
36244 9017           5A                           pop dx
36245 9018           C3                           ret
36246                       00009019            dispi_set_id:
36247 9019           52                           push dx
36248 901A           50                           push ax
36249 901B           BA                   01CE    mov dx, # 0x01CE
36250 901E           B8                   0000    mov ax, # 0x0
36251 9021           EF                           out dx, ax
36252 9022           58                           pop ax
36253 9023           BA                   01CF    mov dx, # 0x01CF
36254 9026           EF                           out dx, ax
36255 9027           5A                           pop dx
36256 9028           C3                           ret
36257                                           ! 7347 endasm
36258                                           !BCC_ENDASM
36259                                           ! 7348 static void dispi_set_xres(xres)
36260                                           ! 7349   Bit16u xres;
36261                                           
36262                       00009029            _dispi_set_xres:
36263                                           !BCC_EOS
36264                                           ! 7350 {
36265                                           ! 7351 #asm
36266                                           !BCC_ASM
36267                       00000002            _dispi_set_xres.xres	set	2
36268 9029           55                           push bp
36269 902A           89E5                         mov bp, sp
36270 902C           50                           push ax
36271 902D           52                           push dx
36272 902E           BA                   01CE    mov dx, # 0x01CE
36273 9031           B8                   0001    mov ax, # 0x1
36274 9034           EF                           out dx, ax
36275 9035           BA                   01CF    mov dx, # 0x01CF
36276 9038           8B46         04              mov ax, 4[bp] ; xres
36277 903B           EF                           out dx, ax
36278 903C           5A                           pop dx
36279 903D           58                           pop ax
36280 903E           5D                           pop bp
36281                                           ! 7365 endasm
36282                                           !BCC_ENDASM
36283                                           ! 7366 }
36284 903F           C3                         ret
36285                                           ! 7367 static void dispi_set_yres(yres)
36286                                           ! 7368   Bit16u yres;
36287                       00009040            _dispi_set_yres:
36288                                           !BCC_EOS
36289                                           ! 7369 {
36290                                           ! 7370   outw(0x01CE,0x2);
36291 9040           55                         push	bp
36292 9041           89E5                       mov	bp,sp
36293                                           ! Debug: list int = const 2 (used reg = )
36294 9043           B8                   0002  mov	ax,*2
36295 9046           50                         push	ax
36296                                           ! Debug: list int = const $1CE (used reg = )
36297 9047           B8                   01CE  mov	ax,#$1CE
36298 904A           50                         push	ax
36299                                           ! Debug: func () void = outw+0 (used reg = )
36300 904B           E8         EBBE            call	_outw
36301 904E           89EC                       mov	sp,bp
36302                                           !BCC_EOS
36303                                           ! 7371   outw(0x01CF,yres);
36304                                           ! Debug: list unsigned short yres = [S+2+2] (used reg = )
36305 9050           FF76         04            push	4[bp]
36306                                           ! Debug: list int = const $1CF (used reg = )
36307 9053           B8                   01CF  mov	ax,#$1CF
36308 9056           50                         push	ax
36309                                           ! Debug: func () void = outw+0 (used reg = )
36310 9057           E8         EBB2            call	_outw
36311 905A           89EC                       mov	sp,bp
36312                                           !BCC_EOS
36313                                           ! 7372 }
36314 905C           5D                         pop	bp
36315 905D           C3                         ret
36316                                           ! 7373 static void dispi_set_bpp(bpp)
36317                                           ! 7374   Bit16u bpp;
36318                       0000905E            _dispi_set_bpp:
36319                                           !BCC_EOS
36320                                           ! 7375 {
36321                                           ! 7376   outw(0x01CE,0x3);
36322 905E           55                         push	bp
36323 905F           89E5                       mov	bp,sp
36324                                           ! Debug: list int = const 3 (used reg = )
36325 9061           B8                   0003  mov	ax,*3
36326 9064           50                         push	ax
36327                                           ! Debug: list int = const $1CE (used reg = )
36328 9065           B8                   01CE  mov	ax,#$1CE
36329 9068           50                         push	ax
36330                                           ! Debug: func () void = outw+0 (used reg = )
36331 9069           E8         EBA0            call	_outw
36332 906C           89EC                       mov	sp,bp
36333                                           !BCC_EOS
36334                                           ! 7377   outw(0x01CF,bpp);
36335                                           ! Debug: list unsigned short bpp = [S+2+2] (used reg = )
36336 906E           FF76         04            push	4[bp]
36337                                           ! Debug: list int = const $1CF (used reg = )
36338 9071           B8                   01CF  mov	ax,#$1CF
36339 9074           50                         push	ax
36340                                           ! Debug: func () void = outw+0 (used reg = )
36341 9075           E8         EB94            call	_outw
36342 9078           89EC                       mov	sp,bp
36343                                           !BCC_EOS
36344                                           ! 7378 }
36345 907A           5D                         pop	bp
36346 907B           C3                         ret
36347                                           ! 7379 #asm
36348                                           !BCC_ASM
36349                       00000002            _dispi_set_bpp.bpp	set	2
36350                                           ; AL = bits per pixel / AH = bytes per pixel
36351                       0000907C            dispi_get_bpp:
36352 907C           52                           push dx
36353 907D           BA                   01CE    mov dx, # 0x01CE
36354 9080           B8                   0003    mov ax, # 0x3
36355 9083           EF                           out dx, ax
36356 9084           BA                   01CF    mov dx, # 0x01CF
36357 9087           ED                           in ax, dx
36358 9088           88C4                         mov ah, al
36359 908A           C0EC                   03    shr ah, 3
36360 908D           A8                     07    test al, #0x07
36361 908F           74           02              jz get_bpp_noinc
36362 9091           FEC4                         inc ah
36363                       00009093            get_bpp_noinc:
36364 9093           5A                           pop dx
36365 9094           C3                           ret
36366                                           ; get display capabilities
36367                       00009095            _dispi_get_max_xres:
36368 9095           52                           push dx
36369 9096           53                           push bx
36370 9097           E8         004F              call dispi_get_enable
36371 909A           89C3                         mov bx, ax
36372 909C           0D                   0002    or ax, # 0x02
36373 909F           E8         0037              call _dispi_set_enable
36374 90A2           BA                   01CE    mov dx, # 0x01CE
36375 90A5           B8                   0001    mov ax, # 0x1
36376 90A8           EF                           out dx, ax
36377 90A9           BA                   01CF    mov dx, # 0x01CF
36378 90AC           ED                           in ax, dx
36379 90AD           50                           push ax
36380 90AE           89D8                         mov ax, bx
36381 90B0           E8         0026              call _dispi_set_enable
36382 90B3           58                           pop ax
36383 90B4           5B                           pop bx
36384 90B5           5A                           pop dx
36385 90B6           C3                           ret
36386                       000090B7            _dispi_get_max_bpp:
36387 90B7           52                           push dx
36388 90B8           53                           push bx
36389 90B9           E8         002D              call dispi_get_enable
36390 90BC           89C3                         mov bx, ax
36391 90BE           0D                   0002    or ax, # 0x02
36392 90C1           E8         0015              call _dispi_set_enable
36393 90C4           BA                   01CE    mov dx, # 0x01CE
36394 90C7           B8                   0003    mov ax, # 0x3
36395 90CA           EF                           out dx, ax
36396 90CB           BA                   01CF    mov dx, # 0x01CF
36397 90CE           ED                           in ax, dx
36398 90CF           50                           push ax
36399 90D0           89D8                         mov ax, bx
36400 90D2           E8         0004              call _dispi_set_enable
36401 90D5           58                           pop ax
36402 90D6           5B                           pop bx
36403 90D7           5A                           pop dx
36404 90D8           C3                           ret
36405                       000090D9            _dispi_set_enable:
36406 90D9           52                           push dx
36407 90DA           50                           push ax
36408 90DB           BA                   01CE    mov dx, # 0x01CE
36409 90DE           B8                   0004    mov ax, # 0x4
36410 90E1           EF                           out dx, ax
36411 90E2           58                           pop ax
36412 90E3           BA                   01CF    mov dx, # 0x01CF
36413 90E6           EF                           out dx, ax
36414 90E7           5A                           pop dx
36415 90E8           C3                           ret
36416                       000090E9            dispi_get_enable:
36417 90E9           52                           push dx
36418 90EA           BA                   01CE    mov dx, # 0x01CE
36419 90ED           B8                   0004    mov ax, # 0x4
36420 90F0           EF                           out dx, ax
36421 90F1           BA                   01CF    mov dx, # 0x01CF
36422 90F4           ED                           in ax, dx
36423 90F5           5A                           pop dx
36424 90F6           C3                           ret
36425                       000090F7            _dispi_set_bank:
36426 90F7           52                           push dx
36427 90F8           50                           push ax
36428 90F9           BA                   01CE    mov dx, # 0x01CE
36429 90FC           B8                   0005    mov ax, # 0x5
36430 90FF           EF                           out dx, ax
36431 9100           58                           pop ax
36432 9101           BA                   01CF    mov dx, # 0x01CF
36433 9104           EF                           out dx, ax
36434 9105           5A                           pop dx
36435 9106           C3                           ret
36436                       00009107            dispi_get_bank:
36437 9107           52                           push dx
36438 9108           BA                   01CE    mov dx, # 0x01CE
36439 910B           B8                   0005    mov ax, # 0x5
36440 910E           EF                           out dx, ax
36441 910F           BA                   01CF    mov dx, # 0x01CF
36442 9112           ED                           in ax, dx
36443 9113           5A                           pop dx
36444 9114           C3                           ret
36445                                           ! 7475 endasm
36446                                           !BCC_ENDASM
36447                                           ! 7476 static void dispi_set_bank_farcall()
36448                                           ! 7477 {
36449                       00009115            _dispi_set_bank_farcall:
36450                                           ! 7478 #asm
36451                                           !BCC_ASM
36452 9115           81FB                 0100    cmp bx,#0x0100
36453 9119           74           1E              je dispi_set_bank_farcall_get
36454 911B           09DB                         or bx,bx
36455 911D           75           28              jnz dispi_set_bank_farcall_error
36456 911F           89D0                         mov ax,dx
36457 9121           52                           push dx
36458 9122           50                           push ax
36459 9123           B8                   0005    mov ax,# 0x5
36460 9126           BA                   01CE    mov dx,# 0x01CE
36461 9129           EF                           out dx,ax
36462 912A           58                           pop ax
36463 912B           BA                   01CF    mov dx,# 0x01CF
36464 912E           EF                           out dx,ax
36465 912F           ED                           in ax,dx
36466 9130           5A                           pop dx
36467 9131           39C2                         cmp dx,ax
36468 9133           75           12              jne dispi_set_bank_farcall_error
36469 9135           B8                   004F    mov ax, #0x004f
36470 9138           CB                           retf
36471                       00009139            dispi_set_bank_farcall_get:
36472 9139           B8                   0005    mov ax,# 0x5
36473 913C           BA                   01CE    mov dx,# 0x01CE
36474 913F           EF                           out dx,ax
36475 9140           BA                   01CF    mov dx,# 0x01CF
36476 9143           ED                           in ax,dx
36477 9144           89C2                         mov dx,ax
36478 9146           CB                           retf
36479                       00009147            dispi_set_bank_farcall_error:
36480 9147           B8                   014F    mov ax,#0x014F
36481 914A           CB                           retf
36482                                           ! 7509 endasm
36483                                           !BCC_ENDASM
36484                                           ! 7510 }
36485 914B           C3                         ret
36486                                           ! 7511 #asm
36487                                           !BCC_ASM
36488                       0000914C            dispi_set_x_offset:
36489 914C           52                           push dx
36490 914D           50                           push ax
36491 914E           BA                   01CE    mov dx, # 0x01CE
36492 9151           B8                   0008    mov ax, # 0x8
36493 9154           EF                           out dx, ax
36494 9155           58                           pop ax
36495 9156           BA                   01CF    mov dx, # 0x01CF
36496 9159           EF                           out dx, ax
36497 915A           5A                           pop dx
36498 915B           C3                           ret
36499                       0000915C            dispi_get_x_offset:
36500 915C           52                           push dx
36501 915D           BA                   01CE    mov dx, # 0x01CE
36502 9160           B8                   0008    mov ax, # 0x8
36503 9163           EF                           out dx, ax
36504 9164           BA                   01CF    mov dx, # 0x01CF
36505 9167           ED                           in ax, dx
36506 9168           5A                           pop dx
36507 9169           C3                           ret
36508                       0000916A            dispi_set_y_offset:
36509 916A           52                           push dx
36510 916B           50                           push ax
36511 916C           BA                   01CE    mov dx, # 0x01CE
36512 916F           B8                   0009    mov ax, # 0x9
36513 9172           EF                           out dx, ax
36514 9173           58                           pop ax
36515 9174           BA                   01CF    mov dx, # 0x01CF
36516 9177           EF                           out dx, ax
36517 9178           5A                           pop dx
36518 9179           C3                           ret
36519                       0000917A            dispi_get_y_offset:
36520 917A           52                           push dx
36521 917B           BA                   01CE    mov dx, # 0x01CE
36522 917E           B8                   0009    mov ax, # 0x9
36523 9181           EF                           out dx, ax
36524 9182           BA                   01CF    mov dx, # 0x01CF
36525 9185           ED                           in ax, dx
36526 9186           5A                           pop dx
36527 9187           C3                           ret
36528                       00009188            vga_set_virt_width:
36529 9188           50                           push ax
36530 9189           53                           push bx
36531 918A           52                           push dx
36532 918B           89C3                         mov bx, ax
36533 918D           E8         FEEC              call dispi_get_bpp
36534 9190           3C                     04    cmp al, #0x04
36535 9192           77           02              ja set_width_svga
36536 9194           D1EB                         shr bx, #1
36537                       00009196            set_width_svga:
36538 9196           C1EB                   03    shr bx, #3
36539 9199           BA                   03D4    mov dx, # 0x3d4
36540 919C           88DC                         mov ah, bl
36541 919E           B0                     13    mov al, #0x13
36542 91A0           EF                           out dx, ax
36543 91A1           5A                           pop dx
36544 91A2           5B                           pop bx
36545 91A3           58                           pop ax
36546 91A4           C3                           ret
36547                       000091A5            dispi_set_virt_width:
36548 91A5           E8         FFE0              call vga_set_virt_width
36549 91A8           52                           push dx
36550 91A9           50                           push ax
36551 91AA           BA                   01CE    mov dx, # 0x01CE
36552 91AD           B8                   0006    mov ax, # 0x6
36553 91B0           EF                           out dx, ax
36554 91B1           58                           pop ax
36555 91B2           BA                   01CF    mov dx, # 0x01CF
36556 91B5           EF                           out dx, ax
36557 91B6           5A                           pop dx
36558 91B7           C3                           ret
36559                       000091B8            dispi_get_virt_width:
36560 91B8           52                           push dx
36561 91B9           BA                   01CE    mov dx, # 0x01CE
36562 91BC           B8                   0006    mov ax, # 0x6
36563 91BF           EF                           out dx, ax
36564 91C0           BA                   01CF    mov dx, # 0x01CF
36565 91C3           ED                           in ax, dx
36566 91C4           5A                           pop dx
36567 91C5           C3                           ret
36568                       000091C6            dispi_get_virt_height:
36569 91C6           52                           push dx
36570 91C7           BA                   01CE    mov dx, # 0x01CE
36571 91CA           B8                   0007    mov ax, # 0x7
36572 91CD           EF                           out dx, ax
36573 91CE           BA                   01CF    mov dx, # 0x01CF
36574 91D1           ED                           in ax, dx
36575 91D2           5A                           pop dx
36576 91D3           C3                           ret
36577                       000091D4            _vga_compat_setup:
36578 91D4           50                           push ax
36579 91D5           52                           push dx
36580                                             ; set CRT X resolution
36581 91D6           BA                   01CE    mov dx, # 0x01CE
36582 91D9           B8                   0001    mov ax, # 0x1
36583 91DC           EF                           out dx, ax
36584 91DD           BA                   01CF    mov dx, # 0x01CF
36585 91E0           ED                           in ax, dx
36586 91E1           50                           push ax
36587 91E2           BA                   03D4    mov dx, # 0x3d4
36588 91E5           B8                   0011    mov ax, #0x0011
36589 91E8           EF                           out dx, ax
36590 91E9           58                           pop ax
36591 91EA           50                           push ax
36592 91EB           C1E8                   03    shr ax, #3
36593 91EE           48                           dec ax
36594 91EF           88C4                         mov ah, al
36595 91F1           B0                     01    mov al, #0x01
36596 91F3           EF                           out dx, ax
36597 91F4           58                           pop ax
36598 91F5           E8         FF90              call vga_set_virt_width
36599                                             ; set CRT Y resolution
36600 91F8           BA                   01CE    mov dx, # 0x01CE
36601 91FB           B8                   0002    mov ax, # 0x2
36602 91FE           EF                           out dx, ax
36603 91FF           BA                   01CF    mov dx, # 0x01CF
36604 9202           ED                           in ax, dx
36605 9203           48                           dec ax
36606 9204           50                           push ax
36607 9205           BA                   03D4    mov dx, # 0x3d4
36608 9208           88C4                         mov ah, al
36609 920A           B0                     12    mov al, #0x12
36610 920C           EF                           out dx, ax
36611 920D           58                           pop ax
36612 920E           B0                     07    mov al, #0x07
36613 9210           EE                           out dx, al
36614 9211           42                           inc dx
36615 9212           EC                           in al, dx
36616 9213           24                     BD    and al, #0xbd
36617 9215           F6C4                   01    test ah, #0x01
36618 9218           74           02              jz bit8_clear
36619 921A           0C                     02    or al, #0x02
36620                       0000921C            bit8_clear:
36621 921C           F6C4                   02    test ah, #0x02
36622 921F           74           02              jz bit9_clear
36623 9221           0C                     40    or al, #0x40
36624                       00009223            bit9_clear:
36625 9223           EE                           out dx, al
36626                                             ; other settings
36627 9224           BA                   03D4    mov dx, # 0x3d4
36628 9227           B8                   0009    mov ax, #0x0009
36629 922A           EF                           out dx, ax
36630 922B           B0                     17    mov al, #0x17
36631 922D           EE                           out dx, al
36632 922E           BA                   03D5    mov dx, # 0x3d5
36633 9231           EC                           in al, dx
36634 9232           0C                     03    or al, #0x03
36635 9234           EE                           out dx, al
36636 9235           BA                   03DA    mov dx, # 0x3da
36637 9238           EC                           in al, dx
36638 9239           BA                   03C0    mov dx, # 0x3c0
36639 923C           B0                     10    mov al, #0x10
36640 923E           EE                           out dx, al
36641 923F           BA                   03C1    mov dx, # 0x3c1
36642 9242           EC                           in al, dx
36643 9243           0C                     01    or al, #0x01
36644 9245           BA                   03C0    mov dx, # 0x3c0
36645 9248           EE                           out dx, al
36646 9249           B0                     20    mov al, #0x20
36647 924B           EE                           out dx, al
36648 924C           BA                   03CE    mov dx, # 0x3ce
36649 924F           B8                   0506    mov ax, #0x0506
36650 9252           EF                           out dx, ax
36651 9253           BA                   03C4    mov dx, # 0x3c4
36652 9256           B8                   0F02    mov ax, #0x0f02
36653 9259           EF                           out dx, ax
36654                                             ; settings for >= 8bpp
36655 925A           BA                   01CE    mov dx, # 0x01CE
36656 925D           B8                   0003    mov ax, # 0x3
36657 9260           EF                           out dx, ax
36658 9261           BA                   01CF    mov dx, # 0x01CF
36659 9264           ED                           in ax, dx
36660 9265           3C                     08    cmp al, #0x08
36661 9267           72           40              jb vga_compat_end
36662 9269           BA                   03D4    mov dx, # 0x3d4
36663 926C           B0                     14    mov al, #0x14
36664 926E           EE                           out dx, al
36665 926F           BA                   03D5    mov dx, # 0x3d5
36666 9272           EC                           in al, dx
36667 9273           0C                     40    or al, #0x40
36668 9275           EE                           out dx, al
36669 9276           BA                   03DA    mov dx, # 0x3da
36670 9279           EC                           in al, dx
36671 927A           BA                   03C0    mov dx, # 0x3c0
36672 927D           B0                     10    mov al, #0x10
36673 927F           EE                           out dx, al
36674 9280           BA                   03C1    mov dx, # 0x3c1
36675 9283           EC                           in al, dx
36676 9284           0C                     40    or al, #0x40
36677 9286           BA                   03C0    mov dx, # 0x3c0
36678 9289           EE                           out dx, al
36679 928A           B0                     20    mov al, #0x20
36680 928C           EE                           out dx, al
36681 928D           BA                   03C4    mov dx, # 0x3c4
36682 9290           B0                     04    mov al, #0x04
36683 9292           EE                           out dx, al
36684 9293           BA                   03C5    mov dx, # 0x3c5
36685 9296           EC                           in al, dx
36686 9297           0C                     08    or al, #0x08
36687 9299           EE                           out dx, al
36688 929A           BA                   03CE    mov dx, # 0x3ce
36689 929D           B0                     05    mov al, #0x05
36690 929F           EE                           out dx, al
36691 92A0           BA                   03CF    mov dx, # 0x3cf
36692 92A3           EC                           in al, dx
36693 92A4           24                     9F    and al, #0x9f
36694 92A6           0C                     40    or al, #0x40
36695 92A8           EE                           out dx, al
36696                       000092A9            vga_compat_end:
36697 92A9           5A                           pop dx
36698 92AA           58                           pop ax
36699                                           ! 7723 endasm
36700                                           !BCC_ENDASM
36701                                           ! 7724 static ModeInfoListItem* mode_info_find_mo
36702                                           ! 7724 de(mode, using_lfb)
36703                                           ! 7725   Bit16u mode; Boolean using_lfb;
36704                       000092AB            _mode_info_find_mode:
36705                                           !BCC_EOS
36706                                           !BCC_EOS
36707                                           ! 7726 {
36708                                           ! 7727   ModeInfoListItem *cur_info=&mode_info_list;
36709 92AB           55                         push	bp
36710 92AC           89E5                       mov	bp,sp
36711 92AE           4C                         dec	sp
36712 92AF           4C                         dec	sp
36713                                           ! Debug: eq * [$3E] struct ModeInfoListItem = mode_info_list+0 to * struct ModeInfoListItem cur_info = [S+4-4] (used reg = )
36714 92B0           BB                   7D5C  mov	bx,#_mode_info_list
36715 92B3           895E         FE            mov	-2[bp],bx
36716                                           !BCC_EOS
36717                                           ! 7728   while (cur_info->mode != 0xFFFF)
36718                                           ! 7729   {
36719 92B6           EB           43            jmp .2B9
36720                       000092B8            .2BA:
36721                                           ! 7730     if (cur_info->mode == mode)
36722 92B8           8B5E         FE            mov	bx,-2[bp]
36723                                           ! Debug: logeq unsigned short mode = [S+4+2] to unsigned short = [bx+0] (used reg = )
36724 92BB           8B1F                       mov	bx,[bx]
36725 92BD           3B5E         04            cmp	bx,4[bp]
36726 92C0           75           30            jne 	.2BB
36727                       000092C2            .2BC:
36728                                           ! 7731     {
36729                                           ! 7732       if (!using_lfb)
36730 92C2           8B46         06            mov	ax,6[bp]
36731 92C5           85C0                       test	ax,ax
36732 92C7           75           09            jne 	.2BD
36733                       000092C9            .2BE:
36734                                           ! 7733       {
36735                                           ! 7734         return cur_info;
36736 92C9           8B46         FE            mov	ax,-2[bp]
36737 92CC           89EC                       mov	sp,bp
36738 92CE           5D                         pop	bp
36739 92CF           C3                         ret
36740                                           !BCC_EOS
36741                                           ! 7735       }
36742                                           ! 7736       else if (cur_info->info.ModeAttributes & 0x0080)
36743 92D0           EB           1E            jmp .2BF
36744                       000092D2            .2BD:
36745 92D2           8B5E         FE            mov	bx,-2[bp]
36746                                           ! Debug: and int = const $80 to unsigned short = [bx+2] (used reg = )
36747 92D5           8A47         02            mov	al,2[bx]
36748 92D8           24                     80  and	al,#$80
36749 92DA           84C0                       test	al,al
36750 92DC           74           09            je  	.2C0
36751                       000092DE            .2C1:
36752                                           ! 7737       {
36753                                           ! 7738         return cur_info;
36754 92DE           8B46         FE            mov	ax,-2[bp]
36755 92E1           89EC                       mov	sp,bp
36756 92E3           5D                         pop	bp
36757 92E4           C3                         ret
36758                                           !BCC_EOS
36759                                           ! 7739       }
36760                                           ! 7740       else
36761                                           ! 7741       {
36762 92E5           EB           09            jmp .2C2
36763                       000092E7            .2C0:
36764                                           ! 7742         cur_info++;
36765                                           ! Debug: postinc * struct ModeInfoListItem cur_info = [S+4-4] (used reg = )
36766 92E7           8B5E         FE            mov	bx,-2[bp]
36767 92EA           83C3                   44  add	bx,*$44
36768 92ED           895E         FE            mov	-2[bp],bx
36769                                           !BCC_EOS
36770                                           ! 7743       }
36771                                           ! 7744     }
36772                       000092F0            .2C2:
36773                       000092F0            .2BF:
36774                                           ! 7745     else
36775                                           ! 7746     {
36776 92F0           EB           09            jmp .2C3
36777                       000092F2            .2BB:
36778                                           ! 7747       cur_info++;
36779                                           ! Debug: postinc * struct ModeInfoListItem cur_info = [S+4-4] (used reg = )
36780 92F2           8B5E         FE            mov	bx,-2[bp]
36781 92F5           83C3                   44  add	bx,*$44
36782 92F8           895E         FE            mov	-2[bp],bx
36783                                           !BCC_EOS
36784                                           ! 7748     }
36785                                           ! 7749   }
36786                       000092FB            .2C3:
36787                                           ! 7750   return 0;
36788                       000092FB            .2B9:
36789 92FB           8B5E         FE            mov	bx,-2[bp]
36790                                           ! Debug: ne unsigned int = const $FFFF to unsigned short = [bx+0] (used reg = )
36791 92FE           8B1F                       mov	bx,[bx]
36792 9300           81FB                 FFFF  cmp	bx,#$FFFF
36793 9304           75           B2            jne	.2BA
36794                       00009306            .2C4:
36795                       00009306            .2B8:
36796 9306           31C0                       xor	ax,ax
36797 9308           89EC                       mov	sp,bp
36798 930A           5D                         pop	bp
36799 930B           C3                         ret
36800                                           !BCC_EOS
36801                                           ! 7751 }
36802                                           ! 7752 #asm
36803                                           !BCC_ASM
36804                       00000004            _mode_info_find_mode.using_lfb	set	4
36805                       00000002            _mode_info_find_mode.mode	set	2
36806                                           ; Has 1 display - Returns true if 1 display detected
36807                       0000930C            _vbe_has_vbe_display:
36808 930C           1E                           push ds
36809 930D           53                           push bx
36810 930E           B8                   0040    mov ax, # 0x40
36811 9311           8ED8                         mov ds, ax
36812 9313           BB                   00B9    mov bx, # 0xB9
36813 9316           8A07                         mov al, [bx]
36814 9318           24                     01    and al, #0x01
36815 931A           30E4                         xor ah, ah
36816 931C           5B                           pop bx
36817 931D           1F                           pop ds
36818 931E           C3                           ret
36819                                           ; 1 Init - Initialise the Vesa Bios Extension Code
36820                                           ; This function does a sanity check on the host side display code interface.
36821                       0000931F            vbe_init:
36822 931F           B8                   B0C0    mov ax, # 0xB0C0
36823 9322           E8         FCF4              call dispi_set_id
36824 9325           E8         FCE3              call dispi_get_id
36825 9328           3D                   B0C0    cmp ax, # 0xB0C0
36826 932B           75           16              jne no_vbe_interface
36827 932D           1E                           push ds
36828 932E           53                           push bx
36829 932F           B8                   0040    mov ax, # 0x40
36830 9332           8ED8                         mov ds, ax
36831 9334           BB                   00B9    mov bx, # 0xB9
36832 9337           B0                     01    mov al, #0x01
36833 9339           8807                         mov [bx], al
36834 933B           5B                           pop bx
36835 933C           1F                           pop ds
36836 933D           B8                   B0C4    mov ax, # 0xB0C4
36837 9340           E8         FCD6              call dispi_set_id
36838                       00009343            no_vbe_interface:
36839 9343           BB                   8ECA    mov bx, #msg_vbe_init
36840 9346           53                           push bx
36841 9347           E8         E8D5              call _printf
36842 934A           44                           inc sp
36843 934B           44                           inc sp
36844 934C           C3                           ret
36845                                           ; 1 Display Info - Display information on screen about the 1
36846                       0000934D            vbe_display_info:
36847 934D           E8         FFBC              call _vbe_has_vbe_display
36848 9350           85C0                         test ax, ax
36849 9352           74           0B              jz no_vbe_flag
36850 9354           B8                   C000    mov ax, #0xc000
36851 9357           8ED8                         mov ds, ax
36852 9359           BE                   8E80    mov si, #_vbebios_info_string
36853 935C           E9         A2D6              jmp _display_string
36854                       0000935F            no_vbe_flag:
36855 935F           B8                   C000    mov ax, #0xc000
36856 9362           8ED8                         mov ds, ax
36857 9364           BE                   8EA6    mov si, #_no_vbebios_info_string
36858 9367           E9         A2CB              jmp _display_string
36859                                           ! 7806 endasm
36860                                           !BCC_ENDASM
36861                                           ! 7807 #asm
36862                                           !BCC_ASM
36863                       00000004            _mode_info_find_mode.using_lfb	set	4
36864                       00000002            _mode_info_find_mode.mode	set	2
36865                       0000936A            _size64:
36866 936A           55                           push bp
36867 936B           89E5                         mov bp, sp
36868 936D           52                           push dx
36869                                           ; multiply bbp by yres first as results fit in 16bits
36870                                           ; then multiply by xres
36871 936E           8B46         08              mov ax, 8[bp]
36872 9371           F766         06              mul word 6[bp]
36873 9374           F766         04              mul word 4[bp]
36874                                           ; divide by 2
36875                                           19 ceiling result
36876 9377           05                   FFFF    add ax, #0xffff
36877 937A           83D2                   07    adc dx, #7
36878 937D           89D0                         mov ax, dx
36879 937F           C1E8                   03    shr ax, #3
36880 9382           5A                           pop dx
36881 9383           5D                           pop bp
36882 9384           C3                           ret
36883                                           ! 7825 endasm
36884                                           !BCC_ENDASM
36885                                           ! 7826 void vbe_biosfn_return_controller_information(AX, ES, DI)
36886                                           ! Register BX used in function mode_info_find_mode
36887                                           ! 7827 Bit16u *AX;Bit16u ES;Bit16u DI;
36888                                           export	_vbe_biosfn_return_controller_information
36889                       00009385            _vbe_biosfn_return_controller_information:
36890                                           !BCC_EOS
36891                                           !BCC_EOS
36892                                           !BCC_EOS
36893                                           ! 7828 {
36894                                           ! 7829         Bit16u ss=get_SS();
36895 9385           55                         push	bp
36896 9386           89E5                       mov	bp,sp
36897 9388           4C                         dec	sp
36898 9389           4C                         dec	sp
36899                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
36900 938A           E8         E88F            call	_get_SS
36901                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
36902 938D           8946         FE            mov	-2[bp],ax
36903                                           !BCC_EOS
36904                                           ! 7830         VbeInfoBlock vbe_info_block;
36905                                           !BCC_EOS
36906                                           ! 7831         Bit16u status;
36907                                           !BCC_EOS
36908                                           ! 7832         Bit16u result;
36909                                           !BCC_EOS
36910                                           ! 7833         Bit16u vbe2_info;
36911                                           !BCC_EOS
36912                                           ! 7834         Bit16u cur_mode=0;
36913 9390           81C4                 FDF8  add	sp,#-$208
36914                                           ! Debug: eq int = const 0 to unsigned short cur_mode = [S+$20C-$20C] (used reg = )
36915 9394           31C0                       xor	ax,ax
36916 9396           8986       FDF6            mov	-$20A[bp],ax
36917                                           !BCC_EOS
36918                                           ! 7835         Bit16u c
36919                                           ! 7835 ur_ptr=34;
36920 939A           4C                         dec	sp
36921 939B           4C                         dec	sp
36922                                           ! Debug: eq int = const $22 to unsigned short cur_ptr = [S+$20E-$20E] (used reg = )
36923 939C           B8                   0022  mov	ax,*$22
36924 939F           8986       FDF4            mov	-$20C[bp],ax
36925                                           !BCC_EOS
36926                                           ! 7836         ModeInfoListItem *cur_info=&mode_info_list;
36927 93A3           4C                         dec	sp
36928 93A4           4C                         dec	sp
36929                                           ! Debug: eq * [$3E] struct ModeInfoListItem = mode_info_list+0 to * struct ModeInfoListItem cur_info = [S+$210-$210] (used reg = )
36930 93A5           BB                   7D5C  mov	bx,#_mode_info_list
36931 93A8           899E       FDF2            mov	-$20E[bp],bx
36932                                           !BCC_EOS
36933                                           ! 7837         status = read_word(ss, AX);
36934                                           ! Debug: list * unsigned short AX = [S+$210+2] (used reg = )
36935 93AC           FF76         04            push	4[bp]
36936                                           ! Debug: list unsigned short ss = [S+$212-4] (used reg = )
36937 93AF           FF76         FE            push	-2[bp]
36938                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
36939 93B2           E8         E7EE            call	_read_word
36940 93B5           83C4                   04  add	sp,*4
36941                                           ! Debug: eq unsigned short = ax+0 to unsigned short status = [S+$210-$206] (used reg = )
36942 93B8           8986       FDFC            mov	-$204[bp],ax
36943                                           !BCC_EOS
36944                                           ! 7838         vbe2_info = 0;
36945                                           ! Debug: eq int = const 0 to unsigned short vbe2_info = [S+$210-$20A] (used reg = )
36946 93BC           31C0                       xor	ax,ax
36947 93BE           8986       FDF8            mov	-$208[bp],ax
36948                                           !BCC_EOS
36949                                           ! 7839         memcpyb(ss, &vbe_info_block, ES, DI, sizeof(vbe_info_block));
36950                                           ! Debug: list int = const $200 (used reg = )
36951 93C2           B8                   0200  mov	ax,#$200
36952 93C5           50                         push	ax
36953                                           ! Debug: list unsigned short DI = [S+$212+6] (used reg = )
36954 93C6           FF76         08            push	8[bp]
36955                                           ! Debug: list unsigned short ES = [S+$214+4] (used reg = )
36956 93C9           FF76         06            push	6[bp]
36957                                           ! Debug: list * struct VbeInfoBlock vbe_info_block = S+$216-$204 (used reg = )
36958 93CC           8D9E       FDFE            lea	bx,-$202[bp]
36959 93D0           53                         push	bx
36960                                           ! Debug: list unsigned short ss = [S+$218-4] (used reg = )
36961 93D1           FF76         FE            push	-2[bp]
36962                                           ! Debug: func () void = memcpyb+0 (used reg = )
36963 93D4           E8         E759            call	_memcpyb
36964 93D7           83C4                   0A  add	sp,*$A
36965                                           !BCC_EOS
36966                                           ! 7840         if (((vbe_info_block.VbeSignature[0] == 'V') &&
36967                                           ! 7841              (vbe_info_block.VbeSignature[1] == 'B') &&
36968                                           ! 7842              (vbe_info_block.VbeSignature[2] == 'E') &&
36969                                           ! 7843              (vbe_info_block.VbeSignature[3] == '2')) ||
36970                                           ! 7844             ((vbe_info_block.VbeSignature[0] == 'V') &&
36971                                           ! 7845              (vbe_info_block.VbeSignature[1] == 'E') &&
36972                                           ! 7846              (vbe_info_block.VbeSignature[2] == 'S') &&
36973                                           ! 7847              (vbe_info_block.VbeSignature[3] == 'A')) )
36974                                           ! Debug: logeq int = const $56 to unsigned char vbe_info_block = [S+$210-$204] (used reg = )
36975 93DA           8A86       FDFE            mov	al,-$202[bp]
36976 93DE           3C                     56  cmp	al,*$56
36977 93E0           75           18            jne 	.2C7
36978                       000093E2            .2CA:
36979                                           ! Debug: logeq int = const $42 to unsigned char vbe_info_block = [S+$210-$203] (used reg = )
36980 93E2           8A86       FDFF            mov	al,-$201[bp]
36981 93E6           3C                     42  cmp	al,*$42
36982 93E8           75           10            jne 	.2C7
36983                       000093EA            .2C9:
36984                                           ! Debug: logeq int = const $45 to unsigned char vbe_info_block = [S+$210-$202] (used reg = )
36985 93EA           8A86       FE00            mov	al,-$200[bp]
36986 93EE           3C                     45  cmp	al,*$45
36987 93F0           75           08            jne 	.2C7
36988                       000093F2            .2C8:
36989                                           ! Debug: logeq int = const $32 to unsigned char vbe_info_block = [S+$210-$201] (used reg = )
36990 93F2           8A86       FE01            mov	al,-$1FF[bp]
36991 93F6           3C                     32  cmp	al,*$32
36992 93F8           74           20            je  	.2C6
36993                       000093FA            .2C7:
36994                                           ! Debug: logeq int = const $56 to unsigned char vbe_info_block = [S+$210-$204] (used reg = )
36995 93FA           8A86       FDFE            mov	al,-$202[bp]
36996 93FE           3C                     56  cmp	al,*$56
36997 9400           75           1F            jne 	.2C5
36998                       00009402            .2CD:
36999                                           ! Debug: logeq int = const $45 to unsigned char vbe_info_block = [S+$210-$203] (used reg = )
37000 9402           8A86       FDFF            mov	al,-$201[bp]
37001 9406           3C                     45  cmp	al,*$45
37002 9408           75           17            jne 	.2C5
37003                       0000940A            .2CC:
37004                                           ! Debug: logeq int = const $53 to unsigned char vbe_info_block = [S+$210-$202] (used reg = )
37005 940A           8A86       FE00            mov	al,-$200[bp]
37006 940E           3C                     53  cmp	al,*$53
37007 9410           75           0F            jne 	.2C5
37008                       00009412            .2CB:
37009                                           ! Debug: logeq int = const $41 to unsigned char vbe_info_block = [S+$210-$201] (used reg = )
37010 9412           8A86       FE01            mov	al,-$1FF[bp]
37011 9416           3C                     41  cmp	al,*$41
37012 9418           75           07            jne 	.2C5
37013                       0000941A            .2C6:
37014                                           ! 7848         {
37015                                           ! 7849                 vbe2_info = 1;
37016                                           ! Debug: eq int = const 1 to unsigned short vbe2_info = [S+$210-$20A] (used reg = )
37017 941A           B8                   0001  mov	ax,*1
37018 941D           8986       FDF8            mov	-$208[bp],ax
37019                                           !BCC_EOS
37020                                           ! 7850         }
37021                                           ! 7851         vbe_info_block.VbeSignature[0] = 'V';
37022                       00009421            .2C5:
37023                                           ! Debug: eq int = const $56 to unsigned char vbe_info_block = [S+$210-$204] (used reg = )
37024 9421           B0                     56  mov	al,*$56
37025 9423           8886       FDFE            mov	-$202[bp],al
37026                                           !BCC_EOS
37027                                           ! 7852         vbe_info_block.VbeSignature[1] = 'E';
37028                                           ! Debug: eq int = const $45 to unsigned char vbe_info_block = [S+$210-$203] (used reg = )
37029 9427           B0                     45  mov	al,*$45
37030 9429           8886       FDFF            mov	-$201[bp],al
37031                                           !BCC_EOS
37032                                           ! 7853         vbe_info_block.VbeSignature[2] = 'S';
37033                                           ! Debug: eq int = const $53 to unsigned char vbe_info_block = [S+$210-$202] (used reg = )
37034 942D           B0                     53  mov	al,*$53
37035 942F           8886       FE00            mov	-$200[bp],al
37036                                           !BCC_EOS
37037                                           ! 7854         vbe_info_block.VbeSignature[3] = 'A';
37038                                           ! Debug: eq int = const $41 to unsigned char vbe_info_block = [S+$210-$201] (used reg = )
37039 9433           B0                     41  mov	al,*$41
37040 9435           8886       FE01            mov	-$1FF[bp],al
37041                                           !BCC_EOS
37042                                           ! 7855         vbe_info_block.VbeVersion = 0x0200;
37043                                           ! Debug: eq int = const $200 to unsigned short vbe_info_block = [S+$210-$200] (used reg = )
37044 9439           B8                   0200  mov	ax,#$200
37045 943C           8986       FE02            mov	-$1FE[bp],ax
37046                                           !BCC_EOS
37047                                           ! 7856         vbe_info_block.OemStringPtr_Seg = 0xc000;
37048                                           ! Debug: eq unsigned int = const $C000 to unsigned short vbe_info_block = [S+$210-$1FC] (used reg = )
37049 9440           B8                   C000  mov	ax,#$C000
37050 9443           8986       FE06            mov	-$1FA[bp],ax
37051                                           !BCC_EOS
37052                                           ! 7857         vbe_info_block.OemStringPtr_Off = &vbebios_copyright;
37053                                           ! Debug: eq * char = vbebios_copyright+0 to unsigned short vbe_info_block = [S+$210-$1FE] (used reg = )
37054 9447           BB                   8DD4  mov	bx,#_vbebios_copyright
37055 944A           899E       FE04            mov	-$1FC[bp],bx
37056                                           !BCC_EOS
37057                                           ! 7858         vbe_info_block.Capabilities[0] = 0x0001;
37058                                           ! Debug: eq int = const 1 to unsigned char vbe_info_block = [S+$210-$1FA] (used reg = )
37059 944E           B0                     01  mov	al,*1
37060 9450           8886       FE08            mov	-$1F8[bp],al
37061                                           !BCC_EOS
37062                                           ! 7859         vbe_info_block.Capabilities[1] = 0;
37063                                           ! Debug: eq int = const 0 to unsigned char vbe_info_block = [S+$210-$1F9] (used reg = )
37064 9454           30C0                       xor	al,al
37065 9456           8886       FE09            mov	-$1F7[bp],al
37066                                           !BCC_EOS
37067                                           ! 7860         vbe_info_block.Capabilities[2] = 0;
37068                                           ! Debug: eq int = const 0 to unsigned char vbe_info_block = [S+$210-$1F8] (used reg = )
37069 945A           30C0                       xor	al,al
37070 945C           8886       FE0A            mov	-$1F6[bp],al
37071                                           !BCC_EOS
37072                                           ! 7861         vbe_info_block.Capabilities[3] = 0;
37073                                           ! Debug: eq int = const 0 to unsigned char vbe_info_block = [S+$210-$1F7] (used reg = )
37074 9460           30C0                       xor	al,al
37075 9462           8886       FE0B            mov	-$1F5[bp],al
37076                                           !BCC_EOS
37077                                           ! 7862         vbe_info_block.VideoModePtr_Seg= ES ;
37078                                           ! Debug: eq unsigned short ES = [S+$210+4] to unsigned short vbe_info_block = [S+$210-$1F4] (used reg = )
37079 9466           8B46         06            mov	ax,6[bp]
37080 9469           8986       FE0E            mov	-$1F2[bp],ax
37081                                           !BCC_EOS
37082                                           ! 7863         vbe_info_block.VideoModePtr_Off= DI + 34;
37083                                           ! Debug: add int = const $22 to unsigned short DI = [S+$210+6] (used reg = )
37084 946D           8B46         08            mov	ax,8[bp]
37085                                           ! Debug: eq unsigned int = ax+$22 to unsigned short vbe_info_block = [S+$210-$1F6] (used reg = )
37086 9470           05                   0022  add	ax,*$22
37087 9473           8986       FE0C            mov	-$1F4[bp],ax
37088                                           !BCC_EOS
37089                                           ! 7864         outw(0x01CE, 0xa);
37090                                           ! Debug: list int = const $A (used reg = )
37091 9477           B8                   000A  mov	ax,*$A
37092 947A           50                         push	ax
37093                                           ! Debug: list int = const $1CE (used reg = )
37094 947B           B8                   01CE  mov	ax,#$1CE
37095 947E           50                         push	ax
37096                                           ! Debug: func () void = outw+0 (used reg = )
37097 947F           E8         E78A            call	_outw
37098 9482           83C4                   04  add	sp,*4
37099                                           !BCC_EOS
37100                                           ! 7865         vbe_info_block.TotalMemory = inw(0x01CF);
37101                                           ! Debug: list int = const $1CF (used reg = )
37102 9485           B8                   01CF  mov	ax,#$1CF
37103 9488           50                         push	ax
37104                                           ! Debug: func () unsigned short = inw+0 (used reg = )
37105 9489           E8         E765            call	_inw
37106 948C           44                         inc	sp
37107 948D           44                         inc	sp
37108                                           ! Debug: eq unsigned short = ax+0 to unsigned short vbe_info_block = [S+$210-$1F2] (used reg = )
37109 948E           8986       FE10            mov	-$1F0[bp],ax
37110                                           !BCC_EOS
37111                                           ! 7866         if (vbe2_info)
37112 9492           8B86       FDF8            mov	ax,-$208[bp]
37113 9496           85C0                       test	ax,ax
37114 9498           74           4B            je  	.2CE
37115                       0000949A            .2CF:
37116                                           ! 7867  {
37117                                           ! 7868                 vbe_info_block.OemSoftwareRev = 0x0002;;
37118                                           ! Debug: eq int = const 2 to unsigned short vbe_info_block = [S+$210-$1F0] (used reg = )
37119 949A           B8                   0002  mov	ax,*2
37120 949D           8986       FE12            mov	-$1EE[bp],ax
37121                                           !BCC_EOS
37122                                           !BCC_EOS
37123                                           ! 7869                 vbe_info_block.OemVendorNamePtr_Seg = 0xc000;
37124                                           ! Debug: eq unsigned int = const $C000 to unsigned short vbe_info_block = [S+$210-$1EC] (used reg = )
37125 94A1           B8                   C000  mov	ax,#$C000
37126 94A4           8986       FE16            mov	-$1EA[bp],ax
37127                                           !BCC_EOS
37128                                           ! 7870                 vbe_info_block.OemVendorNamePtr_Off = &vbebios_vendor_name;
37129                                           ! Debug: eq * char = vbebios_vendor_name+0 to unsigned short vbe_info_block = [S+$210-$1EE] (used reg = )
37130 94A8           BB                   8E1A  mov	bx,#_vbebios_vendor_name
37131 94AB           899E       FE14            mov	-$1EC[bp],bx
37132                                           !BCC_EOS
37133                                           ! 7871                 vbe_info_block.OemProductNamePtr_Seg = 0xc000;
37134                                           ! Debug: eq unsigned int = const $C000 to unsigned short vbe_info_block = [S+$210-$1E8] (used reg = )
37135 94AF           B8                   C000  mov	ax,#$C000
37136 94B2           8986       FE1A            mov	-$1E6[bp],ax
37137                                           !BCC_EOS
37138                                           ! 7872                 vbe_info_block.OemProductNamePtr_Off = &vbebios_product_name;
37139                                           ! Debug: eq * char = vbebios_product_name+0 to unsigned short vbe_info_block = [S+$210-$1EA] (used reg = )
37140 94B6           BB                   8E32  mov	bx,#_vbebios_product_name
37141 94B9           899E       FE18            mov	-$1E8[bp],bx
37142                                           !BCC_EOS
37143                                           ! 7873                 vbe_info_block.OemProductRevPtr_Seg = 0xc000;
37144                                           ! Debug: eq unsigned int = const $C000 to unsigned short vbe_info_block = [S+$210-$1E4] (used reg = )
37145 94BD           B8                   C000  mov	ax,#$C000
37146 94C0           8986       FE1E            mov	-$1E2[bp],ax
37147                                           !BCC_EOS
37148                                           ! 7874                 vbe_info_block.OemProductRevPtr_Off = &vbebios_product_revision;
37149                                           ! Debug: eq * char = vbebios_product_revision+0 to unsigned short vbe_info_block = [S+$210-$1E6] (used reg = )
37150 94C4           BB                   8E4B  mov	bx,#_vbebios_product_revision
37151 94C7           899E       FE1C            mov	-$1E4[bp],bx
37152                                           !BCC_EOS
37153                                           ! 7875                 memcpyb(ES, DI, ss, &vbe_info_block, sizeof(vbe_info_block));
37154                                           ! Debug: list int = const $200 (used reg = )
37155 94CB           B8                   0200  mov	ax,#$200
37156 94CE           50                         push	ax
37157                                           ! Debug: list * struct VbeInfoBlock vbe_info_block = S+$212-$204 (used reg = )
37158 94CF           8D9E       FDFE            lea	bx,-$202[bp]
37159 94D3           53                         push	bx
37160                                           ! Debug: list unsigned short ss = [S+$214-4] (used reg = )
37161 94D4           FF76         FE            push	-2[bp]
37162                                           ! Debug: list unsigned short DI = [S+$216+6] (used reg = )
37163 94D7           FF76         08            push	8[bp]
37164                                           ! Debug: list unsigned short ES = [S+$218+4] (used reg = )
37165 94DA           FF76         06            push	6[bp]
37166                                           ! Debug: func () void = memcpyb+0 (used reg = )
37167 94DD           E8         E650            call	_memcpyb
37168 94E0           83C4                   0A  add	sp,*$A
37169                                           !BCC_EOS
37170                                           ! 7876         }
37171                                           ! 7877  else
37172                                           ! 7878  {
37173 94E3           EB           18            jmp .2D0
37174                       000094E5            .2CE:
37175                                           ! 7879                 memcpyb(ES, DI, ss, &vbe_info_block, 256);
37176                                           ! Debug: list int = const $100 (used reg = )
37177 94E5           B8                   0100  mov	ax,#$100
37178 94E8           50                         push	ax
37179                                           ! Debug: list * struct VbeInfoBlock vbe_info_block = S+$212-$204 (used reg = )
37180 94E9           8D9E       FDFE            lea	bx,-$202[bp]
37181 94ED           53                         push	bx
37182                                           ! Debug: list unsigned short ss = [S+$214-4] (used reg = )
37183 94EE           FF76         FE            push	-2[bp]
37184                                           ! Debug: list unsigned short DI = [S+$216+6] (used reg = )
37185 94F1           FF76         08            push	8[bp]
37186                                           ! Debug: list unsigned short ES = [S+$218+4] (used reg = )
37187 94F4           FF76         06            push	6[bp]
37188                                           ! Debug: func () void = memcpyb+0 (used reg = )
37189 94F7           E8         E636            call	_memcpyb
37190 94FA           83C4                   0A  add	sp,*$A
37191                                           !BCC_EOS
37192                                           ! 7880  
37193                                           ! 7880 }
37194                                           ! 7881         do
37195                       000094FD            .2D0:
37196                                           ! 7882         {
37197                       000094FD            .2D3:
37198                                           ! 7883                 Bit16u size_64k = size64(cur_info->info.XResolution, cur_info->info.YResolution, cur_info->info.BitsPerPixel);
37199 94FD           4C                         dec	sp
37200 94FE           4C                         dec	sp
37201 94FF           8B9E       FDF2            mov	bx,-$20E[bp]
37202                                           ! Debug: list unsigned char = [bx+$1B] (used reg = )
37203 9503           8A47         1B            mov	al,$1B[bx]
37204 9506           30E4                       xor	ah,ah
37205 9508           50                         push	ax
37206 9509           8B9E       FDF2            mov	bx,-$20E[bp]
37207                                           ! Debug: list unsigned short = [bx+$16] (used reg = )
37208 950D           FF77         16            push	$16[bx]
37209 9510           8B9E       FDF2            mov	bx,-$20E[bp]
37210                                           ! Debug: list unsigned short = [bx+$14] (used reg = )
37211 9514           FF77         14            push	$14[bx]
37212                                           ! Debug: func () int = size64+0 (used reg = )
37213 9517           E8         FE50            call	_size64
37214 951A           83C4                   06  add	sp,*6
37215                                           ! Debug: eq int = ax+0 to unsigned short size_64k = [S+$212-$212] (used reg = )
37216 951D           8986       FDF0            mov	-$210[bp],ax
37217                                           !BCC_EOS
37218                                           ! 7884                 Bit16u max_bpp = dispi_get_max_bpp();
37219 9521           4C                         dec	sp
37220 9522           4C                         dec	sp
37221                                           ! Debug: func () int = dispi_get_max_bpp+0 (used reg = )
37222 9523           E8         FB91            call	_dispi_get_max_bpp
37223                                           ! Debug: eq int = ax+0 to unsigned short max_bpp = [S+$214-$214] (used reg = )
37224 9526           8986       FDEE            mov	-$212[bp],ax
37225                                           !BCC_EOS
37226                                           ! 7885                 if ((cur_info->info.XResolution <= dispi_get_max_xres()) &&
37227                                           ! 7886                     (cur_info->info.BitsPerPixel <= max_bpp) &&
37228                                           ! 7887                     (size_64k <= vbe_info_block.TotalMemory)) {
37229                                           ! Debug: func () int = dispi_get_max_xres+0 (used reg = )
37230 952A           E8         FB68            call	_dispi_get_max_xres
37231 952D           8B9E       FDF2            mov	bx,-$20E[bp]
37232                                           ! Debug: le int = ax+0 to unsigned short = [bx+$14] (used reg = )
37233 9531           3B47         14            cmp	ax,$14[bx]
37234 9534           72           45            jb  	.2D4
37235                       00009536            .2D7:
37236 9536           8B9E       FDF2            mov	bx,-$20E[bp]
37237                                           ! Debug: le unsigned short max_bpp = [S+$214-$214] to unsigned char = [bx+$1B] (used reg = )
37238 953A           8A47         1B            mov	al,$1B[bx]
37239 953D           30E4                       xor	ah,ah
37240 953F           3B86       FDEE            cmp	ax,-$212[bp]
37241 9543           77           36            ja  	.2D4
37242                       00009545            .2D6:
37243                                           ! Debug: le unsigned short vbe_info_block = [S+$214-$1F2] to unsigned short size_64k = [S+$214-$212] (used reg = )
37244 9545           8B86       FDF0            mov	ax,-$210[bp]
37245 9549           3B86       FE10            cmp	ax,-$1F0[bp]
37246 954D           77           2C            ja  	.2D4
37247                       0000954F            .2D5:
37248                                           ! 7888                   write_word(ES, DI + cur_ptr, cur_info->mode);
37249 954F           8B9E       FDF2            mov	bx,-$20E[bp]
37250                                           ! Debug: list unsigned short = [bx+0] (used reg = )
37251 9553           FF37                       push	[bx]
37252                                           ! Debug: add unsigned short cur_ptr = [S+$216-$20E] to unsigned short DI = [S+$216+6] (used reg = )
37253 9555           8B46         08            mov	ax,8[bp]
37254 9558           0386       FDF4            add	ax,-$20C[bp]
37255                                           ! Debug: list unsigned int = ax+0 (used reg = )
37256 955C           50                         push	ax
37257                                           ! Debug: list unsigned short ES = [S+$218+4] (used reg = )
37258 955D           FF76         06            push	6[bp]
37259                                           ! Debug: func () void = write_word+0 (used reg = )
37260 9560           E8         E66B            call	_write_word
37261 9563           83C4                   06  add	sp,*6
37262                                           !BCC_EOS
37263                                           ! 7889                   cur_mode++;
37264                                           ! Debug: postinc unsigned short cur_mode = [S+$214-$20C] (used reg = )
37265 9566           8B86       FDF6            mov	ax,-$20A[bp]
37266 956A           40                         inc	ax
37267 956B           8986       FDF6            mov	-$20A[bp],ax
37268                                           !BCC_EOS
37269                                           ! 7890                   cur_ptr+=2;
37270                                           ! Debug: addab int = const 2 to unsigned short cur_ptr = [S+$214-$20E] (used reg = )
37271 956F           8B86       FDF4            mov	ax,-$20C[bp]
37272 9573           40                         inc	ax
37273 9574           40                         inc	ax
37274 9575           8986       FDF4            mov	-$20C[bp],ax
37275                                           !BCC_EOS
37276                                           ! 7891                 } else {
37277 9579           EB           00            jmp .2D8
37278                       0000957B            .2D4:
37279                                           ! 7892                 }
37280                                           ! 7893                 cur_info++;
37281                       0000957B            .2D8:
37282                                           ! Debug: postinc * struct ModeInfoListItem cur_info = [S+$214-$210] (used reg = )
37283 957B           8B9E       FDF2            mov	bx,-$20E[bp]
37284 957F           83C3                   44  add	bx,*$44
37285 9582           899E       FDF2            mov	-$20E[bp],bx
37286                                           !BCC_EOS
37287                                           ! 7894         } while (cur_info->mode != 0xFFFF);
37288 9586           83C4                   04  add	sp,*4
37289                       00009589            .2D2:
37290 9589           8B9E       FDF2            mov	bx,-$20E[bp]
37291                                           ! Debug: ne unsigned int = const $FFFF to unsigned short = [bx+0] (used reg = )
37292 958D           8B1F                       mov	bx,[bx]
37293 958F           81FB                 FFFF  cmp	bx,#$FFFF
37294 9593         0F85         FF66            bne 	.2D3
37295                       00009597            .2D9:
37296                                           !BCC_EOS
37297                                           ! 7895         write_word(ES, DI + cur_ptr, cur_info->mode);
37298                       00009597            .2D1:
37299 9597           8B9E       FDF2            mov	bx,-$20E[bp]
37300                                           ! Debug: list unsigned short = [bx+0] (used reg = )
37301 959B           FF37                       push	[bx]
37302                                           ! Debug: add unsigned short cur_ptr = [S+$212-$20E] to unsigned short DI = [S+$212+6] (used reg = )
37303 959D           8B46         08            mov	ax,8[bp]
37304 95A0           0386       FDF4            add	ax,-$20C[bp]
37305                                           ! Debug: list unsigned int = ax+0 (used reg = )
37306 95A4           50                         push	ax
37307                                           ! Debug: list unsigned short ES = [S+$214+4] (used reg = )
37308 95A5           FF76         06            push	6[bp]
37309                                           ! Debug: func () void = write_word+0 (used reg = )
37310 95A8           E8         E623            call	_write_word
37311 95AB           83C4                   06  add	sp,*6
37312                                           !BCC_EOS
37313                                           ! 7896         result = 0x4f;
37314                                           ! Debug: eq int = const $4F to unsigned short result = [S+$210-$208] (used reg = )
37315 95AE           B8                   004F  mov	ax,*$4F
37316 95B1           8986       FDFA            mov	-$206[bp],ax
37317                                           !BCC_EOS
37318                                           ! 7897         write_word(ss, AX, result);
37319                                           ! Debug: list unsigned short result = [S+$210-$208] (used reg = )
37320 95B5           FFB6       FDFA            push	-$206[bp]
37321                                           ! Debug: list * unsigned short AX = [S+$212+2] (used reg = )
37322 95B9           FF76         04            push	4[bp]
37323                                           ! Debug: list unsigned short ss = [S+$214-4] (used reg = )
37324 95BC           FF76         FE            push	-2[bp]
37325                                           ! Debug: func () void = write_word+0 (used reg = )
37326 95BF           E8         E60C            call	_write_word
37327 95C2           83C4                   06  add	sp,*6
37328                                           !BCC_EOS
37329                                           ! 7898 }
37330 95C5           89EC                       mov	sp,bp
37331 95C7           5D                         pop	bp
37332 95C8           C3                         ret
37333                                           ! 7899 void vbe_biosfn_return_mode_information(AX, CX, ES, DI)
37334                                           ! Register BX used in function vbe_biosfn_return_controller_information
37335                                           ! 7900 Bit16u *AX;Bit16u CX; Bit16u ES;Bit16u DI;
37336                                           export	_vbe_biosfn_return_mode_information
37337                       000095C9            _vbe_biosfn_return_mode_information:
37338                                           !BCC_EOS
37339                                           !BCC_EOS
37340                                           !BCC_EOS
37341                                           !BCC_EOS
37342                                           ! 7901 {
37343                                           ! 7902         Bit16u result=0x014f;
37344 95C9           55                         push	bp
37345 95CA           89E5                       mov	bp,sp
37346 95CC           4C                         dec	sp
37347 95CD           4C                         dec	sp
37348                                           ! Debug: eq int = const $14F to unsigned short result = [S+4-4] (used reg = )
37349 95CE           B8                   014F  mov	ax,#$14F
37350 95D1           8946         FE            mov	-2[bp],ax
37351                                           !BCC_EOS
37352                                           ! 7903         Bit16u ss=get_SS();
37353 95D4           4C                         dec	sp
37354 95D5           4C                         dec	sp
37355                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
37356 95D6           E8         E643            call	_get_SS
37357                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+6-6] (used reg = )
37358 95D9           8946         FC            mov	-4[bp],ax
37359                                           !BCC_EOS
37360                                           ! 7904         ModeInfoListItem *cur_info;
37361                                           !BCC_EOS
37362                                           ! 7905         Boolean using_lfb;
37363                                           !BCC_EOS
37364                                           ! 7906         ModeInfoBlockCompact info;
37365                                           !BCC_EOS
37366                                           ! 7907         using_lfb=((CX & 0x4000) == 0x4000);
37367 95DC           83C4                   BA  add	sp,*-$46
37368                                           ! Debug: and int = const $4000 to unsigned short CX = [S+$4C+4] (used reg = )
37369 95DF           8B46         06            mov	ax,6[bp]
37370 95E2           25                   4000  and	ax,#$4000
37371                                           ! Debug: logeq int = const $4000 to unsigned int = ax+0 (used reg = )
37372 95E5           3D                   4000  cmp	ax,#$4000
37373 95E8           75           04            jne	.2DA
37374 95EA           B0                     01  mov	al,*1
37375 95EC           EB           02            jmp	.2DB
37376                       000095EE            .2DA:
37377 95EE           30C0                       xor	al,al
37378                       000095F0            .2DB:
37379                                           ! Debug: eq char = al+0 to unsigned short using_lfb = [S+$4C-$A] (used reg = )
37380 95F0           30E4                       xor	ah,ah
37381 95F2           8946         F8            mov	-8[bp],ax
37382                                           !BCC_EOS
37383                                           ! 7908         CX = (CX & 0x1ff);
37384                                           ! Debug: and int = const $1FF to unsigned short CX = [S+$4C+4] (used reg = )
37385 95F5           8B46         06            mov	ax,6[bp]
37386 95F8           25                   01FF  and	ax,#$1FF
37387                                           ! Debug: eq unsigned int = ax+0 to unsigned short CX = [S+$4C+4] (used reg = )
37388 95FB           8946         06            mov	6[bp],ax
37389                                           !BCC_EOS
37390                                           ! 7909         cur_info = mode_info_find_mode(CX, using_lfb, &cur_info);
37391                                           ! Debug: list * * struct ModeInfoListItem cur_info = S+$4C-8 (used reg = )
37392 95FE           8D5E         FA            lea	bx,-6[bp]
37393 9601           53                         push	bx
37394                                           ! Debug: list unsigned short using_lfb = [S+$4E-$A] (used reg = )
37395 9602           FF76         F8            push	-8[bp]
37396                                           ! Debug: list unsigned short CX = [S+$50+4] (used reg = )
37397 9605           FF76         06            push	6[bp]
37398                                           ! Debug: func () * struct ModeInfoListItem = mode_info_find_mode+0 (used reg = )
37399 9608           E8         FCA0            call	_mode_info_find_mode
37400 960B           83C4                   06  add	sp,*6
37401                                           ! Debug: eq * struct ModeInfoListItem = ax+0 to * struct ModeInfoListItem cur_info = [S+$4C-8] (used reg = )
37402 960E           8946         FA            mov	-6[bp],ax
37403                                           !BCC_EOS
37404                                           ! 7910         if (cur_info != 0)
37405                                           ! Debug: ne int = const 0 to * struct ModeInfoListItem cur_info = [S+$4C-8] (used reg = )
37406 9611           8B46         FA            mov	ax,-6[bp]
37407 9614           85C0                       test	ax,ax
37408 9616         0F84         00F9            beq 	.2DC
37409                       0000961A            .2DD:
37410                                           ! 7911         {
37411                                           ! 7912                 Bit16u max_bpp = dispi_get_max_bpp();
37412 961A           4C                         dec	sp
37413 961B           4C                         dec	sp
37414                                           ! Debug: func () int = dispi_get_max_bpp+0 (used reg = )
37415 961C           E8         FA98            call	_dispi_get_max_bpp
37416                                           ! Debug: eq int = ax+0 to unsigned short max_bpp = [S+$4E-$4E] (used reg = )
37417 961F           8946         B4            mov	-$4C[bp],ax
37418                                           !BCC_EOS
37419                                           ! 7913                 Bit16u size_64k;
37420                                           !BCC_EOS
37421                                           ! 7914                 Bit16u totalMemory;
37422                                           !BCC_EOS
37423                                           ! 7915                 outw(0x01CE, 0xa);
37424 9622           83C4                   FC  add	sp,*-4
37425                                           ! Debug: list int = const $A (used reg = )
37426 9625           B8                   000A  mov	ax,*$A
37427 9628           50                         push	ax
37428                                           ! Debug: list int = const $1CE (used reg = )
37429 9629           B8                   01CE  mov	ax,#$1CE
37430 962C           50                         push	ax
37431                                           ! Debug: func () void = outw+0 (used reg = )
37432 962D           E8         E5DC            call	_outw
37433 9630           83C4                   04  add	sp,*4
37434                                           !BCC_EOS
37435                                           ! 7916                 totalMemory = inw(0x01CF);
37436                                           ! Debug: list int = const $1CF (used reg = )
37437 9633           B8                   01CF  mov	ax,#$1CF
37438 9636           50                         push	ax
37439                                           ! Debug: func () unsigned short = inw+0 (used reg = )
37440 9637           E8         E5B7            call	_inw
37441 963A           44                         inc	sp
37442 963B           44                         inc	sp
37443                                           ! Debug: eq unsigned short = ax+0 to unsigned short totalMemory = [S+$52-$52] (used reg = )
37444 963C           8946         B0            mov	-$50[bp],ax
37445                                           !BCC_EOS
37446                                           ! 7917                 memcpyb(ss, &info, 0xc000, &(cur_info->info), sizeof(ModeInfoBlockCompact));
37447                                           ! Debug: list int = const $42 (used reg = )
37448 963F           B8                   0042  mov	ax,*$42
37449 9642           50                         push	ax
37450 9643           8B5E         FA            mov	bx,-6[bp]
37451                                           ! Debug: address struct ModeInfoBlockCompact = [bx+2] (used reg = )
37452                                           ! Debug: list * struct ModeInfoBlockCompact = bx+2 (used reg = )
37453 9646           43                         inc	bx
37454 9647           43                         inc	bx
37455 9648           53                         push	bx
37456                                           ! Debug: list unsigned int = const $C000 (used reg = )
37457 9649           B8                   C000  mov	ax,#$C000
37458 964C           50                         push	ax
37459                                           ! Debug: list * struct ModeInfoBlockCompact info = S+$58-$4C (used reg = )
37460 964D           8D5E         B6            lea	bx,-$4A[bp]
37461 9650           53                         push	bx
37462                                           ! Debug: list unsigned short ss = [S+$5A-6] (used reg = )
37463 9651           FF76         FC            push	-4[bp]
37464                                           ! Debug: func () void = memcpyb+0 (used reg = )
37465 9654           E8         E4D9            call	_memcpyb
37466 9657           83C4                   0A  add	sp,*$A
37467                                           !BCC_EOS
37468                                           ! 7918                 size_64k = size64(info.XResolution, info.YResolution, info.BitsPerPixel);
37469                                           ! Debug: list unsigned char info = [S+$52-$33] (used reg = )
37470 965A           8A46         CF            mov	al,-$31[bp]
37471 965D           30E4                       xor	ah,ah
37472 965F           50                         push	ax
37473                                           ! Debug: list unsigned short info = [S+$54-$38] (used reg = )
37474 9660           FF76         CA            push	-$36[bp]
37475                                           ! Debug: list unsigned short info = [S+$56-$3A] (used reg = )
37476 9663           FF76         C8            push	-$38[bp]
37477                                           ! Debug: func () int = size64+0 (used reg = )
37478 9666           E8         FD01            call	_size64
37479 9669           83C4                   06  add	sp,*6
37480                                           ! Debug: eq int = ax+0 to unsigned short size_64k = [S+$52-$50] (used reg = )
37481 966C           8946         B2            mov	-$4E[bp],ax
37482                                           !BCC_EOS
37483                                           ! 7919                 if ((info.XResolution > dispi_get_max_xres()) ||
37484                                           ! 7920                     (info.BitsPerPixel > max_bpp) ||
37485                                           ! 7921                     (size_64k > totalMemory))
37486                                           ! Debug: func () int = dispi_get_max_xres+0 (used reg = )
37487 966F           E8         FA23            call	_dispi_get_max_xres
37488                                           ! Debug: gt int = ax+0 to unsigned short info = [S+$52-$3A] (used reg = )
37489 9672           3B46         C8            cmp	ax,-$38[bp]
37490 9675           72           12            jb  	.2DF
37491                       00009677            .2E1:
37492                                           ! Debug: gt unsigned short max_bpp = [S+$52-$4E] to unsigned char info = [S+$52-$33] (used reg = )
37493 9677           8A46         CF            mov	al,-$31[bp]
37494 967A           30E4                       xor	ah,ah
37495 967C           3B46         B4            cmp	ax,-$4C[bp]
37496 967F           77           08            ja  	.2DF
37497                       00009681            .2E0:
37498                                           ! Debug: gt unsigned short totalMemory = [S+$52-$52] to unsigned short size_64k = [S+$52-$50] (used reg = )
37499 9681           8B46         B2            mov	ax,-$4E[bp]
37500 9684           3B46         B0            cmp	ax,-$50[bp]
37501 9687           76           08            jbe 	.2DE
37502                       00009689            .2DF:
37503                                           ! 7922                   info.ModeAttributes &= ~0x0001;
37504                                           ! Debug: andab int = const -2 to unsigned short info = [S+$52-$4C] (used reg = )
37505 9689           8B46         B6            mov	ax,-$4A[bp]
37506 968C           24                     FE  and	al,#$FE
37507 968E           8946         B6            mov	-$4A[bp],ax
37508                                           !BCC_EOS
37509                                           ! 7923                 info.NumberOfBanks = 1;
37510                       00009691            .2DE:
37511                                           ! Debug: eq int = const 1 to unsigned char info = [S+$52-$32] (used reg = )
37512 9691           B0                     01  mov	al,*1
37513 9693           8846         D0            mov	-$30[bp],al
37514                                           !BCC_EOS
37515                                           ! 7924                 if (info.WinAAttributes & 0x01) {
37516                                           ! Debug: and int = const 1 to unsigned char info = [S+$52-$4A] (used reg = )
37517 9696           8A46         B8            mov	al,-$48[bp]
37518 9699           24                     01  and	al,*1
37519 969B           84C0                       test	al,al
37520 969D           74           11            je  	.2E2
37521                       0000969F            .2E3:
37522                                           ! 7925                   info.WinFuncPtr = 0xC0000000UL;
37523                                           ! Debug: eq unsigned long = const $C0000000 to unsigned long info = [S+$52-$40] (used reg = )
37524 969F           31C0                       xor	ax,ax
37525 96A1           BB                   C000  mov	bx,#$C000
37526 96A4           8946         C2            mov	-$3E[bp],ax
37527 96A7           895E         C4            mov	-$3C[bp],bx
37528                                           !BCC_EOS
37529                                           ! 7926                   *(Bit16u *)&(info.WinFuncPtr) = (Bit16u)(dispi_set_bank_farcall);
37530                                           ! Debug: cast unsigned short = const 0 to () void = dispi_set_bank_farcall+0 (used reg = )
37531                                           ! Debug: eq unsigned short = dispi_set_bank_farcall+0 to unsigned short info = [S+$52-$40] (used reg = )
37532 96AA           BB                   9115  mov	bx,#_dispi_set_bank_farcall
37533 96AD           895E         C2            mov	-$3E[bp],bx
37534                                           !BCC_EOS
37535                                           ! 7927                 }
37536                                           ! 7928               
37537                                           ! 7928   outw(0x01CE,0xb);
37538                       000096B0            .2E2:
37539                                           ! Debug: list int = const $B (used reg = )
37540 96B0           B8                   000B  mov	ax,*$B
37541 96B3           50                         push	ax
37542                                           ! Debug: list int = const $1CE (used reg = )
37543 96B4           B8                   01CE  mov	ax,#$1CE
37544 96B7           50                         push	ax
37545                                           ! Debug: func () void = outw+0 (used reg = )
37546 96B8           E8         E551            call	_outw
37547 96BB           83C4                   04  add	sp,*4
37548                                           !BCC_EOS
37549                                           ! 7929                 info.PhysBasePtr = inw(0x01CF);
37550                                           ! Debug: list int = const $1CF (used reg = )
37551 96BE           B8                   01CF  mov	ax,#$1CF
37552 96C1           50                         push	ax
37553                                           ! Debug: func () unsigned short = inw+0 (used reg = )
37554 96C2           E8         E52C            call	_inw
37555 96C5           44                         inc	sp
37556 96C6           44                         inc	sp
37557                                           ! Debug: eq unsigned short = ax+0 to unsigned long info = [S+$52-$24] (used reg = )
37558 96C7           31DB                       xor	bx,bx
37559 96C9           8946         DE            mov	-$22[bp],ax
37560 96CC           895E         E0            mov	-$20[bp],bx
37561                                           !BCC_EOS
37562                                           ! 7930                 info.PhysBasePtr = info.PhysBasePtr << 16;
37563                                           ! Debug: sl int = const $10 to unsigned long info = [S+$52-$24] (used reg = )
37564 96CF           8B46         DE            mov	ax,-$22[bp]
37565 96D2           8B5E         E0            mov	bx,-$20[bp]
37566 96D5           93                         xchg	bx,ax
37567 96D6           31C0                       xor	ax,ax
37568                                           ! Debug: eq unsigned long = bx+0 to unsigned long info = [S+$52-$24] (used reg = )
37569 96D8           8946         DE            mov	-$22[bp],ax
37570 96DB           895E         E0            mov	-$20[bp],bx
37571                                           !BCC_EOS
37572                                           ! 7931                 result = 0x4f;
37573                                           ! Debug: eq int = const $4F to unsigned short result = [S+$52-4] (used reg = )
37574 96DE           B8                   004F  mov	ax,*$4F
37575 96E1           8946         FE            mov	-2[bp],ax
37576                                           !BCC_EOS
37577                                           ! 7932                 memsetb(ES, DI, 0, sizeof(ModeInfoBlock));
37578                                           ! Debug: list int = const $100 (used reg = )
37579 96E4           B8                   0100  mov	ax,#$100
37580 96E7           50                         push	ax
37581                                           ! Debug: list int = const 0 (used reg = )
37582 96E8           31C0                       xor	ax,ax
37583 96EA           50                         push	ax
37584                                           ! Debug: list unsigned short DI = [S+$56+8] (used reg = )
37585 96EB           FF76         0A            push	$A[bp]
37586                                           ! Debug: list unsigned short ES = [S+$58+6] (used reg = )
37587 96EE           FF76         08            push	8[bp]
37588                                           ! Debug: func () void = memsetb+0 (used reg = )
37589 96F1           E8         E3F2            call	_memsetb
37590 96F4           83C4                   08  add	sp,*8
37591                                           !BCC_EOS
37592                                           ! 7933                 memcpyb(ES, DI, ss, &info, sizeof(info));
37593                                           ! Debug: list int = const $42 (used reg = )
37594 96F7           B8                   0042  mov	ax,*$42
37595 96FA           50                         push	ax
37596                                           ! Debug: list * struct ModeInfoBlockCompact info = S+$54-$4C (used reg = )
37597 96FB           8D5E         B6            lea	bx,-$4A[bp]
37598 96FE           53                         push	bx
37599                                           ! Debug: list unsigned short ss = [S+$56-6] (used reg = )
37600 96FF           FF76         FC            push	-4[bp]
37601                                           ! Debug: list unsigned short DI = [S+$58+8] (used reg = )
37602 9702           FF76         0A            push	$A[bp]
37603                                           ! Debug: list unsigned short ES = [S+$5A+6] (used reg = )
37604 9705           FF76         08            push	8[bp]
37605                                           ! Debug: func () void = memcpyb+0 (used reg = )
37606 9708           E8         E425            call	_memcpyb
37607 970B           83C4                   0A  add	sp,*$A
37608                                           !BCC_EOS
37609                                           ! 7934         }
37610 970E           83C4                   06  add	sp,*6
37611                                           ! 7935         else
37612                                           ! 7936         {
37613 9711           EB           00            jmp .2E4
37614                       00009713            .2DC:
37615                                           ! 7937         }
37616                                           ! 7938         write_word(ss, AX, result);
37617                       00009713            .2E4:
37618                                           ! Debug: list unsigned short result = [S+$4C-4] (used reg = )
37619 9713           FF76         FE            push	-2[bp]
37620                                           ! Debug: list * unsigned short AX = [S+$4E+2] (used reg = )
37621 9716           FF76         04            push	4[bp]
37622                                           ! Debug: list unsigned short ss = [S+$50-6] (used reg = )
37623 9719           FF76         FC            push	-4[bp]
37624                                           ! Debug: func () void = write_word+0 (used reg = )
37625 971C           E8         E4AF            call	_write_word
37626 971F           83C4                   06  add	sp,*6
37627                                           !BCC_EOS
37628                                           ! 7939 }
37629 9722           89EC                       mov	sp,bp
37630 9724           5D                         pop	bp
37631 9725           C3                         ret
37632                                           ! 7940 void vbe_biosfn_set_mode(AX, BX, ES, DI)
37633                                           ! Register BX used in function vbe_biosfn_return_mode_information
37634                                           ! 7941 Bit16u *AX;Bit16u BX; Bit16u ES;Bit16u DI;
37635                                           export	_vbe_biosfn_set_mode
37636                       00009726            _vbe_biosfn_set_mode:
37637                                           !BCC_EOS
37638                                           !BCC_EOS
37639                                           !BCC_EOS
37640                                           !BCC_EOS
37641                                           ! 7942 {
37642                                           ! 7943         Bit16u ss = get_SS();
37643 9726           55                         push	bp
37644 9727           89E5                       mov	bp,sp
37645 9729           4C                         dec	sp
37646 972A           4C                         dec	sp
37647                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
37648 972B           E8         E4EE            call	_get_SS
37649                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
37650 972E           8946         FE            mov	-2[bp],ax
37651                                           !BCC_EOS
37652                                           ! 7944         Bit16u result;
37653                                           !BCC_EOS
37654                                           ! 7945         ModeInfoListItem *cur_info;
37655                                           !BCC_EOS
37656                                           ! 7946         Boolean using_lfb;
37657                                           !BCC_EOS
37658                                           ! 7947         Bit8u no_clear;
37659                                           !BCC_EOS
37660                                           ! 7948         Bit8u lfb_flag;
37661                                           !BCC_EOS
37662                                           ! 7949         using_lfb=((BX & 0x4000) == 0x4000);
37663 9731           83C4                   F8  add	sp,*-8
37664                                           ! Debug: and int = const $4000 to unsigned short BX = [S+$C+4] (used reg = )
37665 9734           8B46         06            mov	ax,6[bp]
37666 9737           25                   4000  and	ax,#$4000
37667                                           ! Debug: logeq int = const $4000 to unsigned int = ax+0 (used reg = )
37668 973A           3D                   4000  cmp	ax,#$4000
37669 973D           75           04            jne	.2E5
37670 973F           B0                     01  mov	al,*1
37671 9741           EB           02            jmp	.2E6
37672                       00009743            .2E5:
37673 9743           30C0                       xor	al,al
37674                       00009745            .2E6:
37675                                           ! Debug: eq char = al+0 to unsigned short using_lfb = [S+$C-$A] (used reg = )
37676 9745           30E4                       xor	ah,ah
37677 9747           8946         F8            mov	-8[bp],ax
37678                                           !BCC_EOS
37679                                           ! 7950         lfb_flag=using_lfb?0x40:0;
37680 974A           8B46         F8            mov	ax,-8[bp]
37681 974D           85C0                       test	ax,ax
37682 974F           74           04            je  	.2E7
37683                       00009751            .2E8:
37684 9751           B0                     40  mov	al,*$40
37685 9753           EB           02            jmp .2E9
37686                       00009755            .2E7:
37687 9755           30C0                       xor	al,al
37688                       00009757            .2E9:
37689                                           ! Debug: eq char = al+0 to unsigned char lfb_flag = [S+$C-$C] (used reg = )
37690 9757           8846         F6            mov	-$A[bp],al
37691                                           !BCC_EOS
37692                                           ! 7951         no_clear=((BX & 0x8000) == 0x8000)?0x80:0;
37693                                           ! Debug: and unsigned int = const $8000 to unsigned short BX = [S+$C+4] (used reg = )
37694 975A           8B46         06            mov	ax,6[bp]
37695 975D           25                   8000  and	ax,#$8000
37696                                           ! Debug: logeq unsigned int = const $8000 to unsigned int = ax+0 (used reg = )
37697 9760           3D                   8000  cmp	ax,#$8000
37698 9763           75           04            jne 	.2EA
37699                       00009765            .2EB:
37700 9765           B0                     80  mov	al,#$80
37701 9767           EB           02            jmp .2EC
37702                       00009769            .2EA:
37703 9769           30C0                       xor	al,al
37704                       0000976B            .2EC:
37705                                           ! Debug: eq char = al+0 to unsigned char no_clear = [S+$C-$B] (used reg = )
37706 976B           8846         F7            mov	-9[bp],al
37707                                           !BCC_EOS
37708                                           ! 7952         BX = (BX & 0x1ff);
37709                                           ! Debug: and int = const $1FF to unsigned short BX = [S+$C+4] (used reg = )
37710 976E           8B46         06            mov	ax,6[bp]
37711 9771           25                   01FF  and	ax,#$1FF
37712                                           ! Debug: eq unsigned int = ax+0 to unsigned short BX = [S+$C+4] (used reg = )
37713 9774           8946         06            mov	6[bp],ax
37714                                           !BCC_EOS
37715                                           ! 7953         if (BX<0x0100)
37716                                           ! Debug: lt int = const $100 to unsigned short BX = [S+$C+4] (used reg = )
37717 9777           8B46         06            mov	ax,6[bp]
37718 977A           3D                   0100  cmp	ax,#$100
37719 977D           73           23            jae 	.2ED
37720                       0000977F            .2EE:
37721                                           ! 7954         {
37722                                           ! 7955                 Bit8u mode;
37723                                           !BCC_EOS
37724                                           ! 7956                 dispi_set_enable(0x00);
37725 977F           4C                         dec	sp
37726 9780           4C                         dec	sp
37727                                           ! Debug: list int = const 0 (used reg = )
37728 9781           31C0                       xor	ax,ax
37729 9783           50                         push	ax
37730                                           ! Debug: func () void = dispi_set_enable+0 (used reg = )
37731 9784           E8         F952            call	_dispi_set_enable
37732 9787           44                         inc	sp
37733 9788           44                         inc	sp
37734                                           !BCC_EOS
37735                                           ! 7957                 mode=(BX & 0xff);
37736                                           ! Debug: and int = const $FF to unsigned short BX = [S+$E+4] (used reg = )
37737 9789           8A46         06            mov	al,6[bp]
37738                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$E-$D] (used reg = )
37739 978C           8846         F5            mov	-$B[bp],al
37740                                           !BCC_EOS
37741                                           ! 7958                 biosfn_set_video_mode(mode);
37742                                           ! Debug: list unsigned char mode = [S+$E-$D] (used reg = )
37743 978F           8A46         F5            mov	al,-$B[bp]
37744 9792           30E4                       xor	ah,ah
37745 9794           50                         push	ax
37746                                           ! Debug: func () void = biosfn_set_video_mode+0 (used reg = )
37747 9795           E8         A3FF            call	_biosfn_set_video_mode
37748 9798           44                         inc	sp
37749 9799           44                         inc	sp
37750                                           !BCC_EOS
37751                                           ! 7959                 result = 0x4f;
37752                                           ! Debug: eq int = const $4F to unsigned short result = [S+$E-6] (used reg = )
37753 979A           B8                   004F  mov	ax,*$4F
37754 979D           8946         FC            mov	-4[bp],ax
37755                                           !BCC_EOS
37756                                           ! 7960         }
37757 97A0           44                         inc	sp
37758 97A1           44                         inc	sp
37759                                           ! 7961         cur_info = mode_info_find_mode(BX, using_lfb, &cur_info);
37760                       000097A2            .2ED:
37761                                           ! Debug: list * * struct ModeInfoListItem cur_info = S+$C-8 (used reg = )
37762 97A2           8D5E         FA            lea	bx,-6[bp]
37763 97A5           53                         push	bx
37764                                           ! Debug: list unsigned short using_lfb = [S+$E-$A] (used reg = )
37765 97A6           FF76         F8            push	-8[bp]
37766                                           ! Debug: list unsigned short BX = [S+$10+4] (used reg = )
37767 97A9           FF76         06            push	6[bp]
37768                                           ! Debug: func () * struct ModeInfoListItem = mode_info_find_mode+0 (used reg = )
37769 97AC           E8         FAFC            call	_mode_info_find_mode
37770 97AF           83C4                   06  add	sp,*6
37771                                           ! Debug: eq * struct ModeInfoListItem = ax+0 to * struct ModeInfoListItem cur_info = [S+$C-8] (used reg = )
37772 97B2           8946         FA            mov	-6[bp],ax
37773                                           !BCC_EOS
37774                                           ! 7962         if (cur_info != 0)
37775                                           ! Debug: ne int = const 0 to * struct ModeInfoListItem cur_info = [S+$C-8] (used reg = )
37776 97B5           8B46         FA            mov	ax,-6[bp]
37777 97B8           85C0                       test	ax,ax
37778 97BA         0F84         0089            beq 	.2EF
37779                       000097BE            .2F0:
37780                                           ! 7963         {
37781                                           ! 7964                 dispi_set_enable(0x00);
37782                                           ! Debug: list int = const 0 (used reg = )
37783 97BE           31C0                       xor	ax,ax
37784 97C0           50                         push	ax
37785                                           ! Debug: func () void = dispi_set_enable+0 (used reg = )
37786 97C1           E8         F915            call	_dispi_set_enable
37787 97C4           44                         inc	sp
37788 97C5           44                         inc	sp
37789                                           !BCC_EOS
37790                                           ! 7965                 if (cur_info->info.BitsPerPixel == 4)
37791 97C6           8B5E         FA            mov	bx,-6[bp]
37792                                           ! Debug: logeq int = const 4 to unsigned char = [bx+$1B] (used reg = )
37793 97C9           8A47         1B            mov	al,$1B[bx]
37794 97CC           3C                     04  cmp	al,*4
37795 97CE           75           09            jne 	.2F1
37796                       000097D0            .2F2:
37797                                           ! 7966                 {
37798                                           ! 7967                   biosfn_set_video_mode(0x6a);
37799                                           ! Debug: list int = const $6A (used reg = )
37800 97D0           B8                   006A  mov	ax,*$6A
37801 97D3           50                         push	ax
37802                                           ! Debug: func () void = biosfn_set_video_mode+0 (used reg = )
37803 97D4           E8         A3C0            call	_biosfn_set_video_mode
37804 97D7           44                         inc	sp
37805 97D8           44                         inc	sp
37806                                           !BCC_EOS
37807                                           ! 7968                 }
37808                                           ! 7969                 dispi_set_bpp(cur_info->info.BitsPerPixel);
37809                       000097D9            .2F1:
37810 97D9           8B5E         FA            mov	bx,-6[bp]
37811                                           ! Debug: list unsigned char = [bx+$1B] (used reg = )
37812 97DC           8A47         1B            mov	al,$1B[bx]
37813 97DF           30E4                       xor	ah,ah
37814 97E1           50                         push	ax
37815                                           ! Debug: func () void = dispi_set_bpp+0 (used reg = )
37816 97E2           E8         F879            call	_dispi_set_bpp
37817 97E5           44                         inc	sp
37818 97E6           44                         inc	sp
37819                                           !BCC_EOS
37820                                           ! 7970                 dispi_set_xres(cur_info->info.XResolution);
37821 97E7           8B5E         FA            mov	bx,-6[bp]
37822                                           ! Debug: list unsigned short = [bx+$14] (used reg = )
37823 97EA           FF77         14            push	$14[bx]
37824                                           ! Debug: func () void = dispi_set_xres+0 (used reg = )
37825 97ED           E8         F839            call	_dispi_set_xres
37826 97F0           44                         inc	sp
37827 97F1           44                         inc	sp
37828                                           !BCC_EOS
37829                                           ! 7971                 dispi_set_yres(cur_info->info.YResolution);
37830 97F2           8B5E         FA            mov	bx,-6[bp]
37831                                           ! Debug: list unsigned short = [bx+$16] (used reg = )
37832 97F5           FF77         16            push	$16[bx]
37833                                           ! Debug: func () void = dispi_set_yres+0 (used reg = )
37834 97F8           E8         F845            call	_dispi_set_yres
37835 97FB           44                         inc	sp
37836 97FC           44                         inc	sp
37837                                           !BCC_EOS
37838                                           ! 7972                 dispi_set_bank(0);
37839                                           ! Debug: list int = const 0 (used reg = )
37840 97FD           31C0                       xor	ax,ax
37841 97FF           50                         push	ax
37842                                           ! Debug: func () int = dispi_set_bank+0 (used reg = )
37843 9800           E8         F8F4            call	_dispi_set_bank
37844 9803           44                         inc	sp
37845 9804           44                         inc	sp
37846                                           !BCC_EOS
37847                                           ! 7973                 dispi_set_enable(0x01 | no_clear | lfb_flag);
37848                                           ! Debug: or unsigned char no_clear = [S+$C-$B] to int = const 1 (used reg = )
37849                                           ! Debug: expression subtree swapping
37850 9805           8A46         F7            mov	al,-9[bp]
37851 9808           0C                     01  or	al,*1
37852                                           ! Debug: or unsigned char lfb_flag = [S+$C-$C] to unsigned char = al+0 (used reg = )
37853 980A           0A46         F6            or	al,-$A[bp]
37854                                           ! Debug: list unsigned char = al+0 (used reg = )
37855 980D           30E4                       xor	ah,ah
37856 980F           50                         push	ax
37857                                           ! Debug: func () void = dispi_set_enable+0 (used reg = )
37858 9810           E8         F8C6            call	_dispi_set_enable
37859 9813           44                         inc	sp
37860 9814           44                         inc	sp
37861                                           !BCC_EOS
37862                                           ! 7974                 vga_compat_setup();
37863                                           ! Debug: func () int = vga_compat_setup+0 (used reg = )
37864 9815           E8         F9BC            call	_vga_compat_setup
37865                                           !BCC_EOS
37866                                           ! 7975                 write_word(0x40,0xBA,BX);
37867                                           ! Debug: list unsigned short BX = [S+$C+4] (used reg = )
37868 9818           FF76         06            push	6[bp]
37869                                           ! Debug: list int = const $BA (used reg = )
37870 981B           B8                   00BA  mov	ax,#$BA
37871 981E           50                         push	ax
37872                                           ! Debug: list int = const $40 (used reg = )
37873 981F           B8                   0040  mov	ax,*$40
37874 9822           50                         push	ax
37875                                           ! Debug: func () void = write_word+0 (used reg = )
37876 9823           E8         E3A8            call	_write_word
37877 9826           83C4                   06  add	sp,*6
37878                                           !BCC_EOS
37879                                           ! 7976                 write_byte(0x40,0x87,(0x60 | no_clear));
37880                                           ! Debug: or unsigned char no_clear = [S+$C-$B] to int = const $60 (used reg = )
37881                                           ! Debug: expression subtree swapping
37882 9829           8A46         F7            mov	al,-9[bp]
37883 982C           0C                     60  or	al,*$60
37884                                           ! Debug: list unsigned char = al+0 (used reg = )
37885 982E           30E4                       xor	ah,ah
37886 9830           50                         push	ax
37887                                           ! Debug: list int = const $87 (used reg = )
37888 9831           B8                   0087  mov	ax,#$87
37889 9834           50                         push	ax
37890                                           ! Debug: list int = const $40 (used reg = )
37891 9835           B8                   0040  mov	ax,*$40
37892 9838           50                         push	ax
37893                                           ! Debug: func () void = write_byte+0 (used reg = )
37894 9839           E8         E37A            call	_write_byte
37895 983C           83C4                   06  add	sp,*6
37896                                           !BCC_EOS
37897                                           ! 7977                 result = 0x4f;
37898                                           ! Debug: eq int = const $4F to unsigned short result = [S+$C-6] (used reg = )
37899 983F           B8                   004F  mov	ax,*$4F
37900 9842           8946         FC            mov	-4[bp],ax
37901                                           !BCC_EOS
37902                                           ! 7978         }
37903                                           ! 7979         else
37904                                           ! 7980         {
37905 9845           EB           14            jmp .2F3
37906                       00009847            .2EF:
37907                                           ! 7981                 result = 0x100;
37908                                           ! Debug: eq int = const $100 to unsigned short result = [S+$C-6] (used reg = )
37909 9847           B8                   0100  mov	ax,#$100
37910 984A           8946         FC            mov	-4[bp],ax
37911                                           !BCC_EOS
37912                                           ! 7982                 if (BX == 3)
37913                                           ! Debug: logeq int = const 3 to unsigned short BX = [S+$C+4] (used reg = )
37914 984D           8B46         06            mov	ax,6[bp]
37915 9850           3D                   0003  cmp	ax,*3
37916 9853           75           06            jne 	.2F4
37917                       00009855            .2F5:
37918                                           ! 7983                         result = 0x4f;
37919                                           ! Debug: eq int = const $4F to unsigned short result = [S+$C-6] (used reg = )
37920 9855           B8                   004F  mov	ax,*$4F
37921 9858           8946         FC            mov	-4[bp],ax
37922                                           !BCC_EOS
37923                                           ! 7984         }
37924                       0000985B            .2F4:
37925                                           ! 7985         write_word(ss, AX, result);
37926                       0000985B            .2F3:
37927                                           ! Debug: list unsigned short result = [S+$C-6] (used reg = )
37928 985B           FF76         FC            push	-4[bp]
37929                                           ! Debug: list * unsigned short AX = [S+$E+2] (used reg = )
37930 985E           FF76         04            push	4[bp]
37931                                           ! Debug: list unsigned short ss = [S+$10-4] (used reg = )
37932 9861           FF76         FE            push	-2[bp]
37933                                           ! Debug: func () void = write_word+0 (used reg = )
37934 9864           E8         E367            call	_write_word
37935 9867           83C4                   06  add	sp,*6
37936                                           !BCC_EOS
37937                                           ! 7986 }
37938 986A           89EC                       mov	sp,bp
37939 986C           5D                         pop	bp
37940 986D           C3                         ret
37941                                           ! 7987 #asm
37942                                           !BCC_ASM
37943                       00000008            _vbe_biosfn_set_mode.DI	set	8
37944                       00000006            _vbe_biosfn_set_mode.ES	set	6
37945                       00000002            _vbe_biosfn_set_mode.AX	set	2
37946                       00000004            _vbe_biosfn_set_mode.BX	set	4
37947                       0000986E            vbe_biosfn_return_current_mode:
37948 986E           1E                           push ds
37949 986F           B8                   0040    mov ax, # 0x40
37950 9872           8ED8                         mov ds, ax
37951 9874           E8         F872              call dispi_get_enable
37952 9877           25                   0001    and ax, # 0x01
37953 987A           74           09              jz no_vbe_mode
37954 987C           BB                   00BA    mov bx, # 0xBA
37955 987F           8B07                         mov ax, [bx]
37956 9881           89C3                         mov bx, ax
37957 9883           75           09              jnz vbe_03_ok
37958                       00009885            no_vbe_mode:
37959 9885           BB                   0049    mov bx, # 0x49
37960 9888           8A07                         mov al, [bx]
37961 988A           88C3                         mov bl, al
37962 988C           30FF                         xor bh, bh
37963                       0000988E            vbe_03_ok:
37964 988E           B8                   004F    mov ax, #0x004f
37965 9891           1F                           pop ds
37966 9892           C3                           ret
37967                                           ! 8008 endasm
37968                                           !BCC_ENDASM
37969                                           ! 8009 Bit16u vbe_biosfn_read_video_state_size()
37970                                           ! Register BX used in function vbe_biosfn_set_mode
37971                                           ! 8010 {
37972                                           export	_vbe_biosfn_read_video_state_size
37973                       00009893            _vbe_biosfn_read_video_state_size:
37974                                           ! 8011     return 9 * 2;
37975 9893           55                         push	bp
37976 9894           89E5                       mov	bp,sp
37977 9896           B8                   0012  mov	ax,*$12
37978 9899           5D                         pop	bp
37979 989A           C3                         ret
37980                                           !BCC_EOS
37981                                           ! 8012 }
37982                                           ! 8013 void vbe_biosfn_save_video_state(ES, BX)
37983                                           ! 8014      Bit16u ES; Bit16u BX;
37984                                           export	_vbe_biosfn_save_video_state
37985                       0000989B            _vbe_biosfn_save_video_state:
37986                                           !BCC_EOS
37987                                           !BCC_EOS
37988                                           ! 8015 {
37989                                           ! 8016     Bit16u enable, i;
37990                                           !BCC_EOS
37991                                           ! 8017     outw(0x01CE,0x4);
37992 989B           55                         push	bp
37993 989C           89E5                       mov	bp,sp
37994 989E           83C4                   FC  add	sp,*-4
37995                                           ! Debug: list int = const 4 (used reg = )
37996 98A1           B8                   0004  mov	ax,*4
37997 98A4           50                         push	ax
37998                                           ! Debug: list int = const $1CE (used reg = )
37999 98A5           B8                   01CE  mov	ax,#$1CE
38000 98A8           50                         push	ax
38001                                           ! Debug: func () void = outw+0 (used reg = )
38002 98A9           E8         E360            call	_outw
38003 98AC           83C4                   04  add	sp,*4
38004                                           !BCC_EOS
38005                                           ! 8018     enable = inw(0x01CF);
38006                                           ! Debug: list int = const $1CF (used reg = )
38007 98AF           B8                   01CF  mov	ax,#$1CF
38008 98B2           50                         push	ax
38009                                           ! Debug: func () unsigned short = inw+0 (used reg = )
38010 98B3           E8         E33B            call	_inw
38011 98B6           44                         inc	sp
38012 98B7           44                         inc	sp
38013                                           ! Debug: eq unsigned short = ax+0 to unsigned short enable = [S+6-4] (used reg = )
38014 98B8           8946         FE            mov	-2[bp],ax
38015                                           !BCC_EOS
38016                                           ! 8019     write_word(ES, BX, enable);
38017                                           ! Debug: list unsigned short enable = [S+6-4] (used reg = )
38018 98BB           FF76         FE            push	-2[bp]
38019                                           ! Debug: list unsigned short BX = [S+8+4] (used reg = )
38020 98BE           FF76         06            push	6[bp]
38021                                           ! Debug: list unsigned short ES = [S+$A+2] (used reg = )
38022 98C1           FF76         04            push	4[bp]
38023                                           ! Debug: func () void = write_word+0 (used reg = )
38024 98C4           E8         E307            call	_write_word
38025 98C7           83C4                   06  add	sp,*6
38026                                           !BCC_EOS
38027                                           ! 8020     BX += 2;
38028                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
38029 98CA           8B46         06            mov	ax,6[bp]
38030 98CD           40                         inc	ax
38031 98CE           40                         inc	ax
38032 98CF           8946         06            mov	6[bp],ax
38033                                           !BCC_EOS
38034                                           ! 8021     if (!(enable & 0x01))
38035                                           ! Debug: and int = const 1 to unsigned short enable = [S+6-4] (used reg = )
38036 98D2           8A46         FE            mov	al,-2[bp]
38037 98D5           24                     01  and	al,*1
38038 98D7           84C0                       test	al,al
38039 98D9           75           04            jne 	.2F6
38040                       000098DB            .2F7:
38041                                           ! 8022         return;
38042 98DB           89EC                       mov	sp,bp
38043 98DD           5D                         pop	bp
38044 98DE           C3                         ret
38045                                           !BCC_EOS
38046                                           ! 8023     for(i = 0x1; i <= 0x9; i++) {
38047                       000098DF            .2F6:
38048                                           ! Debug: eq int = const 1 to unsigned short i = [S+6-6] (used reg = )
38049 98DF           B8                   0001  mov	ax,*1
38050 98E2           8946         FC            mov	-4[bp],ax
38051                                           !BCC_EOS
38052                                           !BCC_EOS
38053 98E5           EB           3A            jmp .2FA
38054                       000098E7            .2FB:
38055                                           ! 8024         if (i != 0x4) {
38056                                           ! Debug: ne int = const 4 to unsigned short i = [S+6-6] (used reg = )
38057 98E7           8B46         FC            mov	ax,-4[bp]
38058 98EA           3D                   0004  cmp	ax,*4
38059 98ED           74           2B            je  	.2FC
38060                       000098EF            .2FD:
38061                                           ! 8025             outw(0x01CE, i);
38062                                           ! Debug: list unsigned short i = [S+6-6] (used reg = )
38063 98EF           FF76         FC            push	-4[bp]
38064                                           ! Debug: list int = const $1CE (used reg = )
38065 98F2           B8                   01CE  mov	ax,#$1CE
38066 98F5           50                         push	ax
38067                                           ! Debug: func () void = outw+0 (used reg = )
38068 98F6           E8         E313            call	_outw
38069 98F9           83C4                   04  add	sp,*4
38070                                           !BCC_EOS
38071                                           ! 8026             write_word(ES, BX, inw(0x01CF));
38072                                           ! Debug: list int = const $1CF (used reg = )
38073 98FC           B8                   01CF  mov	ax,#$1CF
38074 98FF           50                         push	ax
38075                                           ! Debug: func () unsigned short = inw+0 (used reg = )
38076 9900           E8         E2EE            call	_inw
38077 9903           44                         inc	sp
38078 9904           44                         inc	sp
38079                                           ! Debug: list unsigned short = ax+0 (used reg = )
38080 9905           50                         push	ax
38081                                           ! Debug: list unsigned short BX = [S+8+4] (used reg = )
38082 9906           FF76         06            push	6[bp]
38083                                           ! Debug: list unsigned short ES = [S+$A+2] (used reg = )
38084 9909           FF76         04            push	4[bp]
38085                                           ! Debug: func () void = write_word+0 (used reg = )
38086 990C           E8         E2BF            call	_write_word
38087 990F           83C4                   06  add	sp,*6
38088                                           !BCC_EOS
38089                                           ! 8027             BX += 2;
38090                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
38091 9912           8B46         06            mov	ax,6[bp]
38092 9915           40                         inc	ax
38093 9916           40                         inc	ax
38094 9917           8946         06            mov	6[bp],ax
38095                                           !BCC_EOS
38096                                           ! 8028         }
38097                                           ! 8029     }
38098                       0000991A            .2FC:
38099                                           ! 8030 }
38100                       0000991A            .2F9:
38101                                           ! Debug: postinc unsigned short i = [S+6-6] (used reg = )
38102 991A           8B46         FC            mov	ax,-4[bp]
38103 991D           40                         inc	ax
38104 991E           8946         FC            mov	-4[bp],ax
38105                       00009921            .2FA:
38106                                           ! Debug: le int = const 9 to unsigned short i = [S+6-6] (used reg = )
38107 9921           8B46         FC            mov	ax,-4[bp]
38108 9924           3D                   0009  cmp	ax,*9
38109 9927           76           BE            jbe	.2FB
38110                       00009929            .2FE:
38111                       00009929            .2F8:
38112 9929           89EC                       mov	sp,bp
38113 992B           5D                         pop	bp
38114 992C           C3                         ret
38115                                           ! 8031 void vbe_biosfn_restore_video_state(ES, BX)
38116                                           ! 8032      Bit16u ES; Bit16u BX;
38117                                           export	_vbe_biosfn_restore_video_state
38118                       0000992D            _vbe_biosfn_restore_video_state:
38119                                           !BCC_EOS
38120                                           !BCC_EOS
38121                                           ! 8033 {
38122                                           ! 8034     Bit16u enable, i;
38123                                           !BCC_EOS
38124                                           ! 8035     enable = read_word(ES, BX);
38125 992D           55                         push	bp
38126 992E           89E5                       mov	bp,sp
38127 9930           83C4                   FC  add	sp,*-4
38128                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
38129 9933           FF76         06            push	6[bp]
38130                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
38131 9936           FF76         04            push	4[bp]
38132                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
38133 9939           E8         E267            call	_read_word
38134 993C           83C4                   04  add	sp,*4
38135                                           ! Debug: eq unsigned short = ax+0 to unsigned short enable = [S+6-4] (used reg = )
38136 993F           8946         FE            mov	-2[bp],ax
38137                                           !BCC_EOS
38138                                           ! 8036     BX += 2;
38139                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
38140 9942           8B46         06            mov	ax,6[bp]
38141 9945           40                         inc	ax
38142 9946           40                         inc	ax
38143 9947           8946         06            mov	6[bp],ax
38144                                           !BCC_EOS
38145                                           ! 8037     if (!(enable & 0x01)) {
38146                                           ! Debug: and int = const 1 to unsigned short enable = [S+6-4] (used reg = )
38147 994A           8A46         FE            mov	al,-2[bp]
38148 994D           24                     01  and	al,*1
38149 994F           84C0                       test	al,al
38150 9951           75           1E            jne 	.2FF
38151                       00009953            .300:
38152                                           ! 8038         outw(0x01CE,0x4);
38153                                           ! Debug: list int = const 4 (used reg = )
38154 9953           B8                   0004  mov	ax,*4
38155 9956           50                         push	ax
38156                                           ! Debug: list int = const $1CE (used reg = )
38157 9957           B8                   01CE  mov	ax,#$1CE
38158 995A           50                         push	ax
38159                                           ! Debug: func () void = outw+0 (used reg = )
38160 995B           E8         E2AE            call	_outw
38161 995E           83C4                   04  add	sp,*4
38162                                           !BCC_EOS
38163                                           ! 8039         outw(0x01CF, enable);
38164                                           ! Debug: list unsigned short enable = [S+6-4] (used reg = )
38165 9961           FF76         FE            push	-2[bp]
38166                                           ! Debug: list int = const $1CF (used reg = )
38167 9964           B8                   01CF  mov	ax,#$1CF
38168 9967           50                         push	ax
38169                                           ! Debug: func () void = outw+0 (used reg = )
38170 9968           E8         E2A1            call	_outw
38171 996B           83C4                   04  add	sp,*4
38172                                           !BCC_EOS
38173                                           ! 8040     } else {
38174 996E           E9         00E5            br 	.301
38175                       00009971            .2FF:
38176                                           ! 8041         outw(0x01CE, 0x1);
38177                                           ! Debug: list int = const 1 (used reg = )
38178 9971           B8                   0001  mov	ax,*1
38179 9974           50                         push	ax
38180                                           ! Debug: list int = const $1CE (used reg = )
38181 9975           B8                   01CE  mov	ax,#$1CE
38182 9978           50                         push	ax
38183                                           ! Debug: func () void = outw+0 (used reg = )
38184 9979           E8         E290            call	_outw
38185 997C           83C4                   04  add	sp,*4
38186                                           !BCC_EOS
38187                                           ! 8042         outw(0x01CF, read_word(ES, BX));
38188                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
38189 997F           FF76         06            push	6[bp]
38190                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
38191 9982           FF76         04            push	4[bp]
38192                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
38193 9985           E8         E21B            call	_read_word
38194 9988           83C4                   04  add	sp,*4
38195                                           ! Debug: list unsigned short = ax+0 (used reg = )
38196 998B           50                         push	ax
38197                                           ! Debug: list int = const $1CF (used reg = )
38198 998C           B8                   01CF  mov	ax,#$1CF
38199 998F           50                         push	ax
38200                                           ! Debug: func () void = outw+0 (used reg = )
38201 9990           E8         E279            call	_outw
38202 9993           83C4                   04  add	sp,*4
38203                                           !BCC_EOS
38204                                           ! 8043         BX += 2;
38205                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
38206 9996           8B46         06            mov	ax,6[bp]
38207 9999           40                         inc	ax
38208 999A           40                         inc	ax
38209 999B           8946         06            mov	6[bp],ax
38210                                           !BCC_EOS
38211                                           ! 8044         outw(0x01CE, 0x2);
38212                                           ! Debug: list int = const 2 (used reg = )
38213 999E           B8                   0002  mov	ax,*2
38214 99A1           50                         push	ax
38215                                           ! Debug: list int = const $1CE (used reg = )
38216 99A2           B8                   01CE  mov	ax,#$1CE
38217 99A5           50                         push	ax
38218                                           ! Debug: func () void = outw+0 (used reg = )
38219 99A6           E8         E263            call	_outw
38220 99A9           83C4                   04  add	sp,*4
38221                                           !BCC_EOS
38222                                           ! 8045         outw(0x01CF, read_word(ES, BX));
38223                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
38224 99AC           FF76         06            push	6[bp]
38225                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
38226 99AF           FF76         04            push	4[bp]
38227                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
38228 99B2           E8         E1EE            call	_read_word
38229 99B5           83C4                   04  add	sp,*4
38230                                           ! Debug: list unsigned short = ax+0 (used reg = )
38231 99B8           50                         push	ax
38232                                           ! Debug: list int = const $1CF (used reg = )
38233 99B9           B8                   01CF  mov	ax,#$1CF
38234 99BC           50                         push	ax
38235                                           ! Debug: func () void = outw+0 (used reg = )
38236 99BD           E8         E24C            call	_outw
38237 99C0           83C4                   04  add	sp,*4
38238                                           !BCC_EOS
38239                                           ! 8046         BX += 2;
38240                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
38241 99C3           8B46         06            mov	ax,6[bp]
38242 99C6           40                         inc	ax
38243 99C7           40                         inc	ax
38244 99C8           8946         06            mov	6[bp],ax
38245                                           !BCC_EOS
38246                                           ! 8047         outw(0x01CE, 0x3);
38247                                           ! Debug: list int = const 3 (used reg = )
38248 99CB           B8                   0003  mov	ax,*3
38249 99CE           50                         push	ax
38250                                           ! Debug: list int = const $1CE (used reg = )
38251 99CF           B8                   01CE  mov	ax,#$1CE
38252 99D2           50                         push	ax
38253                                           ! Debug: func () void = outw+0 (used reg = )
38254 99D3           E8         E236            call	_outw
38255 99D6           83C4                   04  add	sp,*4
38256                                           !BCC_EOS
38257                                           ! 8048         outw(0x01CF, read_word(ES, BX));
38258                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
38259 99D9           FF76         06            push	6[bp]
38260                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
38261 99DC           FF76         04            push	4[bp]
38262                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
38263 99DF           E8         E1C1            call	_read_word
38264 99E2           83C4                   04  add	sp,*4
38265                                           ! Debug: list unsigned short = ax+0 (used reg = )
38266 99E5           50                         push	ax
38267                                           ! Debug: list int = const $1CF (used reg = )
38268 99E6           B8                   01CF  mov	ax,#$1CF
38269 99E9           50                         push	ax
38270                                           ! Debug: func () void = outw+0 (used reg = )
38271 99EA           E8         E21F            call	_outw
38272 99ED           83C4                   04  add	sp,*4
38273                                           !BCC_EOS
38274                                           ! 8049         BX += 2;
38275                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
38276 99F0           8B46         06            mov	ax,6[bp]
38277 99F3           40                         inc	ax
38278 99F4           40                         inc	ax
38279 99F5           8946         06            mov	6[bp],ax
38280                                           !BCC_EOS
38281                                           ! 8050         outw(0x01CE,0x4);
38282                                           ! Debug: list int = const 4 (used reg = )
38283 99F8           B8                   0004  mov	ax,*4
38284 99FB           50                         push	ax
38285                                           ! Debug: list int = const $1CE (used reg = )
38286 99FC           B8                   01CE  mov	ax,#$1CE
38287 99FF           50                         push	ax
38288                                           ! Debug: func () void = outw+0 (used reg = )
38289 9A00           E8         E209            call	_outw
38290 9A03           83C4                   04  add	sp,*4
38291                                           !BCC_EOS
38292                                           ! 8051         outw(0x01CF, enable);
38293                                           ! Debug: list unsigned short enable = [S+6-4] (used reg = )
38294 9A06           FF76         FE            push	-2[bp]
38295                                           ! Debug: list int = const $1CF (used reg = )
38296 9A09           B8                   01CF  mov	ax,#$1CF
38297 9A0C           50                         push	ax
38298                                           ! Debug: func () void = outw+0 (used reg = )
38299 9A0D           E8         E1FC            call	_outw
38300 9A10           83C4                   04  add	sp,*4
38301                                           !BCC_EOS
38302                                           ! 8052         for(i = 0x5; i <= 0x9; i++) {
38303                                           ! Debug: eq int = const 5 to unsigned short i = [S+6-6] (used reg = )
38304 9A13           B8                   0005  mov	ax,*5
38305 9A16           8946         FC            mov	-4[bp],ax
38306                                           !BCC_EOS
38307                                           !BCC_EOS
38308 9A19           EB           33            jmp .304
38309                       00009A1B            .305:
38310                                           ! 8053             outw(0x01CE, i);
38311                                           ! Debug: list unsigned short i = [S+6-6] (used reg = )
38312 9A1B           FF76         FC            push	-4[bp]
38313                                           ! Debug: list int = const $1CE (used reg = )
38314 9A1E           B8                   01CE  mov	ax,#$1CE
38315 9A21           50                         push	ax
38316                                           ! Debug: func () void = outw+0 (used reg = )
38317 9A22           E8         E1E7            call	_outw
38318 9A25           83C4                   04  add	sp,*4
38319                                           !BCC_EOS
38320                                           ! 8054             outw(0x01CF, read_word(ES, BX));
38321                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
38322 9A28           FF76         06            push	6[bp]
38323                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
38324 9A2B           FF76         04            push	4[bp]
38325                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
38326 9A2E           E8         E172            call	_read_word
38327 9A31           83C4                   04  add	sp,*4
38328                                           ! Debug: list unsigned short = ax+0 (used reg = )
38329 9A34           50                         push	ax
38330                                           ! Debug: list int = const $1CF (used reg = )
38331 9A35           B8                   01CF  mov	ax,#$1CF
38332 9A38           50                         push	ax
38333                                           ! Debug: func () void = outw+0 (used reg = )
38334 9A39           E8         E1D0            call	_outw
38335 9A3C           83C4                   04  add	sp,*4
38336                                           !BCC_EOS
38337                                           ! 8055             BX += 2;
38338                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
38339 9A3F           8B46         06            mov	ax,6[bp]
38340 9A42           40                         inc	ax
38341 9A43           40                         inc	ax
38342 9A44           8946         06            mov	6[bp],ax
38343                                           !BCC_EOS
38344                                           ! 8056         }
38345                                           ! 8057     }
38346                       00009A47            .303:
38347                                           ! Debug: postinc unsigned short i = [S+6-6] (used reg = )
38348 9A47           8B46         FC            mov	ax,-4[bp]
38349 9A4A           40                         inc	ax
38350 9A4B           8946         FC            mov	-4[bp],ax
38351                       00009A4E            .304:
38352                                           ! Debug: le int = const 9 to unsigned short i = [S+6-6] (used reg = )
38353 9A4E           8B46         FC            mov	ax,-4[bp]
38354 9A51           3D                   0009  cmp	ax,*9
38355 9A54           76           C5            jbe	.305
38356                       00009A56            .306:
38357                       00009A56            .302:
38358                                           ! 8058 }
38359                       00009A56            .301:
38360 9A56           89EC                       mov	sp,bp
38361 9A58           5D                         pop	bp
38362 9A59           C3                         ret
38363                                           ! 8059 void vbe_biosfn_save_restore_state(AX, CX, DX, ES, BX)
38364                                           ! 8060 Bit16u *AX; Bit16u CX; Bit16u DX; Bit16u ES; Bit16u *BX;
38365                                           export	_vbe_biosfn_save_restore_state
38366                       00009A5A            _vbe_biosfn_save_restore_state:
38367                                           !BCC_EOS
38368                                           !BCC_EOS
38369                                           !BCC_EOS
38370                                           !BCC_EOS
38371                                           !BCC_EOS
38372                                           ! 8061 {
38373                                           ! 8062     Bit16u ss=get_SS();
38374 9A5A           55                         push	bp
38375 9A5B           89E5                       mov	bp,sp
38376 9A5D           4C                         dec	sp
38377 9A5E           4C                         dec	sp
38378                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
38379 9A5F           E8         E1BA            call	_get_SS
38380                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
38381 9A62           8946         FE            mov	-2[bp],ax
38382                                           !BCC_EOS
38383                                           ! 8063     Bit16u result, val;
38384                                           !BCC_EOS
38385                                           ! 8064     result = 0x4f;
38386 9A65           83C4                   FC  add	sp,*-4
38387                                           ! Debug: eq int = const $4F to unsigned short result = [S+8-6] (used reg = )
38388 9A68           B8                   004F  mov	ax,*$4F
38389 9A6B           8946         FC            mov	-4[bp],ax
38390                                           !BCC_EOS
38391                                           ! 8065     switch(( DX & 0x00ff )) {
38392                                           ! Debug: and int = const $FF to unsigned short DX = [S+8+6] (used reg = )
38393 9A6E           8A46         08            mov	al,8[bp]
38394 9A71           E9         00A9            br 	.309
38395                                           ! 8066     case 0x00:
38396                                           ! 8067         val = biosfn_read_video_state_size2(CX);
38397                       00009A74            .30A:
38398                                           ! Debug: list unsigned short CX = [S+8+4] (used reg = )
38399 9A74           FF76         06            push	6[bp]
38400                                           ! Debug: func () unsigned short = biosfn_read_video_state_size2+0 (used reg = )
38401 9A77           E8         D417            call	_biosfn_read_video_state_size2
38402 9A7A           44                         inc	sp
38403 9A7B           44                         inc	sp
38404                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
38405 9A7C           8946         FA            mov	-6[bp],ax
38406                                           !BCC_EOS
38407                                           ! 8068         if (CX & 8)
38408                                           ! Debug: and int = const 8 to unsigned short CX = [S+8+4] (used reg = )
38409 9A7F           8A46         06            mov	al,6[bp]
38410 9A82           24                     08  and	al,*8
38411 9A84           84C0                       test	al,al
38412 9A86           74           09            je  	.30B
38413                       00009A88            .30C:
38414                                           ! 8069             val += vbe_biosfn_read_video_state_size();
38415                                           ! Debug: func () unsigned short = vbe_biosfn_read_video_state_size+0 (used reg = )
38416 9A88           E8         FE08            call	_vbe_biosfn_read_video_state_size
38417                                           ! Debug: addab unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
38418 9A8B           0346         FA            add	ax,-6[bp]
38419 9A8E           8946         FA            mov	-6[bp],ax
38420                                           !BCC_EOS
38421                                           ! 8070         write_word(ss, BX, val);
38422                       00009A91            .30B:
38423                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
38424 9A91           FF76         FA            push	-6[bp]
38425                                           ! Debug: list * unsigned short BX = [S+$A+$A] (used reg = )
38426 9A94           FF76         0C            push	$C[bp]
38427                                           ! Debug: list unsigned short ss = [S+$C-4] (used reg = )
38428 9A97           FF76         FE            push	-2[bp]
38429                                           ! Debug: func () void = write_word+0 (used reg = )
38430 9A9A           E8         E131            call	_write_word
38431 9A9D           83C4                   06  add	sp,*6
38432                                           !BCC_EOS
38433                                           ! 8071         break;
38434 9AA0           E9         008C            br 	.307
38435                                           !BCC_EOS
38436                                           ! 8072     case 0x01:
38437                                           ! 8073         val = read_word(ss, BX);
38438                       00009AA3            .30D:
38439                                           ! Debug: list * unsigned short BX = [S+8+$A] (used reg = )
38440 9AA3           FF76         0C            push	$C[bp]
38441                                           ! Debug: list unsigned short ss = [S+$A-4] (used reg = )
38442 9AA6           FF76         FE            push	-2[bp]
38443                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
38444 9AA9           E8         E0F7            call	_read_word
38445 9AAC           83C4                   04  add	sp,*4
38446                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
38447 9AAF           8946         FA            mov	-6[bp],ax
38448                                           !BCC_EOS
38449                                           ! 8074         val = biosfn_save_video_state(CX, ES, val);
38450                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
38451 9AB2           FF76         FA            push	-6[bp]
38452                                           ! Debug: list unsigned short ES = [S+$A+8] (used reg = )
38453 9AB5           FF76         0A            push	$A[bp]
38454                                           ! Debug: list unsigned short CX = [S+$C+4] (used reg = )
38455 9AB8           FF76         06            push	6[bp]
38456                                           ! Debug: func () unsigned short = biosfn_save_video_state+0 (used reg = )
38457 9ABB           E8         D43E            call	_biosfn_save_video_state
38458 9ABE           83C4                   06  add	sp,*6
38459                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
38460 9AC1           8946         FA            mov	-6[bp],ax
38461                                           !BCC_EOS
38462                                           ! 8075         if (CX & 8)
38463                                           ! Debug: and int = const 8 to unsigned short CX = [S+8+4] (used reg = )
38464 9AC4           8A46         06            mov	al,6[bp]
38465 9AC7           24                     08  and	al,*8
38466 9AC9           84C0                       test	al,al
38467 9ACB           74           0C            je  	.30E
38468                       00009ACD            .30F:
38469                                           ! 8076             vbe_biosfn_save_video_state(ES, val);
38470                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
38471 9ACD           FF76         FA            push	-6[bp]
38472                                           ! Debug: list unsigned short ES = [S+$A+8] (used reg = )
38473 9AD0           FF76         0A            push	$A[bp]
38474                                           ! Debug: func () void = vbe_biosfn_save_video_state+0 (used reg = )
38475 9AD3           E8         FDC5            call	_vbe_biosfn_save_video_state
38476 9AD6           83C4                   04  add	sp,*4
38477                                           !BCC_EOS
38478                                           ! 8077         break;
38479                       00009AD9            .30E:
38480 9AD9           EB           54            jmp .307
38481                                           !BCC_EOS
38482                                           ! 8078     case 0x02:
38483                                           ! 8079         val = read_word(ss, BX);
38484                       00009ADB            .310:
38485                                           ! Debug: list * unsigned short BX = [S+8+$A] (used reg = )
38486 9ADB           FF76         0C            push	$C[bp]
38487                                           ! Debug: list unsigned short ss = [S+$A-4] (used reg = )
38488 9ADE           FF76         FE            push	-2[bp]
38489                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
38490 9AE1           E8         E0BF            call	_read_word
38491 9AE4           83C4                   04  add	sp,*4
38492                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
38493 9AE7           8946         FA            mov	-6[bp],ax
38494                                           !BCC_EOS
38495                                           ! 8080         val = biosfn_restore_video_state(CX, ES, val);
38496                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
38497 9AEA           FF76         FA            push	-6[bp]
38498                                           ! Debug: list unsigned short ES = [S+$A+8] (used reg = )
38499 9AED           FF76         0A            push	$A[bp]
38500                                           ! Debug: list unsigned short CX = [S+$C+4] (used reg = )
38501 9AF0           FF76         06            push	6[bp]
38502                                           ! Debug: func () unsigned short = biosfn_restore_video_state+0 (used reg = )
38503 9AF3           E8         D9D0            call	_biosfn_restore_video_state
38504 9AF6           83C4                   06  add	sp,*6
38505                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
38506 9AF9           8946         FA            mov	-6[bp],ax
38507                                           !BCC_EOS
38508                                           ! 8081         if (CX & 8)
38509                                           ! Debug: and int = const 8 to unsigned short CX = [S+8+4] (used reg = )
38510 9AFC           8A46         06            mov	al,6[bp]
38511 9AFF           24                     08  and	al,*8
38512 9B01           84C0                       test	al,al
38513 9B03           74           0C            je  	.311
38514                       00009B05            .312:
38515                                           ! 8082             vbe_biosf
38516                                           ! 8082 n_restore_video_state(ES, val);
38517                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
38518 9B05           FF76         FA            push	-6[bp]
38519                                           ! Debug: list unsigned short ES = [S+$A+8] (used reg = )
38520 9B08           FF76         0A            push	$A[bp]
38521                                           ! Debug: func () void = vbe_biosfn_restore_video_state+0 (used reg = )
38522 9B0B           E8         FE1F            call	_vbe_biosfn_restore_video_state
38523 9B0E           83C4                   04  add	sp,*4
38524                                           !BCC_EOS
38525                                           ! 8083         break;
38526                       00009B11            .311:
38527 9B11           EB           1C            jmp .307
38528                                           !BCC_EOS
38529                                           ! 8084     default:
38530                                           ! 8085         result = 0x100;
38531                       00009B13            .313:
38532                                           ! Debug: eq int = const $100 to unsigned short result = [S+8-6] (used reg = )
38533 9B13           B8                   0100  mov	ax,#$100
38534 9B16           8946         FC            mov	-4[bp],ax
38535                                           !BCC_EOS
38536                                           ! 8086         break;
38537 9B19           EB           14            jmp .307
38538                                           !BCC_EOS
38539                                           ! 8087     }
38540                                           ! 8088     write_word(ss, AX, result);
38541 9B1B           EB           12            jmp .307
38542                       00009B1D            .309:
38543 9B1D           2C                     00  sub	al,*0
38544 9B1F         0F84         FF51            beq 	.30A
38545 9B23           2C                     01  sub	al,*1
38546 9B25         0F84         FF7A            beq 	.30D
38547 9B29           2C                     01  sub	al,*1
38548 9B2B           74           AE            je 	.310
38549 9B2D           EB           E4            jmp	.313
38550                       00009B2F            .307:
38551                       FFFFFFF8            ..FFF4	=	-8
38552                                           ! Debug: list unsigned short result = [S+8-6] (used reg = )
38553 9B2F           FF76         FC            push	-4[bp]
38554                                           ! Debug: list * unsigned short AX = [S+$A+2] (used reg = )
38555 9B32           FF76         04            push	4[bp]
38556                                           ! Debug: list unsigned short ss = [S+$C-4] (used reg = )
38557 9B35           FF76         FE            push	-2[bp]
38558                                           ! Debug: func () void = write_word+0 (used reg = )
38559 9B38           E8         E093            call	_write_word
38560 9B3B           83C4                   06  add	sp,*6
38561                                           !BCC_EOS
38562                                           ! 8089 }
38563 9B3E           89EC                       mov	sp,bp
38564 9B40           5D                         pop	bp
38565 9B41           C3                         ret
38566                                           ! 8090 #asm
38567                                           !BCC_ASM
38568                       00000004            _vbe_biosfn_save_restore_state.CX	set	4
38569                       00000006            _vbe_biosfn_save_restore_state.DX	set	6
38570                       00000008            _vbe_biosfn_save_restore_state.ES	set	8
38571                       00000002            _vbe_biosfn_save_restore_state.AX	set	2
38572                       0000000A            _vbe_biosfn_save_restore_state.BX	set	$A
38573                       00009B42            vbe_biosfn_display_window_control:
38574 9B42           80FB                   00    cmp bl, #0x00
38575 9B45           75           24              jne vbe_05_failed
38576 9B47           80FF                   01    cmp bh, #0x01
38577 9B4A           74           16              je get_display_window
38578 9B4C           72           04              jb set_display_window
38579 9B4E           B8                   0100    mov ax, #0x0100
38580 9B51           C3                           ret
38581                       00009B52            set_display_window:
38582 9B52           89D0                         mov ax, dx
38583 9B54           E8         F5A0              call _dispi_set_bank
38584 9B57           E8         F5AD              call dispi_get_bank
38585 9B5A           39D0                         cmp ax, dx
38586 9B5C           75           0D              jne vbe_05_failed
38587 9B5E           B8                   004F    mov ax, #0x004f
38588 9B61           C3                           ret
38589                       00009B62            get_display_window:
38590 9B62           E8         F5A2              call dispi_get_bank
38591 9B65           89C2                         mov dx, ax
38592 9B67           B8                   004F    mov ax, #0x004f
38593 9B6A           C3                           ret
38594                       00009B6B            vbe_05_failed:
38595 9B6B           B8                   014F    mov ax, #0x014f
38596 9B6E           C3                           ret
38597                                           ! 8115 endasm
38598                                           !BCC_ENDASM
38599                                           ! 8116 #asm
38600                                           !BCC_ASM
38601                       00000004            _vbe_biosfn_save_restore_state.CX	set	4
38602                       00000006            _vbe_biosfn_save_restore_state.DX	set	6
38603                       00000008            _vbe_biosfn_save_restore_state.ES	set	8
38604                       00000002            _vbe_biosfn_save_restore_state.AX	set	2
38605                       0000000A            _vbe_biosfn_save_restore_state.BX	set	$A
38606                       00009B6F            vbe_biosfn_set_get_logical_scan_line_length:
38607 9B6F           89C8                         mov ax, cx
38608 9B71           80FB                   01    cmp bl, #0x01
38609 9B74           74           24              je get_logical_scan_line_length
38610 9B76           80FB                   02    cmp bl, #0x02
38611 9B79           74           06              je set_logical_scan_line_bytes
38612 9B7B           72           1A              jb set_logical_scan_line_pixels
38613 9B7D           B8                   0100    mov ax, #0x0100
38614 9B80           C3                           ret
38615                       00009B81            set_logical_scan_line_bytes:
38616 9B81           50                           push ax
38617 9B82           E8         F4F7              call dispi_get_bpp
38618 9B85           30FF                         xor bh, bh
38619 9B87           88E3                         mov bl, ah
38620 9B89           08DB                         or bl, bl
38621 9B8B           75           05              jnz no_4bpp_1
38622 9B8D           C1E0                   03    shl ax, #3
38623 9B90           B3                     01    mov bl, #1
38624                       00009B92            no_4bpp_1:
38625 9B92           31D2                         xor dx, dx
38626 9B94           58                           pop ax
38627 9B95           F7F3                         div bx
38628                       00009B97            set_logical_scan_line_pixels:
38629 9B97           E8         F60B              call dispi_set_virt_width
38630                       00009B9A            get_logical_scan_line_length:
38631 9B9A           E8         F4DF              call dispi_get_bpp
38632 9B9D           30FF                         xor bh, bh
38633 9B9F           88E3                         mov bl, ah
38634 9BA1           E8         F614              call dispi_get_virt_width
38635 9BA4           89C1                         mov cx, ax
38636 9BA6           08DB                         or bl, bl
38637 9BA8           75           05              jnz no_4bpp_2
38638 9BAA           C1E8                   03    shr ax, #3
38639 9BAD           B3                     01    mov bl, #1
38640                       00009BAF            no_4bpp_2:
38641 9BAF           F7E3                         mul bx
38642 9BB1           89C3                         mov bx, ax
38643 9BB3           E8         F610              call dispi_get_virt_height
38644 9BB6           89C2                         mov dx, ax
38645 9BB8           B8                   004F    mov ax, #0x004f
38646 9BBB           C3                           ret
38647                                           ! 8158 endasm
38648                                           !BCC_ENDASM
38649                                           ! 8159 #asm
38650                                           !BCC_ASM
38651                       00000004            _vbe_biosfn_save_restore_state.CX	set	4
38652                       00000006            _vbe_biosfn_save_restore_state.DX	set	6
38653                       00000008            _vbe_biosfn_save_restore_state.ES	set	8
38654                       00000002            _vbe_biosfn_save_restore_state.AX	set	2
38655                       0000000A            _vbe_biosfn_save_restore_state.BX	set	$A
38656                       00009BBC            vbe_biosfn_set_get_display_start:
38657 9BBC           80FB                   80    cmp bl, #0x80
38658 9BBF           74           0B              je set_display_start
38659 9BC1           80FB                   01    cmp bl, #0x01
38660 9BC4           74           14              je get_display_start
38661 9BC6           72           04              jb set_display_start
38662 9BC8           B8                   0100    mov ax, #0x0100
38663 9BCB           C3                           ret
38664                       00009BCC            set_display_start:
38665 9BCC           89C8                         mov ax, cx
38666 9BCE           E8         F57B              call dispi_set_x_offset
38667 9BD1           89D0                         mov ax, dx
38668 9BD3           E8         F594              call dispi_set_y_offset
38669 9BD6           B8                   004F    mov ax, #0x004f
38670 9BD9           C3                           ret
38671                       00009BDA            get_display_start:
38672 9BDA           E8         F57F              call dispi_get_x_offset
38673 9BDD           89C1                         mov cx, ax
38674 9BDF           E8         F598              call dispi_get_y_offset
38675 9BE2           89C2                         mov dx, ax
38676 9BE4           30FF                         xor bh, bh
38677 9BE6           B8                   004F    mov ax, #0x004f
38678 9BE9           C3                           ret
38679                                           ! 8183 endasm
38680                                           !BCC_ENDASM
38681                                           ! 8184 #asm
38682                                           !BCC_ASM
38683                       00000004            _vbe_biosfn_save_restore_state.CX	set	4
38684                       00000006            _vbe_biosfn_save_restore_state.DX	set	6
38685                       00000008            _vbe_biosfn_save_restore_state.ES	set	8
38686                       00000002            _vbe_biosfn_save_restore_state.AX	set	2
38687                       0000000A            _vbe_biosfn_save_restore_state.BX	set	$A
38688                       00009BEA            vbe_biosfn_set_get_dac_palette_format:
38689 9BEA           80FB                   01    cmp bl, #0x01
38690 9BED           74           1E              je get_dac_palette_format
38691 9BEF           72           04              jb set_dac_palette_format
38692 9BF1           B8                   0100    mov ax, #0x0100
38693 9BF4           C3                           ret
38694                       00009BF5            set_dac_palette_format:
38695 9BF5           E8         F4F1              call dispi_get_enable
38696 9BF8           80FF                   06    cmp bh, #0x06
38697 9BFB           74           0A              je set_normal_dac
38698 9BFD           80FF                   08    cmp bh, #0x08
38699 9C00           75           1B              jne vbe_08_unsupported
38700 9C02           0D                   0020    or ax, # 0x20
38701 9C05           75           03              jnz set_dac_mode
38702                       00009C07            set_normal_dac:
38703 9C07           25                   FFDF    and ax, #~ 0x20
38704                       00009C0A            set_dac_mode:
38705 9C0A           E8         F4CC              call _dispi_set_enable
38706                       00009C0D            get_dac_palette_format:
38707 9C0D           B7                     06    mov bh, #0x06
38708 9C0F           E8         F4D7              call dispi_get_enable
38709 9C12           25                   0020    and ax, # 0x20
38710 9C15           74           02              jz vbe_08_ok
38711 9C17           B7                     08    mov bh, #0x08
38712                       00009C19            vbe_08_ok:
38713 9C19           B8                   004F    mov ax, #0x004f
38714 9C1C           C3                           ret
38715                       00009C1D            vbe_08_unsupported:
38716 9C1D           B8                   014F    mov ax, #0x014f
38717 9C20           C3                           ret
38718                                           ! 8215 endasm
38719                                           !BCC_ENDASM
38720                                           ! 8216 void vbe_biosfn_set_get_palette_data(AX)
38721                                           ! 8217 {
38722                                           export	_vbe_biosfn_set_get_palette_data
38723                       00009C21            _vbe_biosfn_set_get_palette_data:
38724                                           ! 8218 }
38725 9C21           C3                         ret
38726                                           ! 8219 #asm
38727                                           !BCC_ASM
38728                       00000002            _vbe_biosfn_set_get_palette_data.AX	set	2
38729                       00009C22            vbe_biosfn_return_protected_mode_interface:
38730 9C22           84DB                         test bl, bl
38731 9C24           75           11              jnz _fail
38732 9C26           BF                   C000    mov di, #0xc000
38733 9C29           8EC7                         mov es, di
38734 9C2B           BF                   8F0A    mov di, # vesa_pm_start
38735 9C2E           B9                   900B    mov cx, # vesa_pm_end
38736 9C31           29F9                         sub cx, di
38737 9C33           B8                   004F    mov ax, #0x004f
38738 9C36           C3                           ret
38739                       00009C37            _fail:
38740 9C37           B8                   014F    mov ax, #0x014f
38741 9C3A           C3                           ret
38742                                           ! 8233 endasm
38743                                           !BCC_ENDASM
38744                                           ! 8234 #asm
38745                                           !BCC_ASM
38746                       00000002            _vbe_biosfn_set_get_palette_data.AX	set	2
38747                                           ;; DATA_SEG_DEFS_HERE
38748                                           ! 8236 endasm
38749                                           !BCC_ENDASM
38750                                           ! 8237 #asm
38751                                           !BCC_ASM
38752                       00000002            _vbe_biosfn_set_get_palette_data.AX	set	2
38753 9C3B                        76            .ascii "vgabios ends here"
38754 9C4C                        00            .byte 0x00
38755                       00009C4D            vgabios_end:
38756 9C4D                        CB            .byte 0xCB
38757                                           ;; BLOCK_STRINGS_BEGIN
38758                                           ! 8243 endasm
38759                                           !BCC_ENDASM
38760                                           ! 8244 
38761                                           
38762 9C4E                                      .bss
38763                                           
38764                                           ! 0 errors detected

Symbols:
..FFF4                      0 FFF8 A   ..FFF5                      0 FFFC A   
..FFF6                      0 FFEE A   ..FFF7                      0 FFF4 A   
..FFF8                      0 FFF6 A   ..FFF9                      0 FFEE A   
..FFFA                      0 FFEE A   ..FFFB                      0 FFF2 A   
..FFFC                      0 FFF0 A   ..FFFD                      0 FFE8 A   
..FFFE                      0 FFE8 A   ..FFFF                      0 FFFE A   
.1                          0 3B95 A   .10                         0 3693 A   
.100                        0 4CBA A   .101                        0 4CB3 A   
.102                        0 4CAA A   .103                        0 4E54 A   
.104                        0 4DC6 A   .105                        0 4D3C A   
.106                        0 4DC3 A   .107                        0 4DB2 A   
.108                        0 4DB9 A   .109                        0 4D46 A   
.10A                        0 4D8A A   .10B                        0 4D64 A   
.10C                        0 4D5D A   .10D                        0 4DB2 A   
.10E                        0 4DC3 A   .10F                        0 4E54 A   
.11                         0 36C2 A   .110                        0 4E54 A   
.111                        0 4E41 A   .112                        0 4E48 A   
.113                        0 4DD0 A   .114                        0 4E0D A   
.115                        0 4DE7 A   .116                        0 4DE0 A   
.117                        0 4E35 A   .118                        0 4E41 A   
.119                        0 4E3F A   .11A                        0 4E54 A   
.11B                        0 4E57 A   .11C                        0 4EEA A   
.11D                        0 4EA5 A   .11E                        0 4E93 A   
.11F                        0 4E81 A   .12                         0 36B2 A   
.120                        0 4E7A A   .121                        0 4E73 A   
.122                        0 502E A   .123                        0 4F0D A   
.124                        0 4EF1 A   .125                        0 4FA0 A   
.126                        0 4F16 A   .127                        0 4F9D A   
.128                        0 4F8C A   .129                        0 4F93 A   
.12A                        0 4F20 A   .12B                        0 4F64 A   
.12C                        0 4F3E A   .12D                        0 4F37 A   
.12E                        0 4F8C A   .12F                        0 4F9D A   
.13                         0 36C7 A   .130                        0 502E A   
.131                        0 502E A   .132                        0 501B A   
.133                        0 5022 A   .134                        0 4FAA A   
.135                        0 4FE7 A   .136                        0 4FC1 A   
.137                        0 4FBA A   .138                        0 500F A   
.139                        0 501B A   .13A                        0 5019 A   
.13B                        0 502E A   .13C                        0 5080 A   
.13D                        0 507C A   .13E                        0 513F A   
.13F                        0 50E1 A   .14                         0 36DE A   
.140                        0 513F A   .141                        0 5170 A   
.143                        0 5166 A   .144                        0 514E A   
.145                        0 5156 A   .146                        0 515E A   
.147                        0 51DD A   .148                        0 51CD A   
.149                        0 51EB A   .14A                        0 52A3 A   
.14B                        0 5292 A   .14C                        0 5299 A   
.14D                        0 51F3 A   .14E                        0 5292 A   
.14F                        0 5282 A   .15                         0 36F2 A   
.150                        0 5289 A   .151                        0 5210 A   
.152                        0 5272 A   .153                        0 525B A   
.154                        0 5282 A   .155                        0 5292 A   
.156                        0 52A3 A   .157                        0 54B5 A   
.158                        0 54A5 A   .159                        0 54AC A   
.15A                        0 52F9 A   .15B                        0 531D A   
.15C                        0 5314 A   .15D                        0 53DE A   
.15E                        0 532B A   .15F                        0 5346 A   
.16                         0 370B A   .160                        0 5334 A   
.161                        0 534B A   .162                        0 53C8 A   
.163                        0 53BA A   .164                        0 53C1 A   
.165                        0 5352 A   .166                        0 53B0 A   
.167                        0 5369 A   .168                        0 5392 A   
.169                        0 5372 A   .16A                        0 53B0 A   
.16B                        0 53C8 A   .16C                        0 54A5 A   
.16D                        0 54A5 A   .16E                        0 549C A   
.16F                        0 53E1 A   .17                         0 3722 A   
.170                        0 53FC A   .171                        0 53EA A   
.172                        0 5401 A   .173                        0 5482 A   
.174                        0 5474 A   .175                        0 547B A   
.176                        0 5408 A   .177                        0 546A A   
.178                        0 541F A   .179                        0 544A A   
.17A                        0 5428 A   .17B                        0 546A A   
.17C                        0 5482 A   .17D                        0 54A5 A   
.17E                        0 54B5 A   .17F                        0 5589 A   
.18                         0 3730 A   .180                        0 5579 A   
.181                        0 5580 A   .182                        0 54FF A   
.183                        0 5579 A   .184                        0 556B A   
.185                        0 5572 A   .186                        0 5525 A   
.187                        0 5547 A   .188                        0 5541 A   
.189                        0 5579 A   .18A                        0 5589 A   
.18B                        0 55BD A   .18C                        0 55B9 A   
.18D                        0 568A A   .18E                        0 5620 A   
.18F                        0 577E A   .19                         0 376B A   
.190                        0 577E A   .191                        0 5766 A   
.192                        0 56BF A   .193                        0 575F A   
.195                        0 574B A   .196                        0 56D3 A   
.197                        0 56D3 A   .198                        0 56FD A   
.199                        0 5726 A   .19A                        0 577E A   
.19B                        0 5772 A   .19C                        0 57B2 A   
.19D                        0 57AE A   .19E                        0 5881 A   
.19F                        0 5813 A   .1A                         0 37A5 A   
.1A0                        0 587E A   .1A1                        0 5872 A   
.1A2                        0 5849 A   .1A3                        0 587E A   
.1A4                        0 5974 A   .1A5                        0 5974 A   
.1A6                        0 595C A   .1A7                        0 58B6 A   
.1A8                        0 5955 A   .1AA                        0 5941 A   
.1AB                        0 58CA A   .1AC                        0 58CA A   
.1AD                        0 58F3 A   .1AE                        0 591C A   
.1AF                        0 5974 A   .1B                         0 37BA A   
.1B0                        0 5968 A   .1B1                        0 5A20 A   
.1B2                        0 5A1C A   .1B3                        0 5A3A A   
.1B4                        0 5A36 A   .1B5                        0 5C88 A   
.1B7                        0 5C72 A   .1B8                        0 5A4F A   
.1B9                        0 5A4F A   .1BA                        0 5AD0 A   
.1BB                        0 5AC2 A   .1BC                        0 5AF5 A   
.1BD                        0 5B27 A   .1BE                        0 5B0B A   
.1BF                        0 5B41 A   .1C                         0 37DA A   
.1C0                        0 5B53 A   .1C1                        0 5B4A A   
.1C2                        0 5BBF A   .1C3                        0 5B79 A   
.1C4                        0 5BFF A   .1C5                        0 5C13 A   
.1C6                        0 5C08 A   .1C7                        0 5C29 A   
.1C8                        0 5C3E A   .1C9                        0 5CC2 A   
.1CA                        0 5CBE A   .1CB                        0 5CDC A   
.1CC                        0 5CD8 A   .1CD                        0 5E72 A   
.1CF                        0 5E5A A   .1D                         0 37FA A   
.1D0                        0 5CF1 A   .1D1                        0 5CF1 A   
.1D2                        0 5D85 A   .1D3                        0 5D77 A   
.1D4                        0 5D7E A   .1D5                        0 5D33 A   
.1D6                        0 5D77 A   .1D7                        0 5D63 A   
.1D8                        0 5D85 A   .1D9                        0 5D88 A   
.1DA                        0 5DB4 A   .1DB                        0 5DAB A   
.1DC                        0 5E01 A   .1DD                        0 5DDC A   
.1DE                        0 5E22 A   .1DF                        0 5E24 A   
.1E                         0 3817 A   .1E0                        0 5E53 A   
.1E1                        0 5EB2 A   .1E2                        0 5EA1 A   
.1E3                        0 5EDC A   .1E4                        0 5ED8 A   
.1E5                        0 6138 A   .1E7                        0 6117 A   
.1E8                        0 5F2D A   .1E9                        0 5F30 A   
.1EA                        0 5F3E A   .1EB                        0 5F37 A   
.1EC                        0 5F41 A   .1ED                        0 5F49 A   
.1EE                        0 5F53 A   .1EF                        0 5FA0 A   
.1F                         0 3832 A   .1F0                        0 5F95 A   
.1F1                        0 5F53 A   .1F2                        0 5FA0 A   
.1F3                        0 5FA3 A   .1F4                        0 603D A   
.1F5                        0 5FBB A   .1F6                        0 603A A   
.1F7                        0 6017 A   .1F8                        0 610E A   
.1F9                        0 610E A   .1FB                        0 60FA A   
.1FC                        0 6083 A   .1FD                        0 6083 A   
.1FE                        0 60AC A   .1FF                        0 60D5 A   
.20                         0 384F A   .200                        0 614E A   
.201                        0 6142 A   .202                        0 61C8 A   
.203                        0 6158 A   .204                        0 6198 A   
.205                        0 616E A   .206                        0 61BF A   
.207                        0 6575 A   .208                        0 6564 A   
.209                        0 656B A   .20A                        0 64AD A   
.20B                        0 6520 A   .20C                        0 651A A   
.20D                        0 6575 A   .20E                        0 6656 A   
.20F                        0 6646 A   .21                         0 385E A   
.210                        0 666E A   .211                        0 67B3 A   
.212                        0 67A4 A   .213                        0 67AB A   
.214                        0 6767 A   .215                        0 67B3 A   
.216                        0 67C8 A   .217                        0 67BD A   
.218                        0 684C A   .219                        0 683D A   
.21A                        0 6844 A   .21B                        0 6803 A   
.21C                        0 684C A   .21D                        0 685F A   
.21E                        0 6856 A   .21F                        0 68DD A   
.22                         0 3999 A   .220                        0 68CE A   
.221                        0 68D5 A   .222                        0 689A A   
.223                        0 68DD A   .224                        0 68F0 A   
.225                        0 68E7 A   .226                        0 697B A   
.227                        0 696C A   .228                        0 6973 A   
.229                        0 6938 A   .22A                        0 697B A   
.22B                        0 698E A   .22C                        0 6985 A   
.22D                        0 6B10 A   .22F                        0 6AEB A   
.230                        0 69A8 A   .231                        0 69DF A   
.232                        0 6A16 A   .233                        0 6A39 A   
.234                        0 6A5C A   .235                        0 6A7F A   
.236                        0 6AA1 A   .237                        0 6AC3 A   
.238                        0 6AE5 A   .239                        0 6B0E A   
.23A                        0 6AFE A   .23B                        0 6C80 A   
.23C                        0 6C6E A   .23D                        0 6D0A A   
.23E                        0 6CFE A   .23F                        0 6CAF A   
.24                         0 3945 A   .240                        0 6CE2 A   
.241                        0 6CCD A   .242                        0 6D0A A   
.243                        0 6D22 A   .244                        0 6D13 A   
.245                        0 6EAD A   .246                        0 6EA4 A   
.247                        0 6EBF A   .248                        0 6EB6 A   
.249                        0 6ED1 A   .24A                        0 6EC8 A   
.24B                        0 7184 A   .24C                        0 6F1E A   
.24D                        0 7009 A   .24E                        0 6FFA A   
.24F                        0 7001 A   .25                         0 3864 A   
.250                        0 6FCE A   .251                        0 7009 A   
.252                        0 7077 A   .253                        0 7068 A   
.254                        0 706F A   .255                        0 703C A   
.256                        0 7077 A   .257                        0 70CA A   
.258                        0 70BB A   .259                        0 70C2 A   
.25A                        0 707E A   .25B                        0 70CA A   
.25C                        0 7115 A   .25D                        0 7106 A   
.25E                        0 710D A   .25F                        0 70DA A   
.26                         0 3864 A   .260                        0 7115 A   
.261                        0 73FF A   .262                        0 718F A   
.263                        0 7330 A   .264                        0 7321 A   
.265                        0 7328 A   .266                        0 72F9 A   
.267                        0 7330 A   .268                        0 74BF A   
.269                        0 740A A   .26A                        0 74A9 A   
.26B                        0 749A A   .26C                        0 74A1 A   
.26D                        0 747B A   .26E                        0 74A9 A   
.26F                        0 7781 A   .27                         0 388D A   
.270                        0 74D7 A   .271                        0 7546 A   
.272                        0 7537 A   .273                        0 753E A   
.274                        0 750A A   .275                        0 7546 A   
.276                        0 75CB A   .277                        0 75BC A   
.278                        0 75C3 A   .279                        0 7587 A   
.27A                        0 75B5 A   .27B                        0 758F A   
.27C                        0 75CB A   .27D                        0 75ED A   
.27E                        0 75E5 A   .27F                        0 768E A   
.28                         0 388D A   .280                        0 767F A   
.281                        0 7686 A   .282                        0 764A A   
.283                        0 768E A   .284                        0 76E7 A   
.285                        0 76D8 A   .286                        0 76DF A   
.287                        0 76AB A   .288                        0 76E7 A   
.289                        0 79FC A   .28A                        0 778C A   
.28B                        0 792D A   .28C                        0 791E A   
.28D                        0 7925 A   .28E                        0 78F6 A   
.28F                        0 792D A   .29                         0 38A2 A   
.290                        0 7A9D A   .291                        0 7A07 A   
.292                        0 7A89 A   .293                        0 7A7A A   
.294                        0 7A81 A   .295                        0 7A5A A   
.296                        0 7A89 A   .297                        0 7ADF A   
.298                        0 7AD1 A   .299                        0 7AD8 A   
.29A                        0 7AB5 A   .29B                        0 7AD1 A   
.29C                        0 7AC9 A   .29D                        0 7ADF A   
.29E                        0 7D58 A   .29F                        0 7D42 A   
.2A                         0 38A2 A   .2A0                        0 7C3E A   
.2A1                        0 7C53 A   .2A2                        0 7C45 A   
.2A3                        0 7D3B A   .2A4                        0 7D2B A   
.2A5                        0 7C5C A   .2A6                        0 7C8B A   
.2A7                        0 7C6A A   .2A8                        0 7C63 A   
.2A9                        0 7D29 A   .2AA                        0 7D29 A   
.2AB                        0 7C94 A   .2AC                        0 7CB8 A   
.2AD                        0 7CB2 A   .2AE                        0 7D24 A   
.2AF                        0 7D15 A   .2B                         0 38B7 A   
.2B0                        0 7D1C A   .2B1                        0 7CCB A   
.2B2                        0 7CFD A   .2B3                        0 7CEA A   
.2B4                        0 7D0E A   .2B5                        0 7D24 A   
.2B6                        0 7D3B A   .2B7                        0 7D58 A   
.2B8                        0 9306 A   .2B9                        0 92FB A   
.2BA                        0 92B8 A   .2BB                        0 92F2 A   
.2BC                        0 92C2 A   .2BD                        0 92D2 A   
.2BE                        0 92C9 A   .2BF                        0 92F0 A   
.2C                         0 38B7 A   .2C0                        0 92E7 A   
.2C1                        0 92DE A   .2C2                        0 92F0 A   
.2C3                        0 92FB A   .2C4                        0 9306 A   
.2C5                        0 9421 A   .2C6                        0 941A A   
.2C7                        0 93FA A   .2C8                        0 93F2 A   
.2C9                        0 93EA A   .2CA                        0 93E2 A   
.2CB                        0 9412 A   .2CC                        0 940A A   
.2CD                        0 9402 A   .2CE                        0 94E5 A   
.2CF                        0 949A A   .2D                         0 38CC A   
.2D0                        0 94FD A   .2D1                        0 9597 A   
.2D2                        0 9589 A   .2D3                        0 94FD A   
.2D4                        0 957B A   .2D5                        0 954F A   
.2D6                        0 9545 A   .2D7                        0 9536 A   
.2D8                        0 957B A   .2D9                        0 9597 A   
.2DA                        0 95EE A   .2DB                        0 95F0 A   
.2DC                        0 9713 A   .2DD                        0 961A A   
.2DE                        0 9691 A   .2DF                        0 9689 A   
.2E                         0 38DB A   .2E0                        0 9681 A   
.2E1                        0 9677 A   .2E2                        0 96B0 A   
.2E3                        0 969F A   .2E4                        0 9713 A   
.2E5                        0 9743 A   .2E6                        0 9745 A   
.2E7                        0 9755 A   .2E8                        0 9751 A   
.2E9                        0 9757 A   .2EA                        0 9769 A   
.2EB                        0 9765 A   .2EC                        0 976B A   
.2ED                        0 97A2 A   .2EE                        0 977F A   
.2EF                        0 9847 A   .2F                         0 38F9 A   
.2F0                        0 97BE A   .2F1                        0 97D9 A   
.2F2                        0 97D0 A   .2F3                        0 985B A   
.2F4                        0 985B A   .2F5                        0 9855 A   
.2F6                        0 98DF A   .2F7                        0 98DB A   
.2F8                        0 9929 A   .2F9                        0 991A A   
.2FA                        0 9921 A   .2FB                        0 98E7 A   
.2FC                        0 991A A   .2FD                        0 98EF A   
.2FE                        0 9929 A   .2FF                        0 9971 A   
.3                          0 3B41 A   .30                         0 3907 A   
.300                        0 9953 A   .301                        0 9A56 A   
.302                        0 9A56 A   .303                        0 9A47 A   
.304                        0 9A4E A   .305                        0 9A1B A   
.306                        0 9A56 A   .307                        0 9B2F A   
.309                        0 9B1D A   .30A                        0 9A74 A   
.30B                        0 9A91 A   .30C                        0 9A88 A   
.30D                        0 9AA3 A   .30E                        0 9AD9 A   
.30F                        0 9ACD A   .31                         0 3915 A   
.310                        0 9ADB A   .311                        0 9B11 A   
.312                        0 9B05 A   .313                        0 9B13 A   
.32                         0 3923 A   .33                         0 399C A   
.34                         0 39E9 A   .36                         0 39DD A   
.37                         0 39A1 A   .38                         0 39A6 A   
.39                         0 39C4 A   .3A                         0 39EC A   
.3B                         0 3A20 A   .3C                         0 3A3C A   
.3D                         0 3A81 A   .3F                         0 3A75 A   
.4                          0 3669 A   .40                         0 3A42 A   
.41                         0 3A51 A   .42                         0 3A62 A   
.43                         0 3A8E A   .44                         0 3B37 A   
.45                         0 3A97 A   .46                         0 3B35 A   
.48                         0 3B0A A   .49                         0 3A9C A   
.4A                         0 3AAF A   .4B                         0 3AC4 A   
.4C                         0 3AD9 A   .4D                         0 3AF2 A   
.4E                         0 3AFA A   .4F                         0 3B02 A   
.5                          0 36C4 A   .50                         0 3B33 A   
.51                         0 3B1D A   .52                         0 3B3D A   
.53                         0 3B8E A   .54                         0 3B54 A   
.55                         0 3BB5 A   .56                         0 3BAD A   
.57                         0 3BD6 A   .58                         0 3BD2 A   
.59                         0 3DA9 A   .5A                         0 3C64 A   
.5B                         0 3CD6 A   .5D                         0 3CC6 A   
.5E                         0 3CA4 A   .5F                         0 3CAC A   
.60                         0 3CB4 A   .61                         0 3CBC A   
.62                         0 3D93 A   .63                         0 3D82 A   
.64                         0 3D89 A   .65                         0 3CDE A   
.66                         0 3D5B A   .67                         0 3CFF A   
.68                         0 3D82 A   .69                         0 3D93 A   
.6A                         0 3DA9 A   .6B                         0 3D9C A   
.6C                         0 3DF9 A   .6D                         0 3DEA A   
.6E                         0 3DF1 A   .6F                         0 3DB9 A   
.7                          0 369F A   .70                         0 3DF9 A   
.71                         0 3E7E A   .72                         0 3E6F A   
.73                         0 3E76 A   .74                         0 3E37 A   
.75                         0 3E7E A   .76                         0 3EC5 A   
.77                         0 3EB6 A   .78                         0 3EBD A   
.79                         0 3E85 A   .7A                         0 3EC5 A   
.7B                         0 3EE0 A   .7C                         0 3EDB A   
.7D                         0 3EE3 A   .7E                         0 3F3A A   
.7F                         0 3F2B A   .8                          0 367B A   
.80                         0 3F32 A   .81                         0 3EFA A   
.82                         0 3F3A A   .83                         0 403A A   
.84                         0 3F79 A   .85                         0 3FB5 A   
.86                         0 3F8F A   .87                         0 403A A   
.88                         0 3FE0 A   .89                         0 3FBC A   
.8A                         0 403A A   .8B                         0 4177 A   
.8C                         0 4169 A   .8D                         0 4199 A   
.8E                         0 418A A   .8F                         0 4191 A   
.9                          0 3687 A   .90                         0 417E A   
.91                         0 4199 A   .92                         0 41C5 A   
.93                         0 41B7 A   .94                         0 422B A   
.96                         0 421C A   .97                         0 41DD A   
.98                         0 41F2 A   .99                         0 4206 A   
.9A                         0 42F9 A   .9B                         0 42A9 A   
.9C                         0 42A2 A   .9D                         0 429B A   
.9E                         0 4293 A   .9F                         0 42D2 A   
.A                          0 3687 A   .A0                         0 42BD A   
.A1                         0 42E6 A   .A2                         0 435B A   
.A3                         0 4357 A   .A4                         0 4446 A   
.A5                         0 438E A   .A6                         0 447E A   
.A7                         0 447A A   .A8                         0 44D0 A   
.A9                         0 44CC A   .AA                         0 44FA A   
.AB                         0 44F6 A   .AC                         0 4592 A   
.AD                         0 4524 A   .AE                         0 45B6 A   
.AF                         0 46DE A   .B                          0 3687 A   
.B0                         0 46CF A   .B1                         0 46D6 A   
.B2                         0 4693 A   .B3                         0 46DE A   
.B4                         0 4769 A   .B5                         0 475A A   
.B6                         0 4761 A   .B7                         0 4730 A   
.B8                         0 4769 A   .B9                         0 4889 A   
.BA                         0 4878 A   .BB                         0 487F A   
.BC                         0 47D7 A   .BD                         0 4836 A   
.BE                         0 47E0 A   .BF                         0 4878 A   
.C                          0 3687 A   .C0                         0 4889 A   
.C1                         0 493E A   .C2                         0 492F A   
.C3                         0 4936 A   .C4                         0 48C1 A   
.C5                         0 4902 A   .C6                         0 48CA A   
.C7                         0 492F A   .C8                         0 493E A   
.C9                         0 4954 A   .CA                         0 4950 A   
.CB                         0 4960 A   .CC                         0 495C A   
.CD                         0 498A A   .CE                         0 4986 A   
.CF                         0 49C7 A   .D                          0 3687 A   
.D0                         0 49B6 A   .D1                         0 49D8 A   
.D2                         0 49D1 A   .D3                         0 49E9 A   
.D4                         0 49E2 A   .D5                         0 49F8 A   
.D6                         0 49F3 A   .D7                         0 4C6F A   
.D8                         0 4A1F A   .D9                         0 4AA9 A   
.DA                         0 4A74 A   .DB                         0 4A62 A   
.DC                         0 4A50 A   .DD                         0 4A49 A   
.DE                         0 4A42 A   .DF                         0 4C6C A   
.E                          0 3687 A   .E0                         0 4B8E A   
.E1                         0 4AB2 A   .E2                         0 4B8B A   
.E3                         0 4B78 A   .E4                         0 4B7F A   
.E5                         0 4ABD A   .E6                         0 4B1D A   
.E7                         0 4ADB A   .E8                         0 4AD4 A   
.E9                         0 4B78 A   .EA                         0 4B8B A   
.EB                         0 4C6C A   .EC                         0 4C6C A   
.ED                         0 4C59 A   .EE                         0 4C60 A   
.EF                         0 4B99 A   .F                          0 3687 A   
.F0                         0 4BF2 A   .F1                         0 4BB0 A   
.F2                         0 4BA9 A   .F3                         0 4C4D A   
.F4                         0 4C59 A   .F5                         0 4C57 A   
.F6                         0 4C6C A   .F7                         0 5044 A   
.F8                         0 5044 A   .FA                         0 5032 A   
.FB                         0 4CA1 A   .FC                         0 4CA1 A   
.FD                         0 4D33 A   .FE                         0 4CDE A   
.FF                         0 4CCC A   _biosfn_alternate_prtsc     0 6B71 A   
_biosfn_enable_video_refre+ 0 6C4C A   _biosfn_get_cursor_pos      0 444A A   
_biosfn_get_font_info       0 6997 A   _biosfn_load_gfx_8_14_char+ 0 6994 A   
_biosfn_load_gfx_8_16_char+ 0 6996 A   _biosfn_load_gfx_8_8_chars  0 6992 A   
_biosfn_load_gfx_8_8_dd_ch+ 0 6995 A   _biosfn_load_gfx_user_char+ 0 6993 A   
_biosfn_load_text_8_14_pat  0 67CC A   _biosfn_load_text_8_16_pat  0 6901 A   
_biosfn_load_text_8_8_pat   0 6863 A   _biosfn_load_text_user_pat  0 6730 A   
_biosfn_perform_gray_scale+ 0 6489 A   _biosfn_read_char_attr      0 5048 A   
_biosfn_read_pixel          0 5C8C A   _biosfn_read_state_info     0 6D59 A   
_biosfn_read_video_state_s+ 0 6ED8 A   _biosfn_read_video_state_s+ 0 6E91 A   
_biosfn_restore_video_stat+ 0 74C6 A   _biosfn_save_video_state    0 6EFC A   
_biosfn_scroll              0 4942 A   _biosfn_set_active_page     0 44BF A   
_biosfn_set_cursor_pos      0 434A A   _biosfn_set_cursor_shape    0 422F A   
_biosfn_set_video_mode      0 3B97 A   _biosfn_switch_video_inter+ 0 6C4B A   
_biosfn_write_char_attr     0 558D A   _biosfn_write_char_only     0 5782 A   
_biosfn_write_pixel         0 59F0 A   _biosfn_write_string        0 6C4D A   
_biosfn_write_teletype      0 5E94 A   _dac_regs                   0 028D A   
_dispi_get_max_bpp          0 90B7 A   _dispi_get_max_xres         0 9095 A   
_dispi_set_bank             0 90F7 A   _dispi_set_bank_farcall     0 9115 A   
_dispi_set_bpp              0 905E A   _dispi_set_enable           0 90D9 A   
_dispi_set_xres             0 9029 A   _dispi_set_yres             0 9040 A   
_display_info               0 3617 A   _display_splash_screen      0 3616 A   
_display_string             0 3635 A   _fail                       0 9C37 A   
_find_vga_entry             0 7AA4 A   _get_SS                     0 7C1C A E 
_get_font_access            0 6590 A   _inb                        0 7BE6 A E 
_int10_func                 0 365C A   _inw                        0 7BF1 A E 
_line_to_vpti               0 027D A   _memcpyb                    0 7B30 A   
_memcpyw                    0 7B60 A   _memsetb                    0 7AE6 A   
_memsetw                    0 7B0B A   _mode_info_find_mode        0 92AB A   
_mode_info_list             0 7D5C A   _no_vbebios_info_string     0 8EA6 A   
_outb                       0 7BFC A E _outw                       0 7C0C A E 
_palette0                   0 0A11 A   _palette1                   0 0AD1 A   
_palette2                   0 0B91 A   _palette3                   0 0C51 A   
_printf                     0 7C1F A E _read_byte                  0 7B90 A   
_read_word                  0 7BA3 A   _release_font_access        0 65B3 A   
_set_scan_lines             0 65E7 A   _size64                     0 936A A   
_static_functionality       0 0F51 A   _vbe_biosfn_read_video_sta+ 0 9893 A E 
_vbe_biosfn_restore_video_+ 0 992D A E _vbe_biosfn_return_control+ 0 9385 A E 
_vbe_biosfn_return_mode_in+ 0 95C9 A E _vbe_biosfn_save_restore_s+ 0 9A5A A E 
_vbe_biosfn_save_video_sta+ 0 989B A E _vbe_biosfn_set_get_palett+ 0 9C21 A E 
_vbe_biosfn_set_mode        0 9726 A E _vbe_has_vbe_display        0 930C A   
_vbebios_copyright          0 8DD4 A   _vbebios_info_string        0 8E80 A   
_vbebios_product_name       0 8E32 A   _vbebios_product_revision   0 8E4B A   
_vbebios_vendor_name        0 8E1A A   _vga_compat_setup           0 91D4 A   
_vga_modes                  0 01FD A   _vgafont14                  0 1761 A   
_vgafont14alt               0 3561 A   _vgafont16                  0 2561 A   
_vgafont16alt               0 3562 A   _vgafont8                   0 0F61 A   
_vgamem_copy_cga            0 477B A   _vgamem_copy_pl4            0 462E A   
_vgamem_fill_cga            0 488D A   _vgamem_fill_pl4            0 46F0 A   
_video_param_table          0 0291 A   _video_save_pointer_table   0 35FA A   
_write_byte                 0 7BB6 A   _write_gfx_char_cga         0 52B6 A   
_write_gfx_char_lin         0 54B9 A   _write_gfx_char_pl4         0 5143 A   
_write_word                 0 7BCE A   biosfn_enable_cursor_emula+ 0 6C29 A   
biosfn_enable_default_pale+ 0 6BC5 A   biosfn_enable_grayscale_su+ 0 6C05 A   
biosfn_enable_video_addres+ 0 6BE7 A   biosfn_get_all_palette_reg  0 632E A   
biosfn_get_ega_info         0 6B4E A   biosfn_get_single_palette_+ 0 62FC A   
biosfn_get_video_mode       0 61F9 A   biosfn_group_0B             0 5978 A   
biosfn_group_10             0 6220 A   biosfn_group_1A             0 6D26 A   
biosfn_read_all_dac_reg     0 640E A   biosfn_read_display_code    0 6D2F A   
biosfn_read_overscan_borde+ 0 6320 A   biosfn_read_pel_mask        0 6441 A   
biosfn_read_single_dac_reg  0 63F3 A   biosfn_read_video_dac_stat+ 0 644C A   
biosfn_select_vert_res      0 6B72 A   biosfn_select_video_dac_co+ 0 63B0 A   
biosfn_set_all_dac_reg      0 6388 A   biosfn_set_all_palette_reg  0 62A9 A   
biosfn_set_border_color     0 5983 A   biosfn_set_display_code     0 6D44 A   
biosfn_set_overscan_border+ 0 62A1 A   biosfn_set_palette          0 59C2 A   
biosfn_set_pel_mask         0 6436 A   biosfn_set_single_dac_reg   0 636F A   
biosfn_set_single_palette_+ 0 6287 A   biosfn_set_text_block_spec+ 0 68F4 A   
biosfn_toggle_intensity     0 62D6 A   bit8_clear                  0 921C A   
bit9_clear                  0 9223 A   bpp4_mode                   0 8FBD A   
dispi_get_bank              0 9107 A   dispi_get_bpp               0 907C A   
dispi_get_enable            0 90E9 A   dispi_get_id                0 900B A   
dispi_get_virt_height       0 91C6 A   dispi_get_virt_width        0 91B8 A   
dispi_get_x_offset          0 915C A   dispi_get_y_offset          0 917A A   
dispi_set_bank_farcall_err+ 0 9147 A   dispi_set_bank_farcall_get  0 9139 A   
dispi_set_id                0 9019 A   dispi_set_virt_width        0 91A5 A   
dispi_set_x_offset          0 914C A   dispi_set_y_offset          0 916A A   
get_bpp_noinc               0 9093 A   get_dac_16_page             0 647C A   
get_dac_palette_format      0 9C0D A   get_display_start           0 9BDA A   
get_display_window          0 9B62 A   get_logical_scan_line_leng+ 0 9B9A A   
get_palette_loop            0 6336 A   idiv_u                      0 65E2 A   
illegal_window              0 8F50 A   init_bios_area              0 35C2 A   
init_vga_card               0 3563 A   int10_end                   0 01FB A   
int10_group_10_unknown      0 6286 A   int10_normal                0 01ED A   
int10_test_0B               0 014A A   int10_test_1001             0 6226 A   
int10_test_1002             0 622C A   int10_test_1003             0 6232 A   
int10_test_1007             0 6239 A   int10_test_1008             0 6240 A   
int10_test_1009             0 6247 A   int10_test_1010             0 624E A   
int10_test_1012             0 6255 A   int10_test_1013             0 625C A   
int10_test_1015             0 6263 A   int10_test_1017             0 626A A   
int10_test_1018             0 6271 A   int10_test_1019             0 6278 A   
int10_test_101A             0 627F A   int10_test_101B             0 01A3 A   
int10_test_1103             0 0155 A   int10_test_12               0 0160 A   
int10_test_1A               0 013F A   int10_test_4F               0 01B2 A   
int10_test_BL30             0 0170 A   int10_test_BL31             0 017B A   
int10_test_BL32             0 0185 A   int10_test_BL33             0 018F A   
int10_test_BL34             0 0199 A   int10_test_vbe_05           0 01C0 A   
int10_test_vbe_06           0 01C9 A   int10_test_vbe_07           0 01D2 A   
int10_test_vbe_08           0 01DB A   int10_test_vbe_0A           0 01E4 A   
memcpyb_end                 0 7B58 A   memcpyw_end                 0 7B88 A   
memsetb_end                 0 7B05 A   memsetw_end                 0 7B2A A   
mode_ega_color              0 6B6E A   msg_vbe_init                0 8ECA A   
msg_vga_init                0 357F A   no_4bpp_1                   0 9B92 A   
no_4bpp_2                   0 9BAF A   no_actl_reg1                0 62A0 A   
no_actl_reg2                0 631F A   no_vbe_flag                 0 935F A   
no_vbe_interface            0 9343 A   no_vbe_mode                 0 9885 A   
read_dac_loop               0 641F A   set_actl_normal             0 63EC A   
set_cga_palette_loop        0 59CF A   set_dac_16_page             0 63E6 A   
set_dac_loop                0 6399 A   set_dac_mode                0 9C0A A   
set_dac_page                0 63D3 A   set_dac_palette_format      0 9BF5 A   
set_display_start           0 9BCC A   set_display_window          0 9B52 A   
set_intensity_loop          0 59A1 A   set_logical_scan_line_byte+ 0 9B81 A   
set_logical_scan_line_pixe+ 0 9B97 A   set_low_border              0 599B A   
set_normal_dac              0 9C07 A   set_palette_loop            0 62B8 A   
set_retcode                 0 6BBE A   set_vert_res                0 6BB4 A   
set_width_svga              0 9196 A   set_xy_regs                 0 8FC9 A   
vbe_03_ok                   0 988E A   vbe_05_failed               0 9B6B A   
vbe_08_ok                   0 9C19 A   vbe_08_unsupported          0 9C1D A   
vbe_biosfn_display_window_+ 0 9B42 A   vbe_biosfn_return_current_+ 0 986E A   
vbe_biosfn_return_protecte+ 0 9C22 A   vbe_biosfn_set_get_dac_pal+ 0 9BEA A   
vbe_biosfn_set_get_display+ 0 9BBC A   vbe_biosfn_set_get_logical+ 0 9B6F A   
vbe_display_info            0 934D A   vbe_init                    0 931F A   
vert_res_200                0 6BAA A   vert_res_350                0 6BA0 A   
vert_res_400                0 6B94 A   vesa_pm_end                 0 900B A   
vesa_pm_io_ports_table      0 8F12 A   vesa_pm_set_display_start   0 8F55 A   
vesa_pm_set_display_start1  0 8F64 A   vesa_pm_set_display_window+ 0 8F29 A   
vesa_pm_set_window          0 8F1E A   vesa_pm_start               0 8F0A A   
vesa_pm_unimplemented       0 9006 A   vga_compat_end              0 92A9 A   
vga_set_virt_width          0 9188 A   vgabios_copyright           0 0052 A   
vgabios_date                0 0044 A   vgabios_end                 0 9C4D A   
vgabios_entry_point         0 0003 A   vgabios_init_func           0 0109 A   
vgabios_int10_handler       0 0133 A   vgabios_license             0 007E A   
vgabios_name                0 0022 A   vgabios_start               0 0000 A   
vgabios_version             0 0038 A   vgabios_website             0 00B3 A   

00000 errors
00000 warnings
