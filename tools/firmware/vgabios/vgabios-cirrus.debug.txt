00001                                           ! 1 
00002                                           ! 1 # 1 "_vgabios-cirrus-debug_.c"
00003                                           ! 1 typedef unsigned char Bit8u;
00004                                           !BCC_EOS
00005                                           ! 2 typedef unsigned short Bit16u;
00006                                           !BCC_EOS
00007                                           ! 3 typedef unsigned long Bit32u;
00008                                           !BCC_EOS
00009                                           ! 4 typedef unsigned short Boolean;
00010                                           !BCC_EOS
00011                                           ! 5 static Bit8u read_byte();
00012                                           !BCC_EOS
00013                                           ! 6 static Bit16u read_word();
00014                                           !BCC_EOS
00015                                           ! 7 static void write_byte();
00016                                           !BCC_EOS
00017                                           ! 8 static void write_word();
00018                                           !BCC_EOS
00019                                           ! 9 static Bit8u inb();
00020                                           !BCC_EOS
00021                                           ! 10 static Bit16u inw();
00022                                           !BCC_EOS
00023                                           ! 11 static void outb();
00024                                           !BCC_EOS
00025                                           ! 12 static void outw();
00026                                           !BCC_EOS
00027                                           ! 13 static Bit16u get_SS();
00028                                           !BCC_EOS
00029                                           ! 14 static void printf();
00030                                           !BCC_EOS
00031                                           ! 15 static void unimplemented();
00032                                           !BCC_EOS
00033                                           ! 16 static void unknown();
00034                                           !BCC_EOS
00035                                           ! 17 static Bit8u find_vga_entry();
00036                                           !BCC_EOS
00037                                           ! 18 static void memsetb();
00038                                           !BCC_EOS
00039                                           ! 19 static void memsetw();
00040                                           !BCC_EOS
00041                                           ! 20 static void memcpyb();
00042                                           !BCC_EOS
00043                                           ! 21 static void memcpyw();
00044                                           !BCC_EOS
00045                                           ! 22 static void biosfn_set_video_mode();
00046                                           !BCC_EOS
00047                                           ! 23 static void biosfn_set_cursor_shape();
00048                                           !BCC_EOS
00049                                           ! 24 static void biosfn_set_cursor_pos();
00050                                           !BCC_EOS
00051                                           ! 25 static void biosfn_get_cursor_pos();
00052                                           !BCC_EOS
00053                                           ! 26 static void biosfn_set_active_page();
00054                                           !BCC_EOS
00055                                           ! 27 static void biosfn_scroll();
00056                                           !BCC_EOS
00057                                           ! 28 static void biosfn_read_char_attr();
00058                                           !BCC_EOS
00059                                           ! 29 static void biosfn_write_char_attr();
00060                                           !BCC_EOS
00061                                           ! 30 static void biosfn_write_char_only();
00062                                           !BCC_EOS
00063                                           ! 31 static void biosfn_write_pixel();
00064                                           !BCC_EOS
00065                                           ! 32 static void biosfn_read_pixel();
00066                                           !BCC_EOS
00067                                           ! 33 static void biosfn_write_teletype();
00068                                           !BCC_EOS
00069                                           ! 34 static void biosfn_perform_gray_scale_summing();
00070                                           !BCC_EOS
00071                                           ! 35 static void biosfn_load_text_user_pat();
00072                                           !BCC_EOS
00073                                           ! 36 static void biosfn_load_text_8_14_pat();
00074                                           !BCC_EOS
00075                                           ! 37 static void biosfn_load_text_8_8_pat();
00076                                           !BCC_EOS
00077                                           ! 38 static void biosfn_load_text_8_16_pat();
00078                                           !BCC_EOS
00079                                           ! 39 static void biosfn_load_gfx_8_8_chars();
00080                                           !BCC_EOS
00081                                           ! 40 static void biosfn_load_gfx_user_chars();
00082                                           !BCC_EOS
00083                                           ! 41 static void biosfn_load_gfx_8_14_chars();
00084                                           !BCC_EOS
00085                                           ! 42 static void biosfn_load_gfx_8_8_dd_chars();
00086                                           !BCC_EOS
00087                                           ! 43 static void biosfn_load_gfx_8_16_chars();
00088                                           !BCC_EOS
00089                                           ! 44 static void biosfn_get_font_info();
00090                                           !BCC_EOS
00091                                           ! 45 static void biosfn_alternate_prtsc();
00092                                           !BCC_EOS
00093                                           ! 46 static void biosfn_switch_video_interface();
00094                                           !BCC_EOS
00095                                           ! 47 static void biosfn_enable_video_refresh_control();
00096                                           !BCC_EOS
00097                                           ! 48 static void biosfn_write_string();
00098                                           !BCC_EOS
00099                                           ! 49 static void biosfn_read_state_info();
00100                                           !BCC_EOS
00101                                           ! 50 static void biosfn_read_video_state_size();
00102                                           !BCC_EOS
00103                                           ! 51 static Bit16u biosfn_save_video_state();
00104                                           !BCC_EOS
00105                                           ! 52 static Bit16u biosfn_restore_video_state();
00106                                           !BCC_EOS
00107                                           ! 53 extern Bit8u video_save_pointer_table[];
00108                                           !BCC_EOS
00109                                           ! 54 #asm
00110                                           !BCC_ASM
00111                                           MACRO SET_INT_VECTOR
00112                                             push ds
00113                                             xor ax, ax
00114                                             mov ds, ax
00115                                             mov ax, ?3
00116                                             mov ?1*4, ax
00117                                             mov ax, ?2
00118                                             mov ?1*4+2, ax
00119                                             pop ds
00120                                           MEND
00121                                           ! 65 endasm
00122                                           !BCC_ENDASM
00123                                           ! 66 #asm
00124                                           !BCC_ASM
00125                                           
00126 0000                                      .rom
00127 0000                                      .org 0
00128                                           use16 386
00129                       00000000            vgabios_start:
00130 0000                        55            .byte 0x55, 0xaa
00131 0002                        40            .byte 0x40
00132                       00000003            vgabios_entry_point:
00133 0003           E9         0121              jmp vgabios_init_func
00134 0018                                      .org 0x18
00135 0018                      010F            .word vgabios_pci_data
00136 001E                                      .org 0x1e
00137 001E                        49            .ascii "IBM"
00138 0021                        00            .byte 0x00
00139                       00000022            vgabios_name:
00140 0022                        50            .ascii "Plex86/Bochs VGABios"
00141 0036                        20            .ascii " (PCI)"
00142 003C                        20            .ascii " "
00143 003D                        00            .byte 0x00
00144                       0000003E            vgabios_version:
00145 003E                        63            .ascii "current-cvs"
00146 0049                        20            .ascii " "
00147                       0000004A            vgabios_date:
00148 004A                        30            .ascii "06 May 2020"
00149 0055                        0A            .byte 0x0a,0x0d
00150 0057                        00            .byte 0x00
00151                       00000058            vgabios_copyright:
00152 0058                        28            .ascii "(C) 2008 the LGPL VGABios developers Team"
00153 0081                        0A            .byte 0x0a,0x0d
00154 0083                        00            .byte 0x00
00155                       00000084            vgabios_license:
00156 0084                        54            .ascii "This VGA/VBE Bios is released under the GNU LGPL"
00157 00B4                        0A            .byte 0x0a,0x0d
00158 00B6                        0A            .byte 0x0a,0x0d
00159 00B8                        00            .byte 0x00
00160                       000000B9            vgabios_website:
00161 00B9                        50            .ascii "Please visit :"
00162 00C7                        0A            .byte 0x0a,0x0d
00163                                           ;;.ascii " . http://www.plex86.org"
00164                                           ;;.byte 0x0a,0x0d
00165 00C9                        20            .ascii " . http://bochs.sourceforge.net"
00166 00E8                        0A            .byte 0x0a,0x0d
00167 00EA                        20            .ascii " . http://www.nongnu.org/vgabios"
00168 010A                        0A            .byte 0x0a,0x0d
00169 010C                        0A            .byte 0x0a,0x0d
00170 010E                        00            .byte 0x00
00171                       0000010F            vgabios_pci_data:
00172 010F                        50            .ascii "PCIR"
00173 0113                      1013            .word 0x1013
00174 0115                      00B8            .word 0x00b8
00175 0117                      0000            .word 0
00176 0119                      0018            .word 0x18
00177 011B                        00            .byte 0
00178 011C                        00            .byte 0x0
00179 011D                      0300            .word 0x300
00180 011F                      0040            .word 0x40
00181 0121                      0001            .word 1
00182 0123                        00            .byte 0
00183 0124                        80            .byte 0x80
00184 0125                      0000            .word 0
00185                                           ;; ============================================================================================
00186                                           ;;
00187                                           ;; Init Entry point
00188                                           ;;
00189                                           ;; ============================================================================================
00190                       00000127            vgabios_init_func:
00191                                           ;; init vga card
00192 0127           E8         3416              call init_vga_card
00193                                           ;; init basic bios vars
00194 012A           E8         3472              call init_bios_area
00195                                           ;; set int10 vect
00196                                             SET_INT_VECTOR(0x10, #0xC000, #vgabios_int10_handler)
 +a   012D           1E                           push ds
 +a   012E           31C0                         xor ax, ax
 +a   0130           8ED8                         mov ds, ax
 +a   0132           B8                   0151    mov ax,  #vgabios_int10_handler
 +a   0135           A3         0040              mov 0x10*4, ax
 +a   0138           B8                   C000    mov ax,  #0xC000
 +a   013B           A3         0042              mov 0x10*4+2, ax
 +a   013E           1F                           pop ds
00197 013F           E8         81CF              call cirrus_init
00198                                           ;; display splash screen
00199 0142           E8         34AE              call _display_splash_screen
00200                                           ;; init video mode and clear the screen
00201 0145           B8                   0003    mov ax,#0x0003
00202 0148           CD                     10    int #0x10
00203                                           ;; show info
00204 014A           E8         34A7              call _display_info
00205                                           ;; show cirrus info
00206 014D           E8         81F8              call cirrus_display_info
00207 0150           CB                           retf
00208                                           ! 150 endasm
00209                                           !BCC_ENDASM
00210                                           ! 151 #asm
00211                                           !BCC_ASM
00212                       00000151            vgabios_int10_handler:
00213 0151           9C                           pushf
00214 0152           80FC                   0F    cmp ah, #0x0f
00215 0155           75           05              jne int10_test_1A
00216 0157           E8         5FAE              call biosfn_get_video_mode
00217 015A           EB           7C              jmp int10_end
00218                       0000015C            int10_test_1A:
00219 015C           80FC                   1A    cmp ah, #0x1a
00220 015F           75           05              jne int10_test_0B
00221 0161           E8         6AD2              call biosfn_group_1A
00222 0164           EB           72              jmp int10_end
00223                       00000166            int10_test_0B:
00224 0166           80FC                   0B    cmp ah, #0x0b
00225 0169           75           05              jne int10_test_1103
00226 016B           E8         571A              call biosfn_group_0B
00227 016E           EB           68              jmp int10_end
00228                       00000170            int10_test_1103:
00229 0170           3D                   1103    cmp ax, #0x1103
00230 0173           75           05              jne int10_test_12
00231 0175           E8         668C              call biosfn_set_text_block_specifier
00232 0178           EB           5E              jmp int10_end
00233                       0000017A            int10_test_12:
00234 017A           80FC                   12    cmp ah, #0x12
00235 017D           75           3C              jne int10_test_101B
00236 017F           80FB                   10    cmp bl, #0x10
00237 0182           75           05              jne int10_test_BL30
00238 0184           E8         68D7              call biosfn_get_ega_info
00239 0187           EB           4F              jmp int10_end
00240                       00000189            int10_test_BL30:
00241 0189           80FB                   30    cmp bl, #0x30
00242 018C           75           05              jne int10_test_BL31
00243 018E           E8         68F1              call biosfn_select_vert_res
00244 0191           EB           45              jmp int10_end
00245                       00000193            int10_test_BL31:
00246 0193           80FB                   31    cmp bl, #0x31
00247 0196           75           05              jne int10_test_BL32
00248 0198           E8         693A              call biosfn_enable_default_palette_loading
00249 019B           EB           3B              jmp int10_end
00250                       0000019D            int10_test_BL32:
00251 019D           80FB                   32    cmp bl, #0x32
00252 01A0           75           05              jne int10_test_BL33
00253 01A2           E8         6952              call biosfn_enable_video_addressing
00254 01A5           EB           31              jmp int10_end
00255                       000001A7            int10_test_BL33:
00256 01A7           80FB                   33    cmp bl, #0x33
00257 01AA           75           05              jne int10_test_BL34
00258 01AC           E8         6966              call biosfn_enable_grayscale_summing
00259 01AF           EB           27              jmp int10_end
00260                       000001B1            int10_test_BL34:
00261 01B1           80FB                   34    cmp bl, #0x34
00262 01B4           75           14              jne int10_normal
00263 01B6           E8         6980              call biosfn_enable_cursor_emulation
00264 01B9           EB           1D              jmp int10_end
00265                       000001BB            int10_test_101B:
00266 01BB           3D                   101B    cmp ax, #0x101b
00267 01BE           74           0A              je int10_normal
00268 01C0           80FC                   10    cmp ah, #0x10
00269 01C3           75           05              jne int10_normal
00270 01C5           E8         5F67              call biosfn_group_10
00271 01C8           EB           0E              jmp int10_end
00272                       000001CA            int10_normal:
00273 01CA           06                           push es
00274 01CB           1E                           push ds
00275 01CC           60                           pusha
00276                                           ;; We have to set ds to access the right data segment
00277 01CD           BB                   C000    mov bx, #0xc000
00278 01D0           8EDB                         mov ds, bx
00279 01D2           E8         3464              call _int10_func
00280 01D5           61                           popa
00281 01D6           1F                           pop ds
00282 01D7           07                           pop es
00283                       000001D8            int10_end:
00284 01D8           9D                           popf
00285 01D9           CF                           iret
00286                                           ! 226 endasm
00287                                           !BCC_ENDASM
00288                                           ! 227 typedef struct
00289                                           ! 228 {Bit8u svgamode;
00290                                           !BCC_EOS
00291                                           ! 229  Bit8u class;
00292                                           !BCC_EOS
00293                                           ! 230  Bit8u memmodel;
00294                                           !BCC_EOS
00295                                           ! 231  Bit8u pixbits;
00296                                           !BCC_EOS
00297                                           ! 232  Bit16u sstart;
00298                                           !BCC_EOS
00299                                           ! 233  Bit8u pelmask;
00300                                           !BCC_EOS
00301                                           ! 234  Bit8u dacmodel;
00302                                           !BCC_EOS
00303                                           ! 235 } VGAMODES;
00304                                           !BCC_EOS
00305                                           ! 236 static VGAMODES vga_modes[15 +1]=
00306                                           ! 237 {
00307                                           
00308                       000001DA            _vga_modes:
00309                                           ! 238  {0x00, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00310 01DA                        00            .byte	0
00311 01DB                        00            .byte	0
00312 01DC                        00            .byte	0
00313 01DD                        04            .byte	4
00314 01DE                      B800            .word	$B800
00315 01E0                        FF            .byte	$FF
00316 01E1                        02            .byte	2
00317                                           ! 239  {0x01, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00318 01E2                        01            .byte	1
00319 01E3                        00            .byte	0
00320 01E4                        00            .byte	0
00321 01E5                        04            .byte	4
00322 01E6                      B800            .word	$B800
00323 01E8                        FF            .byte	$FF
00324 01E9                        02            .byte	2
00325                                           ! 240  {0x02, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00326 01EA                        02            .byte	2
00327 01EB                        00            .byte	0
00328 01EC                        00            .byte	0
00329 01ED                        04            .byte	4
00330 01EE                      B800            .word	$B800
00331 01F0                        FF            .byte	$FF
00332 01F1                        02            .byte	2
00333                                           ! 241  {0x03, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00334 01F2                        03            .byte	3
00335 01F3                        00            .byte	0
00336 01F4                        00            .byte	0
00337 01F5                        04            .byte	4
00338 01F6                      B800            .word	$B800
00339 01F8                        FF            .byte	$FF
00340 01F9                        02            .byte	2
00341                                           ! 242  {0x04, 0x01, 0x02, 2, 0xB800, 0xFF, 0x01},
00342 01FA                        04            .byte	4
00343 01FB                        01            .byte	1
00344 01FC                        02            .byte	2
00345 01FD                        02            .byte	2
00346 01FE                      B800            .word	$B800
00347 0200                        FF            .byte	$FF
00348 0201                        01            .byte	1
00349                                           ! 243  {0x05, 0x01, 0x02, 2, 0xB800, 0xFF, 0x01},
00350 0202                        05            .byte	5
00351 0203                        01            .byte	1
00352 0204                        02            .byte	2
00353 0205                        02            .byte	2
00354 0206                      B800            .word	$B800
00355 0208                        FF            .byte	$FF
00356 0209                        01            .byte	1
00357                                           ! 244  {0x06, 0x01, 0x02, 1, 0xB800, 0xFF, 0x01},
00358 020A                        06            .byte	6
00359 020B                        01            .byte	1
00360 020C                        02            .byte	2
00361 020D                        01            .byte	1
00362 020E                      B800            .word	$B800
00363 0210                        FF            .byte	$FF
00364 0211                        01            .byte	1
00365                                           ! 245  {0x07, 0x00, 0x01, 4, 0xB000, 0xFF, 0x00},
00366 0212                        07            .byte	7
00367 0213                        00            .byte	0
00368 0214                        01            .byte	1
00369 0215                        04            .byte	4
00370 0216                      B000            .word	$B000
00371 0218                        FF            .byte	$FF
00372 0219                        00            .byte	0
00373                                           ! 246  {0x0D, 0x01, 0x04, 4, 0xA000, 0xFF, 0x01},
00374 021A                        0D            .byte	$D
00375 021B                        01            .byte	1
00376 021C                        04            .byte	4
00377 021D                        04            .byte	4
00378 021E                      A000            .word	$A000
00379 0220                        FF            .byte	$FF
00380 0221                        01            .byte	1
00381                                           ! 247  {0x0E, 0x01, 0x04, 4, 0xA000, 0xFF, 0x01},
00382 0222                        0E            .byte	$E
00383 0223                        01            .byte	1
00384 0224                        04            .byte	4
00385 0225                        04            .byte	4
00386 0226                      A000            .word	$A000
00387 0228                        FF            .byte	$FF
00388 0229                        01            .byte	1
00389                                           ! 248  {0x0F, 0x01, 0x03, 1, 0xA000, 0xFF, 0x00},
00390 022A                        0F            .byte	$F
00391 022B                        01            .byte	1
00392 022C                        03            .byte	3
00393 022D                        01            .byte	1
00394 022E                      A000            .word	$A000
00395 0230                        FF            .byte	$FF
00396 0231                        00            .byte	0
00397                                           ! 249  {0x10, 0x01, 0x04, 4, 0xA000, 0xFF, 0x02},
00398 0232                        10            .byte	$10
00399 0233                        01            .byte	1
00400 0234                        04            .byte	4
00401 0235                        04            .byte	4
00402 0236                      A000            .word	$A000
00403 0238                        FF            .byte	$FF
00404 0239                        02            .byte	2
00405                                           ! 250  {0x11, 0x01, 0x03, 1, 0xA000, 0xFF, 0x02},
00406 023A                        11            .byte	$11
00407 023B                        01            .byte	1
00408 023C                        03            .byte	3
00409 023D                        01            .byte	1
00410 023E                      A000            .word	$A000
00411 0240                        FF            .byte	$FF
00412 0241                        02            .byte	2
00413                                           ! 251  {0x12, 0x01, 0x04, 4, 0xA000, 0xFF, 0x02},
00414 0242                        12            .byte	$12
00415 0243                        01            .byte	1
00416 0244                        04            .byte	4
00417 0245                        04            .byte	4
00418 0246                      A000            .word	$A000
00419 0248                        FF            .byte	$FF
00420 0249                        02            .byte	2
00421                                           ! 252  {0x13, 0x01, 0x05, 8, 0xA000, 0xFF, 0x03},
00422 024A                        13            .byte	$13
00423 024B                        01            .byte	1
00424 024C                        05            .byte	5
00425 024D                        08            .byte	8
00426 024E                      A000            .word	$A000
00427 0250                        FF            .byte	$FF
00428 0251                        03            .byte	3
00429                                           ! 253  {0x6A, 0x01, 0x04, 4, 0xA000, 0xFF, 0x02}
00430 0252                        6A            .byte	$6A
00431 0253                        01            .byte	1
00432 0254                        04            .byte	4
00433 0255                        04            .byte	4
00434 0256                      A000            .word	$A000
00435 0258                        FF            .byte	$FF
00436 0259                        02            .byte	2
00437                                           ! 254 };
00438                                           !BCC_EOS
00439                                           ! 255 static Bit8u line_to_vpti[15 +1]={
00440                       0000025A            _line_to_vpti:
00441                                           ! 256     0x17, 0x17, 0x18, 0x18, 0x04, 0x05, 0x06, 0x07,
00442 025A                        17            .byte	$17
00443 025B                        17            .byte	$17
00444 025C                        18            .byte	$18
00445 025D                        18            .byte	$18
00446 025E                        04            .byte	4
00447 025F                        05            .byte	5
00448 0260                        06            .byte	6
00449 0261                        07            .byte	7
00450                                           ! 257     0x0d, 0x0e, 0x11, 0x12, 0x1a, 0x1b, 0x1c, 0x1d,
00451 0262                        0D            .byte	$D
00452 0263                        0E            .byte	$E
00453 0264                        11            .byte	$11
00454 0265                        12            .byte	$12
00455 0266                        1A            .byte	$1A
00456 0267                        1B            .byte	$1B
00457 0268                        1C            .byte	$1C
00458 0269                        1D            .byte	$1D
00459                                           ! 258 };
00460                                           !BCC_EOS
00461                                           ! 259 static Bit8u dac_regs[3 +1]=
00462                                           ! 260 {0x3f,0x3f,0x3f,0xff};
00463                       0000026A            _dac_regs:
00464 026A                        3F            .byte	$3F
00465 026B                        3F            .byte	$3F
00466 026C                        3F            .byte	$3F
00467 026D                        FF            .byte	$FF
00468                                           !BCC_EOS
00469                                           ! 261 typedef struct {
00470                                           ! 262     Bit8u twidth;
00471                                           !BCC_EOS
00472                                           ! 263     Bit8u
00473                                           ! 263  theightm1;
00474                                           !BCC_EOS
00475                                           ! 264     Bit8u cheight;
00476                                           !BCC_EOS
00477                                           ! 265     Bit8u slength_l;
00478                                           !BCC_EOS
00479                                           ! 266     Bit8u slength_h;
00480                                           !BCC_EOS
00481                                           ! 267     Bit8u sequ_regs[4];
00482                                           !BCC_EOS
00483                                           ! 268     Bit8u miscreg;
00484                                           !BCC_EOS
00485                                           ! 269     Bit8u crtc_regs[25];
00486                                           !BCC_EOS
00487                                           ! 270     Bit8u actl_regs[20];
00488                                           !BCC_EOS
00489                                           ! 271     Bit8u grdc_regs[9];
00490                                           !BCC_EOS
00491                                           ! 272 } VideoParamTableEntry;
00492                                           !BCC_EOS
00493                                           ! 273 static VideoParamTableEntry video_param_table[30] = {
00494                       0000026E            _video_param_table:
00495                                           ! 274 {
00496                                           ! 275  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00497 026E                        00            .byte	0
00498 026F                        00            .byte	0
00499 0270                        00            .byte	0
00500 0271                        00            .byte	0
00501 0272                        00            .byte	0
00502 0273                        00            .byte	0
00503 0274                        00            .byte	0
00504 0275                        00            .byte	0
00505                                           ! 276  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00506 0276                        00            .byte	0
00507 0277                        00            .byte	0
00508 0278                        00            .byte	0
00509 0279                        00            .byte	0
00510 027A                        00            .byte	0
00511 027B                        00            .byte	0
00512 027C                        00            .byte	0
00513 027D                        00            .byte	0
00514                                           ! 277  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00515 027E                        00            .byte	0
00516 027F                        00            .byte	0
00517 0280                        00            .byte	0
00518 0281                        00            .byte	0
00519 0282                        00            .byte	0
00520 0283                        00            .byte	0
00521 0284                        00            .byte	0
00522 0285                        00            .byte	0
00523                                           ! 278  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00524 0286                        00            .byte	0
00525 0287                        00            .byte	0
00526 0288                        00            .byte	0
00527 0289                        00            .byte	0
00528 028A                        00            .byte	0
00529 028B                        00            .byte	0
00530 028C                        00            .byte	0
00531 028D                        00            .byte	0
00532                                           ! 279  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00533 028E                        00            .byte	0
00534 028F                        00            .byte	0
00535 0290                        00            .byte	0
00536 0291                        00            .byte	0
00537 0292                        00            .byte	0
00538 0293                        00            .byte	0
00539 0294                        00            .byte	0
00540 0295                        00            .byte	0
00541                                           ! 280  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00542 0296                        00            .byte	0
00543 0297                        00            .byte	0
00544 0298                        00            .byte	0
00545 0299                        00            .byte	0
00546 029A                        00            .byte	0
00547 029B                        00            .byte	0
00548 029C                        00            .byte	0
00549 029D                        00            .byte	0
00550                                           ! 281  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00551 029E                        00            .byte	0
00552 029F                        00            .byte	0
00553 02A0                        00            .byte	0
00554 02A1                        00            .byte	0
00555 02A2                        00            .byte	0
00556 02A3                        00            .byte	0
00557 02A4                        00            .byte	0
00558 02A5                        00            .byte	0
00559                                           ! 282  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00560 02A6                        00            .byte	0
00561 02A7                        00            .byte	0
00562 02A8                        00            .byte	0
00563 02A9                        00            .byte	0
00564 02AA                        00            .byte	0
00565 02AB                        00            .byte	0
00566 02AC                        00            .byte	0
00567 02AD                        00            .byte	0
00568                                           ! 283 },
00569                                           ! 284 {
00570                                           ! 285  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00571 02AE                        00            .byte	0
00572 02AF                        00            .byte	0
00573 02B0                        00            .byte	0
00574 02B1                        00            .byte	0
00575 02B2                        00            .byte	0
00576 02B3                        00            .byte	0
00577 02B4                        00            .byte	0
00578 02B5                        00            .byte	0
00579                                           ! 286  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00580 02B6                        00            .byte	0
00581 02B7                        00            .byte	0
00582 02B8                        00            .byte	0
00583 02B9                        00            .byte	0
00584 02BA                        00            .byte	0
00585 02BB                        00            .byte	0
00586 02BC                        00            .byte	0
00587 02BD                        00            .byte	0
00588                                           ! 287  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00589 02BE                        00            .byte	0
00590 02BF                        00            .byte	0
00591 02C0                        00            .byte	0
00592 02C1                        00            .byte	0
00593 02C2                        00            .byte	0
00594 02C3                        00            .byte	0
00595 02C4                        00            .byte	0
00596 02C5                        00            .byte	0
00597                                           ! 288  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00598 02C6                        00            .byte	0
00599 02C7                        00            .byte	0
00600 02C8                        00            .byte	0
00601 02C9                        00            .byte	0
00602 02CA                        00            .byte	0
00603 02CB                        00            .byte	0
00604 02CC                        00            .byte	0
00605 02CD                        00            .byte	0
00606                                           ! 289  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00607 02CE                        00            .byte	0
00608 02CF                        00            .byte	0
00609 02D0                        00            .byte	0
00610 02D1                        00            .byte	0
00611 02D2                        00            .byte	0
00612 02D3                        00            .byte	0
00613 02D4                        00            .byte	0
00614 02D5                        00            .byte	0
00615                                           ! 290  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00616 02D6                        00            .byte	0
00617 02D7                        00            .byte	0
00618 02D8                        00            .byte	0
00619 02D9                        00            .byte	0
00620 02DA                        00            .byte	0
00621 02DB                        00            .byte	0
00622 02DC                        00            .byte	0
00623 02DD                        00            .byte	0
00624                                           ! 291  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00625 02DE                        00            .byte	0
00626 02DF                        00            .byte	0
00627 02E0                        00            .byte	0
00628 02E1                        00            .byte	0
00629 02E2                        00            .byte	0
00630 02E3                        00            .byte	0
00631 02E4                        00            .byte	0
00632 02E5                        00            .byte	0
00633                                           ! 292  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00634 02E6                        00            .byte	0
00635 02E7                        00            .byte	0
00636 02E8                        00            .byte	0
00637 02E9                        00            .byte	0
00638 02EA                        00            .byte	0
00639 02EB                        00            .byte	0
00640 02EC                        00            .byte	0
00641 02ED                        00            .byte	0
00642                                           ! 293 },
00643                                           ! 294 {
00644                                           ! 295  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00645 02EE                        00            .byte	0
00646 02EF                        00            .byte	0
00647 02F0                        00            .byte	0
00648 02F1                        00            .byte	0
00649 02F2                        00            .byte	0
00650 02F3                        00            .byte	0
00651 02F4                        00            .byte	0
00652 02F5                        00            .byte	0
00653                                           ! 296  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00654 02F6                        00            .byte	0
00655 02F7                        00            .byte	0
00656 02F8                        00            .byte	0
00657 02F9                        00            .byte	0
00658 02FA                        00            .byte	0
00659 02FB                        00            .byte	0
00660 02FC                        00            .byte	0
00661 02FD                        00            .byte	0
00662                                           ! 297  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00663 02FE                        00            .byte	0
00664 02FF                        00            .byte	0
00665 0300                        00            .byte	0
00666 0301                        00            .byte	0
00667 0302                        00            .byte	0
00668 0303                        00            .byte	0
00669 0304                        00            .byte	0
00670 0305                        00            .byte	0
00671                                           ! 298  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00672 0306                        00            .byte	0
00673 0307                        00            .byte	0
00674 0308                        00            .byte	0
00675 0309                        00            .byte	0
00676 030A                        00            .byte	0
00677 030B                        00            .byte	0
00678 030C                        00            .byte	0
00679 030D                        00            .byte	0
00680                                           ! 299  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00681 030E                        00            .byte	0
00682 030F                        00            .byte	0
00683 0310                        00            .byte	0
00684 0311                        00            .byte	0
00685 0312                        00            .byte	0
00686 0313                        00            .byte	0
00687 0314                        00            .byte	0
00688 0315                        00            .byte	0
00689                                           ! 300  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00690 0316                        00            .byte	0
00691 0317                        00            .byte	0
00692 0318                        00            .byte	0
00693 0319                        00            .byte	0
00694 031A                        00            .byte	0
00695 031B                        00            .byte	0
00696 031C                        00            .byte	0
00697 031D                        00            .byte	0
00698                                           ! 301  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00699 031E                        00            .byte	0
00700 031F                        00            .byte	0
00701 0320                        00            .byte	0
00702 0321                        00            .byte	0
00703 0322                        00            .byte	0
00704 0323                        00            .byte	0
00705 0324                        00            .byte	0
00706 0325                        00            .byte	0
00707                                           ! 302  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00708 0326                        00            .byte	0
00709 0327                        00            .byte	0
00710 0328                        00            .byte	0
00711 0329                        00            .byte	0
00712 032A                        00            .byte	0
00713 032B                        00            .byte	0
00714 032C                        00            .byte	0
00715 032D                        00            .byte	0
00716                                           ! 303 },
00717                                           ! 304 {
00718                                           ! 305  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00719 032E                        00            .byte	0
00720 032F                        00            .byte	0
00721 0330                        00            .byte	0
00722 0331                        00            .byte	0
00723 0332                        00            .byte	0
00724 0333                        00            .byte	0
00725 0334                        00            .byte	0
00726 0335                        00            .byte	0
00727                                           ! 306  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00728 0336                        00            .byte	0
00729 0337                        00            .byte	0
00730 0338                        00            .byte	0
00731 0339                        00            .byte	0
00732 033A                        00            .byte	0
00733 033B                        00            .byte	0
00734 033C                        00            .byte	0
00735 033D                        00            .byte	0
00736                                           ! 307  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00737 033E                        00            .byte	0
00738 033F                        00            .byte	0
00739 0340                        00            .byte	0
00740 0341                        00            .byte	0
00741 0342                        00            .byte	0
00742 0343                        00            .byte	0
00743 0344                        00            .byte	0
00744 0345                        00            .byte	0
00745                                           ! 308  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00746 0346                        00            .byte	0
00747 0347                        00            .byte	0
00748 0348                        00            .byte	0
00749 0349                        00            .byte	0
00750 034A                        00            .byte	0
00751 034B                        00            .byte	0
00752 034C                        00            .byte	0
00753 034D                        00            .byte	0
00754                                           ! 309  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00755 034E                        00            .byte	0
00756 034F                        00            .byte	0
00757 0350                        00            .byte	0
00758 0351                        00            .byte	0
00759 0352                        00            .byte	0
00760 0353                        00            .byte	0
00761 0354                        00            .byte	0
00762 0355                        00            .byte	0
00763                                           ! 310  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00764 0356                        00            .byte	0
00765 0357                        00            .byte	0
00766 0358                        00            .byte	0
00767 0359                        00            .byte	0
00768 035A                        00            .byte	0
00769 035B                        00            .byte	0
00770 035C                        00            .byte	0
00771 035D                        00            .byte	0
00772                                           ! 311  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00773 035E                        00            .byte	0
00774 035F                        00            .byte	0
00775 0360                        00            .byte	0
00776 0361                        00            .byte	0
00777 0362                        00            .byte	0
00778 0363                        00            .byte	0
00779 0364                        00            .byte	0
00780 0365                        00            .byte	0
00781                                           ! 312  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00782 0366                        00            .byte	0
00783 0367                        00            .byte	0
00784 0368                        00            .byte	0
00785 0369                        00            .byte	0
00786 036A                        00            .byte	0
00787 036B                        00            .byte	0
00788 036C                        00            .byte	0
00789 036D                        00            .byte	0
00790                                           ! 313 },
00791                                           ! 314 {
00792                                           ! 315  40, 24, 8, 0x00, 0x08,
00793 036E                        28            .byte	$28
00794 036F                        18            .byte	$18
00795 0370                        08            .byte	8
00796 0371                        00            .byte	0
00797 0372                        08            .byte	8
00798                                           ! 316  0x09, 0x03, 0x00, 0x02,
00799 0373                        09            .byte	9
00800 0374                        03            .byte	3
00801 0375                        00            .byte	0
00802 0376                        02            .byte	2
00803                                           ! 317  0x63,
00804 0377                        63            .byte	$63
00805                                           ! 318  0x2d, 0x27, 0x28, 0x90, 0x2b, 0x80, 0xbf, 0x1f,
00806 0378                        2D            .byte	$2D
00807 0379                        27            .byte	$27
00808 037A                        28            .byte	$28
00809 037B                        90            .byte	$90
00810 037C                        2B            .byte	$2B
00811 037D                        80            .byte	$80
00812 037E                        BF            .byte	$BF
00813 037F                        1F            .byte	$1F
00814                                           ! 319  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00815 0380                        00            .byte	0
00816 0381                        C1            .byte	$C1
00817 0382                        00            .byte	0
00818 0383                        00            .byte	0
00819 0384                        00            .byte	0
00820 0385                        00            .byte	0
00821 0386                        00            .byte	0
00822 0387                        00            .byte	0
00823                                           ! 320  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96,
00824 0388                        9C            .byte	$9C
00825 0389                        8E            .byte	$8E
00826 038A                        8F            .byte	$8F
00827 038B                        14            .byte	$14
00828 038C                        00            .byte	0
00829                                           ! 320  0xb9, 0xa2,
00830 038D                        96            .byte	$96
00831 038E                        B9            .byte	$B9
00832 038F                        A2            .byte	$A2
00833                                           ! 321  0xff,
00834 0390                        FF            .byte	$FF
00835                                           ! 322  0x00, 0x13, 0x15, 0x17, 0x02, 0x04, 0x06, 0x07,
00836 0391                        00            .byte	0
00837 0392                        13            .byte	$13
00838 0393                        15            .byte	$15
00839 0394                        17            .byte	$17
00840 0395                        02            .byte	2
00841 0396                        04            .byte	4
00842 0397                        06            .byte	6
00843 0398                        07            .byte	7
00844                                           ! 323  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
00845 0399                        10            .byte	$10
00846 039A                        11            .byte	$11
00847 039B                        12            .byte	$12
00848 039C                        13            .byte	$13
00849 039D                        14            .byte	$14
00850 039E                        15            .byte	$15
00851 039F                        16            .byte	$16
00852 03A0                        17            .byte	$17
00853                                           ! 324  0x01, 0x00, 0x03, 0x00,
00854 03A1                        01            .byte	1
00855 03A2                        00            .byte	0
00856 03A3                        03            .byte	3
00857 03A4                        00            .byte	0
00858                                           ! 325  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0f, 0x0f, 0xff,
00859 03A5                        00            .byte	0
00860 03A6                        00            .byte	0
00861 03A7                        00            .byte	0
00862 03A8                        00            .byte	0
00863 03A9                        00            .byte	0
00864 03AA                        30            .byte	$30
00865 03AB                        0F            .byte	$F
00866 03AC                        0F            .byte	$F
00867 03AD                        FF            .byte	$FF
00868                                           ! 326 },
00869                                           ! 327 {
00870                                           ! 328  40, 24, 8, 0x00, 0x08,
00871 03AE                        28            .byte	$28
00872 03AF                        18            .byte	$18
00873 03B0                        08            .byte	8
00874 03B1                        00            .byte	0
00875 03B2                        08            .byte	8
00876                                           ! 329  0x09, 0x03, 0x00, 0x02,
00877 03B3                        09            .byte	9
00878 03B4                        03            .byte	3
00879 03B5                        00            .byte	0
00880 03B6                        02            .byte	2
00881                                           ! 330  0x63,
00882 03B7                        63            .byte	$63
00883                                           ! 331  0x2d, 0x27, 0x28, 0x90, 0x2b, 0x80, 0xbf, 0x1f,
00884 03B8                        2D            .byte	$2D
00885 03B9                        27            .byte	$27
00886 03BA                        28            .byte	$28
00887 03BB                        90            .byte	$90
00888 03BC                        2B            .byte	$2B
00889 03BD                        80            .byte	$80
00890 03BE                        BF            .byte	$BF
00891 03BF                        1F            .byte	$1F
00892                                           ! 332  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00893 03C0                        00            .byte	0
00894 03C1                        C1            .byte	$C1
00895 03C2                        00            .byte	0
00896 03C3                        00            .byte	0
00897 03C4                        00            .byte	0
00898 03C5                        00            .byte	0
00899 03C6                        00            .byte	0
00900 03C7                        00            .byte	0
00901                                           ! 333  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96, 0xb9, 0xa2,
00902 03C8                        9C            .byte	$9C
00903 03C9                        8E            .byte	$8E
00904 03CA                        8F            .byte	$8F
00905 03CB                        14            .byte	$14
00906 03CC                        00            .byte	0
00907 03CD                        96            .byte	$96
00908 03CE                        B9            .byte	$B9
00909 03CF                        A2            .byte	$A2
00910                                           ! 334  0xff,
00911 03D0                        FF            .byte	$FF
00912                                           ! 335  0x00, 0x13, 0x15, 0x17, 0x02, 0x04, 0x06, 0x07,
00913 03D1                        00            .byte	0
00914 03D2                        13            .byte	$13
00915 03D3                        15            .byte	$15
00916 03D4                        17            .byte	$17
00917 03D5                        02            .byte	2
00918 03D6                        04            .byte	4
00919 03D7                        06            .byte	6
00920 03D8                        07            .byte	7
00921                                           ! 336  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
00922 03D9                        10            .byte	$10
00923 03DA                        11            .byte	$11
00924 03DB                        12            .byte	$12
00925 03DC                        13            .byte	$13
00926 03DD                        14            .byte	$14
00927 03DE                        15            .byte	$15
00928 03DF                        16            .byte	$16
00929 03E0                        17            .byte	$17
00930                                           ! 337  0x01, 0x00, 0x03, 0x00,
00931 03E1                        01            .byte	1
00932 03E2                        00            .byte	0
00933 03E3                        03            .byte	3
00934 03E4                        00            .byte	0
00935                                           ! 338  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0f, 0x0f, 0xff,
00936 03E5                        00            .byte	0
00937 03E6                        00            .byte	0
00938 03E7                        00            .byte	0
00939 03E8                        00            .byte	0
00940 03E9                        00            .byte	0
00941 03EA                        30            .byte	$30
00942 03EB                        0F            .byte	$F
00943 03EC                        0F            .byte	$F
00944 03ED                        FF            .byte	$FF
00945                                           ! 339 },
00946                                           ! 340 {
00947                                           ! 341  80, 24, 8, 0x00, 0x10,
00948 03EE                        50            .byte	$50
00949 03EF                        18            .byte	$18
00950 03F0                        08            .byte	8
00951 03F1                        00            .byte	0
00952 03F2                        10            .byte	$10
00953                                           ! 342  0x01, 0x01, 0x00, 0x06,
00954 03F3                        01            .byte	1
00955 03F4                        01            .byte	1
00956 03F5                        00            .byte	0
00957 03F6                        06            .byte	6
00958                                           ! 343  0x63,
00959 03F7                        63            .byte	$63
00960                                           ! 344  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
00961 03F8                        5F            .byte	$5F
00962 03F9                        4F            .byte	$4F
00963 03FA                        50            .byte	$50
00964 03FB                        82            .byte	$82
00965 03FC                        54            .byte	$54
00966 03FD                        80            .byte	$80
00967 03FE                        BF            .byte	$BF
00968 03FF                        1F            .byte	$1F
00969                                           ! 345  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00970 0400                        00            .byte	0
00971 0401                        C1            .byte	$C1
00972 0402                        00            .byte	0
00973 0403                        00            .byte	0
00974 0404                        00            .byte	0
00975 0405                        00            .byte	0
00976 0406                        00            .byte	0
00977 0407                        00            .byte	0
00978                                           ! 346  0x9c, 0x8e, 0x8f, 0x28, 0x00, 0x96, 0xb9, 0xc2,
00979 0408                        9C            .byte	$9C
00980 0409                        8E            .byte	$8E
00981 040A                        8F            .byte	$8F
00982 040B                        28            .byte	$28
00983 040C                        00            .byte	0
00984 040D                        96            .byte	$96
00985 040E                        B9            .byte	$B9
00986 040F                        C2            .byte	$C2
00987                                           ! 347  0xff,
00988 0410                        FF            .byte	$FF
00989                                           ! 348  0x00, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17,
00990 0411                        00            .byte	0
00991 0412                        17            .byte	$17
00992 0413                        17            .byte	$17
00993 0414                        17            .byte	$17
00994 0415                        17            .byte	$17
00995 0416                        17            .byte	$17
00996 0417                        17            .byte	$17
00997 0418                        17            .byte	$17
00998                                           ! 349  0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17,
00999 0419                        17            .byte	$17
01000 041A                        17            .byte	$17
01001 041B                        17            .byte	$17
01002 041C                        17            .byte	$17
01003 041D                        17            .byte	$17
01004 041E                        17            .byte	$17
01005 041F                        17            .byte	$17
01006 0420                        17            .byte	$17
01007                                           ! 350  0x01, 0x00, 0x01, 0x00,
01008 0421                        01            .byte	1
01009 0422                        00            .byte	0
01010 0423                        01            .byte	1
01011 0424                        00            .byte	0
01012                                           ! 351  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x0f, 0xff,
01013 0425                        00            .byte	0
01014 0426                        00            .byte	0
01015 0427                        00            .byte	0
01016 0428                        00            .byte	0
01017 0429                        00            .byte	0
01018 042A                        00            .byte	0
01019 042B                        0D            .byte	$D
01020 042C                        0F            .byte	$F
01021 042D                        FF            .byte	$FF
01022                                           ! 352 },
01023                                           ! 353 {
01024                                           ! 354  80, 24, 16, 0x00, 0x10,
01025 042E                        50            .byte	$50
01026 042F                        18            .byte	$18
01027 0430                        10            .byte	$10
01028 0431                        00            .byte	0
01029 0432                        10            .byte	$10
01030                                           ! 355  0x00, 0x03, 0x00, 0x02,
01031 0433                        00            .byte	0
01032 0434                        03            .byte	3
01033 0435                        00            .byte	0
01034 0436                        02            .byte	2
01035                                           ! 356  0x66,
01036 0437                        66            .byte	$66
01037                                           ! 357  0x5f, 0x4f, 0x50, 0x82, 0x55, 0x81, 0xbf, 0x1f,
01038 0438                        5F            .byte	$5F
01039 0439                        4F            .byte	$4F
01040 043A                        50            .byte	$50
01041 043B                        82            .byte	$82
01042 043C                        55            .byte	$55
01043 043D                        81            .byte	$81
01044 043E                        BF            .byte	$BF
01045 043F                        1F            .byte	$1F
01046                                           ! 358  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
01047 0440                        00            .byte	0
01048 0441                        4F            .byte	$4F
01049 0442                        0D            .byte	$D
01050 0443                        0E            .byte	$E
01051 0444                        00            .byte	0
01052 0445                        00            .byte	0
01053 0446                        00            .byte	0
01054 0447                        00            .byte	0
01055                                           ! 359  0x9c, 0x8e, 0x8f, 0x28, 0x0f, 0x96, 0xb9, 0xa3,
01056 0448                        9C            .byte	$9C
01057 0449                        8E            .byte	$8E
01058 044A                        8F            .byte	$8F
01059 044B                        28            .byte	$28
01060 044C                        0F            .byte	$F
01061 044D                        96            .byte	$96
01062 044E                        B9            .byte	$B9
01063 044F                        A3            .byte	$A3
01064                                           ! 360  0xff,
01065 0450                        FF            .byte	$FF
01066                                           ! 361  0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
01067 0451                        00            .byte	0
01068 0452                        08            .byte	8
01069 0453                        08            .byte	8
01070 0454                        08            .byte	8
01071 0455                        08            .byte	8
01072 0456                        08            .byte	8
01073 0457                        08            .byte	8
01074 0458                        08            .byte	8
01075                                           ! 362  0x10, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
01076 0459                        10            .byte	$10
01077 045A                        18            .byte	$18
01078 045B                        18            .byte	$18
01079 045C                        18            .byte	$18
01080 045D                        18            .byte	$18
01081 045E                        18            .byte	$18
01082 045F                        18            .byte	$18
01083 0460                        18            .byte	$18
01084                                           ! 363  0x0e, 0x00, 0x0f, 0x08,
01085 0461                        0E            .byte	$E
01086 0462                        00            .byte	0
01087 0463                        0F            .byte	$F
01088 0464                        08            .byte	8
01089                                           ! 364  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0a, 0x0f, 0xff,
01090 0465                        00            .byte	0
01091 0466                        00            .byte	0
01092 0467                        00            .byte	0
01093 0468                        00            .byte	0
01094 0469                        00            .byte	0
01095 046A                        10            .byte	$10
01096 046B                        0A            .byte	$A
01097 046C                        0F            .byte	$F
01098 046D                        FF            .byte	$FF
01099                                           ! 365 },
01100                                           ! 366 {
01101                                           ! 367  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01102 046E                        00            .byte	0
01103 046F                        00            .byte	0
01104 0470                        00            .byte	0
01105 0471                        00            .byte	0
01106 0472                        00            .byte	0
01107 0473                        00            .byte	0
01108 0474                        00            .byte	0
01109 0475                        00            .byte	0
01110                                           ! 368  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01111 0476                        00            .byte	0
01112 0477                        00            .byte	0
01113 0478                        00            .byte	0
01114 0479                        00            .byte	0
01115 047A                        00            .byte	0
01116 047B                        00            .byte	0
01117 047C                        00            .byte	0
01118 047D                        00            .byte	0
01119                                           ! 369  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01120 047E                        00            .byte	0
01121 047F                        00            .byte	0
01122 0480                        00            .byte	0
01123 0481                        00            .byte	0
01124 0482                        00            .byte	0
01125 0483                        00            .byte	0
01126 0484                        00            .byte	0
01127 0485                        00            .byte	0
01128                                           ! 370  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01129 0486                        00            .byte	0
01130 0487                        00            .byte	0
01131 0488                        00            .byte	0
01132 0489                        00            .byte	0
01133 048A                        00            .byte	0
01134 048B                        00            .byte	0
01135 048C                        00            .byte	0
01136 048D                        00            .byte	0
01137                                           ! 371  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01138 048E                        00            .byte	0
01139 048F                        00            .byte	0
01140 0490                        00            .byte	0
01141 0491                        00            .byte	0
01142 0492                        00            .byte	0
01143 0493                        00            .byte	0
01144 0494                        00            .byte	0
01145 0495                        00            .byte	0
01146                                           ! 372  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01147 0496                        00            .byte	0
01148 0497                        00            .byte	0
01149 0498                        00            .byte	0
01150 0499                        00            .byte	0
01151 049A                        00            .byte	0
01152 049B                        00            .byte	0
01153 049C                        00            .byte	0
01154 049D                        00            .byte	0
01155                                           ! 373  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01156 049E                        00            .byte	0
01157 049F                        00            .byte	0
01158 04A0                        00            .byte	0
01159 04A1                        00            .byte	0
01160 04A2                        00            .byte	0
01161 04A3                        00            .byte	0
01162 04A4                        00            .byte	0
01163 04A5                        00            .byte	0
01164                                           ! 374  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01165 04A6                        00            .byte	0
01166 04A7                        00            .byte	0
01167 04A8                        00            .byte	0
01168 04A9                        00            .byte	0
01169 04AA                        00            .byte	0
01170 04AB                        00            .byte	0
01171 04AC                        00            .byte	0
01172 04AD                        00            .byte	0
01173                                           ! 375 },
01174                                           ! 376 {
01175                                           ! 377  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01176 04AE                        00            .byte	0
01177 04AF                        00            .byte	0
01178 04B0                        00            .byte	0
01179 04B1                        00            .byte	0
01180 04B2                        00            .byte	0
01181 04B3                        00            .byte	0
01182 04B4                        00            .byte	0
01183 04B5                        00            .byte	0
01184                                           ! 378  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01185 04B6                        00            .byte	0
01186 04B7                        00            .byte	0
01187 04B8                        00            .byte	0
01188 04B9                        00            .byte	0
01189 04BA                        00            .byte	0
01190 04BB                        00            .byte	0
01191 04BC                        00            .byte	0
01192 04BD                        00            .byte	0
01193                                           ! 379  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01194 04BE                        00            .byte	0
01195 04BF                        00            .byte	0
01196 04C0                        00            .byte	0
01197 04C1                        00            .byte	0
01198 04C2                        00            .byte	0
01199 04C3                        00            .byte	0
01200 04C4                        00            .byte	0
01201 04C5                        00            .byte	0
01202                                           ! 380  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01203 04C6                        00            .byte	0
01204 04C7                        00            .byte	0
01205 04C8                        00            .byte	0
01206 04C9                        00            .byte	0
01207 04CA                        00            .byte	0
01208 04CB                        00            .byte	0
01209 04CC                        00            .byte	0
01210 04CD                        00            .byte	0
01211                                           ! 381  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01212 04CE                        00            .byte	0
01213 04CF                        00            .byte	0
01214 04D0                        00            .byte	0
01215 04D1                        00            .byte	0
01216 04D2                        00            .byte	0
01217 04D3                        00            .byte	0
01218 04D4                        00            .byte	0
01219 04D5                        00            .byte	0
01220                                           ! 382  0x00, 0x00, 0x00, 0x00
01221 04D6                        00            .byte	0
01222 04D7                        00            .byte	0
01223 04D8                        00            .byte	0
01224                                           ! 382 , 0x00, 0x00, 0x00, 0x00,
01225 04D9                        00            .byte	0
01226 04DA                        00            .byte	0
01227 04DB                        00            .byte	0
01228 04DC                        00            .byte	0
01229 04DD                        00            .byte	0
01230                                           ! 383  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01231 04DE                        00            .byte	0
01232 04DF                        00            .byte	0
01233 04E0                        00            .byte	0
01234 04E1                        00            .byte	0
01235 04E2                        00            .byte	0
01236 04E3                        00            .byte	0
01237 04E4                        00            .byte	0
01238 04E5                        00            .byte	0
01239                                           ! 384  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01240 04E6                        00            .byte	0
01241 04E7                        00            .byte	0
01242 04E8                        00            .byte	0
01243 04E9                        00            .byte	0
01244 04EA                        00            .byte	0
01245 04EB                        00            .byte	0
01246 04EC                        00            .byte	0
01247 04ED                        00            .byte	0
01248                                           ! 385 },
01249                                           ! 386 {
01250                                           ! 387  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01251 04EE                        00            .byte	0
01252 04EF                        00            .byte	0
01253 04F0                        00            .byte	0
01254 04F1                        00            .byte	0
01255 04F2                        00            .byte	0
01256 04F3                        00            .byte	0
01257 04F4                        00            .byte	0
01258 04F5                        00            .byte	0
01259                                           ! 388  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01260 04F6                        00            .byte	0
01261 04F7                        00            .byte	0
01262 04F8                        00            .byte	0
01263 04F9                        00            .byte	0
01264 04FA                        00            .byte	0
01265 04FB                        00            .byte	0
01266 04FC                        00            .byte	0
01267 04FD                        00            .byte	0
01268                                           ! 389  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01269 04FE                        00            .byte	0
01270 04FF                        00            .byte	0
01271 0500                        00            .byte	0
01272 0501                        00            .byte	0
01273 0502                        00            .byte	0
01274 0503                        00            .byte	0
01275 0504                        00            .byte	0
01276 0505                        00            .byte	0
01277                                           ! 390  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01278 0506                        00            .byte	0
01279 0507                        00            .byte	0
01280 0508                        00            .byte	0
01281 0509                        00            .byte	0
01282 050A                        00            .byte	0
01283 050B                        00            .byte	0
01284 050C                        00            .byte	0
01285 050D                        00            .byte	0
01286                                           ! 391  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01287 050E                        00            .byte	0
01288 050F                        00            .byte	0
01289 0510                        00            .byte	0
01290 0511                        00            .byte	0
01291 0512                        00            .byte	0
01292 0513                        00            .byte	0
01293 0514                        00            .byte	0
01294 0515                        00            .byte	0
01295                                           ! 392  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01296 0516                        00            .byte	0
01297 0517                        00            .byte	0
01298 0518                        00            .byte	0
01299 0519                        00            .byte	0
01300 051A                        00            .byte	0
01301 051B                        00            .byte	0
01302 051C                        00            .byte	0
01303 051D                        00            .byte	0
01304                                           ! 393  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01305 051E                        00            .byte	0
01306 051F                        00            .byte	0
01307 0520                        00            .byte	0
01308 0521                        00            .byte	0
01309 0522                        00            .byte	0
01310 0523                        00            .byte	0
01311 0524                        00            .byte	0
01312 0525                        00            .byte	0
01313                                           ! 394  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01314 0526                        00            .byte	0
01315 0527                        00            .byte	0
01316 0528                        00            .byte	0
01317 0529                        00            .byte	0
01318 052A                        00            .byte	0
01319 052B                        00            .byte	0
01320 052C                        00            .byte	0
01321 052D                        00            .byte	0
01322                                           ! 395 },
01323                                           ! 396 {
01324                                           ! 397  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01325 052E                        00            .byte	0
01326 052F                        00            .byte	0
01327 0530                        00            .byte	0
01328 0531                        00            .byte	0
01329 0532                        00            .byte	0
01330 0533                        00            .byte	0
01331 0534                        00            .byte	0
01332 0535                        00            .byte	0
01333                                           ! 398  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01334 0536                        00            .byte	0
01335 0537                        00            .byte	0
01336 0538                        00            .byte	0
01337 0539                        00            .byte	0
01338 053A                        00            .byte	0
01339 053B                        00            .byte	0
01340 053C                        00            .byte	0
01341 053D                        00            .byte	0
01342                                           ! 399  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01343 053E                        00            .byte	0
01344 053F                        00            .byte	0
01345 0540                        00            .byte	0
01346 0541                        00            .byte	0
01347 0542                        00            .byte	0
01348 0543                        00            .byte	0
01349 0544                        00            .byte	0
01350 0545                        00            .byte	0
01351                                           ! 400  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01352 0546                        00            .byte	0
01353 0547                        00            .byte	0
01354 0548                        00            .byte	0
01355 0549                        00            .byte	0
01356 054A                        00            .byte	0
01357 054B                        00            .byte	0
01358 054C                        00            .byte	0
01359 054D                        00            .byte	0
01360                                           ! 401  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01361 054E                        00            .byte	0
01362 054F                        00            .byte	0
01363 0550                        00            .byte	0
01364 0551                        00            .byte	0
01365 0552                        00            .byte	0
01366 0553                        00            .byte	0
01367 0554                        00            .byte	0
01368 0555                        00            .byte	0
01369                                           ! 402  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01370 0556                        00            .byte	0
01371 0557                        00            .byte	0
01372 0558                        00            .byte	0
01373 0559                        00            .byte	0
01374 055A                        00            .byte	0
01375 055B                        00            .byte	0
01376 055C                        00            .byte	0
01377 055D                        00            .byte	0
01378                                           ! 403  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01379 055E                        00            .byte	0
01380 055F                        00            .byte	0
01381 0560                        00            .byte	0
01382 0561                        00            .byte	0
01383 0562                        00            .byte	0
01384 0563                        00            .byte	0
01385 0564                        00            .byte	0
01386 0565                        00            .byte	0
01387                                           ! 404  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01388 0566                        00            .byte	0
01389 0567                        00            .byte	0
01390 0568                        00            .byte	0
01391 0569                        00            .byte	0
01392 056A                        00            .byte	0
01393 056B                        00            .byte	0
01394 056C                        00            .byte	0
01395 056D                        00            .byte	0
01396                                           ! 405 },
01397                                           ! 406 {
01398                                           ! 407  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01399 056E                        00            .byte	0
01400 056F                        00            .byte	0
01401 0570                        00            .byte	0
01402 0571                        00            .byte	0
01403 0572                        00            .byte	0
01404 0573                        00            .byte	0
01405 0574                        00            .byte	0
01406 0575                        00            .byte	0
01407                                           ! 408  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01408 0576                        00            .byte	0
01409 0577                        00            .byte	0
01410 0578                        00            .byte	0
01411 0579                        00            .byte	0
01412 057A                        00            .byte	0
01413 057B                        00            .byte	0
01414 057C                        00            .byte	0
01415 057D                        00            .byte	0
01416                                           ! 409  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01417 057E                        00            .byte	0
01418 057F                        00            .byte	0
01419 0580                        00            .byte	0
01420 0581                        00            .byte	0
01421 0582                        00            .byte	0
01422 0583                        00            .byte	0
01423 0584                        00            .byte	0
01424 0585                        00            .byte	0
01425                                           ! 410  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01426 0586                        00            .byte	0
01427 0587                        00            .byte	0
01428 0588                        00            .byte	0
01429 0589                        00            .byte	0
01430 058A                        00            .byte	0
01431 058B                        00            .byte	0
01432 058C                        00            .byte	0
01433 058D                        00            .byte	0
01434                                           ! 411  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01435 058E                        00            .byte	0
01436 058F                        00            .byte	0
01437 0590                        00            .byte	0
01438 0591                        00            .byte	0
01439 0592                        00            .byte	0
01440 0593                        00            .byte	0
01441 0594                        00            .byte	0
01442 0595                        00            .byte	0
01443                                           ! 412  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01444 0596                        00            .byte	0
01445 0597                        00            .byte	0
01446 0598                        00            .byte	0
01447 0599                        00            .byte	0
01448 059A                        00            .byte	0
01449 059B                        00            .byte	0
01450 059C                        00            .byte	0
01451 059D                        00            .byte	0
01452                                           ! 413  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01453 059E                        00            .byte	0
01454 059F                        00            .byte	0
01455 05A0                        00            .byte	0
01456 05A1                        00            .byte	0
01457 05A2                        00            .byte	0
01458 05A3                        00            .byte	0
01459 05A4                        00            .byte	0
01460 05A5                        00            .byte	0
01461                                           ! 414  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01462 05A6                        00            .byte	0
01463 05A7                        00            .byte	0
01464 05A8                        00            .byte	0
01465 05A9                        00            .byte	0
01466 05AA                        00            .byte	0
01467 05AB                        00            .byte	0
01468 05AC                        00            .byte	0
01469 05AD                        00            .byte	0
01470                                           ! 415 },
01471                                           ! 416 {
01472                                           ! 417  40, 24, 8, 0x00, 0x20,
01473 05AE                        28            .byte	$28
01474 05AF                        18            .byte	$18
01475 05B0                        08            .byte	8
01476 05B1                        00            .byte	0
01477 05B2                        20            .byte	$20
01478                                           ! 418  0x09, 0x0f, 0x00, 0x06,
01479 05B3                        09            .byte	9
01480 05B4                        0F            .byte	$F
01481 05B5                        00            .byte	0
01482 05B6                        06            .byte	6
01483                                           ! 419  0x63,
01484 05B7                        63            .byte	$63
01485                                           ! 420  0x2d, 0x27, 0x28, 0x90, 0x2b, 0x80, 0xbf, 0x1f,
01486 05B8                        2D            .byte	$2D
01487 05B9                        27            .byte	$27
01488 05BA                        28            .byte	$28
01489 05BB                        90            .byte	$90
01490 05BC                        2B            .byte	$2B
01491 05BD                        80            .byte	$80
01492 05BE                        BF            .byte	$BF
01493 05BF                        1F            .byte	$1F
01494                                           ! 421  0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01495 05C0                        00            .byte	0
01496 05C1                        C0            .byte	$C0
01497 05C2                        00            .byte	0
01498 05C3                        00            .byte	0
01499 05C4                        00            .byte	0
01500 05C5                        00            .byte	0
01501 05C6                        00            .byte	0
01502 05C7                        00            .byte	0
01503                                           ! 422  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96, 0xb9, 0xe3,
01504 05C8                        9C            .byte	$9C
01505 05C9                        8E            .byte	$8E
01506 05CA                        8F            .byte	$8F
01507 05CB                        14            .byte	$14
01508 05CC                        00            .byte	0
01509 05CD                        96            .byte	$96
01510 05CE                        B9            .byte	$B9
01511 05CF                        E3            .byte	$E3
01512                                           ! 423  0xff,
01513 05D0                        FF            .byte	$FF
01514                                           ! 424  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
01515 05D1                        00            .byte	0
01516 05D2                        01            .byte	1
01517 05D3                        02            .byte	2
01518 05D4                        03            .byte	3
01519 05D5                        04            .byte	4
01520 05D6                        05            .byte	5
01521 05D7                        06            .byte	6
01522 05D8                        07            .byte	7
01523                                           ! 425  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01524 05D9                        10            .byte	$10
01525 05DA                        11            .byte	$11
01526 05DB                        12            .byte	$12
01527 05DC                        13            .byte	$13
01528 05DD                        14            .byte	$14
01529 05DE                        15            .byte	$15
01530 05DF                        16            .byte	$16
01531 05E0                        17            .byte	$17
01532                                           ! 426  0x01, 0x00, 0x0f, 0x00,
01533 05E1                        01            .byte	1
01534 05E2                        00            .byte	0
01535 05E3                        0F            .byte	$F
01536 05E4                        00            .byte	0
01537                                           ! 427  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
01538 05E5                        00            .byte	0
01539 05E6                        00            .byte	0
01540 05E7                        00            .byte	0
01541 05E8                        00            .byte	0
01542 05E9                        00            .byte	0
01543 05EA                        00            .byte	0
01544 05EB                        05            .byte	5
01545 05EC                        0F            .byte	$F
01546 05ED                        FF            .byte	$FF
01547                                           ! 428 },
01548                                           ! 429 {
01549                                           ! 430  80, 24, 8, 0x00, 0x40,
01550 05EE                        50            .byte	$50
01551 05EF                        18            .byte	$18
01552 05F0                        08            .byte	8
01553 05F1                        00            .byte	0
01554 05F2                        40            .byte	$40
01555                                           ! 431  0x01, 0x0f, 0x00, 0x06,
01556 05F3                        01            .byte	1
01557 05F4                        0F            .byte	$F
01558 05F5                        00            .byte	0
01559 05F6                        06            .byte	6
01560                                           ! 432  0x63,
01561 05F7                        63            .byte	$63
01562                                           ! 433  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
01563 05F8                        5F            .byte	$5F
01564 05F9                        4F            .byte	$4F
01565 05FA                        50            .byte	$50
01566 05FB                        82            .byte	$82
01567 05FC                        54            .byte	$54
01568 05FD                        80            .byte	$80
01569 05FE                        BF            .byte	$BF
01570 05FF                        1F            .byte	$1F
01571                                           ! 434  0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01572 0600                        00            .byte	0
01573 0601                        C0            .byte	$C0
01574 0602                        00            .byte	0
01575 0603                        00            .byte	0
01576 0604                        00            .byte	0
01577 0605                        00            .byte	0
01578 0606                        00            .byte	0
01579 0607                        00            .byte	0
01580                                           ! 435  0x9c, 0x8e, 0x8f, 0x28, 0x00, 0x96, 0xb9, 0xe3,
01581 0608                        9C            .byte	$9C
01582 0609                        8E            .byte	$8E
01583 060A                        8F            .byte	$8F
01584 060B                        28            .byte	$28
01585 060C                        00            .byte	0
01586 060D                        96            .byte	$96
01587 060E                        B9            .byte	$B9
01588 060F                        E3            .byte	$E3
01589                                           ! 436  0xff,
01590 0610                        FF            .byte	$FF
01591                                           ! 437  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
01592 0611                        00            .byte	0
01593 0612                        01            .byte	1
01594 0613                        02            .byte	2
01595 0614                        03            .byte	3
01596 0615                        04            .byte	4
01597 0616                        05            .byte	5
01598 0617                        06            .byte	6
01599 0618                        07            .byte	7
01600                                           ! 438  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01601 0619                        10            .byte	$10
01602 061A                        11            .byte	$11
01603 061B                        12            .byte	$12
01604 061C                        13            .byte	$13
01605 061D                        14            .byte	$14
01606 061E                        15            .byte	$15
01607 061F                        16            .byte	$16
01608 0620                        17            .byte	$17
01609                                           ! 439  0x01, 0x00, 0x0f, 0x00,
01610 0621                        01            .byte	1
01611 0622                        00            .byte	0
01612 0623                        0F            .byte	$F
01613 0624                        00            .byte	0
01614                                           ! 440  0
01615                                           ! 440 x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
01616 0625                        00            .byte	0
01617 0626                        00            .byte	0
01618 0627                        00            .byte	0
01619 0628                        00            .byte	0
01620 0629                        00            .byte	0
01621 062A                        00            .byte	0
01622 062B                        05            .byte	5
01623 062C                        0F            .byte	$F
01624 062D                        FF            .byte	$FF
01625                                           ! 441 },
01626                                           ! 442 {
01627                                           ! 443  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01628 062E                        00            .byte	0
01629 062F                        00            .byte	0
01630 0630                        00            .byte	0
01631 0631                        00            .byte	0
01632 0632                        00            .byte	0
01633 0633                        00            .byte	0
01634 0634                        00            .byte	0
01635 0635                        00            .byte	0
01636                                           ! 444  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01637 0636                        00            .byte	0
01638 0637                        00            .byte	0
01639 0638                        00            .byte	0
01640 0639                        00            .byte	0
01641 063A                        00            .byte	0
01642 063B                        00            .byte	0
01643 063C                        00            .byte	0
01644 063D                        00            .byte	0
01645                                           ! 445  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01646 063E                        00            .byte	0
01647 063F                        00            .byte	0
01648 0640                        00            .byte	0
01649 0641                        00            .byte	0
01650 0642                        00            .byte	0
01651 0643                        00            .byte	0
01652 0644                        00            .byte	0
01653 0645                        00            .byte	0
01654                                           ! 446  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01655 0646                        00            .byte	0
01656 0647                        00            .byte	0
01657 0648                        00            .byte	0
01658 0649                        00            .byte	0
01659 064A                        00            .byte	0
01660 064B                        00            .byte	0
01661 064C                        00            .byte	0
01662 064D                        00            .byte	0
01663                                           ! 447  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01664 064E                        00            .byte	0
01665 064F                        00            .byte	0
01666 0650                        00            .byte	0
01667 0651                        00            .byte	0
01668 0652                        00            .byte	0
01669 0653                        00            .byte	0
01670 0654                        00            .byte	0
01671 0655                        00            .byte	0
01672                                           ! 448  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01673 0656                        00            .byte	0
01674 0657                        00            .byte	0
01675 0658                        00            .byte	0
01676 0659                        00            .byte	0
01677 065A                        00            .byte	0
01678 065B                        00            .byte	0
01679 065C                        00            .byte	0
01680 065D                        00            .byte	0
01681                                           ! 449  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01682 065E                        00            .byte	0
01683 065F                        00            .byte	0
01684 0660                        00            .byte	0
01685 0661                        00            .byte	0
01686 0662                        00            .byte	0
01687 0663                        00            .byte	0
01688 0664                        00            .byte	0
01689 0665                        00            .byte	0
01690                                           ! 450  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01691 0666                        00            .byte	0
01692 0667                        00            .byte	0
01693 0668                        00            .byte	0
01694 0669                        00            .byte	0
01695 066A                        00            .byte	0
01696 066B                        00            .byte	0
01697 066C                        00            .byte	0
01698 066D                        00            .byte	0
01699                                           ! 451 },
01700                                           ! 452 {
01701                                           ! 453  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01702 066E                        00            .byte	0
01703 066F                        00            .byte	0
01704 0670                        00            .byte	0
01705 0671                        00            .byte	0
01706 0672                        00            .byte	0
01707 0673                        00            .byte	0
01708 0674                        00            .byte	0
01709 0675                        00            .byte	0
01710                                           ! 454  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01711 0676                        00            .byte	0
01712 0677                        00            .byte	0
01713 0678                        00            .byte	0
01714 0679                        00            .byte	0
01715 067A                        00            .byte	0
01716 067B                        00            .byte	0
01717 067C                        00            .byte	0
01718 067D                        00            .byte	0
01719                                           ! 455  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01720 067E                        00            .byte	0
01721 067F                        00            .byte	0
01722 0680                        00            .byte	0
01723 0681                        00            .byte	0
01724 0682                        00            .byte	0
01725 0683                        00            .byte	0
01726 0684                        00            .byte	0
01727 0685                        00            .byte	0
01728                                           ! 456  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01729 0686                        00            .byte	0
01730 0687                        00            .byte	0
01731 0688                        00            .byte	0
01732 0689                        00            .byte	0
01733 068A                        00            .byte	0
01734 068B                        00            .byte	0
01735 068C                        00            .byte	0
01736 068D                        00            .byte	0
01737                                           ! 457  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01738 068E                        00            .byte	0
01739 068F                        00            .byte	0
01740 0690                        00            .byte	0
01741 0691                        00            .byte	0
01742 0692                        00            .byte	0
01743 0693                        00            .byte	0
01744 0694                        00            .byte	0
01745 0695                        00            .byte	0
01746                                           ! 458  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01747 0696                        00            .byte	0
01748 0697                        00            .byte	0
01749 0698                        00            .byte	0
01750 0699                        00            .byte	0
01751 069A                        00            .byte	0
01752 069B                        00            .byte	0
01753 069C                        00            .byte	0
01754 069D                        00            .byte	0
01755                                           ! 459  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01756 069E                        00            .byte	0
01757 069F                        00            .byte	0
01758 06A0                        00            .byte	0
01759 06A1                        00            .byte	0
01760 06A2                        00            .byte	0
01761 06A3                        00            .byte	0
01762 06A4                        00            .byte	0
01763 06A5                        00            .byte	0
01764                                           ! 460  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01765 06A6                        00            .byte	0
01766 06A7                        00            .byte	0
01767 06A8                        00            .byte	0
01768 06A9                        00            .byte	0
01769 06AA                        00            .byte	0
01770 06AB                        00            .byte	0
01771 06AC                        00            .byte	0
01772 06AD                        00            .byte	0
01773                                           ! 461 },
01774                                           ! 462 {
01775                                           ! 463  80, 24, 14, 0x00, 0x80,
01776 06AE                        50            .byte	$50
01777 06AF                        18            .byte	$18
01778 06B0                        0E            .byte	$E
01779 06B1                        00            .byte	0
01780 06B2                        80            .byte	$80
01781                                           ! 464  0x01, 0x0f, 0x00, 0x06,
01782 06B3                        01            .byte	1
01783 06B4                        0F            .byte	$F
01784 06B5                        00            .byte	0
01785 06B6                        06            .byte	6
01786                                           ! 465  0xa3,
01787 06B7                        A3            .byte	$A3
01788                                           ! 466  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
01789 06B8                        5F            .byte	$5F
01790 06B9                        4F            .byte	$4F
01791 06BA                        50            .byte	$50
01792 06BB                        82            .byte	$82
01793 06BC                        54            .byte	$54
01794 06BD                        80            .byte	$80
01795 06BE                        BF            .byte	$BF
01796 06BF                        1F            .byte	$1F
01797                                           ! 467  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01798 06C0                        00            .byte	0
01799 06C1                        40            .byte	$40
01800 06C2                        00            .byte	0
01801 06C3                        00            .byte	0
01802 06C4                        00            .byte	0
01803 06C5                        00            .byte	0
01804 06C6                        00            .byte	0
01805 06C7                        00            .byte	0
01806                                           ! 468  0x83, 0x85, 0x5d, 0x28, 0x0f, 0x63, 0xba, 0xe3,
01807 06C8                        83            .byte	$83
01808 06C9                        85            .byte	$85
01809 06CA                        5D            .byte	$5D
01810 06CB                        28            .byte	$28
01811 06CC                        0F            .byte	$F
01812 06CD                        63            .byte	$63
01813 06CE                        BA            .byte	$BA
01814 06CF                        E3            .byte	$E3
01815                                           ! 469  0xff,
01816 06D0                        FF            .byte	$FF
01817                                           ! 470  0x00, 0x08, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00,
01818 06D1                        00            .byte	0
01819 06D2                        08            .byte	8
01820 06D3                        00            .byte	0
01821 06D4                        00            .byte	0
01822 06D5                        18            .byte	$18
01823 06D6                        18            .byte	$18
01824 06D7                        00            .byte	0
01825 06D8                        00            .byte	0
01826                                           ! 471  0x00, 0x08, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00,
01827 06D9                        00            .byte	0
01828 06DA                        08            .byte	8
01829 06DB                        00            .byte	0
01830 06DC                        00            .byte	0
01831 06DD                        00            .byte	0
01832 06DE                        18            .byte	$18
01833 06DF                        00            .byte	0
01834 06E0                        00            .byte	0
01835                                           ! 472  0x01, 0x00, 0x01, 0x00,
01836 06E1                        01            .byte	1
01837 06E2                        00            .byte	0
01838 06E3                        01            .byte	1
01839 06E4                        00            .byte	0
01840                                           ! 473  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
01841 06E5                        00            .byte	0
01842 06E6                        00            .byte	0
01843 06E7                        00            .byte	0
01844 06E8                        00            .byte	0
01845 06E9                        00            .byte	0
01846 06EA                        00            .byte	0
01847 06EB                        05            .byte	5
01848 06EC                        0F            .byte	$F
01849 06ED                        FF            .byte	$FF
01850                                           ! 474 },
01851                                           ! 475 {
01852                                           ! 476  80, 24, 14, 0x00, 0x80,
01853 06EE                        50            .byte	$50
01854 06EF                        18            .byte	$18
01855 06F0                        0E            .byte	$E
01856 06F1                        00            .byte	0
01857 06F2                        80            .byte	$80
01858                                           ! 477  0x01, 0x0f, 0x00, 0x06,
01859 06F3                        01            .byte	1
01860 06F4                        0F            .byte	$F
01861 06F5                        00            .byte	0
01862 06F6                        06            .byte	6
01863                                           ! 478  0xa3,
01864 06F7                        A3            .byte	$A3
01865                                           ! 479  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
01866 06F8                        5F            .byte	$5F
01867 06F9                        4F            .byte	$4F
01868 06FA                        50            .byte	$50
01869 06FB                        82            .byte	$82
01870 06FC                        54            .byte	$54
01871 06FD                        80            .byte	$80
01872 06FE                        BF            .byte	$BF
01873 06FF                        1F            .byte	$1F
01874                                           ! 480  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01875 0700                        00            .byte	0
01876 0701                        40            .byte	$40
01877 0702                        00            .byte	0
01878 0703                        00            .byte	0
01879 0704                        00            .byte	0
01880 0705                        00            .byte	0
01881 0706                        00            .byte	0
01882 0707                        00            .byte	0
01883                                           ! 481  0x83, 0x85, 0x5d, 0x28, 0x0f, 0x63, 0xba, 0xe3,
01884 0708                        83            .byte	$83
01885 0709                        85            .byte	$85
01886 070A                        5D            .byte	$5D
01887 070B                        28            .byte	$28
01888 070C                        0F            .byte	$F
01889 070D                        63            .byte	$63
01890 070E                        BA            .byte	$BA
01891 070F                        E3            .byte	$E3
01892                                           ! 482  0xff,
01893 0710                        FF            .byte	$FF
01894                                           ! 483  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
01895 0711                        00            .byte	0
01896 0712                        01            .byte	1
01897 0713                        02            .byte	2
01898 0714                        03            .byte	3
01899 0715                        04            .byte	4
01900 0716                        05            .byte	5
01901 0717                        14            .byte	$14
01902 0718                        07            .byte	7
01903                                           ! 484  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
01904 0719                        38            .byte	$38
01905 071A                        39            .byte	$39
01906 071B                        3A            .byte	$3A
01907 071C                        3B            .byte	$3B
01908 071D                        3C            .byte	$3C
01909 071E                        3D            .byte	$3D
01910 071F                        3E            .byte	$3E
01911 0720                        3F            .byte	$3F
01912                                           ! 485  0x01, 0x00, 0x0f, 0x00,
01913 0721                        01            .byte	1
01914 0722                        00            .byte	0
01915 0723                        0F            .byte	$F
01916 0724                        00            .byte	0
01917                                           ! 486  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
01918 0725                        00            .byte	0
01919 0726                        00            .byte	0
01920 0727                        00            .byte	0
01921 0728                        00            .byte	0
01922 0729                        00            .byte	0
01923 072A                        00            .byte	0
01924 072B                        05            .byte	5
01925 072C                        0F            .byte	$F
01926 072D                        FF            .byte	$FF
01927                                           ! 487 },
01928                                           ! 488 {
01929                                           ! 489  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01930 072E                        00            .byte	0
01931 072F                        00            .byte	0
01932 0730                        00            .byte	0
01933 0731                        00            .byte	0
01934 0732                        00            .byte	0
01935 0733                        00            .byte	0
01936 0734                        00            .byte	0
01937 0735                        00            .byte	0
01938                                           ! 490  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01939 0736                        00            .byte	0
01940 0737                        00            .byte	0
01941 0738                        00            .byte	0
01942 0739                        00            .byte	0
01943 073A                        00            .byte	0
01944 073B                        00            .byte	0
01945 073C                        00            .byte	0
01946 073D                        00            .byte	0
01947                                           ! 491  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01948 073E                        00            .byte	0
01949 073F                        00            .byte	0
01950 0740                        00            .byte	0
01951 0741                        00            .byte	0
01952 0742                        00            .byte	0
01953 0743                        00            .byte	0
01954 0744                        00            .byte	0
01955 0745                        00            .byte	0
01956                                           ! 492  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01957 0746                        00            .byte	0
01958 0747                        00            .byte	0
01959 0748                        00            .byte	0
01960 0749                        00            .byte	0
01961 074A                        00            .byte	0
01962 074B                        00            .byte	0
01963 074C                        00            .byte	0
01964 074D                        00            .byte	0
01965                                           ! 493  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01966 074E                        00            .byte	0
01967 074F                        00            .byte	0
01968 0750                        00            .byte	0
01969 0751                        00            .byte	0
01970 0752                        00            .byte	0
01971 0753                        00            .byte	0
01972 0754                        00            .byte	0
01973 0755                        00            .byte	0
01974                                           ! 494  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01975 0756                        00            .byte	0
01976 0757                        00            .byte	0
01977 0758                        00            .byte	0
01978 0759                        00            .byte	0
01979 075A                        00            .byte	0
01980 075B                        00            .byte	0
01981 075C                        00            .byte	0
01982 075D                        00            .byte	0
01983                                           ! 495  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01984 075E                        00            .byte	0
01985 075F                        00            .byte	0
01986 0760                        00            .byte	0
01987 0761                        00            .byte	0
01988 0762                        00            .byte	0
01989 0763                        00            .byte	0
01990 0764                        00            .byte	0
01991 0765                        00            .byte	0
01992                                           ! 496  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01993 0766                        00            .byte	0
01994 0767                        00            .byte	0
01995 0768                        00            .byte	0
01996 0769                        00            .byte	0
01997 076A                        00            .byte	0
01998 076B                        00            .byte	0
01999 076C                        00            .byte	0
02000 076D                        00            .byte	0
02001                                           ! 497 },
02002                                           ! 498 {
02003                                           ! 499  0x00, 0x00
02004 076E                        00            .byte	0
02005                                           ! 499 , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02006 076F                        00            .byte	0
02007 0770                        00            .byte	0
02008 0771                        00            .byte	0
02009 0772                        00            .byte	0
02010 0773                        00            .byte	0
02011 0774                        00            .byte	0
02012 0775                        00            .byte	0
02013                                           ! 500  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02014 0776                        00            .byte	0
02015 0777                        00            .byte	0
02016 0778                        00            .byte	0
02017 0779                        00            .byte	0
02018 077A                        00            .byte	0
02019 077B                        00            .byte	0
02020 077C                        00            .byte	0
02021 077D                        00            .byte	0
02022                                           ! 501  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02023 077E                        00            .byte	0
02024 077F                        00            .byte	0
02025 0780                        00            .byte	0
02026 0781                        00            .byte	0
02027 0782                        00            .byte	0
02028 0783                        00            .byte	0
02029 0784                        00            .byte	0
02030 0785                        00            .byte	0
02031                                           ! 502  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02032 0786                        00            .byte	0
02033 0787                        00            .byte	0
02034 0788                        00            .byte	0
02035 0789                        00            .byte	0
02036 078A                        00            .byte	0
02037 078B                        00            .byte	0
02038 078C                        00            .byte	0
02039 078D                        00            .byte	0
02040                                           ! 503  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02041 078E                        00            .byte	0
02042 078F                        00            .byte	0
02043 0790                        00            .byte	0
02044 0791                        00            .byte	0
02045 0792                        00            .byte	0
02046 0793                        00            .byte	0
02047 0794                        00            .byte	0
02048 0795                        00            .byte	0
02049                                           ! 504  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02050 0796                        00            .byte	0
02051 0797                        00            .byte	0
02052 0798                        00            .byte	0
02053 0799                        00            .byte	0
02054 079A                        00            .byte	0
02055 079B                        00            .byte	0
02056 079C                        00            .byte	0
02057 079D                        00            .byte	0
02058                                           ! 505  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02059 079E                        00            .byte	0
02060 079F                        00            .byte	0
02061 07A0                        00            .byte	0
02062 07A1                        00            .byte	0
02063 07A2                        00            .byte	0
02064 07A3                        00            .byte	0
02065 07A4                        00            .byte	0
02066 07A5                        00            .byte	0
02067                                           ! 506  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02068 07A6                        00            .byte	0
02069 07A7                        00            .byte	0
02070 07A8                        00            .byte	0
02071 07A9                        00            .byte	0
02072 07AA                        00            .byte	0
02073 07AB                        00            .byte	0
02074 07AC                        00            .byte	0
02075 07AD                        00            .byte	0
02076                                           ! 507 },
02077                                           ! 508 {
02078                                           ! 509  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02079 07AE                        00            .byte	0
02080 07AF                        00            .byte	0
02081 07B0                        00            .byte	0
02082 07B1                        00            .byte	0
02083 07B2                        00            .byte	0
02084 07B3                        00            .byte	0
02085 07B4                        00            .byte	0
02086 07B5                        00            .byte	0
02087                                           ! 510  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02088 07B6                        00            .byte	0
02089 07B7                        00            .byte	0
02090 07B8                        00            .byte	0
02091 07B9                        00            .byte	0
02092 07BA                        00            .byte	0
02093 07BB                        00            .byte	0
02094 07BC                        00            .byte	0
02095 07BD                        00            .byte	0
02096                                           ! 511  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02097 07BE                        00            .byte	0
02098 07BF                        00            .byte	0
02099 07C0                        00            .byte	0
02100 07C1                        00            .byte	0
02101 07C2                        00            .byte	0
02102 07C3                        00            .byte	0
02103 07C4                        00            .byte	0
02104 07C5                        00            .byte	0
02105                                           ! 512  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02106 07C6                        00            .byte	0
02107 07C7                        00            .byte	0
02108 07C8                        00            .byte	0
02109 07C9                        00            .byte	0
02110 07CA                        00            .byte	0
02111 07CB                        00            .byte	0
02112 07CC                        00            .byte	0
02113 07CD                        00            .byte	0
02114                                           ! 513  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02115 07CE                        00            .byte	0
02116 07CF                        00            .byte	0
02117 07D0                        00            .byte	0
02118 07D1                        00            .byte	0
02119 07D2                        00            .byte	0
02120 07D3                        00            .byte	0
02121 07D4                        00            .byte	0
02122 07D5                        00            .byte	0
02123                                           ! 514  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02124 07D6                        00            .byte	0
02125 07D7                        00            .byte	0
02126 07D8                        00            .byte	0
02127 07D9                        00            .byte	0
02128 07DA                        00            .byte	0
02129 07DB                        00            .byte	0
02130 07DC                        00            .byte	0
02131 07DD                        00            .byte	0
02132                                           ! 515  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02133 07DE                        00            .byte	0
02134 07DF                        00            .byte	0
02135 07E0                        00            .byte	0
02136 07E1                        00            .byte	0
02137 07E2                        00            .byte	0
02138 07E3                        00            .byte	0
02139 07E4                        00            .byte	0
02140 07E5                        00            .byte	0
02141                                           ! 516  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02142 07E6                        00            .byte	0
02143 07E7                        00            .byte	0
02144 07E8                        00            .byte	0
02145 07E9                        00            .byte	0
02146 07EA                        00            .byte	0
02147 07EB                        00            .byte	0
02148 07EC                        00            .byte	0
02149 07ED                        00            .byte	0
02150                                           ! 517 },
02151                                           ! 518 {
02152                                           ! 519  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02153 07EE                        00            .byte	0
02154 07EF                        00            .byte	0
02155 07F0                        00            .byte	0
02156 07F1                        00            .byte	0
02157 07F2                        00            .byte	0
02158 07F3                        00            .byte	0
02159 07F4                        00            .byte	0
02160 07F5                        00            .byte	0
02161                                           ! 520  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02162 07F6                        00            .byte	0
02163 07F7                        00            .byte	0
02164 07F8                        00            .byte	0
02165 07F9                        00            .byte	0
02166 07FA                        00            .byte	0
02167 07FB                        00            .byte	0
02168 07FC                        00            .byte	0
02169 07FD                        00            .byte	0
02170                                           ! 521  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02171 07FE                        00            .byte	0
02172 07FF                        00            .byte	0
02173 0800                        00            .byte	0
02174 0801                        00            .byte	0
02175 0802                        00            .byte	0
02176 0803                        00            .byte	0
02177 0804                        00            .byte	0
02178 0805                        00            .byte	0
02179                                           ! 522  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02180 0806                        00            .byte	0
02181 0807                        00            .byte	0
02182 0808                        00            .byte	0
02183 0809                        00            .byte	0
02184 080A                        00            .byte	0
02185 080B                        00            .byte	0
02186 080C                        00            .byte	0
02187 080D                        00            .byte	0
02188                                           ! 523  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02189 080E                        00            .byte	0
02190 080F                        00            .byte	0
02191 0810                        00            .byte	0
02192 0811                        00            .byte	0
02193 0812                        00            .byte	0
02194 0813                        00            .byte	0
02195 0814                        00            .byte	0
02196 0815                        00            .byte	0
02197                                           ! 524  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02198 0816                        00            .byte	0
02199 0817                        00            .byte	0
02200 0818                        00            .byte	0
02201 0819                        00            .byte	0
02202 081A                        00            .byte	0
02203 081B                        00            .byte	0
02204 081C                        00            .byte	0
02205 081D                        00            .byte	0
02206                                           ! 525  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02207 081E                        00            .byte	0
02208 081F                        00            .byte	0
02209 0820                        00            .byte	0
02210 0821                        00            .byte	0
02211 0822                        00            .byte	0
02212 0823                        00            .byte	0
02213 0824                        00            .byte	0
02214 0825                        00            .byte	0
02215                                           ! 526  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02216 0826                        00            .byte	0
02217 0827                        00            .byte	0
02218 0828                        00            .byte	0
02219 0829                        00            .byte	0
02220 082A                        00            .byte	0
02221 082B                        00            .byte	0
02222 082C                        00            .byte	0
02223 082D                        00            .byte	0
02224                                           ! 527 },
02225                                           ! 528 {
02226                                           ! 529  40, 24, 16, 0x00, 0x08,
02227 082E                        28            .byte	$28
02228 082F                        18            .byte	$18
02229 0830                        10            .byte	$10
02230 0831                        00            .byte	0
02231 0832                        08            .byte	8
02232                                           ! 530  0x08, 0x03, 0x00, 0x02,
02233 0833                        08            .byte	8
02234 0834                        03            .byte	3
02235 0835                        00            .byte	0
02236 0836                        02            .byte	2
02237                                           ! 531  0x67,
02238 0837                        67            .byte	$67
02239                                           ! 532  0x2d, 0x27, 0x28, 0x90, 0x2b, 0xa0, 0xbf, 0x1f,
02240 0838                        2D            .byte	$2D
02241 0839                        27            .byte	$27
02242 083A                        28            .byte	$28
02243 083B                        90            .byte	$90
02244 083C                        2B            .byte	$2B
02245 083D                        A0            .byte	$A0
02246 083E                        BF            .byte	$BF
02247 083F                        1F            .byte	$1F
02248                                           ! 533  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
02249 0840                        00            .byte	0
02250 0841                        4F            .byte	$4F
02251 0842                        0D            .byte	$D
02252 0843                        0E            .byte	$E
02253 0844                        00            .byte	0
02254 0845                        00            .byte	0
02255 0846                        00            .byte	0
02256 0847                        00            .byte	0
02257                                           ! 534  0x9c, 0x8e, 0x8f, 0x14, 0x1f, 0x96, 0xb9, 0xa3,
02258 0848                        9C            .byte	$9C
02259 0849                        8E            .byte	$8E
02260 084A                        8F            .byte	$8F
02261 084B                        14            .byte	$14
02262 084C                        1F            .byte	$1F
02263 084D                        96            .byte	$96
02264 084E                        B9            .byte	$B9
02265 084F                        A3            .byte	$A3
02266                                           ! 535  0xff,
02267 0850                        FF            .byte	$FF
02268                                           ! 536  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02269 0851                        00            .byte	0
02270 0852                        01            .byte	1
02271 0853                        02            .byte	2
02272 0854                        03            .byte	3
02273 0855                        04            .byte	4
02274 0856                        05            .byte	5
02275 0857                        14            .byte	$14
02276 0858                        07            .byte	7
02277                                           ! 537  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02278 0859                        38            .byte	$38
02279 085A                        39            .byte	$39
02280 085B                        3A            .byte	$3A
02281 085C                        3B            .byte	$3B
02282 085D                        3C            .byte	$3C
02283 085E                        3D            .byte	$3D
02284 085F                        3E            .byte	$3E
02285 0860                        3F            .byte	$3F
02286                                           ! 538  0x0c, 0x00, 0x0f, 0x08,
02287 0861                        0C            .byte	$C
02288 0862                        00            .byte	0
02289 0863                        0F            .byte	$F
02290 0864                        08            .byte	8
02291                                           ! 539  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0e, 0x0f, 0xff,
02292 0865                        00            .byte	0
02293 0866                        00            .byte	0
02294 0867                        00            .byte	0
02295 0868                        00            .byte	0
02296 0869                        00            .byte	0
02297 086A                        10            .byte	$10
02298 086B                        0E            .byte	$E
02299 086C                        0F            .byte	$F
02300 086D                        FF            .byte	$FF
02301                                           ! 540 },
02302                                           ! 541 {
02303                                           ! 542  80, 24, 16, 0x00, 0x10,
02304 086E                        50            .byte	$50
02305 086F                        18            .byte	$18
02306 0870                        10            .byte	$10
02307 0871                        00            .byte	0
02308 0872                        10            .byte	$10
02309                                           ! 543  0x00, 0x03, 0x00, 0x02,
02310 0873                        00            .byte	0
02311 0874                        03            .byte	3
02312 0875                        00            .byte	0
02313 0876                        02            .byte	2
02314                                           ! 544  0x67,
02315 0877                        67            .byte	$67
02316                                           ! 545  0x5f, 0x4f, 0x50, 0x82, 0x55, 0x81, 0xbf, 0x1f,
02317 0878                        5F            .byte	$5F
02318 0879                        4F            .byte	$4F
02319 087A                        50            .byte	$50
02320 087B                        82            .byte	$82
02321 087C                        55            .byte	$55
02322 087D                        81            .byte	$81
02323 087E                        BF            .byte	$BF
02324 087F                        1F            .byte	$1F
02325                                           ! 546  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
02326 0880                        00            .byte	0
02327 0881                        4F            .byte	$4F
02328 0882                        0D            .byte	$D
02329 0883                        0E            .byte	$E
02330 0884                        00            .byte	0
02331 0885                        00            .byte	0
02332 0886                        00            .byte	0
02333 0887                        00            .byte	0
02334                                           ! 547  0x9c, 0x8e, 0x8f, 0x28, 0x1f, 0x96, 0xb9, 0xa3,
02335 0888                        9C            .byte	$9C
02336 0889                        8E            .byte	$8E
02337 088A                        8F            .byte	$8F
02338 088B                        28            .byte	$28
02339 088C                        1F            .byte	$1F
02340 088D                        96            .byte	$96
02341 088E                        B9            .byte	$B9
02342 088F                        A3            .byte	$A3
02343                                           ! 548  0xff,
02344 0890                        FF            .byte	$FF
02345                                           ! 549  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02346 0891                        00            .byte	0
02347 0892                        01            .byte	1
02348 0893                        02            .byte	2
02349 0894                        03            .byte	3
02350 0895                        04            .byte	4
02351 0896                        05            .byte	5
02352 0897                        14            .byte	$14
02353 0898                        07            .byte	7
02354                                           ! 550  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02355 0899                        38            .byte	$38
02356 089A                        39            .byte	$39
02357 089B                        3A            .byte	$3A
02358 089C                        3B            .byte	$3B
02359 089D                        3C            .byte	$3C
02360 089E                        3D            .byte	$3D
02361 089F                        3E            .byte	$3E
02362 08A0                        3F            .byte	$3F
02363                                           ! 551  0x0c, 0x00, 0x0f, 0x08,
02364 08A1                        0C            .byte	$C
02365 08A2                        00            .byte	0
02366 08A3                        0F            .byte	$F
02367 08A4                        08            .byte	8
02368                                           ! 552  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0e, 0x0f, 0xff,
02369 08A5                        00            .byte	0
02370 08A6                        00            .byte	0
02371 08A7                        00            .byte	0
02372 08A8                        00            .byte	0
02373 08A9                        00            .byte	0
02374 08AA                        10            .byte	$10
02375 08AB                        0E            .byte	$E
02376 08AC                        0F            .byte	$F
02377 08AD                        FF            .byte	$FF
02378                                           ! 553 },
02379                                           ! 554 {
02380                                           ! 555  80, 24, 16, 0x00, 0x10,
02381 08AE                        50            .byte	$50
02382 08AF                        18            .byte	$18
02383 08B0                        10            .byte	$10
02384 08B1                        00            .byte	0
02385 08B2                        10            .byte	$10
02386                                           ! 556  0x00, 0x03, 0x00, 0x02,
02387 08B3                        00            .byte	0
02388 08B4                        03            .byte	3
02389 08B5                        00            .byte	0
02390 08B6                        02            .byte	2
02391                                           ! 557  0x66,
02392 08B7                        66            .byte	$66
02393                                           ! 558  0x5f, 0x4f, 0x50, 0x82
02394 08B8                        5F            .byte	$5F
02395 08B9                        4F            .byte	$4F
02396 08BA                        50            .byte	$50
02397                                           ! 558 , 0x55, 0x81, 0xbf, 0x1f,
02398 08BB                        82            .byte	$82
02399 08BC                        55            .byte	$55
02400 08BD                        81            .byte	$81
02401 08BE                        BF            .byte	$BF
02402 08BF                        1F            .byte	$1F
02403                                           ! 559  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
02404 08C0                        00            .byte	0
02405 08C1                        4F            .byte	$4F
02406 08C2                        0D            .byte	$D
02407 08C3                        0E            .byte	$E
02408 08C4                        00            .byte	0
02409 08C5                        00            .byte	0
02410 08C6                        00            .byte	0
02411 08C7                        00            .byte	0
02412                                           ! 560  0x9c, 0x8e, 0x8f, 0x28, 0x0f, 0x96, 0xb9, 0xa3,
02413 08C8                        9C            .byte	$9C
02414 08C9                        8E            .byte	$8E
02415 08CA                        8F            .byte	$8F
02416 08CB                        28            .byte	$28
02417 08CC                        0F            .byte	$F
02418 08CD                        96            .byte	$96
02419 08CE                        B9            .byte	$B9
02420 08CF                        A3            .byte	$A3
02421                                           ! 561  0xff,
02422 08D0                        FF            .byte	$FF
02423                                           ! 562  0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
02424 08D1                        00            .byte	0
02425 08D2                        08            .byte	8
02426 08D3                        08            .byte	8
02427 08D4                        08            .byte	8
02428 08D5                        08            .byte	8
02429 08D6                        08            .byte	8
02430 08D7                        08            .byte	8
02431 08D8                        08            .byte	8
02432                                           ! 563  0x10, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
02433 08D9                        10            .byte	$10
02434 08DA                        18            .byte	$18
02435 08DB                        18            .byte	$18
02436 08DC                        18            .byte	$18
02437 08DD                        18            .byte	$18
02438 08DE                        18            .byte	$18
02439 08DF                        18            .byte	$18
02440 08E0                        18            .byte	$18
02441                                           ! 564  0x0e, 0x00, 0x0f, 0x08,
02442 08E1                        0E            .byte	$E
02443 08E2                        00            .byte	0
02444 08E3                        0F            .byte	$F
02445 08E4                        08            .byte	8
02446                                           ! 565  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0a, 0x0f, 0xff,
02447 08E5                        00            .byte	0
02448 08E6                        00            .byte	0
02449 08E7                        00            .byte	0
02450 08E8                        00            .byte	0
02451 08E9                        00            .byte	0
02452 08EA                        10            .byte	$10
02453 08EB                        0A            .byte	$A
02454 08EC                        0F            .byte	$F
02455 08ED                        FF            .byte	$FF
02456                                           ! 566 },
02457                                           ! 567 {
02458                                           ! 568  80, 29, 16, 0x00, 0x00,
02459 08EE                        50            .byte	$50
02460 08EF                        1D            .byte	$1D
02461 08F0                        10            .byte	$10
02462 08F1                        00            .byte	0
02463 08F2                        00            .byte	0
02464                                           ! 569  0x01, 0x0f, 0x00, 0x06,
02465 08F3                        01            .byte	1
02466 08F4                        0F            .byte	$F
02467 08F5                        00            .byte	0
02468 08F6                        06            .byte	6
02469                                           ! 570  0xe3,
02470 08F7                        E3            .byte	$E3
02471                                           ! 571  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0x0b, 0x3e,
02472 08F8                        5F            .byte	$5F
02473 08F9                        4F            .byte	$4F
02474 08FA                        50            .byte	$50
02475 08FB                        82            .byte	$82
02476 08FC                        54            .byte	$54
02477 08FD                        80            .byte	$80
02478 08FE                        0B            .byte	$B
02479 08FF                        3E            .byte	$3E
02480                                           ! 572  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02481 0900                        00            .byte	0
02482 0901                        40            .byte	$40
02483 0902                        00            .byte	0
02484 0903                        00            .byte	0
02485 0904                        00            .byte	0
02486 0905                        00            .byte	0
02487 0906                        00            .byte	0
02488 0907                        00            .byte	0
02489                                           ! 573  0xea, 0x8c, 0xdf, 0x28, 0x00, 0xe7, 0x04, 0xe3,
02490 0908                        EA            .byte	$EA
02491 0909                        8C            .byte	$8C
02492 090A                        DF            .byte	$DF
02493 090B                        28            .byte	$28
02494 090C                        00            .byte	0
02495 090D                        E7            .byte	$E7
02496 090E                        04            .byte	4
02497 090F                        E3            .byte	$E3
02498                                           ! 574  0xff,
02499 0910                        FF            .byte	$FF
02500                                           ! 575  0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f,
02501 0911                        00            .byte	0
02502 0912                        3F            .byte	$3F
02503 0913                        00            .byte	0
02504 0914                        3F            .byte	$3F
02505 0915                        00            .byte	0
02506 0916                        3F            .byte	$3F
02507 0917                        00            .byte	0
02508 0918                        3F            .byte	$3F
02509                                           ! 576  0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f,
02510 0919                        00            .byte	0
02511 091A                        3F            .byte	$3F
02512 091B                        00            .byte	0
02513 091C                        3F            .byte	$3F
02514 091D                        00            .byte	0
02515 091E                        3F            .byte	$3F
02516 091F                        00            .byte	0
02517 0920                        3F            .byte	$3F
02518                                           ! 577  0x01, 0x00, 0x0f, 0x00,
02519 0921                        01            .byte	1
02520 0922                        00            .byte	0
02521 0923                        0F            .byte	$F
02522 0924                        00            .byte	0
02523                                           ! 578  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02524 0925                        00            .byte	0
02525 0926                        00            .byte	0
02526 0927                        00            .byte	0
02527 0928                        00            .byte	0
02528 0929                        00            .byte	0
02529 092A                        00            .byte	0
02530 092B                        05            .byte	5
02531 092C                        0F            .byte	$F
02532 092D                        FF            .byte	$FF
02533                                           ! 579 },
02534                                           ! 580 {
02535                                           ! 581  80, 29, 16, 0x00, 0x00,
02536 092E                        50            .byte	$50
02537 092F                        1D            .byte	$1D
02538 0930                        10            .byte	$10
02539 0931                        00            .byte	0
02540 0932                        00            .byte	0
02541                                           ! 582  0x01, 0x0f, 0x00, 0x06,
02542 0933                        01            .byte	1
02543 0934                        0F            .byte	$F
02544 0935                        00            .byte	0
02545 0936                        06            .byte	6
02546                                           ! 583  0xe3,
02547 0937                        E3            .byte	$E3
02548                                           ! 584  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0x0b, 0x3e,
02549 0938                        5F            .byte	$5F
02550 0939                        4F            .byte	$4F
02551 093A                        50            .byte	$50
02552 093B                        82            .byte	$82
02553 093C                        54            .byte	$54
02554 093D                        80            .byte	$80
02555 093E                        0B            .byte	$B
02556 093F                        3E            .byte	$3E
02557                                           ! 585  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02558 0940                        00            .byte	0
02559 0941                        40            .byte	$40
02560 0942                        00            .byte	0
02561 0943                        00            .byte	0
02562 0944                        00            .byte	0
02563 0945                        00            .byte	0
02564 0946                        00            .byte	0
02565 0947                        00            .byte	0
02566                                           ! 586  0xea, 0x8c, 0xdf, 0x28, 0x00, 0xe7, 0x04, 0xe3,
02567 0948                        EA            .byte	$EA
02568 0949                        8C            .byte	$8C
02569 094A                        DF            .byte	$DF
02570 094B                        28            .byte	$28
02571 094C                        00            .byte	0
02572 094D                        E7            .byte	$E7
02573 094E                        04            .byte	4
02574 094F                        E3            .byte	$E3
02575                                           ! 587  0xff,
02576 0950                        FF            .byte	$FF
02577                                           ! 588  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02578 0951                        00            .byte	0
02579 0952                        01            .byte	1
02580 0953                        02            .byte	2
02581 0954                        03            .byte	3
02582 0955                        04            .byte	4
02583 0956                        05            .byte	5
02584 0957                        14            .byte	$14
02585 0958                        07            .byte	7
02586                                           ! 589  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02587 0959                        38            .byte	$38
02588 095A                        39            .byte	$39
02589 095B                        3A            .byte	$3A
02590 095C                        3B            .byte	$3B
02591 095D                        3C            .byte	$3C
02592 095E                        3D            .byte	$3D
02593 095F                        3E            .byte	$3E
02594 0960                        3F            .byte	$3F
02595                                           ! 590  0x01, 0x00, 0x0f, 0x00,
02596 0961                        01            .byte	1
02597 0962                        00            .byte	0
02598 0963                        0F            .byte	$F
02599 0964                        00            .byte	0
02600                                           ! 591  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02601 0965                        00            .byte	0
02602 0966                        00            .byte	0
02603 0967                        00            .byte	0
02604 0968                        00            .byte	0
02605 0969                        00            .byte	0
02606 096A                        00            .byte	0
02607 096B                        05            .byte	5
02608 096C                        0F            .byte	$F
02609 096D                        FF            .byte	$FF
02610                                           ! 592 },
02611                                           ! 593 {
02612                                           ! 594  40, 24, 8, 0x00, 0x00,
02613 096E                        28            .byte	$28
02614 096F                        18            .byte	$18
02615 0970                        08            .byte	8
02616 0971                        00            .byte	0
02617 0972                        00            .byte	0
02618                                           ! 595  0x01, 0x0f, 0x00, 0x0e,
02619 0973                        01            .byte	1
02620 0974                        0F            .byte	$F
02621 0975                        00            .byte	0
02622 0976                        0E            .byte	$E
02623                                           ! 596  0x63,
02624 0977                        63            .byte	$63
02625                                           ! 597  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
02626 0978                        5F            .byte	$5F
02627 0979                        4F            .byte	$4F
02628 097A                        50            .byte	$50
02629 097B                        82            .byte	$82
02630 097C                        54            .byte	$54
02631 097D                        80            .byte	$80
02632 097E                        BF            .byte	$BF
02633 097F                        1F            .byte	$1F
02634                                           ! 598  0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02635 0980                        00            .byte	0
02636 0981                        41            .byte	$41
02637 0982                        00            .byte	0
02638 0983                        00            .byte	0
02639 0984                        00            .byte	0
02640 0985                        00            .byte	0
02641 0986                        00            .byte	0
02642 0987                        00            .byte	0
02643                                           ! 599  0x9c, 0x8e, 0x8f, 0x28, 0x40, 0x96, 0xb9, 0xa3,
02644 0988                        9C            .byte	$9C
02645 0989                        8E            .byte	$8E
02646 098A                        8F            .byte	$8F
02647 098B                        28            .byte	$28
02648 098C                        40            .byte	$40
02649 098D                        96            .byte	$96
02650 098E                        B9            .byte	$B9
02651 098F                        A3            .byte	$A3
02652                                           ! 600  0xff,
02653 0990                        FF            .byte	$FF
02654                                           ! 601  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
02655 0991                        00            .byte	0
02656 0992                        01            .byte	1
02657 0993                        02            .byte	2
02658 0994                        03            .byte	3
02659 0995                        04            .byte	4
02660 0996                        05            .byte	5
02661 0997                        06            .byte	6
02662 0998                        07            .byte	7
02663                                           ! 602  0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
02664 0999                        08            .byte	8
02665 099A                        09            .byte	9
02666 099B                        0A            .byte	$A
02667 099C                        0B            .byte	$B
02668 099D                        0C            .byte	$C
02669 099E                        0D            .byte	$D
02670 099F                        0E            .byte	$E
02671 09A0                        0F            .byte	$F
02672                                           ! 603  0x41, 0x00, 0x0f, 0x00,
02673 09A1                        41            .byte	$41
02674 09A2                        00            .byte	0
02675 09A3                        0F            .byte	$F
02676 09A4                        00            .byte	0
02677                                           ! 604  0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x05, 0x0f, 0xff,
02678 09A5                        00            .byte	0
02679 09A6                        00            .byte	0
02680 09A7                        00            .byte	0
02681 09A8                        00            .byte	0
02682 09A9                        00            .byte	0
02683 09AA                        40            .byte	$40
02684 09AB                        05            .byte	5
02685 09AC                        0F            .byte	$F
02686 09AD                        FF            .byte	$FF
02687                                           ! 605 },
02688                                           ! 606 {
02689                                           ! 607  100, 36, 16, 0x00, 0x00,
02690 09AE                        64            .byte	$64
02691 09AF                        24            .byte	$24
02692 09B0                        10            .byte	$10
02693 09B1                        00            .byte	0
02694 09B2                        00            .byte	0
02695                                           ! 608  0x01, 0x0f, 0x00, 0x06,
02696 09B3                        01            .byte	1
02697 09B4                        0F            .byte	$F
02698 09B5                        00            .byte	0
02699 09B6                        06            .byte	6
02700                                           ! 609  0xe3,
02701 09B7                        E3            .byte	$E3
02702                                           ! 610  0x7f, 0x63, 0x63, 0x83, 0x6b, 0x1b, 0x72, 0xf0,
02703 09B8                        7F            .byte	$7F
02704 09B9                        63            .byte	$63
02705 09BA                        63            .byte	$63
02706 09BB                        83            .byte	$83
02707 09BC                        6B            .byte	$6B
02708 09BD                        1B            .byte	$1B
02709 09BE                        72            .byte	$72
02710 09BF                        F0            .byte	$F0
02711                                           ! 611  0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02712 09C0                        00            .byte	0
02713 09C1                        60            .byte	$60
02714 09C2                        00            .byte	0
02715 09C3                        00            .byte	0
02716 09C4                        00            .byte	0
02717 09C5                        00            .byte	0
02718 09C6                        00            .byte	0
02719 09C7                        00            .byte	0
02720                                           ! 612  0x59, 0x8d, 0x57, 0x32, 0x00, 0x57, 0x73, 0xe3,
02721 09C8                        59            .byte	$59
02722 09C9                        8D            .byte	$8D
02723 09CA                        57            .byte	$57
02724 09CB                        32            .byte	$32
02725 09CC                        00            .byte	0
02726 09CD                        57            .byte	$57
02727 09CE                        73            .byte	$73
02728 09CF                        E3            .byte	$E3
02729                                           ! 613  0xff,
02730 09D0                        FF            .byte	$FF
02731                                           ! 614  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02732 09D1                        00            .byte	0
02733 09D2                        01            .byte	1
02734 09D3                        02            .byte	2
02735 09D4                        03            .byte	3
02736 09D5                        04            .byte	4
02737 09D6                        05            .byte	5
02738 09D7                        14            .byte	$14
02739 09D8                        07            .byte	7
02740                                           ! 615  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02741 09D9                        38            .byte	$38
02742 09DA                        39            .byte	$39
02743 09DB                        3A            .byte	$3A
02744 09DC                        3B            .byte	$3B
02745 09DD                        3C            .byte	$3C
02746 09DE                        3D            .byte	$3D
02747 09DF                        3E            .byte	$3E
02748 09E0                        3F            .byte	$3F
02749                                           ! 616  0x01, 0x00, 0x0f, 0x00,
02750 09E1                        01            .byte	1
02751 09E2                        00            .byte	0
02752 09E3                        0F            .byte	$F
02753 09E4                        00            .byte	0
02754                                           ! 617  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02755 09E5                        00            .byte	0
02756 09E6                        00            .byte	0
02757 09E7                        00            .byte	0
02758 09E8                        00            .byte	0
02759 09E9                        00            .byte	0
02760 09EA                        00            .byte	0
02761 09EB                        05            .byte	5
02762 09EC                        0F            .byte	$F
02763 09ED                        FF            .byte	$FF
02764                                           ! 618 },
02765                                           ! 619 };
02766                                           !BCC_EOS
02767                                           ! 620 static Bit8u palette0[63+1][3]=
02768                                           ! 621 {
02769                       000009EE            _palette0:
02770                                           ! 622   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00
02771 09EE                        00            .byte	0
02772 09EF                        00            .byte	0
02773 09F0                        00            .byte	0
02774 09F1                        00            .byte	0
02775 09F2                        00            .byte	0
02776 09F3                        00            .byte	0
02777 09F4                        00            .byte	0
02778 09F5                        00            .byte	0
02779 09F6                        00            .byte	0
02780 09F7                        00            .byte	0
02781 09F8                        00            .byte	0
02782 09F9                        00            .byte	0
02783 09FA                        00            .byte	0
02784 09FB                        00            .byte	0
02785 09FC                        00            .byte	0
02786 09FD                        00            .byte	0
02787 09FE                        00            .byte	0
02788 09FF                        00            .byte	0
02789 0A00                        00            .byte	0
02790 0A01                        00            .byte	0
02791 0A02                        00            .byte	0
02792 0A03                        00            .byte	0
02793                                           ! 622 ,0x00,
02794 0A04                        00            .byte	0
02795 0A05                        00            .byte	0
02796                                           ! 623   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
02797 0A06                        2A            .byte	$2A
02798 0A07                        2A            .byte	$2A
02799 0A08                        2A            .byte	$2A
02800 0A09                        2A            .byte	$2A
02801 0A0A                        2A            .byte	$2A
02802 0A0B                        2A            .byte	$2A
02803 0A0C                        2A            .byte	$2A
02804 0A0D                        2A            .byte	$2A
02805 0A0E                        2A            .byte	$2A
02806 0A0F                        2A            .byte	$2A
02807 0A10                        2A            .byte	$2A
02808 0A11                        2A            .byte	$2A
02809 0A12                        2A            .byte	$2A
02810 0A13                        2A            .byte	$2A
02811 0A14                        2A            .byte	$2A
02812 0A15                        2A            .byte	$2A
02813 0A16                        2A            .byte	$2A
02814 0A17                        2A            .byte	$2A
02815 0A18                        2A            .byte	$2A
02816 0A19                        2A            .byte	$2A
02817 0A1A                        2A            .byte	$2A
02818 0A1B                        2A            .byte	$2A
02819 0A1C                        2A            .byte	$2A
02820 0A1D                        2A            .byte	$2A
02821                                           ! 624   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
02822 0A1E                        2A            .byte	$2A
02823 0A1F                        2A            .byte	$2A
02824 0A20                        2A            .byte	$2A
02825 0A21                        2A            .byte	$2A
02826 0A22                        2A            .byte	$2A
02827 0A23                        2A            .byte	$2A
02828 0A24                        2A            .byte	$2A
02829 0A25                        2A            .byte	$2A
02830 0A26                        2A            .byte	$2A
02831 0A27                        2A            .byte	$2A
02832 0A28                        2A            .byte	$2A
02833 0A29                        2A            .byte	$2A
02834 0A2A                        2A            .byte	$2A
02835 0A2B                        2A            .byte	$2A
02836 0A2C                        2A            .byte	$2A
02837 0A2D                        2A            .byte	$2A
02838 0A2E                        2A            .byte	$2A
02839 0A2F                        2A            .byte	$2A
02840 0A30                        2A            .byte	$2A
02841 0A31                        2A            .byte	$2A
02842 0A32                        2A            .byte	$2A
02843 0A33                        2A            .byte	$2A
02844 0A34                        2A            .byte	$2A
02845 0A35                        2A            .byte	$2A
02846                                           ! 625   0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f,
02847 0A36                        3F            .byte	$3F
02848 0A37                        3F            .byte	$3F
02849 0A38                        3F            .byte	$3F
02850 0A39                        3F            .byte	$3F
02851 0A3A                        3F            .byte	$3F
02852 0A3B                        3F            .byte	$3F
02853 0A3C                        3F            .byte	$3F
02854 0A3D                        3F            .byte	$3F
02855 0A3E                        3F            .byte	$3F
02856 0A3F                        3F            .byte	$3F
02857 0A40                        3F            .byte	$3F
02858 0A41                        3F            .byte	$3F
02859 0A42                        3F            .byte	$3F
02860 0A43                        3F            .byte	$3F
02861 0A44                        3F            .byte	$3F
02862 0A45                        3F            .byte	$3F
02863 0A46                        3F            .byte	$3F
02864 0A47                        3F            .byte	$3F
02865 0A48                        3F            .byte	$3F
02866 0A49                        3F            .byte	$3F
02867 0A4A                        3F            .byte	$3F
02868 0A4B                        3F            .byte	$3F
02869 0A4C                        3F            .byte	$3F
02870 0A4D                        3F            .byte	$3F
02871                                           ! 626   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00,
02872 0A4E                        00            .byte	0
02873 0A4F                        00            .byte	0
02874 0A50                        00            .byte	0
02875 0A51                        00            .byte	0
02876 0A52                        00            .byte	0
02877 0A53                        00            .byte	0
02878 0A54                        00            .byte	0
02879 0A55                        00            .byte	0
02880 0A56                        00            .byte	0
02881 0A57                        00            .byte	0
02882 0A58                        00            .byte	0
02883 0A59                        00            .byte	0
02884 0A5A                        00            .byte	0
02885 0A5B                        00            .byte	0
02886 0A5C                        00            .byte	0
02887 0A5D                        00            .byte	0
02888 0A5E                        00            .byte	0
02889 0A5F                        00            .byte	0
02890 0A60                        00            .byte	0
02891 0A61                        00            .byte	0
02892 0A62                        00            .byte	0
02893 0A63                        00            .byte	0
02894 0A64                        00            .byte	0
02895 0A65                        00            .byte	0
02896                                           ! 627   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
02897 0A66                        2A            .byte	$2A
02898 0A67                        2A            .byte	$2A
02899 0A68                        2A            .byte	$2A
02900 0A69                        2A            .byte	$2A
02901 0A6A                        2A            .byte	$2A
02902 0A6B                        2A            .byte	$2A
02903 0A6C                        2A            .byte	$2A
02904 0A6D                        2A            .byte	$2A
02905 0A6E                        2A            .byte	$2A
02906 0A6F                        2A            .byte	$2A
02907 0A70                        2A            .byte	$2A
02908 0A71                        2A            .byte	$2A
02909 0A72                        2A            .byte	$2A
02910 0A73                        2A            .byte	$2A
02911 0A74                        2A            .byte	$2A
02912 0A75                        2A            .byte	$2A
02913 0A76                        2A            .byte	$2A
02914 0A77                        2A            .byte	$2A
02915 0A78                        2A            .byte	$2A
02916 0A79                        2A            .byte	$2A
02917 0A7A                        2A            .byte	$2A
02918 0A7B                        2A            .byte	$2A
02919 0A7C                        2A            .byte	$2A
02920 0A7D                        2A            .byte	$2A
02921                                           ! 628   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
02922 0A7E                        2A            .byte	$2A
02923 0A7F                        2A            .byte	$2A
02924 0A80                        2A            .byte	$2A
02925 0A81                        2A            .byte	$2A
02926 0A82                        2A            .byte	$2A
02927 0A83                        2A            .byte	$2A
02928 0A84                        2A            .byte	$2A
02929 0A85                        2A            .byte	$2A
02930 0A86                        2A            .byte	$2A
02931 0A87                        2A            .byte	$2A
02932 0A88                        2A            .byte	$2A
02933 0A89                        2A            .byte	$2A
02934 0A8A                        2A            .byte	$2A
02935 0A8B                        2A            .byte	$2A
02936 0A8C                        2A            .byte	$2A
02937 0A8D                        2A            .byte	$2A
02938 0A8E                        2A            .byte	$2A
02939 0A8F                        2A            .byte	$2A
02940 0A90                        2A            .byte	$2A
02941 0A91                        2A            .byte	$2A
02942 0A92                        2A            .byte	$2A
02943 0A93                        2A            .byte	$2A
02944 0A94                        2A            .byte	$2A
02945 0A95                        2A            .byte	$2A
02946                                           ! 629   0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f
02947 0A96                        3F            .byte	$3F
02948 0A97                        3F            .byte	$3F
02949 0A98                        3F            .byte	$3F
02950 0A99                        3F            .byte	$3F
02951 0A9A                        3F            .byte	$3F
02952 0A9B                        3F            .byte	$3F
02953 0A9C                        3F            .byte	$3F
02954 0A9D                        3F            .byte	$3F
02955 0A9E                        3F            .byte	$3F
02956 0A9F                        3F            .byte	$3F
02957 0AA0                        3F            .byte	$3F
02958 0AA1                        3F            .byte	$3F
02959 0AA2                        3F            .byte	$3F
02960 0AA3                        3F            .byte	$3F
02961 0AA4                        3F            .byte	$3F
02962 0AA5                        3F            .byte	$3F
02963 0AA6                        3F            .byte	$3F
02964 0AA7                        3F            .byte	$3F
02965 0AA8                        3F            .byte	$3F
02966 0AA9                        3F            .byte	$3F
02967 0AAA                        3F            .byte	$3F
02968 0AAB                        3F            .byte	$3F
02969 0AAC                        3F            .byte	$3F
02970                                           ! 630 };
02971 0AAD                        3F            .byte	$3F
02972                                           !BCC_EOS
02973                                           ! 631 static Bit8u palette1[63+1][3]=
02974                                           ! 632 {
02975                       00000AAE            _palette1:
02976                                           ! 633   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
02977 0AAE                        00            .byte	0
02978 0AAF                        00            .byte	0
02979 0AB0                        00            .byte	0
02980 0AB1                        00            .byte	0
02981 0AB2                        00            .byte	0
02982 0AB3                        2A            .byte	$2A
02983 0AB4                        00            .byte	0
02984 0AB5                        2A            .byte	$2A
02985 0AB6                        00            .byte	0
02986 0AB7                        00            .byte	0
02987 0AB8                        2A            .byte	$2A
02988 0AB9                        2A            .byte	$2A
02989 0ABA                        2A            .byte	$2A
02990 0ABB                        00            .byte	0
02991 0ABC                        00            .byte	0
02992 0ABD                        2A            .byte	$2A
02993 0ABE                        00            .byte	0
02994 0ABF                        2A            .byte	$2A
02995 0AC0                        2A            .byte	$2A
02996 0AC1                        15            .byte	$15
02997 0AC2                        00            .byte	0
02998 0AC3                        2A            .byte	$2A
02999 0AC4                        2A            .byte	$2A
03000 0AC5                        2A            .byte	$2A
03001                                           ! 634   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03002 0AC6                        00            .byte	0
03003 0AC7                        00            .byte	0
03004 0AC8                        00            .byte	0
03005 0AC9                        00            .byte	0
03006 0ACA                        00            .byte	0
03007 0ACB                        2A            .byte	$2A
03008 0ACC                        00            .byte	0
03009 0ACD                        2A            .byte	$2A
03010 0ACE                        00            .byte	0
03011 0ACF                        00            .byte	0
03012 0AD0                        2A            .byte	$2A
03013 0AD1                        2A            .byte	$2A
03014 0AD2                        2A            .byte	$2A
03015 0AD3                        00            .byte	0
03016 0AD4                        00            .byte	0
03017 0AD5                        2A            .byte	$2A
03018 0AD6                        00            .byte	0
03019 0AD7                        2A            .byte	$2A
03020 0AD8                        2A            .byte	$2A
03021 0AD9                        15            .byte	$15
03022 0ADA                        00            .byte	0
03023 0ADB                        2A            .byte	$2A
03024 0ADC                        2A            .byte	$2A
03025 0ADD                        2A            .byte	$2A
03026                                           ! 635   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03027 0ADE                        15            .byte	$15
03028 0ADF                        15            .byte	$15
03029 0AE0                        15            .byte	$15
03030 0AE1                        15            .byte	$15
03031 0AE2                        15            .byte	$15
03032 0AE3                        3F            .byte	$3F
03033 0AE4                        15            .byte	$15
03034 0AE5                        3F            .byte	$3F
03035 0AE6                        15            .byte	$15
03036 0AE7                        15            .byte	$15
03037 0AE8                        3F            .byte	$3F
03038 0AE9                        3F            .byte	$3F
03039 0AEA                        3F            .byte	$3F
03040 0AEB                        15            .byte	$15
03041 0AEC                        15            .byte	$15
03042 0AED                        3F            .byte	$3F
03043 0AEE                        15            .byte	$15
03044 0AEF                        3F            .byte	$3F
03045 0AF0                        3F            .byte	$3F
03046 0AF1                        3F            .byte	$3F
03047 0AF2                        15            .byte	$15
03048 0AF3                        3F            .byte	$3F
03049 0AF4                        3F            .byte	$3F
03050 0AF5                        3F            .byte	$3F
03051                                           ! 636   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03052 0AF6                        15            .byte	$15
03053 0AF7                        15            .byte	$15
03054 0AF8                        15            .byte	$15
03055 0AF9                        15            .byte	$15
03056 0AFA                        15            .byte	$15
03057 0AFB                        3F            .byte	$3F
03058 0AFC                        15            .byte	$15
03059 0AFD                        3F            .byte	$3F
03060 0AFE                        15            .byte	$15
03061 0AFF                        15            .byte	$15
03062 0B00                        3F            .byte	$3F
03063 0B01                        3F            .byte	$3F
03064 0B02                        3F            .byte	$3F
03065 0B03                        15            .byte	$15
03066 0B04                        15            .byte	$15
03067 0B05                        3F            .byte	$3F
03068 0B06                        15            .byte	$15
03069 0B07                        3F            .byte	$3F
03070 0B08                        3F            .byte	$3F
03071 0B09                        3F            .byte	$3F
03072 0B0A                        15            .byte	$15
03073 0B0B                        3F            .byte	$3F
03074 0B0C                        3F            .byte	$3F
03075 0B0D                        3F            .byte	$3F
03076                                           ! 637   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03077 0B0E                        00            .byte	0
03078 0B0F                        00            .byte	0
03079 0B10                        00            .byte	0
03080 0B11                        00            .byte	0
03081 0B12                        00            .byte	0
03082 0B13                        2A            .byte	$2A
03083 0B14                        00            .byte	0
03084 0B15                        2A            .byte	$2A
03085 0B16                        00            .byte	0
03086 0B17                        00            .byte	0
03087 0B18                        2A            .byte	$2A
03088 0B19                        2A            .byte	$2A
03089 0B1A                        2A            .byte	$2A
03090 0B1B                        00            .byte	0
03091 0B1C                        00            .byte	0
03092 0B1D                        2A            .byte	$2A
03093 0B1E                        00            .byte	0
03094 0B1F                        2A            .byte	$2A
03095 0B20                        2A            .byte	$2A
03096 0B21                        15            .byte	$15
03097 0B22                        00            .byte	0
03098 0B23                        2A            .byte	$2A
03099 0B24                        2A            .byte	$2A
03100 0B25                        2A            .byte	$2A
03101                                           ! 638   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03102 0B26                        00            .byte	0
03103 0B27                        00            .byte	0
03104 0B28                        00            .byte	0
03105 0B29                        00            .byte	0
03106 0B2A                        00            .byte	0
03107 0B2B                        2A            .byte	$2A
03108 0B2C                        00            .byte	0
03109 0B2D                        2A            .byte	$2A
03110 0B2E                        00            .byte	0
03111 0B2F                        00            .byte	0
03112 0B30                        2A            .byte	$2A
03113 0B31                        2A            .byte	$2A
03114 0B32                        2A            .byte	$2A
03115 0B33                        00            .byte	0
03116 0B34                        00            .byte	0
03117 0B35                        2A            .byte	$2A
03118 0B36                        00            .byte	0
03119 0B37                        2A            .byte	$2A
03120 0B38                        2A            .byte	$2A
03121 0B39                        15            .byte	$15
03122 0B3A                        00            .byte	0
03123 0B3B                        2A            .byte	$2A
03124 0B3C                        2A            .byte	$2A
03125 0B3D                        2A            .byte	$2A
03126                                           ! 639   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03127 0B3E                        15            .byte	$15
03128 0B3F                        15            .byte	$15
03129 0B40                        15            .byte	$15
03130 0B41                        15            .byte	$15
03131 0B42                        15            .byte	$15
03132 0B43                        3F            .byte	$3F
03133 0B44                        15            .byte	$15
03134 0B45                        3F            .byte	$3F
03135 0B46                        15            .byte	$15
03136 0B47                        15            .byte	$15
03137 0B48                        3F            .byte	$3F
03138 0B49                        3F            .byte	$3F
03139 0B4A                        3F            .byte	$3F
03140 0B4B                        15            .byte	$15
03141 0B4C                        15            .byte	$15
03142 0B4D                        3F            .byte	$3F
03143 0B4E                        15            .byte	$15
03144 0B4F                        3F            .byte	$3F
03145 0B50                        3F            .byte	$3F
03146 0B51                        3F            .byte	$3F
03147 0B52                        15            .byte	$15
03148 0B53                        3F            .byte	$3F
03149 0B54                        3F            .byte	$3F
03150 0B55                        3F            .byte	$3F
03151                                           ! 640   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f
03152 0B56                        15            .byte	$15
03153 0B57                        15            .byte	$15
03154 0B58                        15            .byte	$15
03155 0B59                        15            .byte	$15
03156 0B5A                        15            .byte	$15
03157 0B5B                        3F            .byte	$3F
03158 0B5C                        15            .byte	$15
03159 0B5D                        3F            .byte	$3F
03160 0B5E                        15            .byte	$15
03161 0B5F                        15            .byte	$15
03162 0B60                        3F            .byte	$3F
03163 0B61                        3F            .byte	$3F
03164 0B62                        3F            .byte	$3F
03165 0B63                        15            .byte	$15
03166 0B64                        15            .byte	$15
03167 0B65                        3F            .byte	$3F
03168 0B66                        15            .byte	$15
03169 0B67                        3F            .byte	$3F
03170 0B68                        3F            .byte	$3F
03171 0B69                        3F            .byte	$3F
03172 0B6A                        15            .byte	$15
03173 0B6B                        3F            .byte	$3F
03174 0B6C                        3F            .byte	$3F
03175                                           ! 641 };
03176 0B6D                        3F            .byte	$3F
03177                                           !BCC_EOS
03178                                           ! 642 static Bit8u palette2[63+1][3]=
03179                                           ! 643 {
03180                       00000B6E            _palette2:
03181                                           ! 644   0x00,0x00,0x00, 0
03182 0B6E                        00            .byte	0
03183 0B6F                        00            .byte	0
03184 0B70                        00            .byte	0
03185                                           ! 644 x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x2a,0x00, 0x2a,0x2a,0x2a,
03186 0B71                        00            .byte	0
03187 0B72                        00            .byte	0
03188 0B73                        2A            .byte	$2A
03189 0B74                        00            .byte	0
03190 0B75                        2A            .byte	$2A
03191 0B76                        00            .byte	0
03192 0B77                        00            .byte	0
03193 0B78                        2A            .byte	$2A
03194 0B79                        2A            .byte	$2A
03195 0B7A                        2A            .byte	$2A
03196 0B7B                        00            .byte	0
03197 0B7C                        00            .byte	0
03198 0B7D                        2A            .byte	$2A
03199 0B7E                        00            .byte	0
03200 0B7F                        2A            .byte	$2A
03201 0B80                        2A            .byte	$2A
03202 0B81                        2A            .byte	$2A
03203 0B82                        00            .byte	0
03204 0B83                        2A            .byte	$2A
03205 0B84                        2A            .byte	$2A
03206 0B85                        2A            .byte	$2A
03207                                           ! 645   0x00,0x00,0x15, 0x00,0x00,0x3f, 0x00,0x2a,0x15, 0x00,0x2a,0x3f, 0x2a,0x00,0x15, 0x2a,0x00,0x3f, 0x2a,0x2a,0x15, 0x2a,0x2a,0x3f,
03208 0B86                        00            .byte	0
03209 0B87                        00            .byte	0
03210 0B88                        15            .byte	$15
03211 0B89                        00            .byte	0
03212 0B8A                        00            .byte	0
03213 0B8B                        3F            .byte	$3F
03214 0B8C                        00            .byte	0
03215 0B8D                        2A            .byte	$2A
03216 0B8E                        15            .byte	$15
03217 0B8F                        00            .byte	0
03218 0B90                        2A            .byte	$2A
03219 0B91                        3F            .byte	$3F
03220 0B92                        2A            .byte	$2A
03221 0B93                        00            .byte	0
03222 0B94                        15            .byte	$15
03223 0B95                        2A            .byte	$2A
03224 0B96                        00            .byte	0
03225 0B97                        3F            .byte	$3F
03226 0B98                        2A            .byte	$2A
03227 0B99                        2A            .byte	$2A
03228 0B9A                        15            .byte	$15
03229 0B9B                        2A            .byte	$2A
03230 0B9C                        2A            .byte	$2A
03231 0B9D                        3F            .byte	$3F
03232                                           ! 646   0x00,0x15,0x00, 0x00,0x15,0x2a, 0x00,0x3f,0x00, 0x00,0x3f,0x2a, 0x2a,0x15,0x00, 0x2a,0x15,0x2a, 0x2a,0x3f,0x00, 0x2a,0x3f,0x2a,
03233 0B9E                        00            .byte	0
03234 0B9F                        15            .byte	$15
03235 0BA0                        00            .byte	0
03236 0BA1                        00            .byte	0
03237 0BA2                        15            .byte	$15
03238 0BA3                        2A            .byte	$2A
03239 0BA4                        00            .byte	0
03240 0BA5                        3F            .byte	$3F
03241 0BA6                        00            .byte	0
03242 0BA7                        00            .byte	0
03243 0BA8                        3F            .byte	$3F
03244 0BA9                        2A            .byte	$2A
03245 0BAA                        2A            .byte	$2A
03246 0BAB                        15            .byte	$15
03247 0BAC                        00            .byte	0
03248 0BAD                        2A            .byte	$2A
03249 0BAE                        15            .byte	$15
03250 0BAF                        2A            .byte	$2A
03251 0BB0                        2A            .byte	$2A
03252 0BB1                        3F            .byte	$3F
03253 0BB2                        00            .byte	0
03254 0BB3                        2A            .byte	$2A
03255 0BB4                        3F            .byte	$3F
03256 0BB5                        2A            .byte	$2A
03257                                           ! 647   0x00,0x15,0x15, 0x00,0x15,0x3f, 0x00,0x3f,0x15, 0x00,0x3f,0x3f, 0x2a,0x15,0x15, 0x2a,0x15,0x3f, 0x2a,0x3f,0x15, 0x2a,0x3f,0x3f,
03258 0BB6                        00            .byte	0
03259 0BB7                        15            .byte	$15
03260 0BB8                        15            .byte	$15
03261 0BB9                        00            .byte	0
03262 0BBA                        15            .byte	$15
03263 0BBB                        3F            .byte	$3F
03264 0BBC                        00            .byte	0
03265 0BBD                        3F            .byte	$3F
03266 0BBE                        15            .byte	$15
03267 0BBF                        00            .byte	0
03268 0BC0                        3F            .byte	$3F
03269 0BC1                        3F            .byte	$3F
03270 0BC2                        2A            .byte	$2A
03271 0BC3                        15            .byte	$15
03272 0BC4                        15            .byte	$15
03273 0BC5                        2A            .byte	$2A
03274 0BC6                        15            .byte	$15
03275 0BC7                        3F            .byte	$3F
03276 0BC8                        2A            .byte	$2A
03277 0BC9                        3F            .byte	$3F
03278 0BCA                        15            .byte	$15
03279 0BCB                        2A            .byte	$2A
03280 0BCC                        3F            .byte	$3F
03281 0BCD                        3F            .byte	$3F
03282                                           ! 648   0x15,0x00,0x00, 0x15,0x00,0x2a, 0x15,0x2a,0x00, 0x15,0x2a,0x2a, 0x3f,0x00,0x00, 0x3f,0x00,0x2a, 0x3f,0x2a,0x00, 0x3f,0x2a,0x2a,
03283 0BCE                        15            .byte	$15
03284 0BCF                        00            .byte	0
03285 0BD0                        00            .byte	0
03286 0BD1                        15            .byte	$15
03287 0BD2                        00            .byte	0
03288 0BD3                        2A            .byte	$2A
03289 0BD4                        15            .byte	$15
03290 0BD5                        2A            .byte	$2A
03291 0BD6                        00            .byte	0
03292 0BD7                        15            .byte	$15
03293 0BD8                        2A            .byte	$2A
03294 0BD9                        2A            .byte	$2A
03295 0BDA                        3F            .byte	$3F
03296 0BDB                        00            .byte	0
03297 0BDC                        00            .byte	0
03298 0BDD                        3F            .byte	$3F
03299 0BDE                        00            .byte	0
03300 0BDF                        2A            .byte	$2A
03301 0BE0                        3F            .byte	$3F
03302 0BE1                        2A            .byte	$2A
03303 0BE2                        00            .byte	0
03304 0BE3                        3F            .byte	$3F
03305 0BE4                        2A            .byte	$2A
03306 0BE5                        2A            .byte	$2A
03307                                           ! 649   0x15,0x00,0x15, 0x15,0x00,0x3f, 0x15,0x2a,0x15, 0x15,0x2a,0x3f, 0x3f,0x00,0x15, 0x3f,0x00,0x3f, 0x3f,0x2a,0x15, 0x3f,0x2a,0x3f,
03308 0BE6                        15            .byte	$15
03309 0BE7                        00            .byte	0
03310 0BE8                        15            .byte	$15
03311 0BE9                        15            .byte	$15
03312 0BEA                        00            .byte	0
03313 0BEB                        3F            .byte	$3F
03314 0BEC                        15            .byte	$15
03315 0BED                        2A            .byte	$2A
03316 0BEE                        15            .byte	$15
03317 0BEF                        15            .byte	$15
03318 0BF0                        2A            .byte	$2A
03319 0BF1                        3F            .byte	$3F
03320 0BF2                        3F            .byte	$3F
03321 0BF3                        00            .byte	0
03322 0BF4                        15            .byte	$15
03323 0BF5                        3F            .byte	$3F
03324 0BF6                        00            .byte	0
03325 0BF7                        3F            .byte	$3F
03326 0BF8                        3F            .byte	$3F
03327 0BF9                        2A            .byte	$2A
03328 0BFA                        15            .byte	$15
03329 0BFB                        3F            .byte	$3F
03330 0BFC                        2A            .byte	$2A
03331 0BFD                        3F            .byte	$3F
03332                                           ! 650   0x15,0x15,0x00, 0x15,0x15,0x2a, 0x15,0x3f,0x00, 0x15,0x3f,0x2a, 0x3f,0x15,0x00, 0x3f,0x15,0x2a, 0x3f,0x3f,0x00, 0x3f,0x3f,0x2a,
03333 0BFE                        15            .byte	$15
03334 0BFF                        15            .byte	$15
03335 0C00                        00            .byte	0
03336 0C01                        15            .byte	$15
03337 0C02                        15            .byte	$15
03338 0C03                        2A            .byte	$2A
03339 0C04                        15            .byte	$15
03340 0C05                        3F            .byte	$3F
03341 0C06                        00            .byte	0
03342 0C07                        15            .byte	$15
03343 0C08                        3F            .byte	$3F
03344 0C09                        2A            .byte	$2A
03345 0C0A                        3F            .byte	$3F
03346 0C0B                        15            .byte	$15
03347 0C0C                        00            .byte	0
03348 0C0D                        3F            .byte	$3F
03349 0C0E                        15            .byte	$15
03350 0C0F                        2A            .byte	$2A
03351 0C10                        3F            .byte	$3F
03352 0C11                        3F            .byte	$3F
03353 0C12                        00            .byte	0
03354 0C13                        3F            .byte	$3F
03355 0C14                        3F            .byte	$3F
03356 0C15                        2A            .byte	$2A
03357                                           ! 651   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f
03358 0C16                        15            .byte	$15
03359 0C17                        15            .byte	$15
03360 0C18                        15            .byte	$15
03361 0C19                        15            .byte	$15
03362 0C1A                        15            .byte	$15
03363 0C1B                        3F            .byte	$3F
03364 0C1C                        15            .byte	$15
03365 0C1D                        3F            .byte	$3F
03366 0C1E                        15            .byte	$15
03367 0C1F                        15            .byte	$15
03368 0C20                        3F            .byte	$3F
03369 0C21                        3F            .byte	$3F
03370 0C22                        3F            .byte	$3F
03371 0C23                        15            .byte	$15
03372 0C24                        15            .byte	$15
03373 0C25                        3F            .byte	$3F
03374 0C26                        15            .byte	$15
03375 0C27                        3F            .byte	$3F
03376 0C28                        3F            .byte	$3F
03377 0C29                        3F            .byte	$3F
03378 0C2A                        15            .byte	$15
03379 0C2B                        3F            .byte	$3F
03380 0C2C                        3F            .byte	$3F
03381                                           ! 652 };
03382 0C2D                        3F            .byte	$3F
03383                                           !BCC_EOS
03384                                           ! 653 static Bit8u palette3[256][3]=
03385                                           ! 654 {
03386                       00000C2E            _palette3:
03387                                           ! 655   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03388 0C2E                        00            .byte	0
03389 0C2F                        00            .byte	0
03390 0C30                        00            .byte	0
03391 0C31                        00            .byte	0
03392 0C32                        00            .byte	0
03393 0C33                        2A            .byte	$2A
03394 0C34                        00            .byte	0
03395 0C35                        2A            .byte	$2A
03396 0C36                        00            .byte	0
03397 0C37                        00            .byte	0
03398 0C38                        2A            .byte	$2A
03399 0C39                        2A            .byte	$2A
03400 0C3A                        2A            .byte	$2A
03401 0C3B                        00            .byte	0
03402 0C3C                        00            .byte	0
03403 0C3D                        2A            .byte	$2A
03404 0C3E                        00            .byte	0
03405 0C3F                        2A            .byte	$2A
03406 0C40                        2A            .byte	$2A
03407 0C41                        15            .byte	$15
03408 0C42                        00            .byte	0
03409 0C43                        2A            .byte	$2A
03410 0C44                        2A            .byte	$2A
03411 0C45                        2A            .byte	$2A
03412                                           ! 656   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03413 0C46                        15            .byte	$15
03414 0C47                        15            .byte	$15
03415 0C48                        15            .byte	$15
03416 0C49                        15            .byte	$15
03417 0C4A                        15            .byte	$15
03418 0C4B                        3F            .byte	$3F
03419 0C4C                        15            .byte	$15
03420 0C4D                        3F            .byte	$3F
03421 0C4E                        15            .byte	$15
03422 0C4F                        15            .byte	$15
03423 0C50                        3F            .byte	$3F
03424 0C51                        3F            .byte	$3F
03425 0C52                        3F            .byte	$3F
03426 0C53                        15            .byte	$15
03427 0C54                        15            .byte	$15
03428 0C55                        3F            .byte	$3F
03429 0C56                        15            .byte	$15
03430 0C57                        3F            .byte	$3F
03431 0C58                        3F            .byte	$3F
03432 0C59                        3F            .byte	$3F
03433 0C5A                        15            .byte	$15
03434 0C5B                        3F            .byte	$3F
03435 0C5C                        3F            .byte	$3F
03436 0C5D                        3F            .byte	$3F
03437                                           ! 657   0x00,0x00,0x00, 0x05,0x05,0x05, 0x08,0x08,0x08, 0x0b,0x0b,0x0b, 0x0e,0x0e,0x0e, 0x11,0x11,0x11, 0x14,0x14,0x14, 0x18,0x18,0x18,
03438 0C5E                        00            .byte	0
03439 0C5F                        00            .byte	0
03440 0C60                        00            .byte	0
03441 0C61                        05            .byte	5
03442 0C62                        05            .byte	5
03443 0C63                        05            .byte	5
03444 0C64                        08            .byte	8
03445 0C65                        08            .byte	8
03446 0C66                        08            .byte	8
03447 0C67                        0B            .byte	$B
03448 0C68                        0B            .byte	$B
03449 0C69                        0B            .byte	$B
03450 0C6A                        0E            .byte	$E
03451 0C6B                        0E            .byte	$E
03452 0C6C                        0E            .byte	$E
03453 0C6D                        11            .byte	$11
03454 0C6E                        11            .byte	$11
03455 0C6F                        11            .byte	$11
03456 0C70                        14            .byte	$14
03457 0C71                        14            .byte	$14
03458 0C72                        14            .byte	$14
03459 0C73                        18            .byte	$18
03460 0C74                        18            .byte	$18
03461 0C75                        18            .byte	$18
03462                                           ! 658   0x1c,0x1c,0x1c, 0x20,0x20,0x20, 0x24,0x24,0x24, 0x28,0x28,0x28, 0x2d,0x2d,0x2d, 0x32,0x32,0x32, 0x38,0x38,0x38, 0x3f,0x3f,0x3f,
03463 0C76                        1C            .byte	$1C
03464 0C77                        1C            .byte	$1C
03465 0C78                        1C            .byte	$1C
03466 0C79                        20            .byte	$20
03467 0C7A                        20            .byte	$20
03468 0C7B                        20            .byte	$20
03469 0C7C                        24            .byte	$24
03470 0C7D                        24            .byte	$24
03471 0C7E                        24            .byte	$24
03472 0C7F                        28            .byte	$28
03473 0C80                        28            .byte	$28
03474 0C81                        28            .byte	$28
03475 0C82                        2D            .byte	$2D
03476 0C83                        2D            .byte	$2D
03477 0C84                        2D            .byte	$2D
03478 0C85                        32            .byte	$32
03479 0C86                        32            .byte	$32
03480 0C87                        32            .byte	$32
03481 0C88                        38            .byte	$38
03482 0C89                        38            .byte	$38
03483 0C8A                        38            .byte	$38
03484 0C8B                        3F            .byte	$3F
03485 0C8C                        3F            .byte	$3F
03486 0C8D                        3F            .byte	$3F
03487                                           ! 659   0x00,0x00,0x3f, 0x10,0x00,0x3f, 0x1f,0x00,0x3f, 0x2f,0x00,0x3f, 0x3f,0x00,0x3f, 0x3f,0x00,0x2f, 0x3f,0x00,0x1f, 0x3f,0x00,0x10,
03488 0C8E                        00            .byte	0
03489 0C8F                        00            .byte	0
03490 0C90                        3F            .byte	$3F
03491 0C91                        10            .byte	$10
03492 0C92                        00            .byte	0
03493 0C93                        3F            .byte	$3F
03494 0C94                        1F            .byte	$1F
03495 0C95                        00            .byte	0
03496 0C96                        3F            .byte	$3F
03497 0C97                        2F            .byte	$2F
03498 0C98                        00            .byte	0
03499 0C99                        3F            .byte	$3F
03500 0C9A                        3F            .byte	$3F
03501 0C9B                        00            .byte	0
03502 0C9C                        3F            .byte	$3F
03503 0C9D                        3F            .byte	$3F
03504 0C9E                        00            .byte	0
03505 0C9F                        2F            .byte	$2F
03506 0CA0                        3F            .byte	$3F
03507 0CA1                        00            .byte	0
03508 0CA2                        1F            .byte	$1F
03509 0CA3                        3F            .byte	$3F
03510 0CA4                        00            .byte	0
03511 0CA5                        10            .byte	$10
03512                                           ! 660   0x3f,0x00,0x00, 0x3f,0x10,0x00, 0x3f,0x1f,0x00, 0x3f,0x2f,0x00, 0x3f,0x3f,0x00, 0x2f,0x3f,0x00, 0x1f,0x3f,0x00, 0x10,0x3f,0x00,
03513 0CA6                        3F            .byte	$3F
03514 0CA7                        00            .byte	0
03515 0CA8                        00            .byte	0
03516 0CA9                        3F            .byte	$3F
03517 0CAA                        10            .byte	$10
03518 0CAB                        00            .byte	0
03519 0CAC                        3F            .byte	$3F
03520 0CAD                        1F            .byte	$1F
03521 0CAE                        00            .byte	0
03522 0CAF                        3F            .byte	$3F
03523 0CB0                        2F            .byte	$2F
03524 0CB1                        00            .byte	0
03525 0CB2                        3F            .byte	$3F
03526 0CB3                        3F            .byte	$3F
03527 0CB4                        00            .byte	0
03528 0CB5                        2F            .byte	$2F
03529 0CB6                        3F            .byte	$3F
03530 0CB7                        00            .byte	0
03531 0CB8                        1F            .byte	$1F
03532 0CB9                        3F            .byte	$3F
03533 0CBA                        00            .byte	0
03534 0CBB                        10            .byte	$10
03535 0CBC                        3F            .byte	$3F
03536 0CBD                        00            .byte	0
03537                                           ! 661   0x00,0x3f,0x00, 0x00,0x3f,0x10, 0x00,0x3f,0x1f, 0x00,0x3f,0x2f, 0x00,0x3f,0x3f, 0x00,0x2f,0x3f, 0x00,0x1f,0x3f, 0x00,0x10,0x3f,
03538 0CBE                        00            .byte	0
03539 0CBF                        3F            .byte	$3F
03540 0CC0                        00            .byte	0
03541 0CC1                        00            .byte	0
03542 0CC2                        3F            .byte	$3F
03543 0CC3                        10            .byte	$10
03544 0CC4                        00            .byte	0
03545 0CC5                        3F            .byte	$3F
03546 0CC6                        1F            .byte	$1F
03547 0CC7                        00            .byte	0
03548 0CC8                        3F            .byte	$3F
03549 0CC9                        2F            .byte	$2F
03550 0CCA                        00            .byte	0
03551 0CCB                        3F            .byte	$3F
03552 0CCC                        3F            .byte	$3F
03553 0CCD                        00            .byte	0
03554 0CCE                        2F            .byte	$2F
03555 0CCF                        3F            .byte	$3F
03556 0CD0                        00            .byte	0
03557 0CD1                        1F            .byte	$1F
03558 0CD2                        3F            .byte	$3F
03559 0CD3                        00            .byte	0
03560 0CD4                        10            .byte	$10
03561 0CD5                        3F            .byte	$3F
03562                                           ! 662   0x1f,0x1f,0x3f, 0x27,0x1f,0x3f, 0x2f,0x1f,0x3f, 0x37,0x1f,0x3f, 0x3f,0x1f,0x3f, 
03563 0CD6                        1F            .byte	$1F
03564 0CD7                        1F            .byte	$1F
03565 0CD8                        3F            .byte	$3F
03566 0CD9                        27            .byte	$27
03567 0CDA                        1F            .byte	$1F
03568 0CDB                        3F            .byte	$3F
03569 0CDC                        2F            .byte	$2F
03570 0CDD                        1F            .byte	$1F
03571 0CDE                        3F            .byte	$3F
03572 0CDF                        37            .byte	$37
03573 0CE0                        1F            .byte	$1F
03574 0CE1                        3F            .byte	$3F
03575 0CE2                        3F            .byte	$3F
03576 0CE3                        1F            .byte	$1F
03577 0CE4                        3F            .byte	$3F
03578                                           ! 662 0x3f,0x1f,0x37, 0x3f,0x1f,0x2f, 0x3f,0x1f,0x27,
03579 0CE5                        3F            .byte	$3F
03580 0CE6                        1F            .byte	$1F
03581 0CE7                        37            .byte	$37
03582 0CE8                        3F            .byte	$3F
03583 0CE9                        1F            .byte	$1F
03584 0CEA                        2F            .byte	$2F
03585 0CEB                        3F            .byte	$3F
03586 0CEC                        1F            .byte	$1F
03587 0CED                        27            .byte	$27
03588                                           ! 663   0x3f,0x1f,0x1f, 0x3f,0x27,0x1f, 0x3f,0x2f,0x1f, 0x3f,0x37,0x1f, 0x3f,0x3f,0x1f, 0x37,0x3f,0x1f, 0x2f,0x3f,0x1f, 0x27,0x3f,0x1f,
03589 0CEE                        3F            .byte	$3F
03590 0CEF                        1F            .byte	$1F
03591 0CF0                        1F            .byte	$1F
03592 0CF1                        3F            .byte	$3F
03593 0CF2                        27            .byte	$27
03594 0CF3                        1F            .byte	$1F
03595 0CF4                        3F            .byte	$3F
03596 0CF5                        2F            .byte	$2F
03597 0CF6                        1F            .byte	$1F
03598 0CF7                        3F            .byte	$3F
03599 0CF8                        37            .byte	$37
03600 0CF9                        1F            .byte	$1F
03601 0CFA                        3F            .byte	$3F
03602 0CFB                        3F            .byte	$3F
03603 0CFC                        1F            .byte	$1F
03604 0CFD                        37            .byte	$37
03605 0CFE                        3F            .byte	$3F
03606 0CFF                        1F            .byte	$1F
03607 0D00                        2F            .byte	$2F
03608 0D01                        3F            .byte	$3F
03609 0D02                        1F            .byte	$1F
03610 0D03                        27            .byte	$27
03611 0D04                        3F            .byte	$3F
03612 0D05                        1F            .byte	$1F
03613                                           ! 664   0x1f,0x3f,0x1f, 0x1f,0x3f,0x27, 0x1f,0x3f,0x2f, 0x1f,0x3f,0x37, 0x1f,0x3f,0x3f, 0x1f,0x37,0x3f, 0x1f,0x2f,0x3f, 0x1f,0x27,0x3f,
03614 0D06                        1F            .byte	$1F
03615 0D07                        3F            .byte	$3F
03616 0D08                        1F            .byte	$1F
03617 0D09                        1F            .byte	$1F
03618 0D0A                        3F            .byte	$3F
03619 0D0B                        27            .byte	$27
03620 0D0C                        1F            .byte	$1F
03621 0D0D                        3F            .byte	$3F
03622 0D0E                        2F            .byte	$2F
03623 0D0F                        1F            .byte	$1F
03624 0D10                        3F            .byte	$3F
03625 0D11                        37            .byte	$37
03626 0D12                        1F            .byte	$1F
03627 0D13                        3F            .byte	$3F
03628 0D14                        3F            .byte	$3F
03629 0D15                        1F            .byte	$1F
03630 0D16                        37            .byte	$37
03631 0D17                        3F            .byte	$3F
03632 0D18                        1F            .byte	$1F
03633 0D19                        2F            .byte	$2F
03634 0D1A                        3F            .byte	$3F
03635 0D1B                        1F            .byte	$1F
03636 0D1C                        27            .byte	$27
03637 0D1D                        3F            .byte	$3F
03638                                           ! 665   0x2d,0x2d,0x3f, 0x31,0x2d,0x3f, 0x36,0x2d,0x3f, 0x3a,0x2d,0x3f, 0x3f,0x2d,0x3f, 0x3f,0x2d,0x3a, 0x3f,0x2d,0x36, 0x3f,0x2d,0x31,
03639 0D1E                        2D            .byte	$2D
03640 0D1F                        2D            .byte	$2D
03641 0D20                        3F            .byte	$3F
03642 0D21                        31            .byte	$31
03643 0D22                        2D            .byte	$2D
03644 0D23                        3F            .byte	$3F
03645 0D24                        36            .byte	$36
03646 0D25                        2D            .byte	$2D
03647 0D26                        3F            .byte	$3F
03648 0D27                        3A            .byte	$3A
03649 0D28                        2D            .byte	$2D
03650 0D29                        3F            .byte	$3F
03651 0D2A                        3F            .byte	$3F
03652 0D2B                        2D            .byte	$2D
03653 0D2C                        3F            .byte	$3F
03654 0D2D                        3F            .byte	$3F
03655 0D2E                        2D            .byte	$2D
03656 0D2F                        3A            .byte	$3A
03657 0D30                        3F            .byte	$3F
03658 0D31                        2D            .byte	$2D
03659 0D32                        36            .byte	$36
03660 0D33                        3F            .byte	$3F
03661 0D34                        2D            .byte	$2D
03662 0D35                        31            .byte	$31
03663                                           ! 666   0x3f,0x2d,0x2d, 0x3f,0x31,0x2d, 0x3f,0x36,0x2d, 0x3f,0x3a,0x2d, 0x3f,0x3f,0x2d, 0x3a,0x3f,0x2d, 0x36,0x3f,0x2d, 0x31,0x3f,0x2d,
03664 0D36                        3F            .byte	$3F
03665 0D37                        2D            .byte	$2D
03666 0D38                        2D            .byte	$2D
03667 0D39                        3F            .byte	$3F
03668 0D3A                        31            .byte	$31
03669 0D3B                        2D            .byte	$2D
03670 0D3C                        3F            .byte	$3F
03671 0D3D                        36            .byte	$36
03672 0D3E                        2D            .byte	$2D
03673 0D3F                        3F            .byte	$3F
03674 0D40                        3A            .byte	$3A
03675 0D41                        2D            .byte	$2D
03676 0D42                        3F            .byte	$3F
03677 0D43                        3F            .byte	$3F
03678 0D44                        2D            .byte	$2D
03679 0D45                        3A            .byte	$3A
03680 0D46                        3F            .byte	$3F
03681 0D47                        2D            .byte	$2D
03682 0D48                        36            .byte	$36
03683 0D49                        3F            .byte	$3F
03684 0D4A                        2D            .byte	$2D
03685 0D4B                        31            .byte	$31
03686 0D4C                        3F            .byte	$3F
03687 0D4D                        2D            .byte	$2D
03688                                           ! 667   0x2d,0x3f,0x2d, 0x2d,0x3f,0x31, 0x2d,0x3f,0x36, 0x2d,0x3f,0x3a, 0x2d,0x3f,0x3f, 0x2d,0x3a,0x3f, 0x2d,0x36,0x3f, 0x2d,0x31,0x3f,
03689 0D4E                        2D            .byte	$2D
03690 0D4F                        3F            .byte	$3F
03691 0D50                        2D            .byte	$2D
03692 0D51                        2D            .byte	$2D
03693 0D52                        3F            .byte	$3F
03694 0D53                        31            .byte	$31
03695 0D54                        2D            .byte	$2D
03696 0D55                        3F            .byte	$3F
03697 0D56                        36            .byte	$36
03698 0D57                        2D            .byte	$2D
03699 0D58                        3F            .byte	$3F
03700 0D59                        3A            .byte	$3A
03701 0D5A                        2D            .byte	$2D
03702 0D5B                        3F            .byte	$3F
03703 0D5C                        3F            .byte	$3F
03704 0D5D                        2D            .byte	$2D
03705 0D5E                        3A            .byte	$3A
03706 0D5F                        3F            .byte	$3F
03707 0D60                        2D            .byte	$2D
03708 0D61                        36            .byte	$36
03709 0D62                        3F            .byte	$3F
03710 0D63                        2D            .byte	$2D
03711 0D64                        31            .byte	$31
03712 0D65                        3F            .byte	$3F
03713                                           ! 668   0x00,0x00,0x1c, 0x07,0x00,0x1c, 0x0e,0x00,0x1c, 0x15,0x00,0x1c, 0x1c,0x00,0x1c, 0x1c,0x00,0x15, 0x1c,0x00,0x0e, 0x1c,0x00,0x07,
03714 0D66                        00            .byte	0
03715 0D67                        00            .byte	0
03716 0D68                        1C            .byte	$1C
03717 0D69                        07            .byte	7
03718 0D6A                        00            .byte	0
03719 0D6B                        1C            .byte	$1C
03720 0D6C                        0E            .byte	$E
03721 0D6D                        00            .byte	0
03722 0D6E                        1C            .byte	$1C
03723 0D6F                        15            .byte	$15
03724 0D70                        00            .byte	0
03725 0D71                        1C            .byte	$1C
03726 0D72                        1C            .byte	$1C
03727 0D73                        00            .byte	0
03728 0D74                        1C            .byte	$1C
03729 0D75                        1C            .byte	$1C
03730 0D76                        00            .byte	0
03731 0D77                        15            .byte	$15
03732 0D78                        1C            .byte	$1C
03733 0D79                        00            .byte	0
03734 0D7A                        0E            .byte	$E
03735 0D7B                        1C            .byte	$1C
03736 0D7C                        00            .byte	0
03737 0D7D                        07            .byte	7
03738                                           ! 669   0x1c,0x00,0x00, 0x1c,0x07,0x00, 0x1c,0x0e,0x00, 0x1c,0x15,0x00, 0x1c,0x1c,0x00, 0x15,0x1c,0x00, 0x0e,0x1c,0x00, 0x07,0x1c,0x00,
03739 0D7E                        1C            .byte	$1C
03740 0D7F                        00            .byte	0
03741 0D80                        00            .byte	0
03742 0D81                        1C            .byte	$1C
03743 0D82                        07            .byte	7
03744 0D83                        00            .byte	0
03745 0D84                        1C            .byte	$1C
03746 0D85                        0E            .byte	$E
03747 0D86                        00            .byte	0
03748 0D87                        1C            .byte	$1C
03749 0D88                        15            .byte	$15
03750 0D89                        00            .byte	0
03751 0D8A                        1C            .byte	$1C
03752 0D8B                        1C            .byte	$1C
03753 0D8C                        00            .byte	0
03754 0D8D                        15            .byte	$15
03755 0D8E                        1C            .byte	$1C
03756 0D8F                        00            .byte	0
03757 0D90                        0E            .byte	$E
03758 0D91                        1C            .byte	$1C
03759 0D92                        00            .byte	0
03760 0D93                        07            .byte	7
03761 0D94                        1C            .byte	$1C
03762 0D95                        00            .byte	0
03763                                           ! 670   0x00,0x1c,0x00, 0x00,0x1c,0x07, 0x00,0x1c,0x0e, 0x00,0x1c,0x15, 0x00,0x1c,0x1c, 0x00,0x15,0x1c, 0x00,0x0e,0x1c, 0x00,0x07,0x1c,
03764 0D96                        00            .byte	0
03765 0D97                        1C            .byte	$1C
03766 0D98                        00            .byte	0
03767 0D99                        00            .byte	0
03768 0D9A                        1C            .byte	$1C
03769 0D9B                        07            .byte	7
03770 0D9C                        00            .byte	0
03771 0D9D                        1C            .byte	$1C
03772 0D9E                        0E            .byte	$E
03773 0D9F                        00            .byte	0
03774 0DA0                        1C            .byte	$1C
03775 0DA1                        15            .byte	$15
03776 0DA2                        00            .byte	0
03777 0DA3                        1C            .byte	$1C
03778 0DA4                        1C            .byte	$1C
03779 0DA5                        00            .byte	0
03780 0DA6                        15            .byte	$15
03781 0DA7                        1C            .byte	$1C
03782 0DA8                        00            .byte	0
03783 0DA9                        0E            .byte	$E
03784 0DAA                        1C            .byte	$1C
03785 0DAB                        00            .byte	0
03786 0DAC                        07            .byte	7
03787 0DAD                        1C            .byte	$1C
03788                                           ! 671   0x0e,0x0e,0x1c, 0x11,0x0e,0x1c, 0x15,0x0e,0x1c, 0x18,0x0e,0x1c, 0x1c,0x0e,0x1c, 0x1c,0x0e,0x18, 0x1c,0x0e,0x15, 0x1c,0x0e,0x11,
03789 0DAE                        0E            .byte	$E
03790 0DAF                        0E            .byte	$E
03791 0DB0                        1C            .byte	$1C
03792 0DB1                        11            .byte	$11
03793 0DB2                        0E            .byte	$E
03794 0DB3                        1C            .byte	$1C
03795 0DB4                        15            .byte	$15
03796 0DB5                        0E            .byte	$E
03797 0DB6                        1C            .byte	$1C
03798 0DB7                        18            .byte	$18
03799 0DB8                        0E            .byte	$E
03800 0DB9                        1C            .byte	$1C
03801 0DBA                        1C            .byte	$1C
03802 0DBB                        0E            .byte	$E
03803 0DBC                        1C            .byte	$1C
03804 0DBD                        1C            .byte	$1C
03805 0DBE                        0E            .byte	$E
03806 0DBF                        18            .byte	$18
03807 0DC0                        1C            .byte	$1C
03808 0DC1                        0E            .byte	$E
03809 0DC2                        15            .byte	$15
03810 0DC3                        1C            .byte	$1C
03811 0DC4                        0E            .byte	$E
03812 0DC5                        11            .byte	$11
03813                                           ! 672   0x1c,0x0e,0x0e, 0x1c,0x11,0x0e, 0x1c,0x15,0x0e, 0x1c,0x18,0x0e, 0x1c,0x1c,0x0e, 0x18,0x1c,0x0e, 0x15,0x1c,0x0e, 0x11,0x1c,0x0e,
03814 0DC6                        1C            .byte	$1C
03815 0DC7                        0E            .byte	$E
03816 0DC8                        0E            .byte	$E
03817 0DC9                        1C            .byte	$1C
03818 0DCA                        11            .byte	$11
03819 0DCB                        0E            .byte	$E
03820 0DCC                        1C            .byte	$1C
03821 0DCD                        15            .byte	$15
03822 0DCE                        0E            .byte	$E
03823 0DCF                        1C            .byte	$1C
03824 0DD0                        18            .byte	$18
03825 0DD1                        0E            .byte	$E
03826 0DD2                        1C            .byte	$1C
03827 0DD3                        1C            .byte	$1C
03828 0DD4                        0E            .byte	$E
03829 0DD5                        18            .byte	$18
03830 0DD6                        1C            .byte	$1C
03831 0DD7                        0E            .byte	$E
03832 0DD8                        15            .byte	$15
03833 0DD9                        1C            .byte	$1C
03834 0DDA                        0E            .byte	$E
03835 0DDB                        11            .byte	$11
03836 0DDC                        1C            .byte	$1C
03837 0DDD                        0E            .byte	$E
03838                                           ! 673   0x0e,0x1c,0x0e, 0x0e,0x1c,0x11, 0x0e,0x1c,0x15, 0x0e,0x1c,0x18, 0x0e,0x1c,0x1c, 0x0e,0x18,0x1c, 0x0e,0x15,0x1c, 0x0e,0x11,0x1c,
03839 0DDE                        0E            .byte	$E
03840 0DDF                        1C            .byte	$1C
03841 0DE0                        0E            .byte	$E
03842 0DE1                        0E            .byte	$E
03843 0DE2                        1C            .byte	$1C
03844 0DE3                        11            .byte	$11
03845 0DE4                        0E            .byte	$E
03846 0DE5                        1C            .byte	$1C
03847 0DE6                        15            .byte	$15
03848 0DE7                        0E            .byte	$E
03849 0DE8                        1C            .byte	$1C
03850 0DE9                        18            .byte	$18
03851 0DEA                        0E            .byte	$E
03852 0DEB                        1C            .byte	$1C
03853 0DEC                        1C            .byte	$1C
03854 0DED                        0E            .byte	$E
03855 0DEE                        18            .byte	$18
03856 0DEF                        1C            .byte	$1C
03857 0DF0                        0E            .byte	$E
03858 0DF1                        15            .byte	$15
03859 0DF2                        1C            .byte	$1C
03860 0DF3                        0E            .byte	$E
03861 0DF4                        11            .byte	$11
03862 0DF5                        1C            .byte	$1C
03863                                           ! 674   0x14,0x14,0x1c, 0x16,0x14,0x1c, 0x18,0x14,0x1c, 0x1a,0x14,0x1c, 0x1c,0x14,0x1c, 0x1c,0x14,0x1a, 0x1c,0x14,0x18, 0x1c,0x14,0x16,
03864 0DF6                        14            .byte	$14
03865 0DF7                        14            .byte	$14
03866 0DF8                        1C            .byte	$1C
03867 0DF9                        16            .byte	$16
03868 0DFA                        14            .byte	$14
03869 0DFB                        1C            .byte	$1C
03870 0DFC                        18            .byte	$18
03871 0DFD                        14            .byte	$14
03872 0DFE                        1C            .byte	$1C
03873 0DFF                        1A            .byte	$1A
03874 0E00                        14            .byte	$14
03875 0E01                        1C            .byte	$1C
03876 0E02                        1C            .byte	$1C
03877 0E03                        14            .byte	$14
03878 0E04                        1C            .byte	$1C
03879 0E05                        1C            .byte	$1C
03880 0E06                        14            .byte	$14
03881 0E07                        1A            .byte	$1A
03882 0E08                        1C            .byte	$1C
03883 0E09                        14            .byte	$14
03884 0E0A                        18            .byte	$18
03885 0E0B                        1C            .byte	$1C
03886 0E0C                        14            .byte	$14
03887 0E0D                        16            .byte	$16
03888                                           ! 675   0x1c,0x14,0x14, 0x1c,0x16,0x14, 0x1c,0x18,0x14, 0x1c,0x1a,0x14, 0x1c,0x1c,0x14, 0x1a,0x1c,0x14, 0x18,0x1c,0x14, 0x16,0x1c,0x14,
03889 0E0E                        1C            .byte	$1C
03890 0E0F                        14            .byte	$14
03891 0E10                        14            .byte	$14
03892 0E11                        1C            .byte	$1C
03893 0E12                        16            .byte	$16
03894 0E13                        14            .byte	$14
03895 0E14                        1C            .byte	$1C
03896 0E15                        18            .byte	$18
03897 0E16                        14            .byte	$14
03898 0E17                        1C            .byte	$1C
03899 0E18                        1A            .byte	$1A
03900 0E19                        14            .byte	$14
03901 0E1A                        1C            .byte	$1C
03902 0E1B                        1C            .byte	$1C
03903 0E1C                        14            .byte	$14
03904 0E1D                        1A            .byte	$1A
03905 0E1E                        1C            .byte	$1C
03906 0E1F                        14            .byte	$14
03907 0E20                        18            .byte	$18
03908 0E21                        1C            .byte	$1C
03909 0E22                        14            .byte	$14
03910 0E23                        16            .byte	$16
03911 0E24                        1C            .byte	$1C
03912 0E25                        14            .byte	$14
03913                                           ! 676   0x14,0x1c,0x14, 0x14,0x1c,0x16, 0x14,0x1c,0x18, 0x14,0x1c,0x1a, 0x14,0x1c,0x1c, 0x14,0x1a,0x1c, 0x14,0x18,0x1c, 0x14,0x16,0x1c,
03914 0E26                        14            .byte	$14
03915 0E27                        1C            .byte	$1C
03916 0E28                        14            .byte	$14
03917 0E29                        14            .byte	$14
03918 0E2A                        1C            .byte	$1C
03919 0E2B                        16            .byte	$16
03920 0E2C                        14            .byte	$14
03921 0E2D                        1C            .byte	$1C
03922 0E2E                        18            .byte	$18
03923 0E2F                        14            .byte	$14
03924 0E30                        1C            .byte	$1C
03925 0E31                        1A            .byte	$1A
03926 0E32                        14            .byte	$14
03927 0E33                        1C            .byte	$1C
03928 0E34                        1C            .byte	$1C
03929 0E35                        14            .byte	$14
03930 0E36                        1A            .byte	$1A
03931 0E37                        1C            .byte	$1C
03932 0E38                        14            .byte	$14
03933 0E39                        18            .byte	$18
03934 0E3A                        1C            .byte	$1C
03935 0E3B                        14            .byte	$14
03936 0E3C                        16            .byte	$16
03937 0E3D                        1C            .byte	$1C
03938                                           ! 677   0x00,0x00,0x10, 0x04,0x00,0x10, 0x08,0x00,0x10, 0x0c,0x00,0x10, 0x10,0x00,0x10, 0x10,0x00,0x0c, 0x10,0x00,0x08, 0x10,0x00,0x04,
03939 0E3E                        00            .byte	0
03940 0E3F                        00            .byte	0
03941 0E40                        10            .byte	$10
03942 0E41                        04            .byte	4
03943 0E42                        00            .byte	0
03944 0E43                        10            .byte	$10
03945 0E44                        08            .byte	8
03946 0E45                        00            .byte	0
03947 0E46                        10            .byte	$10
03948 0E47                        0C            .byte	$C
03949 0E48                        00            .byte	0
03950 0E49                        10            .byte	$10
03951 0E4A                        10            .byte	$10
03952 0E4B                        00            .byte	0
03953 0E4C                        10            .byte	$10
03954 0E4D                        10            .byte	$10
03955 0E4E                        00            .byte	0
03956 0E4F                        0C            .byte	$C
03957 0E50                        10            .byte	$10
03958 0E51                        00            .byte	0
03959 0E52                        08            .byte	8
03960 0E53                        10            .byte	$10
03961 0E54                        00            .byte	0
03962 0E55                        04            .byte	4
03963                                           ! 678   0x10,0x00,0x00, 0x10,0x04,0x00, 0x10,0x08,0x00, 
03964 0E56                        10            .byte	$10
03965 0E57                        00            .byte	0
03966 0E58                        00            .byte	0
03967 0E59                        10            .byte	$10
03968 0E5A                        04            .byte	4
03969 0E5B                        00            .byte	0
03970 0E5C                        10            .byte	$10
03971 0E5D                        08            .byte	8
03972 0E5E                        00            .byte	0
03973                                           ! 678 0x10,0x0c,0x00, 0x10,0x10,0x00, 0x0c,0x10,0x00, 0x08,0x10,0x00, 0x04,0x10,0x00,
03974 0E5F                        10            .byte	$10
03975 0E60                        0C            .byte	$C
03976 0E61                        00            .byte	0
03977 0E62                        10            .byte	$10
03978 0E63                        10            .byte	$10
03979 0E64                        00            .byte	0
03980 0E65                        0C            .byte	$C
03981 0E66                        10            .byte	$10
03982 0E67                        00            .byte	0
03983 0E68                        08            .byte	8
03984 0E69                        10            .byte	$10
03985 0E6A                        00            .byte	0
03986 0E6B                        04            .byte	4
03987 0E6C                        10            .byte	$10
03988 0E6D                        00            .byte	0
03989                                           ! 679   0x00,0x10,0x00, 0x00,0x10,0x04, 0x00,0x10,0x08, 0x00,0x10,0x0c, 0x00,0x10,0x10, 0x00,0x0c,0x10, 0x00,0x08,0x10, 0x00,0x04,0x10,
03990 0E6E                        00            .byte	0
03991 0E6F                        10            .byte	$10
03992 0E70                        00            .byte	0
03993 0E71                        00            .byte	0
03994 0E72                        10            .byte	$10
03995 0E73                        04            .byte	4
03996 0E74                        00            .byte	0
03997 0E75                        10            .byte	$10
03998 0E76                        08            .byte	8
03999 0E77                        00            .byte	0
04000 0E78                        10            .byte	$10
04001 0E79                        0C            .byte	$C
04002 0E7A                        00            .byte	0
04003 0E7B                        10            .byte	$10
04004 0E7C                        10            .byte	$10
04005 0E7D                        00            .byte	0
04006 0E7E                        0C            .byte	$C
04007 0E7F                        10            .byte	$10
04008 0E80                        00            .byte	0
04009 0E81                        08            .byte	8
04010 0E82                        10            .byte	$10
04011 0E83                        00            .byte	0
04012 0E84                        04            .byte	4
04013 0E85                        10            .byte	$10
04014                                           ! 680   0x08,0x08,0x10, 0x0a,0x08,0x10, 0x0c,0x08,0x10, 0x0e,0x08,0x10, 0x10,0x08,0x10, 0x10,0x08,0x0e, 0x10,0x08,0x0c, 0x10,0x08,0x0a,
04015 0E86                        08            .byte	8
04016 0E87                        08            .byte	8
04017 0E88                        10            .byte	$10
04018 0E89                        0A            .byte	$A
04019 0E8A                        08            .byte	8
04020 0E8B                        10            .byte	$10
04021 0E8C                        0C            .byte	$C
04022 0E8D                        08            .byte	8
04023 0E8E                        10            .byte	$10
04024 0E8F                        0E            .byte	$E
04025 0E90                        08            .byte	8
04026 0E91                        10            .byte	$10
04027 0E92                        10            .byte	$10
04028 0E93                        08            .byte	8
04029 0E94                        10            .byte	$10
04030 0E95                        10            .byte	$10
04031 0E96                        08            .byte	8
04032 0E97                        0E            .byte	$E
04033 0E98                        10            .byte	$10
04034 0E99                        08            .byte	8
04035 0E9A                        0C            .byte	$C
04036 0E9B                        10            .byte	$10
04037 0E9C                        08            .byte	8
04038 0E9D                        0A            .byte	$A
04039                                           ! 681   0x10,0x08,0x08, 0x10,0x0a,0x08, 0x10,0x0c,0x08, 0x10,0x0e,0x08, 0x10,0x10,0x08, 0x0e,0x10,0x08, 0x0c,0x10,0x08, 0x0a,0x10,0x08,
04040 0E9E                        10            .byte	$10
04041 0E9F                        08            .byte	8
04042 0EA0                        08            .byte	8
04043 0EA1                        10            .byte	$10
04044 0EA2                        0A            .byte	$A
04045 0EA3                        08            .byte	8
04046 0EA4                        10            .byte	$10
04047 0EA5                        0C            .byte	$C
04048 0EA6                        08            .byte	8
04049 0EA7                        10            .byte	$10
04050 0EA8                        0E            .byte	$E
04051 0EA9                        08            .byte	8
04052 0EAA                        10            .byte	$10
04053 0EAB                        10            .byte	$10
04054 0EAC                        08            .byte	8
04055 0EAD                        0E            .byte	$E
04056 0EAE                        10            .byte	$10
04057 0EAF                        08            .byte	8
04058 0EB0                        0C            .byte	$C
04059 0EB1                        10            .byte	$10
04060 0EB2                        08            .byte	8
04061 0EB3                        0A            .byte	$A
04062 0EB4                        10            .byte	$10
04063 0EB5                        08            .byte	8
04064                                           ! 682   0x08,0x10,0x08, 0x08,0x10,0x0a, 0x08,0x10,0x0c, 0x08,0x10,0x0e, 0x08,0x10,0x10, 0x08,0x0e,0x10, 0x08,0x0c,0x10, 0x08,0x0a,0x10,
04065 0EB6                        08            .byte	8
04066 0EB7                        10            .byte	$10
04067 0EB8                        08            .byte	8
04068 0EB9                        08            .byte	8
04069 0EBA                        10            .byte	$10
04070 0EBB                        0A            .byte	$A
04071 0EBC                        08            .byte	8
04072 0EBD                        10            .byte	$10
04073 0EBE                        0C            .byte	$C
04074 0EBF                        08            .byte	8
04075 0EC0                        10            .byte	$10
04076 0EC1                        0E            .byte	$E
04077 0EC2                        08            .byte	8
04078 0EC3                        10            .byte	$10
04079 0EC4                        10            .byte	$10
04080 0EC5                        08            .byte	8
04081 0EC6                        0E            .byte	$E
04082 0EC7                        10            .byte	$10
04083 0EC8                        08            .byte	8
04084 0EC9                        0C            .byte	$C
04085 0ECA                        10            .byte	$10
04086 0ECB                        08            .byte	8
04087 0ECC                        0A            .byte	$A
04088 0ECD                        10            .byte	$10
04089                                           ! 683   0x0b,0x0b,0x10, 0x0c,0x0b,0x10, 0x0d,0x0b,0x10, 0x0f,0x0b,0x10, 0x10,0x0b,0x10, 0x10,0x0b,0x0f, 0x10,0x0b,0x0d, 0x10,0x0b,0x0c,
04090 0ECE                        0B            .byte	$B
04091 0ECF                        0B            .byte	$B
04092 0ED0                        10            .byte	$10
04093 0ED1                        0C            .byte	$C
04094 0ED2                        0B            .byte	$B
04095 0ED3                        10            .byte	$10
04096 0ED4                        0D            .byte	$D
04097 0ED5                        0B            .byte	$B
04098 0ED6                        10            .byte	$10
04099 0ED7                        0F            .byte	$F
04100 0ED8                        0B            .byte	$B
04101 0ED9                        10            .byte	$10
04102 0EDA                        10            .byte	$10
04103 0EDB                        0B            .byte	$B
04104 0EDC                        10            .byte	$10
04105 0EDD                        10            .byte	$10
04106 0EDE                        0B            .byte	$B
04107 0EDF                        0F            .byte	$F
04108 0EE0                        10            .byte	$10
04109 0EE1                        0B            .byte	$B
04110 0EE2                        0D            .byte	$D
04111 0EE3                        10            .byte	$10
04112 0EE4                        0B            .byte	$B
04113 0EE5                        0C            .byte	$C
04114                                           ! 684   0x10,0x0b,0x0b, 0x10,0x0c,0x0b, 0x10,0x0d,0x0b, 0x10,0x0f,0x0b, 0x10,0x10,0x0b, 0x0f,0x10,0x0b, 0x0d,0x10,0x0b, 0x0c,0x10,0x0b,
04115 0EE6                        10            .byte	$10
04116 0EE7                        0B            .byte	$B
04117 0EE8                        0B            .byte	$B
04118 0EE9                        10            .byte	$10
04119 0EEA                        0C            .byte	$C
04120 0EEB                        0B            .byte	$B
04121 0EEC                        10            .byte	$10
04122 0EED                        0D            .byte	$D
04123 0EEE                        0B            .byte	$B
04124 0EEF                        10            .byte	$10
04125 0EF0                        0F            .byte	$F
04126 0EF1                        0B            .byte	$B
04127 0EF2                        10            .byte	$10
04128 0EF3                        10            .byte	$10
04129 0EF4                        0B            .byte	$B
04130 0EF5                        0F            .byte	$F
04131 0EF6                        10            .byte	$10
04132 0EF7                        0B            .byte	$B
04133 0EF8                        0D            .byte	$D
04134 0EF9                        10            .byte	$10
04135 0EFA                        0B            .byte	$B
04136 0EFB                        0C            .byte	$C
04137 0EFC                        10            .byte	$10
04138 0EFD                        0B            .byte	$B
04139                                           ! 685   0x0b,0x10,0x0b, 0x0b,0x10,0x0c, 0x0b,0x10,0x0d, 0x0b,0x10,0x0f, 0x0b,0x10,0x10, 0x0b,0x0f,0x10, 0x0b,0x0d,0x10, 0x0b,0x0c,0x10,
04140 0EFE                        0B            .byte	$B
04141 0EFF                        10            .byte	$10
04142 0F00                        0B            .byte	$B
04143 0F01                        0B            .byte	$B
04144 0F02                        10            .byte	$10
04145 0F03                        0C            .byte	$C
04146 0F04                        0B            .byte	$B
04147 0F05                        10            .byte	$10
04148 0F06                        0D            .byte	$D
04149 0F07                        0B            .byte	$B
04150 0F08                        10            .byte	$10
04151 0F09                        0F            .byte	$F
04152 0F0A                        0B            .byte	$B
04153 0F0B                        10            .byte	$10
04154 0F0C                        10            .byte	$10
04155 0F0D                        0B            .byte	$B
04156 0F0E                        0F            .byte	$F
04157 0F0F                        10            .byte	$10
04158 0F10                        0B            .byte	$B
04159 0F11                        0D            .byte	$D
04160 0F12                        10            .byte	$10
04161 0F13                        0B            .byte	$B
04162 0F14                        0C            .byte	$C
04163 0F15                        10            .byte	$10
04164                                           ! 686   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00
04165 0F16                        00            .byte	0
04166 0F17                        00            .byte	0
04167 0F18                        00            .byte	0
04168 0F19                        00            .byte	0
04169 0F1A                        00            .byte	0
04170 0F1B                        00            .byte	0
04171 0F1C                        00            .byte	0
04172 0F1D                        00            .byte	0
04173 0F1E                        00            .byte	0
04174 0F1F                        00            .byte	0
04175 0F20                        00            .byte	0
04176 0F21                        00            .byte	0
04177 0F22                        00            .byte	0
04178 0F23                        00            .byte	0
04179 0F24                        00            .byte	0
04180 0F25                        00            .byte	0
04181 0F26                        00            .byte	0
04182 0F27                        00            .byte	0
04183 0F28                        00            .byte	0
04184 0F29                        00            .byte	0
04185 0F2A                        00            .byte	0
04186 0F2B                        00            .byte	0
04187 0F2C                        00            .byte	0
04188                                           ! 687 };
04189 0F2D                        00            .byte	0
04190                                           !BCC_EOS
04191                                           ! 688 static Bit8u static_functionality[0x10]=
04192                                           ! 689 {
04193                       00000F2E            _static_functionality:
04194                                           ! 690          0xff,
04195 0F2E                        FF            .byte	$FF
04196                                           ! 691          0xe0,
04197 0F2F                        E0            .byte	$E0
04198                                           ! 692          0x0f,
04199 0F30                        0F            .byte	$F
04200                                           ! 693          0x00, 0x00, 0x00, 0x00,
04201 0F31                        00            .byte	0
04202 0F32                        00            .byte	0
04203 0F33                        00            .byte	0
04204 0F34                        00            .byte	0
04205                                           ! 694          0x07,
04206 0F35                        07            .byte	7
04207                                           ! 695          0x02,
04208 0F36                        02            .byte	2
04209                                           ! 696          0x08,
04210 0F37                        08            .byte	8
04211                                           ! 697          0xe7,
04212 0F38                        E7            .byte	$E7
04213                                           ! 698          0x0c,
04214 0F39                        0C            .byte	$C
04215                                           ! 699          0x00,
04216 0F3A                        00            .byte	0
04217                                           ! 700          0x00,
04218 0F3B                        00            .byte	0
04219                                           ! 701          0x00,
04220 0F3C                        00            .byte	0
04221                                           ! 702          0x00
04222                                           ! 703 };
04223 0F3D                        00            .byte	0
04224                                           !BCC_EOS
04225                                           ! 704 static Bit8u vgafont8[256*8]=
04226                                           ! 705 {
04227                       00000F3E            _vgafont8:
04228                                           ! 706  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
04229 0F3E                        00            .byte	0
04230 0F3F                        00            .byte	0
04231 0F40                        00            .byte	0
04232 0F41                        00            .byte	0
04233 0F42                        00            .byte	0
04234 0F43                        00            .byte	0
04235 0F44                        00            .byte	0
04236 0F45                        00            .byte	0
04237                                           ! 707  0x7e, 0x81, 0xa5, 0x81, 0xbd, 0x99, 0x81, 0x7e,
04238 0F46                        7E            .byte	$7E
04239 0F47                        81            .byte	$81
04240 0F48                        A5            .byte	$A5
04241 0F49                        81            .byte	$81
04242 0F4A                        BD            .byte	$BD
04243 0F4B                        99            .byte	$99
04244 0F4C                        81            .byte	$81
04245 0F4D                        7E            .byte	$7E
04246                                           ! 708  0x7e, 0xff, 0xdb, 0xff, 0xc3, 0xe7, 0xff, 0x7e,
04247 0F4E                        7E            .byte	$7E
04248 0F4F                        FF            .byte	$FF
04249 0F50                        DB            .byte	$DB
04250 0F51                        FF            .byte	$FF
04251 0F52                        C3            .byte	$C3
04252 0F53                        E7            .byte	$E7
04253 0F54                        FF            .byte	$FF
04254 0F55                        7E            .byte	$7E
04255                                           ! 709  0x6c, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00,
04256 0F56                        6C            .byte	$6C
04257 0F57                        FE            .byte	$FE
04258 0F58                        FE            .byte	$FE
04259 0F59                        FE            .byte	$FE
04260 0F5A                        7C            .byte	$7C
04261 0F5B                        38            .byte	$38
04262 0F5C                        10            .byte	$10
04263 0F5D                        00            .byte	0
04264                                           ! 710  0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00,
04265 0F5E                        10            .byte	$10
04266 0F5F                        38            .byte	$38
04267 0F60                        7C            .byte	$7C
04268 0F61                        FE            .byte	$FE
04269 0F62                        7C            .byte	$7C
04270 0F63                        38            .byte	$38
04271 0F64                        10            .byte	$10
04272 0F65                        00            .byte	0
04273                                           ! 711  0x38, 0x7c, 0x38, 0xfe, 0xfe, 0x7c, 0x38, 0x7c,
04274 0F66                        38            .byte	$38
04275 0F67                        7C            .byte	$7C
04276 0F68                        38            .byte	$38
04277 0F69                        FE            .byte	$FE
04278 0F6A                        FE            .byte	$FE
04279 0F6B                        7C            .byte	$7C
04280 0F6C                        38            .byte	$38
04281 0F6D                        7C            .byte	$7C
04282                                           ! 712  0x10, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x7c,
04283 0F6E                        10            .byte	$10
04284 0F6F                        10            .byte	$10
04285 0F70                        38            .byte	$38
04286 0F71                        7C            .byte	$7C
04287 0F72                        FE            .byte	$FE
04288 0F73                        7C            .byte	$7C
04289 0F74                        38            .byte	$38
04290 0F75                        7C            .byte	$7C
04291                                           ! 713  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00,
04292 0F76                        00            .byte	0
04293 0F77                        00            .byte	0
04294 0F78                        18            .byte	$18
04295 0F79                        3C            .byte	$3C
04296 0F7A                        3C            .byte	$3C
04297 0F7B                        18            .byte	$18
04298 0F7C                        00            .byte	0
04299 0F7D                        00            .byte	0
04300                                           ! 714  0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff,
04301 0F7E                        FF            .byte	$FF
04302 0F7F                        FF            .byte	$FF
04303 0F80                        E7            .byte	$E7
04304 0F81                        C3            .byte	$C3
04305 0F82                        C3            .byte	$C3
04306 0F83                        E7            .byte	$E7
04307 0F84                        FF            .byte	$FF
04308 0F85                        FF            .byte	$FF
04309                                           ! 715  0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00,
04310 0F86                        00            .byte	0
04311 0F87                        3C            .byte	$3C
04312 0F88                        66            .byte	$66
04313 0F89                        42            .byte	$42
04314 0F8A                        42            .byte	$42
04315 0F8B                        66            .byte	$66
04316 0F8C                        3C            .byte	$3C
04317 0F8D                        00            .byte	0
04318                                           ! 716  0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff,
04319 0F8E                        FF            .byte	$FF
04320 0F8F                        C3            .byte	$C3
04321 0F90                        99            .byte	$99
04322 0F91                        BD            .byte	$BD
04323 0F92                        BD            .byte	$BD
04324 0F93                        99            .byte	$99
04325 0F94                        C3            .byte	$C3
04326 0F95                        FF            .byte	$FF
04327                                           ! 717  0x0f, 0x07, 0x0f, 0x7d, 0xcc, 0xcc, 0xcc, 0x78,
04328 0F96                        0F            .byte	$F
04329 0F97                        07            .byte	7
04330 0F98                        0F            .byte	$F
04331 0F99                        7D            .byte	$7D
04332 0F9A                        CC            .byte	$CC
04333 0F9B                        CC            .byte	$CC
04334 0F9C                        CC            .byte	$CC
04335 0F9D                        78            .byte	$78
04336                                           ! 718  0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18,
04337 0F9E                        3C            .byte	$3C
04338 0F9F                        66            .byte	$66
04339 0FA0                        66            .byte	$66
04340 0FA1                        66            .byte	$66
04341 0FA2                        3C            .byte	$3C
04342 0FA3                        18            .byte	$18
04343 0FA4                        7E            .byte	$7E
04344                                           ! 718 
04345 0FA5                        18            .byte	$18
04346                                           ! 719  0x3f, 0x33, 0x3f, 0x30, 0x30, 0x70, 0xf0, 0xe0,
04347 0FA6                        3F            .byte	$3F
04348 0FA7                        33            .byte	$33
04349 0FA8                        3F            .byte	$3F
04350 0FA9                        30            .byte	$30
04351 0FAA                        30            .byte	$30
04352 0FAB                        70            .byte	$70
04353 0FAC                        F0            .byte	$F0
04354 0FAD                        E0            .byte	$E0
04355                                           ! 720  0x7f, 0x63, 0x7f, 0x63, 0x63, 0x67, 0xe6, 0xc0,
04356 0FAE                        7F            .byte	$7F
04357 0FAF                        63            .byte	$63
04358 0FB0                        7F            .byte	$7F
04359 0FB1                        63            .byte	$63
04360 0FB2                        63            .byte	$63
04361 0FB3                        67            .byte	$67
04362 0FB4                        E6            .byte	$E6
04363 0FB5                        C0            .byte	$C0
04364                                           ! 721  0x99, 0x5a, 0x3c, 0xe7, 0xe7, 0x3c, 0x5a, 0x99,
04365 0FB6                        99            .byte	$99
04366 0FB7                        5A            .byte	$5A
04367 0FB8                        3C            .byte	$3C
04368 0FB9                        E7            .byte	$E7
04369 0FBA                        E7            .byte	$E7
04370 0FBB                        3C            .byte	$3C
04371 0FBC                        5A            .byte	$5A
04372 0FBD                        99            .byte	$99
04373                                           ! 722  0x80, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0x80, 0x00,
04374 0FBE                        80            .byte	$80
04375 0FBF                        E0            .byte	$E0
04376 0FC0                        F8            .byte	$F8
04377 0FC1                        FE            .byte	$FE
04378 0FC2                        F8            .byte	$F8
04379 0FC3                        E0            .byte	$E0
04380 0FC4                        80            .byte	$80
04381 0FC5                        00            .byte	0
04382                                           ! 723  0x02, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x02, 0x00,
04383 0FC6                        02            .byte	2
04384 0FC7                        0E            .byte	$E
04385 0FC8                        3E            .byte	$3E
04386 0FC9                        FE            .byte	$FE
04387 0FCA                        3E            .byte	$3E
04388 0FCB                        0E            .byte	$E
04389 0FCC                        02            .byte	2
04390 0FCD                        00            .byte	0
04391                                           ! 724  0x18, 0x3c, 0x7e, 0x18, 0x18, 0x7e, 0x3c, 0x18,
04392 0FCE                        18            .byte	$18
04393 0FCF                        3C            .byte	$3C
04394 0FD0                        7E            .byte	$7E
04395 0FD1                        18            .byte	$18
04396 0FD2                        18            .byte	$18
04397 0FD3                        7E            .byte	$7E
04398 0FD4                        3C            .byte	$3C
04399 0FD5                        18            .byte	$18
04400                                           ! 725  0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x00,
04401 0FD6                        66            .byte	$66
04402 0FD7                        66            .byte	$66
04403 0FD8                        66            .byte	$66
04404 0FD9                        66            .byte	$66
04405 0FDA                        66            .byte	$66
04406 0FDB                        00            .byte	0
04407 0FDC                        66            .byte	$66
04408 0FDD                        00            .byte	0
04409                                           ! 726  0x7f, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x00,
04410 0FDE                        7F            .byte	$7F
04411 0FDF                        DB            .byte	$DB
04412 0FE0                        DB            .byte	$DB
04413 0FE1                        7B            .byte	$7B
04414 0FE2                        1B            .byte	$1B
04415 0FE3                        1B            .byte	$1B
04416 0FE4                        1B            .byte	$1B
04417 0FE5                        00            .byte	0
04418                                           ! 727  0x3e, 0x63, 0x38, 0x6c, 0x6c, 0x38, 0xcc, 0x78,
04419 0FE6                        3E            .byte	$3E
04420 0FE7                        63            .byte	$63
04421 0FE8                        38            .byte	$38
04422 0FE9                        6C            .byte	$6C
04423 0FEA                        6C            .byte	$6C
04424 0FEB                        38            .byte	$38
04425 0FEC                        CC            .byte	$CC
04426 0FED                        78            .byte	$78
04427                                           ! 728  0x00, 0x00, 0x00, 0x00, 0x7e, 0x7e, 0x7e, 0x00,
04428 0FEE                        00            .byte	0
04429 0FEF                        00            .byte	0
04430 0FF0                        00            .byte	0
04431 0FF1                        00            .byte	0
04432 0FF2                        7E            .byte	$7E
04433 0FF3                        7E            .byte	$7E
04434 0FF4                        7E            .byte	$7E
04435 0FF5                        00            .byte	0
04436                                           ! 729  0x18, 0x3c, 0x7e, 0x18, 0x7e, 0x3c, 0x18, 0xff,
04437 0FF6                        18            .byte	$18
04438 0FF7                        3C            .byte	$3C
04439 0FF8                        7E            .byte	$7E
04440 0FF9                        18            .byte	$18
04441 0FFA                        7E            .byte	$7E
04442 0FFB                        3C            .byte	$3C
04443 0FFC                        18            .byte	$18
04444 0FFD                        FF            .byte	$FF
04445                                           ! 730  0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x00,
04446 0FFE                        18            .byte	$18
04447 0FFF                        3C            .byte	$3C
04448 1000                        7E            .byte	$7E
04449 1001                        18            .byte	$18
04450 1002                        18            .byte	$18
04451 1003                        18            .byte	$18
04452 1004                        18            .byte	$18
04453 1005                        00            .byte	0
04454                                           ! 731  0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00,
04455 1006                        18            .byte	$18
04456 1007                        18            .byte	$18
04457 1008                        18            .byte	$18
04458 1009                        18            .byte	$18
04459 100A                        7E            .byte	$7E
04460 100B                        3C            .byte	$3C
04461 100C                        18            .byte	$18
04462 100D                        00            .byte	0
04463                                           ! 732  0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00,
04464 100E                        00            .byte	0
04465 100F                        18            .byte	$18
04466 1010                        0C            .byte	$C
04467 1011                        FE            .byte	$FE
04468 1012                        0C            .byte	$C
04469 1013                        18            .byte	$18
04470 1014                        00            .byte	0
04471 1015                        00            .byte	0
04472                                           ! 733  0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00,
04473 1016                        00            .byte	0
04474 1017                        30            .byte	$30
04475 1018                        60            .byte	$60
04476 1019                        FE            .byte	$FE
04477 101A                        60            .byte	$60
04478 101B                        30            .byte	$30
04479 101C                        00            .byte	0
04480 101D                        00            .byte	0
04481                                           ! 734  0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00,
04482 101E                        00            .byte	0
04483 101F                        00            .byte	0
04484 1020                        C0            .byte	$C0
04485 1021                        C0            .byte	$C0
04486 1022                        C0            .byte	$C0
04487 1023                        FE            .byte	$FE
04488 1024                        00            .byte	0
04489 1025                        00            .byte	0
04490                                           ! 735  0x00, 0x24, 0x66, 0xff, 0x66, 0x24, 0x00, 0x00,
04491 1026                        00            .byte	0
04492 1027                        24            .byte	$24
04493 1028                        66            .byte	$66
04494 1029                        FF            .byte	$FF
04495 102A                        66            .byte	$66
04496 102B                        24            .byte	$24
04497 102C                        00            .byte	0
04498 102D                        00            .byte	0
04499                                           ! 736  0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x00, 0x00,
04500 102E                        00            .byte	0
04501 102F                        18            .byte	$18
04502 1030                        3C            .byte	$3C
04503 1031                        7E            .byte	$7E
04504 1032                        FF            .byte	$FF
04505 1033                        FF            .byte	$FF
04506 1034                        00            .byte	0
04507 1035                        00            .byte	0
04508                                           ! 737  0x00, 0xff, 0xff, 0x7e, 0x3c, 0x18, 0x00, 0x00,
04509 1036                        00            .byte	0
04510 1037                        FF            .byte	$FF
04511 1038                        FF            .byte	$FF
04512 1039                        7E            .byte	$7E
04513 103A                        3C            .byte	$3C
04514 103B                        18            .byte	$18
04515 103C                        00            .byte	0
04516 103D                        00            .byte	0
04517                                           ! 738  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
04518 103E                        00            .byte	0
04519 103F                        00            .byte	0
04520 1040                        00            .byte	0
04521 1041                        00            .byte	0
04522 1042                        00            .byte	0
04523 1043                        00            .byte	0
04524 1044                        00            .byte	0
04525 1045                        00            .byte	0
04526                                           ! 739  0x30, 0x78, 0x78, 0x30, 0x30, 0x00, 0x30, 0x00,
04527 1046                        30            .byte	$30
04528 1047                        78            .byte	$78
04529 1048                        78            .byte	$78
04530 1049                        30            .byte	$30
04531 104A                        30            .byte	$30
04532 104B                        00            .byte	0
04533 104C                        30            .byte	$30
04534 104D                        00            .byte	0
04535                                           ! 740  0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00,
04536 104E                        6C            .byte	$6C
04537 104F                        6C            .byte	$6C
04538 1050                        6C            .byte	$6C
04539 1051                        00            .byte	0
04540 1052                        00            .byte	0
04541 1053                        00            .byte	0
04542 1054                        00            .byte	0
04543 1055                        00            .byte	0
04544                                           ! 741  0x6c, 0x6c, 0xfe, 0x6c, 0xfe, 0x6c, 0x6c, 0x00,
04545 1056                        6C            .byte	$6C
04546 1057                        6C            .byte	$6C
04547 1058                        FE            .byte	$FE
04548 1059                        6C            .byte	$6C
04549 105A                        FE            .byte	$FE
04550 105B                        6C            .byte	$6C
04551 105C                        6C            .byte	$6C
04552 105D                        00            .byte	0
04553                                           ! 742  0x30, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x30, 0x00,
04554 105E                        30            .byte	$30
04555 105F                        7C            .byte	$7C
04556 1060                        C0            .byte	$C0
04557 1061                        78            .byte	$78
04558 1062                        0C            .byte	$C
04559 1063                        F8            .byte	$F8
04560 1064                        30            .byte	$30
04561 1065                        00            .byte	0
04562                                           ! 743  0x00, 0xc6, 0xcc, 0x18, 0x30, 0x66, 0xc6, 0x00,
04563 1066                        00            .byte	0
04564 1067                        C6            .byte	$C6
04565 1068                        CC            .byte	$CC
04566 1069                        18            .byte	$18
04567 106A                        30            .byte	$30
04568 106B                        66            .byte	$66
04569 106C                        C6            .byte	$C6
04570 106D                        00            .byte	0
04571                                           ! 744  0x38, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0x76, 0x00,
04572 106E                        38            .byte	$38
04573 106F                        6C            .byte	$6C
04574 1070                        38            .byte	$38
04575 1071                        76            .byte	$76
04576 1072                        DC            .byte	$DC
04577 1073                        CC            .byte	$CC
04578 1074                        76            .byte	$76
04579 1075                        00            .byte	0
04580                                           ! 745  0x60, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
04581 1076                        60            .byte	$60
04582 1077                        60            .byte	$60
04583 1078                        C0            .byte	$C0
04584 1079                        00            .byte	0
04585 107A                        00            .byte	0
04586 107B                        00            .byte	0
04587 107C                        00            .byte	0
04588 107D                        00            .byte	0
04589                                           ! 746  0x18, 0x30, 0x60, 0x60, 0x60, 0x30, 0x18, 0x00,
04590 107E                        18            .byte	$18
04591 107F                        30            .byte	$30
04592 1080                        60            .byte	$60
04593 1081                        60            .byte	$60
04594 1082                        60            .byte	$60
04595 1083                        30            .byte	$30
04596 1084                        18            .byte	$18
04597 1085                        00            .byte	0
04598                                           ! 747  0x60, 0x30, 0x18, 0x18, 0x18, 0x30, 0x60, 0x00,
04599 1086                        60            .byte	$60
04600 1087                        30            .byte	$30
04601 1088                        18            .byte	$18
04602 1089                        18            .byte	$18
04603 108A                        18            .byte	$18
04604 108B                        30            .byte	$30
04605 108C                        60            .byte	$60
04606 108D                        00            .byte	0
04607                                           ! 748  0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00,
04608 108E                        00            .byte	0
04609 108F                        66            .byte	$66
04610 1090                        3C            .byte	$3C
04611 1091                        FF            .byte	$FF
04612 1092                        3C            .byte	$3C
04613 1093                        66            .byte	$66
04614 1094                        00            .byte	0
04615 1095                        00            .byte	0
04616                                           ! 749  0x00, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x00, 0x00,
04617 1096                        00            .byte	0
04618 1097                        30            .byte	$30
04619 1098                        30            .byte	$30
04620 1099                        FC            .byte	$FC
04621 109A                        30            .byte	$30
04622 109B                        30            .byte	$30
04623 109C                        00            .byte	0
04624 109D                        00            .byte	0
04625                                           ! 750  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x60,
04626 109E                        00            .byte	0
04627 109F                        00            .byte	0
04628 10A0                        00            .byte	0
04629 10A1                        00            .byte	0
04630 10A2                        00            .byte	0
04631 10A3                        30            .byte	$30
04632 10A4                        30            .byte	$30
04633 10A5                        60            .byte	$60
04634                                           ! 751  0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00,
04635 10A6                        00            .byte	0
04636 10A7                        00            .byte	0
04637 10A8                        00            .byte	0
04638 10A9                        FC            .byte	$FC
04639 10AA                        00            .byte	0
04640 10AB                        00            .byte	0
04641 10AC                        00            .byte	0
04642 10AD                        00            .byte	0
04643                                           ! 752  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00,
04644 10AE                        00            .byte	0
04645 10AF                        00            .byte	0
04646 10B0                        00            .byte	0
04647 10B1                        00            .byte	0
04648 10B2                        00            .byte	0
04649 10B3                        30            .byte	$30
04650 10B4                        30            .byte	$30
04651 10B5                        00            .byte	0
04652                                           ! 753  0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00,
04653 10B6                        06            .byte	6
04654 10B7                        0C            .byte	$C
04655 10B8                        18            .byte	$18
04656 10B9                        30            .byte	$30
04657 10BA                        60            .byte	$60
04658 10BB                        C0            .byte	$C0
04659 10BC                        80            .byte	$80
04660 10BD                        00            .byte	0
04661                                           ! 754  0x7c, 0xc6, 0xce, 0xde, 0xf6, 0xe6, 0x7c, 0x00,
04662 10BE                        7C            .byte	$7C
04663 10BF                        C6            .byte	$C6
04664 10C0                        CE            .byte	$CE
04665 10C1                        DE            .byte	$DE
04666 10C2                        F6            .byte	$F6
04667 10C3                        E6            .byte	$E6
04668 10C4                        7C            .byte	$7C
04669 10C5                        00            .byte	0
04670                                           ! 755  0x30, 0x70, 0x30, 0x30, 0x30, 0x30, 0xfc, 0x00,
04671 10C6                        30            .byte	$30
04672 10C7                        70            .byte	$70
04673 10C8                        30            .byte	$30
04674 10C9                        30            .byte	$30
04675 10CA                        30            .byte	$30
04676 10CB                        30            .byte	$30
04677 10CC                        FC            .byte	$FC
04678 10CD                        00            .byte	0
04679                                           ! 756  0x78, 0xcc, 0x0c, 0x38, 0x60, 0xcc, 0xfc, 0x00,
04680 10CE                        78            .byte	$78
04681 10CF                        CC            .byte	$CC
04682 10D0                        0C            .byte	$C
04683 10D1                        38            .byte	$38
04684 10D2                        60            .byte	$60
04685 10D3                        CC            .byte	$CC
04686 10D4                        FC            .byte	$FC
04687 10D5                        00            .byte	0
04688                                           ! 757  0x78, 0xcc, 0x0c, 0x38, 0x0c, 0xcc, 0x78, 0x00,
04689 10D6                        78            .byte	$78
04690 10D7                        CC            .byte	$CC
04691 10D8                        0C            .byte	$C
04692 10D9                        38            .byte	$38
04693 10DA                        0C            .byte	$C
04694 10DB                        CC            .byte	$CC
04695 10DC                        78            .byte	$78
04696 10DD                        00            .byte	0
04697                                           ! 758  0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x1e, 0x00,
04698 10DE                        1C            .byte	$1C
04699 10DF                        3C            .byte	$3C
04700 10E0                        6C            .byte	$6C
04701 10E1                        CC            .byte	$CC
04702 10E2                        FE            .byte	$FE
04703 10E3                        0C            .byte	$C
04704 10E4                        1E            .byte	$1E
04705 10E5                        00            .byte	0
04706                                           ! 759  0xfc, 0xc0, 0xf8, 0x0c, 0x0c, 0xcc, 0x78, 0x00,
04707 10E6                        FC            .byte	$FC
04708 10E7                        C0            .byte	$C0
04709 10E8                        F8            .byte	$F8
04710 10E9                        0C            .byte	$C
04711 10EA                        0C            .byte	$C
04712 10EB                        CC            .byte	$CC
04713 10EC                        78            .byte	$78
04714 10ED                        00            .byte	0
04715                                           ! 760  0x38, 0x60, 0xc0, 0xf8, 0xcc, 0xcc, 0
04716 10EE                        38            .byte	$38
04717 10EF                        60            .byte	$60
04718 10F0                        C0            .byte	$C0
04719 10F1                        F8            .byte	$F8
04720 10F2                        CC            .byte	$CC
04721 10F3                        CC            .byte	$CC
04722                                           ! 760 x78, 0x00,
04723 10F4                        78            .byte	$78
04724 10F5                        00            .byte	0
04725                                           ! 761  0xfc, 0xcc, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x00,
04726 10F6                        FC            .byte	$FC
04727 10F7                        CC            .byte	$CC
04728 10F8                        0C            .byte	$C
04729 10F9                        18            .byte	$18
04730 10FA                        30            .byte	$30
04731 10FB                        30            .byte	$30
04732 10FC                        30            .byte	$30
04733 10FD                        00            .byte	0
04734                                           ! 762  0x78, 0xcc, 0xcc, 0x78, 0xcc, 0xcc, 0x78, 0x00,
04735 10FE                        78            .byte	$78
04736 10FF                        CC            .byte	$CC
04737 1100                        CC            .byte	$CC
04738 1101                        78            .byte	$78
04739 1102                        CC            .byte	$CC
04740 1103                        CC            .byte	$CC
04741 1104                        78            .byte	$78
04742 1105                        00            .byte	0
04743                                           ! 763  0x78, 0xcc, 0xcc, 0x7c, 0x0c, 0x18, 0x70, 0x00,
04744 1106                        78            .byte	$78
04745 1107                        CC            .byte	$CC
04746 1108                        CC            .byte	$CC
04747 1109                        7C            .byte	$7C
04748 110A                        0C            .byte	$C
04749 110B                        18            .byte	$18
04750 110C                        70            .byte	$70
04751 110D                        00            .byte	0
04752                                           ! 764  0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x00,
04753 110E                        00            .byte	0
04754 110F                        30            .byte	$30
04755 1110                        30            .byte	$30
04756 1111                        00            .byte	0
04757 1112                        00            .byte	0
04758 1113                        30            .byte	$30
04759 1114                        30            .byte	$30
04760 1115                        00            .byte	0
04761                                           ! 765  0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x60,
04762 1116                        00            .byte	0
04763 1117                        30            .byte	$30
04764 1118                        30            .byte	$30
04765 1119                        00            .byte	0
04766 111A                        00            .byte	0
04767 111B                        30            .byte	$30
04768 111C                        30            .byte	$30
04769 111D                        60            .byte	$60
04770                                           ! 766  0x18, 0x30, 0x60, 0xc0, 0x60, 0x30, 0x18, 0x00,
04771 111E                        18            .byte	$18
04772 111F                        30            .byte	$30
04773 1120                        60            .byte	$60
04774 1121                        C0            .byte	$C0
04775 1122                        60            .byte	$60
04776 1123                        30            .byte	$30
04777 1124                        18            .byte	$18
04778 1125                        00            .byte	0
04779                                           ! 767  0x00, 0x00, 0xfc, 0x00, 0x00, 0xfc, 0x00, 0x00,
04780 1126                        00            .byte	0
04781 1127                        00            .byte	0
04782 1128                        FC            .byte	$FC
04783 1129                        00            .byte	0
04784 112A                        00            .byte	0
04785 112B                        FC            .byte	$FC
04786 112C                        00            .byte	0
04787 112D                        00            .byte	0
04788                                           ! 768  0x60, 0x30, 0x18, 0x0c, 0x18, 0x30, 0x60, 0x00,
04789 112E                        60            .byte	$60
04790 112F                        30            .byte	$30
04791 1130                        18            .byte	$18
04792 1131                        0C            .byte	$C
04793 1132                        18            .byte	$18
04794 1133                        30            .byte	$30
04795 1134                        60            .byte	$60
04796 1135                        00            .byte	0
04797                                           ! 769  0x78, 0xcc, 0x0c, 0x18, 0x30, 0x00, 0x30, 0x00,
04798 1136                        78            .byte	$78
04799 1137                        CC            .byte	$CC
04800 1138                        0C            .byte	$C
04801 1139                        18            .byte	$18
04802 113A                        30            .byte	$30
04803 113B                        00            .byte	0
04804 113C                        30            .byte	$30
04805 113D                        00            .byte	0
04806                                           ! 770  0x7c, 0xc6, 0xde, 0xde, 0xde, 0xc0, 0x78, 0x00,
04807 113E                        7C            .byte	$7C
04808 113F                        C6            .byte	$C6
04809 1140                        DE            .byte	$DE
04810 1141                        DE            .byte	$DE
04811 1142                        DE            .byte	$DE
04812 1143                        C0            .byte	$C0
04813 1144                        78            .byte	$78
04814 1145                        00            .byte	0
04815                                           ! 771  0x30, 0x78, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0x00,
04816 1146                        30            .byte	$30
04817 1147                        78            .byte	$78
04818 1148                        CC            .byte	$CC
04819 1149                        CC            .byte	$CC
04820 114A                        FC            .byte	$FC
04821 114B                        CC            .byte	$CC
04822 114C                        CC            .byte	$CC
04823 114D                        00            .byte	0
04824                                           ! 772  0xfc, 0x66, 0x66, 0x7c, 0x66, 0x66, 0xfc, 0x00,
04825 114E                        FC            .byte	$FC
04826 114F                        66            .byte	$66
04827 1150                        66            .byte	$66
04828 1151                        7C            .byte	$7C
04829 1152                        66            .byte	$66
04830 1153                        66            .byte	$66
04831 1154                        FC            .byte	$FC
04832 1155                        00            .byte	0
04833                                           ! 773  0x3c, 0x66, 0xc0, 0xc0, 0xc0, 0x66, 0x3c, 0x00,
04834 1156                        3C            .byte	$3C
04835 1157                        66            .byte	$66
04836 1158                        C0            .byte	$C0
04837 1159                        C0            .byte	$C0
04838 115A                        C0            .byte	$C0
04839 115B                        66            .byte	$66
04840 115C                        3C            .byte	$3C
04841 115D                        00            .byte	0
04842                                           ! 774  0xf8, 0x6c, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00,
04843 115E                        F8            .byte	$F8
04844 115F                        6C            .byte	$6C
04845 1160                        66            .byte	$66
04846 1161                        66            .byte	$66
04847 1162                        66            .byte	$66
04848 1163                        6C            .byte	$6C
04849 1164                        F8            .byte	$F8
04850 1165                        00            .byte	0
04851                                           ! 775  0xfe, 0x62, 0x68, 0x78, 0x68, 0x62, 0xfe, 0x00,
04852 1166                        FE            .byte	$FE
04853 1167                        62            .byte	$62
04854 1168                        68            .byte	$68
04855 1169                        78            .byte	$78
04856 116A                        68            .byte	$68
04857 116B                        62            .byte	$62
04858 116C                        FE            .byte	$FE
04859 116D                        00            .byte	0
04860                                           ! 776  0xfe, 0x62, 0x68, 0x78, 0x68, 0x60, 0xf0, 0x00,
04861 116E                        FE            .byte	$FE
04862 116F                        62            .byte	$62
04863 1170                        68            .byte	$68
04864 1171                        78            .byte	$78
04865 1172                        68            .byte	$68
04866 1173                        60            .byte	$60
04867 1174                        F0            .byte	$F0
04868 1175                        00            .byte	0
04869                                           ! 777  0x3c, 0x66, 0xc0, 0xc0, 0xce, 0x66, 0x3e, 0x00,
04870 1176                        3C            .byte	$3C
04871 1177                        66            .byte	$66
04872 1178                        C0            .byte	$C0
04873 1179                        C0            .byte	$C0
04874 117A                        CE            .byte	$CE
04875 117B                        66            .byte	$66
04876 117C                        3E            .byte	$3E
04877 117D                        00            .byte	0
04878                                           ! 778  0xcc, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0xcc, 0x00,
04879 117E                        CC            .byte	$CC
04880 117F                        CC            .byte	$CC
04881 1180                        CC            .byte	$CC
04882 1181                        FC            .byte	$FC
04883 1182                        CC            .byte	$CC
04884 1183                        CC            .byte	$CC
04885 1184                        CC            .byte	$CC
04886 1185                        00            .byte	0
04887                                           ! 779  0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
04888 1186                        78            .byte	$78
04889 1187                        30            .byte	$30
04890 1188                        30            .byte	$30
04891 1189                        30            .byte	$30
04892 118A                        30            .byte	$30
04893 118B                        30            .byte	$30
04894 118C                        78            .byte	$78
04895 118D                        00            .byte	0
04896                                           ! 780  0x1e, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00,
04897 118E                        1E            .byte	$1E
04898 118F                        0C            .byte	$C
04899 1190                        0C            .byte	$C
04900 1191                        0C            .byte	$C
04901 1192                        CC            .byte	$CC
04902 1193                        CC            .byte	$CC
04903 1194                        78            .byte	$78
04904 1195                        00            .byte	0
04905                                           ! 781  0xe6, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0xe6, 0x00,
04906 1196                        E6            .byte	$E6
04907 1197                        66            .byte	$66
04908 1198                        6C            .byte	$6C
04909 1199                        78            .byte	$78
04910 119A                        6C            .byte	$6C
04911 119B                        66            .byte	$66
04912 119C                        E6            .byte	$E6
04913 119D                        00            .byte	0
04914                                           ! 782  0xf0, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00,
04915 119E                        F0            .byte	$F0
04916 119F                        60            .byte	$60
04917 11A0                        60            .byte	$60
04918 11A1                        60            .byte	$60
04919 11A2                        62            .byte	$62
04920 11A3                        66            .byte	$66
04921 11A4                        FE            .byte	$FE
04922 11A5                        00            .byte	0
04923                                           ! 783  0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0x00,
04924 11A6                        C6            .byte	$C6
04925 11A7                        EE            .byte	$EE
04926 11A8                        FE            .byte	$FE
04927 11A9                        FE            .byte	$FE
04928 11AA                        D6            .byte	$D6
04929 11AB                        C6            .byte	$C6
04930 11AC                        C6            .byte	$C6
04931 11AD                        00            .byte	0
04932                                           ! 784  0xc6, 0xe6, 0xf6, 0xde, 0xce, 0xc6, 0xc6, 0x00,
04933 11AE                        C6            .byte	$C6
04934 11AF                        E6            .byte	$E6
04935 11B0                        F6            .byte	$F6
04936 11B1                        DE            .byte	$DE
04937 11B2                        CE            .byte	$CE
04938 11B3                        C6            .byte	$C6
04939 11B4                        C6            .byte	$C6
04940 11B5                        00            .byte	0
04941                                           ! 785  0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00,
04942 11B6                        38            .byte	$38
04943 11B7                        6C            .byte	$6C
04944 11B8                        C6            .byte	$C6
04945 11B9                        C6            .byte	$C6
04946 11BA                        C6            .byte	$C6
04947 11BB                        6C            .byte	$6C
04948 11BC                        38            .byte	$38
04949 11BD                        00            .byte	0
04950                                           ! 786  0xfc, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
04951 11BE                        FC            .byte	$FC
04952 11BF                        66            .byte	$66
04953 11C0                        66            .byte	$66
04954 11C1                        7C            .byte	$7C
04955 11C2                        60            .byte	$60
04956 11C3                        60            .byte	$60
04957 11C4                        F0            .byte	$F0
04958 11C5                        00            .byte	0
04959                                           ! 787  0x78, 0xcc, 0xcc, 0xcc, 0xdc, 0x78, 0x1c, 0x00,
04960 11C6                        78            .byte	$78
04961 11C7                        CC            .byte	$CC
04962 11C8                        CC            .byte	$CC
04963 11C9                        CC            .byte	$CC
04964 11CA                        DC            .byte	$DC
04965 11CB                        78            .byte	$78
04966 11CC                        1C            .byte	$1C
04967 11CD                        00            .byte	0
04968                                           ! 788  0xfc, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0xe6, 0x00,
04969 11CE                        FC            .byte	$FC
04970 11CF                        66            .byte	$66
04971 11D0                        66            .byte	$66
04972 11D1                        7C            .byte	$7C
04973 11D2                        6C            .byte	$6C
04974 11D3                        66            .byte	$66
04975 11D4                        E6            .byte	$E6
04976 11D5                        00            .byte	0
04977                                           ! 789  0x78, 0xcc, 0xe0, 0x70, 0x1c, 0xcc, 0x78, 0x00,
04978 11D6                        78            .byte	$78
04979 11D7                        CC            .byte	$CC
04980 11D8                        E0            .byte	$E0
04981 11D9                        70            .byte	$70
04982 11DA                        1C            .byte	$1C
04983 11DB                        CC            .byte	$CC
04984 11DC                        78            .byte	$78
04985 11DD                        00            .byte	0
04986                                           ! 790  0xfc, 0xb4, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
04987 11DE                        FC            .byte	$FC
04988 11DF                        B4            .byte	$B4
04989 11E0                        30            .byte	$30
04990 11E1                        30            .byte	$30
04991 11E2                        30            .byte	$30
04992 11E3                        30            .byte	$30
04993 11E4                        78            .byte	$78
04994 11E5                        00            .byte	0
04995                                           ! 791  0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xfc, 0x00,
04996 11E6                        CC            .byte	$CC
04997 11E7                        CC            .byte	$CC
04998 11E8                        CC            .byte	$CC
04999 11E9                        CC            .byte	$CC
05000 11EA                        CC            .byte	$CC
05001 11EB                        CC            .byte	$CC
05002 11EC                        FC            .byte	$FC
05003 11ED                        00            .byte	0
05004                                           ! 792  0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00,
05005 11EE                        CC            .byte	$CC
05006 11EF                        CC            .byte	$CC
05007 11F0                        CC            .byte	$CC
05008 11F1                        CC            .byte	$CC
05009 11F2                        CC            .byte	$CC
05010 11F3                        78            .byte	$78
05011 11F4                        30            .byte	$30
05012 11F5                        00            .byte	0
05013                                           ! 793  0xc6, 0xc6, 0xc6, 0xd6, 0xfe, 0xee, 0xc6, 0x00,
05014 11F6                        C6            .byte	$C6
05015 11F7                        C6            .byte	$C6
05016 11F8                        C6            .byte	$C6
05017 11F9                        D6            .byte	$D6
05018 11FA                        FE            .byte	$FE
05019 11FB                        EE            .byte	$EE
05020 11FC                        C6            .byte	$C6
05021 11FD                        00            .byte	0
05022                                           ! 794  0xc6, 0xc6, 0x6c, 0x38, 0x38, 0x6c, 0xc6, 0x00,
05023 11FE                        C6            .byte	$C6
05024 11FF                        C6            .byte	$C6
05025 1200                        6C            .byte	$6C
05026 1201                        38            .byte	$38
05027 1202                        38            .byte	$38
05028 1203                        6C            .byte	$6C
05029 1204                        C6            .byte	$C6
05030 1205                        00            .byte	0
05031                                           ! 795  0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x30, 0x78, 0x00,
05032 1206                        CC            .byte	$CC
05033 1207                        CC            .byte	$CC
05034 1208                        CC            .byte	$CC
05035 1209                        78            .byte	$78
05036 120A                        30            .byte	$30
05037 120B                        30            .byte	$30
05038 120C                        78            .byte	$78
05039 120D                        00            .byte	0
05040                                           ! 796  0xfe, 0xc6, 0x8c, 0x18, 0x32, 0x66, 0xfe, 0x00,
05041 120E                        FE            .byte	$FE
05042 120F                        C6            .byte	$C6
05043 1210                        8C            .byte	$8C
05044 1211                        18            .byte	$18
05045 1212                        32            .byte	$32
05046 1213                        66            .byte	$66
05047 1214                        FE            .byte	$FE
05048 1215                        00            .byte	0
05049                                           ! 797  0x78, 0x60, 0x60, 0x60, 0x60, 0x60, 0x78, 0x00,
05050 1216                        78            .byte	$78
05051 1217                        60            .byte	$60
05052 1218                        60            .byte	$60
05053 1219                        60            .byte	$60
05054 121A                        60            .byte	$60
05055 121B                        60            .byte	$60
05056 121C                        78            .byte	$78
05057 121D                        00            .byte	0
05058                                           ! 798  0xc0, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x02, 0x00,
05059 121E                        C0            .byte	$C0
05060 121F                        60            .byte	$60
05061 1220                        30            .byte	$30
05062 1221                        18            .byte	$18
05063 1222                        0C            .byte	$C
05064 1223                        06            .byte	6
05065 1224                        02            .byte	2
05066 1225                        00            .byte	0
05067                                           ! 799  0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x78, 0x00,
05068 1226                        78            .byte	$78
05069 1227                        18            .byte	$18
05070 1228                        18            .byte	$18
05071 1229                        18            .byte	$18
05072 122A                        18            .byte	$18
05073 122B                        18            .byte	$18
05074 122C                        78            .byte	$78
05075 122D                        00            .byte	0
05076                                           ! 800  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00,
05077 122E                        10            .byte	$10
05078 122F                        38            .byte	$38
05079 1230                        6C            .byte	$6C
05080 1231                        C6            .byte	$C6
05081 1232                        00            .byte	0
05082 1233                        00            .byte	0
05083 1234                        00            .byte	0
05084 1235                        00            .byte	0
05085                                           ! 801  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
05086 1236                        00            .byte	0
05087 1237                        00            .byte	0
05088 1238                        00            .byte	0
05089 1239                        00            .byte	0
05090 123A                        00            .byte	0
05091 123B                        00            .byte	0
05092 123C                        00            .byte	0
05093 123D                        FF            .byte	$FF
05094                                           ! 802  0x30, 0x30, 0x18, 0x00, 0x0
05095 123E                        30            .byte	$30
05096 123F                        30            .byte	$30
05097 1240                        18            .byte	$18
05098 1241                        00            .byte	0
05099                                           ! 802 0, 0x00, 0x00, 0x00,
05100 1242                        00            .byte	0
05101 1243                        00            .byte	0
05102 1244                        00            .byte	0
05103 1245                        00            .byte	0
05104                                           ! 803  0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x76, 0x00,
05105 1246                        00            .byte	0
05106 1247                        00            .byte	0
05107 1248                        78            .byte	$78
05108 1249                        0C            .byte	$C
05109 124A                        7C            .byte	$7C
05110 124B                        CC            .byte	$CC
05111 124C                        76            .byte	$76
05112 124D                        00            .byte	0
05113                                           ! 804  0xe0, 0x60, 0x60, 0x7c, 0x66, 0x66, 0xdc, 0x00,
05114 124E                        E0            .byte	$E0
05115 124F                        60            .byte	$60
05116 1250                        60            .byte	$60
05117 1251                        7C            .byte	$7C
05118 1252                        66            .byte	$66
05119 1253                        66            .byte	$66
05120 1254                        DC            .byte	$DC
05121 1255                        00            .byte	0
05122                                           ! 805  0x00, 0x00, 0x78, 0xcc, 0xc0, 0xcc, 0x78, 0x00,
05123 1256                        00            .byte	0
05124 1257                        00            .byte	0
05125 1258                        78            .byte	$78
05126 1259                        CC            .byte	$CC
05127 125A                        C0            .byte	$C0
05128 125B                        CC            .byte	$CC
05129 125C                        78            .byte	$78
05130 125D                        00            .byte	0
05131                                           ! 806  0x1c, 0x0c, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00,
05132 125E                        1C            .byte	$1C
05133 125F                        0C            .byte	$C
05134 1260                        0C            .byte	$C
05135 1261                        7C            .byte	$7C
05136 1262                        CC            .byte	$CC
05137 1263                        CC            .byte	$CC
05138 1264                        76            .byte	$76
05139 1265                        00            .byte	0
05140                                           ! 807  0x00, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05141 1266                        00            .byte	0
05142 1267                        00            .byte	0
05143 1268                        78            .byte	$78
05144 1269                        CC            .byte	$CC
05145 126A                        FC            .byte	$FC
05146 126B                        C0            .byte	$C0
05147 126C                        78            .byte	$78
05148 126D                        00            .byte	0
05149                                           ! 808  0x38, 0x6c, 0x60, 0xf0, 0x60, 0x60, 0xf0, 0x00,
05150 126E                        38            .byte	$38
05151 126F                        6C            .byte	$6C
05152 1270                        60            .byte	$60
05153 1271                        F0            .byte	$F0
05154 1272                        60            .byte	$60
05155 1273                        60            .byte	$60
05156 1274                        F0            .byte	$F0
05157 1275                        00            .byte	0
05158                                           ! 809  0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05159 1276                        00            .byte	0
05160 1277                        00            .byte	0
05161 1278                        76            .byte	$76
05162 1279                        CC            .byte	$CC
05163 127A                        CC            .byte	$CC
05164 127B                        7C            .byte	$7C
05165 127C                        0C            .byte	$C
05166 127D                        F8            .byte	$F8
05167                                           ! 810  0xe0, 0x60, 0x6c, 0x76, 0x66, 0x66, 0xe6, 0x00,
05168 127E                        E0            .byte	$E0
05169 127F                        60            .byte	$60
05170 1280                        6C            .byte	$6C
05171 1281                        76            .byte	$76
05172 1282                        66            .byte	$66
05173 1283                        66            .byte	$66
05174 1284                        E6            .byte	$E6
05175 1285                        00            .byte	0
05176                                           ! 811  0x30, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05177 1286                        30            .byte	$30
05178 1287                        00            .byte	0
05179 1288                        70            .byte	$70
05180 1289                        30            .byte	$30
05181 128A                        30            .byte	$30
05182 128B                        30            .byte	$30
05183 128C                        78            .byte	$78
05184 128D                        00            .byte	0
05185                                           ! 812  0x0c, 0x00, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78,
05186 128E                        0C            .byte	$C
05187 128F                        00            .byte	0
05188 1290                        0C            .byte	$C
05189 1291                        0C            .byte	$C
05190 1292                        0C            .byte	$C
05191 1293                        CC            .byte	$CC
05192 1294                        CC            .byte	$CC
05193 1295                        78            .byte	$78
05194                                           ! 813  0xe0, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0xe6, 0x00,
05195 1296                        E0            .byte	$E0
05196 1297                        60            .byte	$60
05197 1298                        66            .byte	$66
05198 1299                        6C            .byte	$6C
05199 129A                        78            .byte	$78
05200 129B                        6C            .byte	$6C
05201 129C                        E6            .byte	$E6
05202 129D                        00            .byte	0
05203                                           ! 814  0x70, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
05204 129E                        70            .byte	$70
05205 129F                        30            .byte	$30
05206 12A0                        30            .byte	$30
05207 12A1                        30            .byte	$30
05208 12A2                        30            .byte	$30
05209 12A3                        30            .byte	$30
05210 12A4                        78            .byte	$78
05211 12A5                        00            .byte	0
05212                                           ! 815  0x00, 0x00, 0xcc, 0xfe, 0xfe, 0xd6, 0xc6, 0x00,
05213 12A6                        00            .byte	0
05214 12A7                        00            .byte	0
05215 12A8                        CC            .byte	$CC
05216 12A9                        FE            .byte	$FE
05217 12AA                        FE            .byte	$FE
05218 12AB                        D6            .byte	$D6
05219 12AC                        C6            .byte	$C6
05220 12AD                        00            .byte	0
05221                                           ! 816  0x00, 0x00, 0xf8, 0xcc, 0xcc, 0xcc, 0xcc, 0x00,
05222 12AE                        00            .byte	0
05223 12AF                        00            .byte	0
05224 12B0                        F8            .byte	$F8
05225 12B1                        CC            .byte	$CC
05226 12B2                        CC            .byte	$CC
05227 12B3                        CC            .byte	$CC
05228 12B4                        CC            .byte	$CC
05229 12B5                        00            .byte	0
05230                                           ! 817  0x00, 0x00, 0x78, 0xcc, 0xcc, 0xcc, 0x78, 0x00,
05231 12B6                        00            .byte	0
05232 12B7                        00            .byte	0
05233 12B8                        78            .byte	$78
05234 12B9                        CC            .byte	$CC
05235 12BA                        CC            .byte	$CC
05236 12BB                        CC            .byte	$CC
05237 12BC                        78            .byte	$78
05238 12BD                        00            .byte	0
05239                                           ! 818  0x00, 0x00, 0xdc, 0x66, 0x66, 0x7c, 0x60, 0xf0,
05240 12BE                        00            .byte	0
05241 12BF                        00            .byte	0
05242 12C0                        DC            .byte	$DC
05243 12C1                        66            .byte	$66
05244 12C2                        66            .byte	$66
05245 12C3                        7C            .byte	$7C
05246 12C4                        60            .byte	$60
05247 12C5                        F0            .byte	$F0
05248                                           ! 819  0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0x1e,
05249 12C6                        00            .byte	0
05250 12C7                        00            .byte	0
05251 12C8                        76            .byte	$76
05252 12C9                        CC            .byte	$CC
05253 12CA                        CC            .byte	$CC
05254 12CB                        7C            .byte	$7C
05255 12CC                        0C            .byte	$C
05256 12CD                        1E            .byte	$1E
05257                                           ! 820  0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0xf0, 0x00,
05258 12CE                        00            .byte	0
05259 12CF                        00            .byte	0
05260 12D0                        DC            .byte	$DC
05261 12D1                        76            .byte	$76
05262 12D2                        66            .byte	$66
05263 12D3                        60            .byte	$60
05264 12D4                        F0            .byte	$F0
05265 12D5                        00            .byte	0
05266                                           ! 821  0x00, 0x00, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x00,
05267 12D6                        00            .byte	0
05268 12D7                        00            .byte	0
05269 12D8                        7C            .byte	$7C
05270 12D9                        C0            .byte	$C0
05271 12DA                        78            .byte	$78
05272 12DB                        0C            .byte	$C
05273 12DC                        F8            .byte	$F8
05274 12DD                        00            .byte	0
05275                                           ! 822  0x10, 0x30, 0x7c, 0x30, 0x30, 0x34, 0x18, 0x00,
05276 12DE                        10            .byte	$10
05277 12DF                        30            .byte	$30
05278 12E0                        7C            .byte	$7C
05279 12E1                        30            .byte	$30
05280 12E2                        30            .byte	$30
05281 12E3                        34            .byte	$34
05282 12E4                        18            .byte	$18
05283 12E5                        00            .byte	0
05284                                           ! 823  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00,
05285 12E6                        00            .byte	0
05286 12E7                        00            .byte	0
05287 12E8                        CC            .byte	$CC
05288 12E9                        CC            .byte	$CC
05289 12EA                        CC            .byte	$CC
05290 12EB                        CC            .byte	$CC
05291 12EC                        76            .byte	$76
05292 12ED                        00            .byte	0
05293                                           ! 824  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00,
05294 12EE                        00            .byte	0
05295 12EF                        00            .byte	0
05296 12F0                        CC            .byte	$CC
05297 12F1                        CC            .byte	$CC
05298 12F2                        CC            .byte	$CC
05299 12F3                        78            .byte	$78
05300 12F4                        30            .byte	$30
05301 12F5                        00            .byte	0
05302                                           ! 825  0x00, 0x00, 0xc6, 0xd6, 0xfe, 0xfe, 0x6c, 0x00,
05303 12F6                        00            .byte	0
05304 12F7                        00            .byte	0
05305 12F8                        C6            .byte	$C6
05306 12F9                        D6            .byte	$D6
05307 12FA                        FE            .byte	$FE
05308 12FB                        FE            .byte	$FE
05309 12FC                        6C            .byte	$6C
05310 12FD                        00            .byte	0
05311                                           ! 826  0x00, 0x00, 0xc6, 0x6c, 0x38, 0x6c, 0xc6, 0x00,
05312 12FE                        00            .byte	0
05313 12FF                        00            .byte	0
05314 1300                        C6            .byte	$C6
05315 1301                        6C            .byte	$6C
05316 1302                        38            .byte	$38
05317 1303                        6C            .byte	$6C
05318 1304                        C6            .byte	$C6
05319 1305                        00            .byte	0
05320                                           ! 827  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05321 1306                        00            .byte	0
05322 1307                        00            .byte	0
05323 1308                        CC            .byte	$CC
05324 1309                        CC            .byte	$CC
05325 130A                        CC            .byte	$CC
05326 130B                        7C            .byte	$7C
05327 130C                        0C            .byte	$C
05328 130D                        F8            .byte	$F8
05329                                           ! 828  0x00, 0x00, 0xfc, 0x98, 0x30, 0x64, 0xfc, 0x00,
05330 130E                        00            .byte	0
05331 130F                        00            .byte	0
05332 1310                        FC            .byte	$FC
05333 1311                        98            .byte	$98
05334 1312                        30            .byte	$30
05335 1313                        64            .byte	$64
05336 1314                        FC            .byte	$FC
05337 1315                        00            .byte	0
05338                                           ! 829  0x1c, 0x30, 0x30, 0xe0, 0x30, 0x30, 0x1c, 0x00,
05339 1316                        1C            .byte	$1C
05340 1317                        30            .byte	$30
05341 1318                        30            .byte	$30
05342 1319                        E0            .byte	$E0
05343 131A                        30            .byte	$30
05344 131B                        30            .byte	$30
05345 131C                        1C            .byte	$1C
05346 131D                        00            .byte	0
05347                                           ! 830  0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00,
05348 131E                        18            .byte	$18
05349 131F                        18            .byte	$18
05350 1320                        18            .byte	$18
05351 1321                        00            .byte	0
05352 1322                        18            .byte	$18
05353 1323                        18            .byte	$18
05354 1324                        18            .byte	$18
05355 1325                        00            .byte	0
05356                                           ! 831  0xe0, 0x30, 0x30, 0x1c, 0x30, 0x30, 0xe0, 0x00,
05357 1326                        E0            .byte	$E0
05358 1327                        30            .byte	$30
05359 1328                        30            .byte	$30
05360 1329                        1C            .byte	$1C
05361 132A                        30            .byte	$30
05362 132B                        30            .byte	$30
05363 132C                        E0            .byte	$E0
05364 132D                        00            .byte	0
05365                                           ! 832  0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
05366 132E                        76            .byte	$76
05367 132F                        DC            .byte	$DC
05368 1330                        00            .byte	0
05369 1331                        00            .byte	0
05370 1332                        00            .byte	0
05371 1333                        00            .byte	0
05372 1334                        00            .byte	0
05373 1335                        00            .byte	0
05374                                           ! 833  0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0x00,
05375 1336                        00            .byte	0
05376 1337                        10            .byte	$10
05377 1338                        38            .byte	$38
05378 1339                        6C            .byte	$6C
05379 133A                        C6            .byte	$C6
05380 133B                        C6            .byte	$C6
05381 133C                        FE            .byte	$FE
05382 133D                        00            .byte	0
05383                                           ! 834  0x78, 0xcc, 0xc0, 0xcc, 0x78, 0x18, 0x0c, 0x78,
05384 133E                        78            .byte	$78
05385 133F                        CC            .byte	$CC
05386 1340                        C0            .byte	$C0
05387 1341                        CC            .byte	$CC
05388 1342                        78            .byte	$78
05389 1343                        18            .byte	$18
05390 1344                        0C            .byte	$C
05391 1345                        78            .byte	$78
05392                                           ! 835  0x00, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05393 1346                        00            .byte	0
05394 1347                        CC            .byte	$CC
05395 1348                        00            .byte	0
05396 1349                        CC            .byte	$CC
05397 134A                        CC            .byte	$CC
05398 134B                        CC            .byte	$CC
05399 134C                        7E            .byte	$7E
05400 134D                        00            .byte	0
05401                                           ! 836  0x1c, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05402 134E                        1C            .byte	$1C
05403 134F                        00            .byte	0
05404 1350                        78            .byte	$78
05405 1351                        CC            .byte	$CC
05406 1352                        FC            .byte	$FC
05407 1353                        C0            .byte	$C0
05408 1354                        78            .byte	$78
05409 1355                        00            .byte	0
05410                                           ! 837  0x7e, 0xc3, 0x3c, 0x06, 0x3e, 0x66, 0x3f, 0x00,
05411 1356                        7E            .byte	$7E
05412 1357                        C3            .byte	$C3
05413 1358                        3C            .byte	$3C
05414 1359                        06            .byte	6
05415 135A                        3E            .byte	$3E
05416 135B                        66            .byte	$66
05417 135C                        3F            .byte	$3F
05418 135D                        00            .byte	0
05419                                           ! 838  0xcc, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05420 135E                        CC            .byte	$CC
05421 135F                        00            .byte	0
05422 1360                        78            .byte	$78
05423 1361                        0C            .byte	$C
05424 1362                        7C            .byte	$7C
05425 1363                        CC            .byte	$CC
05426 1364                        7E            .byte	$7E
05427 1365                        00            .byte	0
05428                                           ! 839  0xe0, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05429 1366                        E0            .byte	$E0
05430 1367                        00            .byte	0
05431 1368                        78            .byte	$78
05432 1369                        0C            .byte	$C
05433 136A                        7C            .byte	$7C
05434 136B                        CC            .byte	$CC
05435 136C                        7E            .byte	$7E
05436 136D                        00            .byte	0
05437                                           ! 840  0x30, 0x30, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05438 136E                        30            .byte	$30
05439 136F                        30            .byte	$30
05440 1370                        78            .byte	$78
05441 1371                        0C            .byte	$C
05442 1372                        7C            .byte	$7C
05443 1373                        CC            .byte	$CC
05444 1374                        7E            .byte	$7E
05445 1375                        00            .byte	0
05446                                           ! 841  0x00, 0x00, 0x78, 0xc0, 0xc0, 0x78, 0x0c, 0x38,
05447 1376                        00            .byte	0
05448 1377                        00            .byte	0
05449 1378                        78            .byte	$78
05450 1379                        C0            .byte	$C0
05451 137A                        C0            .byte	$C0
05452 137B                        78            .byte	$78
05453 137C                        0C            .byte	$C
05454 137D                        38            .byte	$38
05455                                           ! 842  0x7e, 0xc3, 0x3c, 0x66, 0x7e, 0x60, 0x3c, 0x00,
05456 137E                        7E            .byte	$7E
05457 137F                        C3            .byte	$C3
05458 1380                        3C            .byte	$3C
05459 1381                        66            .byte	$66
05460 1382                        7E            .byte	$7E
05461 1383                        60            .byte	$60
05462 1384                        3C            .byte	$3C
05463 1385                        00            .byte	0
05464                                           ! 843  0xcc, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05465 1386                        CC            .byte	$CC
05466 1387                        00            .byte	0
05467 1388                        78            .byte	$78
05468 1389                        CC            .byte	$CC
05469 138A                        FC            .byte	$FC
05470 138B                        C0            .byte	$C0
05471 138C                        78            .byte	$78
05472 138D                        00            .byte	0
05473                                           ! 844  0xe0, 0x00, 0x78,
05474 138E                        E0            .byte	$E0
05475 138F                        00            .byte	0
05476                                           ! 844  0xcc, 0xfc, 0xc0, 0x78, 0x00,
05477 1390                        78            .byte	$78
05478 1391                        CC            .byte	$CC
05479 1392                        FC            .byte	$FC
05480 1393                        C0            .byte	$C0
05481 1394                        78            .byte	$78
05482 1395                        00            .byte	0
05483                                           ! 845  0xcc, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05484 1396                        CC            .byte	$CC
05485 1397                        00            .byte	0
05486 1398                        70            .byte	$70
05487 1399                        30            .byte	$30
05488 139A                        30            .byte	$30
05489 139B                        30            .byte	$30
05490 139C                        78            .byte	$78
05491 139D                        00            .byte	0
05492                                           ! 846  0x7c, 0xc6, 0x38, 0x18, 0x18, 0x18, 0x3c, 0x00,
05493 139E                        7C            .byte	$7C
05494 139F                        C6            .byte	$C6
05495 13A0                        38            .byte	$38
05496 13A1                        18            .byte	$18
05497 13A2                        18            .byte	$18
05498 13A3                        18            .byte	$18
05499 13A4                        3C            .byte	$3C
05500 13A5                        00            .byte	0
05501                                           ! 847  0xe0, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05502 13A6                        E0            .byte	$E0
05503 13A7                        00            .byte	0
05504 13A8                        70            .byte	$70
05505 13A9                        30            .byte	$30
05506 13AA                        30            .byte	$30
05507 13AB                        30            .byte	$30
05508 13AC                        78            .byte	$78
05509 13AD                        00            .byte	0
05510                                           ! 848  0xc6, 0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0xc6, 0x00,
05511 13AE                        C6            .byte	$C6
05512 13AF                        38            .byte	$38
05513 13B0                        6C            .byte	$6C
05514 13B1                        C6            .byte	$C6
05515 13B2                        FE            .byte	$FE
05516 13B3                        C6            .byte	$C6
05517 13B4                        C6            .byte	$C6
05518 13B5                        00            .byte	0
05519                                           ! 849  0x30, 0x30, 0x00, 0x78, 0xcc, 0xfc, 0xcc, 0x00,
05520 13B6                        30            .byte	$30
05521 13B7                        30            .byte	$30
05522 13B8                        00            .byte	0
05523 13B9                        78            .byte	$78
05524 13BA                        CC            .byte	$CC
05525 13BB                        FC            .byte	$FC
05526 13BC                        CC            .byte	$CC
05527 13BD                        00            .byte	0
05528                                           ! 850  0x1c, 0x00, 0xfc, 0x60, 0x78, 0x60, 0xfc, 0x00,
05529 13BE                        1C            .byte	$1C
05530 13BF                        00            .byte	0
05531 13C0                        FC            .byte	$FC
05532 13C1                        60            .byte	$60
05533 13C2                        78            .byte	$78
05534 13C3                        60            .byte	$60
05535 13C4                        FC            .byte	$FC
05536 13C5                        00            .byte	0
05537                                           ! 851  0x00, 0x00, 0x7f, 0x0c, 0x7f, 0xcc, 0x7f, 0x00,
05538 13C6                        00            .byte	0
05539 13C7                        00            .byte	0
05540 13C8                        7F            .byte	$7F
05541 13C9                        0C            .byte	$C
05542 13CA                        7F            .byte	$7F
05543 13CB                        CC            .byte	$CC
05544 13CC                        7F            .byte	$7F
05545 13CD                        00            .byte	0
05546                                           ! 852  0x3e, 0x6c, 0xcc, 0xfe, 0xcc, 0xcc, 0xce, 0x00,
05547 13CE                        3E            .byte	$3E
05548 13CF                        6C            .byte	$6C
05549 13D0                        CC            .byte	$CC
05550 13D1                        FE            .byte	$FE
05551 13D2                        CC            .byte	$CC
05552 13D3                        CC            .byte	$CC
05553 13D4                        CE            .byte	$CE
05554 13D5                        00            .byte	0
05555                                           ! 853  0x78, 0xcc, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05556 13D6                        78            .byte	$78
05557 13D7                        CC            .byte	$CC
05558 13D8                        00            .byte	0
05559 13D9                        78            .byte	$78
05560 13DA                        CC            .byte	$CC
05561 13DB                        CC            .byte	$CC
05562 13DC                        78            .byte	$78
05563 13DD                        00            .byte	0
05564                                           ! 854  0x00, 0xcc, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05565 13DE                        00            .byte	0
05566 13DF                        CC            .byte	$CC
05567 13E0                        00            .byte	0
05568 13E1                        78            .byte	$78
05569 13E2                        CC            .byte	$CC
05570 13E3                        CC            .byte	$CC
05571 13E4                        78            .byte	$78
05572 13E5                        00            .byte	0
05573                                           ! 855  0x00, 0xe0, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05574 13E6                        00            .byte	0
05575 13E7                        E0            .byte	$E0
05576 13E8                        00            .byte	0
05577 13E9                        78            .byte	$78
05578 13EA                        CC            .byte	$CC
05579 13EB                        CC            .byte	$CC
05580 13EC                        78            .byte	$78
05581 13ED                        00            .byte	0
05582                                           ! 856  0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05583 13EE                        78            .byte	$78
05584 13EF                        CC            .byte	$CC
05585 13F0                        00            .byte	0
05586 13F1                        CC            .byte	$CC
05587 13F2                        CC            .byte	$CC
05588 13F3                        CC            .byte	$CC
05589 13F4                        7E            .byte	$7E
05590 13F5                        00            .byte	0
05591                                           ! 857  0x00, 0xe0, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05592 13F6                        00            .byte	0
05593 13F7                        E0            .byte	$E0
05594 13F8                        00            .byte	0
05595 13F9                        CC            .byte	$CC
05596 13FA                        CC            .byte	$CC
05597 13FB                        CC            .byte	$CC
05598 13FC                        7E            .byte	$7E
05599 13FD                        00            .byte	0
05600                                           ! 858  0x00, 0xcc, 0x00, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05601 13FE                        00            .byte	0
05602 13FF                        CC            .byte	$CC
05603 1400                        00            .byte	0
05604 1401                        CC            .byte	$CC
05605 1402                        CC            .byte	$CC
05606 1403                        7C            .byte	$7C
05607 1404                        0C            .byte	$C
05608 1405                        F8            .byte	$F8
05609                                           ! 859  0xc3, 0x18, 0x3c, 0x66, 0x66, 0x3c, 0x18, 0x00,
05610 1406                        C3            .byte	$C3
05611 1407                        18            .byte	$18
05612 1408                        3C            .byte	$3C
05613 1409                        66            .byte	$66
05614 140A                        66            .byte	$66
05615 140B                        3C            .byte	$3C
05616 140C                        18            .byte	$18
05617 140D                        00            .byte	0
05618                                           ! 860  0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x00,
05619 140E                        CC            .byte	$CC
05620 140F                        00            .byte	0
05621 1410                        CC            .byte	$CC
05622 1411                        CC            .byte	$CC
05623 1412                        CC            .byte	$CC
05624 1413                        CC            .byte	$CC
05625 1414                        78            .byte	$78
05626 1415                        00            .byte	0
05627                                           ! 861  0x18, 0x18, 0x7e, 0xc0, 0xc0, 0x7e, 0x18, 0x18,
05628 1416                        18            .byte	$18
05629 1417                        18            .byte	$18
05630 1418                        7E            .byte	$7E
05631 1419                        C0            .byte	$C0
05632 141A                        C0            .byte	$C0
05633 141B                        7E            .byte	$7E
05634 141C                        18            .byte	$18
05635 141D                        18            .byte	$18
05636                                           ! 862  0x38, 0x6c, 0x64, 0xf0, 0x60, 0xe6, 0xfc, 0x00,
05637 141E                        38            .byte	$38
05638 141F                        6C            .byte	$6C
05639 1420                        64            .byte	$64
05640 1421                        F0            .byte	$F0
05641 1422                        60            .byte	$60
05642 1423                        E6            .byte	$E6
05643 1424                        FC            .byte	$FC
05644 1425                        00            .byte	0
05645                                           ! 863  0xcc, 0xcc, 0x78, 0xfc, 0x30, 0xfc, 0x30, 0x30,
05646 1426                        CC            .byte	$CC
05647 1427                        CC            .byte	$CC
05648 1428                        78            .byte	$78
05649 1429                        FC            .byte	$FC
05650 142A                        30            .byte	$30
05651 142B                        FC            .byte	$FC
05652 142C                        30            .byte	$30
05653 142D                        30            .byte	$30
05654                                           ! 864  0xf8, 0xcc, 0xcc, 0xfa, 0xc6, 0xcf, 0xc6, 0xc7,
05655 142E                        F8            .byte	$F8
05656 142F                        CC            .byte	$CC
05657 1430                        CC            .byte	$CC
05658 1431                        FA            .byte	$FA
05659 1432                        C6            .byte	$C6
05660 1433                        CF            .byte	$CF
05661 1434                        C6            .byte	$C6
05662 1435                        C7            .byte	$C7
05663                                           ! 865  0x0e, 0x1b, 0x18, 0x3c, 0x18, 0x18, 0xd8, 0x70,
05664 1436                        0E            .byte	$E
05665 1437                        1B            .byte	$1B
05666 1438                        18            .byte	$18
05667 1439                        3C            .byte	$3C
05668 143A                        18            .byte	$18
05669 143B                        18            .byte	$18
05670 143C                        D8            .byte	$D8
05671 143D                        70            .byte	$70
05672                                           ! 866  0x1c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05673 143E                        1C            .byte	$1C
05674 143F                        00            .byte	0
05675 1440                        78            .byte	$78
05676 1441                        0C            .byte	$C
05677 1442                        7C            .byte	$7C
05678 1443                        CC            .byte	$CC
05679 1444                        7E            .byte	$7E
05680 1445                        00            .byte	0
05681                                           ! 867  0x38, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05682 1446                        38            .byte	$38
05683 1447                        00            .byte	0
05684 1448                        70            .byte	$70
05685 1449                        30            .byte	$30
05686 144A                        30            .byte	$30
05687 144B                        30            .byte	$30
05688 144C                        78            .byte	$78
05689 144D                        00            .byte	0
05690                                           ! 868  0x00, 0x1c, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05691 144E                        00            .byte	0
05692 144F                        1C            .byte	$1C
05693 1450                        00            .byte	0
05694 1451                        78            .byte	$78
05695 1452                        CC            .byte	$CC
05696 1453                        CC            .byte	$CC
05697 1454                        78            .byte	$78
05698 1455                        00            .byte	0
05699                                           ! 869  0x00, 0x1c, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05700 1456                        00            .byte	0
05701 1457                        1C            .byte	$1C
05702 1458                        00            .byte	0
05703 1459                        CC            .byte	$CC
05704 145A                        CC            .byte	$CC
05705 145B                        CC            .byte	$CC
05706 145C                        7E            .byte	$7E
05707 145D                        00            .byte	0
05708                                           ! 870  0x00, 0xf8, 0x00, 0xf8, 0xcc, 0xcc, 0xcc, 0x00,
05709 145E                        00            .byte	0
05710 145F                        F8            .byte	$F8
05711 1460                        00            .byte	0
05712 1461                        F8            .byte	$F8
05713 1462                        CC            .byte	$CC
05714 1463                        CC            .byte	$CC
05715 1464                        CC            .byte	$CC
05716 1465                        00            .byte	0
05717                                           ! 871  0xfc, 0x00, 0xcc, 0xec, 0xfc, 0xdc, 0xcc, 0x00,
05718 1466                        FC            .byte	$FC
05719 1467                        00            .byte	0
05720 1468                        CC            .byte	$CC
05721 1469                        EC            .byte	$EC
05722 146A                        FC            .byte	$FC
05723 146B                        DC            .byte	$DC
05724 146C                        CC            .byte	$CC
05725 146D                        00            .byte	0
05726                                           ! 872  0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00,
05727 146E                        3C            .byte	$3C
05728 146F                        6C            .byte	$6C
05729 1470                        6C            .byte	$6C
05730 1471                        3E            .byte	$3E
05731 1472                        00            .byte	0
05732 1473                        7E            .byte	$7E
05733 1474                        00            .byte	0
05734 1475                        00            .byte	0
05735                                           ! 873  0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00,
05736 1476                        38            .byte	$38
05737 1477                        6C            .byte	$6C
05738 1478                        6C            .byte	$6C
05739 1479                        38            .byte	$38
05740 147A                        00            .byte	0
05741 147B                        7C            .byte	$7C
05742 147C                        00            .byte	0
05743 147D                        00            .byte	0
05744                                           ! 874  0x30, 0x00, 0x30, 0x60, 0xc0, 0xcc, 0x78, 0x00,
05745 147E                        30            .byte	$30
05746 147F                        00            .byte	0
05747 1480                        30            .byte	$30
05748 1481                        60            .byte	$60
05749 1482                        C0            .byte	$C0
05750 1483                        CC            .byte	$CC
05751 1484                        78            .byte	$78
05752 1485                        00            .byte	0
05753                                           ! 875  0x00, 0x00, 0x00, 0xfc, 0xc0, 0xc0, 0x00, 0x00,
05754 1486                        00            .byte	0
05755 1487                        00            .byte	0
05756 1488                        00            .byte	0
05757 1489                        FC            .byte	$FC
05758 148A                        C0            .byte	$C0
05759 148B                        C0            .byte	$C0
05760 148C                        00            .byte	0
05761 148D                        00            .byte	0
05762                                           ! 876  0x00, 0x00, 0x00, 0xfc, 0x0c, 0x0c, 0x00, 0x00,
05763 148E                        00            .byte	0
05764 148F                        00            .byte	0
05765 1490                        00            .byte	0
05766 1491                        FC            .byte	$FC
05767 1492                        0C            .byte	$C
05768 1493                        0C            .byte	$C
05769 1494                        00            .byte	0
05770 1495                        00            .byte	0
05771                                           ! 877  0xc3, 0xc6, 0xcc, 0xde, 0x33, 0x66, 0xcc, 0x0f,
05772 1496                        C3            .byte	$C3
05773 1497                        C6            .byte	$C6
05774 1498                        CC            .byte	$CC
05775 1499                        DE            .byte	$DE
05776 149A                        33            .byte	$33
05777 149B                        66            .byte	$66
05778 149C                        CC            .byte	$CC
05779 149D                        0F            .byte	$F
05780                                           ! 878  0xc3, 0xc6, 0xcc, 0xdb, 0x37, 0x6f, 0xcf, 0x03,
05781 149E                        C3            .byte	$C3
05782 149F                        C6            .byte	$C6
05783 14A0                        CC            .byte	$CC
05784 14A1                        DB            .byte	$DB
05785 14A2                        37            .byte	$37
05786 14A3                        6F            .byte	$6F
05787 14A4                        CF            .byte	$CF
05788 14A5                        03            .byte	3
05789                                           ! 879  0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00,
05790 14A6                        18            .byte	$18
05791 14A7                        18            .byte	$18
05792 14A8                        00            .byte	0
05793 14A9                        18            .byte	$18
05794 14AA                        18            .byte	$18
05795 14AB                        18            .byte	$18
05796 14AC                        18            .byte	$18
05797 14AD                        00            .byte	0
05798                                           ! 880  0x00, 0x33, 0x66, 0xcc, 0x66, 0x33, 0x00, 0x00,
05799 14AE                        00            .byte	0
05800 14AF                        33            .byte	$33
05801 14B0                        66            .byte	$66
05802 14B1                        CC            .byte	$CC
05803 14B2                        66            .byte	$66
05804 14B3                        33            .byte	$33
05805 14B4                        00            .byte	0
05806 14B5                        00            .byte	0
05807                                           ! 881  0x00, 0xcc, 0x66, 0x33, 0x66, 0xcc, 0x00, 0x00,
05808 14B6                        00            .byte	0
05809 14B7                        CC            .byte	$CC
05810 14B8                        66            .byte	$66
05811 14B9                        33            .byte	$33
05812 14BA                        66            .byte	$66
05813 14BB                        CC            .byte	$CC
05814 14BC                        00            .byte	0
05815 14BD                        00            .byte	0
05816                                           ! 882  0x22, 0x88, 0x22, 0x88, 0x22, 0x88, 0x22, 0x88,
05817 14BE                        22            .byte	$22
05818 14BF                        88            .byte	$88
05819 14C0                        22            .byte	$22
05820 14C1                        88            .byte	$88
05821 14C2                        22            .byte	$22
05822 14C3                        88            .byte	$88
05823 14C4                        22            .byte	$22
05824 14C5                        88            .byte	$88
05825                                           ! 883  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
05826 14C6                        55            .byte	$55
05827 14C7                        AA            .byte	$AA
05828 14C8                        55            .byte	$55
05829 14C9                        AA            .byte	$AA
05830 14CA                        55            .byte	$55
05831 14CB                        AA            .byte	$AA
05832 14CC                        55            .byte	$55
05833 14CD                        AA            .byte	$AA
05834                                           ! 884  0xdb, 0x77, 0xdb, 0xee, 0xdb, 0x77, 0xdb, 0xee,
05835 14CE                        DB            .byte	$DB
05836 14CF                        77            .byte	$77
05837 14D0                        DB            .byte	$DB
05838 14D1                        EE            .byte	$EE
05839 14D2                        DB            .byte	$DB
05840 14D3                        77            .byte	$77
05841 14D4                        DB            .byte	$DB
05842 14D5                        EE            .byte	$EE
05843                                           ! 885  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
05844 14D6                        18            .byte	$18
05845 14D7                        18            .byte	$18
05846 14D8                        18            .byte	$18
05847 14D9                        18            .byte	$18
05848 14DA                        18            .byte	$18
05849 14DB                        18            .byte	$18
05850 14DC                        18            .byte	$18
05851 14DD                        18            .byte	$18
05852                                           ! 886  0x18, 0
05853 14DE                        18            .byte	$18
05854                                           ! 886 x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18,
05855 14DF                        18            .byte	$18
05856 14E0                        18            .byte	$18
05857 14E1                        18            .byte	$18
05858 14E2                        F8            .byte	$F8
05859 14E3                        18            .byte	$18
05860 14E4                        18            .byte	$18
05861 14E5                        18            .byte	$18
05862                                           ! 887  0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18,
05863 14E6                        18            .byte	$18
05864 14E7                        18            .byte	$18
05865 14E8                        F8            .byte	$F8
05866 14E9                        18            .byte	$18
05867 14EA                        F8            .byte	$F8
05868 14EB                        18            .byte	$18
05869 14EC                        18            .byte	$18
05870 14ED                        18            .byte	$18
05871                                           ! 888  0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36,
05872 14EE                        36            .byte	$36
05873 14EF                        36            .byte	$36
05874 14F0                        36            .byte	$36
05875 14F1                        36            .byte	$36
05876 14F2                        F6            .byte	$F6
05877 14F3                        36            .byte	$36
05878 14F4                        36            .byte	$36
05879 14F5                        36            .byte	$36
05880                                           ! 889  0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36,
05881 14F6                        00            .byte	0
05882 14F7                        00            .byte	0
05883 14F8                        00            .byte	0
05884 14F9                        00            .byte	0
05885 14FA                        FE            .byte	$FE
05886 14FB                        36            .byte	$36
05887 14FC                        36            .byte	$36
05888 14FD                        36            .byte	$36
05889                                           ! 890  0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18,
05890 14FE                        00            .byte	0
05891 14FF                        00            .byte	0
05892 1500                        F8            .byte	$F8
05893 1501                        18            .byte	$18
05894 1502                        F8            .byte	$F8
05895 1503                        18            .byte	$18
05896 1504                        18            .byte	$18
05897 1505                        18            .byte	$18
05898                                           ! 891  0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36,
05899 1506                        36            .byte	$36
05900 1507                        36            .byte	$36
05901 1508                        F6            .byte	$F6
05902 1509                        06            .byte	6
05903 150A                        F6            .byte	$F6
05904 150B                        36            .byte	$36
05905 150C                        36            .byte	$36
05906 150D                        36            .byte	$36
05907                                           ! 892  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
05908 150E                        36            .byte	$36
05909 150F                        36            .byte	$36
05910 1510                        36            .byte	$36
05911 1511                        36            .byte	$36
05912 1512                        36            .byte	$36
05913 1513                        36            .byte	$36
05914 1514                        36            .byte	$36
05915 1515                        36            .byte	$36
05916                                           ! 893  0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36,
05917 1516                        00            .byte	0
05918 1517                        00            .byte	0
05919 1518                        FE            .byte	$FE
05920 1519                        06            .byte	6
05921 151A                        F6            .byte	$F6
05922 151B                        36            .byte	$36
05923 151C                        36            .byte	$36
05924 151D                        36            .byte	$36
05925                                           ! 894  0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00,
05926 151E                        36            .byte	$36
05927 151F                        36            .byte	$36
05928 1520                        F6            .byte	$F6
05929 1521                        06            .byte	6
05930 1522                        FE            .byte	$FE
05931 1523                        00            .byte	0
05932 1524                        00            .byte	0
05933 1525                        00            .byte	0
05934                                           ! 895  0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00,
05935 1526                        36            .byte	$36
05936 1527                        36            .byte	$36
05937 1528                        36            .byte	$36
05938 1529                        36            .byte	$36
05939 152A                        FE            .byte	$FE
05940 152B                        00            .byte	0
05941 152C                        00            .byte	0
05942 152D                        00            .byte	0
05943                                           ! 896  0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00,
05944 152E                        18            .byte	$18
05945 152F                        18            .byte	$18
05946 1530                        F8            .byte	$F8
05947 1531                        18            .byte	$18
05948 1532                        F8            .byte	$F8
05949 1533                        00            .byte	0
05950 1534                        00            .byte	0
05951 1535                        00            .byte	0
05952                                           ! 897  0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18,
05953 1536                        00            .byte	0
05954 1537                        00            .byte	0
05955 1538                        00            .byte	0
05956 1539                        00            .byte	0
05957 153A                        F8            .byte	$F8
05958 153B                        18            .byte	$18
05959 153C                        18            .byte	$18
05960 153D                        18            .byte	$18
05961                                           ! 898  0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00,
05962 153E                        18            .byte	$18
05963 153F                        18            .byte	$18
05964 1540                        18            .byte	$18
05965 1541                        18            .byte	$18
05966 1542                        1F            .byte	$1F
05967 1543                        00            .byte	0
05968 1544                        00            .byte	0
05969 1545                        00            .byte	0
05970                                           ! 899  0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00,
05971 1546                        18            .byte	$18
05972 1547                        18            .byte	$18
05973 1548                        18            .byte	$18
05974 1549                        18            .byte	$18
05975 154A                        FF            .byte	$FF
05976 154B                        00            .byte	0
05977 154C                        00            .byte	0
05978 154D                        00            .byte	0
05979                                           ! 900  0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18,
05980 154E                        00            .byte	0
05981 154F                        00            .byte	0
05982 1550                        00            .byte	0
05983 1551                        00            .byte	0
05984 1552                        FF            .byte	$FF
05985 1553                        18            .byte	$18
05986 1554                        18            .byte	$18
05987 1555                        18            .byte	$18
05988                                           ! 901  0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18,
05989 1556                        18            .byte	$18
05990 1557                        18            .byte	$18
05991 1558                        18            .byte	$18
05992 1559                        18            .byte	$18
05993 155A                        1F            .byte	$1F
05994 155B                        18            .byte	$18
05995 155C                        18            .byte	$18
05996 155D                        18            .byte	$18
05997                                           ! 902  0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
05998 155E                        00            .byte	0
05999 155F                        00            .byte	0
06000 1560                        00            .byte	0
06001 1561                        00            .byte	0
06002 1562                        FF            .byte	$FF
06003 1563                        00            .byte	0
06004 1564                        00            .byte	0
06005 1565                        00            .byte	0
06006                                           ! 903  0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18,
06007 1566                        18            .byte	$18
06008 1567                        18            .byte	$18
06009 1568                        18            .byte	$18
06010 1569                        18            .byte	$18
06011 156A                        FF            .byte	$FF
06012 156B                        18            .byte	$18
06013 156C                        18            .byte	$18
06014 156D                        18            .byte	$18
06015                                           ! 904  0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18,
06016 156E                        18            .byte	$18
06017 156F                        18            .byte	$18
06018 1570                        1F            .byte	$1F
06019 1571                        18            .byte	$18
06020 1572                        1F            .byte	$1F
06021 1573                        18            .byte	$18
06022 1574                        18            .byte	$18
06023 1575                        18            .byte	$18
06024                                           ! 905  0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36,
06025 1576                        36            .byte	$36
06026 1577                        36            .byte	$36
06027 1578                        36            .byte	$36
06028 1579                        36            .byte	$36
06029 157A                        37            .byte	$37
06030 157B                        36            .byte	$36
06031 157C                        36            .byte	$36
06032 157D                        36            .byte	$36
06033                                           ! 906  0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00,
06034 157E                        36            .byte	$36
06035 157F                        36            .byte	$36
06036 1580                        37            .byte	$37
06037 1581                        30            .byte	$30
06038 1582                        3F            .byte	$3F
06039 1583                        00            .byte	0
06040 1584                        00            .byte	0
06041 1585                        00            .byte	0
06042                                           ! 907  0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36,
06043 1586                        00            .byte	0
06044 1587                        00            .byte	0
06045 1588                        3F            .byte	$3F
06046 1589                        30            .byte	$30
06047 158A                        37            .byte	$37
06048 158B                        36            .byte	$36
06049 158C                        36            .byte	$36
06050 158D                        36            .byte	$36
06051                                           ! 908  0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00,
06052 158E                        36            .byte	$36
06053 158F                        36            .byte	$36
06054 1590                        F7            .byte	$F7
06055 1591                        00            .byte	0
06056 1592                        FF            .byte	$FF
06057 1593                        00            .byte	0
06058 1594                        00            .byte	0
06059 1595                        00            .byte	0
06060                                           ! 909  0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36,
06061 1596                        00            .byte	0
06062 1597                        00            .byte	0
06063 1598                        FF            .byte	$FF
06064 1599                        00            .byte	0
06065 159A                        F7            .byte	$F7
06066 159B                        36            .byte	$36
06067 159C                        36            .byte	$36
06068 159D                        36            .byte	$36
06069                                           ! 910  0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36,
06070 159E                        36            .byte	$36
06071 159F                        36            .byte	$36
06072 15A0                        37            .byte	$37
06073 15A1                        30            .byte	$30
06074 15A2                        37            .byte	$37
06075 15A3                        36            .byte	$36
06076 15A4                        36            .byte	$36
06077 15A5                        36            .byte	$36
06078                                           ! 911  0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00,
06079 15A6                        00            .byte	0
06080 15A7                        00            .byte	0
06081 15A8                        FF            .byte	$FF
06082 15A9                        00            .byte	0
06083 15AA                        FF            .byte	$FF
06084 15AB                        00            .byte	0
06085 15AC                        00            .byte	0
06086 15AD                        00            .byte	0
06087                                           ! 912  0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36,
06088 15AE                        36            .byte	$36
06089 15AF                        36            .byte	$36
06090 15B0                        F7            .byte	$F7
06091 15B1                        00            .byte	0
06092 15B2                        F7            .byte	$F7
06093 15B3                        36            .byte	$36
06094 15B4                        36            .byte	$36
06095 15B5                        36            .byte	$36
06096                                           ! 913  0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00,
06097 15B6                        18            .byte	$18
06098 15B7                        18            .byte	$18
06099 15B8                        FF            .byte	$FF
06100 15B9                        00            .byte	0
06101 15BA                        FF            .byte	$FF
06102 15BB                        00            .byte	0
06103 15BC                        00            .byte	0
06104 15BD                        00            .byte	0
06105                                           ! 914  0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00,
06106 15BE                        36            .byte	$36
06107 15BF                        36            .byte	$36
06108 15C0                        36            .byte	$36
06109 15C1                        36            .byte	$36
06110 15C2                        FF            .byte	$FF
06111 15C3                        00            .byte	0
06112 15C4                        00            .byte	0
06113 15C5                        00            .byte	0
06114                                           ! 915  0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18,
06115 15C6                        00            .byte	0
06116 15C7                        00            .byte	0
06117 15C8                        FF            .byte	$FF
06118 15C9                        00            .byte	0
06119 15CA                        FF            .byte	$FF
06120 15CB                        18            .byte	$18
06121 15CC                        18            .byte	$18
06122 15CD                        18            .byte	$18
06123                                           ! 916  0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36,
06124 15CE                        00            .byte	0
06125 15CF                        00            .byte	0
06126 15D0                        00            .byte	0
06127 15D1                        00            .byte	0
06128 15D2                        FF            .byte	$FF
06129 15D3                        36            .byte	$36
06130 15D4                        36            .byte	$36
06131 15D5                        36            .byte	$36
06132                                           ! 917  0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00,
06133 15D6                        36            .byte	$36
06134 15D7                        36            .byte	$36
06135 15D8                        36            .byte	$36
06136 15D9                        36            .byte	$36
06137 15DA                        3F            .byte	$3F
06138 15DB                        00            .byte	0
06139 15DC                        00            .byte	0
06140 15DD                        00            .byte	0
06141                                           ! 918  0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00,
06142 15DE                        18            .byte	$18
06143 15DF                        18            .byte	$18
06144 15E0                        1F            .byte	$1F
06145 15E1                        18            .byte	$18
06146 15E2                        1F            .byte	$1F
06147 15E3                        00            .byte	0
06148 15E4                        00            .byte	0
06149 15E5                        00            .byte	0
06150                                           ! 919  0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18,
06151 15E6                        00            .byte	0
06152 15E7                        00            .byte	0
06153 15E8                        1F            .byte	$1F
06154 15E9                        18            .byte	$18
06155 15EA                        1F            .byte	$1F
06156 15EB                        18            .byte	$18
06157 15EC                        18            .byte	$18
06158 15ED                        18            .byte	$18
06159                                           ! 920  0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36,
06160 15EE                        00            .byte	0
06161 15EF                        00            .byte	0
06162 15F0                        00            .byte	0
06163 15F1                        00            .byte	0
06164 15F2                        3F            .byte	$3F
06165 15F3                        36            .byte	$36
06166 15F4                        36            .byte	$36
06167 15F5                        36            .byte	$36
06168                                           ! 921  0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36,
06169 15F6                        36            .byte	$36
06170 15F7                        36            .byte	$36
06171 15F8                        36            .byte	$36
06172 15F9                        36            .byte	$36
06173 15FA                        FF            .byte	$FF
06174 15FB                        36            .byte	$36
06175 15FC                        36            .byte	$36
06176 15FD                        36            .byte	$36
06177                                           ! 922  0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18,
06178 15FE                        18            .byte	$18
06179 15FF                        18            .byte	$18
06180 1600                        FF            .byte	$FF
06181 1601                        18            .byte	$18
06182 1602                        FF            .byte	$FF
06183 1603                        18            .byte	$18
06184 1604                        18            .byte	$18
06185 1605                        18            .byte	$18
06186                                           ! 923  0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00,
06187 1606                        18            .byte	$18
06188 1607                        18            .byte	$18
06189 1608                        18            .byte	$18
06190 1609                        18            .byte	$18
06191 160A                        F8            .byte	$F8
06192 160B                        00            .byte	0
06193 160C                        00            .byte	0
06194 160D                        00            .byte	0
06195                                           ! 924  0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18,
06196 160E                        00            .byte	0
06197 160F                        00            .byte	0
06198 1610                        00            .byte	0
06199 1611                        00            .byte	0
06200 1612                        1F            .byte	$1F
06201 1613                        18            .byte	$18
06202 1614                        18            .byte	$18
06203 1615                        18            .byte	$18
06204                                           ! 925  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
06205 1616                        FF            .byte	$FF
06206 1617                        FF            .byte	$FF
06207 1618                        FF            .byte	$FF
06208 1619                        FF            .byte	$FF
06209 161A                        FF            .byte	$FF
06210 161B                        FF            .byte	$FF
06211 161C                        FF            .byte	$FF
06212 161D                        FF            .byte	$FF
06213                                           ! 926  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
06214 161E                        00            .byte	0
06215 161F                        00            .byte	0
06216 1620                        00            .byte	0
06217 1621                        00            .byte	0
06218 1622                        FF            .byte	$FF
06219 1623                        FF            .byte	$FF
06220 1624                        FF            .byte	$FF
06221 1625                        FF            .byte	$FF
06222                                           ! 927  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0
06223 1626                        F0            .byte	$F0
06224 1627                        F0            .byte	$F0
06225 1628                        F0            .byte	$F0
06226 1629                        F0            .byte	$F0
06227 162A                        F0            .byte	$F0
06228 162B                        F0            .byte	$F0
06229 162C                        F0            .byte	$F0
06230                                           ! 927 ,
06231 162D                        F0            .byte	$F0
06232                                           ! 928  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
06233 162E                        0F            .byte	$F
06234 162F                        0F            .byte	$F
06235 1630                        0F            .byte	$F
06236 1631                        0F            .byte	$F
06237 1632                        0F            .byte	$F
06238 1633                        0F            .byte	$F
06239 1634                        0F            .byte	$F
06240 1635                        0F            .byte	$F
06241                                           ! 929  0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
06242 1636                        FF            .byte	$FF
06243 1637                        FF            .byte	$FF
06244 1638                        FF            .byte	$FF
06245 1639                        FF            .byte	$FF
06246 163A                        00            .byte	0
06247 163B                        00            .byte	0
06248 163C                        00            .byte	0
06249 163D                        00            .byte	0
06250                                           ! 930  0x00, 0x00, 0x76, 0xdc, 0xc8, 0xdc, 0x76, 0x00,
06251 163E                        00            .byte	0
06252 163F                        00            .byte	0
06253 1640                        76            .byte	$76
06254 1641                        DC            .byte	$DC
06255 1642                        C8            .byte	$C8
06256 1643                        DC            .byte	$DC
06257 1644                        76            .byte	$76
06258 1645                        00            .byte	0
06259                                           ! 931  0x00, 0x78, 0xcc, 0xf8, 0xcc, 0xf8, 0xc0, 0xc0,
06260 1646                        00            .byte	0
06261 1647                        78            .byte	$78
06262 1648                        CC            .byte	$CC
06263 1649                        F8            .byte	$F8
06264 164A                        CC            .byte	$CC
06265 164B                        F8            .byte	$F8
06266 164C                        C0            .byte	$C0
06267 164D                        C0            .byte	$C0
06268                                           ! 932  0x00, 0xfc, 0xcc, 0xc0, 0xc0, 0xc0, 0xc0, 0x00,
06269 164E                        00            .byte	0
06270 164F                        FC            .byte	$FC
06271 1650                        CC            .byte	$CC
06272 1651                        C0            .byte	$C0
06273 1652                        C0            .byte	$C0
06274 1653                        C0            .byte	$C0
06275 1654                        C0            .byte	$C0
06276 1655                        00            .byte	0
06277                                           ! 933  0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00,
06278 1656                        00            .byte	0
06279 1657                        FE            .byte	$FE
06280 1658                        6C            .byte	$6C
06281 1659                        6C            .byte	$6C
06282 165A                        6C            .byte	$6C
06283 165B                        6C            .byte	$6C
06284 165C                        6C            .byte	$6C
06285 165D                        00            .byte	0
06286                                           ! 934  0xfc, 0xcc, 0x60, 0x30, 0x60, 0xcc, 0xfc, 0x00,
06287 165E                        FC            .byte	$FC
06288 165F                        CC            .byte	$CC
06289 1660                        60            .byte	$60
06290 1661                        30            .byte	$30
06291 1662                        60            .byte	$60
06292 1663                        CC            .byte	$CC
06293 1664                        FC            .byte	$FC
06294 1665                        00            .byte	0
06295                                           ! 935  0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0x70, 0x00,
06296 1666                        00            .byte	0
06297 1667                        00            .byte	0
06298 1668                        7E            .byte	$7E
06299 1669                        D8            .byte	$D8
06300 166A                        D8            .byte	$D8
06301 166B                        D8            .byte	$D8
06302 166C                        70            .byte	$70
06303 166D                        00            .byte	0
06304                                           ! 936  0x00, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0xc0,
06305 166E                        00            .byte	0
06306 166F                        66            .byte	$66
06307 1670                        66            .byte	$66
06308 1671                        66            .byte	$66
06309 1672                        66            .byte	$66
06310 1673                        7C            .byte	$7C
06311 1674                        60            .byte	$60
06312 1675                        C0            .byte	$C0
06313                                           ! 937  0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x00,
06314 1676                        00            .byte	0
06315 1677                        76            .byte	$76
06316 1678                        DC            .byte	$DC
06317 1679                        18            .byte	$18
06318 167A                        18            .byte	$18
06319 167B                        18            .byte	$18
06320 167C                        18            .byte	$18
06321 167D                        00            .byte	0
06322                                           ! 938  0xfc, 0x30, 0x78, 0xcc, 0xcc, 0x78, 0x30, 0xfc,
06323 167E                        FC            .byte	$FC
06324 167F                        30            .byte	$30
06325 1680                        78            .byte	$78
06326 1681                        CC            .byte	$CC
06327 1682                        CC            .byte	$CC
06328 1683                        78            .byte	$78
06329 1684                        30            .byte	$30
06330 1685                        FC            .byte	$FC
06331                                           ! 939  0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0x6c, 0x38, 0x00,
06332 1686                        38            .byte	$38
06333 1687                        6C            .byte	$6C
06334 1688                        C6            .byte	$C6
06335 1689                        FE            .byte	$FE
06336 168A                        C6            .byte	$C6
06337 168B                        6C            .byte	$6C
06338 168C                        38            .byte	$38
06339 168D                        00            .byte	0
06340                                           ! 940  0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x6c, 0xee, 0x00,
06341 168E                        38            .byte	$38
06342 168F                        6C            .byte	$6C
06343 1690                        C6            .byte	$C6
06344 1691                        C6            .byte	$C6
06345 1692                        6C            .byte	$6C
06346 1693                        6C            .byte	$6C
06347 1694                        EE            .byte	$EE
06348 1695                        00            .byte	0
06349                                           ! 941  0x1c, 0x30, 0x18, 0x7c, 0xcc, 0xcc, 0x78, 0x00,
06350 1696                        1C            .byte	$1C
06351 1697                        30            .byte	$30
06352 1698                        18            .byte	$18
06353 1699                        7C            .byte	$7C
06354 169A                        CC            .byte	$CC
06355 169B                        CC            .byte	$CC
06356 169C                        78            .byte	$78
06357 169D                        00            .byte	0
06358                                           ! 942  0x00, 0x00, 0x7e, 0xdb, 0xdb, 0x7e, 0x00, 0x00,
06359 169E                        00            .byte	0
06360 169F                        00            .byte	0
06361 16A0                        7E            .byte	$7E
06362 16A1                        DB            .byte	$DB
06363 16A2                        DB            .byte	$DB
06364 16A3                        7E            .byte	$7E
06365 16A4                        00            .byte	0
06366 16A5                        00            .byte	0
06367                                           ! 943  0x06, 0x0c, 0x7e, 0xdb, 0xdb, 0x7e, 0x60, 0xc0,
06368 16A6                        06            .byte	6
06369 16A7                        0C            .byte	$C
06370 16A8                        7E            .byte	$7E
06371 16A9                        DB            .byte	$DB
06372 16AA                        DB            .byte	$DB
06373 16AB                        7E            .byte	$7E
06374 16AC                        60            .byte	$60
06375 16AD                        C0            .byte	$C0
06376                                           ! 944  0x38, 0x60, 0xc0, 0xf8, 0xc0, 0x60, 0x38, 0x00,
06377 16AE                        38            .byte	$38
06378 16AF                        60            .byte	$60
06379 16B0                        C0            .byte	$C0
06380 16B1                        F8            .byte	$F8
06381 16B2                        C0            .byte	$C0
06382 16B3                        60            .byte	$60
06383 16B4                        38            .byte	$38
06384 16B5                        00            .byte	0
06385                                           ! 945  0x78, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x00,
06386 16B6                        78            .byte	$78
06387 16B7                        CC            .byte	$CC
06388 16B8                        CC            .byte	$CC
06389 16B9                        CC            .byte	$CC
06390 16BA                        CC            .byte	$CC
06391 16BB                        CC            .byte	$CC
06392 16BC                        CC            .byte	$CC
06393 16BD                        00            .byte	0
06394                                           ! 946  0x00, 0xfc, 0x00, 0xfc, 0x00, 0xfc, 0x00, 0x00,
06395 16BE                        00            .byte	0
06396 16BF                        FC            .byte	$FC
06397 16C0                        00            .byte	0
06398 16C1                        FC            .byte	$FC
06399 16C2                        00            .byte	0
06400 16C3                        FC            .byte	$FC
06401 16C4                        00            .byte	0
06402 16C5                        00            .byte	0
06403                                           ! 947  0x30, 0x30, 0xfc, 0x30, 0x30, 0x00, 0xfc, 0x00,
06404 16C6                        30            .byte	$30
06405 16C7                        30            .byte	$30
06406 16C8                        FC            .byte	$FC
06407 16C9                        30            .byte	$30
06408 16CA                        30            .byte	$30
06409 16CB                        00            .byte	0
06410 16CC                        FC            .byte	$FC
06411 16CD                        00            .byte	0
06412                                           ! 948  0x60, 0x30, 0x18, 0x30, 0x60, 0x00, 0xfc, 0x00,
06413 16CE                        60            .byte	$60
06414 16CF                        30            .byte	$30
06415 16D0                        18            .byte	$18
06416 16D1                        30            .byte	$30
06417 16D2                        60            .byte	$60
06418 16D3                        00            .byte	0
06419 16D4                        FC            .byte	$FC
06420 16D5                        00            .byte	0
06421                                           ! 949  0x18, 0x30, 0x60, 0x30, 0x18, 0x00, 0xfc, 0x00,
06422 16D6                        18            .byte	$18
06423 16D7                        30            .byte	$30
06424 16D8                        60            .byte	$60
06425 16D9                        30            .byte	$30
06426 16DA                        18            .byte	$18
06427 16DB                        00            .byte	0
06428 16DC                        FC            .byte	$FC
06429 16DD                        00            .byte	0
06430                                           ! 950  0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18,
06431 16DE                        0E            .byte	$E
06432 16DF                        1B            .byte	$1B
06433 16E0                        1B            .byte	$1B
06434 16E1                        18            .byte	$18
06435 16E2                        18            .byte	$18
06436 16E3                        18            .byte	$18
06437 16E4                        18            .byte	$18
06438 16E5                        18            .byte	$18
06439                                           ! 951  0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0x70,
06440 16E6                        18            .byte	$18
06441 16E7                        18            .byte	$18
06442 16E8                        18            .byte	$18
06443 16E9                        18            .byte	$18
06444 16EA                        18            .byte	$18
06445 16EB                        D8            .byte	$D8
06446 16EC                        D8            .byte	$D8
06447 16ED                        70            .byte	$70
06448                                           ! 952  0x30, 0x30, 0x00, 0xfc, 0x00, 0x30, 0x30, 0x00,
06449 16EE                        30            .byte	$30
06450 16EF                        30            .byte	$30
06451 16F0                        00            .byte	0
06452 16F1                        FC            .byte	$FC
06453 16F2                        00            .byte	0
06454 16F3                        30            .byte	$30
06455 16F4                        30            .byte	$30
06456 16F5                        00            .byte	0
06457                                           ! 953  0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00,
06458 16F6                        00            .byte	0
06459 16F7                        76            .byte	$76
06460 16F8                        DC            .byte	$DC
06461 16F9                        00            .byte	0
06462 16FA                        76            .byte	$76
06463 16FB                        DC            .byte	$DC
06464 16FC                        00            .byte	0
06465 16FD                        00            .byte	0
06466                                           ! 954  0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00,
06467 16FE                        38            .byte	$38
06468 16FF                        6C            .byte	$6C
06469 1700                        6C            .byte	$6C
06470 1701                        38            .byte	$38
06471 1702                        00            .byte	0
06472 1703                        00            .byte	0
06473 1704                        00            .byte	0
06474 1705                        00            .byte	0
06475                                           ! 955  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
06476 1706                        00            .byte	0
06477 1707                        00            .byte	0
06478 1708                        00            .byte	0
06479 1709                        18            .byte	$18
06480 170A                        18            .byte	$18
06481 170B                        00            .byte	0
06482 170C                        00            .byte	0
06483 170D                        00            .byte	0
06484                                           ! 956  0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
06485 170E                        00            .byte	0
06486 170F                        00            .byte	0
06487 1710                        00            .byte	0
06488 1711                        00            .byte	0
06489 1712                        18            .byte	$18
06490 1713                        00            .byte	0
06491 1714                        00            .byte	0
06492 1715                        00            .byte	0
06493                                           ! 957  0x0f, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x3c, 0x1c,
06494 1716                        0F            .byte	$F
06495 1717                        0C            .byte	$C
06496 1718                        0C            .byte	$C
06497 1719                        0C            .byte	$C
06498 171A                        EC            .byte	$EC
06499 171B                        6C            .byte	$6C
06500 171C                        3C            .byte	$3C
06501 171D                        1C            .byte	$1C
06502                                           ! 958  0x78, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00,
06503 171E                        78            .byte	$78
06504 171F                        6C            .byte	$6C
06505 1720                        6C            .byte	$6C
06506 1721                        6C            .byte	$6C
06507 1722                        6C            .byte	$6C
06508 1723                        00            .byte	0
06509 1724                        00            .byte	0
06510 1725                        00            .byte	0
06511                                           ! 959  0x70, 0x18, 0x30, 0x60, 0x78, 0x00, 0x00, 0x00,
06512 1726                        70            .byte	$70
06513 1727                        18            .byte	$18
06514 1728                        30            .byte	$30
06515 1729                        60            .byte	$60
06516 172A                        78            .byte	$78
06517 172B                        00            .byte	0
06518 172C                        00            .byte	0
06519 172D                        00            .byte	0
06520                                           ! 960  0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00,
06521 172E                        00            .byte	0
06522 172F                        00            .byte	0
06523 1730                        3C            .byte	$3C
06524 1731                        3C            .byte	$3C
06525 1732                        3C            .byte	$3C
06526 1733                        3C            .byte	$3C
06527 1734                        00            .byte	0
06528 1735                        00            .byte	0
06529                                           ! 961  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
06530 1736                        00            .byte	0
06531 1737                        00            .byte	0
06532 1738                        00            .byte	0
06533 1739                        00            .byte	0
06534 173A                        00            .byte	0
06535 173B                        00            .byte	0
06536 173C                        00            .byte	0
06537                                           ! 962 };
06538 173D                        00            .byte	0
06539                                           !BCC_EOS
06540                                           ! 963 static Bit8u vgafont14[256*14]=
06541                                           ! 964 {
06542                       0000173E            _vgafont14:
06543                                           ! 965  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
06544 173E                        00            .byte	0
06545 173F                        00            .byte	0
06546 1740                        00            .byte	0
06547 1741                        00            .byte	0
06548 1742                        00            .byte	0
06549 1743                        00            .byte	0
06550 1744                        00            .byte	0
06551 1745                        00            .byte	0
06552 1746                        00            .byte	0
06553 1747                        00            .byte	0
06554 1748                        00            .byte	0
06555 1749                        00            .byte	0
06556 174A                        00            .byte	0
06557 174B                        00            .byte	0
06558                                           ! 966  0x00, 0x00, 0x7e, 0x81, 0xa5, 0x81, 0x81, 0xbd, 0x99, 0x81, 0x7e, 0x00, 0x00, 0x00,
06559 174C                        00            .byte	0
06560 174D                        00            .byte	0
06561 174E                        7E            .byte	$7E
06562 174F                        81            .byte	$81
06563 1750                        A5            .byte	$A5
06564 1751                        81            .byte	$81
06565 1752                        81            .byte	$81
06566 1753                        BD            .byte	$BD
06567 1754                        99            .byte	$99
06568 1755                        81            .byte	$81
06569 1756                        7E            .byte	$7E
06570 1757                        00            .byte	0
06571 1758                        00            .byte	0
06572 1759                        00            .byte	0
06573                                           ! 967  0x00, 0x00, 0x7e, 0xff, 0xdb, 0xff, 0xff, 0xc3, 0xe7, 0xff, 0x7e, 0x00, 0x00, 0x00,
06574 175A                        00            .byte	0
06575 175B                        00            .byte	0
06576 175C                        7E            .byte	$7E
06577 175D                        FF            .byte	$FF
06578 175E                        DB            .byte	$DB
06579 175F                        FF            .byte	$FF
06580 1760                        FF            .byte	$FF
06581 1761                        C3            .byte	$C3
06582 1762                        E7            .byte	$E7
06583 1763                        FF            .byte	$FF
06584 1764                        7E            .byte	$7E
06585 1765                        00            .byte	0
06586 1766                        00            .byte	0
06587 1767                        00            .byte	0
06588                                           ! 968  0x00, 0x00, 0x00, 0x6c, 0xfe, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00,
06589 1768                        00            .byte	0
06590 1769                        00            .byte	0
06591 176A                        00            .byte	0
06592 176B                        6C            .byte	$6C
06593 176C                        FE            .byte	$FE
06594 176D                        FE            .byte	$FE
06595 176E                        FE            .byte	$FE
06596 176F                        FE            .byte	$FE
06597 1770                        7C            .byte	$7C
06598 1771                        38            .byte	$38
06599 1772                        10            .byte	$10
06600 1773                        00            .byte	0
06601 1774                        00            .byte	0
06602 1775                        00            .byte	0
06603                                           ! 969  0x0
06604                                           ! 969 0, 0x00, 0x00, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
06605 1776                        00            .byte	0
06606 1777                        00            .byte	0
06607 1778                        00            .byte	0
06608 1779                        10            .byte	$10
06609 177A                        38            .byte	$38
06610 177B                        7C            .byte	$7C
06611 177C                        FE            .byte	$FE
06612 177D                        7C            .byte	$7C
06613 177E                        38            .byte	$38
06614 177F                        10            .byte	$10
06615 1780                        00            .byte	0
06616 1781                        00            .byte	0
06617 1782                        00            .byte	0
06618 1783                        00            .byte	0
06619                                           ! 970  0x00, 0x00, 0x18, 0x3c, 0x3c, 0xe7, 0xe7, 0xe7, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
06620 1784                        00            .byte	0
06621 1785                        00            .byte	0
06622 1786                        18            .byte	$18
06623 1787                        3C            .byte	$3C
06624 1788                        3C            .byte	$3C
06625 1789                        E7            .byte	$E7
06626 178A                        E7            .byte	$E7
06627 178B                        E7            .byte	$E7
06628 178C                        18            .byte	$18
06629 178D                        18            .byte	$18
06630 178E                        3C            .byte	$3C
06631 178F                        00            .byte	0
06632 1790                        00            .byte	0
06633 1791                        00            .byte	0
06634                                           ! 971  0x00, 0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x7e, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
06635 1792                        00            .byte	0
06636 1793                        00            .byte	0
06637 1794                        18            .byte	$18
06638 1795                        3C            .byte	$3C
06639 1796                        7E            .byte	$7E
06640 1797                        FF            .byte	$FF
06641 1798                        FF            .byte	$FF
06642 1799                        7E            .byte	$7E
06643 179A                        18            .byte	$18
06644 179B                        18            .byte	$18
06645 179C                        3C            .byte	$3C
06646 179D                        00            .byte	0
06647 179E                        00            .byte	0
06648 179F                        00            .byte	0
06649                                           ! 972  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
06650 17A0                        00            .byte	0
06651 17A1                        00            .byte	0
06652 17A2                        00            .byte	0
06653 17A3                        00            .byte	0
06654 17A4                        00            .byte	0
06655 17A5                        18            .byte	$18
06656 17A6                        3C            .byte	$3C
06657 17A7                        3C            .byte	$3C
06658 17A8                        18            .byte	$18
06659 17A9                        00            .byte	0
06660 17AA                        00            .byte	0
06661 17AB                        00            .byte	0
06662 17AC                        00            .byte	0
06663 17AD                        00            .byte	0
06664                                           ! 973  0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff,
06665 17AE                        FF            .byte	$FF
06666 17AF                        FF            .byte	$FF
06667 17B0                        FF            .byte	$FF
06668 17B1                        FF            .byte	$FF
06669 17B2                        FF            .byte	$FF
06670 17B3                        E7            .byte	$E7
06671 17B4                        C3            .byte	$C3
06672 17B5                        C3            .byte	$C3
06673 17B6                        E7            .byte	$E7
06674 17B7                        FF            .byte	$FF
06675 17B8                        FF            .byte	$FF
06676 17B9                        FF            .byte	$FF
06677 17BA                        FF            .byte	$FF
06678 17BB                        FF            .byte	$FF
06679                                           ! 974  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
06680 17BC                        00            .byte	0
06681 17BD                        00            .byte	0
06682 17BE                        00            .byte	0
06683 17BF                        00            .byte	0
06684 17C0                        3C            .byte	$3C
06685 17C1                        66            .byte	$66
06686 17C2                        42            .byte	$42
06687 17C3                        42            .byte	$42
06688 17C4                        66            .byte	$66
06689 17C5                        3C            .byte	$3C
06690 17C6                        00            .byte	0
06691 17C7                        00            .byte	0
06692 17C8                        00            .byte	0
06693 17C9                        00            .byte	0
06694                                           ! 975  0xff, 0xff, 0xff, 0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff, 0xff, 0xff, 0xff,
06695 17CA                        FF            .byte	$FF
06696 17CB                        FF            .byte	$FF
06697 17CC                        FF            .byte	$FF
06698 17CD                        FF            .byte	$FF
06699 17CE                        C3            .byte	$C3
06700 17CF                        99            .byte	$99
06701 17D0                        BD            .byte	$BD
06702 17D1                        BD            .byte	$BD
06703 17D2                        99            .byte	$99
06704 17D3                        C3            .byte	$C3
06705 17D4                        FF            .byte	$FF
06706 17D5                        FF            .byte	$FF
06707 17D6                        FF            .byte	$FF
06708 17D7                        FF            .byte	$FF
06709                                           ! 976  0x00, 0x00, 0x1e, 0x0e, 0x1a, 0x32, 0x78, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00,
06710 17D8                        00            .byte	0
06711 17D9                        00            .byte	0
06712 17DA                        1E            .byte	$1E
06713 17DB                        0E            .byte	$E
06714 17DC                        1A            .byte	$1A
06715 17DD                        32            .byte	$32
06716 17DE                        78            .byte	$78
06717 17DF                        CC            .byte	$CC
06718 17E0                        CC            .byte	$CC
06719 17E1                        CC            .byte	$CC
06720 17E2                        78            .byte	$78
06721 17E3                        00            .byte	0
06722 17E4                        00            .byte	0
06723 17E5                        00            .byte	0
06724                                           ! 977  0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00,
06725 17E6                        00            .byte	0
06726 17E7                        00            .byte	0
06727 17E8                        3C            .byte	$3C
06728 17E9                        66            .byte	$66
06729 17EA                        66            .byte	$66
06730 17EB                        66            .byte	$66
06731 17EC                        3C            .byte	$3C
06732 17ED                        18            .byte	$18
06733 17EE                        7E            .byte	$7E
06734 17EF                        18            .byte	$18
06735 17F0                        18            .byte	$18
06736 17F1                        00            .byte	0
06737 17F2                        00            .byte	0
06738 17F3                        00            .byte	0
06739                                           ! 978  0x00, 0x00, 0x3f, 0x33, 0x3f, 0x30, 0x30, 0x30, 0x70, 0xf0, 0xe0, 0x00, 0x00, 0x00,
06740 17F4                        00            .byte	0
06741 17F5                        00            .byte	0
06742 17F6                        3F            .byte	$3F
06743 17F7                        33            .byte	$33
06744 17F8                        3F            .byte	$3F
06745 17F9                        30            .byte	$30
06746 17FA                        30            .byte	$30
06747 17FB                        30            .byte	$30
06748 17FC                        70            .byte	$70
06749 17FD                        F0            .byte	$F0
06750 17FE                        E0            .byte	$E0
06751 17FF                        00            .byte	0
06752 1800                        00            .byte	0
06753 1801                        00            .byte	0
06754                                           ! 979  0x00, 0x00, 0x7f, 0x63, 0x7f, 0x63, 0x63, 0x63, 0x67, 0xe7, 0xe6, 0xc0, 0x00, 0x00,
06755 1802                        00            .byte	0
06756 1803                        00            .byte	0
06757 1804                        7F            .byte	$7F
06758 1805                        63            .byte	$63
06759 1806                        7F            .byte	$7F
06760 1807                        63            .byte	$63
06761 1808                        63            .byte	$63
06762 1809                        63            .byte	$63
06763 180A                        67            .byte	$67
06764 180B                        E7            .byte	$E7
06765 180C                        E6            .byte	$E6
06766 180D                        C0            .byte	$C0
06767 180E                        00            .byte	0
06768 180F                        00            .byte	0
06769                                           ! 980  0x00, 0x00, 0x18, 0x18, 0xdb, 0x3c, 0xe7, 0x3c, 0xdb, 0x18, 0x18, 0x00, 0x00, 0x00,
06770 1810                        00            .byte	0
06771 1811                        00            .byte	0
06772 1812                        18            .byte	$18
06773 1813                        18            .byte	$18
06774 1814                        DB            .byte	$DB
06775 1815                        3C            .byte	$3C
06776 1816                        E7            .byte	$E7
06777 1817                        3C            .byte	$3C
06778 1818                        DB            .byte	$DB
06779 1819                        18            .byte	$18
06780 181A                        18            .byte	$18
06781 181B                        00            .byte	0
06782 181C                        00            .byte	0
06783 181D                        00            .byte	0
06784                                           ! 981  0x00, 0x00, 0x80, 0xc0, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00,
06785 181E                        00            .byte	0
06786 181F                        00            .byte	0
06787 1820                        80            .byte	$80
06788 1821                        C0            .byte	$C0
06789 1822                        E0            .byte	$E0
06790 1823                        F8            .byte	$F8
06791 1824                        FE            .byte	$FE
06792 1825                        F8            .byte	$F8
06793 1826                        E0            .byte	$E0
06794 1827                        C0            .byte	$C0
06795 1828                        80            .byte	$80
06796 1829                        00            .byte	0
06797 182A                        00            .byte	0
06798 182B                        00            .byte	0
06799                                           ! 982  0x00, 0x00, 0x02, 0x06, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00,
06800 182C                        00            .byte	0
06801 182D                        00            .byte	0
06802 182E                        02            .byte	2
06803 182F                        06            .byte	6
06804 1830                        0E            .byte	$E
06805 1831                        3E            .byte	$3E
06806 1832                        FE            .byte	$FE
06807 1833                        3E            .byte	$3E
06808 1834                        0E            .byte	$E
06809 1835                        06            .byte	6
06810 1836                        02            .byte	2
06811 1837                        00            .byte	0
06812 1838                        00            .byte	0
06813 1839                        00            .byte	0
06814                                           ! 983  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00,
06815 183A                        00            .byte	0
06816 183B                        00            .byte	0
06817 183C                        18            .byte	$18
06818 183D                        3C            .byte	$3C
06819 183E                        7E            .byte	$7E
06820 183F                        18            .byte	$18
06821 1840                        18            .byte	$18
06822 1841                        18            .byte	$18
06823 1842                        7E            .byte	$7E
06824 1843                        3C            .byte	$3C
06825 1844                        18            .byte	$18
06826 1845                        00            .byte	0
06827 1846                        00            .byte	0
06828 1847                        00            .byte	0
06829                                           ! 984  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00,
06830 1848                        00            .byte	0
06831 1849                        00            .byte	0
06832 184A                        66            .byte	$66
06833 184B                        66            .byte	$66
06834 184C                        66            .byte	$66
06835 184D                        66            .byte	$66
06836 184E                        66            .byte	$66
06837 184F                        66            .byte	$66
06838 1850                        00            .byte	0
06839 1851                        66            .byte	$66
06840 1852                        66            .byte	$66
06841 1853                        00            .byte	0
06842 1854                        00            .byte	0
06843 1855                        00            .byte	0
06844                                           ! 985  0x00, 0x00, 0x7f, 0xdb, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x1b, 0x00, 0x00, 0x00,
06845 1856                        00            .byte	0
06846 1857                        00            .byte	0
06847 1858                        7F            .byte	$7F
06848 1859                        DB            .byte	$DB
06849 185A                        DB            .byte	$DB
06850 185B                        DB            .byte	$DB
06851 185C                        7B            .byte	$7B
06852 185D                        1B            .byte	$1B
06853 185E                        1B            .byte	$1B
06854 185F                        1B            .byte	$1B
06855 1860                        1B            .byte	$1B
06856 1861                        00            .byte	0
06857 1862                        00            .byte	0
06858 1863                        00            .byte	0
06859                                           ! 986  0x00, 0x7c, 0xc6, 0x60, 0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x38, 0x0c, 0xc6, 0x7c, 0x00,
06860 1864                        00            .byte	0
06861 1865                        7C            .byte	$7C
06862 1866                        C6            .byte	$C6
06863 1867                        60            .byte	$60
06864 1868                        38            .byte	$38
06865 1869                        6C            .byte	$6C
06866 186A                        C6            .byte	$C6
06867 186B                        C6            .byte	$C6
06868 186C                        6C            .byte	$6C
06869 186D                        38            .byte	$38
06870 186E                        0C            .byte	$C
06871 186F                        C6            .byte	$C6
06872 1870                        7C            .byte	$7C
06873 1871                        00            .byte	0
06874                                           ! 987  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x00,
06875 1872                        00            .byte	0
06876 1873                        00            .byte	0
06877 1874                        00            .byte	0
06878 1875                        00            .byte	0
06879 1876                        00            .byte	0
06880 1877                        00            .byte	0
06881 1878                        00            .byte	0
06882 1879                        00            .byte	0
06883 187A                        FE            .byte	$FE
06884 187B                        FE            .byte	$FE
06885 187C                        FE            .byte	$FE
06886 187D                        00            .byte	0
06887 187E                        00            .byte	0
06888 187F                        00            .byte	0
06889                                           ! 988  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x7e, 0x00, 0x00,
06890 1880                        00            .byte	0
06891 1881                        00            .byte	0
06892 1882                        18            .byte	$18
06893 1883                        3C            .byte	$3C
06894 1884                        7E            .byte	$7E
06895 1885                        18            .byte	$18
06896 1886                        18            .byte	$18
06897 1887                        18            .byte	$18
06898 1888                        7E            .byte	$7E
06899 1889                        3C            .byte	$3C
06900 188A                        18            .byte	$18
06901 188B                        7E            .byte	$7E
06902 188C                        00            .byte	0
06903 188D                        00            .byte	0
06904                                           ! 989  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
06905 188E                        00            .byte	0
06906 188F                        00            .byte	0
06907 1890                        18            .byte	$18
06908 1891                        3C            .byte	$3C
06909 1892                        7E            .byte	$7E
06910 1893                        18            .byte	$18
06911 1894                        18            .byte	$18
06912 1895                        18            .byte	$18
06913 1896                        18            .byte	$18
06914 1897                        18            .byte	$18
06915 1898                        18            .byte	$18
06916 1899                        00            .byte	0
06917 189A                        00            .byte	0
06918 189B                        00            .byte	0
06919                                           ! 990  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00,
06920 189C                        00            .byte	0
06921 189D                        00            .byte	0
06922 189E                        18            .byte	$18
06923 189F                        18            .byte	$18
06924 18A0                        18            .byte	$18
06925 18A1                        18            .byte	$18
06926 18A2                        18            .byte	$18
06927 18A3                        18            .byte	$18
06928 18A4                        7E            .byte	$7E
06929 18A5                        3C            .byte	$3C
06930 18A6                        18            .byte	$18
06931 18A7                        00            .byte	0
06932 18A8                        00            .byte	0
06933 18A9                        00            .byte	0
06934                                           ! 991  0x00, 0x00, 0x00, 0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
06935 18AA                        00            .byte	0
06936 18AB                        00            .byte	0
06937 18AC                        00            .byte	0
06938 18AD                        00            .byte	0
06939 18AE                        18            .byte	$18
06940 18AF                        0C            .byte	$C
06941 18B0                        FE            .byte	$FE
06942 18B1                        0C            .byte	$C
06943 18B2                        18            .byte	$18
06944 18B3                        00            .byte	0
06945 18B4                        00            .byte	0
06946 18B5                        00            .byte	0
06947 18B6                        00            .byte	0
06948 18B7                        00            .byte	0
06949                                           ! 992  0x00, 0x00, 0x00, 0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
06950 18B8                        00            .byte	0
06951 18B9                        00            .byte	0
06952 18BA                        00            .byte	0
06953 18BB                        00            .byte	0
06954 18BC                        30            .byte	$30
06955 18BD                        60            .byte	$60
06956 18BE                        FE            .byte	$FE
06957 18BF                        60            .byte	$60
06958 18C0                        30            .byte	$30
06959 18C1                        00            .byte	0
06960 18C2                        00            .byte	0
06961 18C3                        00            .byte	0
06962 18C4                        00            .byte	0
06963 18C5                        00            .byte	0
06964                                           ! 993  0x00, 0x00,
06965 18C6                        00            .byte	0
06966                                           ! 993  0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
06967 18C7                        00            .byte	0
06968 18C8                        00            .byte	0
06969 18C9                        00            .byte	0
06970 18CA                        00            .byte	0
06971 18CB                        C0            .byte	$C0
06972 18CC                        C0            .byte	$C0
06973 18CD                        C0            .byte	$C0
06974 18CE                        FE            .byte	$FE
06975 18CF                        00            .byte	0
06976 18D0                        00            .byte	0
06977 18D1                        00            .byte	0
06978 18D2                        00            .byte	0
06979 18D3                        00            .byte	0
06980                                           ! 994  0x00, 0x00, 0x00, 0x00, 0x28, 0x6c, 0xfe, 0x6c, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00,
06981 18D4                        00            .byte	0
06982 18D5                        00            .byte	0
06983 18D6                        00            .byte	0
06984 18D7                        00            .byte	0
06985 18D8                        28            .byte	$28
06986 18D9                        6C            .byte	$6C
06987 18DA                        FE            .byte	$FE
06988 18DB                        6C            .byte	$6C
06989 18DC                        28            .byte	$28
06990 18DD                        00            .byte	0
06991 18DE                        00            .byte	0
06992 18DF                        00            .byte	0
06993 18E0                        00            .byte	0
06994 18E1                        00            .byte	0
06995                                           ! 995  0x00, 0x00, 0x00, 0x10, 0x38, 0x38, 0x7c, 0x7c, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00,
06996 18E2                        00            .byte	0
06997 18E3                        00            .byte	0
06998 18E4                        00            .byte	0
06999 18E5                        10            .byte	$10
07000 18E6                        38            .byte	$38
07001 18E7                        38            .byte	$38
07002 18E8                        7C            .byte	$7C
07003 18E9                        7C            .byte	$7C
07004 18EA                        FE            .byte	$FE
07005 18EB                        FE            .byte	$FE
07006 18EC                        00            .byte	0
07007 18ED                        00            .byte	0
07008 18EE                        00            .byte	0
07009 18EF                        00            .byte	0
07010                                           ! 996  0x00, 0x00, 0x00, 0xfe, 0xfe, 0x7c, 0x7c, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
07011 18F0                        00            .byte	0
07012 18F1                        00            .byte	0
07013 18F2                        00            .byte	0
07014 18F3                        FE            .byte	$FE
07015 18F4                        FE            .byte	$FE
07016 18F5                        7C            .byte	$7C
07017 18F6                        7C            .byte	$7C
07018 18F7                        38            .byte	$38
07019 18F8                        38            .byte	$38
07020 18F9                        10            .byte	$10
07021 18FA                        00            .byte	0
07022 18FB                        00            .byte	0
07023 18FC                        00            .byte	0
07024 18FD                        00            .byte	0
07025                                           ! 997  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07026 18FE                        00            .byte	0
07027 18FF                        00            .byte	0
07028 1900                        00            .byte	0
07029 1901                        00            .byte	0
07030 1902                        00            .byte	0
07031 1903                        00            .byte	0
07032 1904                        00            .byte	0
07033 1905                        00            .byte	0
07034 1906                        00            .byte	0
07035 1907                        00            .byte	0
07036 1908                        00            .byte	0
07037 1909                        00            .byte	0
07038 190A                        00            .byte	0
07039 190B                        00            .byte	0
07040                                           ! 998  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07041 190C                        00            .byte	0
07042 190D                        00            .byte	0
07043 190E                        18            .byte	$18
07044 190F                        3C            .byte	$3C
07045 1910                        3C            .byte	$3C
07046 1911                        3C            .byte	$3C
07047 1912                        18            .byte	$18
07048 1913                        18            .byte	$18
07049 1914                        00            .byte	0
07050 1915                        18            .byte	$18
07051 1916                        18            .byte	$18
07052 1917                        00            .byte	0
07053 1918                        00            .byte	0
07054 1919                        00            .byte	0
07055                                           ! 999  0x00, 0x66, 0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07056 191A                        00            .byte	0
07057 191B                        66            .byte	$66
07058 191C                        66            .byte	$66
07059 191D                        66            .byte	$66
07060 191E                        24            .byte	$24
07061 191F                        00            .byte	0
07062 1920                        00            .byte	0
07063 1921                        00            .byte	0
07064 1922                        00            .byte	0
07065 1923                        00            .byte	0
07066 1924                        00            .byte	0
07067 1925                        00            .byte	0
07068 1926                        00            .byte	0
07069 1927                        00            .byte	0
07070                                           ! 1000  0x00, 0x00, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x00, 0x00, 0x00,
07071 1928                        00            .byte	0
07072 1929                        00            .byte	0
07073 192A                        6C            .byte	$6C
07074 192B                        6C            .byte	$6C
07075 192C                        FE            .byte	$FE
07076 192D                        6C            .byte	$6C
07077 192E                        6C            .byte	$6C
07078 192F                        6C            .byte	$6C
07079 1930                        FE            .byte	$FE
07080 1931                        6C            .byte	$6C
07081 1932                        6C            .byte	$6C
07082 1933                        00            .byte	0
07083 1934                        00            .byte	0
07084 1935                        00            .byte	0
07085                                           ! 1001  0x18, 0x18, 0x7c, 0xc6, 0xc2, 0xc0, 0x7c, 0x06, 0x86, 0xc6, 0x7c, 0x18, 0x18, 0x00,
07086 1936                        18            .byte	$18
07087 1937                        18            .byte	$18
07088 1938                        7C            .byte	$7C
07089 1939                        C6            .byte	$C6
07090 193A                        C2            .byte	$C2
07091 193B                        C0            .byte	$C0
07092 193C                        7C            .byte	$7C
07093 193D                        06            .byte	6
07094 193E                        86            .byte	$86
07095 193F                        C6            .byte	$C6
07096 1940                        7C            .byte	$7C
07097 1941                        18            .byte	$18
07098 1942                        18            .byte	$18
07099 1943                        00            .byte	0
07100                                           ! 1002  0x00, 0x00, 0x00, 0x00, 0xc2, 0xc6, 0x0c, 0x18, 0x30, 0x66, 0xc6, 0x00, 0x00, 0x00,
07101 1944                        00            .byte	0
07102 1945                        00            .byte	0
07103 1946                        00            .byte	0
07104 1947                        00            .byte	0
07105 1948                        C2            .byte	$C2
07106 1949                        C6            .byte	$C6
07107 194A                        0C            .byte	$C
07108 194B                        18            .byte	$18
07109 194C                        30            .byte	$30
07110 194D                        66            .byte	$66
07111 194E                        C6            .byte	$C6
07112 194F                        00            .byte	0
07113 1950                        00            .byte	0
07114 1951                        00            .byte	0
07115                                           ! 1003  0x00, 0x00, 0x38, 0x6c, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
07116 1952                        00            .byte	0
07117 1953                        00            .byte	0
07118 1954                        38            .byte	$38
07119 1955                        6C            .byte	$6C
07120 1956                        6C            .byte	$6C
07121 1957                        38            .byte	$38
07122 1958                        76            .byte	$76
07123 1959                        DC            .byte	$DC
07124 195A                        CC            .byte	$CC
07125 195B                        CC            .byte	$CC
07126 195C                        76            .byte	$76
07127 195D                        00            .byte	0
07128 195E                        00            .byte	0
07129 195F                        00            .byte	0
07130                                           ! 1004  0x00, 0x30, 0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07131 1960                        00            .byte	0
07132 1961                        30            .byte	$30
07133 1962                        30            .byte	$30
07134 1963                        30            .byte	$30
07135 1964                        60            .byte	$60
07136 1965                        00            .byte	0
07137 1966                        00            .byte	0
07138 1967                        00            .byte	0
07139 1968                        00            .byte	0
07140 1969                        00            .byte	0
07141 196A                        00            .byte	0
07142 196B                        00            .byte	0
07143 196C                        00            .byte	0
07144 196D                        00            .byte	0
07145                                           ! 1005  0x00, 0x00, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00, 0x00, 0x00,
07146 196E                        00            .byte	0
07147 196F                        00            .byte	0
07148 1970                        0C            .byte	$C
07149 1971                        18            .byte	$18
07150 1972                        30            .byte	$30
07151 1973                        30            .byte	$30
07152 1974                        30            .byte	$30
07153 1975                        30            .byte	$30
07154 1976                        30            .byte	$30
07155 1977                        18            .byte	$18
07156 1978                        0C            .byte	$C
07157 1979                        00            .byte	0
07158 197A                        00            .byte	0
07159 197B                        00            .byte	0
07160                                           ! 1006  0x00, 0x00, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x18, 0x30, 0x00, 0x00, 0x00,
07161 197C                        00            .byte	0
07162 197D                        00            .byte	0
07163 197E                        30            .byte	$30
07164 197F                        18            .byte	$18
07165 1980                        0C            .byte	$C
07166 1981                        0C            .byte	$C
07167 1982                        0C            .byte	$C
07168 1983                        0C            .byte	$C
07169 1984                        0C            .byte	$C
07170 1985                        18            .byte	$18
07171 1986                        30            .byte	$30
07172 1987                        00            .byte	0
07173 1988                        00            .byte	0
07174 1989                        00            .byte	0
07175                                           ! 1007  0x00, 0x00, 0x00, 0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00,
07176 198A                        00            .byte	0
07177 198B                        00            .byte	0
07178 198C                        00            .byte	0
07179 198D                        00            .byte	0
07180 198E                        66            .byte	$66
07181 198F                        3C            .byte	$3C
07182 1990                        FF            .byte	$FF
07183 1991                        3C            .byte	$3C
07184 1992                        66            .byte	$66
07185 1993                        00            .byte	0
07186 1994                        00            .byte	0
07187 1995                        00            .byte	0
07188 1996                        00            .byte	0
07189 1997                        00            .byte	0
07190                                           ! 1008  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
07191 1998                        00            .byte	0
07192 1999                        00            .byte	0
07193 199A                        00            .byte	0
07194 199B                        00            .byte	0
07195 199C                        18            .byte	$18
07196 199D                        18            .byte	$18
07197 199E                        7E            .byte	$7E
07198 199F                        18            .byte	$18
07199 19A0                        18            .byte	$18
07200 19A1                        00            .byte	0
07201 19A2                        00            .byte	0
07202 19A3                        00            .byte	0
07203 19A4                        00            .byte	0
07204 19A5                        00            .byte	0
07205                                           ! 1009  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00,
07206 19A6                        00            .byte	0
07207 19A7                        00            .byte	0
07208 19A8                        00            .byte	0
07209 19A9                        00            .byte	0
07210 19AA                        00            .byte	0
07211 19AB                        00            .byte	0
07212 19AC                        00            .byte	0
07213 19AD                        00            .byte	0
07214 19AE                        18            .byte	$18
07215 19AF                        18            .byte	$18
07216 19B0                        18            .byte	$18
07217 19B1                        30            .byte	$30
07218 19B2                        00            .byte	0
07219 19B3                        00            .byte	0
07220                                           ! 1010  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07221 19B4                        00            .byte	0
07222 19B5                        00            .byte	0
07223 19B6                        00            .byte	0
07224 19B7                        00            .byte	0
07225 19B8                        00            .byte	0
07226 19B9                        00            .byte	0
07227 19BA                        FE            .byte	$FE
07228 19BB                        00            .byte	0
07229 19BC                        00            .byte	0
07230 19BD                        00            .byte	0
07231 19BE                        00            .byte	0
07232 19BF                        00            .byte	0
07233 19C0                        00            .byte	0
07234 19C1                        00            .byte	0
07235                                           ! 1011  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07236 19C2                        00            .byte	0
07237 19C3                        00            .byte	0
07238 19C4                        00            .byte	0
07239 19C5                        00            .byte	0
07240 19C6                        00            .byte	0
07241 19C7                        00            .byte	0
07242 19C8                        00            .byte	0
07243 19C9                        00            .byte	0
07244 19CA                        00            .byte	0
07245 19CB                        18            .byte	$18
07246 19CC                        18            .byte	$18
07247 19CD                        00            .byte	0
07248 19CE                        00            .byte	0
07249 19CF                        00            .byte	0
07250                                           ! 1012  0x00, 0x00, 0x02, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
07251 19D0                        00            .byte	0
07252 19D1                        00            .byte	0
07253 19D2                        02            .byte	2
07254 19D3                        06            .byte	6
07255 19D4                        0C            .byte	$C
07256 19D5                        18            .byte	$18
07257 19D6                        30            .byte	$30
07258 19D7                        60            .byte	$60
07259 19D8                        C0            .byte	$C0
07260 19D9                        80            .byte	$80
07261 19DA                        00            .byte	0
07262 19DB                        00            .byte	0
07263 19DC                        00            .byte	0
07264 19DD                        00            .byte	0
07265                                           ! 1013  0x00, 0x00, 0x7c, 0xc6, 0xce, 0xde, 0xf6, 0xe6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07266 19DE                        00            .byte	0
07267 19DF                        00            .byte	0
07268 19E0                        7C            .byte	$7C
07269 19E1                        C6            .byte	$C6
07270 19E2                        CE            .byte	$CE
07271 19E3                        DE            .byte	$DE
07272 19E4                        F6            .byte	$F6
07273 19E5                        E6            .byte	$E6
07274 19E6                        C6            .byte	$C6
07275 19E7                        C6            .byte	$C6
07276 19E8                        7C            .byte	$7C
07277 19E9                        00            .byte	0
07278 19EA                        00            .byte	0
07279 19EB                        00            .byte	0
07280                                           ! 1014  0x00, 0x00, 0x18, 0x38, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 0x00, 0x00,
07281 19EC                        00            .byte	0
07282 19ED                        00            .byte	0
07283 19EE                        18            .byte	$18
07284 19EF                        38            .byte	$38
07285 19F0                        78            .byte	$78
07286 19F1                        18            .byte	$18
07287 19F2                        18            .byte	$18
07288 19F3                        18            .byte	$18
07289 19F4                        18            .byte	$18
07290 19F5                        18            .byte	$18
07291 19F6                        7E            .byte	$7E
07292 19F7                        00            .byte	0
07293 19F8                        00            .byte	0
07294 19F9                        00            .byte	0
07295                                           ! 1015  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00,
07296 19FA                        00            .byte	0
07297 19FB                        00            .byte	0
07298 19FC                        7C            .byte	$7C
07299 19FD                        C6            .byte	$C6
07300 19FE                        06            .byte	6
07301 19FF                        0C            .byte	$C
07302 1A00                        18            .byte	$18
07303 1A01                        30            .byte	$30
07304 1A02                        60            .byte	$60
07305 1A03                        C6            .byte	$C6
07306 1A04                        FE            .byte	$FE
07307 1A05                        00            .byte	0
07308 1A06                        00            .byte	0
07309 1A07                        00            .byte	0
07310                                           ! 1016  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x06, 0x3c, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07311 1A08                        00            .byte	0
07312 1A09                        00            .byte	0
07313 1A0A                        7C            .byte	$7C
07314 1A0B                        C6            .byte	$C6
07315 1A0C                        06            .byte	6
07316 1A0D                        06            .byte	6
07317 1A0E                        3C            .byte	$3C
07318 1A0F                        06            .byte	6
07319 1A10                        06            .byte	6
07320 1A11                        C6            .byte	$C6
07321 1A12                        7C            .byte	$7C
07322 1A13                        00            .byte	0
07323 1A14                        00            .byte	0
07324 1A15                        00            .byte	0
07325                                           ! 1017  0x00, 0x00, 0x0c, 0
07326 1A16                        00            .byte	0
07327 1A17                        00            .byte	0
07328 1A18                        0C            .byte	$C
07329                                           ! 1017 x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x0c, 0x1e, 0x00, 0x00, 0x00,
07330 1A19                        1C            .byte	$1C
07331 1A1A                        3C            .byte	$3C
07332 1A1B                        6C            .byte	$6C
07333 1A1C                        CC            .byte	$CC
07334 1A1D                        FE            .byte	$FE
07335 1A1E                        0C            .byte	$C
07336 1A1F                        0C            .byte	$C
07337 1A20                        1E            .byte	$1E
07338 1A21                        00            .byte	0
07339 1A22                        00            .byte	0
07340 1A23                        00            .byte	0
07341                                           ! 1018  0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xfc, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07342 1A24                        00            .byte	0
07343 1A25                        00            .byte	0
07344 1A26                        FE            .byte	$FE
07345 1A27                        C0            .byte	$C0
07346 1A28                        C0            .byte	$C0
07347 1A29                        C0            .byte	$C0
07348 1A2A                        FC            .byte	$FC
07349 1A2B                        06            .byte	6
07350 1A2C                        06            .byte	6
07351 1A2D                        C6            .byte	$C6
07352 1A2E                        7C            .byte	$7C
07353 1A2F                        00            .byte	0
07354 1A30                        00            .byte	0
07355 1A31                        00            .byte	0
07356                                           ! 1019  0x00, 0x00, 0x38, 0x60, 0xc0, 0xc0, 0xfc, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07357 1A32                        00            .byte	0
07358 1A33                        00            .byte	0
07359 1A34                        38            .byte	$38
07360 1A35                        60            .byte	$60
07361 1A36                        C0            .byte	$C0
07362 1A37                        C0            .byte	$C0
07363 1A38                        FC            .byte	$FC
07364 1A39                        C6            .byte	$C6
07365 1A3A                        C6            .byte	$C6
07366 1A3B                        C6            .byte	$C6
07367 1A3C                        7C            .byte	$7C
07368 1A3D                        00            .byte	0
07369 1A3E                        00            .byte	0
07370 1A3F                        00            .byte	0
07371                                           ! 1020  0x00, 0x00, 0xfe, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00,
07372 1A40                        00            .byte	0
07373 1A41                        00            .byte	0
07374 1A42                        FE            .byte	$FE
07375 1A43                        C6            .byte	$C6
07376 1A44                        06            .byte	6
07377 1A45                        0C            .byte	$C
07378 1A46                        18            .byte	$18
07379 1A47                        30            .byte	$30
07380 1A48                        30            .byte	$30
07381 1A49                        30            .byte	$30
07382 1A4A                        30            .byte	$30
07383 1A4B                        00            .byte	0
07384 1A4C                        00            .byte	0
07385 1A4D                        00            .byte	0
07386                                           ! 1021  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07387 1A4E                        00            .byte	0
07388 1A4F                        00            .byte	0
07389 1A50                        7C            .byte	$7C
07390 1A51                        C6            .byte	$C6
07391 1A52                        C6            .byte	$C6
07392 1A53                        C6            .byte	$C6
07393 1A54                        7C            .byte	$7C
07394 1A55                        C6            .byte	$C6
07395 1A56                        C6            .byte	$C6
07396 1A57                        C6            .byte	$C6
07397 1A58                        7C            .byte	$7C
07398 1A59                        00            .byte	0
07399 1A5A                        00            .byte	0
07400 1A5B                        00            .byte	0
07401                                           ! 1022  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x06, 0x0c, 0x78, 0x00, 0x00, 0x00,
07402 1A5C                        00            .byte	0
07403 1A5D                        00            .byte	0
07404 1A5E                        7C            .byte	$7C
07405 1A5F                        C6            .byte	$C6
07406 1A60                        C6            .byte	$C6
07407 1A61                        C6            .byte	$C6
07408 1A62                        7E            .byte	$7E
07409 1A63                        06            .byte	6
07410 1A64                        06            .byte	6
07411 1A65                        0C            .byte	$C
07412 1A66                        78            .byte	$78
07413 1A67                        00            .byte	0
07414 1A68                        00            .byte	0
07415 1A69                        00            .byte	0
07416                                           ! 1023  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
07417 1A6A                        00            .byte	0
07418 1A6B                        00            .byte	0
07419 1A6C                        00            .byte	0
07420 1A6D                        18            .byte	$18
07421 1A6E                        18            .byte	$18
07422 1A6F                        00            .byte	0
07423 1A70                        00            .byte	0
07424 1A71                        00            .byte	0
07425 1A72                        18            .byte	$18
07426 1A73                        18            .byte	$18
07427 1A74                        00            .byte	0
07428 1A75                        00            .byte	0
07429 1A76                        00            .byte	0
07430 1A77                        00            .byte	0
07431                                           ! 1024  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00,
07432 1A78                        00            .byte	0
07433 1A79                        00            .byte	0
07434 1A7A                        00            .byte	0
07435 1A7B                        18            .byte	$18
07436 1A7C                        18            .byte	$18
07437 1A7D                        00            .byte	0
07438 1A7E                        00            .byte	0
07439 1A7F                        00            .byte	0
07440 1A80                        18            .byte	$18
07441 1A81                        18            .byte	$18
07442 1A82                        30            .byte	$30
07443 1A83                        00            .byte	0
07444 1A84                        00            .byte	0
07445 1A85                        00            .byte	0
07446                                           ! 1025  0x00, 0x00, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x00, 0x00, 0x00,
07447 1A86                        00            .byte	0
07448 1A87                        00            .byte	0
07449 1A88                        06            .byte	6
07450 1A89                        0C            .byte	$C
07451 1A8A                        18            .byte	$18
07452 1A8B                        30            .byte	$30
07453 1A8C                        60            .byte	$60
07454 1A8D                        30            .byte	$30
07455 1A8E                        18            .byte	$18
07456 1A8F                        0C            .byte	$C
07457 1A90                        06            .byte	6
07458 1A91                        00            .byte	0
07459 1A92                        00            .byte	0
07460 1A93                        00            .byte	0
07461                                           ! 1026  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
07462 1A94                        00            .byte	0
07463 1A95                        00            .byte	0
07464 1A96                        00            .byte	0
07465 1A97                        00            .byte	0
07466 1A98                        00            .byte	0
07467 1A99                        7E            .byte	$7E
07468 1A9A                        00            .byte	0
07469 1A9B                        00            .byte	0
07470 1A9C                        7E            .byte	$7E
07471 1A9D                        00            .byte	0
07472 1A9E                        00            .byte	0
07473 1A9F                        00            .byte	0
07474 1AA0                        00            .byte	0
07475 1AA1                        00            .byte	0
07476                                           ! 1027  0x00, 0x00, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00,
07477 1AA2                        00            .byte	0
07478 1AA3                        00            .byte	0
07479 1AA4                        60            .byte	$60
07480 1AA5                        30            .byte	$30
07481 1AA6                        18            .byte	$18
07482 1AA7                        0C            .byte	$C
07483 1AA8                        06            .byte	6
07484 1AA9                        0C            .byte	$C
07485 1AAA                        18            .byte	$18
07486 1AAB                        30            .byte	$30
07487 1AAC                        60            .byte	$60
07488 1AAD                        00            .byte	0
07489 1AAE                        00            .byte	0
07490 1AAF                        00            .byte	0
07491                                           ! 1028  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x0c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07492 1AB0                        00            .byte	0
07493 1AB1                        00            .byte	0
07494 1AB2                        7C            .byte	$7C
07495 1AB3                        C6            .byte	$C6
07496 1AB4                        C6            .byte	$C6
07497 1AB5                        0C            .byte	$C
07498 1AB6                        18            .byte	$18
07499 1AB7                        18            .byte	$18
07500 1AB8                        00            .byte	0
07501 1AB9                        18            .byte	$18
07502 1ABA                        18            .byte	$18
07503 1ABB                        00            .byte	0
07504 1ABC                        00            .byte	0
07505 1ABD                        00            .byte	0
07506                                           ! 1029  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xde, 0xde, 0xde, 0xdc, 0xc0, 0x7c, 0x00, 0x00, 0x00,
07507 1ABE                        00            .byte	0
07508 1ABF                        00            .byte	0
07509 1AC0                        7C            .byte	$7C
07510 1AC1                        C6            .byte	$C6
07511 1AC2                        C6            .byte	$C6
07512 1AC3                        DE            .byte	$DE
07513 1AC4                        DE            .byte	$DE
07514 1AC5                        DE            .byte	$DE
07515 1AC6                        DC            .byte	$DC
07516 1AC7                        C0            .byte	$C0
07517 1AC8                        7C            .byte	$7C
07518 1AC9                        00            .byte	0
07519 1ACA                        00            .byte	0
07520 1ACB                        00            .byte	0
07521                                           ! 1030  0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07522 1ACC                        00            .byte	0
07523 1ACD                        00            .byte	0
07524 1ACE                        10            .byte	$10
07525 1ACF                        38            .byte	$38
07526 1AD0                        6C            .byte	$6C
07527 1AD1                        C6            .byte	$C6
07528 1AD2                        C6            .byte	$C6
07529 1AD3                        FE            .byte	$FE
07530 1AD4                        C6            .byte	$C6
07531 1AD5                        C6            .byte	$C6
07532 1AD6                        C6            .byte	$C6
07533 1AD7                        00            .byte	0
07534 1AD8                        00            .byte	0
07535 1AD9                        00            .byte	0
07536                                           ! 1031  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x66, 0x66, 0x66, 0xfc, 0x00, 0x00, 0x00,
07537 1ADA                        00            .byte	0
07538 1ADB                        00            .byte	0
07539 1ADC                        FC            .byte	$FC
07540 1ADD                        66            .byte	$66
07541 1ADE                        66            .byte	$66
07542 1ADF                        66            .byte	$66
07543 1AE0                        7C            .byte	$7C
07544 1AE1                        66            .byte	$66
07545 1AE2                        66            .byte	$66
07546 1AE3                        66            .byte	$66
07547 1AE4                        FC            .byte	$FC
07548 1AE5                        00            .byte	0
07549 1AE6                        00            .byte	0
07550 1AE7                        00            .byte	0
07551                                           ! 1032  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x00, 0x00, 0x00,
07552 1AE8                        00            .byte	0
07553 1AE9                        00            .byte	0
07554 1AEA                        3C            .byte	$3C
07555 1AEB                        66            .byte	$66
07556 1AEC                        C2            .byte	$C2
07557 1AED                        C0            .byte	$C0
07558 1AEE                        C0            .byte	$C0
07559 1AEF                        C0            .byte	$C0
07560 1AF0                        C2            .byte	$C2
07561 1AF1                        66            .byte	$66
07562 1AF2                        3C            .byte	$3C
07563 1AF3                        00            .byte	0
07564 1AF4                        00            .byte	0
07565 1AF5                        00            .byte	0
07566                                           ! 1033  0x00, 0x00, 0xf8, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00, 0x00, 0x00,
07567 1AF6                        00            .byte	0
07568 1AF7                        00            .byte	0
07569 1AF8                        F8            .byte	$F8
07570 1AF9                        6C            .byte	$6C
07571 1AFA                        66            .byte	$66
07572 1AFB                        66            .byte	$66
07573 1AFC                        66            .byte	$66
07574 1AFD                        66            .byte	$66
07575 1AFE                        66            .byte	$66
07576 1AFF                        6C            .byte	$6C
07577 1B00                        F8            .byte	$F8
07578 1B01                        00            .byte	0
07579 1B02                        00            .byte	0
07580 1B03                        00            .byte	0
07581                                           ! 1034  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00,
07582 1B04                        00            .byte	0
07583 1B05                        00            .byte	0
07584 1B06                        FE            .byte	$FE
07585 1B07                        66            .byte	$66
07586 1B08                        62            .byte	$62
07587 1B09                        68            .byte	$68
07588 1B0A                        78            .byte	$78
07589 1B0B                        68            .byte	$68
07590 1B0C                        62            .byte	$62
07591 1B0D                        66            .byte	$66
07592 1B0E                        FE            .byte	$FE
07593 1B0F                        00            .byte	0
07594 1B10                        00            .byte	0
07595 1B11                        00            .byte	0
07596                                           ! 1035  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
07597 1B12                        00            .byte	0
07598 1B13                        00            .byte	0
07599 1B14                        FE            .byte	$FE
07600 1B15                        66            .byte	$66
07601 1B16                        62            .byte	$62
07602 1B17                        68            .byte	$68
07603 1B18                        78            .byte	$78
07604 1B19                        68            .byte	$68
07605 1B1A                        60            .byte	$60
07606 1B1B                        60            .byte	$60
07607 1B1C                        F0            .byte	$F0
07608 1B1D                        00            .byte	0
07609 1B1E                        00            .byte	0
07610 1B1F                        00            .byte	0
07611                                           ! 1036  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xde, 0xc6, 0x66, 0x3a, 0x00, 0x00, 0x00,
07612 1B20                        00            .byte	0
07613 1B21                        00            .byte	0
07614 1B22                        3C            .byte	$3C
07615 1B23                        66            .byte	$66
07616 1B24                        C2            .byte	$C2
07617 1B25                        C0            .byte	$C0
07618 1B26                        C0            .byte	$C0
07619 1B27                        DE            .byte	$DE
07620 1B28                        C6            .byte	$C6
07621 1B29                        66            .byte	$66
07622 1B2A                        3A            .byte	$3A
07623 1B2B                        00            .byte	0
07624 1B2C                        00            .byte	0
07625 1B2D                        00            .byte	0
07626                                           ! 1037  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07627 1B2E                        00            .byte	0
07628 1B2F                        00            .byte	0
07629 1B30                        C6            .byte	$C6
07630 1B31                        C6            .byte	$C6
07631 1B32                        C6            .byte	$C6
07632 1B33                        C6            .byte	$C6
07633 1B34                        FE            .byte	$FE
07634 1B35                        C6            .byte	$C6
07635 1B36                        C6            .byte	$C6
07636 1B37                        C6            .byte	$C6
07637 1B38                        C6            .byte	$C6
07638 1B39                        00            .byte	0
07639 1B3A                        00            .byte	0
07640 1B3B                        00            .byte	0
07641                                           ! 1038  0x00, 0x00, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
07642 1B3C                        00            .byte	0
07643 1B3D                        00            .byte	0
07644 1B3E                        3C            .byte	$3C
07645 1B3F                        18            .byte	$18
07646 1B40                        18            .byte	$18
07647 1B41                        18            .byte	$18
07648 1B42                        18            .byte	$18
07649 1B43                        18            .byte	$18
07650 1B44                        18            .byte	$18
07651 1B45                        18            .byte	$18
07652 1B46                        3C            .byte	$3C
07653 1B47                        00            .byte	0
07654 1B48                        00            .byte	0
07655 1B49                        00            .byte	0
07656                                           ! 1039  0x00, 0x00, 0x1e, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00,
07657 1B4A                        00            .byte	0
07658 1B4B                        00            .byte	0
07659 1B4C                        1E            .byte	$1E
07660 1B4D                        0C            .byte	$C
07661 1B4E                        0C            .byte	$C
07662 1B4F                        0C            .byte	$C
07663 1B50                        0C            .byte	$C
07664 1B51                        0C            .byte	$C
07665 1B52                        CC            .byte	$CC
07666 1B53                        CC            .byte	$CC
07667 1B54                        78            .byte	$78
07668 1B55                        00            .byte	0
07669 1B56                        00            .byte	0
07670 1B57                        00            .byte	0
07671                                           ! 1040  0x00, 0x00, 0xe6, 0x66, 0x6c, 0x6c, 0x78, 0x6c, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00,
07672 1B58                        00            .byte	0
07673 1B59                        00            .byte	0
07674 1B5A                        E6            .byte	$E6
07675 1B5B                        66            .byte	$66
07676 1B5C                        6C            .byte	$6C
07677 1B5D                        6C            .byte	$6C
07678 1B5E                        78            .byte	$78
07679 1B5F                        6C            .byte	$6C
07680 1B60                        6C            .byte	$6C
07681 1B61                        66            .byte	$66
07682 1B62                        E6            .byte	$E6
07683 1B63                        00            .byte	0
07684 1B64                        00            .byte	0
07685 1B65                        00            .byte	0
07686                                           ! 1041  0x00, 0x00, 0xf0, 0x60, 0x6
07687 1B66                        00            .byte	0
07688 1B67                        00            .byte	0
07689 1B68                        F0            .byte	$F0
07690 1B69                        60            .byte	$60
07691                                           ! 1041 0, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00,
07692 1B6A                        60            .byte	$60
07693 1B6B                        60            .byte	$60
07694 1B6C                        60            .byte	$60
07695 1B6D                        60            .byte	$60
07696 1B6E                        62            .byte	$62
07697 1B6F                        66            .byte	$66
07698 1B70                        FE            .byte	$FE
07699 1B71                        00            .byte	0
07700 1B72                        00            .byte	0
07701 1B73                        00            .byte	0
07702                                           ! 1042  0x00, 0x00, 0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07703 1B74                        00            .byte	0
07704 1B75                        00            .byte	0
07705 1B76                        C6            .byte	$C6
07706 1B77                        EE            .byte	$EE
07707 1B78                        FE            .byte	$FE
07708 1B79                        FE            .byte	$FE
07709 1B7A                        D6            .byte	$D6
07710 1B7B                        C6            .byte	$C6
07711 1B7C                        C6            .byte	$C6
07712 1B7D                        C6            .byte	$C6
07713 1B7E                        C6            .byte	$C6
07714 1B7F                        00            .byte	0
07715 1B80                        00            .byte	0
07716 1B81                        00            .byte	0
07717                                           ! 1043  0x00, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07718 1B82                        00            .byte	0
07719 1B83                        00            .byte	0
07720 1B84                        C6            .byte	$C6
07721 1B85                        E6            .byte	$E6
07722 1B86                        F6            .byte	$F6
07723 1B87                        FE            .byte	$FE
07724 1B88                        DE            .byte	$DE
07725 1B89                        CE            .byte	$CE
07726 1B8A                        C6            .byte	$C6
07727 1B8B                        C6            .byte	$C6
07728 1B8C                        C6            .byte	$C6
07729 1B8D                        00            .byte	0
07730 1B8E                        00            .byte	0
07731 1B8F                        00            .byte	0
07732                                           ! 1044  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
07733 1B90                        00            .byte	0
07734 1B91                        00            .byte	0
07735 1B92                        38            .byte	$38
07736 1B93                        6C            .byte	$6C
07737 1B94                        C6            .byte	$C6
07738 1B95                        C6            .byte	$C6
07739 1B96                        C6            .byte	$C6
07740 1B97                        C6            .byte	$C6
07741 1B98                        C6            .byte	$C6
07742 1B99                        6C            .byte	$6C
07743 1B9A                        38            .byte	$38
07744 1B9B                        00            .byte	0
07745 1B9C                        00            .byte	0
07746 1B9D                        00            .byte	0
07747                                           ! 1045  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
07748 1B9E                        00            .byte	0
07749 1B9F                        00            .byte	0
07750 1BA0                        FC            .byte	$FC
07751 1BA1                        66            .byte	$66
07752 1BA2                        66            .byte	$66
07753 1BA3                        66            .byte	$66
07754 1BA4                        7C            .byte	$7C
07755 1BA5                        60            .byte	$60
07756 1BA6                        60            .byte	$60
07757 1BA7                        60            .byte	$60
07758 1BA8                        F0            .byte	$F0
07759 1BA9                        00            .byte	0
07760 1BAA                        00            .byte	0
07761 1BAB                        00            .byte	0
07762                                           ! 1046  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xde, 0x7c, 0x0c, 0x0e, 0x00, 0x00,
07763 1BAC                        00            .byte	0
07764 1BAD                        00            .byte	0
07765 1BAE                        7C            .byte	$7C
07766 1BAF                        C6            .byte	$C6
07767 1BB0                        C6            .byte	$C6
07768 1BB1                        C6            .byte	$C6
07769 1BB2                        C6            .byte	$C6
07770 1BB3                        D6            .byte	$D6
07771 1BB4                        DE            .byte	$DE
07772 1BB5                        7C            .byte	$7C
07773 1BB6                        0C            .byte	$C
07774 1BB7                        0E            .byte	$E
07775 1BB8                        00            .byte	0
07776 1BB9                        00            .byte	0
07777                                           ! 1047  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00,
07778 1BBA                        00            .byte	0
07779 1BBB                        00            .byte	0
07780 1BBC                        FC            .byte	$FC
07781 1BBD                        66            .byte	$66
07782 1BBE                        66            .byte	$66
07783 1BBF                        66            .byte	$66
07784 1BC0                        7C            .byte	$7C
07785 1BC1                        6C            .byte	$6C
07786 1BC2                        66            .byte	$66
07787 1BC3                        66            .byte	$66
07788 1BC4                        E6            .byte	$E6
07789 1BC5                        00            .byte	0
07790 1BC6                        00            .byte	0
07791 1BC7                        00            .byte	0
07792                                           ! 1048  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x60, 0x38, 0x0c, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07793 1BC8                        00            .byte	0
07794 1BC9                        00            .byte	0
07795 1BCA                        7C            .byte	$7C
07796 1BCB                        C6            .byte	$C6
07797 1BCC                        C6            .byte	$C6
07798 1BCD                        60            .byte	$60
07799 1BCE                        38            .byte	$38
07800 1BCF                        0C            .byte	$C
07801 1BD0                        C6            .byte	$C6
07802 1BD1                        C6            .byte	$C6
07803 1BD2                        7C            .byte	$7C
07804 1BD3                        00            .byte	0
07805 1BD4                        00            .byte	0
07806 1BD5                        00            .byte	0
07807                                           ! 1049  0x00, 0x00, 0x7e, 0x7e, 0x5a, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
07808 1BD6                        00            .byte	0
07809 1BD7                        00            .byte	0
07810 1BD8                        7E            .byte	$7E
07811 1BD9                        7E            .byte	$7E
07812 1BDA                        5A            .byte	$5A
07813 1BDB                        18            .byte	$18
07814 1BDC                        18            .byte	$18
07815 1BDD                        18            .byte	$18
07816 1BDE                        18            .byte	$18
07817 1BDF                        18            .byte	$18
07818 1BE0                        3C            .byte	$3C
07819 1BE1                        00            .byte	0
07820 1BE2                        00            .byte	0
07821 1BE3                        00            .byte	0
07822                                           ! 1050  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07823 1BE4                        00            .byte	0
07824 1BE5                        00            .byte	0
07825 1BE6                        C6            .byte	$C6
07826 1BE7                        C6            .byte	$C6
07827 1BE8                        C6            .byte	$C6
07828 1BE9                        C6            .byte	$C6
07829 1BEA                        C6            .byte	$C6
07830 1BEB                        C6            .byte	$C6
07831 1BEC                        C6            .byte	$C6
07832 1BED                        C6            .byte	$C6
07833 1BEE                        7C            .byte	$7C
07834 1BEF                        00            .byte	0
07835 1BF0                        00            .byte	0
07836 1BF1                        00            .byte	0
07837                                           ! 1051  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x10, 0x00, 0x00, 0x00,
07838 1BF2                        00            .byte	0
07839 1BF3                        00            .byte	0
07840 1BF4                        C6            .byte	$C6
07841 1BF5                        C6            .byte	$C6
07842 1BF6                        C6            .byte	$C6
07843 1BF7                        C6            .byte	$C6
07844 1BF8                        C6            .byte	$C6
07845 1BF9                        C6            .byte	$C6
07846 1BFA                        6C            .byte	$6C
07847 1BFB                        38            .byte	$38
07848 1BFC                        10            .byte	$10
07849 1BFD                        00            .byte	0
07850 1BFE                        00            .byte	0
07851 1BFF                        00            .byte	0
07852                                           ! 1052  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe, 0x7c, 0x6c, 0x00, 0x00, 0x00,
07853 1C00                        00            .byte	0
07854 1C01                        00            .byte	0
07855 1C02                        C6            .byte	$C6
07856 1C03                        C6            .byte	$C6
07857 1C04                        C6            .byte	$C6
07858 1C05                        C6            .byte	$C6
07859 1C06                        D6            .byte	$D6
07860 1C07                        D6            .byte	$D6
07861 1C08                        FE            .byte	$FE
07862 1C09                        7C            .byte	$7C
07863 1C0A                        6C            .byte	$6C
07864 1C0B                        00            .byte	0
07865 1C0C                        00            .byte	0
07866 1C0D                        00            .byte	0
07867                                           ! 1053  0x00, 0x00, 0xc6, 0xc6, 0x6c, 0x38, 0x38, 0x38, 0x6c, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07868 1C0E                        00            .byte	0
07869 1C0F                        00            .byte	0
07870 1C10                        C6            .byte	$C6
07871 1C11                        C6            .byte	$C6
07872 1C12                        6C            .byte	$6C
07873 1C13                        38            .byte	$38
07874 1C14                        38            .byte	$38
07875 1C15                        38            .byte	$38
07876 1C16                        6C            .byte	$6C
07877 1C17                        C6            .byte	$C6
07878 1C18                        C6            .byte	$C6
07879 1C19                        00            .byte	0
07880 1C1A                        00            .byte	0
07881 1C1B                        00            .byte	0
07882                                           ! 1054  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
07883 1C1C                        00            .byte	0
07884 1C1D                        00            .byte	0
07885 1C1E                        66            .byte	$66
07886 1C1F                        66            .byte	$66
07887 1C20                        66            .byte	$66
07888 1C21                        66            .byte	$66
07889 1C22                        3C            .byte	$3C
07890 1C23                        18            .byte	$18
07891 1C24                        18            .byte	$18
07892 1C25                        18            .byte	$18
07893 1C26                        3C            .byte	$3C
07894 1C27                        00            .byte	0
07895 1C28                        00            .byte	0
07896 1C29                        00            .byte	0
07897                                           ! 1055  0x00, 0x00, 0xfe, 0xc6, 0x8c, 0x18, 0x30, 0x60, 0xc2, 0xc6, 0xfe, 0x00, 0x00, 0x00,
07898 1C2A                        00            .byte	0
07899 1C2B                        00            .byte	0
07900 1C2C                        FE            .byte	$FE
07901 1C2D                        C6            .byte	$C6
07902 1C2E                        8C            .byte	$8C
07903 1C2F                        18            .byte	$18
07904 1C30                        30            .byte	$30
07905 1C31                        60            .byte	$60
07906 1C32                        C2            .byte	$C2
07907 1C33                        C6            .byte	$C6
07908 1C34                        FE            .byte	$FE
07909 1C35                        00            .byte	0
07910 1C36                        00            .byte	0
07911 1C37                        00            .byte	0
07912                                           ! 1056  0x00, 0x00, 0x3c, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3c, 0x00, 0x00, 0x00,
07913 1C38                        00            .byte	0
07914 1C39                        00            .byte	0
07915 1C3A                        3C            .byte	$3C
07916 1C3B                        30            .byte	$30
07917 1C3C                        30            .byte	$30
07918 1C3D                        30            .byte	$30
07919 1C3E                        30            .byte	$30
07920 1C3F                        30            .byte	$30
07921 1C40                        30            .byte	$30
07922 1C41                        30            .byte	$30
07923 1C42                        3C            .byte	$3C
07924 1C43                        00            .byte	0
07925 1C44                        00            .byte	0
07926 1C45                        00            .byte	0
07927                                           ! 1057  0x00, 0x00, 0x80, 0xc0, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00,
07928 1C46                        00            .byte	0
07929 1C47                        00            .byte	0
07930 1C48                        80            .byte	$80
07931 1C49                        C0            .byte	$C0
07932 1C4A                        E0            .byte	$E0
07933 1C4B                        70            .byte	$70
07934 1C4C                        38            .byte	$38
07935 1C4D                        1C            .byte	$1C
07936 1C4E                        0E            .byte	$E
07937 1C4F                        06            .byte	6
07938 1C50                        02            .byte	2
07939 1C51                        00            .byte	0
07940 1C52                        00            .byte	0
07941 1C53                        00            .byte	0
07942                                           ! 1058  0x00, 0x00, 0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00, 0x00, 0x00,
07943 1C54                        00            .byte	0
07944 1C55                        00            .byte	0
07945 1C56                        3C            .byte	$3C
07946 1C57                        0C            .byte	$C
07947 1C58                        0C            .byte	$C
07948 1C59                        0C            .byte	$C
07949 1C5A                        0C            .byte	$C
07950 1C5B                        0C            .byte	$C
07951 1C5C                        0C            .byte	$C
07952 1C5D                        0C            .byte	$C
07953 1C5E                        3C            .byte	$3C
07954 1C5F                        00            .byte	0
07955 1C60                        00            .byte	0
07956 1C61                        00            .byte	0
07957                                           ! 1059  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07958 1C62                        10            .byte	$10
07959 1C63                        38            .byte	$38
07960 1C64                        6C            .byte	$6C
07961 1C65                        C6            .byte	$C6
07962 1C66                        00            .byte	0
07963 1C67                        00            .byte	0
07964 1C68                        00            .byte	0
07965 1C69                        00            .byte	0
07966 1C6A                        00            .byte	0
07967 1C6B                        00            .byte	0
07968 1C6C                        00            .byte	0
07969 1C6D                        00            .byte	0
07970 1C6E                        00            .byte	0
07971 1C6F                        00            .byte	0
07972                                           ! 1060  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00,
07973 1C70                        00            .byte	0
07974 1C71                        00            .byte	0
07975 1C72                        00            .byte	0
07976 1C73                        00            .byte	0
07977 1C74                        00            .byte	0
07978 1C75                        00            .byte	0
07979 1C76                        00            .byte	0
07980 1C77                        00            .byte	0
07981 1C78                        00            .byte	0
07982 1C79                        00            .byte	0
07983 1C7A                        00            .byte	0
07984 1C7B                        00            .byte	0
07985 1C7C                        FF            .byte	$FF
07986 1C7D                        00            .byte	0
07987                                           ! 1061  0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07988 1C7E                        30            .byte	$30
07989 1C7F                        30            .byte	$30
07990 1C80                        18            .byte	$18
07991 1C81                        00            .byte	0
07992 1C82                        00            .byte	0
07993 1C83                        00            .byte	0
07994 1C84                        00            .byte	0
07995 1C85                        00            .byte	0
07996 1C86                        00            .byte	0
07997 1C87                        00            .byte	0
07998 1C88                        00            .byte	0
07999 1C89                        00            .byte	0
08000 1C8A                        00            .byte	0
08001 1C8B                        00            .byte	0
08002                                           ! 1062  0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08003 1C8C                        00            .byte	0
08004 1C8D                        00            .byte	0
08005 1C8E                        00            .byte	0
08006 1C8F                        00            .byte	0
08007 1C90                        00            .byte	0
08008 1C91                        78            .byte	$78
08009 1C92                        0C            .byte	$C
08010 1C93                        7C            .byte	$7C
08011 1C94                        CC            .byte	$CC
08012 1C95                        CC            .byte	$CC
08013 1C96                        76            .byte	$76
08014 1C97                        00            .byte	0
08015 1C98                        00            .byte	0
08016 1C99                        00            .byte	0
08017                                           ! 1063  0x00, 0x00, 0xe0, 0x60, 0x60, 0x78, 0x6c, 0x66, 0x66, 0x66, 0x7c, 0x00, 0x00, 0x00,
08018 1C9A                        00            .byte	0
08019 1C9B                        00            .byte	0
08020 1C9C                        E0            .byte	$E0
08021 1C9D                        60            .byte	$60
08022 1C9E                        60            .byte	$60
08023 1C9F                        78            .byte	$78
08024 1CA0                        6C            .byte	$6C
08025 1CA1                        66            .byte	$66
08026 1CA2                        66            .byte	$66
08027 1CA3                        66            .byte	$66
08028 1CA4                        7C            .byte	$7C
08029 1CA5                        00            .byte	0
08030 1CA6                        00            .byte	0
08031 1CA7                        00            .byte	0
08032                                           ! 1064  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08033 1CA8                        00            .byte	0
08034 1CA9                        00            .byte	0
08035 1CAA                        00            .byte	0
08036 1CAB                        00            .byte	0
08037 1CAC                        00            .byte	0
08038 1CAD                        7C            .byte	$7C
08039 1CAE                        C6            .byte	$C6
08040 1CAF                        C0            .byte	$C0
08041 1CB0                        C0            .byte	$C0
08042 1CB1                        C6            .byte	$C6
08043 1CB2                        7C            .byte	$7C
08044 1CB3                        00            .byte	0
08045 1CB4                        00            .byte	0
08046 1CB5                        00            .byte	0
08047                                           ! 1065  0x00, 0x00, 0x1c, 0x0c, 0x0c, 0x3c,
08048 1CB6                        00            .byte	0
08049 1CB7                        00            .byte	0
08050 1CB8                        1C            .byte	$1C
08051 1CB9                        0C            .byte	$C
08052 1CBA                        0C            .byte	$C
08053                                           ! 1065  0x6c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08054 1CBB                        3C            .byte	$3C
08055 1CBC                        6C            .byte	$6C
08056 1CBD                        CC            .byte	$CC
08057 1CBE                        CC            .byte	$CC
08058 1CBF                        CC            .byte	$CC
08059 1CC0                        76            .byte	$76
08060 1CC1                        00            .byte	0
08061 1CC2                        00            .byte	0
08062 1CC3                        00            .byte	0
08063                                           ! 1066  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08064 1CC4                        00            .byte	0
08065 1CC5                        00            .byte	0
08066 1CC6                        00            .byte	0
08067 1CC7                        00            .byte	0
08068 1CC8                        00            .byte	0
08069 1CC9                        7C            .byte	$7C
08070 1CCA                        C6            .byte	$C6
08071 1CCB                        FE            .byte	$FE
08072 1CCC                        C0            .byte	$C0
08073 1CCD                        C6            .byte	$C6
08074 1CCE                        7C            .byte	$7C
08075 1CCF                        00            .byte	0
08076 1CD0                        00            .byte	0
08077 1CD1                        00            .byte	0
08078                                           ! 1067  0x00, 0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
08079 1CD2                        00            .byte	0
08080 1CD3                        00            .byte	0
08081 1CD4                        38            .byte	$38
08082 1CD5                        6C            .byte	$6C
08083 1CD6                        64            .byte	$64
08084 1CD7                        60            .byte	$60
08085 1CD8                        F0            .byte	$F0
08086 1CD9                        60            .byte	$60
08087 1CDA                        60            .byte	$60
08088 1CDB                        60            .byte	$60
08089 1CDC                        F0            .byte	$F0
08090 1CDD                        00            .byte	0
08091 1CDE                        00            .byte	0
08092 1CDF                        00            .byte	0
08093                                           ! 1068  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xcc, 0x78, 0x00,
08094 1CE0                        00            .byte	0
08095 1CE1                        00            .byte	0
08096 1CE2                        00            .byte	0
08097 1CE3                        00            .byte	0
08098 1CE4                        00            .byte	0
08099 1CE5                        76            .byte	$76
08100 1CE6                        CC            .byte	$CC
08101 1CE7                        CC            .byte	$CC
08102 1CE8                        CC            .byte	$CC
08103 1CE9                        7C            .byte	$7C
08104 1CEA                        0C            .byte	$C
08105 1CEB                        CC            .byte	$CC
08106 1CEC                        78            .byte	$78
08107 1CED                        00            .byte	0
08108                                           ! 1069  0x00, 0x00, 0xe0, 0x60, 0x60, 0x6c, 0x76, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00,
08109 1CEE                        00            .byte	0
08110 1CEF                        00            .byte	0
08111 1CF0                        E0            .byte	$E0
08112 1CF1                        60            .byte	$60
08113 1CF2                        60            .byte	$60
08114 1CF3                        6C            .byte	$6C
08115 1CF4                        76            .byte	$76
08116 1CF5                        66            .byte	$66
08117 1CF6                        66            .byte	$66
08118 1CF7                        66            .byte	$66
08119 1CF8                        E6            .byte	$E6
08120 1CF9                        00            .byte	0
08121 1CFA                        00            .byte	0
08122 1CFB                        00            .byte	0
08123                                           ! 1070  0x00, 0x00, 0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08124 1CFC                        00            .byte	0
08125 1CFD                        00            .byte	0
08126 1CFE                        18            .byte	$18
08127 1CFF                        18            .byte	$18
08128 1D00                        00            .byte	0
08129 1D01                        38            .byte	$38
08130 1D02                        18            .byte	$18
08131 1D03                        18            .byte	$18
08132 1D04                        18            .byte	$18
08133 1D05                        18            .byte	$18
08134 1D06                        3C            .byte	$3C
08135 1D07                        00            .byte	0
08136 1D08                        00            .byte	0
08137 1D09                        00            .byte	0
08138                                           ! 1071  0x00, 0x00, 0x06, 0x06, 0x00, 0x0e, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3c, 0x00,
08139 1D0A                        00            .byte	0
08140 1D0B                        00            .byte	0
08141 1D0C                        06            .byte	6
08142 1D0D                        06            .byte	6
08143 1D0E                        00            .byte	0
08144 1D0F                        0E            .byte	$E
08145 1D10                        06            .byte	6
08146 1D11                        06            .byte	6
08147 1D12                        06            .byte	6
08148 1D13                        06            .byte	6
08149 1D14                        66            .byte	$66
08150 1D15                        66            .byte	$66
08151 1D16                        3C            .byte	$3C
08152 1D17                        00            .byte	0
08153                                           ! 1072  0x00, 0x00, 0xe0, 0x60, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00,
08154 1D18                        00            .byte	0
08155 1D19                        00            .byte	0
08156 1D1A                        E0            .byte	$E0
08157 1D1B                        60            .byte	$60
08158 1D1C                        60            .byte	$60
08159 1D1D                        66            .byte	$66
08160 1D1E                        6C            .byte	$6C
08161 1D1F                        78            .byte	$78
08162 1D20                        6C            .byte	$6C
08163 1D21                        66            .byte	$66
08164 1D22                        E6            .byte	$E6
08165 1D23                        00            .byte	0
08166 1D24                        00            .byte	0
08167 1D25                        00            .byte	0
08168                                           ! 1073  0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08169 1D26                        00            .byte	0
08170 1D27                        00            .byte	0
08171 1D28                        38            .byte	$38
08172 1D29                        18            .byte	$18
08173 1D2A                        18            .byte	$18
08174 1D2B                        18            .byte	$18
08175 1D2C                        18            .byte	$18
08176 1D2D                        18            .byte	$18
08177 1D2E                        18            .byte	$18
08178 1D2F                        18            .byte	$18
08179 1D30                        3C            .byte	$3C
08180 1D31                        00            .byte	0
08181 1D32                        00            .byte	0
08182 1D33                        00            .byte	0
08183                                           ! 1074  0x00, 0x00, 0x00, 0x00, 0x00, 0xec, 0xfe, 0xd6, 0xd6, 0xd6, 0xc6, 0x00, 0x00, 0x00,
08184 1D34                        00            .byte	0
08185 1D35                        00            .byte	0
08186 1D36                        00            .byte	0
08187 1D37                        00            .byte	0
08188 1D38                        00            .byte	0
08189 1D39                        EC            .byte	$EC
08190 1D3A                        FE            .byte	$FE
08191 1D3B                        D6            .byte	$D6
08192 1D3C                        D6            .byte	$D6
08193 1D3D                        D6            .byte	$D6
08194 1D3E                        C6            .byte	$C6
08195 1D3F                        00            .byte	0
08196 1D40                        00            .byte	0
08197 1D41                        00            .byte	0
08198                                           ! 1075  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00,
08199 1D42                        00            .byte	0
08200 1D43                        00            .byte	0
08201 1D44                        00            .byte	0
08202 1D45                        00            .byte	0
08203 1D46                        00            .byte	0
08204 1D47                        DC            .byte	$DC
08205 1D48                        66            .byte	$66
08206 1D49                        66            .byte	$66
08207 1D4A                        66            .byte	$66
08208 1D4B                        66            .byte	$66
08209 1D4C                        66            .byte	$66
08210 1D4D                        00            .byte	0
08211 1D4E                        00            .byte	0
08212 1D4F                        00            .byte	0
08213                                           ! 1076  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08214 1D50                        00            .byte	0
08215 1D51                        00            .byte	0
08216 1D52                        00            .byte	0
08217 1D53                        00            .byte	0
08218 1D54                        00            .byte	0
08219 1D55                        7C            .byte	$7C
08220 1D56                        C6            .byte	$C6
08221 1D57                        C6            .byte	$C6
08222 1D58                        C6            .byte	$C6
08223 1D59                        C6            .byte	$C6
08224 1D5A                        7C            .byte	$7C
08225 1D5B                        00            .byte	0
08226 1D5C                        00            .byte	0
08227 1D5D                        00            .byte	0
08228                                           ! 1077  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
08229 1D5E                        00            .byte	0
08230 1D5F                        00            .byte	0
08231 1D60                        00            .byte	0
08232 1D61                        00            .byte	0
08233 1D62                        00            .byte	0
08234 1D63                        DC            .byte	$DC
08235 1D64                        66            .byte	$66
08236 1D65                        66            .byte	$66
08237 1D66                        66            .byte	$66
08238 1D67                        7C            .byte	$7C
08239 1D68                        60            .byte	$60
08240 1D69                        60            .byte	$60
08241 1D6A                        F0            .byte	$F0
08242 1D6B                        00            .byte	0
08243                                           ! 1078  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0x0c, 0x1e, 0x00,
08244 1D6C                        00            .byte	0
08245 1D6D                        00            .byte	0
08246 1D6E                        00            .byte	0
08247 1D6F                        00            .byte	0
08248 1D70                        00            .byte	0
08249 1D71                        76            .byte	$76
08250 1D72                        CC            .byte	$CC
08251 1D73                        CC            .byte	$CC
08252 1D74                        CC            .byte	$CC
08253 1D75                        7C            .byte	$7C
08254 1D76                        0C            .byte	$C
08255 1D77                        0C            .byte	$C
08256 1D78                        1E            .byte	$1E
08257 1D79                        00            .byte	0
08258                                           ! 1079  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
08259 1D7A                        00            .byte	0
08260 1D7B                        00            .byte	0
08261 1D7C                        00            .byte	0
08262 1D7D                        00            .byte	0
08263 1D7E                        00            .byte	0
08264 1D7F                        DC            .byte	$DC
08265 1D80                        76            .byte	$76
08266 1D81                        66            .byte	$66
08267 1D82                        60            .byte	$60
08268 1D83                        60            .byte	$60
08269 1D84                        F0            .byte	$F0
08270 1D85                        00            .byte	0
08271 1D86                        00            .byte	0
08272 1D87                        00            .byte	0
08273                                           ! 1080  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0x70, 0x1c, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08274 1D88                        00            .byte	0
08275 1D89                        00            .byte	0
08276 1D8A                        00            .byte	0
08277 1D8B                        00            .byte	0
08278 1D8C                        00            .byte	0
08279 1D8D                        7C            .byte	$7C
08280 1D8E                        C6            .byte	$C6
08281 1D8F                        70            .byte	$70
08282 1D90                        1C            .byte	$1C
08283 1D91                        C6            .byte	$C6
08284 1D92                        7C            .byte	$7C
08285 1D93                        00            .byte	0
08286 1D94                        00            .byte	0
08287 1D95                        00            .byte	0
08288                                           ! 1081  0x00, 0x00, 0x10, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x30, 0x36, 0x1c, 0x00, 0x00, 0x00,
08289 1D96                        00            .byte	0
08290 1D97                        00            .byte	0
08291 1D98                        10            .byte	$10
08292 1D99                        30            .byte	$30
08293 1D9A                        30            .byte	$30
08294 1D9B                        FC            .byte	$FC
08295 1D9C                        30            .byte	$30
08296 1D9D                        30            .byte	$30
08297 1D9E                        30            .byte	$30
08298 1D9F                        36            .byte	$36
08299 1DA0                        1C            .byte	$1C
08300 1DA1                        00            .byte	0
08301 1DA2                        00            .byte	0
08302 1DA3                        00            .byte	0
08303                                           ! 1082  0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08304 1DA4                        00            .byte	0
08305 1DA5                        00            .byte	0
08306 1DA6                        00            .byte	0
08307 1DA7                        00            .byte	0
08308 1DA8                        00            .byte	0
08309 1DA9                        CC            .byte	$CC
08310 1DAA                        CC            .byte	$CC
08311 1DAB                        CC            .byte	$CC
08312 1DAC                        CC            .byte	$CC
08313 1DAD                        CC            .byte	$CC
08314 1DAE                        76            .byte	$76
08315 1DAF                        00            .byte	0
08316 1DB0                        00            .byte	0
08317 1DB1                        00            .byte	0
08318                                           ! 1083  0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00,
08319 1DB2                        00            .byte	0
08320 1DB3                        00            .byte	0
08321 1DB4                        00            .byte	0
08322 1DB5                        00            .byte	0
08323 1DB6                        00            .byte	0
08324 1DB7                        66            .byte	$66
08325 1DB8                        66            .byte	$66
08326 1DB9                        66            .byte	$66
08327 1DBA                        66            .byte	$66
08328 1DBB                        3C            .byte	$3C
08329 1DBC                        18            .byte	$18
08330 1DBD                        00            .byte	0
08331 1DBE                        00            .byte	0
08332 1DBF                        00            .byte	0
08333                                           ! 1084  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe, 0x6c, 0x00, 0x00, 0x00,
08334 1DC0                        00            .byte	0
08335 1DC1                        00            .byte	0
08336 1DC2                        00            .byte	0
08337 1DC3                        00            .byte	0
08338 1DC4                        00            .byte	0
08339 1DC5                        C6            .byte	$C6
08340 1DC6                        C6            .byte	$C6
08341 1DC7                        D6            .byte	$D6
08342 1DC8                        D6            .byte	$D6
08343 1DC9                        FE            .byte	$FE
08344 1DCA                        6C            .byte	$6C
08345 1DCB                        00            .byte	0
08346 1DCC                        00            .byte	0
08347 1DCD                        00            .byte	0
08348                                           ! 1085  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0x6c, 0x38, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00,
08349 1DCE                        00            .byte	0
08350 1DCF                        00            .byte	0
08351 1DD0                        00            .byte	0
08352 1DD1                        00            .byte	0
08353 1DD2                        00            .byte	0
08354 1DD3                        C6            .byte	$C6
08355 1DD4                        6C            .byte	$6C
08356 1DD5                        38            .byte	$38
08357 1DD6                        38            .byte	$38
08358 1DD7                        6C            .byte	$6C
08359 1DD8                        C6            .byte	$C6
08360 1DD9                        00            .byte	0
08361 1DDA                        00            .byte	0
08362 1DDB                        00            .byte	0
08363                                           ! 1086  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0xf8, 0x00,
08364 1DDC                        00            .byte	0
08365 1DDD                        00            .byte	0
08366 1DDE                        00            .byte	0
08367 1DDF                        00            .byte	0
08368 1DE0                        00            .byte	0
08369 1DE1                        C6            .byte	$C6
08370 1DE2                        C6            .byte	$C6
08371 1DE3                        C6            .byte	$C6
08372 1DE4                        C6            .byte	$C6
08373 1DE5                        7E            .byte	$7E
08374 1DE6                        06            .byte	6
08375 1DE7                        0C            .byte	$C
08376 1DE8                        F8            .byte	$F8
08377 1DE9                        00            .byte	0
08378                                           ! 1087  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xcc, 0x18, 0x30, 0x66, 0xfe, 0x00, 0x00, 0x00,
08379 1DEA                        00            .byte	0
08380 1DEB                        00            .byte	0
08381 1DEC                        00            .byte	0
08382 1DED                        00            .byte	0
08383 1DEE                        00            .byte	0
08384 1DEF                        FE            .byte	$FE
08385 1DF0                        CC            .byte	$CC
08386 1DF1                        18            .byte	$18
08387 1DF2                        30            .byte	$30
08388 1DF3                        66            .byte	$66
08389 1DF4                        FE            .byte	$FE
08390 1DF5                        00            .byte	0
08391 1DF6                        00            .byte	0
08392 1DF7                        00            .byte	0
08393                                           ! 1088  0x00, 0x00, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x00, 0x00, 0x00,
08394 1DF8                        00            .byte	0
08395 1DF9                        00            .byte	0
08396 1DFA                        0E            .byte	$E
08397 1DFB                        18            .byte	$18
08398 1DFC                        18            .byte	$18
08399 1DFD                        18            .byte	$18
08400 1DFE                        70            .byte	$70
08401 1DFF                        18            .byte	$18
08402 1E00                        18            .byte	$18
08403 1E01                        18            .byte	$18
08404 1E02                        0E            .byte	$E
08405 1E03                        00            .byte	0
08406 1E04                        00            .byte	0
08407 1E05                        00            .byte	0
08408                                           ! 1089  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0
08409 1E06                        00            .byte	0
08410 1E07                        00            .byte	0
08411 1E08                        18            .byte	$18
08412 1E09                        18            .byte	$18
08413 1E0A                        18            .byte	$18
08414 1E0B                        18            .byte	$18
08415 1E0C                        00            .byte	0
08416                                           ! 1089 x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
08417 1E0D                        18            .byte	$18
08418 1E0E                        18            .byte	$18
08419 1E0F                        18            .byte	$18
08420 1E10                        18            .byte	$18
08421 1E11                        00            .byte	0
08422 1E12                        00            .byte	0
08423 1E13                        00            .byte	0
08424                                           ! 1090  0x00, 0x00, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x00, 0x00, 0x00,
08425 1E14                        00            .byte	0
08426 1E15                        00            .byte	0
08427 1E16                        70            .byte	$70
08428 1E17                        18            .byte	$18
08429 1E18                        18            .byte	$18
08430 1E19                        18            .byte	$18
08431 1E1A                        0E            .byte	$E
08432 1E1B                        18            .byte	$18
08433 1E1C                        18            .byte	$18
08434 1E1D                        18            .byte	$18
08435 1E1E                        70            .byte	$70
08436 1E1F                        00            .byte	0
08437 1E20                        00            .byte	0
08438 1E21                        00            .byte	0
08439                                           ! 1091  0x00, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
08440 1E22                        00            .byte	0
08441 1E23                        00            .byte	0
08442 1E24                        76            .byte	$76
08443 1E25                        DC            .byte	$DC
08444 1E26                        00            .byte	0
08445 1E27                        00            .byte	0
08446 1E28                        00            .byte	0
08447 1E29                        00            .byte	0
08448 1E2A                        00            .byte	0
08449 1E2B                        00            .byte	0
08450 1E2C                        00            .byte	0
08451 1E2D                        00            .byte	0
08452 1E2E                        00            .byte	0
08453 1E2F                        00            .byte	0
08454                                           ! 1092  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
08455 1E30                        00            .byte	0
08456 1E31                        00            .byte	0
08457 1E32                        00            .byte	0
08458 1E33                        00            .byte	0
08459 1E34                        10            .byte	$10
08460 1E35                        38            .byte	$38
08461 1E36                        6C            .byte	$6C
08462 1E37                        C6            .byte	$C6
08463 1E38                        C6            .byte	$C6
08464 1E39                        FE            .byte	$FE
08465 1E3A                        00            .byte	0
08466 1E3B                        00            .byte	0
08467 1E3C                        00            .byte	0
08468 1E3D                        00            .byte	0
08469                                           ! 1093  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x0c, 0x06, 0x7c, 0x00,
08470 1E3E                        00            .byte	0
08471 1E3F                        00            .byte	0
08472 1E40                        3C            .byte	$3C
08473 1E41                        66            .byte	$66
08474 1E42                        C2            .byte	$C2
08475 1E43                        C0            .byte	$C0
08476 1E44                        C0            .byte	$C0
08477 1E45                        C2            .byte	$C2
08478 1E46                        66            .byte	$66
08479 1E47                        3C            .byte	$3C
08480 1E48                        0C            .byte	$C
08481 1E49                        06            .byte	6
08482 1E4A                        7C            .byte	$7C
08483 1E4B                        00            .byte	0
08484                                           ! 1094  0x00, 0x00, 0xcc, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08485 1E4C                        00            .byte	0
08486 1E4D                        00            .byte	0
08487 1E4E                        CC            .byte	$CC
08488 1E4F                        CC            .byte	$CC
08489 1E50                        00            .byte	0
08490 1E51                        CC            .byte	$CC
08491 1E52                        CC            .byte	$CC
08492 1E53                        CC            .byte	$CC
08493 1E54                        CC            .byte	$CC
08494 1E55                        CC            .byte	$CC
08495 1E56                        76            .byte	$76
08496 1E57                        00            .byte	0
08497 1E58                        00            .byte	0
08498 1E59                        00            .byte	0
08499                                           ! 1095  0x00, 0x0c, 0x18, 0x30, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08500 1E5A                        00            .byte	0
08501 1E5B                        0C            .byte	$C
08502 1E5C                        18            .byte	$18
08503 1E5D                        30            .byte	$30
08504 1E5E                        00            .byte	0
08505 1E5F                        7C            .byte	$7C
08506 1E60                        C6            .byte	$C6
08507 1E61                        FE            .byte	$FE
08508 1E62                        C0            .byte	$C0
08509 1E63                        C6            .byte	$C6
08510 1E64                        7C            .byte	$7C
08511 1E65                        00            .byte	0
08512 1E66                        00            .byte	0
08513 1E67                        00            .byte	0
08514                                           ! 1096  0x00, 0x10, 0x38, 0x6c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08515 1E68                        00            .byte	0
08516 1E69                        10            .byte	$10
08517 1E6A                        38            .byte	$38
08518 1E6B                        6C            .byte	$6C
08519 1E6C                        00            .byte	0
08520 1E6D                        78            .byte	$78
08521 1E6E                        0C            .byte	$C
08522 1E6F                        7C            .byte	$7C
08523 1E70                        CC            .byte	$CC
08524 1E71                        CC            .byte	$CC
08525 1E72                        76            .byte	$76
08526 1E73                        00            .byte	0
08527 1E74                        00            .byte	0
08528 1E75                        00            .byte	0
08529                                           ! 1097  0x00, 0x00, 0xcc, 0xcc, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08530 1E76                        00            .byte	0
08531 1E77                        00            .byte	0
08532 1E78                        CC            .byte	$CC
08533 1E79                        CC            .byte	$CC
08534 1E7A                        00            .byte	0
08535 1E7B                        78            .byte	$78
08536 1E7C                        0C            .byte	$C
08537 1E7D                        7C            .byte	$7C
08538 1E7E                        CC            .byte	$CC
08539 1E7F                        CC            .byte	$CC
08540 1E80                        76            .byte	$76
08541 1E81                        00            .byte	0
08542 1E82                        00            .byte	0
08543 1E83                        00            .byte	0
08544                                           ! 1098  0x00, 0x60, 0x30, 0x18, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08545 1E84                        00            .byte	0
08546 1E85                        60            .byte	$60
08547 1E86                        30            .byte	$30
08548 1E87                        18            .byte	$18
08549 1E88                        00            .byte	0
08550 1E89                        78            .byte	$78
08551 1E8A                        0C            .byte	$C
08552 1E8B                        7C            .byte	$7C
08553 1E8C                        CC            .byte	$CC
08554 1E8D                        CC            .byte	$CC
08555 1E8E                        76            .byte	$76
08556 1E8F                        00            .byte	0
08557 1E90                        00            .byte	0
08558 1E91                        00            .byte	0
08559                                           ! 1099  0x00, 0x38, 0x6c, 0x38, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08560 1E92                        00            .byte	0
08561 1E93                        38            .byte	$38
08562 1E94                        6C            .byte	$6C
08563 1E95                        38            .byte	$38
08564 1E96                        00            .byte	0
08565 1E97                        78            .byte	$78
08566 1E98                        0C            .byte	$C
08567 1E99                        7C            .byte	$7C
08568 1E9A                        CC            .byte	$CC
08569 1E9B                        CC            .byte	$CC
08570 1E9C                        76            .byte	$76
08571 1E9D                        00            .byte	0
08572 1E9E                        00            .byte	0
08573 1E9F                        00            .byte	0
08574                                           ! 1100  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x60, 0x66, 0x3c, 0x0c, 0x06, 0x3c, 0x00, 0x00,
08575 1EA0                        00            .byte	0
08576 1EA1                        00            .byte	0
08577 1EA2                        00            .byte	0
08578 1EA3                        00            .byte	0
08579 1EA4                        3C            .byte	$3C
08580 1EA5                        66            .byte	$66
08581 1EA6                        60            .byte	$60
08582 1EA7                        66            .byte	$66
08583 1EA8                        3C            .byte	$3C
08584 1EA9                        0C            .byte	$C
08585 1EAA                        06            .byte	6
08586 1EAB                        3C            .byte	$3C
08587 1EAC                        00            .byte	0
08588 1EAD                        00            .byte	0
08589                                           ! 1101  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08590 1EAE                        00            .byte	0
08591 1EAF                        10            .byte	$10
08592 1EB0                        38            .byte	$38
08593 1EB1                        6C            .byte	$6C
08594 1EB2                        00            .byte	0
08595 1EB3                        7C            .byte	$7C
08596 1EB4                        C6            .byte	$C6
08597 1EB5                        FE            .byte	$FE
08598 1EB6                        C0            .byte	$C0
08599 1EB7                        C6            .byte	$C6
08600 1EB8                        7C            .byte	$7C
08601 1EB9                        00            .byte	0
08602 1EBA                        00            .byte	0
08603 1EBB                        00            .byte	0
08604                                           ! 1102  0x00, 0x00, 0xcc, 0xcc, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08605 1EBC                        00            .byte	0
08606 1EBD                        00            .byte	0
08607 1EBE                        CC            .byte	$CC
08608 1EBF                        CC            .byte	$CC
08609 1EC0                        00            .byte	0
08610 1EC1                        7C            .byte	$7C
08611 1EC2                        C6            .byte	$C6
08612 1EC3                        FE            .byte	$FE
08613 1EC4                        C0            .byte	$C0
08614 1EC5                        C6            .byte	$C6
08615 1EC6                        7C            .byte	$7C
08616 1EC7                        00            .byte	0
08617 1EC8                        00            .byte	0
08618 1EC9                        00            .byte	0
08619                                           ! 1103  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08620 1ECA                        00            .byte	0
08621 1ECB                        60            .byte	$60
08622 1ECC                        30            .byte	$30
08623 1ECD                        18            .byte	$18
08624 1ECE                        00            .byte	0
08625 1ECF                        7C            .byte	$7C
08626 1ED0                        C6            .byte	$C6
08627 1ED1                        FE            .byte	$FE
08628 1ED2                        C0            .byte	$C0
08629 1ED3                        C6            .byte	$C6
08630 1ED4                        7C            .byte	$7C
08631 1ED5                        00            .byte	0
08632 1ED6                        00            .byte	0
08633 1ED7                        00            .byte	0
08634                                           ! 1104  0x00, 0x00, 0x66, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08635 1ED8                        00            .byte	0
08636 1ED9                        00            .byte	0
08637 1EDA                        66            .byte	$66
08638 1EDB                        66            .byte	$66
08639 1EDC                        00            .byte	0
08640 1EDD                        38            .byte	$38
08641 1EDE                        18            .byte	$18
08642 1EDF                        18            .byte	$18
08643 1EE0                        18            .byte	$18
08644 1EE1                        18            .byte	$18
08645 1EE2                        3C            .byte	$3C
08646 1EE3                        00            .byte	0
08647 1EE4                        00            .byte	0
08648 1EE5                        00            .byte	0
08649                                           ! 1105  0x00, 0x18, 0x3c, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08650 1EE6                        00            .byte	0
08651 1EE7                        18            .byte	$18
08652 1EE8                        3C            .byte	$3C
08653 1EE9                        66            .byte	$66
08654 1EEA                        00            .byte	0
08655 1EEB                        38            .byte	$38
08656 1EEC                        18            .byte	$18
08657 1EED                        18            .byte	$18
08658 1EEE                        18            .byte	$18
08659 1EEF                        18            .byte	$18
08660 1EF0                        3C            .byte	$3C
08661 1EF1                        00            .byte	0
08662 1EF2                        00            .byte	0
08663 1EF3                        00            .byte	0
08664                                           ! 1106  0x00, 0x60, 0x30, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08665 1EF4                        00            .byte	0
08666 1EF5                        60            .byte	$60
08667 1EF6                        30            .byte	$30
08668 1EF7                        18            .byte	$18
08669 1EF8                        00            .byte	0
08670 1EF9                        38            .byte	$38
08671 1EFA                        18            .byte	$18
08672 1EFB                        18            .byte	$18
08673 1EFC                        18            .byte	$18
08674 1EFD                        18            .byte	$18
08675 1EFE                        3C            .byte	$3C
08676 1EFF                        00            .byte	0
08677 1F00                        00            .byte	0
08678 1F01                        00            .byte	0
08679                                           ! 1107  0x00, 0xc6, 0xc6, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08680 1F02                        00            .byte	0
08681 1F03                        C6            .byte	$C6
08682 1F04                        C6            .byte	$C6
08683 1F05                        10            .byte	$10
08684 1F06                        38            .byte	$38
08685 1F07                        6C            .byte	$6C
08686 1F08                        C6            .byte	$C6
08687 1F09                        C6            .byte	$C6
08688 1F0A                        FE            .byte	$FE
08689 1F0B                        C6            .byte	$C6
08690 1F0C                        C6            .byte	$C6
08691 1F0D                        00            .byte	0
08692 1F0E                        00            .byte	0
08693 1F0F                        00            .byte	0
08694                                           ! 1108  0x38, 0x6c, 0x38, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08695 1F10                        38            .byte	$38
08696 1F11                        6C            .byte	$6C
08697 1F12                        38            .byte	$38
08698 1F13                        00            .byte	0
08699 1F14                        38            .byte	$38
08700 1F15                        6C            .byte	$6C
08701 1F16                        C6            .byte	$C6
08702 1F17                        C6            .byte	$C6
08703 1F18                        FE            .byte	$FE
08704 1F19                        C6            .byte	$C6
08705 1F1A                        C6            .byte	$C6
08706 1F1B                        00            .byte	0
08707 1F1C                        00            .byte	0
08708 1F1D                        00            .byte	0
08709                                           ! 1109  0x18, 0x30, 0x60, 0x00, 0xfe, 0x66, 0x60, 0x7c, 0x60, 0x66, 0xfe, 0x00, 0x00, 0x00,
08710 1F1E                        18            .byte	$18
08711 1F1F                        30            .byte	$30
08712 1F20                        60            .byte	$60
08713 1F21                        00            .byte	0
08714 1F22                        FE            .byte	$FE
08715 1F23                        66            .byte	$66
08716 1F24                        60            .byte	$60
08717 1F25                        7C            .byte	$7C
08718 1F26                        60            .byte	$60
08719 1F27                        66            .byte	$66
08720 1F28                        FE            .byte	$FE
08721 1F29                        00            .byte	0
08722 1F2A                        00            .byte	0
08723 1F2B                        00            .byte	0
08724                                           ! 1110  0x00, 0x00, 0x00, 0x00, 0xcc, 0x76, 0x36, 0x7e, 0xd8, 0xd8, 0x6e, 0x00, 0x00, 0x00,
08725 1F2C                        00            .byte	0
08726 1F2D                        00            .byte	0
08727 1F2E                        00            .byte	0
08728 1F2F                        00            .byte	0
08729 1F30                        CC            .byte	$CC
08730 1F31                        76            .byte	$76
08731 1F32                        36            .byte	$36
08732 1F33                        7E            .byte	$7E
08733 1F34                        D8            .byte	$D8
08734 1F35                        D8            .byte	$D8
08735 1F36                        6E            .byte	$6E
08736 1F37                        00            .byte	0
08737 1F38                        00            .byte	0
08738 1F39                        00            .byte	0
08739                                           ! 1111  0x00, 0x00, 0x3e, 0x6c, 0xcc, 0xcc, 0xfe, 0xcc, 0xcc, 0xcc, 0xce, 0x00, 0x00, 0x00,
08740 1F3A                        00            .byte	0
08741 1F3B                        00            .byte	0
08742 1F3C                        3E            .byte	$3E
08743 1F3D                        6C            .byte	$6C
08744 1F3E                        CC            .byte	$CC
08745 1F3F                        CC            .byte	$CC
08746 1F40                        FE            .byte	$FE
08747 1F41                        CC            .byte	$CC
08748 1F42                        CC            .byte	$CC
08749 1F43                        CC            .byte	$CC
08750 1F44                        CE            .byte	$CE
08751 1F45                        00            .byte	0
08752 1F46                        00            .byte	0
08753 1F47                        00            .byte	0
08754                                           ! 1112  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08755 1F48                        00            .byte	0
08756 1F49                        10            .byte	$10
08757 1F4A                        38            .byte	$38
08758 1F4B                        6C            .byte	$6C
08759 1F4C                        00            .byte	0
08760 1F4D                        7C            .byte	$7C
08761 1F4E                        C6            .byte	$C6
08762 1F4F                        C6            .byte	$C6
08763 1F50                        C6            .byte	$C6
08764 1F51                        C6            .byte	$C6
08765 1F52                        7C            .byte	$7C
08766 1F53                        00            .byte	0
08767 1F54                        00            .byte	0
08768 1F55                        00            .byte	0
08769                                           ! 1113  0x00, 0x00, 0xc6, 0xc6, 0x00, 0x7c, 0xc6, 0xc6, 0xc
08770 1F56                        00            .byte	0
08771 1F57                        00            .byte	0
08772 1F58                        C6            .byte	$C6
08773 1F59                        C6            .byte	$C6
08774 1F5A                        00            .byte	0
08775 1F5B                        7C            .byte	$7C
08776 1F5C                        C6            .byte	$C6
08777 1F5D                        C6            .byte	$C6
08778                                           ! 1113 6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08779 1F5E                        C6            .byte	$C6
08780 1F5F                        C6            .byte	$C6
08781 1F60                        7C            .byte	$7C
08782 1F61                        00            .byte	0
08783 1F62                        00            .byte	0
08784 1F63                        00            .byte	0
08785                                           ! 1114  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08786 1F64                        00            .byte	0
08787 1F65                        60            .byte	$60
08788 1F66                        30            .byte	$30
08789 1F67                        18            .byte	$18
08790 1F68                        00            .byte	0
08791 1F69                        7C            .byte	$7C
08792 1F6A                        C6            .byte	$C6
08793 1F6B                        C6            .byte	$C6
08794 1F6C                        C6            .byte	$C6
08795 1F6D                        C6            .byte	$C6
08796 1F6E                        7C            .byte	$7C
08797 1F6F                        00            .byte	0
08798 1F70                        00            .byte	0
08799 1F71                        00            .byte	0
08800                                           ! 1115  0x00, 0x30, 0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08801 1F72                        00            .byte	0
08802 1F73                        30            .byte	$30
08803 1F74                        78            .byte	$78
08804 1F75                        CC            .byte	$CC
08805 1F76                        00            .byte	0
08806 1F77                        CC            .byte	$CC
08807 1F78                        CC            .byte	$CC
08808 1F79                        CC            .byte	$CC
08809 1F7A                        CC            .byte	$CC
08810 1F7B                        CC            .byte	$CC
08811 1F7C                        76            .byte	$76
08812 1F7D                        00            .byte	0
08813 1F7E                        00            .byte	0
08814 1F7F                        00            .byte	0
08815                                           ! 1116  0x00, 0x60, 0x30, 0x18, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08816 1F80                        00            .byte	0
08817 1F81                        60            .byte	$60
08818 1F82                        30            .byte	$30
08819 1F83                        18            .byte	$18
08820 1F84                        00            .byte	0
08821 1F85                        CC            .byte	$CC
08822 1F86                        CC            .byte	$CC
08823 1F87                        CC            .byte	$CC
08824 1F88                        CC            .byte	$CC
08825 1F89                        CC            .byte	$CC
08826 1F8A                        76            .byte	$76
08827 1F8B                        00            .byte	0
08828 1F8C                        00            .byte	0
08829 1F8D                        00            .byte	0
08830                                           ! 1117  0x00, 0x00, 0xc6, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0x78, 0x00,
08831 1F8E                        00            .byte	0
08832 1F8F                        00            .byte	0
08833 1F90                        C6            .byte	$C6
08834 1F91                        C6            .byte	$C6
08835 1F92                        00            .byte	0
08836 1F93                        C6            .byte	$C6
08837 1F94                        C6            .byte	$C6
08838 1F95                        C6            .byte	$C6
08839 1F96                        C6            .byte	$C6
08840 1F97                        7E            .byte	$7E
08841 1F98                        06            .byte	6
08842 1F99                        0C            .byte	$C
08843 1F9A                        78            .byte	$78
08844 1F9B                        00            .byte	0
08845                                           ! 1118  0x00, 0xc6, 0xc6, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
08846 1F9C                        00            .byte	0
08847 1F9D                        C6            .byte	$C6
08848 1F9E                        C6            .byte	$C6
08849 1F9F                        38            .byte	$38
08850 1FA0                        6C            .byte	$6C
08851 1FA1                        C6            .byte	$C6
08852 1FA2                        C6            .byte	$C6
08853 1FA3                        C6            .byte	$C6
08854 1FA4                        C6            .byte	$C6
08855 1FA5                        6C            .byte	$6C
08856 1FA6                        38            .byte	$38
08857 1FA7                        00            .byte	0
08858 1FA8                        00            .byte	0
08859 1FA9                        00            .byte	0
08860                                           ! 1119  0x00, 0xc6, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08861 1FAA                        00            .byte	0
08862 1FAB                        C6            .byte	$C6
08863 1FAC                        C6            .byte	$C6
08864 1FAD                        00            .byte	0
08865 1FAE                        C6            .byte	$C6
08866 1FAF                        C6            .byte	$C6
08867 1FB0                        C6            .byte	$C6
08868 1FB1                        C6            .byte	$C6
08869 1FB2                        C6            .byte	$C6
08870 1FB3                        C6            .byte	$C6
08871 1FB4                        7C            .byte	$7C
08872 1FB5                        00            .byte	0
08873 1FB6                        00            .byte	0
08874 1FB7                        00            .byte	0
08875                                           ! 1120  0x00, 0x18, 0x18, 0x3c, 0x66, 0x60, 0x60, 0x66, 0x3c, 0x18, 0x18, 0x00, 0x00, 0x00,
08876 1FB8                        00            .byte	0
08877 1FB9                        18            .byte	$18
08878 1FBA                        18            .byte	$18
08879 1FBB                        3C            .byte	$3C
08880 1FBC                        66            .byte	$66
08881 1FBD                        60            .byte	$60
08882 1FBE                        60            .byte	$60
08883 1FBF                        66            .byte	$66
08884 1FC0                        3C            .byte	$3C
08885 1FC1                        18            .byte	$18
08886 1FC2                        18            .byte	$18
08887 1FC3                        00            .byte	0
08888 1FC4                        00            .byte	0
08889 1FC5                        00            .byte	0
08890                                           ! 1121  0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0xe6, 0xfc, 0x00, 0x00, 0x00,
08891 1FC6                        00            .byte	0
08892 1FC7                        38            .byte	$38
08893 1FC8                        6C            .byte	$6C
08894 1FC9                        64            .byte	$64
08895 1FCA                        60            .byte	$60
08896 1FCB                        F0            .byte	$F0
08897 1FCC                        60            .byte	$60
08898 1FCD                        60            .byte	$60
08899 1FCE                        60            .byte	$60
08900 1FCF                        E6            .byte	$E6
08901 1FD0                        FC            .byte	$FC
08902 1FD1                        00            .byte	0
08903 1FD2                        00            .byte	0
08904 1FD3                        00            .byte	0
08905                                           ! 1122  0x00, 0x00, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00,
08906 1FD4                        00            .byte	0
08907 1FD5                        00            .byte	0
08908 1FD6                        66            .byte	$66
08909 1FD7                        66            .byte	$66
08910 1FD8                        3C            .byte	$3C
08911 1FD9                        18            .byte	$18
08912 1FDA                        7E            .byte	$7E
08913 1FDB                        18            .byte	$18
08914 1FDC                        7E            .byte	$7E
08915 1FDD                        18            .byte	$18
08916 1FDE                        18            .byte	$18
08917 1FDF                        00            .byte	0
08918 1FE0                        00            .byte	0
08919 1FE1                        00            .byte	0
08920                                           ! 1123  0x00, 0xf8, 0xcc, 0xcc, 0xf8, 0xc4, 0xcc, 0xde, 0xcc, 0xcc, 0xc6, 0x00, 0x00, 0x00,
08921 1FE2                        00            .byte	0
08922 1FE3                        F8            .byte	$F8
08923 1FE4                        CC            .byte	$CC
08924 1FE5                        CC            .byte	$CC
08925 1FE6                        F8            .byte	$F8
08926 1FE7                        C4            .byte	$C4
08927 1FE8                        CC            .byte	$CC
08928 1FE9                        DE            .byte	$DE
08929 1FEA                        CC            .byte	$CC
08930 1FEB                        CC            .byte	$CC
08931 1FEC                        C6            .byte	$C6
08932 1FED                        00            .byte	0
08933 1FEE                        00            .byte	0
08934 1FEF                        00            .byte	0
08935                                           ! 1124  0x00, 0x0e, 0x1b, 0x18, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x18, 0x18, 0xd8, 0x70, 0x00,
08936 1FF0                        00            .byte	0
08937 1FF1                        0E            .byte	$E
08938 1FF2                        1B            .byte	$1B
08939 1FF3                        18            .byte	$18
08940 1FF4                        18            .byte	$18
08941 1FF5                        18            .byte	$18
08942 1FF6                        7E            .byte	$7E
08943 1FF7                        18            .byte	$18
08944 1FF8                        18            .byte	$18
08945 1FF9                        18            .byte	$18
08946 1FFA                        18            .byte	$18
08947 1FFB                        D8            .byte	$D8
08948 1FFC                        70            .byte	$70
08949 1FFD                        00            .byte	0
08950                                           ! 1125  0x00, 0x18, 0x30, 0x60, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08951 1FFE                        00            .byte	0
08952 1FFF                        18            .byte	$18
08953 2000                        30            .byte	$30
08954 2001                        60            .byte	$60
08955 2002                        00            .byte	0
08956 2003                        78            .byte	$78
08957 2004                        0C            .byte	$C
08958 2005                        7C            .byte	$7C
08959 2006                        CC            .byte	$CC
08960 2007                        CC            .byte	$CC
08961 2008                        76            .byte	$76
08962 2009                        00            .byte	0
08963 200A                        00            .byte	0
08964 200B                        00            .byte	0
08965                                           ! 1126  0x00, 0x0c, 0x18, 0x30, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08966 200C                        00            .byte	0
08967 200D                        0C            .byte	$C
08968 200E                        18            .byte	$18
08969 200F                        30            .byte	$30
08970 2010                        00            .byte	0
08971 2011                        38            .byte	$38
08972 2012                        18            .byte	$18
08973 2013                        18            .byte	$18
08974 2014                        18            .byte	$18
08975 2015                        18            .byte	$18
08976 2016                        3C            .byte	$3C
08977 2017                        00            .byte	0
08978 2018                        00            .byte	0
08979 2019                        00            .byte	0
08980                                           ! 1127  0x00, 0x18, 0x30, 0x60, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08981 201A                        00            .byte	0
08982 201B                        18            .byte	$18
08983 201C                        30            .byte	$30
08984 201D                        60            .byte	$60
08985 201E                        00            .byte	0
08986 201F                        7C            .byte	$7C
08987 2020                        C6            .byte	$C6
08988 2021                        C6            .byte	$C6
08989 2022                        C6            .byte	$C6
08990 2023                        C6            .byte	$C6
08991 2024                        7C            .byte	$7C
08992 2025                        00            .byte	0
08993 2026                        00            .byte	0
08994 2027                        00            .byte	0
08995                                           ! 1128  0x00, 0x18, 0x30, 0x60, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08996 2028                        00            .byte	0
08997 2029                        18            .byte	$18
08998 202A                        30            .byte	$30
08999 202B                        60            .byte	$60
09000 202C                        00            .byte	0
09001 202D                        CC            .byte	$CC
09002 202E                        CC            .byte	$CC
09003 202F                        CC            .byte	$CC
09004 2030                        CC            .byte	$CC
09005 2031                        CC            .byte	$CC
09006 2032                        76            .byte	$76
09007 2033                        00            .byte	0
09008 2034                        00            .byte	0
09009 2035                        00            .byte	0
09010                                           ! 1129  0x00, 0x00, 0x76, 0xdc, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00,
09011 2036                        00            .byte	0
09012 2037                        00            .byte	0
09013 2038                        76            .byte	$76
09014 2039                        DC            .byte	$DC
09015 203A                        00            .byte	0
09016 203B                        DC            .byte	$DC
09017 203C                        66            .byte	$66
09018 203D                        66            .byte	$66
09019 203E                        66            .byte	$66
09020 203F                        66            .byte	$66
09021 2040                        66            .byte	$66
09022 2041                        00            .byte	0
09023 2042                        00            .byte	0
09024 2043                        00            .byte	0
09025                                           ! 1130  0x76, 0xdc, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0x00, 0x00, 0x00,
09026 2044                        76            .byte	$76
09027 2045                        DC            .byte	$DC
09028 2046                        00            .byte	0
09029 2047                        C6            .byte	$C6
09030 2048                        E6            .byte	$E6
09031 2049                        F6            .byte	$F6
09032 204A                        FE            .byte	$FE
09033 204B                        DE            .byte	$DE
09034 204C                        CE            .byte	$CE
09035 204D                        C6            .byte	$C6
09036 204E                        C6            .byte	$C6
09037 204F                        00            .byte	0
09038 2050                        00            .byte	0
09039 2051                        00            .byte	0
09040                                           ! 1131  0x00, 0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09041 2052                        00            .byte	0
09042 2053                        3C            .byte	$3C
09043 2054                        6C            .byte	$6C
09044 2055                        6C            .byte	$6C
09045 2056                        3E            .byte	$3E
09046 2057                        00            .byte	0
09047 2058                        7E            .byte	$7E
09048 2059                        00            .byte	0
09049 205A                        00            .byte	0
09050 205B                        00            .byte	0
09051 205C                        00            .byte	0
09052 205D                        00            .byte	0
09053 205E                        00            .byte	0
09054 205F                        00            .byte	0
09055                                           ! 1132  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09056 2060                        00            .byte	0
09057 2061                        38            .byte	$38
09058 2062                        6C            .byte	$6C
09059 2063                        6C            .byte	$6C
09060 2064                        38            .byte	$38
09061 2065                        00            .byte	0
09062 2066                        7C            .byte	$7C
09063 2067                        00            .byte	0
09064 2068                        00            .byte	0
09065 2069                        00            .byte	0
09066 206A                        00            .byte	0
09067 206B                        00            .byte	0
09068 206C                        00            .byte	0
09069 206D                        00            .byte	0
09070                                           ! 1133  0x00, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x60, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09071 206E                        00            .byte	0
09072 206F                        00            .byte	0
09073 2070                        30            .byte	$30
09074 2071                        30            .byte	$30
09075 2072                        00            .byte	0
09076 2073                        30            .byte	$30
09077 2074                        30            .byte	$30
09078 2075                        60            .byte	$60
09079 2076                        C6            .byte	$C6
09080 2077                        C6            .byte	$C6
09081 2078                        7C            .byte	$7C
09082 2079                        00            .byte	0
09083 207A                        00            .byte	0
09084 207B                        00            .byte	0
09085                                           ! 1134  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00,
09086 207C                        00            .byte	0
09087 207D                        00            .byte	0
09088 207E                        00            .byte	0
09089 207F                        00            .byte	0
09090 2080                        00            .byte	0
09091 2081                        00            .byte	0
09092 2082                        FE            .byte	$FE
09093 2083                        C0            .byte	$C0
09094 2084                        C0            .byte	$C0
09095 2085                        C0            .byte	$C0
09096 2086                        00            .byte	0
09097 2087                        00            .byte	0
09098 2088                        00            .byte	0
09099 2089                        00            .byte	0
09100                                           ! 1135  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00,
09101 208A                        00            .byte	0
09102 208B                        00            .byte	0
09103 208C                        00            .byte	0
09104 208D                        00            .byte	0
09105 208E                        00            .byte	0
09106 208F                        00            .byte	0
09107 2090                        FE            .byte	$FE
09108 2091                        06            .byte	6
09109 2092                        06            .byte	6
09110 2093                        06            .byte	6
09111 2094                        00            .byte	0
09112 2095                        00            .byte	0
09113 2096                        00            .byte	0
09114 2097                        00            .byte	0
09115                                           ! 1136  0x00, 0xc0, 0xc0, 0xc6, 0xcc, 0xd8, 0x30, 0x60, 0xdc, 0x86, 0x0c, 0x18, 0x3e, 0x00,
09116 2098                        00            .byte	0
09117 2099                        C0            .byte	$C0
09118 209A                        C0            .byte	$C0
09119 209B                        C6            .byte	$C6
09120 209C                        CC            .byte	$CC
09121 209D                        D8            .byte	$D8
09122 209E                        30            .byte	$30
09123 209F                        60            .byte	$60
09124 20A0                        DC            .byte	$DC
09125 20A1                        86            .byte	$86
09126 20A2                        0C            .byte	$C
09127 20A3                        18            .byte	$18
09128 20A4                        3E            .byte	$3E
09129 20A5                        00            .byte	0
09130                                           ! 1137  0x00, 0xc0, 0xc0, 0xc6, 0xcc, 0xd8, 0x30, 0x66, 0xce, 0x9e,
09131 20A6                        00            .byte	0
09132 20A7                        C0            .byte	$C0
09133 20A8                        C0            .byte	$C0
09134 20A9                        C6            .byte	$C6
09135 20AA                        CC            .byte	$CC
09136 20AB                        D8            .byte	$D8
09137 20AC                        30            .byte	$30
09138 20AD                        66            .byte	$66
09139 20AE                        CE            .byte	$CE
09140                                           ! 1137  0x3e, 0x06, 0x06, 0x00,
09141 20AF                        9E            .byte	$9E
09142 20B0                        3E            .byte	$3E
09143 20B1                        06            .byte	6
09144 20B2                        06            .byte	6
09145 20B3                        00            .byte	0
09146                                           ! 1138  0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00,
09147 20B4                        00            .byte	0
09148 20B5                        00            .byte	0
09149 20B6                        18            .byte	$18
09150 20B7                        18            .byte	$18
09151 20B8                        00            .byte	0
09152 20B9                        18            .byte	$18
09153 20BA                        18            .byte	$18
09154 20BB                        3C            .byte	$3C
09155 20BC                        3C            .byte	$3C
09156 20BD                        3C            .byte	$3C
09157 20BE                        18            .byte	$18
09158 20BF                        00            .byte	0
09159 20C0                        00            .byte	0
09160 20C1                        00            .byte	0
09161                                           ! 1139  0x00, 0x00, 0x00, 0x00, 0x36, 0x6c, 0xd8, 0x6c, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00,
09162 20C2                        00            .byte	0
09163 20C3                        00            .byte	0
09164 20C4                        00            .byte	0
09165 20C5                        00            .byte	0
09166 20C6                        36            .byte	$36
09167 20C7                        6C            .byte	$6C
09168 20C8                        D8            .byte	$D8
09169 20C9                        6C            .byte	$6C
09170 20CA                        36            .byte	$36
09171 20CB                        00            .byte	0
09172 20CC                        00            .byte	0
09173 20CD                        00            .byte	0
09174 20CE                        00            .byte	0
09175 20CF                        00            .byte	0
09176                                           ! 1140  0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c, 0x36, 0x6c, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00,
09177 20D0                        00            .byte	0
09178 20D1                        00            .byte	0
09179 20D2                        00            .byte	0
09180 20D3                        00            .byte	0
09181 20D4                        D8            .byte	$D8
09182 20D5                        6C            .byte	$6C
09183 20D6                        36            .byte	$36
09184 20D7                        6C            .byte	$6C
09185 20D8                        D8            .byte	$D8
09186 20D9                        00            .byte	0
09187 20DA                        00            .byte	0
09188 20DB                        00            .byte	0
09189 20DC                        00            .byte	0
09190 20DD                        00            .byte	0
09191                                           ! 1141  0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44,
09192 20DE                        11            .byte	$11
09193 20DF                        44            .byte	$44
09194 20E0                        11            .byte	$11
09195 20E1                        44            .byte	$44
09196 20E2                        11            .byte	$11
09197 20E3                        44            .byte	$44
09198 20E4                        11            .byte	$11
09199 20E5                        44            .byte	$44
09200 20E6                        11            .byte	$11
09201 20E7                        44            .byte	$44
09202 20E8                        11            .byte	$11
09203 20E9                        44            .byte	$44
09204 20EA                        11            .byte	$11
09205 20EB                        44            .byte	$44
09206                                           ! 1142  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
09207 20EC                        55            .byte	$55
09208 20ED                        AA            .byte	$AA
09209 20EE                        55            .byte	$55
09210 20EF                        AA            .byte	$AA
09211 20F0                        55            .byte	$55
09212 20F1                        AA            .byte	$AA
09213 20F2                        55            .byte	$55
09214 20F3                        AA            .byte	$AA
09215 20F4                        55            .byte	$55
09216 20F5                        AA            .byte	$AA
09217 20F6                        55            .byte	$55
09218 20F7                        AA            .byte	$AA
09219 20F8                        55            .byte	$55
09220 20F9                        AA            .byte	$AA
09221                                           ! 1143  0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77,
09222 20FA                        DD            .byte	$DD
09223 20FB                        77            .byte	$77
09224 20FC                        DD            .byte	$DD
09225 20FD                        77            .byte	$77
09226 20FE                        DD            .byte	$DD
09227 20FF                        77            .byte	$77
09228 2100                        DD            .byte	$DD
09229 2101                        77            .byte	$77
09230 2102                        DD            .byte	$DD
09231 2103                        77            .byte	$77
09232 2104                        DD            .byte	$DD
09233 2105                        77            .byte	$77
09234 2106                        DD            .byte	$DD
09235 2107                        77            .byte	$77
09236                                           ! 1144  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09237 2108                        18            .byte	$18
09238 2109                        18            .byte	$18
09239 210A                        18            .byte	$18
09240 210B                        18            .byte	$18
09241 210C                        18            .byte	$18
09242 210D                        18            .byte	$18
09243 210E                        18            .byte	$18
09244 210F                        18            .byte	$18
09245 2110                        18            .byte	$18
09246 2111                        18            .byte	$18
09247 2112                        18            .byte	$18
09248 2113                        18            .byte	$18
09249 2114                        18            .byte	$18
09250 2115                        18            .byte	$18
09251                                           ! 1145  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09252 2116                        18            .byte	$18
09253 2117                        18            .byte	$18
09254 2118                        18            .byte	$18
09255 2119                        18            .byte	$18
09256 211A                        18            .byte	$18
09257 211B                        18            .byte	$18
09258 211C                        18            .byte	$18
09259 211D                        F8            .byte	$F8
09260 211E                        18            .byte	$18
09261 211F                        18            .byte	$18
09262 2120                        18            .byte	$18
09263 2121                        18            .byte	$18
09264 2122                        18            .byte	$18
09265 2123                        18            .byte	$18
09266                                           ! 1146  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09267 2124                        18            .byte	$18
09268 2125                        18            .byte	$18
09269 2126                        18            .byte	$18
09270 2127                        18            .byte	$18
09271 2128                        18            .byte	$18
09272 2129                        F8            .byte	$F8
09273 212A                        18            .byte	$18
09274 212B                        F8            .byte	$F8
09275 212C                        18            .byte	$18
09276 212D                        18            .byte	$18
09277 212E                        18            .byte	$18
09278 212F                        18            .byte	$18
09279 2130                        18            .byte	$18
09280 2131                        18            .byte	$18
09281                                           ! 1147  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09282 2132                        36            .byte	$36
09283 2133                        36            .byte	$36
09284 2134                        36            .byte	$36
09285 2135                        36            .byte	$36
09286 2136                        36            .byte	$36
09287 2137                        36            .byte	$36
09288 2138                        36            .byte	$36
09289 2139                        F6            .byte	$F6
09290 213A                        36            .byte	$36
09291 213B                        36            .byte	$36
09292 213C                        36            .byte	$36
09293 213D                        36            .byte	$36
09294 213E                        36            .byte	$36
09295 213F                        36            .byte	$36
09296                                           ! 1148  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09297 2140                        00            .byte	0
09298 2141                        00            .byte	0
09299 2142                        00            .byte	0
09300 2143                        00            .byte	0
09301 2144                        00            .byte	0
09302 2145                        00            .byte	0
09303 2146                        00            .byte	0
09304 2147                        FE            .byte	$FE
09305 2148                        36            .byte	$36
09306 2149                        36            .byte	$36
09307 214A                        36            .byte	$36
09308 214B                        36            .byte	$36
09309 214C                        36            .byte	$36
09310 214D                        36            .byte	$36
09311                                           ! 1149  0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09312 214E                        00            .byte	0
09313 214F                        00            .byte	0
09314 2150                        00            .byte	0
09315 2151                        00            .byte	0
09316 2152                        00            .byte	0
09317 2153                        F8            .byte	$F8
09318 2154                        18            .byte	$18
09319 2155                        F8            .byte	$F8
09320 2156                        18            .byte	$18
09321 2157                        18            .byte	$18
09322 2158                        18            .byte	$18
09323 2159                        18            .byte	$18
09324 215A                        18            .byte	$18
09325 215B                        18            .byte	$18
09326                                           ! 1150  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09327 215C                        36            .byte	$36
09328 215D                        36            .byte	$36
09329 215E                        36            .byte	$36
09330 215F                        36            .byte	$36
09331 2160                        36            .byte	$36
09332 2161                        F6            .byte	$F6
09333 2162                        06            .byte	6
09334 2163                        F6            .byte	$F6
09335 2164                        36            .byte	$36
09336 2165                        36            .byte	$36
09337 2166                        36            .byte	$36
09338 2167                        36            .byte	$36
09339 2168                        36            .byte	$36
09340 2169                        36            .byte	$36
09341                                           ! 1151  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09342 216A                        36            .byte	$36
09343 216B                        36            .byte	$36
09344 216C                        36            .byte	$36
09345 216D                        36            .byte	$36
09346 216E                        36            .byte	$36
09347 216F                        36            .byte	$36
09348 2170                        36            .byte	$36
09349 2171                        36            .byte	$36
09350 2172                        36            .byte	$36
09351 2173                        36            .byte	$36
09352 2174                        36            .byte	$36
09353 2175                        36            .byte	$36
09354 2176                        36            .byte	$36
09355 2177                        36            .byte	$36
09356                                           ! 1152  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09357 2178                        00            .byte	0
09358 2179                        00            .byte	0
09359 217A                        00            .byte	0
09360 217B                        00            .byte	0
09361 217C                        00            .byte	0
09362 217D                        FE            .byte	$FE
09363 217E                        06            .byte	6
09364 217F                        F6            .byte	$F6
09365 2180                        36            .byte	$36
09366 2181                        36            .byte	$36
09367 2182                        36            .byte	$36
09368 2183                        36            .byte	$36
09369 2184                        36            .byte	$36
09370 2185                        36            .byte	$36
09371                                           ! 1153  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09372 2186                        36            .byte	$36
09373 2187                        36            .byte	$36
09374 2188                        36            .byte	$36
09375 2189                        36            .byte	$36
09376 218A                        36            .byte	$36
09377 218B                        F6            .byte	$F6
09378 218C                        06            .byte	6
09379 218D                        FE            .byte	$FE
09380 218E                        00            .byte	0
09381 218F                        00            .byte	0
09382 2190                        00            .byte	0
09383 2191                        00            .byte	0
09384 2192                        00            .byte	0
09385 2193                        00            .byte	0
09386                                           ! 1154  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09387 2194                        36            .byte	$36
09388 2195                        36            .byte	$36
09389 2196                        36            .byte	$36
09390 2197                        36            .byte	$36
09391 2198                        36            .byte	$36
09392 2199                        36            .byte	$36
09393 219A                        36            .byte	$36
09394 219B                        FE            .byte	$FE
09395 219C                        00            .byte	0
09396 219D                        00            .byte	0
09397 219E                        00            .byte	0
09398 219F                        00            .byte	0
09399 21A0                        00            .byte	0
09400 21A1                        00            .byte	0
09401                                           ! 1155  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09402 21A2                        18            .byte	$18
09403 21A3                        18            .byte	$18
09404 21A4                        18            .byte	$18
09405 21A5                        18            .byte	$18
09406 21A6                        18            .byte	$18
09407 21A7                        F8            .byte	$F8
09408 21A8                        18            .byte	$18
09409 21A9                        F8            .byte	$F8
09410 21AA                        00            .byte	0
09411 21AB                        00            .byte	0
09412 21AC                        00            .byte	0
09413 21AD                        00            .byte	0
09414 21AE                        00            .byte	0
09415 21AF                        00            .byte	0
09416                                           ! 1156  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09417 21B0                        00            .byte	0
09418 21B1                        00            .byte	0
09419 21B2                        00            .byte	0
09420 21B3                        00            .byte	0
09421 21B4                        00            .byte	0
09422 21B5                        00            .byte	0
09423 21B6                        00            .byte	0
09424 21B7                        F8            .byte	$F8
09425 21B8                        18            .byte	$18
09426 21B9                        18            .byte	$18
09427 21BA                        18            .byte	$18
09428 21BB                        18            .byte	$18
09429 21BC                        18            .byte	$18
09430 21BD                        18            .byte	$18
09431                                           ! 1157  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09432 21BE                        18            .byte	$18
09433 21BF                        18            .byte	$18
09434 21C0                        18            .byte	$18
09435 21C1                        18            .byte	$18
09436 21C2                        18            .byte	$18
09437 21C3                        18            .byte	$18
09438 21C4                        18            .byte	$18
09439 21C5                        1F            .byte	$1F
09440 21C6                        00            .byte	0
09441 21C7                        00            .byte	0
09442 21C8                        00            .byte	0
09443 21C9                        00            .byte	0
09444 21CA                        00            .byte	0
09445 21CB                        00            .byte	0
09446                                           ! 1158  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09447 21CC                        18            .byte	$18
09448 21CD                        18            .byte	$18
09449 21CE                        18            .byte	$18
09450 21CF                        18            .byte	$18
09451 21D0                        18            .byte	$18
09452 21D1                        18            .byte	$18
09453 21D2                        18            .byte	$18
09454 21D3                        FF            .byte	$FF
09455 21D4                        00            .byte	0
09456 21D5                        00            .byte	0
09457 21D6                        00            .byte	0
09458 21D7                        00            .byte	0
09459 21D8                        00            .byte	0
09460 21D9                        00            .byte	0
09461                                           ! 1159  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09462 21DA                        00            .byte	0
09463 21DB                        00            .byte	0
09464 21DC                        00            .byte	0
09465 21DD                        00            .byte	0
09466 21DE                        00            .byte	0
09467 21DF                        00            .byte	0
09468 21E0                        00            .byte	0
09469 21E1                        FF            .byte	$FF
09470 21E2                        18            .byte	$18
09471 21E3                        18            .byte	$18
09472 21E4                        18            .byte	$18
09473 21E5                        18            .byte	$18
09474 21E6                        18            .byte	$18
09475 21E7                        18            .byte	$18
09476                                           ! 1160  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09477 21E8                        18            .byte	$18
09478 21E9                        18            .byte	$18
09479 21EA                        18            .byte	$18
09480 21EB                        18            .byte	$18
09481 21EC                        18            .byte	$18
09482 21ED                        18            .byte	$18
09483 21EE                        18            .byte	$18
09484 21EF                        1F            .byte	$1F
09485 21F0                        18            .byte	$18
09486 21F1                        18            .byte	$18
09487 21F2                        18            .byte	$18
09488 21F3                        18            .byte	$18
09489 21F4                        18            .byte	$18
09490 21F5                        18            .byte	$18
09491                                           ! 1161  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0
09492 21F6                        00            .byte	0
09493 21F7                        00            .byte	0
09494 21F8                        00            .byte	0
09495 21F9                        00            .byte	0
09496 21FA                        00            .byte	0
09497 21FB                        00            .byte	0
09498 21FC                        00            .byte	0
09499 21FD                        FF            .byte	$FF
09500 21FE                        00            .byte	0
09501 21FF                        00            .byte	0
09502 2200                        00            .byte	0
09503                                           ! 1161 x00, 0x00, 0x00,
09504 2201                        00            .byte	0
09505 2202                        00            .byte	0
09506 2203                        00            .byte	0
09507                                           ! 1162  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09508 2204                        18            .byte	$18
09509 2205                        18            .byte	$18
09510 2206                        18            .byte	$18
09511 2207                        18            .byte	$18
09512 2208                        18            .byte	$18
09513 2209                        18            .byte	$18
09514 220A                        18            .byte	$18
09515 220B                        FF            .byte	$FF
09516 220C                        18            .byte	$18
09517 220D                        18            .byte	$18
09518 220E                        18            .byte	$18
09519 220F                        18            .byte	$18
09520 2210                        18            .byte	$18
09521 2211                        18            .byte	$18
09522                                           ! 1163  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09523 2212                        18            .byte	$18
09524 2213                        18            .byte	$18
09525 2214                        18            .byte	$18
09526 2215                        18            .byte	$18
09527 2216                        18            .byte	$18
09528 2217                        1F            .byte	$1F
09529 2218                        18            .byte	$18
09530 2219                        1F            .byte	$1F
09531 221A                        18            .byte	$18
09532 221B                        18            .byte	$18
09533 221C                        18            .byte	$18
09534 221D                        18            .byte	$18
09535 221E                        18            .byte	$18
09536 221F                        18            .byte	$18
09537                                           ! 1164  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09538 2220                        36            .byte	$36
09539 2221                        36            .byte	$36
09540 2222                        36            .byte	$36
09541 2223                        36            .byte	$36
09542 2224                        36            .byte	$36
09543 2225                        36            .byte	$36
09544 2226                        36            .byte	$36
09545 2227                        37            .byte	$37
09546 2228                        36            .byte	$36
09547 2229                        36            .byte	$36
09548 222A                        36            .byte	$36
09549 222B                        36            .byte	$36
09550 222C                        36            .byte	$36
09551 222D                        36            .byte	$36
09552                                           ! 1165  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09553 222E                        36            .byte	$36
09554 222F                        36            .byte	$36
09555 2230                        36            .byte	$36
09556 2231                        36            .byte	$36
09557 2232                        36            .byte	$36
09558 2233                        37            .byte	$37
09559 2234                        30            .byte	$30
09560 2235                        3F            .byte	$3F
09561 2236                        00            .byte	0
09562 2237                        00            .byte	0
09563 2238                        00            .byte	0
09564 2239                        00            .byte	0
09565 223A                        00            .byte	0
09566 223B                        00            .byte	0
09567                                           ! 1166  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09568 223C                        00            .byte	0
09569 223D                        00            .byte	0
09570 223E                        00            .byte	0
09571 223F                        00            .byte	0
09572 2240                        00            .byte	0
09573 2241                        3F            .byte	$3F
09574 2242                        30            .byte	$30
09575 2243                        37            .byte	$37
09576 2244                        36            .byte	$36
09577 2245                        36            .byte	$36
09578 2246                        36            .byte	$36
09579 2247                        36            .byte	$36
09580 2248                        36            .byte	$36
09581 2249                        36            .byte	$36
09582                                           ! 1167  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09583 224A                        36            .byte	$36
09584 224B                        36            .byte	$36
09585 224C                        36            .byte	$36
09586 224D                        36            .byte	$36
09587 224E                        36            .byte	$36
09588 224F                        F7            .byte	$F7
09589 2250                        00            .byte	0
09590 2251                        FF            .byte	$FF
09591 2252                        00            .byte	0
09592 2253                        00            .byte	0
09593 2254                        00            .byte	0
09594 2255                        00            .byte	0
09595 2256                        00            .byte	0
09596 2257                        00            .byte	0
09597                                           ! 1168  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09598 2258                        00            .byte	0
09599 2259                        00            .byte	0
09600 225A                        00            .byte	0
09601 225B                        00            .byte	0
09602 225C                        00            .byte	0
09603 225D                        FF            .byte	$FF
09604 225E                        00            .byte	0
09605 225F                        F7            .byte	$F7
09606 2260                        36            .byte	$36
09607 2261                        36            .byte	$36
09608 2262                        36            .byte	$36
09609 2263                        36            .byte	$36
09610 2264                        36            .byte	$36
09611 2265                        36            .byte	$36
09612                                           ! 1169  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09613 2266                        36            .byte	$36
09614 2267                        36            .byte	$36
09615 2268                        36            .byte	$36
09616 2269                        36            .byte	$36
09617 226A                        36            .byte	$36
09618 226B                        37            .byte	$37
09619 226C                        30            .byte	$30
09620 226D                        37            .byte	$37
09621 226E                        36            .byte	$36
09622 226F                        36            .byte	$36
09623 2270                        36            .byte	$36
09624 2271                        36            .byte	$36
09625 2272                        36            .byte	$36
09626 2273                        36            .byte	$36
09627                                           ! 1170  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09628 2274                        00            .byte	0
09629 2275                        00            .byte	0
09630 2276                        00            .byte	0
09631 2277                        00            .byte	0
09632 2278                        00            .byte	0
09633 2279                        FF            .byte	$FF
09634 227A                        00            .byte	0
09635 227B                        FF            .byte	$FF
09636 227C                        00            .byte	0
09637 227D                        00            .byte	0
09638 227E                        00            .byte	0
09639 227F                        00            .byte	0
09640 2280                        00            .byte	0
09641 2281                        00            .byte	0
09642                                           ! 1171  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09643 2282                        36            .byte	$36
09644 2283                        36            .byte	$36
09645 2284                        36            .byte	$36
09646 2285                        36            .byte	$36
09647 2286                        36            .byte	$36
09648 2287                        F7            .byte	$F7
09649 2288                        00            .byte	0
09650 2289                        F7            .byte	$F7
09651 228A                        36            .byte	$36
09652 228B                        36            .byte	$36
09653 228C                        36            .byte	$36
09654 228D                        36            .byte	$36
09655 228E                        36            .byte	$36
09656 228F                        36            .byte	$36
09657                                           ! 1172  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09658 2290                        18            .byte	$18
09659 2291                        18            .byte	$18
09660 2292                        18            .byte	$18
09661 2293                        18            .byte	$18
09662 2294                        18            .byte	$18
09663 2295                        FF            .byte	$FF
09664 2296                        00            .byte	0
09665 2297                        FF            .byte	$FF
09666 2298                        00            .byte	0
09667 2299                        00            .byte	0
09668 229A                        00            .byte	0
09669 229B                        00            .byte	0
09670 229C                        00            .byte	0
09671 229D                        00            .byte	0
09672                                           ! 1173  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09673 229E                        36            .byte	$36
09674 229F                        36            .byte	$36
09675 22A0                        36            .byte	$36
09676 22A1                        36            .byte	$36
09677 22A2                        36            .byte	$36
09678 22A3                        36            .byte	$36
09679 22A4                        36            .byte	$36
09680 22A5                        FF            .byte	$FF
09681 22A6                        00            .byte	0
09682 22A7                        00            .byte	0
09683 22A8                        00            .byte	0
09684 22A9                        00            .byte	0
09685 22AA                        00            .byte	0
09686 22AB                        00            .byte	0
09687                                           ! 1174  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09688 22AC                        00            .byte	0
09689 22AD                        00            .byte	0
09690 22AE                        00            .byte	0
09691 22AF                        00            .byte	0
09692 22B0                        00            .byte	0
09693 22B1                        FF            .byte	$FF
09694 22B2                        00            .byte	0
09695 22B3                        FF            .byte	$FF
09696 22B4                        18            .byte	$18
09697 22B5                        18            .byte	$18
09698 22B6                        18            .byte	$18
09699 22B7                        18            .byte	$18
09700 22B8                        18            .byte	$18
09701 22B9                        18            .byte	$18
09702                                           ! 1175  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09703 22BA                        00            .byte	0
09704 22BB                        00            .byte	0
09705 22BC                        00            .byte	0
09706 22BD                        00            .byte	0
09707 22BE                        00            .byte	0
09708 22BF                        00            .byte	0
09709 22C0                        00            .byte	0
09710 22C1                        FF            .byte	$FF
09711 22C2                        36            .byte	$36
09712 22C3                        36            .byte	$36
09713 22C4                        36            .byte	$36
09714 22C5                        36            .byte	$36
09715 22C6                        36            .byte	$36
09716 22C7                        36            .byte	$36
09717                                           ! 1176  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09718 22C8                        36            .byte	$36
09719 22C9                        36            .byte	$36
09720 22CA                        36            .byte	$36
09721 22CB                        36            .byte	$36
09722 22CC                        36            .byte	$36
09723 22CD                        36            .byte	$36
09724 22CE                        36            .byte	$36
09725 22CF                        3F            .byte	$3F
09726 22D0                        00            .byte	0
09727 22D1                        00            .byte	0
09728 22D2                        00            .byte	0
09729 22D3                        00            .byte	0
09730 22D4                        00            .byte	0
09731 22D5                        00            .byte	0
09732                                           ! 1177  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09733 22D6                        18            .byte	$18
09734 22D7                        18            .byte	$18
09735 22D8                        18            .byte	$18
09736 22D9                        18            .byte	$18
09737 22DA                        18            .byte	$18
09738 22DB                        1F            .byte	$1F
09739 22DC                        18            .byte	$18
09740 22DD                        1F            .byte	$1F
09741 22DE                        00            .byte	0
09742 22DF                        00            .byte	0
09743 22E0                        00            .byte	0
09744 22E1                        00            .byte	0
09745 22E2                        00            .byte	0
09746 22E3                        00            .byte	0
09747                                           ! 1178  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09748 22E4                        00            .byte	0
09749 22E5                        00            .byte	0
09750 22E6                        00            .byte	0
09751 22E7                        00            .byte	0
09752 22E8                        00            .byte	0
09753 22E9                        1F            .byte	$1F
09754 22EA                        18            .byte	$18
09755 22EB                        1F            .byte	$1F
09756 22EC                        18            .byte	$18
09757 22ED                        18            .byte	$18
09758 22EE                        18            .byte	$18
09759 22EF                        18            .byte	$18
09760 22F0                        18            .byte	$18
09761 22F1                        18            .byte	$18
09762                                           ! 1179  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09763 22F2                        00            .byte	0
09764 22F3                        00            .byte	0
09765 22F4                        00            .byte	0
09766 22F5                        00            .byte	0
09767 22F6                        00            .byte	0
09768 22F7                        00            .byte	0
09769 22F8                        00            .byte	0
09770 22F9                        3F            .byte	$3F
09771 22FA                        36            .byte	$36
09772 22FB                        36            .byte	$36
09773 22FC                        36            .byte	$36
09774 22FD                        36            .byte	$36
09775 22FE                        36            .byte	$36
09776 22FF                        36            .byte	$36
09777                                           ! 1180  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09778 2300                        36            .byte	$36
09779 2301                        36            .byte	$36
09780 2302                        36            .byte	$36
09781 2303                        36            .byte	$36
09782 2304                        36            .byte	$36
09783 2305                        36            .byte	$36
09784 2306                        36            .byte	$36
09785 2307                        FF            .byte	$FF
09786 2308                        36            .byte	$36
09787 2309                        36            .byte	$36
09788 230A                        36            .byte	$36
09789 230B                        36            .byte	$36
09790 230C                        36            .byte	$36
09791 230D                        36            .byte	$36
09792                                           ! 1181  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09793 230E                        18            .byte	$18
09794 230F                        18            .byte	$18
09795 2310                        18            .byte	$18
09796 2311                        18            .byte	$18
09797 2312                        18            .byte	$18
09798 2313                        FF            .byte	$FF
09799 2314                        18            .byte	$18
09800 2315                        FF            .byte	$FF
09801 2316                        18            .byte	$18
09802 2317                        18            .byte	$18
09803 2318                        18            .byte	$18
09804 2319                        18            .byte	$18
09805 231A                        18            .byte	$18
09806 231B                        18            .byte	$18
09807                                           ! 1182  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09808 231C                        18            .byte	$18
09809 231D                        18            .byte	$18
09810 231E                        18            .byte	$18
09811 231F                        18            .byte	$18
09812 2320                        18            .byte	$18
09813 2321                        18            .byte	$18
09814 2322                        18            .byte	$18
09815 2323                        F8            .byte	$F8
09816 2324                        00            .byte	0
09817 2325                        00            .byte	0
09818 2326                        00            .byte	0
09819 2327                        00            .byte	0
09820 2328                        00            .byte	0
09821 2329                        00            .byte	0
09822                                           ! 1183  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09823 232A                        00            .byte	0
09824 232B                        00            .byte	0
09825 232C                        00            .byte	0
09826 232D                        00            .byte	0
09827 232E                        00            .byte	0
09828 232F                        00            .byte	0
09829 2330                        00            .byte	0
09830 2331                        1F            .byte	$1F
09831 2332                        18            .byte	$18
09832 2333                        18            .byte	$18
09833 2334                        18            .byte	$18
09834 2335                        18            .byte	$18
09835 2336                        18            .byte	$18
09836 2337                        18            .byte	$18
09837                                           ! 1184  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
09838 2338                        FF            .byte	$FF
09839 2339                        FF            .byte	$FF
09840 233A                        FF            .byte	$FF
09841 233B                        FF            .byte	$FF
09842 233C                        FF            .byte	$FF
09843 233D                        FF            .byte	$FF
09844 233E                        FF            .byte	$FF
09845 233F                        FF            .byte	$FF
09846 2340                        FF            .byte	$FF
09847 2341                        FF            .byte	$FF
09848 2342                        FF            .byte	$FF
09849 2343                        FF            .byte	$FF
09850 2344                        FF            .byte	$FF
09851 2345                        FF            .byte	$FF
09852                                           ! 1185  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf
09853 2346                        00            .byte	0
09854 2347                        00            .byte	0
09855 2348                        00            .byte	0
09856 2349                        00            .byte	0
09857 234A                        00            .byte	0
09858 234B                        00            .byte	0
09859 234C                        00            .byte	0
09860 234D                        FF            .byte	$FF
09861 234E                        FF            .byte	$FF
09862 234F                        FF            .byte	$FF
09863 2350                        FF            .byte	$FF
09864 2351                        FF            .byte	$FF
09865                                           ! 1185 f, 0xff,
09866 2352                        FF            .byte	$FF
09867 2353                        FF            .byte	$FF
09868                                           ! 1186  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
09869 2354                        F0            .byte	$F0
09870 2355                        F0            .byte	$F0
09871 2356                        F0            .byte	$F0
09872 2357                        F0            .byte	$F0
09873 2358                        F0            .byte	$F0
09874 2359                        F0            .byte	$F0
09875 235A                        F0            .byte	$F0
09876 235B                        F0            .byte	$F0
09877 235C                        F0            .byte	$F0
09878 235D                        F0            .byte	$F0
09879 235E                        F0            .byte	$F0
09880 235F                        F0            .byte	$F0
09881 2360                        F0            .byte	$F0
09882 2361                        F0            .byte	$F0
09883                                           ! 1187  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
09884 2362                        0F            .byte	$F
09885 2363                        0F            .byte	$F
09886 2364                        0F            .byte	$F
09887 2365                        0F            .byte	$F
09888 2366                        0F            .byte	$F
09889 2367                        0F            .byte	$F
09890 2368                        0F            .byte	$F
09891 2369                        0F            .byte	$F
09892 236A                        0F            .byte	$F
09893 236B                        0F            .byte	$F
09894 236C                        0F            .byte	$F
09895 236D                        0F            .byte	$F
09896 236E                        0F            .byte	$F
09897 236F                        0F            .byte	$F
09898                                           ! 1188  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09899 2370                        FF            .byte	$FF
09900 2371                        FF            .byte	$FF
09901 2372                        FF            .byte	$FF
09902 2373                        FF            .byte	$FF
09903 2374                        FF            .byte	$FF
09904 2375                        FF            .byte	$FF
09905 2376                        FF            .byte	$FF
09906 2377                        00            .byte	0
09907 2378                        00            .byte	0
09908 2379                        00            .byte	0
09909 237A                        00            .byte	0
09910 237B                        00            .byte	0
09911 237C                        00            .byte	0
09912 237D                        00            .byte	0
09913                                           ! 1189  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0xd8, 0xd8, 0xdc, 0x76, 0x00, 0x00, 0x00,
09914 237E                        00            .byte	0
09915 237F                        00            .byte	0
09916 2380                        00            .byte	0
09917 2381                        00            .byte	0
09918 2382                        00            .byte	0
09919 2383                        76            .byte	$76
09920 2384                        DC            .byte	$DC
09921 2385                        D8            .byte	$D8
09922 2386                        D8            .byte	$D8
09923 2387                        DC            .byte	$DC
09924 2388                        76            .byte	$76
09925 2389                        00            .byte	0
09926 238A                        00            .byte	0
09927 238B                        00            .byte	0
09928                                           ! 1190  0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfc, 0xc6, 0xc6, 0xfc, 0xc0, 0xc0, 0x40, 0x00,
09929 238C                        00            .byte	0
09930 238D                        00            .byte	0
09931 238E                        00            .byte	0
09932 238F                        00            .byte	0
09933 2390                        7C            .byte	$7C
09934 2391                        C6            .byte	$C6
09935 2392                        FC            .byte	$FC
09936 2393                        C6            .byte	$C6
09937 2394                        C6            .byte	$C6
09938 2395                        FC            .byte	$FC
09939 2396                        C0            .byte	$C0
09940 2397                        C0            .byte	$C0
09941 2398                        40            .byte	$40
09942 2399                        00            .byte	0
09943                                           ! 1191  0x00, 0x00, 0xfe, 0xc6, 0xc6, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00,
09944 239A                        00            .byte	0
09945 239B                        00            .byte	0
09946 239C                        FE            .byte	$FE
09947 239D                        C6            .byte	$C6
09948 239E                        C6            .byte	$C6
09949 239F                        C0            .byte	$C0
09950 23A0                        C0            .byte	$C0
09951 23A1                        C0            .byte	$C0
09952 23A2                        C0            .byte	$C0
09953 23A3                        C0            .byte	$C0
09954 23A4                        C0            .byte	$C0
09955 23A5                        00            .byte	0
09956 23A6                        00            .byte	0
09957 23A7                        00            .byte	0
09958                                           ! 1192  0x00, 0x00, 0x00, 0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00,
09959 23A8                        00            .byte	0
09960 23A9                        00            .byte	0
09961 23AA                        00            .byte	0
09962 23AB                        00            .byte	0
09963 23AC                        FE            .byte	$FE
09964 23AD                        6C            .byte	$6C
09965 23AE                        6C            .byte	$6C
09966 23AF                        6C            .byte	$6C
09967 23B0                        6C            .byte	$6C
09968 23B1                        6C            .byte	$6C
09969 23B2                        6C            .byte	$6C
09970 23B3                        00            .byte	0
09971 23B4                        00            .byte	0
09972 23B5                        00            .byte	0
09973                                           ! 1193  0x00, 0x00, 0xfe, 0xc6, 0x60, 0x30, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00,
09974 23B6                        00            .byte	0
09975 23B7                        00            .byte	0
09976 23B8                        FE            .byte	$FE
09977 23B9                        C6            .byte	$C6
09978 23BA                        60            .byte	$60
09979 23BB                        30            .byte	$30
09980 23BC                        18            .byte	$18
09981 23BD                        30            .byte	$30
09982 23BE                        60            .byte	$60
09983 23BF                        C6            .byte	$C6
09984 23C0                        FE            .byte	$FE
09985 23C1                        00            .byte	0
09986 23C2                        00            .byte	0
09987 23C3                        00            .byte	0
09988                                           ! 1194  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00,
09989 23C4                        00            .byte	0
09990 23C5                        00            .byte	0
09991 23C6                        00            .byte	0
09992 23C7                        00            .byte	0
09993 23C8                        00            .byte	0
09994 23C9                        7E            .byte	$7E
09995 23CA                        D8            .byte	$D8
09996 23CB                        D8            .byte	$D8
09997 23CC                        D8            .byte	$D8
09998 23CD                        D8            .byte	$D8
09999 23CE                        70            .byte	$70
10000 23CF                        00            .byte	0
10001 23D0                        00            .byte	0
10002 23D1                        00            .byte	0
10003                                           ! 1195  0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xc0, 0x00, 0x00,
10004 23D2                        00            .byte	0
10005 23D3                        00            .byte	0
10006 23D4                        00            .byte	0
10007 23D5                        00            .byte	0
10008 23D6                        66            .byte	$66
10009 23D7                        66            .byte	$66
10010 23D8                        66            .byte	$66
10011 23D9                        66            .byte	$66
10012 23DA                        7C            .byte	$7C
10013 23DB                        60            .byte	$60
10014 23DC                        60            .byte	$60
10015 23DD                        C0            .byte	$C0
10016 23DE                        00            .byte	0
10017 23DF                        00            .byte	0
10018                                           ! 1196  0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
10019 23E0                        00            .byte	0
10020 23E1                        00            .byte	0
10021 23E2                        00            .byte	0
10022 23E3                        00            .byte	0
10023 23E4                        76            .byte	$76
10024 23E5                        DC            .byte	$DC
10025 23E6                        18            .byte	$18
10026 23E7                        18            .byte	$18
10027 23E8                        18            .byte	$18
10028 23E9                        18            .byte	$18
10029 23EA                        18            .byte	$18
10030 23EB                        00            .byte	0
10031 23EC                        00            .byte	0
10032 23ED                        00            .byte	0
10033                                           ! 1197  0x00, 0x00, 0x7e, 0x18, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00,
10034 23EE                        00            .byte	0
10035 23EF                        00            .byte	0
10036 23F0                        7E            .byte	$7E
10037 23F1                        18            .byte	$18
10038 23F2                        3C            .byte	$3C
10039 23F3                        66            .byte	$66
10040 23F4                        66            .byte	$66
10041 23F5                        66            .byte	$66
10042 23F6                        3C            .byte	$3C
10043 23F7                        18            .byte	$18
10044 23F8                        7E            .byte	$7E
10045 23F9                        00            .byte	0
10046 23FA                        00            .byte	0
10047 23FB                        00            .byte	0
10048                                           ! 1198  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
10049 23FC                        00            .byte	0
10050 23FD                        00            .byte	0
10051 23FE                        38            .byte	$38
10052 23FF                        6C            .byte	$6C
10053 2400                        C6            .byte	$C6
10054 2401                        C6            .byte	$C6
10055 2402                        FE            .byte	$FE
10056 2403                        C6            .byte	$C6
10057 2404                        C6            .byte	$C6
10058 2405                        6C            .byte	$6C
10059 2406                        38            .byte	$38
10060 2407                        00            .byte	0
10061 2408                        00            .byte	0
10062 2409                        00            .byte	0
10063                                           ! 1199  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x6c, 0x6c, 0xee, 0x00, 0x00, 0x00,
10064 240A                        00            .byte	0
10065 240B                        00            .byte	0
10066 240C                        38            .byte	$38
10067 240D                        6C            .byte	$6C
10068 240E                        C6            .byte	$C6
10069 240F                        C6            .byte	$C6
10070 2410                        C6            .byte	$C6
10071 2411                        6C            .byte	$6C
10072 2412                        6C            .byte	$6C
10073 2413                        6C            .byte	$6C
10074 2414                        EE            .byte	$EE
10075 2415                        00            .byte	0
10076 2416                        00            .byte	0
10077 2417                        00            .byte	0
10078                                           ! 1200  0x00, 0x00, 0x1e, 0x30, 0x18, 0x0c, 0x3e, 0x66, 0x66, 0x66, 0x3c, 0x00, 0x00, 0x00,
10079 2418                        00            .byte	0
10080 2419                        00            .byte	0
10081 241A                        1E            .byte	$1E
10082 241B                        30            .byte	$30
10083 241C                        18            .byte	$18
10084 241D                        0C            .byte	$C
10085 241E                        3E            .byte	$3E
10086 241F                        66            .byte	$66
10087 2420                        66            .byte	$66
10088 2421                        66            .byte	$66
10089 2422                        3C            .byte	$3C
10090 2423                        00            .byte	0
10091 2424                        00            .byte	0
10092 2425                        00            .byte	0
10093                                           ! 1201  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xdb, 0xdb, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
10094 2426                        00            .byte	0
10095 2427                        00            .byte	0
10096 2428                        00            .byte	0
10097 2429                        00            .byte	0
10098 242A                        00            .byte	0
10099 242B                        7E            .byte	$7E
10100 242C                        DB            .byte	$DB
10101 242D                        DB            .byte	$DB
10102 242E                        7E            .byte	$7E
10103 242F                        00            .byte	0
10104 2430                        00            .byte	0
10105 2431                        00            .byte	0
10106 2432                        00            .byte	0
10107 2433                        00            .byte	0
10108                                           ! 1202  0x00, 0x00, 0x03, 0x06, 0x7e, 0xdb, 0xdb, 0xf3, 0x7e, 0x60, 0xc0, 0x00, 0x00, 0x00,
10109 2434                        00            .byte	0
10110 2435                        00            .byte	0
10111 2436                        03            .byte	3
10112 2437                        06            .byte	6
10113 2438                        7E            .byte	$7E
10114 2439                        DB            .byte	$DB
10115 243A                        DB            .byte	$DB
10116 243B                        F3            .byte	$F3
10117 243C                        7E            .byte	$7E
10118 243D                        60            .byte	$60
10119 243E                        C0            .byte	$C0
10120 243F                        00            .byte	0
10121 2440                        00            .byte	0
10122 2441                        00            .byte	0
10123                                           ! 1203  0x00, 0x00, 0x1c, 0x30, 0x60, 0x60, 0x7c, 0x60, 0x60, 0x30, 0x1c, 0x00, 0x00, 0x00,
10124 2442                        00            .byte	0
10125 2443                        00            .byte	0
10126 2444                        1C            .byte	$1C
10127 2445                        30            .byte	$30
10128 2446                        60            .byte	$60
10129 2447                        60            .byte	$60
10130 2448                        7C            .byte	$7C
10131 2449                        60            .byte	$60
10132 244A                        60            .byte	$60
10133 244B                        30            .byte	$30
10134 244C                        1C            .byte	$1C
10135 244D                        00            .byte	0
10136 244E                        00            .byte	0
10137 244F                        00            .byte	0
10138                                           ! 1204  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
10139 2450                        00            .byte	0
10140 2451                        00            .byte	0
10141 2452                        00            .byte	0
10142 2453                        7C            .byte	$7C
10143 2454                        C6            .byte	$C6
10144 2455                        C6            .byte	$C6
10145 2456                        C6            .byte	$C6
10146 2457                        C6            .byte	$C6
10147 2458                        C6            .byte	$C6
10148 2459                        C6            .byte	$C6
10149 245A                        C6            .byte	$C6
10150 245B                        00            .byte	0
10151 245C                        00            .byte	0
10152 245D                        00            .byte	0
10153                                           ! 1205  0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00,
10154 245E                        00            .byte	0
10155 245F                        00            .byte	0
10156 2460                        00            .byte	0
10157 2461                        FE            .byte	$FE
10158 2462                        00            .byte	0
10159 2463                        00            .byte	0
10160 2464                        FE            .byte	$FE
10161 2465                        00            .byte	0
10162 2466                        00            .byte	0
10163 2467                        FE            .byte	$FE
10164 2468                        00            .byte	0
10165 2469                        00            .byte	0
10166 246A                        00            .byte	0
10167 246B                        00            .byte	0
10168                                           ! 1206  0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
10169 246C                        00            .byte	0
10170 246D                        00            .byte	0
10171 246E                        00            .byte	0
10172 246F                        18            .byte	$18
10173 2470                        18            .byte	$18
10174 2471                        7E            .byte	$7E
10175 2472                        18            .byte	$18
10176 2473                        18            .byte	$18
10177 2474                        00            .byte	0
10178 2475                        00            .byte	0
10179 2476                        FF            .byte	$FF
10180 2477                        00            .byte	0
10181 2478                        00            .byte	0
10182 2479                        00            .byte	0
10183                                           ! 1207  0x00, 0x00, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x00, 0x7e, 0x00, 0x00, 0x00,
10184 247A                        00            .byte	0
10185 247B                        00            .byte	0
10186 247C                        30            .byte	$30
10187 247D                        18            .byte	$18
10188 247E                        0C            .byte	$C
10189 247F                        06            .byte	6
10190 2480                        0C            .byte	$C
10191 2481                        18            .byte	$18
10192 2482                        30            .byte	$30
10193 2483                        00            .byte	0
10194 2484                        7E            .byte	$7E
10195 2485                        00            .byte	0
10196 2486                        00            .byte	0
10197 2487                        00            .byte	0
10198                                           ! 1208  0x00, 0x00, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x00, 0x7e, 0x00, 0x00, 0x00,
10199 2488                        00            .byte	0
10200 2489                        00            .byte	0
10201 248A                        0C            .byte	$C
10202 248B                        18            .byte	$18
10203 248C                        30            .byte	$30
10204 248D                        60            .byte	$60
10205 248E                        30            .byte	$30
10206 248F                        18            .byte	$18
10207 2490                        0C            .byte	$C
10208 2491                        00            .byte	0
10209 2492                        7E            .byte	$7E
10210 2493                        00            .byte	0
10211 2494                        00            .byte	0
10212 2495                        00            .byte	0
10213                                           ! 1209  0x00, 0x00, 0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
10214 2496                        00            .byte	0
10215 2497                        00            .byte	0
10216 2498                        0E            .byte	$E
10217 2499                        1B            .byte	$1B
10218 249A                        1B            .byte	$1B
10219 249B                        18            .byte	$18
10220 249C                        18            .byte	$18
10221 249D                        18            .byte	$18
10222 249E                        18            .byte	$18
10223 249F                        18            .byte	$18
10224 24A0                        18            .byte	$18
10225 24A1                        18            .byte	$18
10226 24A2                        18            .byte	$18
10227                                           ! 1209 
10228 24A3                        18            .byte	$18
10229                                           ! 1210  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00,
10230 24A4                        18            .byte	$18
10231 24A5                        18            .byte	$18
10232 24A6                        18            .byte	$18
10233 24A7                        18            .byte	$18
10234 24A8                        18            .byte	$18
10235 24A9                        18            .byte	$18
10236 24AA                        18            .byte	$18
10237 24AB                        18            .byte	$18
10238 24AC                        D8            .byte	$D8
10239 24AD                        D8            .byte	$D8
10240 24AE                        70            .byte	$70
10241 24AF                        00            .byte	0
10242 24B0                        00            .byte	0
10243 24B1                        00            .byte	0
10244                                           ! 1211  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x7e, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10245 24B2                        00            .byte	0
10246 24B3                        00            .byte	0
10247 24B4                        00            .byte	0
10248 24B5                        18            .byte	$18
10249 24B6                        18            .byte	$18
10250 24B7                        00            .byte	0
10251 24B8                        7E            .byte	$7E
10252 24B9                        00            .byte	0
10253 24BA                        18            .byte	$18
10254 24BB                        18            .byte	$18
10255 24BC                        00            .byte	0
10256 24BD                        00            .byte	0
10257 24BE                        00            .byte	0
10258 24BF                        00            .byte	0
10259                                           ! 1212  0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00,
10260 24C0                        00            .byte	0
10261 24C1                        00            .byte	0
10262 24C2                        00            .byte	0
10263 24C3                        00            .byte	0
10264 24C4                        76            .byte	$76
10265 24C5                        DC            .byte	$DC
10266 24C6                        00            .byte	0
10267 24C7                        76            .byte	$76
10268 24C8                        DC            .byte	$DC
10269 24C9                        00            .byte	0
10270 24CA                        00            .byte	0
10271 24CB                        00            .byte	0
10272 24CC                        00            .byte	0
10273 24CD                        00            .byte	0
10274                                           ! 1213  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10275 24CE                        00            .byte	0
10276 24CF                        38            .byte	$38
10277 24D0                        6C            .byte	$6C
10278 24D1                        6C            .byte	$6C
10279 24D2                        38            .byte	$38
10280 24D3                        00            .byte	0
10281 24D4                        00            .byte	0
10282 24D5                        00            .byte	0
10283 24D6                        00            .byte	0
10284 24D7                        00            .byte	0
10285 24D8                        00            .byte	0
10286 24D9                        00            .byte	0
10287 24DA                        00            .byte	0
10288 24DB                        00            .byte	0
10289                                           ! 1214  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10290 24DC                        00            .byte	0
10291 24DD                        00            .byte	0
10292 24DE                        00            .byte	0
10293 24DF                        00            .byte	0
10294 24E0                        00            .byte	0
10295 24E1                        00            .byte	0
10296 24E2                        18            .byte	$18
10297 24E3                        18            .byte	$18
10298 24E4                        00            .byte	0
10299 24E5                        00            .byte	0
10300 24E6                        00            .byte	0
10301 24E7                        00            .byte	0
10302 24E8                        00            .byte	0
10303 24E9                        00            .byte	0
10304                                           ! 1215  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10305 24EA                        00            .byte	0
10306 24EB                        00            .byte	0
10307 24EC                        00            .byte	0
10308 24ED                        00            .byte	0
10309 24EE                        00            .byte	0
10310 24EF                        00            .byte	0
10311 24F0                        00            .byte	0
10312 24F1                        18            .byte	$18
10313 24F2                        00            .byte	0
10314 24F3                        00            .byte	0
10315 24F4                        00            .byte	0
10316 24F5                        00            .byte	0
10317 24F6                        00            .byte	0
10318 24F7                        00            .byte	0
10319                                           ! 1216  0x00, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x3c, 0x1c, 0x00, 0x00, 0x00,
10320 24F8                        00            .byte	0
10321 24F9                        0F            .byte	$F
10322 24FA                        0C            .byte	$C
10323 24FB                        0C            .byte	$C
10324 24FC                        0C            .byte	$C
10325 24FD                        0C            .byte	$C
10326 24FE                        0C            .byte	$C
10327 24FF                        EC            .byte	$EC
10328 2500                        6C            .byte	$6C
10329 2501                        3C            .byte	$3C
10330 2502                        1C            .byte	$1C
10331 2503                        00            .byte	0
10332 2504                        00            .byte	0
10333 2505                        00            .byte	0
10334                                           ! 1217  0x00, 0xd8, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10335 2506                        00            .byte	0
10336 2507                        D8            .byte	$D8
10337 2508                        6C            .byte	$6C
10338 2509                        6C            .byte	$6C
10339 250A                        6C            .byte	$6C
10340 250B                        6C            .byte	$6C
10341 250C                        6C            .byte	$6C
10342 250D                        00            .byte	0
10343 250E                        00            .byte	0
10344 250F                        00            .byte	0
10345 2510                        00            .byte	0
10346 2511                        00            .byte	0
10347 2512                        00            .byte	0
10348 2513                        00            .byte	0
10349                                           ! 1218  0x00, 0x70, 0xd8, 0x30, 0x60, 0xc8, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10350 2514                        00            .byte	0
10351 2515                        70            .byte	$70
10352 2516                        D8            .byte	$D8
10353 2517                        30            .byte	$30
10354 2518                        60            .byte	$60
10355 2519                        C8            .byte	$C8
10356 251A                        F8            .byte	$F8
10357 251B                        00            .byte	0
10358 251C                        00            .byte	0
10359 251D                        00            .byte	0
10360 251E                        00            .byte	0
10361 251F                        00            .byte	0
10362 2520                        00            .byte	0
10363 2521                        00            .byte	0
10364                                           ! 1219  0x00, 0x00, 0x00, 0x00, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x00, 0x00, 0x00, 0x00,
10365 2522                        00            .byte	0
10366 2523                        00            .byte	0
10367 2524                        00            .byte	0
10368 2525                        00            .byte	0
10369 2526                        7C            .byte	$7C
10370 2527                        7C            .byte	$7C
10371 2528                        7C            .byte	$7C
10372 2529                        7C            .byte	$7C
10373 252A                        7C            .byte	$7C
10374 252B                        7C            .byte	$7C
10375 252C                        00            .byte	0
10376 252D                        00            .byte	0
10377 252E                        00            .byte	0
10378 252F                        00            .byte	0
10379                                           ! 1220  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
10380 2530                        00            .byte	0
10381 2531                        00            .byte	0
10382 2532                        00            .byte	0
10383 2533                        00            .byte	0
10384 2534                        00            .byte	0
10385 2535                        00            .byte	0
10386 2536                        00            .byte	0
10387 2537                        00            .byte	0
10388 2538                        00            .byte	0
10389 2539                        00            .byte	0
10390 253A                        00            .byte	0
10391 253B                        00            .byte	0
10392 253C                        00            .byte	0
10393                                           ! 1221 };
10394 253D                        00            .byte	0
10395                                           !BCC_EOS
10396                                           ! 1222 static Bit8u vgafont16[256*16]=
10397                                           ! 1223 {
10398                       0000253E            _vgafont16:
10399                                           ! 1224  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10400 253E                        00            .byte	0
10401 253F                        00            .byte	0
10402 2540                        00            .byte	0
10403 2541                        00            .byte	0
10404 2542                        00            .byte	0
10405 2543                        00            .byte	0
10406 2544                        00            .byte	0
10407 2545                        00            .byte	0
10408 2546                        00            .byte	0
10409 2547                        00            .byte	0
10410 2548                        00            .byte	0
10411 2549                        00            .byte	0
10412 254A                        00            .byte	0
10413 254B                        00            .byte	0
10414 254C                        00            .byte	0
10415 254D                        00            .byte	0
10416                                           ! 1225  0x00, 0x00, 0x7e, 0x81, 0xa5, 0x81, 0x81, 0xbd, 0x99, 0x81, 0x81, 0x7e, 0x00, 0x00, 0x00, 0x00,
10417 254E                        00            .byte	0
10418 254F                        00            .byte	0
10419 2550                        7E            .byte	$7E
10420 2551                        81            .byte	$81
10421 2552                        A5            .byte	$A5
10422 2553                        81            .byte	$81
10423 2554                        81            .byte	$81
10424 2555                        BD            .byte	$BD
10425 2556                        99            .byte	$99
10426 2557                        81            .byte	$81
10427 2558                        81            .byte	$81
10428 2559                        7E            .byte	$7E
10429 255A                        00            .byte	0
10430 255B                        00            .byte	0
10431 255C                        00            .byte	0
10432 255D                        00            .byte	0
10433                                           ! 1226  0x00, 0x00, 0x7e, 0xff, 0xdb, 0xff, 0xff, 0xc3, 0xe7, 0xff, 0xff, 0x7e, 0x00, 0x00, 0x00, 0x00,
10434 255E                        00            .byte	0
10435 255F                        00            .byte	0
10436 2560                        7E            .byte	$7E
10437 2561                        FF            .byte	$FF
10438 2562                        DB            .byte	$DB
10439 2563                        FF            .byte	$FF
10440 2564                        FF            .byte	$FF
10441 2565                        C3            .byte	$C3
10442 2566                        E7            .byte	$E7
10443 2567                        FF            .byte	$FF
10444 2568                        FF            .byte	$FF
10445 2569                        7E            .byte	$7E
10446 256A                        00            .byte	0
10447 256B                        00            .byte	0
10448 256C                        00            .byte	0
10449 256D                        00            .byte	0
10450                                           ! 1227  0x00, 0x00, 0x00, 0x00, 0x6c, 0xfe, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
10451 256E                        00            .byte	0
10452 256F                        00            .byte	0
10453 2570                        00            .byte	0
10454 2571                        00            .byte	0
10455 2572                        6C            .byte	$6C
10456 2573                        FE            .byte	$FE
10457 2574                        FE            .byte	$FE
10458 2575                        FE            .byte	$FE
10459 2576                        FE            .byte	$FE
10460 2577                        7C            .byte	$7C
10461 2578                        38            .byte	$38
10462 2579                        10            .byte	$10
10463 257A                        00            .byte	0
10464 257B                        00            .byte	0
10465 257C                        00            .byte	0
10466 257D                        00            .byte	0
10467                                           ! 1228  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
10468 257E                        00            .byte	0
10469 257F                        00            .byte	0
10470 2580                        00            .byte	0
10471 2581                        00            .byte	0
10472 2582                        10            .byte	$10
10473 2583                        38            .byte	$38
10474 2584                        7C            .byte	$7C
10475 2585                        FE            .byte	$FE
10476 2586                        7C            .byte	$7C
10477 2587                        38            .byte	$38
10478 2588                        10            .byte	$10
10479 2589                        00            .byte	0
10480 258A                        00            .byte	0
10481 258B                        00            .byte	0
10482 258C                        00            .byte	0
10483 258D                        00            .byte	0
10484                                           ! 1229  0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0xe7, 0xe7, 0xe7, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
10485 258E                        00            .byte	0
10486 258F                        00            .byte	0
10487 2590                        00            .byte	0
10488 2591                        18            .byte	$18
10489 2592                        3C            .byte	$3C
10490 2593                        3C            .byte	$3C
10491 2594                        E7            .byte	$E7
10492 2595                        E7            .byte	$E7
10493 2596                        E7            .byte	$E7
10494 2597                        18            .byte	$18
10495 2598                        18            .byte	$18
10496 2599                        3C            .byte	$3C
10497 259A                        00            .byte	0
10498 259B                        00            .byte	0
10499 259C                        00            .byte	0
10500 259D                        00            .byte	0
10501                                           ! 1230  0x00, 0x00, 0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x7e, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
10502 259E                        00            .byte	0
10503 259F                        00            .byte	0
10504 25A0                        00            .byte	0
10505 25A1                        18            .byte	$18
10506 25A2                        3C            .byte	$3C
10507 25A3                        7E            .byte	$7E
10508 25A4                        FF            .byte	$FF
10509 25A5                        FF            .byte	$FF
10510 25A6                        7E            .byte	$7E
10511 25A7                        18            .byte	$18
10512 25A8                        18            .byte	$18
10513 25A9                        3C            .byte	$3C
10514 25AA                        00            .byte	0
10515 25AB                        00            .byte	0
10516 25AC                        00            .byte	0
10517 25AD                        00            .byte	0
10518                                           ! 1231  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10519 25AE                        00            .byte	0
10520 25AF                        00            .byte	0
10521 25B0                        00            .byte	0
10522 25B1                        00            .byte	0
10523 25B2                        00            .byte	0
10524 25B3                        00            .byte	0
10525 25B4                        18            .byte	$18
10526 25B5                        3C            .byte	$3C
10527 25B6                        3C            .byte	$3C
10528 25B7                        18            .byte	$18
10529 25B8                        00            .byte	0
10530 25B9                        00            .byte	0
10531 25BA                        00            .byte	0
10532 25BB                        00            .byte	0
10533 25BC                        00            .byte	0
10534 25BD                        00            .byte	0
10535                                           ! 1232  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
10536 25BE                        FF            .byte	$FF
10537 25BF                        FF            .byte	$FF
10538 25C0                        FF            .byte	$FF
10539 25C1                        FF            .byte	$FF
10540 25C2                        FF            .byte	$FF
10541 25C3                        FF            .byte	$FF
10542 25C4                        E7            .byte	$E7
10543 25C5                        C3            .byte	$C3
10544 25C6                        C3            .byte	$C3
10545 25C7                        E7            .byte	$E7
10546 25C8                        FF            .byte	$FF
10547 25C9                        FF            .byte	$FF
10548 25CA                        FF            .byte	$FF
10549 25CB                        FF            .byte	$FF
10550 25CC                        FF            .byte	$FF
10551 25CD                        FF            .byte	$FF
10552                                           ! 1233  0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00,
10553 25CE                        00            .byte	0
10554 25CF                        00            .byte	0
10555 25D0                        00            .byte	0
10556 25D1                        00            .byte	0
10557 25D2                        00            .byte	0
10558 25D3                        3C            .byte	$3C
10559 25D4                        66            .byte	$66
10560 25D5                        42            .byte	$42
10561 25D6                        42            .byte	$42
10562 25D7                        66            .byte	$66
10563 25D8                        3C            .byte	$3C
10564 25D9                        00            .byte	0
10565 25DA                        00            .byte	0
10566 25DB                        00            .byte	0
10567 25DC                        00            .byte	0
10568 25DD                        00            .byte	0
10569                                           ! 1234  0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff,
10570 25DE                        FF            .byte	$FF
10571 25DF                        FF            .byte	$FF
10572 25E0                        FF            .byte	$FF
10573 25E1                        FF            .byte	$FF
10574 25E2                        FF            .byte	$FF
10575 25E3                        C3            .byte	$C3
10576 25E4                        99            .byte	$99
10577 25E5                        BD            .byte	$BD
10578 25E6                        BD            .byte	$BD
10579 25E7                        99            .byte	$99
10580 25E8                        C3            .byte	$C3
10581 25E9                        FF            .byte	$FF
10582 25EA                        FF            .byte	$FF
10583 25EB                        FF            .byte	$FF
10584 25EC                        FF            .byte	$FF
10585 25ED                        FF            .byte	$FF
10586                                           ! 1235  0x00, 0x
10587 25EE                        00            .byte	0
10588                                           ! 1235 00, 0x1e, 0x0e, 0x1a, 0x32, 0x78, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00, 0x00,
10589 25EF                        00            .byte	0
10590 25F0                        1E            .byte	$1E
10591 25F1                        0E            .byte	$E
10592 25F2                        1A            .byte	$1A
10593 25F3                        32            .byte	$32
10594 25F4                        78            .byte	$78
10595 25F5                        CC            .byte	$CC
10596 25F6                        CC            .byte	$CC
10597 25F7                        CC            .byte	$CC
10598 25F8                        CC            .byte	$CC
10599 25F9                        78            .byte	$78
10600 25FA                        00            .byte	0
10601 25FB                        00            .byte	0
10602 25FC                        00            .byte	0
10603 25FD                        00            .byte	0
10604                                           ! 1236  0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10605 25FE                        00            .byte	0
10606 25FF                        00            .byte	0
10607 2600                        3C            .byte	$3C
10608 2601                        66            .byte	$66
10609 2602                        66            .byte	$66
10610 2603                        66            .byte	$66
10611 2604                        66            .byte	$66
10612 2605                        3C            .byte	$3C
10613 2606                        18            .byte	$18
10614 2607                        7E            .byte	$7E
10615 2608                        18            .byte	$18
10616 2609                        18            .byte	$18
10617 260A                        00            .byte	0
10618 260B                        00            .byte	0
10619 260C                        00            .byte	0
10620 260D                        00            .byte	0
10621                                           ! 1237  0x00, 0x00, 0x3f, 0x33, 0x3f, 0x30, 0x30, 0x30, 0x30, 0x70, 0xf0, 0xe0, 0x00, 0x00, 0x00, 0x00,
10622 260E                        00            .byte	0
10623 260F                        00            .byte	0
10624 2610                        3F            .byte	$3F
10625 2611                        33            .byte	$33
10626 2612                        3F            .byte	$3F
10627 2613                        30            .byte	$30
10628 2614                        30            .byte	$30
10629 2615                        30            .byte	$30
10630 2616                        30            .byte	$30
10631 2617                        70            .byte	$70
10632 2618                        F0            .byte	$F0
10633 2619                        E0            .byte	$E0
10634 261A                        00            .byte	0
10635 261B                        00            .byte	0
10636 261C                        00            .byte	0
10637 261D                        00            .byte	0
10638                                           ! 1238  0x00, 0x00, 0x7f, 0x63, 0x7f, 0x63, 0x63, 0x63, 0x63, 0x67, 0xe7, 0xe6, 0xc0, 0x00, 0x00, 0x00,
10639 261E                        00            .byte	0
10640 261F                        00            .byte	0
10641 2620                        7F            .byte	$7F
10642 2621                        63            .byte	$63
10643 2622                        7F            .byte	$7F
10644 2623                        63            .byte	$63
10645 2624                        63            .byte	$63
10646 2625                        63            .byte	$63
10647 2626                        63            .byte	$63
10648 2627                        67            .byte	$67
10649 2628                        E7            .byte	$E7
10650 2629                        E6            .byte	$E6
10651 262A                        C0            .byte	$C0
10652 262B                        00            .byte	0
10653 262C                        00            .byte	0
10654 262D                        00            .byte	0
10655                                           ! 1239  0x00, 0x00, 0x00, 0x18, 0x18, 0xdb, 0x3c, 0xe7, 0x3c, 0xdb, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10656 262E                        00            .byte	0
10657 262F                        00            .byte	0
10658 2630                        00            .byte	0
10659 2631                        18            .byte	$18
10660 2632                        18            .byte	$18
10661 2633                        DB            .byte	$DB
10662 2634                        3C            .byte	$3C
10663 2635                        E7            .byte	$E7
10664 2636                        3C            .byte	$3C
10665 2637                        DB            .byte	$DB
10666 2638                        18            .byte	$18
10667 2639                        18            .byte	$18
10668 263A                        00            .byte	0
10669 263B                        00            .byte	0
10670 263C                        00            .byte	0
10671 263D                        00            .byte	0
10672                                           ! 1240  0x00, 0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfe, 0xf8, 0xf0, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
10673 263E                        00            .byte	0
10674 263F                        80            .byte	$80
10675 2640                        C0            .byte	$C0
10676 2641                        E0            .byte	$E0
10677 2642                        F0            .byte	$F0
10678 2643                        F8            .byte	$F8
10679 2644                        FE            .byte	$FE
10680 2645                        F8            .byte	$F8
10681 2646                        F0            .byte	$F0
10682 2647                        E0            .byte	$E0
10683 2648                        C0            .byte	$C0
10684 2649                        80            .byte	$80
10685 264A                        00            .byte	0
10686 264B                        00            .byte	0
10687 264C                        00            .byte	0
10688 264D                        00            .byte	0
10689                                           ! 1241  0x00, 0x02, 0x06, 0x0e, 0x1e, 0x3e, 0xfe, 0x3e, 0x1e, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00,
10690 264E                        00            .byte	0
10691 264F                        02            .byte	2
10692 2650                        06            .byte	6
10693 2651                        0E            .byte	$E
10694 2652                        1E            .byte	$1E
10695 2653                        3E            .byte	$3E
10696 2654                        FE            .byte	$FE
10697 2655                        3E            .byte	$3E
10698 2656                        1E            .byte	$1E
10699 2657                        0E            .byte	$E
10700 2658                        06            .byte	6
10701 2659                        02            .byte	2
10702 265A                        00            .byte	0
10703 265B                        00            .byte	0
10704 265C                        00            .byte	0
10705 265D                        00            .byte	0
10706                                           ! 1242  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
10707 265E                        00            .byte	0
10708 265F                        00            .byte	0
10709 2660                        18            .byte	$18
10710 2661                        3C            .byte	$3C
10711 2662                        7E            .byte	$7E
10712 2663                        18            .byte	$18
10713 2664                        18            .byte	$18
10714 2665                        18            .byte	$18
10715 2666                        7E            .byte	$7E
10716 2667                        3C            .byte	$3C
10717 2668                        18            .byte	$18
10718 2669                        00            .byte	0
10719 266A                        00            .byte	0
10720 266B                        00            .byte	0
10721 266C                        00            .byte	0
10722 266D                        00            .byte	0
10723                                           ! 1243  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
10724 266E                        00            .byte	0
10725 266F                        00            .byte	0
10726 2670                        66            .byte	$66
10727 2671                        66            .byte	$66
10728 2672                        66            .byte	$66
10729 2673                        66            .byte	$66
10730 2674                        66            .byte	$66
10731 2675                        66            .byte	$66
10732 2676                        66            .byte	$66
10733 2677                        00            .byte	0
10734 2678                        66            .byte	$66
10735 2679                        66            .byte	$66
10736 267A                        00            .byte	0
10737 267B                        00            .byte	0
10738 267C                        00            .byte	0
10739 267D                        00            .byte	0
10740                                           ! 1244  0x00, 0x00, 0x7f, 0xdb, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x00, 0x00, 0x00, 0x00,
10741 267E                        00            .byte	0
10742 267F                        00            .byte	0
10743 2680                        7F            .byte	$7F
10744 2681                        DB            .byte	$DB
10745 2682                        DB            .byte	$DB
10746 2683                        DB            .byte	$DB
10747 2684                        7B            .byte	$7B
10748 2685                        1B            .byte	$1B
10749 2686                        1B            .byte	$1B
10750 2687                        1B            .byte	$1B
10751 2688                        1B            .byte	$1B
10752 2689                        1B            .byte	$1B
10753 268A                        00            .byte	0
10754 268B                        00            .byte	0
10755 268C                        00            .byte	0
10756 268D                        00            .byte	0
10757                                           ! 1245  0x00, 0x7c, 0xc6, 0x60, 0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x38, 0x0c, 0xc6, 0x7c, 0x00, 0x00, 0x00,
10758 268E                        00            .byte	0
10759 268F                        7C            .byte	$7C
10760 2690                        C6            .byte	$C6
10761 2691                        60            .byte	$60
10762 2692                        38            .byte	$38
10763 2693                        6C            .byte	$6C
10764 2694                        C6            .byte	$C6
10765 2695                        C6            .byte	$C6
10766 2696                        6C            .byte	$6C
10767 2697                        38            .byte	$38
10768 2698                        0C            .byte	$C
10769 2699                        C6            .byte	$C6
10770 269A                        7C            .byte	$7C
10771 269B                        00            .byte	0
10772 269C                        00            .byte	0
10773 269D                        00            .byte	0
10774                                           ! 1246  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00,
10775 269E                        00            .byte	0
10776 269F                        00            .byte	0
10777 26A0                        00            .byte	0
10778 26A1                        00            .byte	0
10779 26A2                        00            .byte	0
10780 26A3                        00            .byte	0
10781 26A4                        00            .byte	0
10782 26A5                        00            .byte	0
10783 26A6                        FE            .byte	$FE
10784 26A7                        FE            .byte	$FE
10785 26A8                        FE            .byte	$FE
10786 26A9                        FE            .byte	$FE
10787 26AA                        00            .byte	0
10788 26AB                        00            .byte	0
10789 26AC                        00            .byte	0
10790 26AD                        00            .byte	0
10791                                           ! 1247  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
10792 26AE                        00            .byte	0
10793 26AF                        00            .byte	0
10794 26B0                        18            .byte	$18
10795 26B1                        3C            .byte	$3C
10796 26B2                        7E            .byte	$7E
10797 26B3                        18            .byte	$18
10798 26B4                        18            .byte	$18
10799 26B5                        18            .byte	$18
10800 26B6                        7E            .byte	$7E
10801 26B7                        3C            .byte	$3C
10802 26B8                        18            .byte	$18
10803 26B9                        7E            .byte	$7E
10804 26BA                        00            .byte	0
10805 26BB                        00            .byte	0
10806 26BC                        00            .byte	0
10807 26BD                        00            .byte	0
10808                                           ! 1248  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10809 26BE                        00            .byte	0
10810 26BF                        00            .byte	0
10811 26C0                        18            .byte	$18
10812 26C1                        3C            .byte	$3C
10813 26C2                        7E            .byte	$7E
10814 26C3                        18            .byte	$18
10815 26C4                        18            .byte	$18
10816 26C5                        18            .byte	$18
10817 26C6                        18            .byte	$18
10818 26C7                        18            .byte	$18
10819 26C8                        18            .byte	$18
10820 26C9                        18            .byte	$18
10821 26CA                        00            .byte	0
10822 26CB                        00            .byte	0
10823 26CC                        00            .byte	0
10824 26CD                        00            .byte	0
10825                                           ! 1249  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
10826 26CE                        00            .byte	0
10827 26CF                        00            .byte	0
10828 26D0                        18            .byte	$18
10829 26D1                        18            .byte	$18
10830 26D2                        18            .byte	$18
10831 26D3                        18            .byte	$18
10832 26D4                        18            .byte	$18
10833 26D5                        18            .byte	$18
10834 26D6                        18            .byte	$18
10835 26D7                        7E            .byte	$7E
10836 26D8                        3C            .byte	$3C
10837 26D9                        18            .byte	$18
10838 26DA                        00            .byte	0
10839 26DB                        00            .byte	0
10840 26DC                        00            .byte	0
10841 26DD                        00            .byte	0
10842                                           ! 1250  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10843 26DE                        00            .byte	0
10844 26DF                        00            .byte	0
10845 26E0                        00            .byte	0
10846 26E1                        00            .byte	0
10847 26E2                        00            .byte	0
10848 26E3                        18            .byte	$18
10849 26E4                        0C            .byte	$C
10850 26E5                        FE            .byte	$FE
10851 26E6                        0C            .byte	$C
10852 26E7                        18            .byte	$18
10853 26E8                        00            .byte	0
10854 26E9                        00            .byte	0
10855 26EA                        00            .byte	0
10856 26EB                        00            .byte	0
10857 26EC                        00            .byte	0
10858 26ED                        00            .byte	0
10859                                           ! 1251  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10860 26EE                        00            .byte	0
10861 26EF                        00            .byte	0
10862 26F0                        00            .byte	0
10863 26F1                        00            .byte	0
10864 26F2                        00            .byte	0
10865 26F3                        30            .byte	$30
10866 26F4                        60            .byte	$60
10867 26F5                        FE            .byte	$FE
10868 26F6                        60            .byte	$60
10869 26F7                        30            .byte	$30
10870 26F8                        00            .byte	0
10871 26F9                        00            .byte	0
10872 26FA                        00            .byte	0
10873 26FB                        00            .byte	0
10874 26FC                        00            .byte	0
10875 26FD                        00            .byte	0
10876                                           ! 1252  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10877 26FE                        00            .byte	0
10878 26FF                        00            .byte	0
10879 2700                        00            .byte	0
10880 2701                        00            .byte	0
10881 2702                        00            .byte	0
10882 2703                        00            .byte	0
10883 2704                        C0            .byte	$C0
10884 2705                        C0            .byte	$C0
10885 2706                        C0            .byte	$C0
10886 2707                        FE            .byte	$FE
10887 2708                        00            .byte	0
10888 2709                        00            .byte	0
10889 270A                        00            .byte	0
10890 270B                        00            .byte	0
10891 270C                        00            .byte	0
10892 270D                        00            .byte	0
10893                                           ! 1253  0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x66, 0xff, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10894 270E                        00            .byte	0
10895 270F                        00            .byte	0
10896 2710                        00            .byte	0
10897 2711                        00            .byte	0
10898 2712                        00            .byte	0
10899 2713                        24            .byte	$24
10900 2714                        66            .byte	$66
10901 2715                        FF            .byte	$FF
10902 2716                        66            .byte	$66
10903 2717                        24            .byte	$24
10904 2718                        00            .byte	0
10905 2719                        00            .byte	0
10906 271A                        00            .byte	0
10907 271B                        00            .byte	0
10908 271C                        00            .byte	0
10909 271D                        00            .byte	0
10910                                           ! 1254  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x38, 0x7c, 0x7c, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
10911 271E                        00            .byte	0
10912 271F                        00            .byte	0
10913 2720                        00            .byte	0
10914 2721                        00            .byte	0
10915 2722                        10            .byte	$10
10916 2723                        38            .byte	$38
10917 2724                        38            .byte	$38
10918 2725                        7C            .byte	$7C
10919 2726                        7C            .byte	$7C
10920 2727                        FE            .byte	$FE
10921 2728                        FE            .byte	$FE
10922 2729                        00            .byte	0
10923 272A                        00            .byte	0
10924 272B                        00            .byte	0
10925 272C                        00            .byte	0
10926 272D                        00            .byte	0
10927                                           ! 1255  0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0x7c, 0x7c, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
10928 272E                        00            .byte	0
10929 272F                        00            .byte	0
10930 2730                        00            .byte	0
10931 2731                        00            .byte	0
10932 2732                        FE            .byte	$FE
10933 2733                        FE            .byte	$FE
10934 2734                        7C            .byte	$7C
10935 2735                        7C            .byte	$7C
10936 2736                        38            .byte	$38
10937 2737                        38            .byte	$38
10938 2738                        10            .byte	$10
10939 2739                        00            .byte	0
10940 273A                        00            .byte	0
10941 273B                        00            .byte	0
10942 273C                        00            .byte	0
10943 273D                        00            .byte	0
10944                                           ! 1256  0x00, 0x00, 0x00, 0
10945 273E                        00            .byte	0
10946 273F                        00            .byte	0
10947 2740                        00            .byte	0
10948                                           ! 1256 x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10949 2741                        00            .byte	0
10950 2742                        00            .byte	0
10951 2743                        00            .byte	0
10952 2744                        00            .byte	0
10953 2745                        00            .byte	0
10954 2746                        00            .byte	0
10955 2747                        00            .byte	0
10956 2748                        00            .byte	0
10957 2749                        00            .byte	0
10958 274A                        00            .byte	0
10959 274B                        00            .byte	0
10960 274C                        00            .byte	0
10961 274D                        00            .byte	0
10962                                           ! 1257  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10963 274E                        00            .byte	0
10964 274F                        00            .byte	0
10965 2750                        18            .byte	$18
10966 2751                        3C            .byte	$3C
10967 2752                        3C            .byte	$3C
10968 2753                        3C            .byte	$3C
10969 2754                        18            .byte	$18
10970 2755                        18            .byte	$18
10971 2756                        18            .byte	$18
10972 2757                        00            .byte	0
10973 2758                        18            .byte	$18
10974 2759                        18            .byte	$18
10975 275A                        00            .byte	0
10976 275B                        00            .byte	0
10977 275C                        00            .byte	0
10978 275D                        00            .byte	0
10979                                           ! 1258  0x00, 0x66, 0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10980 275E                        00            .byte	0
10981 275F                        66            .byte	$66
10982 2760                        66            .byte	$66
10983 2761                        66            .byte	$66
10984 2762                        24            .byte	$24
10985 2763                        00            .byte	0
10986 2764                        00            .byte	0
10987 2765                        00            .byte	0
10988 2766                        00            .byte	0
10989 2767                        00            .byte	0
10990 2768                        00            .byte	0
10991 2769                        00            .byte	0
10992 276A                        00            .byte	0
10993 276B                        00            .byte	0
10994 276C                        00            .byte	0
10995 276D                        00            .byte	0
10996                                           ! 1259  0x00, 0x00, 0x00, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00,
10997 276E                        00            .byte	0
10998 276F                        00            .byte	0
10999 2770                        00            .byte	0
11000 2771                        6C            .byte	$6C
11001 2772                        6C            .byte	$6C
11002 2773                        FE            .byte	$FE
11003 2774                        6C            .byte	$6C
11004 2775                        6C            .byte	$6C
11005 2776                        6C            .byte	$6C
11006 2777                        FE            .byte	$FE
11007 2778                        6C            .byte	$6C
11008 2779                        6C            .byte	$6C
11009 277A                        00            .byte	0
11010 277B                        00            .byte	0
11011 277C                        00            .byte	0
11012 277D                        00            .byte	0
11013                                           ! 1260  0x18, 0x18, 0x7c, 0xc6, 0xc2, 0xc0, 0x7c, 0x06, 0x06, 0x86, 0xc6, 0x7c, 0x18, 0x18, 0x00, 0x00,
11014 277E                        18            .byte	$18
11015 277F                        18            .byte	$18
11016 2780                        7C            .byte	$7C
11017 2781                        C6            .byte	$C6
11018 2782                        C2            .byte	$C2
11019 2783                        C0            .byte	$C0
11020 2784                        7C            .byte	$7C
11021 2785                        06            .byte	6
11022 2786                        06            .byte	6
11023 2787                        86            .byte	$86
11024 2788                        C6            .byte	$C6
11025 2789                        7C            .byte	$7C
11026 278A                        18            .byte	$18
11027 278B                        18            .byte	$18
11028 278C                        00            .byte	0
11029 278D                        00            .byte	0
11030                                           ! 1261  0x00, 0x00, 0x00, 0x00, 0xc2, 0xc6, 0x0c, 0x18, 0x30, 0x60, 0xc6, 0x86, 0x00, 0x00, 0x00, 0x00,
11031 278E                        00            .byte	0
11032 278F                        00            .byte	0
11033 2790                        00            .byte	0
11034 2791                        00            .byte	0
11035 2792                        C2            .byte	$C2
11036 2793                        C6            .byte	$C6
11037 2794                        0C            .byte	$C
11038 2795                        18            .byte	$18
11039 2796                        30            .byte	$30
11040 2797                        60            .byte	$60
11041 2798                        C6            .byte	$C6
11042 2799                        86            .byte	$86
11043 279A                        00            .byte	0
11044 279B                        00            .byte	0
11045 279C                        00            .byte	0
11046 279D                        00            .byte	0
11047                                           ! 1262  0x00, 0x00, 0x38, 0x6c, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
11048 279E                        00            .byte	0
11049 279F                        00            .byte	0
11050 27A0                        38            .byte	$38
11051 27A1                        6C            .byte	$6C
11052 27A2                        6C            .byte	$6C
11053 27A3                        38            .byte	$38
11054 27A4                        76            .byte	$76
11055 27A5                        DC            .byte	$DC
11056 27A6                        CC            .byte	$CC
11057 27A7                        CC            .byte	$CC
11058 27A8                        CC            .byte	$CC
11059 27A9                        76            .byte	$76
11060 27AA                        00            .byte	0
11061 27AB                        00            .byte	0
11062 27AC                        00            .byte	0
11063 27AD                        00            .byte	0
11064                                           ! 1263  0x00, 0x30, 0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11065 27AE                        00            .byte	0
11066 27AF                        30            .byte	$30
11067 27B0                        30            .byte	$30
11068 27B1                        30            .byte	$30
11069 27B2                        60            .byte	$60
11070 27B3                        00            .byte	0
11071 27B4                        00            .byte	0
11072 27B5                        00            .byte	0
11073 27B6                        00            .byte	0
11074 27B7                        00            .byte	0
11075 27B8                        00            .byte	0
11076 27B9                        00            .byte	0
11077 27BA                        00            .byte	0
11078 27BB                        00            .byte	0
11079 27BC                        00            .byte	0
11080 27BD                        00            .byte	0
11081                                           ! 1264  0x00, 0x00, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00, 0x00, 0x00, 0x00,
11082 27BE                        00            .byte	0
11083 27BF                        00            .byte	0
11084 27C0                        0C            .byte	$C
11085 27C1                        18            .byte	$18
11086 27C2                        30            .byte	$30
11087 27C3                        30            .byte	$30
11088 27C4                        30            .byte	$30
11089 27C5                        30            .byte	$30
11090 27C6                        30            .byte	$30
11091 27C7                        30            .byte	$30
11092 27C8                        18            .byte	$18
11093 27C9                        0C            .byte	$C
11094 27CA                        00            .byte	0
11095 27CB                        00            .byte	0
11096 27CC                        00            .byte	0
11097 27CD                        00            .byte	0
11098                                           ! 1265  0x00, 0x00, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00,
11099 27CE                        00            .byte	0
11100 27CF                        00            .byte	0
11101 27D0                        30            .byte	$30
11102 27D1                        18            .byte	$18
11103 27D2                        0C            .byte	$C
11104 27D3                        0C            .byte	$C
11105 27D4                        0C            .byte	$C
11106 27D5                        0C            .byte	$C
11107 27D6                        0C            .byte	$C
11108 27D7                        0C            .byte	$C
11109 27D8                        18            .byte	$18
11110 27D9                        30            .byte	$30
11111 27DA                        00            .byte	0
11112 27DB                        00            .byte	0
11113 27DC                        00            .byte	0
11114 27DD                        00            .byte	0
11115                                           ! 1266  0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11116 27DE                        00            .byte	0
11117 27DF                        00            .byte	0
11118 27E0                        00            .byte	0
11119 27E1                        00            .byte	0
11120 27E2                        00            .byte	0
11121 27E3                        66            .byte	$66
11122 27E4                        3C            .byte	$3C
11123 27E5                        FF            .byte	$FF
11124 27E6                        3C            .byte	$3C
11125 27E7                        66            .byte	$66
11126 27E8                        00            .byte	0
11127 27E9                        00            .byte	0
11128 27EA                        00            .byte	0
11129 27EB                        00            .byte	0
11130 27EC                        00            .byte	0
11131 27ED                        00            .byte	0
11132                                           ! 1267  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11133 27EE                        00            .byte	0
11134 27EF                        00            .byte	0
11135 27F0                        00            .byte	0
11136 27F1                        00            .byte	0
11137 27F2                        00            .byte	0
11138 27F3                        18            .byte	$18
11139 27F4                        18            .byte	$18
11140 27F5                        7E            .byte	$7E
11141 27F6                        18            .byte	$18
11142 27F7                        18            .byte	$18
11143 27F8                        00            .byte	0
11144 27F9                        00            .byte	0
11145 27FA                        00            .byte	0
11146 27FB                        00            .byte	0
11147 27FC                        00            .byte	0
11148 27FD                        00            .byte	0
11149                                           ! 1268  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00,
11150 27FE                        00            .byte	0
11151 27FF                        00            .byte	0
11152 2800                        00            .byte	0
11153 2801                        00            .byte	0
11154 2802                        00            .byte	0
11155 2803                        00            .byte	0
11156 2804                        00            .byte	0
11157 2805                        00            .byte	0
11158 2806                        00            .byte	0
11159 2807                        18            .byte	$18
11160 2808                        18            .byte	$18
11161 2809                        18            .byte	$18
11162 280A                        30            .byte	$30
11163 280B                        00            .byte	0
11164 280C                        00            .byte	0
11165 280D                        00            .byte	0
11166                                           ! 1269  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11167 280E                        00            .byte	0
11168 280F                        00            .byte	0
11169 2810                        00            .byte	0
11170 2811                        00            .byte	0
11171 2812                        00            .byte	0
11172 2813                        00            .byte	0
11173 2814                        00            .byte	0
11174 2815                        FE            .byte	$FE
11175 2816                        00            .byte	0
11176 2817                        00            .byte	0
11177 2818                        00            .byte	0
11178 2819                        00            .byte	0
11179 281A                        00            .byte	0
11180 281B                        00            .byte	0
11181 281C                        00            .byte	0
11182 281D                        00            .byte	0
11183                                           ! 1270  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11184 281E                        00            .byte	0
11185 281F                        00            .byte	0
11186 2820                        00            .byte	0
11187 2821                        00            .byte	0
11188 2822                        00            .byte	0
11189 2823                        00            .byte	0
11190 2824                        00            .byte	0
11191 2825                        00            .byte	0
11192 2826                        00            .byte	0
11193 2827                        00            .byte	0
11194 2828                        18            .byte	$18
11195 2829                        18            .byte	$18
11196 282A                        00            .byte	0
11197 282B                        00            .byte	0
11198 282C                        00            .byte	0
11199 282D                        00            .byte	0
11200                                           ! 1271  0x00, 0x00, 0x00, 0x00, 0x02, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
11201 282E                        00            .byte	0
11202 282F                        00            .byte	0
11203 2830                        00            .byte	0
11204 2831                        00            .byte	0
11205 2832                        02            .byte	2
11206 2833                        06            .byte	6
11207 2834                        0C            .byte	$C
11208 2835                        18            .byte	$18
11209 2836                        30            .byte	$30
11210 2837                        60            .byte	$60
11211 2838                        C0            .byte	$C0
11212 2839                        80            .byte	$80
11213 283A                        00            .byte	0
11214 283B                        00            .byte	0
11215 283C                        00            .byte	0
11216 283D                        00            .byte	0
11217                                           ! 1272  0x00, 0x00, 0x3c, 0x66, 0xc3, 0xc3, 0xdb, 0xdb, 0xc3, 0xc3, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
11218 283E                        00            .byte	0
11219 283F                        00            .byte	0
11220 2840                        3C            .byte	$3C
11221 2841                        66            .byte	$66
11222 2842                        C3            .byte	$C3
11223 2843                        C3            .byte	$C3
11224 2844                        DB            .byte	$DB
11225 2845                        DB            .byte	$DB
11226 2846                        C3            .byte	$C3
11227 2847                        C3            .byte	$C3
11228 2848                        66            .byte	$66
11229 2849                        3C            .byte	$3C
11230 284A                        00            .byte	0
11231 284B                        00            .byte	0
11232 284C                        00            .byte	0
11233 284D                        00            .byte	0
11234                                           ! 1273  0x00, 0x00, 0x18, 0x38, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
11235 284E                        00            .byte	0
11236 284F                        00            .byte	0
11237 2850                        18            .byte	$18
11238 2851                        38            .byte	$38
11239 2852                        78            .byte	$78
11240 2853                        18            .byte	$18
11241 2854                        18            .byte	$18
11242 2855                        18            .byte	$18
11243 2856                        18            .byte	$18
11244 2857                        18            .byte	$18
11245 2858                        18            .byte	$18
11246 2859                        7E            .byte	$7E
11247 285A                        00            .byte	0
11248 285B                        00            .byte	0
11249 285C                        00            .byte	0
11250 285D                        00            .byte	0
11251                                           ! 1274  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
11252 285E                        00            .byte	0
11253 285F                        00            .byte	0
11254 2860                        7C            .byte	$7C
11255 2861                        C6            .byte	$C6
11256 2862                        06            .byte	6
11257 2863                        0C            .byte	$C
11258 2864                        18            .byte	$18
11259 2865                        30            .byte	$30
11260 2866                        60            .byte	$60
11261 2867                        C0            .byte	$C0
11262 2868                        C6            .byte	$C6
11263 2869                        FE            .byte	$FE
11264 286A                        00            .byte	0
11265 286B                        00            .byte	0
11266 286C                        00            .byte	0
11267 286D                        00            .byte	0
11268                                           ! 1275  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x06, 0x3c, 0x06, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11269 286E                        00            .byte	0
11270 286F                        00            .byte	0
11271 2870                        7C            .byte	$7C
11272 2871                        C6            .byte	$C6
11273 2872                        06            .byte	6
11274 2873                        06            .byte	6
11275 2874                        3C            .byte	$3C
11276 2875                        06            .byte	6
11277 2876                        06            .byte	6
11278 2877                        06            .byte	6
11279 2878                        C6            .byte	$C6
11280 2879                        7C            .byte	$7C
11281 287A                        00            .byte	0
11282 287B                        00            .byte	0
11283 287C                        00            .byte	0
11284 287D                        00            .byte	0
11285                                           ! 1276  0x00, 0x00, 0x0c, 0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x0c, 0x0c, 0x1e, 0x00, 0x00, 0x00, 0x00,
11286 287E                        00            .byte	0
11287 287F                        00            .byte	0
11288 2880                        0C            .byte	$C
11289 2881                        1C            .byte	$1C
11290 2882                        3C            .byte	$3C
11291 2883                        6C            .byte	$6C
11292 2884                        CC            .byte	$CC
11293 2885                        FE            .byte	$FE
11294 2886                        0C            .byte	$C
11295 2887                        0C            .byte	$C
11296 2888                        0C            .byte	$C
11297 2889                        1E            .byte	$1E
11298 288A                        00            .byte	0
11299 288B                        00            .byte	0
11300 288C                        00            .byte	0
11301 288D                        00            .byte	0
11302                                           ! 1277  0x00, 0x00, 0xfe, 0xc0, 0xc0, 
11303 288E                        00            .byte	0
11304 288F                        00            .byte	0
11305 2890                        FE            .byte	$FE
11306 2891                        C0            .byte	$C0
11307 2892                        C0            .byte	$C0
11308                                           ! 1277 0xc0, 0xfc, 0x06, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11309 2893                        C0            .byte	$C0
11310 2894                        FC            .byte	$FC
11311 2895                        06            .byte	6
11312 2896                        06            .byte	6
11313 2897                        06            .byte	6
11314 2898                        C6            .byte	$C6
11315 2899                        7C            .byte	$7C
11316 289A                        00            .byte	0
11317 289B                        00            .byte	0
11318 289C                        00            .byte	0
11319 289D                        00            .byte	0
11320                                           ! 1278  0x00, 0x00, 0x38, 0x60, 0xc0, 0xc0, 0xfc, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11321 289E                        00            .byte	0
11322 289F                        00            .byte	0
11323 28A0                        38            .byte	$38
11324 28A1                        60            .byte	$60
11325 28A2                        C0            .byte	$C0
11326 28A3                        C0            .byte	$C0
11327 28A4                        FC            .byte	$FC
11328 28A5                        C6            .byte	$C6
11329 28A6                        C6            .byte	$C6
11330 28A7                        C6            .byte	$C6
11331 28A8                        C6            .byte	$C6
11332 28A9                        7C            .byte	$7C
11333 28AA                        00            .byte	0
11334 28AB                        00            .byte	0
11335 28AC                        00            .byte	0
11336 28AD                        00            .byte	0
11337                                           ! 1279  0x00, 0x00, 0xfe, 0xc6, 0x06, 0x06, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00,
11338 28AE                        00            .byte	0
11339 28AF                        00            .byte	0
11340 28B0                        FE            .byte	$FE
11341 28B1                        C6            .byte	$C6
11342 28B2                        06            .byte	6
11343 28B3                        06            .byte	6
11344 28B4                        0C            .byte	$C
11345 28B5                        18            .byte	$18
11346 28B6                        30            .byte	$30
11347 28B7                        30            .byte	$30
11348 28B8                        30            .byte	$30
11349 28B9                        30            .byte	$30
11350 28BA                        00            .byte	0
11351 28BB                        00            .byte	0
11352 28BC                        00            .byte	0
11353 28BD                        00            .byte	0
11354                                           ! 1280  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11355 28BE                        00            .byte	0
11356 28BF                        00            .byte	0
11357 28C0                        7C            .byte	$7C
11358 28C1                        C6            .byte	$C6
11359 28C2                        C6            .byte	$C6
11360 28C3                        C6            .byte	$C6
11361 28C4                        7C            .byte	$7C
11362 28C5                        C6            .byte	$C6
11363 28C6                        C6            .byte	$C6
11364 28C7                        C6            .byte	$C6
11365 28C8                        C6            .byte	$C6
11366 28C9                        7C            .byte	$7C
11367 28CA                        00            .byte	0
11368 28CB                        00            .byte	0
11369 28CC                        00            .byte	0
11370 28CD                        00            .byte	0
11371                                           ! 1281  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x06, 0x06, 0x0c, 0x78, 0x00, 0x00, 0x00, 0x00,
11372 28CE                        00            .byte	0
11373 28CF                        00            .byte	0
11374 28D0                        7C            .byte	$7C
11375 28D1                        C6            .byte	$C6
11376 28D2                        C6            .byte	$C6
11377 28D3                        C6            .byte	$C6
11378 28D4                        7E            .byte	$7E
11379 28D5                        06            .byte	6
11380 28D6                        06            .byte	6
11381 28D7                        06            .byte	6
11382 28D8                        0C            .byte	$C
11383 28D9                        78            .byte	$78
11384 28DA                        00            .byte	0
11385 28DB                        00            .byte	0
11386 28DC                        00            .byte	0
11387 28DD                        00            .byte	0
11388                                           ! 1282  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
11389 28DE                        00            .byte	0
11390 28DF                        00            .byte	0
11391 28E0                        00            .byte	0
11392 28E1                        00            .byte	0
11393 28E2                        18            .byte	$18
11394 28E3                        18            .byte	$18
11395 28E4                        00            .byte	0
11396 28E5                        00            .byte	0
11397 28E6                        00            .byte	0
11398 28E7                        18            .byte	$18
11399 28E8                        18            .byte	$18
11400 28E9                        00            .byte	0
11401 28EA                        00            .byte	0
11402 28EB                        00            .byte	0
11403 28EC                        00            .byte	0
11404 28ED                        00            .byte	0
11405                                           ! 1283  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00,
11406 28EE                        00            .byte	0
11407 28EF                        00            .byte	0
11408 28F0                        00            .byte	0
11409 28F1                        00            .byte	0
11410 28F2                        18            .byte	$18
11411 28F3                        18            .byte	$18
11412 28F4                        00            .byte	0
11413 28F5                        00            .byte	0
11414 28F6                        00            .byte	0
11415 28F7                        18            .byte	$18
11416 28F8                        18            .byte	$18
11417 28F9                        30            .byte	$30
11418 28FA                        00            .byte	0
11419 28FB                        00            .byte	0
11420 28FC                        00            .byte	0
11421 28FD                        00            .byte	0
11422                                           ! 1284  0x00, 0x00, 0x00, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x00, 0x00, 0x00, 0x00,
11423 28FE                        00            .byte	0
11424 28FF                        00            .byte	0
11425 2900                        00            .byte	0
11426 2901                        06            .byte	6
11427 2902                        0C            .byte	$C
11428 2903                        18            .byte	$18
11429 2904                        30            .byte	$30
11430 2905                        60            .byte	$60
11431 2906                        30            .byte	$30
11432 2907                        18            .byte	$18
11433 2908                        0C            .byte	$C
11434 2909                        06            .byte	6
11435 290A                        00            .byte	0
11436 290B                        00            .byte	0
11437 290C                        00            .byte	0
11438 290D                        00            .byte	0
11439                                           ! 1285  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11440 290E                        00            .byte	0
11441 290F                        00            .byte	0
11442 2910                        00            .byte	0
11443 2911                        00            .byte	0
11444 2912                        00            .byte	0
11445 2913                        7E            .byte	$7E
11446 2914                        00            .byte	0
11447 2915                        00            .byte	0
11448 2916                        7E            .byte	$7E
11449 2917                        00            .byte	0
11450 2918                        00            .byte	0
11451 2919                        00            .byte	0
11452 291A                        00            .byte	0
11453 291B                        00            .byte	0
11454 291C                        00            .byte	0
11455 291D                        00            .byte	0
11456                                           ! 1286  0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00,
11457 291E                        00            .byte	0
11458 291F                        00            .byte	0
11459 2920                        00            .byte	0
11460 2921                        60            .byte	$60
11461 2922                        30            .byte	$30
11462 2923                        18            .byte	$18
11463 2924                        0C            .byte	$C
11464 2925                        06            .byte	6
11465 2926                        0C            .byte	$C
11466 2927                        18            .byte	$18
11467 2928                        30            .byte	$30
11468 2929                        60            .byte	$60
11469 292A                        00            .byte	0
11470 292B                        00            .byte	0
11471 292C                        00            .byte	0
11472 292D                        00            .byte	0
11473                                           ! 1287  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x0c, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11474 292E                        00            .byte	0
11475 292F                        00            .byte	0
11476 2930                        7C            .byte	$7C
11477 2931                        C6            .byte	$C6
11478 2932                        C6            .byte	$C6
11479 2933                        0C            .byte	$C
11480 2934                        18            .byte	$18
11481 2935                        18            .byte	$18
11482 2936                        18            .byte	$18
11483 2937                        00            .byte	0
11484 2938                        18            .byte	$18
11485 2939                        18            .byte	$18
11486 293A                        00            .byte	0
11487 293B                        00            .byte	0
11488 293C                        00            .byte	0
11489 293D                        00            .byte	0
11490                                           ! 1288  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xde, 0xde, 0xde, 0xdc, 0xc0, 0x7c, 0x00, 0x00, 0x00, 0x00,
11491 293E                        00            .byte	0
11492 293F                        00            .byte	0
11493 2940                        00            .byte	0
11494 2941                        7C            .byte	$7C
11495 2942                        C6            .byte	$C6
11496 2943                        C6            .byte	$C6
11497 2944                        DE            .byte	$DE
11498 2945                        DE            .byte	$DE
11499 2946                        DE            .byte	$DE
11500 2947                        DC            .byte	$DC
11501 2948                        C0            .byte	$C0
11502 2949                        7C            .byte	$7C
11503 294A                        00            .byte	0
11504 294B                        00            .byte	0
11505 294C                        00            .byte	0
11506 294D                        00            .byte	0
11507                                           ! 1289  0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
11508 294E                        00            .byte	0
11509 294F                        00            .byte	0
11510 2950                        10            .byte	$10
11511 2951                        38            .byte	$38
11512 2952                        6C            .byte	$6C
11513 2953                        C6            .byte	$C6
11514 2954                        C6            .byte	$C6
11515 2955                        FE            .byte	$FE
11516 2956                        C6            .byte	$C6
11517 2957                        C6            .byte	$C6
11518 2958                        C6            .byte	$C6
11519 2959                        C6            .byte	$C6
11520 295A                        00            .byte	0
11521 295B                        00            .byte	0
11522 295C                        00            .byte	0
11523 295D                        00            .byte	0
11524                                           ! 1290  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x66, 0x66, 0x66, 0x66, 0xfc, 0x00, 0x00, 0x00, 0x00,
11525 295E                        00            .byte	0
11526 295F                        00            .byte	0
11527 2960                        FC            .byte	$FC
11528 2961                        66            .byte	$66
11529 2962                        66            .byte	$66
11530 2963                        66            .byte	$66
11531 2964                        7C            .byte	$7C
11532 2965                        66            .byte	$66
11533 2966                        66            .byte	$66
11534 2967                        66            .byte	$66
11535 2968                        66            .byte	$66
11536 2969                        FC            .byte	$FC
11537 296A                        00            .byte	0
11538 296B                        00            .byte	0
11539 296C                        00            .byte	0
11540 296D                        00            .byte	0
11541                                           ! 1291  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
11542 296E                        00            .byte	0
11543 296F                        00            .byte	0
11544 2970                        3C            .byte	$3C
11545 2971                        66            .byte	$66
11546 2972                        C2            .byte	$C2
11547 2973                        C0            .byte	$C0
11548 2974                        C0            .byte	$C0
11549 2975                        C0            .byte	$C0
11550 2976                        C0            .byte	$C0
11551 2977                        C2            .byte	$C2
11552 2978                        66            .byte	$66
11553 2979                        3C            .byte	$3C
11554 297A                        00            .byte	0
11555 297B                        00            .byte	0
11556 297C                        00            .byte	0
11557 297D                        00            .byte	0
11558                                           ! 1292  0x00, 0x00, 0xf8, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00, 0x00, 0x00, 0x00,
11559 297E                        00            .byte	0
11560 297F                        00            .byte	0
11561 2980                        F8            .byte	$F8
11562 2981                        6C            .byte	$6C
11563 2982                        66            .byte	$66
11564 2983                        66            .byte	$66
11565 2984                        66            .byte	$66
11566 2985                        66            .byte	$66
11567 2986                        66            .byte	$66
11568 2987                        66            .byte	$66
11569 2988                        6C            .byte	$6C
11570 2989                        F8            .byte	$F8
11571 298A                        00            .byte	0
11572 298B                        00            .byte	0
11573 298C                        00            .byte	0
11574 298D                        00            .byte	0
11575                                           ! 1293  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
11576 298E                        00            .byte	0
11577 298F                        00            .byte	0
11578 2990                        FE            .byte	$FE
11579 2991                        66            .byte	$66
11580 2992                        62            .byte	$62
11581 2993                        68            .byte	$68
11582 2994                        78            .byte	$78
11583 2995                        68            .byte	$68
11584 2996                        60            .byte	$60
11585 2997                        62            .byte	$62
11586 2998                        66            .byte	$66
11587 2999                        FE            .byte	$FE
11588 299A                        00            .byte	0
11589 299B                        00            .byte	0
11590 299C                        00            .byte	0
11591 299D                        00            .byte	0
11592                                           ! 1294  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
11593 299E                        00            .byte	0
11594 299F                        00            .byte	0
11595 29A0                        FE            .byte	$FE
11596 29A1                        66            .byte	$66
11597 29A2                        62            .byte	$62
11598 29A3                        68            .byte	$68
11599 29A4                        78            .byte	$78
11600 29A5                        68            .byte	$68
11601 29A6                        60            .byte	$60
11602 29A7                        60            .byte	$60
11603 29A8                        60            .byte	$60
11604 29A9                        F0            .byte	$F0
11605 29AA                        00            .byte	0
11606 29AB                        00            .byte	0
11607 29AC                        00            .byte	0
11608 29AD                        00            .byte	0
11609                                           ! 1295  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xde, 0xc6, 0xc6, 0x66, 0x3a, 0x00, 0x00, 0x00, 0x00,
11610 29AE                        00            .byte	0
11611 29AF                        00            .byte	0
11612 29B0                        3C            .byte	$3C
11613 29B1                        66            .byte	$66
11614 29B2                        C2            .byte	$C2
11615 29B3                        C0            .byte	$C0
11616 29B4                        C0            .byte	$C0
11617 29B5                        DE            .byte	$DE
11618 29B6                        C6            .byte	$C6
11619 29B7                        C6            .byte	$C6
11620 29B8                        66            .byte	$66
11621 29B9                        3A            .byte	$3A
11622 29BA                        00            .byte	0
11623 29BB                        00            .byte	0
11624 29BC                        00            .byte	0
11625 29BD                        00            .byte	0
11626                                           ! 1296  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
11627 29BE                        00            .byte	0
11628 29BF                        00            .byte	0
11629 29C0                        C6            .byte	$C6
11630 29C1                        C6            .byte	$C6
11631 29C2                        C6            .byte	$C6
11632 29C3                        C6            .byte	$C6
11633 29C4                        FE            .byte	$FE
11634 29C5                        C6            .byte	$C6
11635 29C6                        C6            .byte	$C6
11636 29C7                        C6            .byte	$C6
11637 29C8                        C6            .byte	$C6
11638 29C9                        C6            .byte	$C6
11639 29CA                        00            .byte	0
11640 29CB                        00            .byte	0
11641 29CC                        00            .byte	0
11642 29CD                        00            .byte	0
11643                                           ! 1297  0x00, 0x00, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
11644 29CE                        00            .byte	0
11645 29CF                        00            .byte	0
11646 29D0                        3C            .byte	$3C
11647 29D1                        18            .byte	$18
11648 29D2                        18            .byte	$18
11649 29D3                        18            .byte	$18
11650 29D4                        18            .byte	$18
11651 29D5                        18            .byte	$18
11652 29D6                        18            .byte	$18
11653 29D7                        18            .byte	$18
11654 29D8                        18            .byte	$18
11655 29D9                        3C            .byte	$3C
11656 29DA                        00            .byte	0
11657 29DB                        00            .byte	0
11658 29DC                        00            .byte	0
11659 29DD                        00            .byte	0
11660                                           ! 1298  0x00, 0x00, 0x1e, 0x0c, 0x0c, 0x0c, 0x0c,
11661 29DE                        00            .byte	0
11662 29DF                        00            .byte	0
11663 29E0                        1E            .byte	$1E
11664 29E1                        0C            .byte	$C
11665 29E2                        0C            .byte	$C
11666 29E3                        0C            .byte	$C
11667                                           ! 1298  0x0c, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00, 0x00,
11668 29E4                        0C            .byte	$C
11669 29E5                        0C            .byte	$C
11670 29E6                        CC            .byte	$CC
11671 29E7                        CC            .byte	$CC
11672 29E8                        CC            .byte	$CC
11673 29E9                        78            .byte	$78
11674 29EA                        00            .byte	0
11675 29EB                        00            .byte	0
11676 29EC                        00            .byte	0
11677 29ED                        00            .byte	0
11678                                           ! 1299  0x00, 0x00, 0xe6, 0x66, 0x66, 0x6c, 0x78, 0x78, 0x6c, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
11679 29EE                        00            .byte	0
11680 29EF                        00            .byte	0
11681 29F0                        E6            .byte	$E6
11682 29F1                        66            .byte	$66
11683 29F2                        66            .byte	$66
11684 29F3                        6C            .byte	$6C
11685 29F4                        78            .byte	$78
11686 29F5                        78            .byte	$78
11687 29F6                        6C            .byte	$6C
11688 29F7                        66            .byte	$66
11689 29F8                        66            .byte	$66
11690 29F9                        E6            .byte	$E6
11691 29FA                        00            .byte	0
11692 29FB                        00            .byte	0
11693 29FC                        00            .byte	0
11694 29FD                        00            .byte	0
11695                                           ! 1300  0x00, 0x00, 0xf0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
11696 29FE                        00            .byte	0
11697 29FF                        00            .byte	0
11698 2A00                        F0            .byte	$F0
11699 2A01                        60            .byte	$60
11700 2A02                        60            .byte	$60
11701 2A03                        60            .byte	$60
11702 2A04                        60            .byte	$60
11703 2A05                        60            .byte	$60
11704 2A06                        60            .byte	$60
11705 2A07                        62            .byte	$62
11706 2A08                        66            .byte	$66
11707 2A09                        FE            .byte	$FE
11708 2A0A                        00            .byte	0
11709 2A0B                        00            .byte	0
11710 2A0C                        00            .byte	0
11711 2A0D                        00            .byte	0
11712                                           ! 1301  0x00, 0x00, 0xc3, 0xe7, 0xff, 0xff, 0xdb, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x00, 0x00, 0x00, 0x00,
11713 2A0E                        00            .byte	0
11714 2A0F                        00            .byte	0
11715 2A10                        C3            .byte	$C3
11716 2A11                        E7            .byte	$E7
11717 2A12                        FF            .byte	$FF
11718 2A13                        FF            .byte	$FF
11719 2A14                        DB            .byte	$DB
11720 2A15                        C3            .byte	$C3
11721 2A16                        C3            .byte	$C3
11722 2A17                        C3            .byte	$C3
11723 2A18                        C3            .byte	$C3
11724 2A19                        C3            .byte	$C3
11725 2A1A                        00            .byte	0
11726 2A1B                        00            .byte	0
11727 2A1C                        00            .byte	0
11728 2A1D                        00            .byte	0
11729                                           ! 1302  0x00, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
11730 2A1E                        00            .byte	0
11731 2A1F                        00            .byte	0
11732 2A20                        C6            .byte	$C6
11733 2A21                        E6            .byte	$E6
11734 2A22                        F6            .byte	$F6
11735 2A23                        FE            .byte	$FE
11736 2A24                        DE            .byte	$DE
11737 2A25                        CE            .byte	$CE
11738 2A26                        C6            .byte	$C6
11739 2A27                        C6            .byte	$C6
11740 2A28                        C6            .byte	$C6
11741 2A29                        C6            .byte	$C6
11742 2A2A                        00            .byte	0
11743 2A2B                        00            .byte	0
11744 2A2C                        00            .byte	0
11745 2A2D                        00            .byte	0
11746                                           ! 1303  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11747 2A2E                        00            .byte	0
11748 2A2F                        00            .byte	0
11749 2A30                        7C            .byte	$7C
11750 2A31                        C6            .byte	$C6
11751 2A32                        C6            .byte	$C6
11752 2A33                        C6            .byte	$C6
11753 2A34                        C6            .byte	$C6
11754 2A35                        C6            .byte	$C6
11755 2A36                        C6            .byte	$C6
11756 2A37                        C6            .byte	$C6
11757 2A38                        C6            .byte	$C6
11758 2A39                        7C            .byte	$7C
11759 2A3A                        00            .byte	0
11760 2A3B                        00            .byte	0
11761 2A3C                        00            .byte	0
11762 2A3D                        00            .byte	0
11763                                           ! 1304  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
11764 2A3E                        00            .byte	0
11765 2A3F                        00            .byte	0
11766 2A40                        FC            .byte	$FC
11767 2A41                        66            .byte	$66
11768 2A42                        66            .byte	$66
11769 2A43                        66            .byte	$66
11770 2A44                        7C            .byte	$7C
11771 2A45                        60            .byte	$60
11772 2A46                        60            .byte	$60
11773 2A47                        60            .byte	$60
11774 2A48                        60            .byte	$60
11775 2A49                        F0            .byte	$F0
11776 2A4A                        00            .byte	0
11777 2A4B                        00            .byte	0
11778 2A4C                        00            .byte	0
11779 2A4D                        00            .byte	0
11780                                           ! 1305  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xde, 0x7c, 0x0c, 0x0e, 0x00, 0x00,
11781 2A4E                        00            .byte	0
11782 2A4F                        00            .byte	0
11783 2A50                        7C            .byte	$7C
11784 2A51                        C6            .byte	$C6
11785 2A52                        C6            .byte	$C6
11786 2A53                        C6            .byte	$C6
11787 2A54                        C6            .byte	$C6
11788 2A55                        C6            .byte	$C6
11789 2A56                        C6            .byte	$C6
11790 2A57                        D6            .byte	$D6
11791 2A58                        DE            .byte	$DE
11792 2A59                        7C            .byte	$7C
11793 2A5A                        0C            .byte	$C
11794 2A5B                        0E            .byte	$E
11795 2A5C                        00            .byte	0
11796 2A5D                        00            .byte	0
11797                                           ! 1306  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
11798 2A5E                        00            .byte	0
11799 2A5F                        00            .byte	0
11800 2A60                        FC            .byte	$FC
11801 2A61                        66            .byte	$66
11802 2A62                        66            .byte	$66
11803 2A63                        66            .byte	$66
11804 2A64                        7C            .byte	$7C
11805 2A65                        6C            .byte	$6C
11806 2A66                        66            .byte	$66
11807 2A67                        66            .byte	$66
11808 2A68                        66            .byte	$66
11809 2A69                        E6            .byte	$E6
11810 2A6A                        00            .byte	0
11811 2A6B                        00            .byte	0
11812 2A6C                        00            .byte	0
11813 2A6D                        00            .byte	0
11814                                           ! 1307  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x60, 0x38, 0x0c, 0x06, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11815 2A6E                        00            .byte	0
11816 2A6F                        00            .byte	0
11817 2A70                        7C            .byte	$7C
11818 2A71                        C6            .byte	$C6
11819 2A72                        C6            .byte	$C6
11820 2A73                        60            .byte	$60
11821 2A74                        38            .byte	$38
11822 2A75                        0C            .byte	$C
11823 2A76                        06            .byte	6
11824 2A77                        C6            .byte	$C6
11825 2A78                        C6            .byte	$C6
11826 2A79                        7C            .byte	$7C
11827 2A7A                        00            .byte	0
11828 2A7B                        00            .byte	0
11829 2A7C                        00            .byte	0
11830 2A7D                        00            .byte	0
11831                                           ! 1308  0x00, 0x00, 0xff, 0xdb, 0x99, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
11832 2A7E                        00            .byte	0
11833 2A7F                        00            .byte	0
11834 2A80                        FF            .byte	$FF
11835 2A81                        DB            .byte	$DB
11836 2A82                        99            .byte	$99
11837 2A83                        18            .byte	$18
11838 2A84                        18            .byte	$18
11839 2A85                        18            .byte	$18
11840 2A86                        18            .byte	$18
11841 2A87                        18            .byte	$18
11842 2A88                        18            .byte	$18
11843 2A89                        3C            .byte	$3C
11844 2A8A                        00            .byte	0
11845 2A8B                        00            .byte	0
11846 2A8C                        00            .byte	0
11847 2A8D                        00            .byte	0
11848                                           ! 1309  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11849 2A8E                        00            .byte	0
11850 2A8F                        00            .byte	0
11851 2A90                        C6            .byte	$C6
11852 2A91                        C6            .byte	$C6
11853 2A92                        C6            .byte	$C6
11854 2A93                        C6            .byte	$C6
11855 2A94                        C6            .byte	$C6
11856 2A95                        C6            .byte	$C6
11857 2A96                        C6            .byte	$C6
11858 2A97                        C6            .byte	$C6
11859 2A98                        C6            .byte	$C6
11860 2A99                        7C            .byte	$7C
11861 2A9A                        00            .byte	0
11862 2A9B                        00            .byte	0
11863 2A9C                        00            .byte	0
11864 2A9D                        00            .byte	0
11865                                           ! 1310  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
11866 2A9E                        00            .byte	0
11867 2A9F                        00            .byte	0
11868 2AA0                        C3            .byte	$C3
11869 2AA1                        C3            .byte	$C3
11870 2AA2                        C3            .byte	$C3
11871 2AA3                        C3            .byte	$C3
11872 2AA4                        C3            .byte	$C3
11873 2AA5                        C3            .byte	$C3
11874 2AA6                        C3            .byte	$C3
11875 2AA7                        66            .byte	$66
11876 2AA8                        3C            .byte	$3C
11877 2AA9                        18            .byte	$18
11878 2AAA                        00            .byte	0
11879 2AAB                        00            .byte	0
11880 2AAC                        00            .byte	0
11881 2AAD                        00            .byte	0
11882                                           ! 1311  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xdb, 0xdb, 0xff, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
11883 2AAE                        00            .byte	0
11884 2AAF                        00            .byte	0
11885 2AB0                        C3            .byte	$C3
11886 2AB1                        C3            .byte	$C3
11887 2AB2                        C3            .byte	$C3
11888 2AB3                        C3            .byte	$C3
11889 2AB4                        C3            .byte	$C3
11890 2AB5                        DB            .byte	$DB
11891 2AB6                        DB            .byte	$DB
11892 2AB7                        FF            .byte	$FF
11893 2AB8                        66            .byte	$66
11894 2AB9                        66            .byte	$66
11895 2ABA                        00            .byte	0
11896 2ABB                        00            .byte	0
11897 2ABC                        00            .byte	0
11898 2ABD                        00            .byte	0
11899                                           ! 1312  0x00, 0x00, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x18, 0x3c, 0x66, 0xc3, 0xc3, 0x00, 0x00, 0x00, 0x00,
11900 2ABE                        00            .byte	0
11901 2ABF                        00            .byte	0
11902 2AC0                        C3            .byte	$C3
11903 2AC1                        C3            .byte	$C3
11904 2AC2                        66            .byte	$66
11905 2AC3                        3C            .byte	$3C
11906 2AC4                        18            .byte	$18
11907 2AC5                        18            .byte	$18
11908 2AC6                        3C            .byte	$3C
11909 2AC7                        66            .byte	$66
11910 2AC8                        C3            .byte	$C3
11911 2AC9                        C3            .byte	$C3
11912 2ACA                        00            .byte	0
11913 2ACB                        00            .byte	0
11914 2ACC                        00            .byte	0
11915 2ACD                        00            .byte	0
11916                                           ! 1313  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
11917 2ACE                        00            .byte	0
11918 2ACF                        00            .byte	0
11919 2AD0                        C3            .byte	$C3
11920 2AD1                        C3            .byte	$C3
11921 2AD2                        C3            .byte	$C3
11922 2AD3                        66            .byte	$66
11923 2AD4                        3C            .byte	$3C
11924 2AD5                        18            .byte	$18
11925 2AD6                        18            .byte	$18
11926 2AD7                        18            .byte	$18
11927 2AD8                        18            .byte	$18
11928 2AD9                        3C            .byte	$3C
11929 2ADA                        00            .byte	0
11930 2ADB                        00            .byte	0
11931 2ADC                        00            .byte	0
11932 2ADD                        00            .byte	0
11933                                           ! 1314  0x00, 0x00, 0xff, 0xc3, 0x86, 0x0c, 0x18, 0x30, 0x60, 0xc1, 0xc3, 0xff, 0x00, 0x00, 0x00, 0x00,
11934 2ADE                        00            .byte	0
11935 2ADF                        00            .byte	0
11936 2AE0                        FF            .byte	$FF
11937 2AE1                        C3            .byte	$C3
11938 2AE2                        86            .byte	$86
11939 2AE3                        0C            .byte	$C
11940 2AE4                        18            .byte	$18
11941 2AE5                        30            .byte	$30
11942 2AE6                        60            .byte	$60
11943 2AE7                        C1            .byte	$C1
11944 2AE8                        C3            .byte	$C3
11945 2AE9                        FF            .byte	$FF
11946 2AEA                        00            .byte	0
11947 2AEB                        00            .byte	0
11948 2AEC                        00            .byte	0
11949 2AED                        00            .byte	0
11950                                           ! 1315  0x00, 0x00, 0x3c, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3c, 0x00, 0x00, 0x00, 0x00,
11951 2AEE                        00            .byte	0
11952 2AEF                        00            .byte	0
11953 2AF0                        3C            .byte	$3C
11954 2AF1                        30            .byte	$30
11955 2AF2                        30            .byte	$30
11956 2AF3                        30            .byte	$30
11957 2AF4                        30            .byte	$30
11958 2AF5                        30            .byte	$30
11959 2AF6                        30            .byte	$30
11960 2AF7                        30            .byte	$30
11961 2AF8                        30            .byte	$30
11962 2AF9                        3C            .byte	$3C
11963 2AFA                        00            .byte	0
11964 2AFB                        00            .byte	0
11965 2AFC                        00            .byte	0
11966 2AFD                        00            .byte	0
11967                                           ! 1316  0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00,
11968 2AFE                        00            .byte	0
11969 2AFF                        00            .byte	0
11970 2B00                        00            .byte	0
11971 2B01                        80            .byte	$80
11972 2B02                        C0            .byte	$C0
11973 2B03                        E0            .byte	$E0
11974 2B04                        70            .byte	$70
11975 2B05                        38            .byte	$38
11976 2B06                        1C            .byte	$1C
11977 2B07                        0E            .byte	$E
11978 2B08                        06            .byte	6
11979 2B09                        02            .byte	2
11980 2B0A                        00            .byte	0
11981 2B0B                        00            .byte	0
11982 2B0C                        00            .byte	0
11983 2B0D                        00            .byte	0
11984                                           ! 1317  0x00, 0x00, 0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00, 0x00, 0x00, 0x00,
11985 2B0E                        00            .byte	0
11986 2B0F                        00            .byte	0
11987 2B10                        3C            .byte	$3C
11988 2B11                        0C            .byte	$C
11989 2B12                        0C            .byte	$C
11990 2B13                        0C            .byte	$C
11991 2B14                        0C            .byte	$C
11992 2B15                        0C            .byte	$C
11993 2B16                        0C            .byte	$C
11994 2B17                        0C            .byte	$C
11995 2B18                        0C            .byte	$C
11996 2B19                        3C            .byte	$3C
11997 2B1A                        00            .byte	0
11998 2B1B                        00            .byte	0
11999 2B1C                        00            .byte	0
12000 2B1D                        00            .byte	0
12001                                           ! 1318  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
12002 2B1E                        10            .byte	$10
12003 2B1F                        38            .byte	$38
12004 2B20                        6C            .byte	$6C
12005 2B21                        C6            .byte	$C6
12006 2B22                        00            .byte	0
12007 2B23                        00            .byte	0
12008 2B24                        00            .byte	0
12009 2B25                        00            .byte	0
12010 2B26                        00            .byte	0
12011 2B27                        00            .byte	0
12012 2B28                        00            .byte	0
12013 2B29                        00            .byte	0
12014 2B2A                        00            .byte	0
12015 2B2B                        00            .byte	0
12016 2B2C                        00            .byte	0
12017 2B2D                        00            .byte	0
12018                                           ! 1319  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
12019 2B2E                        00            .byte	0
12020 2B2F                        00            .byte	0
12021 2B30                        00            .byte	0
12022 2B31                        00            .byte	0
12023 2B32                        00            .byte	0
12024 2B33                        00            .byte	0
12025 2B34                        00            .byte	0
12026 2B35                        00            .byte	0
12027                                           ! 1319 , 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00,
12028 2B36                        00            .byte	0
12029 2B37                        00            .byte	0
12030 2B38                        00            .byte	0
12031 2B39                        00            .byte	0
12032 2B3A                        00            .byte	0
12033 2B3B                        FF            .byte	$FF
12034 2B3C                        00            .byte	0
12035 2B3D                        00            .byte	0
12036                                           ! 1320  0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
12037 2B3E                        30            .byte	$30
12038 2B3F                        30            .byte	$30
12039 2B40                        18            .byte	$18
12040 2B41                        00            .byte	0
12041 2B42                        00            .byte	0
12042 2B43                        00            .byte	0
12043 2B44                        00            .byte	0
12044 2B45                        00            .byte	0
12045 2B46                        00            .byte	0
12046 2B47                        00            .byte	0
12047 2B48                        00            .byte	0
12048 2B49                        00            .byte	0
12049 2B4A                        00            .byte	0
12050 2B4B                        00            .byte	0
12051 2B4C                        00            .byte	0
12052 2B4D                        00            .byte	0
12053                                           ! 1321  0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12054 2B4E                        00            .byte	0
12055 2B4F                        00            .byte	0
12056 2B50                        00            .byte	0
12057 2B51                        00            .byte	0
12058 2B52                        00            .byte	0
12059 2B53                        78            .byte	$78
12060 2B54                        0C            .byte	$C
12061 2B55                        7C            .byte	$7C
12062 2B56                        CC            .byte	$CC
12063 2B57                        CC            .byte	$CC
12064 2B58                        CC            .byte	$CC
12065 2B59                        76            .byte	$76
12066 2B5A                        00            .byte	0
12067 2B5B                        00            .byte	0
12068 2B5C                        00            .byte	0
12069 2B5D                        00            .byte	0
12070                                           ! 1322  0x00, 0x00, 0xe0, 0x60, 0x60, 0x78, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x00, 0x00, 0x00, 0x00,
12071 2B5E                        00            .byte	0
12072 2B5F                        00            .byte	0
12073 2B60                        E0            .byte	$E0
12074 2B61                        60            .byte	$60
12075 2B62                        60            .byte	$60
12076 2B63                        78            .byte	$78
12077 2B64                        6C            .byte	$6C
12078 2B65                        66            .byte	$66
12079 2B66                        66            .byte	$66
12080 2B67                        66            .byte	$66
12081 2B68                        66            .byte	$66
12082 2B69                        7C            .byte	$7C
12083 2B6A                        00            .byte	0
12084 2B6B                        00            .byte	0
12085 2B6C                        00            .byte	0
12086 2B6D                        00            .byte	0
12087                                           ! 1323  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12088 2B6E                        00            .byte	0
12089 2B6F                        00            .byte	0
12090 2B70                        00            .byte	0
12091 2B71                        00            .byte	0
12092 2B72                        00            .byte	0
12093 2B73                        7C            .byte	$7C
12094 2B74                        C6            .byte	$C6
12095 2B75                        C0            .byte	$C0
12096 2B76                        C0            .byte	$C0
12097 2B77                        C0            .byte	$C0
12098 2B78                        C6            .byte	$C6
12099 2B79                        7C            .byte	$7C
12100 2B7A                        00            .byte	0
12101 2B7B                        00            .byte	0
12102 2B7C                        00            .byte	0
12103 2B7D                        00            .byte	0
12104                                           ! 1324  0x00, 0x00, 0x1c, 0x0c, 0x0c, 0x3c, 0x6c, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12105 2B7E                        00            .byte	0
12106 2B7F                        00            .byte	0
12107 2B80                        1C            .byte	$1C
12108 2B81                        0C            .byte	$C
12109 2B82                        0C            .byte	$C
12110 2B83                        3C            .byte	$3C
12111 2B84                        6C            .byte	$6C
12112 2B85                        CC            .byte	$CC
12113 2B86                        CC            .byte	$CC
12114 2B87                        CC            .byte	$CC
12115 2B88                        CC            .byte	$CC
12116 2B89                        76            .byte	$76
12117 2B8A                        00            .byte	0
12118 2B8B                        00            .byte	0
12119 2B8C                        00            .byte	0
12120 2B8D                        00            .byte	0
12121                                           ! 1325  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12122 2B8E                        00            .byte	0
12123 2B8F                        00            .byte	0
12124 2B90                        00            .byte	0
12125 2B91                        00            .byte	0
12126 2B92                        00            .byte	0
12127 2B93                        7C            .byte	$7C
12128 2B94                        C6            .byte	$C6
12129 2B95                        FE            .byte	$FE
12130 2B96                        C0            .byte	$C0
12131 2B97                        C0            .byte	$C0
12132 2B98                        C6            .byte	$C6
12133 2B99                        7C            .byte	$7C
12134 2B9A                        00            .byte	0
12135 2B9B                        00            .byte	0
12136 2B9C                        00            .byte	0
12137 2B9D                        00            .byte	0
12138                                           ! 1326  0x00, 0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
12139 2B9E                        00            .byte	0
12140 2B9F                        00            .byte	0
12141 2BA0                        38            .byte	$38
12142 2BA1                        6C            .byte	$6C
12143 2BA2                        64            .byte	$64
12144 2BA3                        60            .byte	$60
12145 2BA4                        F0            .byte	$F0
12146 2BA5                        60            .byte	$60
12147 2BA6                        60            .byte	$60
12148 2BA7                        60            .byte	$60
12149 2BA8                        60            .byte	$60
12150 2BA9                        F0            .byte	$F0
12151 2BAA                        00            .byte	0
12152 2BAB                        00            .byte	0
12153 2BAC                        00            .byte	0
12154 2BAD                        00            .byte	0
12155                                           ! 1327  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xcc, 0x78, 0x00,
12156 2BAE                        00            .byte	0
12157 2BAF                        00            .byte	0
12158 2BB0                        00            .byte	0
12159 2BB1                        00            .byte	0
12160 2BB2                        00            .byte	0
12161 2BB3                        76            .byte	$76
12162 2BB4                        CC            .byte	$CC
12163 2BB5                        CC            .byte	$CC
12164 2BB6                        CC            .byte	$CC
12165 2BB7                        CC            .byte	$CC
12166 2BB8                        CC            .byte	$CC
12167 2BB9                        7C            .byte	$7C
12168 2BBA                        0C            .byte	$C
12169 2BBB                        CC            .byte	$CC
12170 2BBC                        78            .byte	$78
12171 2BBD                        00            .byte	0
12172                                           ! 1328  0x00, 0x00, 0xe0, 0x60, 0x60, 0x6c, 0x76, 0x66, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
12173 2BBE                        00            .byte	0
12174 2BBF                        00            .byte	0
12175 2BC0                        E0            .byte	$E0
12176 2BC1                        60            .byte	$60
12177 2BC2                        60            .byte	$60
12178 2BC3                        6C            .byte	$6C
12179 2BC4                        76            .byte	$76
12180 2BC5                        66            .byte	$66
12181 2BC6                        66            .byte	$66
12182 2BC7                        66            .byte	$66
12183 2BC8                        66            .byte	$66
12184 2BC9                        E6            .byte	$E6
12185 2BCA                        00            .byte	0
12186 2BCB                        00            .byte	0
12187 2BCC                        00            .byte	0
12188 2BCD                        00            .byte	0
12189                                           ! 1329  0x00, 0x00, 0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12190 2BCE                        00            .byte	0
12191 2BCF                        00            .byte	0
12192 2BD0                        18            .byte	$18
12193 2BD1                        18            .byte	$18
12194 2BD2                        00            .byte	0
12195 2BD3                        38            .byte	$38
12196 2BD4                        18            .byte	$18
12197 2BD5                        18            .byte	$18
12198 2BD6                        18            .byte	$18
12199 2BD7                        18            .byte	$18
12200 2BD8                        18            .byte	$18
12201 2BD9                        3C            .byte	$3C
12202 2BDA                        00            .byte	0
12203 2BDB                        00            .byte	0
12204 2BDC                        00            .byte	0
12205 2BDD                        00            .byte	0
12206                                           ! 1330  0x00, 0x00, 0x06, 0x06, 0x00, 0x0e, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3c, 0x00,
12207 2BDE                        00            .byte	0
12208 2BDF                        00            .byte	0
12209 2BE0                        06            .byte	6
12210 2BE1                        06            .byte	6
12211 2BE2                        00            .byte	0
12212 2BE3                        0E            .byte	$E
12213 2BE4                        06            .byte	6
12214 2BE5                        06            .byte	6
12215 2BE6                        06            .byte	6
12216 2BE7                        06            .byte	6
12217 2BE8                        06            .byte	6
12218 2BE9                        06            .byte	6
12219 2BEA                        66            .byte	$66
12220 2BEB                        66            .byte	$66
12221 2BEC                        3C            .byte	$3C
12222 2BED                        00            .byte	0
12223                                           ! 1331  0x00, 0x00, 0xe0, 0x60, 0x60, 0x66, 0x6c, 0x78, 0x78, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
12224 2BEE                        00            .byte	0
12225 2BEF                        00            .byte	0
12226 2BF0                        E0            .byte	$E0
12227 2BF1                        60            .byte	$60
12228 2BF2                        60            .byte	$60
12229 2BF3                        66            .byte	$66
12230 2BF4                        6C            .byte	$6C
12231 2BF5                        78            .byte	$78
12232 2BF6                        78            .byte	$78
12233 2BF7                        6C            .byte	$6C
12234 2BF8                        66            .byte	$66
12235 2BF9                        E6            .byte	$E6
12236 2BFA                        00            .byte	0
12237 2BFB                        00            .byte	0
12238 2BFC                        00            .byte	0
12239 2BFD                        00            .byte	0
12240                                           ! 1332  0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12241 2BFE                        00            .byte	0
12242 2BFF                        00            .byte	0
12243 2C00                        38            .byte	$38
12244 2C01                        18            .byte	$18
12245 2C02                        18            .byte	$18
12246 2C03                        18            .byte	$18
12247 2C04                        18            .byte	$18
12248 2C05                        18            .byte	$18
12249 2C06                        18            .byte	$18
12250 2C07                        18            .byte	$18
12251 2C08                        18            .byte	$18
12252 2C09                        3C            .byte	$3C
12253 2C0A                        00            .byte	0
12254 2C0B                        00            .byte	0
12255 2C0C                        00            .byte	0
12256 2C0D                        00            .byte	0
12257                                           ! 1333  0x00, 0x00, 0x00, 0x00, 0x00, 0xe6, 0xff, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0x00, 0x00, 0x00, 0x00,
12258 2C0E                        00            .byte	0
12259 2C0F                        00            .byte	0
12260 2C10                        00            .byte	0
12261 2C11                        00            .byte	0
12262 2C12                        00            .byte	0
12263 2C13                        E6            .byte	$E6
12264 2C14                        FF            .byte	$FF
12265 2C15                        DB            .byte	$DB
12266 2C16                        DB            .byte	$DB
12267 2C17                        DB            .byte	$DB
12268 2C18                        DB            .byte	$DB
12269 2C19                        DB            .byte	$DB
12270 2C1A                        00            .byte	0
12271 2C1B                        00            .byte	0
12272 2C1C                        00            .byte	0
12273 2C1D                        00            .byte	0
12274                                           ! 1334  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
12275 2C1E                        00            .byte	0
12276 2C1F                        00            .byte	0
12277 2C20                        00            .byte	0
12278 2C21                        00            .byte	0
12279 2C22                        00            .byte	0
12280 2C23                        DC            .byte	$DC
12281 2C24                        66            .byte	$66
12282 2C25                        66            .byte	$66
12283 2C26                        66            .byte	$66
12284 2C27                        66            .byte	$66
12285 2C28                        66            .byte	$66
12286 2C29                        66            .byte	$66
12287 2C2A                        00            .byte	0
12288 2C2B                        00            .byte	0
12289 2C2C                        00            .byte	0
12290 2C2D                        00            .byte	0
12291                                           ! 1335  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12292 2C2E                        00            .byte	0
12293 2C2F                        00            .byte	0
12294 2C30                        00            .byte	0
12295 2C31                        00            .byte	0
12296 2C32                        00            .byte	0
12297 2C33                        7C            .byte	$7C
12298 2C34                        C6            .byte	$C6
12299 2C35                        C6            .byte	$C6
12300 2C36                        C6            .byte	$C6
12301 2C37                        C6            .byte	$C6
12302 2C38                        C6            .byte	$C6
12303 2C39                        7C            .byte	$7C
12304 2C3A                        00            .byte	0
12305 2C3B                        00            .byte	0
12306 2C3C                        00            .byte	0
12307 2C3D                        00            .byte	0
12308                                           ! 1336  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
12309 2C3E                        00            .byte	0
12310 2C3F                        00            .byte	0
12311 2C40                        00            .byte	0
12312 2C41                        00            .byte	0
12313 2C42                        00            .byte	0
12314 2C43                        DC            .byte	$DC
12315 2C44                        66            .byte	$66
12316 2C45                        66            .byte	$66
12317 2C46                        66            .byte	$66
12318 2C47                        66            .byte	$66
12319 2C48                        66            .byte	$66
12320 2C49                        7C            .byte	$7C
12321 2C4A                        60            .byte	$60
12322 2C4B                        60            .byte	$60
12323 2C4C                        F0            .byte	$F0
12324 2C4D                        00            .byte	0
12325                                           ! 1337  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0x0c, 0x1e, 0x00,
12326 2C4E                        00            .byte	0
12327 2C4F                        00            .byte	0
12328 2C50                        00            .byte	0
12329 2C51                        00            .byte	0
12330 2C52                        00            .byte	0
12331 2C53                        76            .byte	$76
12332 2C54                        CC            .byte	$CC
12333 2C55                        CC            .byte	$CC
12334 2C56                        CC            .byte	$CC
12335 2C57                        CC            .byte	$CC
12336 2C58                        CC            .byte	$CC
12337 2C59                        7C            .byte	$7C
12338 2C5A                        0C            .byte	$C
12339 2C5B                        0C            .byte	$C
12340 2C5C                        1E            .byte	$1E
12341 2C5D                        00            .byte	0
12342                                           ! 1338  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
12343 2C5E                        00            .byte	0
12344 2C5F                        00            .byte	0
12345 2C60                        00            .byte	0
12346 2C61                        00            .byte	0
12347 2C62                        00            .byte	0
12348 2C63                        DC            .byte	$DC
12349 2C64                        76            .byte	$76
12350 2C65                        66            .byte	$66
12351 2C66                        60            .byte	$60
12352 2C67                        60            .byte	$60
12353 2C68                        60            .byte	$60
12354 2C69                        F0            .byte	$F0
12355 2C6A                        00            .byte	0
12356 2C6B                        00            .byte	0
12357 2C6C                        00            .byte	0
12358 2C6D                        00            .byte	0
12359                                           ! 1339  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0x60, 0x38, 0x0c, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12360 2C6E                        00            .byte	0
12361 2C6F                        00            .byte	0
12362 2C70                        00            .byte	0
12363 2C71                        00            .byte	0
12364 2C72                        00            .byte	0
12365 2C73                        7C            .byte	$7C
12366 2C74                        C6            .byte	$C6
12367 2C75                        60            .byte	$60
12368 2C76                        38            .byte	$38
12369 2C77                        0C            .byte	$C
12370 2C78                        C6            .byte	$C6
12371 2C79                        7C            .byte	$7C
12372 2C7A                        00            .byte	0
12373 2C7B                        00            .byte	0
12374 2C7C                        00            .byte	0
12375 2C7D                        00            .byte	0
12376                                           ! 1340  0x00, 0x00, 0x10, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x30, 0x30, 0x3
12377 2C7E                        00            .byte	0
12378 2C7F                        00            .byte	0
12379 2C80                        10            .byte	$10
12380 2C81                        30            .byte	$30
12381 2C82                        30            .byte	$30
12382 2C83                        FC            .byte	$FC
12383 2C84                        30            .byte	$30
12384 2C85                        30            .byte	$30
12385 2C86                        30            .byte	$30
12386 2C87                        30            .byte	$30
12387                                           ! 1340 6, 0x1c, 0x00, 0x00, 0x00, 0x00,
12388 2C88                        36            .byte	$36
12389 2C89                        1C            .byte	$1C
12390 2C8A                        00            .byte	0
12391 2C8B                        00            .byte	0
12392 2C8C                        00            .byte	0
12393 2C8D                        00            .byte	0
12394                                           ! 1341  0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12395 2C8E                        00            .byte	0
12396 2C8F                        00            .byte	0
12397 2C90                        00            .byte	0
12398 2C91                        00            .byte	0
12399 2C92                        00            .byte	0
12400 2C93                        CC            .byte	$CC
12401 2C94                        CC            .byte	$CC
12402 2C95                        CC            .byte	$CC
12403 2C96                        CC            .byte	$CC
12404 2C97                        CC            .byte	$CC
12405 2C98                        CC            .byte	$CC
12406 2C99                        76            .byte	$76
12407 2C9A                        00            .byte	0
12408 2C9B                        00            .byte	0
12409 2C9C                        00            .byte	0
12410 2C9D                        00            .byte	0
12411                                           ! 1342  0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
12412 2C9E                        00            .byte	0
12413 2C9F                        00            .byte	0
12414 2CA0                        00            .byte	0
12415 2CA1                        00            .byte	0
12416 2CA2                        00            .byte	0
12417 2CA3                        C3            .byte	$C3
12418 2CA4                        C3            .byte	$C3
12419 2CA5                        C3            .byte	$C3
12420 2CA6                        C3            .byte	$C3
12421 2CA7                        66            .byte	$66
12422 2CA8                        3C            .byte	$3C
12423 2CA9                        18            .byte	$18
12424 2CAA                        00            .byte	0
12425 2CAB                        00            .byte	0
12426 2CAC                        00            .byte	0
12427 2CAD                        00            .byte	0
12428                                           ! 1343  0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xdb, 0xdb, 0xff, 0x66, 0x00, 0x00, 0x00, 0x00,
12429 2CAE                        00            .byte	0
12430 2CAF                        00            .byte	0
12431 2CB0                        00            .byte	0
12432 2CB1                        00            .byte	0
12433 2CB2                        00            .byte	0
12434 2CB3                        C3            .byte	$C3
12435 2CB4                        C3            .byte	$C3
12436 2CB5                        C3            .byte	$C3
12437 2CB6                        DB            .byte	$DB
12438 2CB7                        DB            .byte	$DB
12439 2CB8                        FF            .byte	$FF
12440 2CB9                        66            .byte	$66
12441 2CBA                        00            .byte	0
12442 2CBB                        00            .byte	0
12443 2CBC                        00            .byte	0
12444 2CBD                        00            .byte	0
12445                                           ! 1344  0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0x66, 0x3c, 0x18, 0x3c, 0x66, 0xc3, 0x00, 0x00, 0x00, 0x00,
12446 2CBE                        00            .byte	0
12447 2CBF                        00            .byte	0
12448 2CC0                        00            .byte	0
12449 2CC1                        00            .byte	0
12450 2CC2                        00            .byte	0
12451 2CC3                        C3            .byte	$C3
12452 2CC4                        66            .byte	$66
12453 2CC5                        3C            .byte	$3C
12454 2CC6                        18            .byte	$18
12455 2CC7                        3C            .byte	$3C
12456 2CC8                        66            .byte	$66
12457 2CC9                        C3            .byte	$C3
12458 2CCA                        00            .byte	0
12459 2CCB                        00            .byte	0
12460 2CCC                        00            .byte	0
12461 2CCD                        00            .byte	0
12462                                           ! 1345  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0xf8, 0x00,
12463 2CCE                        00            .byte	0
12464 2CCF                        00            .byte	0
12465 2CD0                        00            .byte	0
12466 2CD1                        00            .byte	0
12467 2CD2                        00            .byte	0
12468 2CD3                        C6            .byte	$C6
12469 2CD4                        C6            .byte	$C6
12470 2CD5                        C6            .byte	$C6
12471 2CD6                        C6            .byte	$C6
12472 2CD7                        C6            .byte	$C6
12473 2CD8                        C6            .byte	$C6
12474 2CD9                        7E            .byte	$7E
12475 2CDA                        06            .byte	6
12476 2CDB                        0C            .byte	$C
12477 2CDC                        F8            .byte	$F8
12478 2CDD                        00            .byte	0
12479                                           ! 1346  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xcc, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
12480 2CDE                        00            .byte	0
12481 2CDF                        00            .byte	0
12482 2CE0                        00            .byte	0
12483 2CE1                        00            .byte	0
12484 2CE2                        00            .byte	0
12485 2CE3                        FE            .byte	$FE
12486 2CE4                        CC            .byte	$CC
12487 2CE5                        18            .byte	$18
12488 2CE6                        30            .byte	$30
12489 2CE7                        60            .byte	$60
12490 2CE8                        C6            .byte	$C6
12491 2CE9                        FE            .byte	$FE
12492 2CEA                        00            .byte	0
12493 2CEB                        00            .byte	0
12494 2CEC                        00            .byte	0
12495 2CED                        00            .byte	0
12496                                           ! 1347  0x00, 0x00, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x18, 0x0e, 0x00, 0x00, 0x00, 0x00,
12497 2CEE                        00            .byte	0
12498 2CEF                        00            .byte	0
12499 2CF0                        0E            .byte	$E
12500 2CF1                        18            .byte	$18
12501 2CF2                        18            .byte	$18
12502 2CF3                        18            .byte	$18
12503 2CF4                        70            .byte	$70
12504 2CF5                        18            .byte	$18
12505 2CF6                        18            .byte	$18
12506 2CF7                        18            .byte	$18
12507 2CF8                        18            .byte	$18
12508 2CF9                        0E            .byte	$E
12509 2CFA                        00            .byte	0
12510 2CFB                        00            .byte	0
12511 2CFC                        00            .byte	0
12512 2CFD                        00            .byte	0
12513                                           ! 1348  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
12514 2CFE                        00            .byte	0
12515 2CFF                        00            .byte	0
12516 2D00                        18            .byte	$18
12517 2D01                        18            .byte	$18
12518 2D02                        18            .byte	$18
12519 2D03                        18            .byte	$18
12520 2D04                        00            .byte	0
12521 2D05                        18            .byte	$18
12522 2D06                        18            .byte	$18
12523 2D07                        18            .byte	$18
12524 2D08                        18            .byte	$18
12525 2D09                        18            .byte	$18
12526 2D0A                        00            .byte	0
12527 2D0B                        00            .byte	0
12528 2D0C                        00            .byte	0
12529 2D0D                        00            .byte	0
12530                                           ! 1349  0x00, 0x00, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x18, 0x18, 0x70, 0x00, 0x00, 0x00, 0x00,
12531 2D0E                        00            .byte	0
12532 2D0F                        00            .byte	0
12533 2D10                        70            .byte	$70
12534 2D11                        18            .byte	$18
12535 2D12                        18            .byte	$18
12536 2D13                        18            .byte	$18
12537 2D14                        0E            .byte	$E
12538 2D15                        18            .byte	$18
12539 2D16                        18            .byte	$18
12540 2D17                        18            .byte	$18
12541 2D18                        18            .byte	$18
12542 2D19                        70            .byte	$70
12543 2D1A                        00            .byte	0
12544 2D1B                        00            .byte	0
12545 2D1C                        00            .byte	0
12546 2D1D                        00            .byte	0
12547                                           ! 1350  0x00, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
12548 2D1E                        00            .byte	0
12549 2D1F                        00            .byte	0
12550 2D20                        76            .byte	$76
12551 2D21                        DC            .byte	$DC
12552 2D22                        00            .byte	0
12553 2D23                        00            .byte	0
12554 2D24                        00            .byte	0
12555 2D25                        00            .byte	0
12556 2D26                        00            .byte	0
12557 2D27                        00            .byte	0
12558 2D28                        00            .byte	0
12559 2D29                        00            .byte	0
12560 2D2A                        00            .byte	0
12561 2D2B                        00            .byte	0
12562 2D2C                        00            .byte	0
12563 2D2D                        00            .byte	0
12564                                           ! 1351  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
12565 2D2E                        00            .byte	0
12566 2D2F                        00            .byte	0
12567 2D30                        00            .byte	0
12568 2D31                        00            .byte	0
12569 2D32                        10            .byte	$10
12570 2D33                        38            .byte	$38
12571 2D34                        6C            .byte	$6C
12572 2D35                        C6            .byte	$C6
12573 2D36                        C6            .byte	$C6
12574 2D37                        C6            .byte	$C6
12575 2D38                        FE            .byte	$FE
12576 2D39                        00            .byte	0
12577 2D3A                        00            .byte	0
12578 2D3B                        00            .byte	0
12579 2D3C                        00            .byte	0
12580 2D3D                        00            .byte	0
12581                                           ! 1352  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x0c, 0x06, 0x7c, 0x00, 0x00,
12582 2D3E                        00            .byte	0
12583 2D3F                        00            .byte	0
12584 2D40                        3C            .byte	$3C
12585 2D41                        66            .byte	$66
12586 2D42                        C2            .byte	$C2
12587 2D43                        C0            .byte	$C0
12588 2D44                        C0            .byte	$C0
12589 2D45                        C0            .byte	$C0
12590 2D46                        C2            .byte	$C2
12591 2D47                        66            .byte	$66
12592 2D48                        3C            .byte	$3C
12593 2D49                        0C            .byte	$C
12594 2D4A                        06            .byte	6
12595 2D4B                        7C            .byte	$7C
12596 2D4C                        00            .byte	0
12597 2D4D                        00            .byte	0
12598                                           ! 1353  0x00, 0x00, 0xcc, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12599 2D4E                        00            .byte	0
12600 2D4F                        00            .byte	0
12601 2D50                        CC            .byte	$CC
12602 2D51                        00            .byte	0
12603 2D52                        00            .byte	0
12604 2D53                        CC            .byte	$CC
12605 2D54                        CC            .byte	$CC
12606 2D55                        CC            .byte	$CC
12607 2D56                        CC            .byte	$CC
12608 2D57                        CC            .byte	$CC
12609 2D58                        CC            .byte	$CC
12610 2D59                        76            .byte	$76
12611 2D5A                        00            .byte	0
12612 2D5B                        00            .byte	0
12613 2D5C                        00            .byte	0
12614 2D5D                        00            .byte	0
12615                                           ! 1354  0x00, 0x0c, 0x18, 0x30, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12616 2D5E                        00            .byte	0
12617 2D5F                        0C            .byte	$C
12618 2D60                        18            .byte	$18
12619 2D61                        30            .byte	$30
12620 2D62                        00            .byte	0
12621 2D63                        7C            .byte	$7C
12622 2D64                        C6            .byte	$C6
12623 2D65                        FE            .byte	$FE
12624 2D66                        C0            .byte	$C0
12625 2D67                        C0            .byte	$C0
12626 2D68                        C6            .byte	$C6
12627 2D69                        7C            .byte	$7C
12628 2D6A                        00            .byte	0
12629 2D6B                        00            .byte	0
12630 2D6C                        00            .byte	0
12631 2D6D                        00            .byte	0
12632                                           ! 1355  0x00, 0x10, 0x38, 0x6c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12633 2D6E                        00            .byte	0
12634 2D6F                        10            .byte	$10
12635 2D70                        38            .byte	$38
12636 2D71                        6C            .byte	$6C
12637 2D72                        00            .byte	0
12638 2D73                        78            .byte	$78
12639 2D74                        0C            .byte	$C
12640 2D75                        7C            .byte	$7C
12641 2D76                        CC            .byte	$CC
12642 2D77                        CC            .byte	$CC
12643 2D78                        CC            .byte	$CC
12644 2D79                        76            .byte	$76
12645 2D7A                        00            .byte	0
12646 2D7B                        00            .byte	0
12647 2D7C                        00            .byte	0
12648 2D7D                        00            .byte	0
12649                                           ! 1356  0x00, 0x00, 0xcc, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12650 2D7E                        00            .byte	0
12651 2D7F                        00            .byte	0
12652 2D80                        CC            .byte	$CC
12653 2D81                        00            .byte	0
12654 2D82                        00            .byte	0
12655 2D83                        78            .byte	$78
12656 2D84                        0C            .byte	$C
12657 2D85                        7C            .byte	$7C
12658 2D86                        CC            .byte	$CC
12659 2D87                        CC            .byte	$CC
12660 2D88                        CC            .byte	$CC
12661 2D89                        76            .byte	$76
12662 2D8A                        00            .byte	0
12663 2D8B                        00            .byte	0
12664 2D8C                        00            .byte	0
12665 2D8D                        00            .byte	0
12666                                           ! 1357  0x00, 0x60, 0x30, 0x18, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12667 2D8E                        00            .byte	0
12668 2D8F                        60            .byte	$60
12669 2D90                        30            .byte	$30
12670 2D91                        18            .byte	$18
12671 2D92                        00            .byte	0
12672 2D93                        78            .byte	$78
12673 2D94                        0C            .byte	$C
12674 2D95                        7C            .byte	$7C
12675 2D96                        CC            .byte	$CC
12676 2D97                        CC            .byte	$CC
12677 2D98                        CC            .byte	$CC
12678 2D99                        76            .byte	$76
12679 2D9A                        00            .byte	0
12680 2D9B                        00            .byte	0
12681 2D9C                        00            .byte	0
12682 2D9D                        00            .byte	0
12683                                           ! 1358  0x00, 0x38, 0x6c, 0x38, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12684 2D9E                        00            .byte	0
12685 2D9F                        38            .byte	$38
12686 2DA0                        6C            .byte	$6C
12687 2DA1                        38            .byte	$38
12688 2DA2                        00            .byte	0
12689 2DA3                        78            .byte	$78
12690 2DA4                        0C            .byte	$C
12691 2DA5                        7C            .byte	$7C
12692 2DA6                        CC            .byte	$CC
12693 2DA7                        CC            .byte	$CC
12694 2DA8                        CC            .byte	$CC
12695 2DA9                        76            .byte	$76
12696 2DAA                        00            .byte	0
12697 2DAB                        00            .byte	0
12698 2DAC                        00            .byte	0
12699 2DAD                        00            .byte	0
12700                                           ! 1359  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x60, 0x60, 0x66, 0x3c, 0x0c, 0x06, 0x3c, 0x00, 0x00, 0x00,
12701 2DAE                        00            .byte	0
12702 2DAF                        00            .byte	0
12703 2DB0                        00            .byte	0
12704 2DB1                        00            .byte	0
12705 2DB2                        3C            .byte	$3C
12706 2DB3                        66            .byte	$66
12707 2DB4                        60            .byte	$60
12708 2DB5                        60            .byte	$60
12709 2DB6                        66            .byte	$66
12710 2DB7                        3C            .byte	$3C
12711 2DB8                        0C            .byte	$C
12712 2DB9                        06            .byte	6
12713 2DBA                        3C            .byte	$3C
12714 2DBB                        00            .byte	0
12715 2DBC                        00            .byte	0
12716 2DBD                        00            .byte	0
12717                                           ! 1360  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12718 2DBE                        00            .byte	0
12719 2DBF                        10            .byte	$10
12720 2DC0                        38            .byte	$38
12721 2DC1                        6C            .byte	$6C
12722 2DC2                        00            .byte	0
12723 2DC3                        7C            .byte	$7C
12724 2DC4                        C6            .byte	$C6
12725 2DC5                        FE            .byte	$FE
12726 2DC6                        C0            .byte	$C0
12727 2DC7                        C0            .byte	$C0
12728 2DC8                        C6            .byte	$C6
12729 2DC9                        7C            .byte	$7C
12730 2DCA                        00            .byte	0
12731 2DCB                        00            .byte	0
12732 2DCC                        00            .byte	0
12733 2DCD                        00            .byte	0
12734                                           ! 1361  0x00, 0x00, 0xc6, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x
12735 2DCE                        00            .byte	0
12736 2DCF                        00            .byte	0
12737 2DD0                        C6            .byte	$C6
12738 2DD1                        00            .byte	0
12739 2DD2                        00            .byte	0
12740 2DD3                        7C            .byte	$7C
12741 2DD4                        C6            .byte	$C6
12742 2DD5                        FE            .byte	$FE
12743 2DD6                        C0            .byte	$C0
12744 2DD7                        C0            .byte	$C0
12745 2DD8                        C6            .byte	$C6
12746 2DD9                        7C            .byte	$7C
12747                                           ! 1361 00, 0x00, 0x00, 0x00,
12748 2DDA                        00            .byte	0
12749 2DDB                        00            .byte	0
12750 2DDC                        00            .byte	0
12751 2DDD                        00            .byte	0
12752                                           ! 1362  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12753 2DDE                        00            .byte	0
12754 2DDF                        60            .byte	$60
12755 2DE0                        30            .byte	$30
12756 2DE1                        18            .byte	$18
12757 2DE2                        00            .byte	0
12758 2DE3                        7C            .byte	$7C
12759 2DE4                        C6            .byte	$C6
12760 2DE5                        FE            .byte	$FE
12761 2DE6                        C0            .byte	$C0
12762 2DE7                        C0            .byte	$C0
12763 2DE8                        C6            .byte	$C6
12764 2DE9                        7C            .byte	$7C
12765 2DEA                        00            .byte	0
12766 2DEB                        00            .byte	0
12767 2DEC                        00            .byte	0
12768 2DED                        00            .byte	0
12769                                           ! 1363  0x00, 0x00, 0x66, 0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12770 2DEE                        00            .byte	0
12771 2DEF                        00            .byte	0
12772 2DF0                        66            .byte	$66
12773 2DF1                        00            .byte	0
12774 2DF2                        00            .byte	0
12775 2DF3                        38            .byte	$38
12776 2DF4                        18            .byte	$18
12777 2DF5                        18            .byte	$18
12778 2DF6                        18            .byte	$18
12779 2DF7                        18            .byte	$18
12780 2DF8                        18            .byte	$18
12781 2DF9                        3C            .byte	$3C
12782 2DFA                        00            .byte	0
12783 2DFB                        00            .byte	0
12784 2DFC                        00            .byte	0
12785 2DFD                        00            .byte	0
12786                                           ! 1364  0x00, 0x18, 0x3c, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12787 2DFE                        00            .byte	0
12788 2DFF                        18            .byte	$18
12789 2E00                        3C            .byte	$3C
12790 2E01                        66            .byte	$66
12791 2E02                        00            .byte	0
12792 2E03                        38            .byte	$38
12793 2E04                        18            .byte	$18
12794 2E05                        18            .byte	$18
12795 2E06                        18            .byte	$18
12796 2E07                        18            .byte	$18
12797 2E08                        18            .byte	$18
12798 2E09                        3C            .byte	$3C
12799 2E0A                        00            .byte	0
12800 2E0B                        00            .byte	0
12801 2E0C                        00            .byte	0
12802 2E0D                        00            .byte	0
12803                                           ! 1365  0x00, 0x60, 0x30, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12804 2E0E                        00            .byte	0
12805 2E0F                        60            .byte	$60
12806 2E10                        30            .byte	$30
12807 2E11                        18            .byte	$18
12808 2E12                        00            .byte	0
12809 2E13                        38            .byte	$38
12810 2E14                        18            .byte	$18
12811 2E15                        18            .byte	$18
12812 2E16                        18            .byte	$18
12813 2E17                        18            .byte	$18
12814 2E18                        18            .byte	$18
12815 2E19                        3C            .byte	$3C
12816 2E1A                        00            .byte	0
12817 2E1B                        00            .byte	0
12818 2E1C                        00            .byte	0
12819 2E1D                        00            .byte	0
12820                                           ! 1366  0x00, 0xc6, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
12821 2E1E                        00            .byte	0
12822 2E1F                        C6            .byte	$C6
12823 2E20                        00            .byte	0
12824 2E21                        10            .byte	$10
12825 2E22                        38            .byte	$38
12826 2E23                        6C            .byte	$6C
12827 2E24                        C6            .byte	$C6
12828 2E25                        C6            .byte	$C6
12829 2E26                        FE            .byte	$FE
12830 2E27                        C6            .byte	$C6
12831 2E28                        C6            .byte	$C6
12832 2E29                        C6            .byte	$C6
12833 2E2A                        00            .byte	0
12834 2E2B                        00            .byte	0
12835 2E2C                        00            .byte	0
12836 2E2D                        00            .byte	0
12837                                           ! 1367  0x38, 0x6c, 0x38, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
12838 2E2E                        38            .byte	$38
12839 2E2F                        6C            .byte	$6C
12840 2E30                        38            .byte	$38
12841 2E31                        00            .byte	0
12842 2E32                        38            .byte	$38
12843 2E33                        6C            .byte	$6C
12844 2E34                        C6            .byte	$C6
12845 2E35                        C6            .byte	$C6
12846 2E36                        FE            .byte	$FE
12847 2E37                        C6            .byte	$C6
12848 2E38                        C6            .byte	$C6
12849 2E39                        C6            .byte	$C6
12850 2E3A                        00            .byte	0
12851 2E3B                        00            .byte	0
12852 2E3C                        00            .byte	0
12853 2E3D                        00            .byte	0
12854                                           ! 1368  0x18, 0x30, 0x60, 0x00, 0xfe, 0x66, 0x60, 0x7c, 0x60, 0x60, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
12855 2E3E                        18            .byte	$18
12856 2E3F                        30            .byte	$30
12857 2E40                        60            .byte	$60
12858 2E41                        00            .byte	0
12859 2E42                        FE            .byte	$FE
12860 2E43                        66            .byte	$66
12861 2E44                        60            .byte	$60
12862 2E45                        7C            .byte	$7C
12863 2E46                        60            .byte	$60
12864 2E47                        60            .byte	$60
12865 2E48                        66            .byte	$66
12866 2E49                        FE            .byte	$FE
12867 2E4A                        00            .byte	0
12868 2E4B                        00            .byte	0
12869 2E4C                        00            .byte	0
12870 2E4D                        00            .byte	0
12871                                           ! 1369  0x00, 0x00, 0x00, 0x00, 0x00, 0x6e, 0x3b, 0x1b, 0x7e, 0xd8, 0xdc, 0x77, 0x00, 0x00, 0x00, 0x00,
12872 2E4E                        00            .byte	0
12873 2E4F                        00            .byte	0
12874 2E50                        00            .byte	0
12875 2E51                        00            .byte	0
12876 2E52                        00            .byte	0
12877 2E53                        6E            .byte	$6E
12878 2E54                        3B            .byte	$3B
12879 2E55                        1B            .byte	$1B
12880 2E56                        7E            .byte	$7E
12881 2E57                        D8            .byte	$D8
12882 2E58                        DC            .byte	$DC
12883 2E59                        77            .byte	$77
12884 2E5A                        00            .byte	0
12885 2E5B                        00            .byte	0
12886 2E5C                        00            .byte	0
12887 2E5D                        00            .byte	0
12888                                           ! 1370  0x00, 0x00, 0x3e, 0x6c, 0xcc, 0xcc, 0xfe, 0xcc, 0xcc, 0xcc, 0xcc, 0xce, 0x00, 0x00, 0x00, 0x00,
12889 2E5E                        00            .byte	0
12890 2E5F                        00            .byte	0
12891 2E60                        3E            .byte	$3E
12892 2E61                        6C            .byte	$6C
12893 2E62                        CC            .byte	$CC
12894 2E63                        CC            .byte	$CC
12895 2E64                        FE            .byte	$FE
12896 2E65                        CC            .byte	$CC
12897 2E66                        CC            .byte	$CC
12898 2E67                        CC            .byte	$CC
12899 2E68                        CC            .byte	$CC
12900 2E69                        CE            .byte	$CE
12901 2E6A                        00            .byte	0
12902 2E6B                        00            .byte	0
12903 2E6C                        00            .byte	0
12904 2E6D                        00            .byte	0
12905                                           ! 1371  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12906 2E6E                        00            .byte	0
12907 2E6F                        10            .byte	$10
12908 2E70                        38            .byte	$38
12909 2E71                        6C            .byte	$6C
12910 2E72                        00            .byte	0
12911 2E73                        7C            .byte	$7C
12912 2E74                        C6            .byte	$C6
12913 2E75                        C6            .byte	$C6
12914 2E76                        C6            .byte	$C6
12915 2E77                        C6            .byte	$C6
12916 2E78                        C6            .byte	$C6
12917 2E79                        7C            .byte	$7C
12918 2E7A                        00            .byte	0
12919 2E7B                        00            .byte	0
12920 2E7C                        00            .byte	0
12921 2E7D                        00            .byte	0
12922                                           ! 1372  0x00, 0x00, 0xc6, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12923 2E7E                        00            .byte	0
12924 2E7F                        00            .byte	0
12925 2E80                        C6            .byte	$C6
12926 2E81                        00            .byte	0
12927 2E82                        00            .byte	0
12928 2E83                        7C            .byte	$7C
12929 2E84                        C6            .byte	$C6
12930 2E85                        C6            .byte	$C6
12931 2E86                        C6            .byte	$C6
12932 2E87                        C6            .byte	$C6
12933 2E88                        C6            .byte	$C6
12934 2E89                        7C            .byte	$7C
12935 2E8A                        00            .byte	0
12936 2E8B                        00            .byte	0
12937 2E8C                        00            .byte	0
12938 2E8D                        00            .byte	0
12939                                           ! 1373  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12940 2E8E                        00            .byte	0
12941 2E8F                        60            .byte	$60
12942 2E90                        30            .byte	$30
12943 2E91                        18            .byte	$18
12944 2E92                        00            .byte	0
12945 2E93                        7C            .byte	$7C
12946 2E94                        C6            .byte	$C6
12947 2E95                        C6            .byte	$C6
12948 2E96                        C6            .byte	$C6
12949 2E97                        C6            .byte	$C6
12950 2E98                        C6            .byte	$C6
12951 2E99                        7C            .byte	$7C
12952 2E9A                        00            .byte	0
12953 2E9B                        00            .byte	0
12954 2E9C                        00            .byte	0
12955 2E9D                        00            .byte	0
12956                                           ! 1374  0x00, 0x30, 0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12957 2E9E                        00            .byte	0
12958 2E9F                        30            .byte	$30
12959 2EA0                        78            .byte	$78
12960 2EA1                        CC            .byte	$CC
12961 2EA2                        00            .byte	0
12962 2EA3                        CC            .byte	$CC
12963 2EA4                        CC            .byte	$CC
12964 2EA5                        CC            .byte	$CC
12965 2EA6                        CC            .byte	$CC
12966 2EA7                        CC            .byte	$CC
12967 2EA8                        CC            .byte	$CC
12968 2EA9                        76            .byte	$76
12969 2EAA                        00            .byte	0
12970 2EAB                        00            .byte	0
12971 2EAC                        00            .byte	0
12972 2EAD                        00            .byte	0
12973                                           ! 1375  0x00, 0x60, 0x30, 0x18, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12974 2EAE                        00            .byte	0
12975 2EAF                        60            .byte	$60
12976 2EB0                        30            .byte	$30
12977 2EB1                        18            .byte	$18
12978 2EB2                        00            .byte	0
12979 2EB3                        CC            .byte	$CC
12980 2EB4                        CC            .byte	$CC
12981 2EB5                        CC            .byte	$CC
12982 2EB6                        CC            .byte	$CC
12983 2EB7                        CC            .byte	$CC
12984 2EB8                        CC            .byte	$CC
12985 2EB9                        76            .byte	$76
12986 2EBA                        00            .byte	0
12987 2EBB                        00            .byte	0
12988 2EBC                        00            .byte	0
12989 2EBD                        00            .byte	0
12990                                           ! 1376  0x00, 0x00, 0xc6, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0x78, 0x00,
12991 2EBE                        00            .byte	0
12992 2EBF                        00            .byte	0
12993 2EC0                        C6            .byte	$C6
12994 2EC1                        00            .byte	0
12995 2EC2                        00            .byte	0
12996 2EC3                        C6            .byte	$C6
12997 2EC4                        C6            .byte	$C6
12998 2EC5                        C6            .byte	$C6
12999 2EC6                        C6            .byte	$C6
13000 2EC7                        C6            .byte	$C6
13001 2EC8                        C6            .byte	$C6
13002 2EC9                        7E            .byte	$7E
13003 2ECA                        06            .byte	6
13004 2ECB                        0C            .byte	$C
13005 2ECC                        78            .byte	$78
13006 2ECD                        00            .byte	0
13007                                           ! 1377  0x00, 0xc6, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13008 2ECE                        00            .byte	0
13009 2ECF                        C6            .byte	$C6
13010 2ED0                        00            .byte	0
13011 2ED1                        7C            .byte	$7C
13012 2ED2                        C6            .byte	$C6
13013 2ED3                        C6            .byte	$C6
13014 2ED4                        C6            .byte	$C6
13015 2ED5                        C6            .byte	$C6
13016 2ED6                        C6            .byte	$C6
13017 2ED7                        C6            .byte	$C6
13018 2ED8                        C6            .byte	$C6
13019 2ED9                        7C            .byte	$7C
13020 2EDA                        00            .byte	0
13021 2EDB                        00            .byte	0
13022 2EDC                        00            .byte	0
13023 2EDD                        00            .byte	0
13024                                           ! 1378  0x00, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13025 2EDE                        00            .byte	0
13026 2EDF                        C6            .byte	$C6
13027 2EE0                        00            .byte	0
13028 2EE1                        C6            .byte	$C6
13029 2EE2                        C6            .byte	$C6
13030 2EE3                        C6            .byte	$C6
13031 2EE4                        C6            .byte	$C6
13032 2EE5                        C6            .byte	$C6
13033 2EE6                        C6            .byte	$C6
13034 2EE7                        C6            .byte	$C6
13035 2EE8                        C6            .byte	$C6
13036 2EE9                        7C            .byte	$7C
13037 2EEA                        00            .byte	0
13038 2EEB                        00            .byte	0
13039 2EEC                        00            .byte	0
13040 2EED                        00            .byte	0
13041                                           ! 1379  0x00, 0x18, 0x18, 0x7e, 0xc3, 0xc0, 0xc0, 0xc0, 0xc3, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
13042 2EEE                        00            .byte	0
13043 2EEF                        18            .byte	$18
13044 2EF0                        18            .byte	$18
13045 2EF1                        7E            .byte	$7E
13046 2EF2                        C3            .byte	$C3
13047 2EF3                        C0            .byte	$C0
13048 2EF4                        C0            .byte	$C0
13049 2EF5                        C0            .byte	$C0
13050 2EF6                        C3            .byte	$C3
13051 2EF7                        7E            .byte	$7E
13052 2EF8                        18            .byte	$18
13053 2EF9                        18            .byte	$18
13054 2EFA                        00            .byte	0
13055 2EFB                        00            .byte	0
13056 2EFC                        00            .byte	0
13057 2EFD                        00            .byte	0
13058                                           ! 1380  0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0x60, 0xe6, 0xfc, 0x00, 0x00, 0x00, 0x00,
13059 2EFE                        00            .byte	0
13060 2EFF                        38            .byte	$38
13061 2F00                        6C            .byte	$6C
13062 2F01                        64            .byte	$64
13063 2F02                        60            .byte	$60
13064 2F03                        F0            .byte	$F0
13065 2F04                        60            .byte	$60
13066 2F05                        60            .byte	$60
13067 2F06                        60            .byte	$60
13068 2F07                        60            .byte	$60
13069 2F08                        E6            .byte	$E6
13070 2F09                        FC            .byte	$FC
13071 2F0A                        00            .byte	0
13072 2F0B                        00            .byte	0
13073 2F0C                        00            .byte	0
13074 2F0D                        00            .byte	0
13075                                           ! 1381  0x00, 0x00, 0xc3, 0x66, 0x3c, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
13076 2F0E                        00            .byte	0
13077 2F0F                        00            .byte	0
13078 2F10                        C3            .byte	$C3
13079 2F11                        66            .byte	$66
13080 2F12                        3C            .byte	$3C
13081 2F13                        18            .byte	$18
13082 2F14                        FF            .byte	$FF
13083 2F15                        18            .byte	$18
13084 2F16                        FF            .byte	$FF
13085 2F17                        18            .byte	$18
13086 2F18                        18            .byte	$18
13087 2F19                        18            .byte	$18
13088 2F1A                        00            .byte	0
13089 2F1B                        00            .byte	0
13090 2F1C                        00            .byte	0
13091 2F1D                        00            .byte	0
13092                                           ! 1382  0x00, 0xfc, 0x66, 0x66, 0x7c, 0x62, 0x66, 0x6f, 0x66, 0x66, 0x66, 0xf3, 0x00, 0x00, 0
13093 2F1E                        00            .byte	0
13094 2F1F                        FC            .byte	$FC
13095 2F20                        66            .byte	$66
13096 2F21                        66            .byte	$66
13097 2F22                        7C            .byte	$7C
13098 2F23                        62            .byte	$62
13099 2F24                        66            .byte	$66
13100 2F25                        6F            .byte	$6F
13101 2F26                        66            .byte	$66
13102 2F27                        66            .byte	$66
13103 2F28                        66            .byte	$66
13104 2F29                        F3            .byte	$F3
13105 2F2A                        00            .byte	0
13106 2F2B                        00            .byte	0
13107                                           ! 1382 x00, 0x00,
13108 2F2C                        00            .byte	0
13109 2F2D                        00            .byte	0
13110                                           ! 1383  0x00, 0x0e, 0x1b, 0x18, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0x70, 0x00, 0x00,
13111 2F2E                        00            .byte	0
13112 2F2F                        0E            .byte	$E
13113 2F30                        1B            .byte	$1B
13114 2F31                        18            .byte	$18
13115 2F32                        18            .byte	$18
13116 2F33                        18            .byte	$18
13117 2F34                        7E            .byte	$7E
13118 2F35                        18            .byte	$18
13119 2F36                        18            .byte	$18
13120 2F37                        18            .byte	$18
13121 2F38                        18            .byte	$18
13122 2F39                        18            .byte	$18
13123 2F3A                        D8            .byte	$D8
13124 2F3B                        70            .byte	$70
13125 2F3C                        00            .byte	0
13126 2F3D                        00            .byte	0
13127                                           ! 1384  0x00, 0x18, 0x30, 0x60, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13128 2F3E                        00            .byte	0
13129 2F3F                        18            .byte	$18
13130 2F40                        30            .byte	$30
13131 2F41                        60            .byte	$60
13132 2F42                        00            .byte	0
13133 2F43                        78            .byte	$78
13134 2F44                        0C            .byte	$C
13135 2F45                        7C            .byte	$7C
13136 2F46                        CC            .byte	$CC
13137 2F47                        CC            .byte	$CC
13138 2F48                        CC            .byte	$CC
13139 2F49                        76            .byte	$76
13140 2F4A                        00            .byte	0
13141 2F4B                        00            .byte	0
13142 2F4C                        00            .byte	0
13143 2F4D                        00            .byte	0
13144                                           ! 1385  0x00, 0x0c, 0x18, 0x30, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
13145 2F4E                        00            .byte	0
13146 2F4F                        0C            .byte	$C
13147 2F50                        18            .byte	$18
13148 2F51                        30            .byte	$30
13149 2F52                        00            .byte	0
13150 2F53                        38            .byte	$38
13151 2F54                        18            .byte	$18
13152 2F55                        18            .byte	$18
13153 2F56                        18            .byte	$18
13154 2F57                        18            .byte	$18
13155 2F58                        18            .byte	$18
13156 2F59                        3C            .byte	$3C
13157 2F5A                        00            .byte	0
13158 2F5B                        00            .byte	0
13159 2F5C                        00            .byte	0
13160 2F5D                        00            .byte	0
13161                                           ! 1386  0x00, 0x18, 0x30, 0x60, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13162 2F5E                        00            .byte	0
13163 2F5F                        18            .byte	$18
13164 2F60                        30            .byte	$30
13165 2F61                        60            .byte	$60
13166 2F62                        00            .byte	0
13167 2F63                        7C            .byte	$7C
13168 2F64                        C6            .byte	$C6
13169 2F65                        C6            .byte	$C6
13170 2F66                        C6            .byte	$C6
13171 2F67                        C6            .byte	$C6
13172 2F68                        C6            .byte	$C6
13173 2F69                        7C            .byte	$7C
13174 2F6A                        00            .byte	0
13175 2F6B                        00            .byte	0
13176 2F6C                        00            .byte	0
13177 2F6D                        00            .byte	0
13178                                           ! 1387  0x00, 0x18, 0x30, 0x60, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13179 2F6E                        00            .byte	0
13180 2F6F                        18            .byte	$18
13181 2F70                        30            .byte	$30
13182 2F71                        60            .byte	$60
13183 2F72                        00            .byte	0
13184 2F73                        CC            .byte	$CC
13185 2F74                        CC            .byte	$CC
13186 2F75                        CC            .byte	$CC
13187 2F76                        CC            .byte	$CC
13188 2F77                        CC            .byte	$CC
13189 2F78                        CC            .byte	$CC
13190 2F79                        76            .byte	$76
13191 2F7A                        00            .byte	0
13192 2F7B                        00            .byte	0
13193 2F7C                        00            .byte	0
13194 2F7D                        00            .byte	0
13195                                           ! 1388  0x00, 0x00, 0x76, 0xdc, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
13196 2F7E                        00            .byte	0
13197 2F7F                        00            .byte	0
13198 2F80                        76            .byte	$76
13199 2F81                        DC            .byte	$DC
13200 2F82                        00            .byte	0
13201 2F83                        DC            .byte	$DC
13202 2F84                        66            .byte	$66
13203 2F85                        66            .byte	$66
13204 2F86                        66            .byte	$66
13205 2F87                        66            .byte	$66
13206 2F88                        66            .byte	$66
13207 2F89                        66            .byte	$66
13208 2F8A                        00            .byte	0
13209 2F8B                        00            .byte	0
13210 2F8C                        00            .byte	0
13211 2F8D                        00            .byte	0
13212                                           ! 1389  0x76, 0xdc, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
13213 2F8E                        76            .byte	$76
13214 2F8F                        DC            .byte	$DC
13215 2F90                        00            .byte	0
13216 2F91                        C6            .byte	$C6
13217 2F92                        E6            .byte	$E6
13218 2F93                        F6            .byte	$F6
13219 2F94                        FE            .byte	$FE
13220 2F95                        DE            .byte	$DE
13221 2F96                        CE            .byte	$CE
13222 2F97                        C6            .byte	$C6
13223 2F98                        C6            .byte	$C6
13224 2F99                        C6            .byte	$C6
13225 2F9A                        00            .byte	0
13226 2F9B                        00            .byte	0
13227 2F9C                        00            .byte	0
13228 2F9D                        00            .byte	0
13229                                           ! 1390  0x00, 0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13230 2F9E                        00            .byte	0
13231 2F9F                        3C            .byte	$3C
13232 2FA0                        6C            .byte	$6C
13233 2FA1                        6C            .byte	$6C
13234 2FA2                        3E            .byte	$3E
13235 2FA3                        00            .byte	0
13236 2FA4                        7E            .byte	$7E
13237 2FA5                        00            .byte	0
13238 2FA6                        00            .byte	0
13239 2FA7                        00            .byte	0
13240 2FA8                        00            .byte	0
13241 2FA9                        00            .byte	0
13242 2FAA                        00            .byte	0
13243 2FAB                        00            .byte	0
13244 2FAC                        00            .byte	0
13245 2FAD                        00            .byte	0
13246                                           ! 1391  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13247 2FAE                        00            .byte	0
13248 2FAF                        38            .byte	$38
13249 2FB0                        6C            .byte	$6C
13250 2FB1                        6C            .byte	$6C
13251 2FB2                        38            .byte	$38
13252 2FB3                        00            .byte	0
13253 2FB4                        7C            .byte	$7C
13254 2FB5                        00            .byte	0
13255 2FB6                        00            .byte	0
13256 2FB7                        00            .byte	0
13257 2FB8                        00            .byte	0
13258 2FB9                        00            .byte	0
13259 2FBA                        00            .byte	0
13260 2FBB                        00            .byte	0
13261 2FBC                        00            .byte	0
13262 2FBD                        00            .byte	0
13263                                           ! 1392  0x00, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x60, 0xc0, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13264 2FBE                        00            .byte	0
13265 2FBF                        00            .byte	0
13266 2FC0                        30            .byte	$30
13267 2FC1                        30            .byte	$30
13268 2FC2                        00            .byte	0
13269 2FC3                        30            .byte	$30
13270 2FC4                        30            .byte	$30
13271 2FC5                        60            .byte	$60
13272 2FC6                        C0            .byte	$C0
13273 2FC7                        C6            .byte	$C6
13274 2FC8                        C6            .byte	$C6
13275 2FC9                        7C            .byte	$7C
13276 2FCA                        00            .byte	0
13277 2FCB                        00            .byte	0
13278 2FCC                        00            .byte	0
13279 2FCD                        00            .byte	0
13280                                           ! 1393  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
13281 2FCE                        00            .byte	0
13282 2FCF                        00            .byte	0
13283 2FD0                        00            .byte	0
13284 2FD1                        00            .byte	0
13285 2FD2                        00            .byte	0
13286 2FD3                        00            .byte	0
13287 2FD4                        FE            .byte	$FE
13288 2FD5                        C0            .byte	$C0
13289 2FD6                        C0            .byte	$C0
13290 2FD7                        C0            .byte	$C0
13291 2FD8                        C0            .byte	$C0
13292 2FD9                        00            .byte	0
13293 2FDA                        00            .byte	0
13294 2FDB                        00            .byte	0
13295 2FDC                        00            .byte	0
13296 2FDD                        00            .byte	0
13297                                           ! 1394  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
13298 2FDE                        00            .byte	0
13299 2FDF                        00            .byte	0
13300 2FE0                        00            .byte	0
13301 2FE1                        00            .byte	0
13302 2FE2                        00            .byte	0
13303 2FE3                        00            .byte	0
13304 2FE4                        FE            .byte	$FE
13305 2FE5                        06            .byte	6
13306 2FE6                        06            .byte	6
13307 2FE7                        06            .byte	6
13308 2FE8                        06            .byte	6
13309 2FE9                        00            .byte	0
13310 2FEA                        00            .byte	0
13311 2FEB                        00            .byte	0
13312 2FEC                        00            .byte	0
13313 2FED                        00            .byte	0
13314                                           ! 1395  0x00, 0xc0, 0xc0, 0xc2, 0xc6, 0xcc, 0x18, 0x30, 0x60, 0xce, 0x9b, 0x06, 0x0c, 0x1f, 0x00, 0x00,
13315 2FEE                        00            .byte	0
13316 2FEF                        C0            .byte	$C0
13317 2FF0                        C0            .byte	$C0
13318 2FF1                        C2            .byte	$C2
13319 2FF2                        C6            .byte	$C6
13320 2FF3                        CC            .byte	$CC
13321 2FF4                        18            .byte	$18
13322 2FF5                        30            .byte	$30
13323 2FF6                        60            .byte	$60
13324 2FF7                        CE            .byte	$CE
13325 2FF8                        9B            .byte	$9B
13326 2FF9                        06            .byte	6
13327 2FFA                        0C            .byte	$C
13328 2FFB                        1F            .byte	$1F
13329 2FFC                        00            .byte	0
13330 2FFD                        00            .byte	0
13331                                           ! 1396  0x00, 0xc0, 0xc0, 0xc2, 0xc6, 0xcc, 0x18, 0x30, 0x66, 0xce, 0x96, 0x3e, 0x06, 0x06, 0x00, 0x00,
13332 2FFE                        00            .byte	0
13333 2FFF                        C0            .byte	$C0
13334 3000                        C0            .byte	$C0
13335 3001                        C2            .byte	$C2
13336 3002                        C6            .byte	$C6
13337 3003                        CC            .byte	$CC
13338 3004                        18            .byte	$18
13339 3005                        30            .byte	$30
13340 3006                        66            .byte	$66
13341 3007                        CE            .byte	$CE
13342 3008                        96            .byte	$96
13343 3009                        3E            .byte	$3E
13344 300A                        06            .byte	6
13345 300B                        06            .byte	6
13346 300C                        00            .byte	0
13347 300D                        00            .byte	0
13348                                           ! 1397  0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
13349 300E                        00            .byte	0
13350 300F                        00            .byte	0
13351 3010                        18            .byte	$18
13352 3011                        18            .byte	$18
13353 3012                        00            .byte	0
13354 3013                        18            .byte	$18
13355 3014                        18            .byte	$18
13356 3015                        18            .byte	$18
13357 3016                        3C            .byte	$3C
13358 3017                        3C            .byte	$3C
13359 3018                        3C            .byte	$3C
13360 3019                        18            .byte	$18
13361 301A                        00            .byte	0
13362 301B                        00            .byte	0
13363 301C                        00            .byte	0
13364 301D                        00            .byte	0
13365                                           ! 1398  0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x6c, 0xd8, 0x6c, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13366 301E                        00            .byte	0
13367 301F                        00            .byte	0
13368 3020                        00            .byte	0
13369 3021                        00            .byte	0
13370 3022                        00            .byte	0
13371 3023                        36            .byte	$36
13372 3024                        6C            .byte	$6C
13373 3025                        D8            .byte	$D8
13374 3026                        6C            .byte	$6C
13375 3027                        36            .byte	$36
13376 3028                        00            .byte	0
13377 3029                        00            .byte	0
13378 302A                        00            .byte	0
13379 302B                        00            .byte	0
13380 302C                        00            .byte	0
13381 302D                        00            .byte	0
13382                                           ! 1399  0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c, 0x36, 0x6c, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13383 302E                        00            .byte	0
13384 302F                        00            .byte	0
13385 3030                        00            .byte	0
13386 3031                        00            .byte	0
13387 3032                        00            .byte	0
13388 3033                        D8            .byte	$D8
13389 3034                        6C            .byte	$6C
13390 3035                        36            .byte	$36
13391 3036                        6C            .byte	$6C
13392 3037                        D8            .byte	$D8
13393 3038                        00            .byte	0
13394 3039                        00            .byte	0
13395 303A                        00            .byte	0
13396 303B                        00            .byte	0
13397 303C                        00            .byte	0
13398 303D                        00            .byte	0
13399                                           ! 1400  0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44,
13400 303E                        11            .byte	$11
13401 303F                        44            .byte	$44
13402 3040                        11            .byte	$11
13403 3041                        44            .byte	$44
13404 3042                        11            .byte	$11
13405 3043                        44            .byte	$44
13406 3044                        11            .byte	$11
13407 3045                        44            .byte	$44
13408 3046                        11            .byte	$11
13409 3047                        44            .byte	$44
13410 3048                        11            .byte	$11
13411 3049                        44            .byte	$44
13412 304A                        11            .byte	$11
13413 304B                        44            .byte	$44
13414 304C                        11            .byte	$11
13415 304D                        44            .byte	$44
13416                                           ! 1401  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
13417 304E                        55            .byte	$55
13418 304F                        AA            .byte	$AA
13419 3050                        55            .byte	$55
13420 3051                        AA            .byte	$AA
13421 3052                        55            .byte	$55
13422 3053                        AA            .byte	$AA
13423 3054                        55            .byte	$55
13424 3055                        AA            .byte	$AA
13425 3056                        55            .byte	$55
13426 3057                        AA            .byte	$AA
13427 3058                        55            .byte	$55
13428 3059                        AA            .byte	$AA
13429 305A                        55            .byte	$55
13430 305B                        AA            .byte	$AA
13431 305C                        55            .byte	$55
13432 305D                        AA            .byte	$AA
13433                                           ! 1402  0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77,
13434 305E                        DD            .byte	$DD
13435 305F                        77            .byte	$77
13436 3060                        DD            .byte	$DD
13437 3061                        77            .byte	$77
13438 3062                        DD            .byte	$DD
13439 3063                        77            .byte	$77
13440 3064                        DD            .byte	$DD
13441 3065                        77            .byte	$77
13442 3066                        DD            .byte	$DD
13443 3067                        77            .byte	$77
13444 3068                        DD            .byte	$DD
13445 3069                        77            .byte	$77
13446 306A                        DD            .byte	$DD
13447 306B                        77            .byte	$77
13448 306C                        DD            .byte	$DD
13449 306D                        77            .byte	$77
13450                                           ! 1403  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13451 306E                        18            .byte	$18
13452 306F                        18            .byte	$18
13453 3070                        18            .byte	$18
13454 3071                        18            .byte	$18
13455 3072                        18            .byte	$18
13456 3073                        18            .byte	$18
13457 3074                        18            .byte	$18
13458 3075                        18            .byte	$18
13459 3076                        18            .byte	$18
13460 3077                        18            .byte	$18
13461 3078                        18            .byte	$18
13462 3079                        18            .byte	$18
13463 307A                        18            .byte	$18
13464 307B                        18            .byte	$18
13465 307C                        18            .byte	$18
13466 307D                        18            .byte	$18
13467                                           ! 1404 
13468                                           ! 1404  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13469 307E                        18            .byte	$18
13470 307F                        18            .byte	$18
13471 3080                        18            .byte	$18
13472 3081                        18            .byte	$18
13473 3082                        18            .byte	$18
13474 3083                        18            .byte	$18
13475 3084                        18            .byte	$18
13476 3085                        F8            .byte	$F8
13477 3086                        18            .byte	$18
13478 3087                        18            .byte	$18
13479 3088                        18            .byte	$18
13480 3089                        18            .byte	$18
13481 308A                        18            .byte	$18
13482 308B                        18            .byte	$18
13483 308C                        18            .byte	$18
13484 308D                        18            .byte	$18
13485                                           ! 1405  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13486 308E                        18            .byte	$18
13487 308F                        18            .byte	$18
13488 3090                        18            .byte	$18
13489 3091                        18            .byte	$18
13490 3092                        18            .byte	$18
13491 3093                        F8            .byte	$F8
13492 3094                        18            .byte	$18
13493 3095                        F8            .byte	$F8
13494 3096                        18            .byte	$18
13495 3097                        18            .byte	$18
13496 3098                        18            .byte	$18
13497 3099                        18            .byte	$18
13498 309A                        18            .byte	$18
13499 309B                        18            .byte	$18
13500 309C                        18            .byte	$18
13501 309D                        18            .byte	$18
13502                                           ! 1406  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13503 309E                        36            .byte	$36
13504 309F                        36            .byte	$36
13505 30A0                        36            .byte	$36
13506 30A1                        36            .byte	$36
13507 30A2                        36            .byte	$36
13508 30A3                        36            .byte	$36
13509 30A4                        36            .byte	$36
13510 30A5                        F6            .byte	$F6
13511 30A6                        36            .byte	$36
13512 30A7                        36            .byte	$36
13513 30A8                        36            .byte	$36
13514 30A9                        36            .byte	$36
13515 30AA                        36            .byte	$36
13516 30AB                        36            .byte	$36
13517 30AC                        36            .byte	$36
13518 30AD                        36            .byte	$36
13519                                           ! 1407  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13520 30AE                        00            .byte	0
13521 30AF                        00            .byte	0
13522 30B0                        00            .byte	0
13523 30B1                        00            .byte	0
13524 30B2                        00            .byte	0
13525 30B3                        00            .byte	0
13526 30B4                        00            .byte	0
13527 30B5                        FE            .byte	$FE
13528 30B6                        36            .byte	$36
13529 30B7                        36            .byte	$36
13530 30B8                        36            .byte	$36
13531 30B9                        36            .byte	$36
13532 30BA                        36            .byte	$36
13533 30BB                        36            .byte	$36
13534 30BC                        36            .byte	$36
13535 30BD                        36            .byte	$36
13536                                           ! 1408  0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13537 30BE                        00            .byte	0
13538 30BF                        00            .byte	0
13539 30C0                        00            .byte	0
13540 30C1                        00            .byte	0
13541 30C2                        00            .byte	0
13542 30C3                        F8            .byte	$F8
13543 30C4                        18            .byte	$18
13544 30C5                        F8            .byte	$F8
13545 30C6                        18            .byte	$18
13546 30C7                        18            .byte	$18
13547 30C8                        18            .byte	$18
13548 30C9                        18            .byte	$18
13549 30CA                        18            .byte	$18
13550 30CB                        18            .byte	$18
13551 30CC                        18            .byte	$18
13552 30CD                        18            .byte	$18
13553                                           ! 1409  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13554 30CE                        36            .byte	$36
13555 30CF                        36            .byte	$36
13556 30D0                        36            .byte	$36
13557 30D1                        36            .byte	$36
13558 30D2                        36            .byte	$36
13559 30D3                        F6            .byte	$F6
13560 30D4                        06            .byte	6
13561 30D5                        F6            .byte	$F6
13562 30D6                        36            .byte	$36
13563 30D7                        36            .byte	$36
13564 30D8                        36            .byte	$36
13565 30D9                        36            .byte	$36
13566 30DA                        36            .byte	$36
13567 30DB                        36            .byte	$36
13568 30DC                        36            .byte	$36
13569 30DD                        36            .byte	$36
13570                                           ! 1410  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13571 30DE                        36            .byte	$36
13572 30DF                        36            .byte	$36
13573 30E0                        36            .byte	$36
13574 30E1                        36            .byte	$36
13575 30E2                        36            .byte	$36
13576 30E3                        36            .byte	$36
13577 30E4                        36            .byte	$36
13578 30E5                        36            .byte	$36
13579 30E6                        36            .byte	$36
13580 30E7                        36            .byte	$36
13581 30E8                        36            .byte	$36
13582 30E9                        36            .byte	$36
13583 30EA                        36            .byte	$36
13584 30EB                        36            .byte	$36
13585 30EC                        36            .byte	$36
13586 30ED                        36            .byte	$36
13587                                           ! 1411  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13588 30EE                        00            .byte	0
13589 30EF                        00            .byte	0
13590 30F0                        00            .byte	0
13591 30F1                        00            .byte	0
13592 30F2                        00            .byte	0
13593 30F3                        FE            .byte	$FE
13594 30F4                        06            .byte	6
13595 30F5                        F6            .byte	$F6
13596 30F6                        36            .byte	$36
13597 30F7                        36            .byte	$36
13598 30F8                        36            .byte	$36
13599 30F9                        36            .byte	$36
13600 30FA                        36            .byte	$36
13601 30FB                        36            .byte	$36
13602 30FC                        36            .byte	$36
13603 30FD                        36            .byte	$36
13604                                           ! 1412  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13605 30FE                        36            .byte	$36
13606 30FF                        36            .byte	$36
13607 3100                        36            .byte	$36
13608 3101                        36            .byte	$36
13609 3102                        36            .byte	$36
13610 3103                        F6            .byte	$F6
13611 3104                        06            .byte	6
13612 3105                        FE            .byte	$FE
13613 3106                        00            .byte	0
13614 3107                        00            .byte	0
13615 3108                        00            .byte	0
13616 3109                        00            .byte	0
13617 310A                        00            .byte	0
13618 310B                        00            .byte	0
13619 310C                        00            .byte	0
13620 310D                        00            .byte	0
13621                                           ! 1413  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13622 310E                        36            .byte	$36
13623 310F                        36            .byte	$36
13624 3110                        36            .byte	$36
13625 3111                        36            .byte	$36
13626 3112                        36            .byte	$36
13627 3113                        36            .byte	$36
13628 3114                        36            .byte	$36
13629 3115                        FE            .byte	$FE
13630 3116                        00            .byte	0
13631 3117                        00            .byte	0
13632 3118                        00            .byte	0
13633 3119                        00            .byte	0
13634 311A                        00            .byte	0
13635 311B                        00            .byte	0
13636 311C                        00            .byte	0
13637 311D                        00            .byte	0
13638                                           ! 1414  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13639 311E                        18            .byte	$18
13640 311F                        18            .byte	$18
13641 3120                        18            .byte	$18
13642 3121                        18            .byte	$18
13643 3122                        18            .byte	$18
13644 3123                        F8            .byte	$F8
13645 3124                        18            .byte	$18
13646 3125                        F8            .byte	$F8
13647 3126                        00            .byte	0
13648 3127                        00            .byte	0
13649 3128                        00            .byte	0
13650 3129                        00            .byte	0
13651 312A                        00            .byte	0
13652 312B                        00            .byte	0
13653 312C                        00            .byte	0
13654 312D                        00            .byte	0
13655                                           ! 1415  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13656 312E                        00            .byte	0
13657 312F                        00            .byte	0
13658 3130                        00            .byte	0
13659 3131                        00            .byte	0
13660 3132                        00            .byte	0
13661 3133                        00            .byte	0
13662 3134                        00            .byte	0
13663 3135                        F8            .byte	$F8
13664 3136                        18            .byte	$18
13665 3137                        18            .byte	$18
13666 3138                        18            .byte	$18
13667 3139                        18            .byte	$18
13668 313A                        18            .byte	$18
13669 313B                        18            .byte	$18
13670 313C                        18            .byte	$18
13671 313D                        18            .byte	$18
13672                                           ! 1416  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13673 313E                        18            .byte	$18
13674 313F                        18            .byte	$18
13675 3140                        18            .byte	$18
13676 3141                        18            .byte	$18
13677 3142                        18            .byte	$18
13678 3143                        18            .byte	$18
13679 3144                        18            .byte	$18
13680 3145                        1F            .byte	$1F
13681 3146                        00            .byte	0
13682 3147                        00            .byte	0
13683 3148                        00            .byte	0
13684 3149                        00            .byte	0
13685 314A                        00            .byte	0
13686 314B                        00            .byte	0
13687 314C                        00            .byte	0
13688 314D                        00            .byte	0
13689                                           ! 1417  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13690 314E                        18            .byte	$18
13691 314F                        18            .byte	$18
13692 3150                        18            .byte	$18
13693 3151                        18            .byte	$18
13694 3152                        18            .byte	$18
13695 3153                        18            .byte	$18
13696 3154                        18            .byte	$18
13697 3155                        FF            .byte	$FF
13698 3156                        00            .byte	0
13699 3157                        00            .byte	0
13700 3158                        00            .byte	0
13701 3159                        00            .byte	0
13702 315A                        00            .byte	0
13703 315B                        00            .byte	0
13704 315C                        00            .byte	0
13705 315D                        00            .byte	0
13706                                           ! 1418  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13707 315E                        00            .byte	0
13708 315F                        00            .byte	0
13709 3160                        00            .byte	0
13710 3161                        00            .byte	0
13711 3162                        00            .byte	0
13712 3163                        00            .byte	0
13713 3164                        00            .byte	0
13714 3165                        FF            .byte	$FF
13715 3166                        18            .byte	$18
13716 3167                        18            .byte	$18
13717 3168                        18            .byte	$18
13718 3169                        18            .byte	$18
13719 316A                        18            .byte	$18
13720 316B                        18            .byte	$18
13721 316C                        18            .byte	$18
13722 316D                        18            .byte	$18
13723                                           ! 1419  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13724 316E                        18            .byte	$18
13725 316F                        18            .byte	$18
13726 3170                        18            .byte	$18
13727 3171                        18            .byte	$18
13728 3172                        18            .byte	$18
13729 3173                        18            .byte	$18
13730 3174                        18            .byte	$18
13731 3175                        1F            .byte	$1F
13732 3176                        18            .byte	$18
13733 3177                        18            .byte	$18
13734 3178                        18            .byte	$18
13735 3179                        18            .byte	$18
13736 317A                        18            .byte	$18
13737 317B                        18            .byte	$18
13738 317C                        18            .byte	$18
13739 317D                        18            .byte	$18
13740                                           ! 1420  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13741 317E                        00            .byte	0
13742 317F                        00            .byte	0
13743 3180                        00            .byte	0
13744 3181                        00            .byte	0
13745 3182                        00            .byte	0
13746 3183                        00            .byte	0
13747 3184                        00            .byte	0
13748 3185                        FF            .byte	$FF
13749 3186                        00            .byte	0
13750 3187                        00            .byte	0
13751 3188                        00            .byte	0
13752 3189                        00            .byte	0
13753 318A                        00            .byte	0
13754 318B                        00            .byte	0
13755 318C                        00            .byte	0
13756 318D                        00            .byte	0
13757                                           ! 1421  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13758 318E                        18            .byte	$18
13759 318F                        18            .byte	$18
13760 3190                        18            .byte	$18
13761 3191                        18            .byte	$18
13762 3192                        18            .byte	$18
13763 3193                        18            .byte	$18
13764 3194                        18            .byte	$18
13765 3195                        FF            .byte	$FF
13766 3196                        18            .byte	$18
13767 3197                        18            .byte	$18
13768 3198                        18            .byte	$18
13769 3199                        18            .byte	$18
13770 319A                        18            .byte	$18
13771 319B                        18            .byte	$18
13772 319C                        18            .byte	$18
13773 319D                        18            .byte	$18
13774                                           ! 1422  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13775 319E                        18            .byte	$18
13776 319F                        18            .byte	$18
13777 31A0                        18            .byte	$18
13778 31A1                        18            .byte	$18
13779 31A2                        18            .byte	$18
13780 31A3                        1F            .byte	$1F
13781 31A4                        18            .byte	$18
13782 31A5                        1F            .byte	$1F
13783 31A6                        18            .byte	$18
13784 31A7                        18            .byte	$18
13785 31A8                        18            .byte	$18
13786 31A9                        18            .byte	$18
13787 31AA                        18            .byte	$18
13788 31AB                        18            .byte	$18
13789 31AC                        18            .byte	$18
13790 31AD                        18            .byte	$18
13791                                           ! 1423  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13792 31AE                        36            .byte	$36
13793 31AF                        36            .byte	$36
13794 31B0                        36            .byte	$36
13795 31B1                        36            .byte	$36
13796 31B2                        36            .byte	$36
13797 31B3                        36            .byte	$36
13798 31B4                        36            .byte	$36
13799 31B5                        37            .byte	$37
13800 31B6                        36            .byte	$36
13801 31B7                        36            .byte	$36
13802 31B8                        36            .byte	$36
13803 31B9                        36            .byte	$36
13804 31BA                        36            .byte	$36
13805 31BB                        36            .byte	$36
13806 31BC                        36            .byte	$36
13807 31BD                        36            .byte	$36
13808                                           ! 1424  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13809 31BE                        36            .byte	$36
13810 31BF                        36            .byte	$36
13811 31C0                        36            .byte	$36
13812 31C1                        36            .byte	$36
13813 31C2                        36            .byte	$36
13814 31C3                        37            .byte	$37
13815 31C4                        30            .byte	$30
13816 31C5                        3F            .byte	$3F
13817 31C6                        00            .byte	0
13818 31C7                        00            .byte	0
13819 31C8                        00            .byte	0
13820 31C9                        00            .byte	0
13821 31CA                        00            .byte	0
13822 31CB                        00            .byte	0
13823 31CC                        00            .byte	0
13824 31CD                        00            .byte	0
13825                                           ! 1425  0x00, 0x00
13826 31CE                        00            .byte	0
13827                                           ! 1425 , 0x00, 0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13828 31CF                        00            .byte	0
13829 31D0                        00            .byte	0
13830 31D1                        00            .byte	0
13831 31D2                        00            .byte	0
13832 31D3                        3F            .byte	$3F
13833 31D4                        30            .byte	$30
13834 31D5                        37            .byte	$37
13835 31D6                        36            .byte	$36
13836 31D7                        36            .byte	$36
13837 31D8                        36            .byte	$36
13838 31D9                        36            .byte	$36
13839 31DA                        36            .byte	$36
13840 31DB                        36            .byte	$36
13841 31DC                        36            .byte	$36
13842 31DD                        36            .byte	$36
13843                                           ! 1426  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13844 31DE                        36            .byte	$36
13845 31DF                        36            .byte	$36
13846 31E0                        36            .byte	$36
13847 31E1                        36            .byte	$36
13848 31E2                        36            .byte	$36
13849 31E3                        F7            .byte	$F7
13850 31E4                        00            .byte	0
13851 31E5                        FF            .byte	$FF
13852 31E6                        00            .byte	0
13853 31E7                        00            .byte	0
13854 31E8                        00            .byte	0
13855 31E9                        00            .byte	0
13856 31EA                        00            .byte	0
13857 31EB                        00            .byte	0
13858 31EC                        00            .byte	0
13859 31ED                        00            .byte	0
13860                                           ! 1427  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13861 31EE                        00            .byte	0
13862 31EF                        00            .byte	0
13863 31F0                        00            .byte	0
13864 31F1                        00            .byte	0
13865 31F2                        00            .byte	0
13866 31F3                        FF            .byte	$FF
13867 31F4                        00            .byte	0
13868 31F5                        F7            .byte	$F7
13869 31F6                        36            .byte	$36
13870 31F7                        36            .byte	$36
13871 31F8                        36            .byte	$36
13872 31F9                        36            .byte	$36
13873 31FA                        36            .byte	$36
13874 31FB                        36            .byte	$36
13875 31FC                        36            .byte	$36
13876 31FD                        36            .byte	$36
13877                                           ! 1428  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13878 31FE                        36            .byte	$36
13879 31FF                        36            .byte	$36
13880 3200                        36            .byte	$36
13881 3201                        36            .byte	$36
13882 3202                        36            .byte	$36
13883 3203                        37            .byte	$37
13884 3204                        30            .byte	$30
13885 3205                        37            .byte	$37
13886 3206                        36            .byte	$36
13887 3207                        36            .byte	$36
13888 3208                        36            .byte	$36
13889 3209                        36            .byte	$36
13890 320A                        36            .byte	$36
13891 320B                        36            .byte	$36
13892 320C                        36            .byte	$36
13893 320D                        36            .byte	$36
13894                                           ! 1429  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13895 320E                        00            .byte	0
13896 320F                        00            .byte	0
13897 3210                        00            .byte	0
13898 3211                        00            .byte	0
13899 3212                        00            .byte	0
13900 3213                        FF            .byte	$FF
13901 3214                        00            .byte	0
13902 3215                        FF            .byte	$FF
13903 3216                        00            .byte	0
13904 3217                        00            .byte	0
13905 3218                        00            .byte	0
13906 3219                        00            .byte	0
13907 321A                        00            .byte	0
13908 321B                        00            .byte	0
13909 321C                        00            .byte	0
13910 321D                        00            .byte	0
13911                                           ! 1430  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13912 321E                        36            .byte	$36
13913 321F                        36            .byte	$36
13914 3220                        36            .byte	$36
13915 3221                        36            .byte	$36
13916 3222                        36            .byte	$36
13917 3223                        F7            .byte	$F7
13918 3224                        00            .byte	0
13919 3225                        F7            .byte	$F7
13920 3226                        36            .byte	$36
13921 3227                        36            .byte	$36
13922 3228                        36            .byte	$36
13923 3229                        36            .byte	$36
13924 322A                        36            .byte	$36
13925 322B                        36            .byte	$36
13926 322C                        36            .byte	$36
13927 322D                        36            .byte	$36
13928                                           ! 1431  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13929 322E                        18            .byte	$18
13930 322F                        18            .byte	$18
13931 3230                        18            .byte	$18
13932 3231                        18            .byte	$18
13933 3232                        18            .byte	$18
13934 3233                        FF            .byte	$FF
13935 3234                        00            .byte	0
13936 3235                        FF            .byte	$FF
13937 3236                        00            .byte	0
13938 3237                        00            .byte	0
13939 3238                        00            .byte	0
13940 3239                        00            .byte	0
13941 323A                        00            .byte	0
13942 323B                        00            .byte	0
13943 323C                        00            .byte	0
13944 323D                        00            .byte	0
13945                                           ! 1432  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13946 323E                        36            .byte	$36
13947 323F                        36            .byte	$36
13948 3240                        36            .byte	$36
13949 3241                        36            .byte	$36
13950 3242                        36            .byte	$36
13951 3243                        36            .byte	$36
13952 3244                        36            .byte	$36
13953 3245                        FF            .byte	$FF
13954 3246                        00            .byte	0
13955 3247                        00            .byte	0
13956 3248                        00            .byte	0
13957 3249                        00            .byte	0
13958 324A                        00            .byte	0
13959 324B                        00            .byte	0
13960 324C                        00            .byte	0
13961 324D                        00            .byte	0
13962                                           ! 1433  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13963 324E                        00            .byte	0
13964 324F                        00            .byte	0
13965 3250                        00            .byte	0
13966 3251                        00            .byte	0
13967 3252                        00            .byte	0
13968 3253                        FF            .byte	$FF
13969 3254                        00            .byte	0
13970 3255                        FF            .byte	$FF
13971 3256                        18            .byte	$18
13972 3257                        18            .byte	$18
13973 3258                        18            .byte	$18
13974 3259                        18            .byte	$18
13975 325A                        18            .byte	$18
13976 325B                        18            .byte	$18
13977 325C                        18            .byte	$18
13978 325D                        18            .byte	$18
13979                                           ! 1434  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13980 325E                        00            .byte	0
13981 325F                        00            .byte	0
13982 3260                        00            .byte	0
13983 3261                        00            .byte	0
13984 3262                        00            .byte	0
13985 3263                        00            .byte	0
13986 3264                        00            .byte	0
13987 3265                        FF            .byte	$FF
13988 3266                        36            .byte	$36
13989 3267                        36            .byte	$36
13990 3268                        36            .byte	$36
13991 3269                        36            .byte	$36
13992 326A                        36            .byte	$36
13993 326B                        36            .byte	$36
13994 326C                        36            .byte	$36
13995 326D                        36            .byte	$36
13996                                           ! 1435  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13997 326E                        36            .byte	$36
13998 326F                        36            .byte	$36
13999 3270                        36            .byte	$36
14000 3271                        36            .byte	$36
14001 3272                        36            .byte	$36
14002 3273                        36            .byte	$36
14003 3274                        36            .byte	$36
14004 3275                        3F            .byte	$3F
14005 3276                        00            .byte	0
14006 3277                        00            .byte	0
14007 3278                        00            .byte	0
14008 3279                        00            .byte	0
14009 327A                        00            .byte	0
14010 327B                        00            .byte	0
14011 327C                        00            .byte	0
14012 327D                        00            .byte	0
14013                                           ! 1436  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14014 327E                        18            .byte	$18
14015 327F                        18            .byte	$18
14016 3280                        18            .byte	$18
14017 3281                        18            .byte	$18
14018 3282                        18            .byte	$18
14019 3283                        1F            .byte	$1F
14020 3284                        18            .byte	$18
14021 3285                        1F            .byte	$1F
14022 3286                        00            .byte	0
14023 3287                        00            .byte	0
14024 3288                        00            .byte	0
14025 3289                        00            .byte	0
14026 328A                        00            .byte	0
14027 328B                        00            .byte	0
14028 328C                        00            .byte	0
14029 328D                        00            .byte	0
14030                                           ! 1437  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14031 328E                        00            .byte	0
14032 328F                        00            .byte	0
14033 3290                        00            .byte	0
14034 3291                        00            .byte	0
14035 3292                        00            .byte	0
14036 3293                        1F            .byte	$1F
14037 3294                        18            .byte	$18
14038 3295                        1F            .byte	$1F
14039 3296                        18            .byte	$18
14040 3297                        18            .byte	$18
14041 3298                        18            .byte	$18
14042 3299                        18            .byte	$18
14043 329A                        18            .byte	$18
14044 329B                        18            .byte	$18
14045 329C                        18            .byte	$18
14046 329D                        18            .byte	$18
14047                                           ! 1438  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14048 329E                        00            .byte	0
14049 329F                        00            .byte	0
14050 32A0                        00            .byte	0
14051 32A1                        00            .byte	0
14052 32A2                        00            .byte	0
14053 32A3                        00            .byte	0
14054 32A4                        00            .byte	0
14055 32A5                        3F            .byte	$3F
14056 32A6                        36            .byte	$36
14057 32A7                        36            .byte	$36
14058 32A8                        36            .byte	$36
14059 32A9                        36            .byte	$36
14060 32AA                        36            .byte	$36
14061 32AB                        36            .byte	$36
14062 32AC                        36            .byte	$36
14063 32AD                        36            .byte	$36
14064                                           ! 1439  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14065 32AE                        36            .byte	$36
14066 32AF                        36            .byte	$36
14067 32B0                        36            .byte	$36
14068 32B1                        36            .byte	$36
14069 32B2                        36            .byte	$36
14070 32B3                        36            .byte	$36
14071 32B4                        36            .byte	$36
14072 32B5                        FF            .byte	$FF
14073 32B6                        36            .byte	$36
14074 32B7                        36            .byte	$36
14075 32B8                        36            .byte	$36
14076 32B9                        36            .byte	$36
14077 32BA                        36            .byte	$36
14078 32BB                        36            .byte	$36
14079 32BC                        36            .byte	$36
14080 32BD                        36            .byte	$36
14081                                           ! 1440  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14082 32BE                        18            .byte	$18
14083 32BF                        18            .byte	$18
14084 32C0                        18            .byte	$18
14085 32C1                        18            .byte	$18
14086 32C2                        18            .byte	$18
14087 32C3                        FF            .byte	$FF
14088 32C4                        18            .byte	$18
14089 32C5                        FF            .byte	$FF
14090 32C6                        18            .byte	$18
14091 32C7                        18            .byte	$18
14092 32C8                        18            .byte	$18
14093 32C9                        18            .byte	$18
14094 32CA                        18            .byte	$18
14095 32CB                        18            .byte	$18
14096 32CC                        18            .byte	$18
14097 32CD                        18            .byte	$18
14098                                           ! 1441  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14099 32CE                        18            .byte	$18
14100 32CF                        18            .byte	$18
14101 32D0                        18            .byte	$18
14102 32D1                        18            .byte	$18
14103 32D2                        18            .byte	$18
14104 32D3                        18            .byte	$18
14105 32D4                        18            .byte	$18
14106 32D5                        F8            .byte	$F8
14107 32D6                        00            .byte	0
14108 32D7                        00            .byte	0
14109 32D8                        00            .byte	0
14110 32D9                        00            .byte	0
14111 32DA                        00            .byte	0
14112 32DB                        00            .byte	0
14113 32DC                        00            .byte	0
14114 32DD                        00            .byte	0
14115                                           ! 1442  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14116 32DE                        00            .byte	0
14117 32DF                        00            .byte	0
14118 32E0                        00            .byte	0
14119 32E1                        00            .byte	0
14120 32E2                        00            .byte	0
14121 32E3                        00            .byte	0
14122 32E4                        00            .byte	0
14123 32E5                        1F            .byte	$1F
14124 32E6                        18            .byte	$18
14125 32E7                        18            .byte	$18
14126 32E8                        18            .byte	$18
14127 32E9                        18            .byte	$18
14128 32EA                        18            .byte	$18
14129 32EB                        18            .byte	$18
14130 32EC                        18            .byte	$18
14131 32ED                        18            .byte	$18
14132                                           ! 1443  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
14133 32EE                        FF            .byte	$FF
14134 32EF                        FF            .byte	$FF
14135 32F0                        FF            .byte	$FF
14136 32F1                        FF            .byte	$FF
14137 32F2                        FF            .byte	$FF
14138 32F3                        FF            .byte	$FF
14139 32F4                        FF            .byte	$FF
14140 32F5                        FF            .byte	$FF
14141 32F6                        FF            .byte	$FF
14142 32F7                        FF            .byte	$FF
14143 32F8                        FF            .byte	$FF
14144 32F9                        FF            .byte	$FF
14145 32FA                        FF            .byte	$FF
14146 32FB                        FF            .byte	$FF
14147 32FC                        FF            .byte	$FF
14148 32FD                        FF            .byte	$FF
14149                                           ! 1444  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
14150 32FE                        00            .byte	0
14151 32FF                        00            .byte	0
14152 3300                        00            .byte	0
14153 3301                        00            .byte	0
14154 3302                        00            .byte	0
14155 3303                        00            .byte	0
14156 3304                        00            .byte	0
14157 3305                        FF            .byte	$FF
14158 3306                        FF            .byte	$FF
14159 3307                        FF            .byte	$FF
14160 3308                        FF            .byte	$FF
14161 3309                        FF            .byte	$FF
14162 330A                        FF            .byte	$FF
14163 330B                        FF            .byte	$FF
14164 330C                        FF            .byte	$FF
14165 330D                        FF            .byte	$FF
14166                                           ! 1445  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
14167 330E                        F0            .byte	$F0
14168 330F                        F0            .byte	$F0
14169 3310                        F0            .byte	$F0
14170 3311                        F0            .byte	$F0
14171 3312                        F0            .byte	$F0
14172 3313                        F0            .byte	$F0
14173 3314                        F0            .byte	$F0
14174 3315                        F0            .byte	$F0
14175 3316                        F0            .byte	$F0
14176 3317                        F0            .byte	$F0
14177 3318                        F0            .byte	$F0
14178 3319                        F0            .byte	$F0
14179 331A                        F0            .byte	$F0
14180 331B                        F0            .byte	$F0
14181 331C                        F0            .byte	$F0
14182 331D                        F0            .byte	$F0
14183                                           ! 1446  0x0f, 0x0f, 0x0f, 0x0
14184 331E                        0F            .byte	$F
14185 331F                        0F            .byte	$F
14186 3320                        0F            .byte	$F
14187                                           ! 1446 f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
14188 3321                        0F            .byte	$F
14189 3322                        0F            .byte	$F
14190 3323                        0F            .byte	$F
14191 3324                        0F            .byte	$F
14192 3325                        0F            .byte	$F
14193 3326                        0F            .byte	$F
14194 3327                        0F            .byte	$F
14195 3328                        0F            .byte	$F
14196 3329                        0F            .byte	$F
14197 332A                        0F            .byte	$F
14198 332B                        0F            .byte	$F
14199 332C                        0F            .byte	$F
14200 332D                        0F            .byte	$F
14201                                           ! 1447  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14202 332E                        FF            .byte	$FF
14203 332F                        FF            .byte	$FF
14204 3330                        FF            .byte	$FF
14205 3331                        FF            .byte	$FF
14206 3332                        FF            .byte	$FF
14207 3333                        FF            .byte	$FF
14208 3334                        FF            .byte	$FF
14209 3335                        00            .byte	0
14210 3336                        00            .byte	0
14211 3337                        00            .byte	0
14212 3338                        00            .byte	0
14213 3339                        00            .byte	0
14214 333A                        00            .byte	0
14215 333B                        00            .byte	0
14216 333C                        00            .byte	0
14217 333D                        00            .byte	0
14218                                           ! 1448  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0xd8, 0xd8, 0xd8, 0xdc, 0x76, 0x00, 0x00, 0x00, 0x00,
14219 333E                        00            .byte	0
14220 333F                        00            .byte	0
14221 3340                        00            .byte	0
14222 3341                        00            .byte	0
14223 3342                        00            .byte	0
14224 3343                        76            .byte	$76
14225 3344                        DC            .byte	$DC
14226 3345                        D8            .byte	$D8
14227 3346                        D8            .byte	$D8
14228 3347                        D8            .byte	$D8
14229 3348                        DC            .byte	$DC
14230 3349                        76            .byte	$76
14231 334A                        00            .byte	0
14232 334B                        00            .byte	0
14233 334C                        00            .byte	0
14234 334D                        00            .byte	0
14235                                           ! 1449  0x00, 0x00, 0x78, 0xcc, 0xcc, 0xcc, 0xd8, 0xcc, 0xc6, 0xc6, 0xc6, 0xcc, 0x00, 0x00, 0x00, 0x00,
14236 334E                        00            .byte	0
14237 334F                        00            .byte	0
14238 3350                        78            .byte	$78
14239 3351                        CC            .byte	$CC
14240 3352                        CC            .byte	$CC
14241 3353                        CC            .byte	$CC
14242 3354                        D8            .byte	$D8
14243 3355                        CC            .byte	$CC
14244 3356                        C6            .byte	$C6
14245 3357                        C6            .byte	$C6
14246 3358                        C6            .byte	$C6
14247 3359                        CC            .byte	$CC
14248 335A                        00            .byte	0
14249 335B                        00            .byte	0
14250 335C                        00            .byte	0
14251 335D                        00            .byte	0
14252                                           ! 1450  0x00, 0x00, 0xfe, 0xc6, 0xc6, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00,
14253 335E                        00            .byte	0
14254 335F                        00            .byte	0
14255 3360                        FE            .byte	$FE
14256 3361                        C6            .byte	$C6
14257 3362                        C6            .byte	$C6
14258 3363                        C0            .byte	$C0
14259 3364                        C0            .byte	$C0
14260 3365                        C0            .byte	$C0
14261 3366                        C0            .byte	$C0
14262 3367                        C0            .byte	$C0
14263 3368                        C0            .byte	$C0
14264 3369                        C0            .byte	$C0
14265 336A                        00            .byte	0
14266 336B                        00            .byte	0
14267 336C                        00            .byte	0
14268 336D                        00            .byte	0
14269                                           ! 1451  0x00, 0x00, 0x00, 0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00,
14270 336E                        00            .byte	0
14271 336F                        00            .byte	0
14272 3370                        00            .byte	0
14273 3371                        00            .byte	0
14274 3372                        FE            .byte	$FE
14275 3373                        6C            .byte	$6C
14276 3374                        6C            .byte	$6C
14277 3375                        6C            .byte	$6C
14278 3376                        6C            .byte	$6C
14279 3377                        6C            .byte	$6C
14280 3378                        6C            .byte	$6C
14281 3379                        6C            .byte	$6C
14282 337A                        00            .byte	0
14283 337B                        00            .byte	0
14284 337C                        00            .byte	0
14285 337D                        00            .byte	0
14286                                           ! 1452  0x00, 0x00, 0x00, 0xfe, 0xc6, 0x60, 0x30, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
14287 337E                        00            .byte	0
14288 337F                        00            .byte	0
14289 3380                        00            .byte	0
14290 3381                        FE            .byte	$FE
14291 3382                        C6            .byte	$C6
14292 3383                        60            .byte	$60
14293 3384                        30            .byte	$30
14294 3385                        18            .byte	$18
14295 3386                        30            .byte	$30
14296 3387                        60            .byte	$60
14297 3388                        C6            .byte	$C6
14298 3389                        FE            .byte	$FE
14299 338A                        00            .byte	0
14300 338B                        00            .byte	0
14301 338C                        00            .byte	0
14302 338D                        00            .byte	0
14303                                           ! 1453  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00, 0x00,
14304 338E                        00            .byte	0
14305 338F                        00            .byte	0
14306 3390                        00            .byte	0
14307 3391                        00            .byte	0
14308 3392                        00            .byte	0
14309 3393                        7E            .byte	$7E
14310 3394                        D8            .byte	$D8
14311 3395                        D8            .byte	$D8
14312 3396                        D8            .byte	$D8
14313 3397                        D8            .byte	$D8
14314 3398                        D8            .byte	$D8
14315 3399                        70            .byte	$70
14316 339A                        00            .byte	0
14317 339B                        00            .byte	0
14318 339C                        00            .byte	0
14319 339D                        00            .byte	0
14320                                           ! 1454  0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xc0, 0x00, 0x00, 0x00,
14321 339E                        00            .byte	0
14322 339F                        00            .byte	0
14323 33A0                        00            .byte	0
14324 33A1                        00            .byte	0
14325 33A2                        66            .byte	$66
14326 33A3                        66            .byte	$66
14327 33A4                        66            .byte	$66
14328 33A5                        66            .byte	$66
14329 33A6                        66            .byte	$66
14330 33A7                        7C            .byte	$7C
14331 33A8                        60            .byte	$60
14332 33A9                        60            .byte	$60
14333 33AA                        C0            .byte	$C0
14334 33AB                        00            .byte	0
14335 33AC                        00            .byte	0
14336 33AD                        00            .byte	0
14337                                           ! 1455  0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
14338 33AE                        00            .byte	0
14339 33AF                        00            .byte	0
14340 33B0                        00            .byte	0
14341 33B1                        00            .byte	0
14342 33B2                        76            .byte	$76
14343 33B3                        DC            .byte	$DC
14344 33B4                        18            .byte	$18
14345 33B5                        18            .byte	$18
14346 33B6                        18            .byte	$18
14347 33B7                        18            .byte	$18
14348 33B8                        18            .byte	$18
14349 33B9                        18            .byte	$18
14350 33BA                        00            .byte	0
14351 33BB                        00            .byte	0
14352 33BC                        00            .byte	0
14353 33BD                        00            .byte	0
14354                                           ! 1456  0x00, 0x00, 0x00, 0x7e, 0x18, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
14355 33BE                        00            .byte	0
14356 33BF                        00            .byte	0
14357 33C0                        00            .byte	0
14358 33C1                        7E            .byte	$7E
14359 33C2                        18            .byte	$18
14360 33C3                        3C            .byte	$3C
14361 33C4                        66            .byte	$66
14362 33C5                        66            .byte	$66
14363 33C6                        66            .byte	$66
14364 33C7                        3C            .byte	$3C
14365 33C8                        18            .byte	$18
14366 33C9                        7E            .byte	$7E
14367 33CA                        00            .byte	0
14368 33CB                        00            .byte	0
14369 33CC                        00            .byte	0
14370 33CD                        00            .byte	0
14371                                           ! 1457  0x00, 0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00,
14372 33CE                        00            .byte	0
14373 33CF                        00            .byte	0
14374 33D0                        00            .byte	0
14375 33D1                        38            .byte	$38
14376 33D2                        6C            .byte	$6C
14377 33D3                        C6            .byte	$C6
14378 33D4                        C6            .byte	$C6
14379 33D5                        FE            .byte	$FE
14380 33D6                        C6            .byte	$C6
14381 33D7                        C6            .byte	$C6
14382 33D8                        6C            .byte	$6C
14383 33D9                        38            .byte	$38
14384 33DA                        00            .byte	0
14385 33DB                        00            .byte	0
14386 33DC                        00            .byte	0
14387 33DD                        00            .byte	0
14388                                           ! 1458  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x6c, 0x6c, 0x6c, 0xee, 0x00, 0x00, 0x00, 0x00,
14389 33DE                        00            .byte	0
14390 33DF                        00            .byte	0
14391 33E0                        38            .byte	$38
14392 33E1                        6C            .byte	$6C
14393 33E2                        C6            .byte	$C6
14394 33E3                        C6            .byte	$C6
14395 33E4                        C6            .byte	$C6
14396 33E5                        6C            .byte	$6C
14397 33E6                        6C            .byte	$6C
14398 33E7                        6C            .byte	$6C
14399 33E8                        6C            .byte	$6C
14400 33E9                        EE            .byte	$EE
14401 33EA                        00            .byte	0
14402 33EB                        00            .byte	0
14403 33EC                        00            .byte	0
14404 33ED                        00            .byte	0
14405                                           ! 1459  0x00, 0x00, 0x1e, 0x30, 0x18, 0x0c, 0x3e, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
14406 33EE                        00            .byte	0
14407 33EF                        00            .byte	0
14408 33F0                        1E            .byte	$1E
14409 33F1                        30            .byte	$30
14410 33F2                        18            .byte	$18
14411 33F3                        0C            .byte	$C
14412 33F4                        3E            .byte	$3E
14413 33F5                        66            .byte	$66
14414 33F6                        66            .byte	$66
14415 33F7                        66            .byte	$66
14416 33F8                        66            .byte	$66
14417 33F9                        3C            .byte	$3C
14418 33FA                        00            .byte	0
14419 33FB                        00            .byte	0
14420 33FC                        00            .byte	0
14421 33FD                        00            .byte	0
14422                                           ! 1460  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xdb, 0xdb, 0xdb, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14423 33FE                        00            .byte	0
14424 33FF                        00            .byte	0
14425 3400                        00            .byte	0
14426 3401                        00            .byte	0
14427 3402                        00            .byte	0
14428 3403                        7E            .byte	$7E
14429 3404                        DB            .byte	$DB
14430 3405                        DB            .byte	$DB
14431 3406                        DB            .byte	$DB
14432 3407                        7E            .byte	$7E
14433 3408                        00            .byte	0
14434 3409                        00            .byte	0
14435 340A                        00            .byte	0
14436 340B                        00            .byte	0
14437 340C                        00            .byte	0
14438 340D                        00            .byte	0
14439                                           ! 1461  0x00, 0x00, 0x00, 0x03, 0x06, 0x7e, 0xdb, 0xdb, 0xf3, 0x7e, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00,
14440 340E                        00            .byte	0
14441 340F                        00            .byte	0
14442 3410                        00            .byte	0
14443 3411                        03            .byte	3
14444 3412                        06            .byte	6
14445 3413                        7E            .byte	$7E
14446 3414                        DB            .byte	$DB
14447 3415                        DB            .byte	$DB
14448 3416                        F3            .byte	$F3
14449 3417                        7E            .byte	$7E
14450 3418                        60            .byte	$60
14451 3419                        C0            .byte	$C0
14452 341A                        00            .byte	0
14453 341B                        00            .byte	0
14454 341C                        00            .byte	0
14455 341D                        00            .byte	0
14456                                           ! 1462  0x00, 0x00, 0x1c, 0x30, 0x60, 0x60, 0x7c, 0x60, 0x60, 0x60, 0x30, 0x1c, 0x00, 0x00, 0x00, 0x00,
14457 341E                        00            .byte	0
14458 341F                        00            .byte	0
14459 3420                        1C            .byte	$1C
14460 3421                        30            .byte	$30
14461 3422                        60            .byte	$60
14462 3423                        60            .byte	$60
14463 3424                        7C            .byte	$7C
14464 3425                        60            .byte	$60
14465 3426                        60            .byte	$60
14466 3427                        60            .byte	$60
14467 3428                        30            .byte	$30
14468 3429                        1C            .byte	$1C
14469 342A                        00            .byte	0
14470 342B                        00            .byte	0
14471 342C                        00            .byte	0
14472 342D                        00            .byte	0
14473                                           ! 1463  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
14474 342E                        00            .byte	0
14475 342F                        00            .byte	0
14476 3430                        00            .byte	0
14477 3431                        7C            .byte	$7C
14478 3432                        C6            .byte	$C6
14479 3433                        C6            .byte	$C6
14480 3434                        C6            .byte	$C6
14481 3435                        C6            .byte	$C6
14482 3436                        C6            .byte	$C6
14483 3437                        C6            .byte	$C6
14484 3438                        C6            .byte	$C6
14485 3439                        C6            .byte	$C6
14486 343A                        00            .byte	0
14487 343B                        00            .byte	0
14488 343C                        00            .byte	0
14489 343D                        00            .byte	0
14490                                           ! 1464  0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
14491 343E                        00            .byte	0
14492 343F                        00            .byte	0
14493 3440                        00            .byte	0
14494 3441                        00            .byte	0
14495 3442                        FE            .byte	$FE
14496 3443                        00            .byte	0
14497 3444                        00            .byte	0
14498 3445                        FE            .byte	$FE
14499 3446                        00            .byte	0
14500 3447                        00            .byte	0
14501 3448                        FE            .byte	$FE
14502 3449                        00            .byte	0
14503 344A                        00            .byte	0
14504 344B                        00            .byte	0
14505 344C                        00            .byte	0
14506 344D                        00            .byte	0
14507                                           ! 1465  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00,
14508 344E                        00            .byte	0
14509 344F                        00            .byte	0
14510 3450                        00            .byte	0
14511 3451                        00            .byte	0
14512 3452                        18            .byte	$18
14513 3453                        18            .byte	$18
14514 3454                        7E            .byte	$7E
14515 3455                        18            .byte	$18
14516 3456                        18            .byte	$18
14517 3457                        00            .byte	0
14518 3458                        00            .byte	0
14519 3459                        FF            .byte	$FF
14520 345A                        00            .byte	0
14521 345B                        00            .byte	0
14522 345C                        00            .byte	0
14523 345D                        00            .byte	0
14524                                           ! 1466  0x00, 0x00, 0x00, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00,
14525 345E                        00            .byte	0
14526 345F                        00            .byte	0
14527 3460                        00            .byte	0
14528 3461                        30            .byte	$30
14529 3462                        18            .byte	$18
14530 3463                        0C            .byte	$C
14531 3464                        06            .byte	6
14532 3465                        0C            .byte	$C
14533 3466                        18            .byte	$18
14534 3467                        30            .byte	$30
14535 3468                        00            .byte	0
14536 3469                        7E            .byte	$7E
14537 346A                        00            .byte	0
14538 346B                        00            .byte	0
14539 346C                        00            .byte	0
14540 346D                        00            .byte	0
14541                                           ! 1467  0x00, 0x00, 0x00, 0x0c, 0x18, 0x
14542 346E                        00            .byte	0
14543 346F                        00            .byte	0
14544 3470                        00            .byte	0
14545 3471                        0C            .byte	$C
14546 3472                        18            .byte	$18
14547                                           ! 1467 30, 0x60, 0x30, 0x18, 0x0c, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00,
14548 3473                        30            .byte	$30
14549 3474                        60            .byte	$60
14550 3475                        30            .byte	$30
14551 3476                        18            .byte	$18
14552 3477                        0C            .byte	$C
14553 3478                        00            .byte	0
14554 3479                        7E            .byte	$7E
14555 347A                        00            .byte	0
14556 347B                        00            .byte	0
14557 347C                        00            .byte	0
14558 347D                        00            .byte	0
14559                                           ! 1468  0x00, 0x00, 0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14560 347E                        00            .byte	0
14561 347F                        00            .byte	0
14562 3480                        0E            .byte	$E
14563 3481                        1B            .byte	$1B
14564 3482                        1B            .byte	$1B
14565 3483                        18            .byte	$18
14566 3484                        18            .byte	$18
14567 3485                        18            .byte	$18
14568 3486                        18            .byte	$18
14569 3487                        18            .byte	$18
14570 3488                        18            .byte	$18
14571 3489                        18            .byte	$18
14572 348A                        18            .byte	$18
14573 348B                        18            .byte	$18
14574 348C                        18            .byte	$18
14575 348D                        18            .byte	$18
14576                                           ! 1469  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00, 0x00,
14577 348E                        18            .byte	$18
14578 348F                        18            .byte	$18
14579 3490                        18            .byte	$18
14580 3491                        18            .byte	$18
14581 3492                        18            .byte	$18
14582 3493                        18            .byte	$18
14583 3494                        18            .byte	$18
14584 3495                        18            .byte	$18
14585 3496                        D8            .byte	$D8
14586 3497                        D8            .byte	$D8
14587 3498                        D8            .byte	$D8
14588 3499                        70            .byte	$70
14589 349A                        00            .byte	0
14590 349B                        00            .byte	0
14591 349C                        00            .byte	0
14592 349D                        00            .byte	0
14593                                           ! 1470  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x7e, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
14594 349E                        00            .byte	0
14595 349F                        00            .byte	0
14596 34A0                        00            .byte	0
14597 34A1                        00            .byte	0
14598 34A2                        18            .byte	$18
14599 34A3                        18            .byte	$18
14600 34A4                        00            .byte	0
14601 34A5                        7E            .byte	$7E
14602 34A6                        00            .byte	0
14603 34A7                        18            .byte	$18
14604 34A8                        18            .byte	$18
14605 34A9                        00            .byte	0
14606 34AA                        00            .byte	0
14607 34AB                        00            .byte	0
14608 34AC                        00            .byte	0
14609 34AD                        00            .byte	0
14610                                           ! 1471  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14611 34AE                        00            .byte	0
14612 34AF                        00            .byte	0
14613 34B0                        00            .byte	0
14614 34B1                        00            .byte	0
14615 34B2                        00            .byte	0
14616 34B3                        76            .byte	$76
14617 34B4                        DC            .byte	$DC
14618 34B5                        00            .byte	0
14619 34B6                        76            .byte	$76
14620 34B7                        DC            .byte	$DC
14621 34B8                        00            .byte	0
14622 34B9                        00            .byte	0
14623 34BA                        00            .byte	0
14624 34BB                        00            .byte	0
14625 34BC                        00            .byte	0
14626 34BD                        00            .byte	0
14627                                           ! 1472  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14628 34BE                        00            .byte	0
14629 34BF                        38            .byte	$38
14630 34C0                        6C            .byte	$6C
14631 34C1                        6C            .byte	$6C
14632 34C2                        38            .byte	$38
14633 34C3                        00            .byte	0
14634 34C4                        00            .byte	0
14635 34C5                        00            .byte	0
14636 34C6                        00            .byte	0
14637 34C7                        00            .byte	0
14638 34C8                        00            .byte	0
14639 34C9                        00            .byte	0
14640 34CA                        00            .byte	0
14641 34CB                        00            .byte	0
14642 34CC                        00            .byte	0
14643 34CD                        00            .byte	0
14644                                           ! 1473  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14645 34CE                        00            .byte	0
14646 34CF                        00            .byte	0
14647 34D0                        00            .byte	0
14648 34D1                        00            .byte	0
14649 34D2                        00            .byte	0
14650 34D3                        00            .byte	0
14651 34D4                        00            .byte	0
14652 34D5                        18            .byte	$18
14653 34D6                        18            .byte	$18
14654 34D7                        00            .byte	0
14655 34D8                        00            .byte	0
14656 34D9                        00            .byte	0
14657 34DA                        00            .byte	0
14658 34DB                        00            .byte	0
14659 34DC                        00            .byte	0
14660 34DD                        00            .byte	0
14661                                           ! 1474  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14662 34DE                        00            .byte	0
14663 34DF                        00            .byte	0
14664 34E0                        00            .byte	0
14665 34E1                        00            .byte	0
14666 34E2                        00            .byte	0
14667 34E3                        00            .byte	0
14668 34E4                        00            .byte	0
14669 34E5                        00            .byte	0
14670 34E6                        18            .byte	$18
14671 34E7                        00            .byte	0
14672 34E8                        00            .byte	0
14673 34E9                        00            .byte	0
14674 34EA                        00            .byte	0
14675 34EB                        00            .byte	0
14676 34EC                        00            .byte	0
14677 34ED                        00            .byte	0
14678                                           ! 1475  0x00, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x6c, 0x3c, 0x1c, 0x00, 0x00, 0x00, 0x00,
14679 34EE                        00            .byte	0
14680 34EF                        0F            .byte	$F
14681 34F0                        0C            .byte	$C
14682 34F1                        0C            .byte	$C
14683 34F2                        0C            .byte	$C
14684 34F3                        0C            .byte	$C
14685 34F4                        0C            .byte	$C
14686 34F5                        EC            .byte	$EC
14687 34F6                        6C            .byte	$6C
14688 34F7                        6C            .byte	$6C
14689 34F8                        3C            .byte	$3C
14690 34F9                        1C            .byte	$1C
14691 34FA                        00            .byte	0
14692 34FB                        00            .byte	0
14693 34FC                        00            .byte	0
14694 34FD                        00            .byte	0
14695                                           ! 1476  0x00, 0xd8, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14696 34FE                        00            .byte	0
14697 34FF                        D8            .byte	$D8
14698 3500                        6C            .byte	$6C
14699 3501                        6C            .byte	$6C
14700 3502                        6C            .byte	$6C
14701 3503                        6C            .byte	$6C
14702 3504                        6C            .byte	$6C
14703 3505                        00            .byte	0
14704 3506                        00            .byte	0
14705 3507                        00            .byte	0
14706 3508                        00            .byte	0
14707 3509                        00            .byte	0
14708 350A                        00            .byte	0
14709 350B                        00            .byte	0
14710 350C                        00            .byte	0
14711 350D                        00            .byte	0
14712                                           ! 1477  0x00, 0x70, 0xd8, 0x30, 0x60, 0xc8, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14713 350E                        00            .byte	0
14714 350F                        70            .byte	$70
14715 3510                        D8            .byte	$D8
14716 3511                        30            .byte	$30
14717 3512                        60            .byte	$60
14718 3513                        C8            .byte	$C8
14719 3514                        F8            .byte	$F8
14720 3515                        00            .byte	0
14721 3516                        00            .byte	0
14722 3517                        00            .byte	0
14723 3518                        00            .byte	0
14724 3519                        00            .byte	0
14725 351A                        00            .byte	0
14726 351B                        00            .byte	0
14727 351C                        00            .byte	0
14728 351D                        00            .byte	0
14729                                           ! 1478  0x00, 0x00, 0x00, 0x00, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00,
14730 351E                        00            .byte	0
14731 351F                        00            .byte	0
14732 3520                        00            .byte	0
14733 3521                        00            .byte	0
14734 3522                        7C            .byte	$7C
14735 3523                        7C            .byte	$7C
14736 3524                        7C            .byte	$7C
14737 3525                        7C            .byte	$7C
14738 3526                        7C            .byte	$7C
14739 3527                        7C            .byte	$7C
14740 3528                        7C            .byte	$7C
14741 3529                        00            .byte	0
14742 352A                        00            .byte	0
14743 352B                        00            .byte	0
14744 352C                        00            .byte	0
14745 352D                        00            .byte	0
14746                                           ! 1479  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
14747 352E                        00            .byte	0
14748 352F                        00            .byte	0
14749 3530                        00            .byte	0
14750 3531                        00            .byte	0
14751 3532                        00            .byte	0
14752 3533                        00            .byte	0
14753 3534                        00            .byte	0
14754 3535                        00            .byte	0
14755 3536                        00            .byte	0
14756 3537                        00            .byte	0
14757 3538                        00            .byte	0
14758 3539                        00            .byte	0
14759 353A                        00            .byte	0
14760 353B                        00            .byte	0
14761 353C                        00            .byte	0
14762                                           ! 1480 };
14763 353D                        00            .byte	0
14764                                           !BCC_EOS
14765                                           ! 1481 static Bit8u vgafont14alt[1]={0x00};
14766                       0000353E            _vgafont14alt:
14767 353E                        00            .byte	0
14768                                           !BCC_EOS
14769                                           ! 1482 static Bit8u vgafont16alt[1]={0x00};
14770                       0000353F            _vgafont16alt:
14771 353F                        00            .byte	0
14772                                           !BCC_EOS
14773                                           ! 1483 #asm
14774                                           !BCC_ASM
14775                       00003540            init_vga_card:
14776                                           ;; switch to color mode and enable CPU access 480 lines
14777 3540           BA                   03C2    mov dx, #0x3C2
14778 3543           B0                     C3    mov al, #0xC3
14779 3545           EE                           outb dx,al
14780                                           ;; more than 64k 3C4/04
14781 3546           BA                   03C4    mov dx, #0x3C4
14782 3549           B0                     04    mov al, #0x04
14783 354B           EE                           outb dx,al
14784 354C           BA                   03C5    mov dx, #0x3C5
14785 354F           B0                     02    mov al, #0x02
14786 3551           EE                           outb dx,al
14787 3552           BB                   355C    mov bx, #msg_vga_init
14788 3555           53                           push bx
14789 3556           E8         45D6              call _printf
14790 3559           44                           inc sp
14791 355A           44                           inc sp
14792 355B           C3                           ret
14793                       0000355C            msg_vga_init:
14794 355C                        56            .ascii "VGABios $Id: vgabios.c,v 1.67 2008/01/27 09:44:12 vruppert Exp $"
14795 359C                        0D            .byte 0x0d,0x0a,0x00
14796                                           ! 1505 endasm
14797                                           !BCC_ENDASM
14798                                           ! 1506 #asm
14799                                           !BCC_ASM
14800                       0000359F            init_bios_area:
14801 359F           1E                           push ds
14802 35A0           B8                   0040    mov ax, # 0x40
14803 35A3           8ED8                         mov ds, ax
14804                                           ;; init detected hardware BIOS Area
14805 35A5           BB                   0010    mov bx, # 0x10
14806 35A8           8B07                         mov ax, [bx]
14807 35AA           25                   FFCF    and ax, #0xffcf
14808                                           ;; set 80x25 color (not clear from RBIL but usual)
14809 35AD           0D                   0020    or ax, #0x0020
14810 35B0           8907                         mov [bx], ax
14811                                           ;; Just for the first int10 find its children
14812                                           ;; the default char height
14813 35B2           BB                   0085    mov bx, # 0x85
14814 35B5           B0                     10    mov al, #0x10
14815 35B7           8807                         mov [bx], al
14816                                           ;; Clear the screen
14817 35B9           BB                   0087    mov bx, # 0x87
14818 35BC           B0                     60    mov al, #0x60
14819 35BE           8807                         mov [bx], al
14820                                           ;; Set the basic screen we have
14821 35C0           BB                   0088    mov bx, # 0x88
14822 35C3           B0                     F9    mov al, #0xf9
14823 35C5           8807                         mov [bx], al
14824                                           ;; Set the basic modeset options
14825 35C7           BB                   0089    mov bx, # 0x89
14826 35CA           B0                     51    mov al, #0x51
14827 35CC           8807                         mov [bx], al
14828                                           ;; Set the default MSR
14829 35CE           BB                   0065    mov bx, # 0x65
14830 35D1           B0                     09    mov al, #0x09
14831 35D3           8807                         mov [bx], al
14832 35D5           1F                           pop ds
14833 35D6           C3                           ret
14834                       000035D7            _video_save_pointer_table:
14835 35D7                      026E              .word _video_param_table
14836 35D9                      C000              .word 0xc000
14837 35DB                      0000              .word 0
14838 35DD                      0000              .word 0
14839 35DF                      0000              .word 0
14840 35E1                      0000              .word 0
14841 35E3                      0000              .word 0
14842 35E5                      0000              .word 0
14843 35E7                      0000              .word 0
14844 35E9                      0000              .word 0
14845 35EB                      0000              .word 0
14846 35ED                      0000              .word 0
14847 35EF                      0000              .word 0
14848 35F1                      0000              .word 0
14849                                           ! 1556 endasm
14850                                           !BCC_ENDASM
14851                                           ! 1557 static void display_splash_screen()
14852                                           ! 1558 {
14853                                           
14854                       000035F3            _display_splash_screen:
14855                                           ! 1559 }
14856 35F3           C3                         ret
14857                                           ! 1560 static void display_info()
14858                                           ! 1561 {
14859                       000035F4            _display_info:
14860                                           ! 1562 #asm
14861                                           !BCC_ASM
14862 35F4           B8                   C000   mov ax,#0xc000
14863 35F7           8ED8                        mov ds,ax
14864 35F9           BE                   0022   mov si,#vgabios_name
14865 35FC           E8         0013             call _display_string
14866 35FF           BE                   003E   mov si,#vgabios_version
14867 3602           E8         000D             call _display_string
14868                                            ;;mov si,#vgabios_copyright
14869                                            ;;call _display_string
14870                                            ;;mov si,#crlf
14871                                            ;;call _display_string
14872 3605           BE                   0084   mov si,#vgabios_license
14873 3608           E8         0007             call _display_string
14874 360B           BE                   00B9   mov si,#vgabios_website
14875 360E           E8         0001             call _display_string
14876                                           ! 1577 endasm
14877                                           !BCC_ENDASM
14878                                           ! 1578 }
14879 3611           C3                         ret
14880                                           ! 1579 static void display_string()
14881                                           ! 1580 {
14882                       00003612            _display_string:
14883                                           ! 1581 #asm
14884                                           !BCC_ASM
14885 3612           8CD8                        mov ax,ds
14886 3614           8EC0                        mov es,ax
14887 3616           89F7                        mov di,si
14888 3618           31C9                        xor cx,cx
14889 361A           F7D1                        not cx
14890 361C           30C0                        xor al,al
14891 361E           FC                          cld
14892 361F           F2                          repne
14893 3620           AE                           scasb
14894 3621           F7D1                        not cx
14895 3623           49                          dec cx
14896 3624           51                          push cx
14897 3625           B8                   0300   mov ax,#0x0300
14898 3628           BB                   0000   mov bx,#0x0000
14899 362B           CD                     10   int #0x10
14900 362D           59                          pop cx
14901 362E           B8                   1301   mov ax,#0x1301
14902 3631           BB                   000B   mov bx,#0x000b
14903 3634           89F5                        mov bp,si
14904 3636           CD                     10   int #0x10
14905                                           ! 1602 endasm
14906                                           !BCC_ENDASM
14907                                           ! 1603 }
14908 3638           C3                         ret
14909                                           ! 1604 static void int10_func(DI, SI, BP, SP, BX, DX, CX, AX, DS, ES, FLAGS)
14910                                           ! 1605   Bit16u DI, SI, BP, SP, BX, DX, CX, AX, ES, DS, FLAGS;
14911                       00003639            _int10_func:
14912                                           !BCC_EOS
14913                                           ! 1606 {
14914                                           ! 1607  switch(( AX >> 8 ))
14915 3639           55                         push	bp
14916 363A           89E5                       mov	bp,sp
14917                                           ! Debug: sr int = const 8 to unsigned short AX = [S+2+$10] (used reg = )
14918 363C           8B46         12            mov	ax,$12[bp]
14919 363F           88E0                       mov	al,ah
14920 3641           30E4                       xor	ah,ah
14921                                           ! 1608   {
14922 3643           E9         0425            br 	.3
14923                                           ! 1609    case 0x00:
14924                                           ! 1610      biosfn_set_video_mode(( AX & 0x00ff ));
14925                       00003646            .4:
14926                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
14927 3646           8A46         12            mov	al,$12[bp]
14928                                           ! Debug: list unsigned char = al+0 (used reg = )
14929 3649           30E4                       xor	ah,ah
14930 364B           50                         push	ax
14931                                           ! Debug: func () void = biosfn_set_video_mode+0 (used reg = )
14932 364C           E8         046B            call	_biosfn_set_video_mode
14933 364F           44                         inc	sp
14934 3650           44                         inc	sp
14935                                           !BCC_EOS
14936                                           ! 1611      switch(( AX & 0x00ff )&0x7F)
14937                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
14938 3651           8A46         12            mov	al,$12[bp]
14939                                           ! Debug: and int = const $7F to unsigned char = al+0 (used reg = )
14940 3654           24                     7F  and	al,*$7F
14941                                           ! 1612       {case 6:
14942 3656           EB           24            jmp .7
14943                                           ! 1613         AX = ((AX & 0xff00) | (0x3F));
14944                       00003658            .8:
14945                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
14946 3658           8B46         12            mov	ax,$12[bp]
14947 365B           30C0                       xor	al,al
14948                                           ! Debug: or int = const $3F to unsigned int = ax+0 (used reg = )
14949 365D           0C                     3F  or	al,*$3F
14950                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
14951 365F           8946         12            mov	$12[bp],ax
14952                                           !BCC_EOS
14953                                           ! 1614         break;
14954 3662           EB           3D            jmp .5
14955                                           !BCC_EOS
14956                                           ! 1615        case 0:
14957                                           ! 1616        case 1:
14958                       00003664            .9:
14959                                           ! 1617        case 2:
14960                       00003664            .A:
14961                                           ! 1618        case 3:
14962                       00003664            .B:
14963                                           ! 1619        case 4:
14964                       00003664            .C:
14965                                           ! 1620        case 5:
14966                       00003664            .D:
14967                                           ! 1621        case 7:
14968                       00003664            .E:
14969                                           ! 1622         AX = ((AX & 0xff00) | (0x30));
14970                       00003664            .F:
14971                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
14972 3664           8B46         12            mov	ax,$12[bp]
14973 3667           30C0                       xor	al,al
14974                                           ! Debug: or int = const $30 to unsigned int = ax+0 (used reg = )
14975 3669           0C                     30  or	al,*$30
14976                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
14977 366B           8946         12            mov	$12[bp],ax
14978                                           !BCC_EOS
14979                                           ! 1623         break;
14980 366E           EB           31            jmp .5
14981                                           !BCC_EOS
14982                                           ! 1624       default:
14983                                           ! 1625         AX = ((AX & 0xff00) | (0x20));
14984                       00003670            .10:
14985                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
14986 3670           8B46         12            mov	ax,$12[bp]
14987 3673           30C0                       xor	al,al
14988                                           ! Debug: or int = const $20 to unsigned int = ax+0 (used reg = )
14989 3675           0C                     20  or	al,*$20
14990                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
14991 3677           8946         12            mov	$12[bp],ax
14992                                           !BCC_EOS
14993                                           ! 1626       }
14994                                           ! 1627      break;
14995 367A           EB           25            jmp .5
14996                       0000367C            .7:
14997 367C           2C                     00  sub	al,*0
14998 367E           72           F0            jb 	.10
14999 3680           3C                     07  cmp	al,*7
15000 3682           77           1B            ja  	.11
15001 3684           30E4                       xor	ah,ah
15002 3686           D1E0                       shl	ax,*1
15003 3688           89C3                       mov	bx,ax
15004 368A           2E                         seg	cs
15005 368B           FFA7       368F            br	.12[bx]
15006                       0000368F            .12:
15007 368F                      3664            .word	.9
15008 3691                      3664            .word	.A
15009 3693                      3664            .word	.B
15010 3695                      3664            .word	.C
15011 3697                      3664            .word	.D
15012 3699                      3664            .word	.E
15013 369B                      3658            .word	.8
15014 369D                      3664            .word	.F
15015                       0000369F            .11:
15016 369F           EB           CF            jmp	.10
15017                       000036A1            .5:
15018 36A1           E9         0414            br 	.1
15019                                           !BCC_EOS
15020                                           ! 1628    case 0x01:
15021                                           ! 1629      biosfn_set_cursor_shape(( CX >> 8 ),( CX & 0x00ff ));
15022                       000036A4            .13:
15023                                           ! Debug: and int = const $FF to unsigned short CX = [S+2+$E] (used reg = )
15024 36A4           8A46         10            mov	al,$10[bp]
15025                                           ! Debug: list unsigned char = al+0 (used reg = )
15026 36A7           30E4                       xor	ah,ah
15027 36A9           50                         push	ax
15028                                           ! Debug: sr int = const 8 to unsigned short CX = [S+4+$E] (used reg = )
15029 36AA           8B46         10            mov	ax,$10[bp]
15030 36AD           88E0                       mov	al,ah
15031 36AF           30E4                       xor	ah,ah
15032                                           ! Debug: list unsigned int = ax+0 (used reg = )
15033 36B1           50                         push	ax
15034                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
15035 36B2           E8         0A8D            call	_biosfn_set_cursor_shape
15036 36B5           83C4                   04  add	sp,*4
15037                                           !BCC_EOS
15038                                           ! 1630      break;
15039 36B8           E9         03FD            br 	.1
15040                                           !BCC_EOS
15041                                           ! 1631    case 0x02:
15042                                           ! 1632      biosfn_set_cursor_pos(( BX >> 8 ),DX);
15043                       000036BB            .14:
15044                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15045 36BB           FF76         0E            push	$E[bp]
15046                                           ! Debug: sr int = const 8 to unsigned short BX = [S+4+$A] (used reg = )
15047 36BE           8B46         0C            mov	ax,$C[bp]
15048 36C1           88E0                       mov	al,ah
15049 36C3           30E4                       xor	ah,ah
15050                                           ! Debug: list unsigned int = ax+0 (used reg = )
15051 36C5           50                         push	ax
15052                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
15053 36C6           E8         0B94            call	_biosfn_set_cursor_pos
15054 36C9           83C4                   04  add	sp,*4
15055                                           !BCC_EOS
15056                                           ! 1633      break;
15057 36CC           E9         03E9            br 	.1
15058                                           !BCC_EOS
15059                                           ! 1634    case 0x03:
15060                                           ! 1635      biosfn_get_cursor_pos(( BX >> 8 ),&CX,&DX);
15061                       000036CF            .15:
15062                                           ! Debug: list * unsigned short DX = S+2+$C (used reg = )
15063 36CF           8D5E         0E            lea	bx,$E[bp]
15064 36D2           53                         push	bx
15065                                           ! Debug: list * unsigned short CX = S+4+$E (used reg = )
15066 36D3           8D5E         10            lea	bx,$10[bp]
15067 36D6           53                         push	bx
15068                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15069 36D7           8B46         0C            mov	ax,$C[bp]
15070 36DA           88E0                       mov	al,ah
15071 36DC           30E4                       xor	ah,ah
15072                                           ! Debug: list unsigned int = ax+0 (used reg = )
15073 36DE           50                         push	ax
15074                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
15075 36DF           E8         0C7B            call	_biosfn_get_cursor_pos
15076 36E2           83C4                   06  add	sp,*6
15077                                           !BCC_EOS
15078                                           ! 1636      break;
15079 36E5           E9         03D0            br 	.1
15080                                           !BCC_EOS
15081                                           ! 1637    case 0x04:
15082                                           ! 1638      AX=0x00;
15083                       000036E8            .16:
15084                                           ! Debug: eq int = const 0 to unsigned short AX = [S+2+$10] (used reg = )
15085 36E8           31C0                       xor	ax,ax
15086 36EA           8946         12            mov	$12[bp],ax
15087                                           !BCC_EOS
15088                                           ! 1639      BX=0x00;
15089                                           ! Debug: eq int = const 0 to unsigned short BX = [S+2+$A] (used reg = )
15090 36ED           31C0                       xor	ax,ax
15091 36EF           8946         0C            mov	$C[bp],ax
15092                                           !BCC_EOS
15093                                           ! 1640      CX=0x00;
15094                                           ! Debug: eq int = const 0 to unsigned short CX = [S+2+$E] (used reg = )
15095 36F2           31C0                       xor	ax,ax
15096 36F4           8946         10            mov	$10[bp],ax
15097                                           !BCC_EOS
15098                                           ! 1641      DX=0x00;
15099                                           ! Debug: eq int = const 0 to unsigned short DX = [S+2+$C] (used reg = )
15100 36F7           31C0                       xor	ax,ax
15101 36F9           8946         0E            mov	$E[bp],ax
15102                                           !BCC_EOS
15103                                           ! 1642      
15104                                           ! 1642 break;
15105 36FC           E9         03B9            br 	.1
15106                                           !BCC_EOS
15107                                           ! 1643    case 0x05:
15108                                           ! 1644      biosfn_set_active_page(( AX & 0x00ff ));
15109                       000036FF            .17:
15110                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15111 36FF           8A46         12            mov	al,$12[bp]
15112                                           ! Debug: list unsigned char = al+0 (used reg = )
15113 3702           30E4                       xor	ah,ah
15114 3704           50                         push	ax
15115                                           ! Debug: func () void = biosfn_set_active_page+0 (used reg = )
15116 3705           E8         0CCA            call	_biosfn_set_active_page
15117 3708           44                         inc	sp
15118 3709           44                         inc	sp
15119                                           !BCC_EOS
15120                                           ! 1645      break;
15121 370A           E9         03AB            br 	.1
15122                                           !BCC_EOS
15123                                           ! 1646    case 0x06:
15124                                           ! 1647      biosfn_scroll(( AX & 0x00ff ),( BX >> 8 ),( CX >> 8 ),( CX & 0x00ff ),( DX >> 8 ),( DX & 0x00ff ),0xFF,1);
15125                       0000370D            .18:
15126                                           ! Debug: list int = const 1 (used reg = )
15127 370D           B8                   0001  mov	ax,*1
15128 3710           50                         push	ax
15129                                           ! Debug: list int = const $FF (used reg = )
15130 3711           B8                   00FF  mov	ax,#$FF
15131 3714           50                         push	ax
15132                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
15133 3715           8A46         0E            mov	al,$E[bp]
15134                                           ! Debug: list unsigned char = al+0 (used reg = )
15135 3718           30E4                       xor	ah,ah
15136 371A           50                         push	ax
15137                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
15138 371B           8B46         0E            mov	ax,$E[bp]
15139 371E           88E0                       mov	al,ah
15140 3720           30E4                       xor	ah,ah
15141                                           ! Debug: list unsigned int = ax+0 (used reg = )
15142 3722           50                         push	ax
15143                                           ! Debug: and int = const $FF to unsigned short CX = [S+$A+$E] (used reg = )
15144 3723           8A46         10            mov	al,$10[bp]
15145                                           ! Debug: list unsigned char = al+0 (used reg = )
15146 3726           30E4                       xor	ah,ah
15147 3728           50                         push	ax
15148                                           ! Debug: sr int = const 8 to unsigned short CX = [S+$C+$E] (used reg = )
15149 3729           8B46         10            mov	ax,$10[bp]
15150 372C           88E0                       mov	al,ah
15151 372E           30E4                       xor	ah,ah
15152                                           ! Debug: list unsigned int = ax+0 (used reg = )
15153 3730           50                         push	ax
15154                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
15155 3731           8B46         0C            mov	ax,$C[bp]
15156 3734           88E0                       mov	al,ah
15157 3736           30E4                       xor	ah,ah
15158                                           ! Debug: list unsigned int = ax+0 (used reg = )
15159 3738           50                         push	ax
15160                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
15161 3739           8A46         12            mov	al,$12[bp]
15162                                           ! Debug: list unsigned char = al+0 (used reg = )
15163 373C           30E4                       xor	ah,ah
15164 373E           50                         push	ax
15165                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
15166 373F           E8         1113            call	_biosfn_scroll
15167 3742           83C4                   10  add	sp,*$10
15168                                           !BCC_EOS
15169                                           ! 1648      break;
15170 3745           E9         0370            br 	.1
15171                                           !BCC_EOS
15172                                           ! 1649    case 0x07:
15173                                           ! 1650      biosfn_scroll(( AX & 0x00ff ),( BX >> 8 ),( CX >> 8 ),( CX & 0x00ff ),( DX >> 8 ),( DX & 0x00ff ),0xFF,0);
15174                       00003748            .19:
15175                                           ! Debug: list int = const 0 (used reg = )
15176 3748           31C0                       xor	ax,ax
15177 374A           50                         push	ax
15178                                           ! Debug: list int = const $FF (used reg = )
15179 374B           B8                   00FF  mov	ax,#$FF
15180 374E           50                         push	ax
15181                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
15182 374F           8A46         0E            mov	al,$E[bp]
15183                                           ! Debug: list unsigned char = al+0 (used reg = )
15184 3752           30E4                       xor	ah,ah
15185 3754           50                         push	ax
15186                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
15187 3755           8B46         0E            mov	ax,$E[bp]
15188 3758           88E0                       mov	al,ah
15189 375A           30E4                       xor	ah,ah
15190                                           ! Debug: list unsigned int = ax+0 (used reg = )
15191 375C           50                         push	ax
15192                                           ! Debug: and int = const $FF to unsigned short CX = [S+$A+$E] (used reg = )
15193 375D           8A46         10            mov	al,$10[bp]
15194                                           ! Debug: list unsigned char = al+0 (used reg = )
15195 3760           30E4                       xor	ah,ah
15196 3762           50                         push	ax
15197                                           ! Debug: sr int = const 8 to unsigned short CX = [S+$C+$E] (used reg = )
15198 3763           8B46         10            mov	ax,$10[bp]
15199 3766           88E0                       mov	al,ah
15200 3768           30E4                       xor	ah,ah
15201                                           ! Debug: list unsigned int = ax+0 (used reg = )
15202 376A           50                         push	ax
15203                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
15204 376B           8B46         0C            mov	ax,$C[bp]
15205 376E           88E0                       mov	al,ah
15206 3770           30E4                       xor	ah,ah
15207                                           ! Debug: list unsigned int = ax+0 (used reg = )
15208 3772           50                         push	ax
15209                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
15210 3773           8A46         12            mov	al,$12[bp]
15211                                           ! Debug: list unsigned char = al+0 (used reg = )
15212 3776           30E4                       xor	ah,ah
15213 3778           50                         push	ax
15214                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
15215 3779           E8         10D9            call	_biosfn_scroll
15216 377C           83C4                   10  add	sp,*$10
15217                                           !BCC_EOS
15218                                           ! 1651      break;
15219 377F           E9         0336            br 	.1
15220                                           !BCC_EOS
15221                                           ! 1652    case 0x08:
15222                                           ! 1653      biosfn_read_char_attr(( BX >> 8 ),&AX);
15223                       00003782            .1A:
15224                                           ! Debug: list * unsigned short AX = S+2+$10 (used reg = )
15225 3782           8D5E         12            lea	bx,$12[bp]
15226 3785           53                         push	bx
15227                                           ! Debug: sr int = const 8 to unsigned short BX = [S+4+$A] (used reg = )
15228 3786           8B46         0C            mov	ax,$C[bp]
15229 3789           88E0                       mov	al,ah
15230 378B           30E4                       xor	ah,ah
15231                                           ! Debug: list unsigned int = ax+0 (used reg = )
15232 378D           50                         push	ax
15233                                           ! Debug: func () void = biosfn_read_char_attr+0 (used reg = )
15234 378E           E8         17CA            call	_biosfn_read_char_attr
15235 3791           83C4                   04  add	sp,*4
15236                                           !BCC_EOS
15237                                           ! 1654      break;
15238 3794           E9         0321            br 	.1
15239                                           !BCC_EOS
15240                                           ! 1655    case 0x09:
15241                                           ! 1656      biosfn_write_char_attr(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX);
15242                       00003797            .1B:
15243                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15244 3797           FF76         10            push	$10[bp]
15245                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15246 379A           8A46         0C            mov	al,$C[bp]
15247                                           ! Debug: list unsigned char = al+0 (used reg = )
15248 379D           30E4                       xor	ah,ah
15249 379F           50                         push	ax
15250                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15251 37A0           8B46         0C            mov	ax,$C[bp]
15252 37A3           88E0                       mov	al,ah
15253 37A5           30E4                       xor	ah,ah
15254                                           ! Debug: list unsigned int = ax+0 (used reg = )
15255 37A7           50                         push	ax
15256                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15257 37A8           8A46         12            mov	al,$12[bp]
15258                                           ! Debug: list unsigned char = al+0 (used reg = )
15259 37AB           30E4                       xor	ah,ah
15260 37AD           50                         push	ax
15261                                           ! Debug: func () void = biosfn_write_char_attr+0 (used reg = )
15262 37AE           E8         1CEF            call	_biosfn_write_char_attr
15263 37B1           83C4                   08  add	sp,*8
15264                                           !BCC_EOS
15265                                           ! 1657      break;
15266 37B4           E9         0301            br 	.1
15267                                           !BCC_EOS
15268                                           ! 1658    case 0x0A:
15269                                           ! 1659      biosfn_write_char_only(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX);
15270                       000037B7            .1C:
15271                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15272 37B7           FF76         10            push	$10[bp]
15273                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15274 37BA           8A46         0C            mov	al,$C[bp]
15275                                           ! Debug: list unsigned char = al+0 (used reg = )
15276 37BD           30E4                       xor	ah,ah
15277 37BF           50                         push	ax
15278                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15279 37C0           8B46         0C            mov	ax,$C[bp]
15280 37C3           88E0                       mov	al,ah
15281 37C5           30E4                       xor	ah,ah
15282                                           ! Debug: list unsigned int = ax+0 (used reg = )
15283 37C7           50                         push	ax
15284                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15285 37C8           8A46         12            mov	al,$12[bp]
15286                                           ! Debug: list unsigned char = al+0 (used reg = )
15287 37CB           30E4                       xor	ah,ah
15288 37CD           50                         push	ax
15289                                           ! Debug: func () void = biosfn_write_char_only+0 (used reg = )
15290 37CE           E8         1EC1            call	_biosfn_write_char_only
15291 37D1           83C4                   08  add	sp,*8
15292                                           !BCC_EOS
15293                                           ! 1660      break;
15294 37D4           E9         02E1            br 	.1
15295                                           !BCC_EOS
15296                                           ! 1661    case 0x0C:
15297                                           ! 1662      biosfn_write_pixel(( BX >> 8 ),( AX & 0x00ff ),CX,DX);
15298                       000037D7            .1D:
15299                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15300 37D7           FF76         0E            push	$E[bp]
15301                                           ! Debug: list unsigned short CX = [S+4+$E] (used reg = )
15302 37DA           FF76         10            push	$10[bp]
15303                                           ! Debug: and int = const $FF to unsigned short AX = [S+6+$10] (used reg = )
15304 37DD           8A46         12            mov	al,$12[bp]
15305                                           ! Debug: list unsigned char = al+0 (used reg = )
15306 37E0           30E4                       xor	ah,ah
15307 37E2           50                         push	ax
15308                                           ! Debug: sr int = const 8 to unsigned short BX = [S+8+$A] (used reg = )
15309 37E3           8B46         0C            mov	ax,$C[bp]
15310 37E6           88E0                       mov	al,ah
15311 37E8           30E4                       xor	ah,ah
15312                                           ! Debug: list unsigned int = ax+0 (used reg = )
15313 37EA           50                         push	ax
15314                                           ! Debug: func () void = biosfn_write_pixel+0 (used reg = )
15315 37EB           E8         2112            call	_biosfn_write_pixel
15316 37EE           83C4                   08  add	sp,*8
15317                                           !BCC_EOS
15318                                           ! 1663      break;
15319 37F1           E9         02C4            br 	.1
15320                                           !BCC_EOS
15321                                           ! 1664    case 0x0D:
15322                                           ! 1665      biosfn_read_pixel(( BX >> 8 ),CX,DX,&AX);
15323                       000037F4            .1E:
15324                                           ! Debug: list * unsigned short AX = S+2+$10 (used reg = )
15325 37F4           8D5E         12            lea	bx,$12[bp]
15326 37F7           53                         push	bx
15327                                           ! Debug: list unsigned short DX = [S+4+$C] (used reg = )
15328 37F8           FF76         0E            push	$E[bp]
15329                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
15330 37FB           FF76         10            push	$10[bp]
15331                                           ! Debug: sr int = const 8 to unsigned short BX = [S+8+$A] (used reg = )
15332 37FE           8B46         0C            mov	ax,$C[bp]
15333 3801           88E0                       mov	al,ah
15334 3803           30E4                       xor	ah,ah
15335                                           ! Debug: list unsigned int = ax+0 (used reg = )
15336 3805           50                         push	ax
15337                                           ! Debug: func () void = biosfn_read_pixel+0 (used reg = )
15338 3806           E8         2393            call	_biosfn_read_pixel
15339 3809           83C4                   08  add	sp,*8
15340                                           !BCC_EOS
15341                                           ! 1666      break;
15342 380C           E9         02A9            br 	.1
15343                                           !BCC_EOS
15344                                           ! 1667    case 0x0E:
15345                                           ! 1668      biosfn_write_teletype(( AX & 0x00ff ),0xff,( BX & 0x00ff ),2);
15346                       0000380F            .1F:
15347                                           ! Debug: list int = const 2 (used reg = )
15348 380F           B8                   0002  mov	ax,*2
15349 3812           50                         push	ax
15350                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15351 3813           8A46         0C            mov	al,$C[bp]
15352                                           ! Debug: list unsigned char = al+0 (used reg = )
15353 3816           30E4                       xor	ah,ah
15354 3818           50                         push	ax
15355                                           ! Debug: list int = const $FF (used reg = )
15356 3819           B8                   00FF  mov	ax,#$FF
15357 381C           50                         push	ax
15358                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15359 381D           8A46         12            mov	al,$12[bp]
15360                                           ! Debug: list unsigned char = al+0 (used reg = )
15361 3820           30E4                       xor	ah,ah
15362 3822           50                         push	ax
15363                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
15364 3823           E8         257C            call	_biosfn_write_teletype
15365 3826           83C4                   08  add	sp,*8
15366                                           !BCC_EOS
15367                                           ! 1669      break;
15368 3829           E9         028C            br 	.1
15369                                           !BCC_EOS
15370                                           ! 1670    case 0x10:
15371                                           ! 1671      biosfn_perform_gray_scale_summing(BX,CX);
15372                       0000382C            .20:
15373                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15374 382C           FF76         10            push	$10[bp]
15375                                           ! Debug: list unsigned short BX = [S+4+$A] (used reg = )
15376 382F           FF76         0C            push	$C[bp]
15377                                           ! Debug: func () void = biosfn_perform_gray_scale_summing+0 (used reg = )
15378 3832           E8         2B63            call	_biosfn_perform_gray_scale_summing
15379 3835           83C4                   04  add	sp,*4
15380                                           !BCC_EOS
15381                                           ! 1672      break;
15382 3838           E9         027D            br 	.1
15383                                           !BCC_EOS
15384                                           ! 1673    case 0x11:
15385                                           ! 1674      switch(( AX & 0x00ff ))
15386                       0000383B            .21:
15387                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15388 383B           8A46         12            mov	al,$12[bp]
15389                                           ! 1675       {
15390 383E           E9         00E1            br 	.24
15391                                           ! 1676        case 0x00:
15392                                           ! 1677        case 0x10:
15393                       00003841            .25:
15394                                           ! 1678         biosfn_load_text_user_pat(( AX & 0x00ff ),ES,BP,CX,DX,( BX & 0x00ff ),( BX >> 8 ));
15395                       00003841            .26:
15396                                           ! Debug: sr int = const 8 to unsigned short BX = [S+2+$A] (used reg = )
15397 3841           8B46         0C            mov	ax,$C[bp]
15398 3844           88E0                       mov	al,ah
15399 3846           30E4                       xor	ah,ah
15400                                           ! Debug: list unsigned int = ax+0 (used reg = )
15401 3848           50                         push	ax
15402                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15403 3849           8A46         0C            mov	al,$C[bp]
15404                                           ! Debug: list unsigned char = al+0 (used reg = )
15405 384C           30E4                       xor	ah,ah
15406 384E           50                         push	ax
15407                                           ! Debug: list unsigned short DX = [S+6+$C] (used reg = )
15408 384F           FF76         0E            push	$E[bp]
15409                                           ! Debug: list unsigned short CX = [S+8+$E] (used reg = )
15410 3852           FF76         10            push	$10[bp]
15411                                           ! Debug: list unsigned short BP = [S+$A+6] (used reg = )
15412 3855           FF76         08            push	8[bp]
15413                                           ! Debug: list unsigned short ES = [S+$C+$14] (used reg = )
15414 3858           FF76         16            push	$16[bp]
15415                                           ! Debug: and int = const $FF to unsigned short AX = [S+$E+$10] (used reg = )
15416 385B           8A46         12            mov	al,$12[bp]
15417                                           ! Debug: list unsigned char = al+0 (used reg = )
15418 385E           30E4                       xor	ah,ah
15419 3860           50                         push	ax
15420                                           ! Debug: func () void = biosfn_load_text_user_pat+0 (used reg = )
15421 3861           E8         2DDB            call	_biosfn_load_text_user_pat
15422 3864           83C4                   0E  add	sp,*$E
15423                                           !BCC_EOS
15424                                           ! 1679         break;
15425 3867           E9         010C            br 	.22
15426                                           !BCC_EOS
15427                                           ! 1680        case 0x01:
15428                                           ! 1681        case 0x11:
15429                       0000386A            .27:
15430                                           ! 1682         biosfn_load_text_8_14_pat(( AX & 0x00ff ),( BX & 0x00ff ));
15431                       0000386A            .28:
15432                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15433 386A           8A46         0C            mov	al,$C[bp]
15434                                           ! Debug: list unsigned char = al+0 (used reg = )
15435 386D           30E4                       xor	ah,ah
15436 386F           50                         push	ax
15437                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15438 3870           8A46         12            mov	al,$12[bp]
15439                                           ! Debug: list unsigned char = al+0 (used reg = )
15440 3873           30E4                       xor	ah,ah
15441 3875           50                         push	ax
15442                                           ! Debug: func () void = biosfn_load_text_8_14_pat+0 (used reg = )
15443 3876           E8         2E62            call	_biosfn_load_text_8_14_pat
15444 3879           83C4                   04  add	sp,*4
15445                                           !BCC_EOS
15446                                           ! 1683         break;
15447 387C           E9         00F7            br 	.22
15448                                           !BCC_EOS
15449                                           ! 1684        case 0x02:
15450                                           ! 1685        case 0x12:
15451                       0000387F            .29:
15452                                           ! 1686         biosfn_load_text_8_8_pat(( AX & 0x00ff ),( BX & 0x00ff ));
15453                       0000387F            .2A:
15454                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15455 387F           8A46         0C            mov	al,$C[bp]
15456                                           ! Debug: list unsigned char = al+0 (used reg = )
15457 3882           30E4                       xor	ah,ah
15458 3884           50                         push	ax
15459                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15460 3885           8A46         12            mov	al,$12[bp]
15461                                           ! Debug: list unsigned char = al+0 (used reg = )
15462 3888           30E4                       xor	ah,ah
15463 388A           50                         push	ax
15464                                           ! Debug: func () void = biosfn_load_text_8_8_pat+0 (used reg = )
15465 388B           E8         2EE4            call	_biosfn_load_text_8_8_pat
15466 388E           83C4                   04  add	sp,*4
15467                                           !BCC_EOS
15468                                           ! 1687         break;
15469 3891           E9         00E2            br 	.22
15470                                           !BCC_EOS
15471                                           ! 1688        case 0x04:
15472                                           ! 1689        case 0x14:
15473                       00003894            .2B:
15474                                           ! 1690         biosfn_load_text_8_16_pat(( AX & 0x00ff ),( BX & 0x00ff ));
15475                       00003894            .2C:
15476                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15477 3894           8A46         0C            mov	al,$C[bp]
15478                                           ! Debug: list unsigned char = al+0 (used reg = )
15479 3897           30E4                       xor	ah,ah
15480 3899           50                         push	ax
15481                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15482 389A           8A46         12            mov	al,$12[bp]
15483                                           ! Debug: list unsigned char = al+0 (used reg = )
15484 389D           30E4                       xor	ah,ah
15485 389F           50                         push	ax
15486                                           ! Debug: func () void = biosfn_load_text_8_16_pat+0 (used reg = )
15487 38A0           E8         2F6E            call	_biosfn_load_text_8_16_pat
15488 38A3           83C4                   04  add	sp,*4
15489                                           !BCC_EOS
15490                                           ! 1691         break;
15491 38A6           E9         00CD            br 	.22
15492                                           !BCC_EOS
15493                                           ! 1692        case 0x20:
15494                                           ! 1693         biosfn_load_gfx_8_8_chars(ES,BP);
15495                       000038A9            .2D:
15496                                           ! Debug: list unsigned short BP = [S+2+6] (used reg = )
15497 38A9           FF76         08            push	8[bp]
15498                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15499 38AC           FF76         16            push	$16[bp]
15500                                           ! Debug: func () void = biosfn_load_gfx_8_8_chars+0 (used reg = )
15501 38AF           E8         2FF0            call	_biosfn_load_gfx_8_8_chars
15502 38B2           83C4                   04  add	sp,*4
15503                                           !BCC_EOS
15504                                           ! 1694         break;
15505 38B5           E9         00BE            br 	.22
15506                                           !BCC_EOS
15507                                           ! 1695        case 0x21:
15508                                           ! 1696         biosfn_load_gfx_user_chars(ES,BP,CX,( BX & 0x00ff ),( DX & 0x00ff ));
15509                       000038B8            .2E:
15510                                           ! Debug: and int = const $FF to unsigned short DX = [S+2+$C] (used reg = )
15511 38B8           8A46         0E            mov	al,$E[bp]
15512                                           ! Debug: list unsigned char = al+0 (used reg = )
15513 38BB           30E4                       xor	ah,ah
15514 38BD           50                         push	ax
15515                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15516 38BE           8A46         0C            mov	al,$C[bp]
15517                                           ! Debug: list unsigned char = al+0 (used reg = )
15518 38C1           30E4                       xor	ah,ah
15519 38C3           50                         push	ax
15520                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
15521 38C4           FF76         10            push	$10[bp]
15522                                           ! Debug: list unsigned short BP = [S+8+6] (used reg = )
15523 38C7           FF76         08            push	8[bp]
15524                                           ! Debug: list unsigned short ES = [S+$A+$14] (used reg = )
15525 38CA           FF76         16            push	$16[bp]
15526                                           ! Debug: func () void = biosfn_load_gfx_user_chars+0 (used reg = )
15527 38CD           E8         2FD3            call	_biosfn_load_gfx_user_chars
15528 38D0           83C4                   0A  add	sp,*$A
15529                                           !BCC_EOS
15530                                           ! 1697         break;
15531 38D3           E9         00A0            br 	.22
15532                                           !BCC_EOS
15533                                           ! 1698        case 0x22:
15534                                           ! 1699         biosfn_load_gfx_8_14_chars(( BX & 0x00ff ));
15535                       000038D6            .2F:
15536                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15537 38D6           8A46         0C            mov	al,$C[bp]
15538                                           ! Debug: list unsigned char = al+0 (used reg = )
15539 38D9           30E4                       xor	ah,ah
15540 38DB           50                         push	ax
15541                                           ! Debug: func () void = biosfn_load_gfx_8_14_chars+0 (used reg = )
15542 38DC           E8         2FC5            call	_biosfn_load_gfx_8_14_chars
15543 38DF           44                         inc	sp
15544 38E0           44                         inc	sp
15545                                           !BCC_EOS
15546                                           ! 1700         break;
15547 38E1           E9         0092            br 	.22
15548                                           !BCC_EOS
15549                                           ! 1701        case 0x23:
15550                                           ! 1702         biosfn_load_gfx_8_8_dd_chars(( BX & 0x00ff ));
15551                       000038E4            .30:
15552                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15553 38E4           8A46         0C            mov	al,$C[bp]
15554                                           ! Debug: list unsigned char = al+0 (used reg = )
15555 38E7           30E4                       xor	ah,ah
15556 38E9           50                         push	ax
15557                                           ! Debug: func () void = biosfn_load_gfx_8_8_dd_chars+0 (used reg = )
15558 38EA           E8         2FB8            call	_biosfn_load_gfx_8_8_dd_chars
15559 38ED           44                         inc	sp
15560 38EE           44                         inc	sp
15561                                           !BCC_EOS
15562                                           ! 1703         break;
15563 38EF           E9         0084            br 	.22
15564                                           !BCC_EOS
15565                                           ! 1704        case 0x24:
15566                                           ! 1705         biosfn_load_gfx_8_16_chars(( BX & 0x00ff ));
15567                       000038F2            .31:
15568                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15569 38F2           8A46         0C            mov	al,$C[bp]
15570                                           ! Debug: list unsigned char = al+0 (used reg = )
15571 38F5           30E4                       xor	ah,ah
15572 38F7           50                         push	ax
15573                                           ! Debug: func () void = biosfn_load_gfx_8_16_chars+0 (used reg = )
15574 38F8           E8         2FAB            call	_biosfn_load_gfx_8_16_chars
15575 38FB           44                         inc	sp
15576 38FC           44                         inc	sp
15577                                           !BCC_EOS
15578                                           ! 1706         break;
15579 38FD           E9         0076            br 	.22
15580                                           !BCC_EOS
15581                                           ! 1707        case 0x30:
15582                                           ! 1708         biosfn_get_font_info(( BX >> 8 ),&ES,&BP,&CX,&DX);
15583                       00003900            .32:
15584                                           ! Debug: list * unsigned short DX = S+2+$C (used reg = )
15585 3900           8D5E         0E            lea	bx,$E[bp]
15586 3903           53                         push	bx
15587                                           ! Debug: list * unsigned short CX = S+4+$E (used reg = )
15588 3904           8D5E         10            lea	bx,$10[bp]
15589 3907           53                         push	bx
15590                                           ! Debug: list * unsigned short BP = S+6+6 (used reg = )
15591 3908           8D5E         08            lea	bx,8[bp]
15592 390B           53                         push	bx
15593                                           ! Debug: list * unsigned short ES = S+8+$14 (used reg = )
15594 390C           8D5E         16            lea	bx,$16[bp]
15595 390F           53                         push	bx
15596                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$A+$A] (used reg = )
15597 3910           8B46         0C            mov	ax,$C[bp]
15598 3913           88E0                       mov	al,ah
15599 3915           30E4                       xor	ah,ah
15600                                           ! Debug: list unsigned int = ax+0 (used reg = )
15601 3917           50                         push	ax
15602                                           ! Debug: func () void = biosfn_get_font_info+0 (used reg = )
15603 3918           E8         2F8C            call	_biosfn_get_font_info
15604 391B           83C4                   0A  add	sp,*$A
15605                                           !BCC_EOS
15606                                           ! 1709         break;
15607 391E           EB           56            jmp .22
15608                                           !BCC_EOS
15609                                           ! 1710   
15610                                           ! 1710     }
15611                                           ! 1711      break;
15612 3920           EB           54            jmp .22
15613                       00003922            .24:
15614 3922           2C                     00  sub	al,*0
15615 3924         0F84         FF19            beq 	.25
15616 3928           2C                     01  sub	al,*1
15617 392A         0F84         FF3C            beq 	.27
15618 392E           2C                     01  sub	al,*1
15619 3930         0F84         FF4B            beq 	.29
15620 3934           2C                     02  sub	al,*2
15621 3936         0F84         FF5A            beq 	.2B
15622 393A           2C                     0C  sub	al,*$C
15623 393C         0F84         FF01            beq 	.26
15624 3940           2C                     01  sub	al,*1
15625 3942         0F84         FF24            beq 	.28
15626 3946           2C                     01  sub	al,*1
15627 3948         0F84         FF33            beq 	.2A
15628 394C           2C                     02  sub	al,*2
15629 394E         0F84         FF42            beq 	.2C
15630 3952           2C                     0C  sub	al,*$C
15631 3954         0F84         FF51            beq 	.2D
15632 3958           2C                     01  sub	al,*1
15633 395A         0F84         FF5A            beq 	.2E
15634 395E           2C                     01  sub	al,*1
15635 3960         0F84         FF72            beq 	.2F
15636 3964           2C                     01  sub	al,*1
15637 3966         0F84         FF7A            beq 	.30
15638 396A           2C                     01  sub	al,*1
15639 396C         0F84         FF82            beq 	.31
15640 3970           2C                     0C  sub	al,*$C
15641 3972         0F84         FF8A            beq 	.32
15642                       00003976            .22:
15643 3976           E9         013F            br 	.1
15644                                           !BCC_EOS
15645                                           ! 1712    case 0x12:
15646                                           ! 1713      switch(( BX & 0x00ff ))
15647                       00003979            .33:
15648                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15649 3979           8A46         0C            mov	al,$C[bp]
15650                                           ! 1714       {
15651 397C           EB           3C            jmp .36
15652                                           ! 1715        case 0x20:
15653                                           ! 1716         biosfn_alternate_prtsc();
15654                       0000397E            .37:
15655                                           ! Debug: func () void = biosfn_alternate_prtsc+0 (used reg = )
15656 397E           E8         3100            call	_biosfn_alternate_prtsc
15657                                           !BCC_EOS
15658                                           ! 1717         break;
15659 3981           EB           43            jmp .34
15660                                           !BCC_EOS
15661                                           ! 1718        case 0x35:
15662                                           ! 1719         biosfn_switch_video_interface(( AX & 0x00ff ),ES,DX);
15663                       00003983            .38:
15664                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15665 3983           FF76         0E            push	$E[bp]
15666                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15667 3986           FF76         16            push	$16[bp]
15668                                           ! Debug: and int = const $FF to unsigned short AX = [S+6+$10] (used reg = )
15669 3989           8A46         12            mov	al,$12[bp]
15670                                           ! Debug: list unsigned char = al+0 (used reg = )
15671 398C           30E4                       xor	ah,ah
15672 398E           50                         push	ax
15673                                           ! Debug: func () void = biosfn_switch_video_interface+0 (used reg = )
15674 398F           E8         31C9            call	_biosfn_switch_video_interface
15675 3992           83C4                   06  add	sp,*6
15676                                           !BCC_EOS
15677                                           ! 1720         AX = ((AX & 0xff00) | (0x12));
15678                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15679 3995           8B46         12            mov	ax,$12[bp]
15680 3998           30C0                       xor	al,al
15681                                           ! Debug: or int = const $12 to unsigned int = ax+0 (used reg = )
15682 399A           0C                     12  or	al,*$12
15683                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15684 399C           8946         12            mov	$12[bp],ax
15685                                           !BCC_EOS
15686                                           ! 1721         break;
15687 399F           EB           25            jmp .34
15688                                           !BCC_EOS
15689                                           ! 1722        case 0x36:
15690                                           ! 1723         biosfn_enable_video_refresh_control(( AX & 0x00ff ));
15691                       000039A1            .39:
15692                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15693 39A1           8A46         12            mov	al,$12[bp]
15694                                           ! Debug: list unsigned char = al+0 (used reg = )
15695 39A4           30E4                       xor	ah,ah
15696 39A6           50                         push	ax
15697                                           ! Debug: func () void = biosfn_enable_video_refresh_control+0 (used reg = )
15698 39A7           E8         31B2            call	_biosfn_enable_video_refresh_control
15699 39AA           44                         inc	sp
15700 39AB           44                         inc	sp
15701                                           !BCC_EOS
15702                                           ! 1724         AX = ((AX & 0xff00) | (0x12));
15703                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15704 39AC           8B46         12            mov	ax,$12[bp]
15705 39AF           30C0                       xor	al,al
15706                                           ! Debug: or int = const $12 to unsigned int = ax+0 (used reg = )
15707 39B1           0C                     12  or	al,*$12
15708                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15709 39B3           8946         12            mov	$12[bp],ax
15710                                           !BCC_EOS
15711                                           ! 1725         break;
15712 39B6           EB           0E            jmp .34
15713                                           !BCC_EOS
15714                                           ! 1726       }
15715                                           ! 1727      break;
15716 39B8           EB           0C            jmp .34
15717                       000039BA            .36:
15718 39BA           2C                     20  sub	al,*$20
15719 39BC           74           C0            je 	.37
15720 39BE           2C                     15  sub	al,*$15
15721 39C0           74           C1            je 	.38
15722 39C2           2C                     01  sub	al,*1
15723 39C4           74           DB            je 	.39
15724                       000039C6            .34:
15725 39C6           E9         00EF            br 	.1
15726                                           !BCC_EOS
15727                                           ! 1728    case 0x13:
15728                                           ! 1729      biosfn_write_string(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX,( DX >> 8 ),( DX & 0x00ff ),ES,BP);
15729                       000039C9            .3A:
15730                                           ! Debug: list unsigned short BP = [S+2+6] (used reg = )
15731 39C9           FF76         08            push	8[bp]
15732                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15733 39CC           FF76         16            push	$16[bp]
15734                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
15735 39CF           8A46         0E            mov	al,$E[bp]
15736                                           ! Debug: list unsigned char = al+0 (used reg = )
15737 39D2           30E4                       xor	ah,ah
15738 39D4           50                         push	ax
15739                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
15740 39D5           8B46         0E            mov	ax,$E[bp]
15741 39D8           88E0                       mov	al,ah
15742 39DA           30E4                       xor	ah,ah
15743                                           ! Debug: list unsigned int = ax+0 (used reg = )
15744 39DC           50                         push	ax
15745                                           ! Debug: list unsigned short CX = [S+$A+$E] (used reg = )
15746 39DD           FF76         10            push	$10[bp]
15747                                           ! Debug: and int = const $FF to unsigned short BX = [S+$C+$A] (used reg = )
15748 39E0           8A46         0C            mov	al,$C[bp]
15749                                           ! Debug: list unsigned char = al+0 (used reg = )
15750 39E3           30E4                       xor	ah,ah
15751 39E5           50                         push	ax
15752                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
15753 39E6           8B46         0C            mov	ax,$C[bp]
15754 39E9           88E0                       mov	al,ah
15755 39EB           30E4                       xor	ah,ah
15756                                           ! Debug: list unsigned int = ax+0 (used reg = )
15757 39ED           50                         push	ax
15758                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
15759 39EE           8A46         12            mov	al,$12[bp]
15760                                           ! Debug: list unsigned char = al+0 (used reg = )
15761 39F1           30E4                       xor	ah,ah
15762 39F3           50                         push	ax
15763                                           ! Debug: func () void = biosfn_write_string+0 (used reg = )
15764 39F4           E8         3166            call	_biosfn_write_string
15765 39F7           83C4                   10  add	sp,*$10
15766                                           !BCC_EOS
15767                                           ! 1730      break;
15768 39FA           E9         00BB            br 	.1
15769                                           !BCC_EOS
15770                                           ! 1731    case 0x1B:
15771                                           ! 1732      biosfn_read_state_info(BX,ES,DI);
15772                       000039FD            .3B:
15773                                           ! Debug: list unsigned short DI = [S+2+2] (used reg = )
15774 39FD           FF76         04            push	4[bp]
15775                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15776 3A00           FF76         16            push	$16[bp]
15777                                           ! Debug: list unsigned short BX = [S+6+$A] (used reg = )
15778 3A03           FF76         0C            push	$C[bp]
15779                                           ! Debug: func () void = biosfn_read_state_info+0 (used reg = )
15780 3A06           E8         3260            call	_biosfn_read_state_info
15781 3A09           83C4                   06  add	sp,*6
15782                                           !BCC_EOS
15783                                           ! 1733      AX = ((AX & 0xff00) | (0x1B));
15784                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15785 3A0C           8B46         12            mov	ax,$12[bp]
15786 3A0F           30C0                       xor	al,al
15787                                           ! Debug: or int = const $1B to unsigned int = ax+0 (used reg = )
15788 3A11           0C                     1B  or	al,*$1B
15789                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15790 3A13           8946         12            mov	$12[bp],ax
15791                                           !BCC_EOS
15792                                           ! 1734      break;
15793 3A16           E9         009F            br 	.1
15794                                           !BCC_EOS
15795                                           ! 1735    case 0x1C:
15796                                           ! 1736      switch(( AX & 0x00ff ))
15797                       00003A19            .3C:
15798                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15799 3A19           8A46         12            mov	al,$12[bp]
15800                                           ! 1737       {
15801 3A1C           EB           33            jmp .3F
15802                                           ! 1738        case 0x00:
15803                                           ! 1739         biosfn_read_video_state_size(CX,&BX);
15804                       00003A1E            .40:
15805                                           ! Debug: list * unsigned short BX = S+2+$A (used reg = )
15806 3A1E           8D5E         0C            lea	bx,$C[bp]
15807 3A21           53                         push	bx
15808                                           ! Debug: list unsigned short CX = [S+4+$E] (used reg = )
15809 3A22           FF76         10            push	$10[bp]
15810                                           ! Debug: func () void = biosfn_read_video_state_size+0 (used reg = )
15811 3A25           E8         33C0            call	_biosfn_read_video_state_size
15812 3A28           83C4                   04  add	sp,*4
15813                                           !BCC_EOS
15814                                           ! 1740         break;
15815 3A2B           EB           30            jmp .3D
15816                                           !BCC_EOS
15817                                           ! 1741        case 0x01:
15818                                           ! 1742         biosfn_save_video_state(CX,ES,BX);
15819                       00003A2D            .41:
15820                                           ! Debug: list unsigned short BX = [S+2+$A] (used reg = )
15821 3A2D           FF76         0C            push	$C[bp]
15822                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15823 3A30           FF76         16            push	$16[bp]
15824                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
15825 3A33           FF76         10            push	$10[bp]
15826                                           ! Debug: func () unsigned short = biosfn_save_video_state+0 (used reg = )
15827 3A36           E8         33D3            call	_biosfn_save_video_state
15828 3A39           83C4                   06  add	sp,*6
15829                                           !BCC_EOS
15830                                           ! 1743         break;
15831 3A3C           EB           1F            jmp .3D
15832                                           !BCC_EOS
15833                                           ! 1744        case 0x02:
15834                                           ! 1745         biosfn_restore_video_state(CX,ES,BX);
15835                       00003A3E            .42:
15836                                           ! Debug: list unsigned short BX = [S+2+$A] (used reg = )
15837 3A3E           FF76         0C            push	$C[bp]
15838                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15839 3A41           FF76         16            push	$16[bp]
15840                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
15841 3A44           FF76         10            push	$10[bp]
15842                                           ! Debug: func () unsigned short = biosfn_restore_video_state+0 (used reg = )
15843 3A47           E8         398C            call	_biosfn_restore_video_state
15844 3A4A           83C4                   06  add	sp,*6
15845                                           !BCC_EOS
15846                                           ! 1746         break;
15847 3A4D           EB           0E            jmp .3D
15848                                           !BCC_EOS
15849                                           ! 1747       }
15850                                           ! 1748      AX = ((AX & 0xff00) | (0x1C));
15851 3A4F           EB           0C            jmp .3D
15852                       00003A51            .3F:
15853 3A51           2C                     00  sub	al,*0
15854 3A53           74           C9            je 	.40
15855 3A55           2C                     01  sub	al,*1
15856 3A57           74           D4            je 	.41
15857 3A59           2C                     01  sub	al,*1
15858 3A5B           74           E1            je 	.42
15859                       00003A5D            .3D:
15860                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15861 3A5D           8B46         12            mov	ax,$12[bp]
15862 3A60           30C0                       xor	al,al
15863                                           ! Debug: or int = const $1C to unsigned int = ax+0 (used reg = )
15864 3A62           0C                     1C  or	al,*$1C
15865                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15866 3A64           8946         12            mov	$12[bp],ax
15867                                           !BCC_EOS
15868                                           ! 1749      break;
15869 3A67           EB           4F            jmp .1
15870                                           !BCC_EOS
15871                                           ! 1750   }
15872                                           ! 1751 }
15873 3A69           EB           4D            jmp .1
15874                       00003A6B            .3:
15875 3A6B           2D                   0000  sub	ax,*0
15876 3A6E           7C           48            jl  	.1
15877 3A70           3D                   001C  cmp	ax,*$1C
15878 3A73           77           43            ja  	.43
15879 3A75           D1E0                       shl	ax,*1
15880 3A77           89C3                       mov	bx,ax
15881 3A79           2E                         seg	cs
15882 3A7A           FFA7       3A7E            br	.44[bx]
15883                       00003A7E            .44:
15884 3A7E                      3646            .word	.4
15885 3A80                      36A4            .word	.13
15886 3A82                      36BB            .word	.14
15887 3A84                      36CF            .word	.15
15888 3A86                      36E8            .word	.16
15889 3A88                      36FF            .word	.17
15890 3A8A                      370D            .word	.18
15891 3A8C                      3748            .word	.19
15892 3A8E                      3782            .word	.1A
15893 3A90                      3797            .word	.1B
15894 3A92                      37B7            .word	.1C
15895 3A94                      3AB8            .word	.1
15896 3A96                      37D7            .word	.1D
15897 3A98                      37F4            .word	.1E
15898 3A9A                      380F            .word	.1F
15899 3A9C                      3AB8            .word	.1
15900 3A9E                      382C            .word	.20
15901 3AA0                      383B            .word	.21
15902 3AA2                      3979            .word	.33
15903 3AA4                      39C9            .word	.3A
15904 3AA6                      3AB8            .word	.1
15905 3AA8                      3AB8            .word	.1
15906 3AAA                      3AB8            .word	.1
15907 3AAC                      3AB8            .word	.1
15908 3AAE                      3AB8            .word	.1
15909 3AB0                      3AB8            .word	.1
15910 3AB2                      3AB8            .word	.1
15911 3AB4                      39FD            .word	.3B
15912 3AB6                      3A19            .word	.3C
15913                       00003AB8            .43:
15914                       00003AB8            .1:
15915                       FFFFFFFE            ..FFFF	=	-2
15916 3AB8           5D                         pop	bp
15917 3AB9           C3                         ret
15918                                           ! 1752 static void biosfn_set_video_mode(mode) Bit8u mode;
15919                                           ! Register BX used in function int10_func
15920                       00003ABA            _biosfn_set_video_mode:
15921                                           !BCC_EOS
15922                                           ! 1753 {
15923                                           ! 1754  Bit8u noclearmem=mode&0x80;
15924 3ABA           55                         push	bp
15925 3ABB           89E5                       mov	bp,sp
15926 3ABD           4C                         dec	sp
15927                                           ! Debug: and int = const $80 to unsigned char mode = [S+3+2] (used reg = )
15928 3ABE           8A46         04            mov	al,4[bp]
15929 3AC1           24                     80  and	al,#$80
15930                                           ! Debug: eq unsigned char = al+0 to unsigned char noclearmem = [S+3-3] (used reg = )
15931 3AC3           8846         FF            mov	-1[bp],al
15932                                           !BCC_EOS
15933                                           ! 1755  Bit8u line,mmask,*palette,vpti;
15934                                           !BCC_EOS
15935                                           ! 1756  Bit16u i,twidth,theightm1,cheight;
15936                                           !BCC_EOS
15937                                           ! 1757  Bit8u modeset_ctl,video_ctl,vga_switches;
15938                                           !BCC_EOS
15939                                           ! 1758  Bit16u crtc_addr;
15940                                           !BCC_EOS
15941                                           ! 1759  mode=mode&0x7f;
15942 3AC6           83C4                   EB  add	sp,*-$15
15943                                           ! Debug: and int = const $7F to unsigned char mode = [S+$18+2] (used reg = )
15944 3AC9           8A46         04            mov	al,4[bp]
15945 3ACC           24                     7F  and	al,*$7F
15946                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$18+2] (used reg = )
15947 3ACE           8846         04            mov	4[bp],al
15948                                           !BCC_EOS
15949                                           ! 1760  line=find_vga_entry(mode);
15950                                           ! Debug: list unsigned char mode = [S+$18+2] (used reg = )
15951 3AD1           8A46         04            mov	al,4[bp]
15952 3AD4           30E4                       xor	ah,ah
15953 3AD6           50                         push	ax
15954                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
15955 3AD7           E8         3EDA            call	_find_vga_entry
15956 3ADA           44                         inc	sp
15957 3ADB           44                         inc	sp
15958                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$18-4] (used reg = )
15959 3ADC           8846         FE            mov	-2[bp],al
15960                                           !BCC_EOS
15961                                           ! 1761  if(line==0xFF)
15962                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$18-4] (used reg = )
15963 3ADF           8A46         FE            mov	al,-2[bp]
15964 3AE2           3C                     FF  cmp	al,#$FF
15965 3AE4           75           04            jne 	.45
15966                       00003AE6            .46:
15967                                           ! 1762   return;
15968 3AE6           89EC                       mov	sp,bp
15969 3AE8           5D                         pop	bp
15970 3AE9           C3                         ret
15971                                           !BCC_EOS
15972                                           ! 1763  vpti=line_to_vpti[line];
15973                       00003AEA            .45:
15974                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] unsigned char = line_to_vpti+0 (used reg = )
15975 3AEA           8A46         FE            mov	al,-2[bp]
15976 3AED           30E4                       xor	ah,ah
15977 3AEF           89C3                       mov	bx,ax
15978                                           ! Debug: eq unsigned char = [bx+_line_to_vpti+0] to unsigned char vpti = [S+$18-9] (used reg = )
15979 3AF1           8A87       025A            mov	al,_line_to_vpti[bx]
15980 3AF5           8846         F9            mov	-7[bp],al
15981                                           !BCC_EOS
15982                                           ! 1764  twidth=video_param_table[vpti].twidth;
15983                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
15984 3AF8           8A46         F9            mov	al,-7[bp]
15985 3AFB           30E4                       xor	ah,ah
15986 3AFD           B1                     06  mov	cl,*6
15987 3AFF           D3E0                       shl	ax,cl
15988 3B01           89C3                       mov	bx,ax
15989                                           ! Debug: eq unsigned char = [bx+_video_param_table+0] to unsigned short twidth = [S+$18-$E] (used reg = )
15990 3B03           8A87       026E            mov	al,_video_param_table[bx]
15991 3B07           30E4                       xor	ah,ah
15992 3B09           8946         F4            mov	-$C[bp],ax
15993                                           !BCC_EOS
15994                                           ! 1765  theightm1=video_param_table[vpti].theightm1;
15995                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
15996 3B0C           8A46         F9            mov	al,-7[bp]
15997 3B0F           30E4                       xor	ah,ah
15998 3B11           B1                     06  mov	cl,*6
15999 3B13           D3E0                       shl	ax,cl
16000 3B15           89C3                       mov	bx,ax
16001 3B17           81C3                 026E  add	bx,#_video_param_table
16002                                           ! Debug: eq unsigned char = [bx+1] to unsigned short theightm1 = [S+$18-$10] (used reg = )
16003 3B1B           8A47         01            mov	al,1[bx]
16004 3B1E           30E4                       xor	ah,ah
16005 3B20           8946         F2            mov	-$E[bp],ax
16006                                           !BCC_EOS
16007                                           ! 1766  cheight=video_param_table[vpti].cheight;
16008                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16009 3B23           8A46         F9            mov	al,-7[bp]
16010 3B26           30E4                       xor	ah,ah
16011 3B28           B1                     06  mov	cl,*6
16012 3B2A           D3E0                       shl	ax,cl
16013 3B2C           89C3                       mov	bx,ax
16014 3B2E           81C3                 026E  add	bx,#_video_param_table
16015                                           ! Debug: eq unsigned char = [bx+2] to unsigned short cheight = [S+$18-$12] (used reg = )
16016 3B32           8A47         02            mov	al,2[bx]
16017 3B35           30E4                       xor	ah,ah
16018 3B37           8946         F0            mov	-$10[bp],ax
16019                                           !BCC_EOS
16020                                           ! 1767  video_ctl=read_byte(0x40,0x87);
16021                                           ! Debug: list int = const $87 (used reg = )
16022 3B3A           B8                   0087  mov	ax,#$87
16023 3B3D           50                         push	ax
16024                                           ! Debug: list int = const $40 (used reg = )
16025 3B3E           B8                   0040  mov	ax,*$40
16026 3B41           50                         push	ax
16027                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16028 3B42           E8         3F5B            call	_read_byte
16029 3B45           83C4                   04  add	sp,*4
16030                                           ! Debug: eq unsigned char = al+0 to unsigned char video_ctl = [S+$18-$14] (used reg = )
16031 3B48           8846         EE            mov	-$12[bp],al
16032                                           !BCC_EOS
16033                                           ! 1768  vga_switches=read_byte(0x40,0x88);
16034                                           ! Debug: list int = const $88 (used reg = )
16035 3B4B           B8                   0088  mov	ax,#$88
16036 3B4E           50                         push	ax
16037                                           ! Debug: list int = const $40 (used reg = )
16038 3B4F           B8                   0040  mov	ax,*$40
16039 3B52           50                         push	ax
16040                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16041 3B53           E8         3F4A            call	_read_byte
16042 3B56           83C4                   04  add	sp,*4
16043                                           ! Debug: eq unsigned char = al+0 to unsigned char vga_switches = [S+$18-$15] (used reg = )
16044 3B59           8846         ED            mov	-$13[bp],al
16045                                           !BCC_EOS
16046                                           ! 1769  modeset_ctl=read_byte(0x40,0x89);
16047                                           ! Debug: list int = const $89 (used reg = )
16048 3B5C           B8                   0089  mov	ax,#$89
16049 3B5F           50                         push	ax
16050                                           ! Debug: list int = const $40 (used reg = )
16051 3B60           B8                   0040  mov	ax,*$40
16052 3B63           50                         push	ax
16053                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16054 3B64           E8         3F39            call	_read_byte
16055 3B67           83C4                   04  add	sp,*4
16056                                           ! Debug: eq unsigned char = al+0 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16057 3B6A           8846         EF            mov	-$11[bp],al
16058                                           !BCC_EOS
16059                                           ! 1770  if((modeset_ctl&0x08)==0)
16060                                           ! Debug: and int = const 8 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16061 3B6D           8A46         EF            mov	al,-$11[bp]
16062 3B70           24                     08  and	al,*8
16063                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
16064 3B72           84C0                       test	al,al
16065 3B74         0F85         0145            bne 	.47
16066                       00003B78            .48:
16067                                           ! 1771   {
16068                                           ! 1772    outb(0x3c6,vga_modes[line].pelmask);
16069                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16070 3B78           8A46         FE            mov	al,-2[bp]
16071 3B7B           30E4                       xor	ah,ah
16072 3B7D           B1                     03  mov	cl,*3
16073 3B7F           D3E0                       shl	ax,cl
16074 3B81           89C3                       mov	bx,ax
16075 3B83           81C3                 01DA  add	bx,#_vga_modes
16076                                           ! Debug: list unsigned char = [bx+6] (used reg = )
16077 3B87           8A47         06            mov	al,6[bx]
16078 3B8A           30E4                       xor	ah,ah
16079 3B8C           50                         push	ax
16080                                           ! Debug: list int = const $3C6 (used reg = )
16081 3B8D           B8                   03C6  mov	ax,#$3C6
16082 3B90           50                         push	ax
16083                                           ! Debug: func () void = outb+0 (used reg = )
16084 3B91           E8         3F78            call	_outb
16085 3B94           83C4                   04  add	sp,*4
16086                                           !BCC_EOS
16087                                           ! 1773    outb(0x3c8,0x00);
16088                                           ! Debug: list int = const 0 (used reg = )
16089 3B97           31C0                       xor	ax,ax
16090 3B99           50                         push	ax
16091                                           ! Debug: list int = const $3C8 (used reg = )
16092 3B9A           B8                   03C8  mov	ax,#$3C8
16093 3B9D           50                         push	ax
16094                                           ! Debug: func () void = outb+0 (used reg = )
16095 3B9E           E8         3F6B            call	_outb
16096 3BA1           83C4                   04  add	sp,*4
16097                                           !BCC_EOS
16098                                           ! 1774    switch(vga_modes[line].dacmodel)
16099                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16100 3BA4           8A46         FE            mov	al,-2[bp]
16101 3BA7           30E4                       xor	ah,ah
16102 3BA9           B1                     03  mov	cl,*3
16103 3BAB           D3E0                       shl	ax,cl
16104 3BAD           89C3                       mov	bx,ax
16105 3BAF           81C3                 01DA  add	bx,#_vga_modes
16106 3BB3           8A47         07            mov	al,7[bx]
16107                                           ! 1775     {case 0:
16108 3BB6           EB           22            jmp .4B
16109                                           ! 1776       palette=&palette0;
16110                       00003BB8            .4C:
16111                                           ! Debug: eq * [$40] [3] unsigned char = palette0+0 to * unsigned char palette = [S+$18-8] (used reg = )
16112 3BB8           BB                   09EE  mov	bx,#_palette0
16113 3BBB           895E         FA            mov	-6[bp],bx
16114                                           !BCC_EOS
16115                                           ! 1777       break;
16116 3BBE           EB           2A            jmp .49
16117                                           !BCC_EOS
16118                                           ! 1778      case 1:
16119                                           ! 1779       palette=&palette1;
16120                       00003BC0            .4D:
16121                                           ! Debug: eq * [$40] [3] unsigned char = palette1+0 to * unsigned char palette = [S+$18-8] (used reg = )
16122 3BC0           BB                   0AAE  mov	bx,#_palette1
16123 3BC3           895E         FA            mov	-6[bp],bx
16124                                           !BCC_EOS
16125                                           ! 1780       break;
16126 3BC6           EB           22            jmp .49
16127                                           !BCC_EOS
16128                                           ! 1781      case 2:
16129                                           ! 1782       palette=&palette2;
16130                       00003BC8            .4E:
16131                                           ! Debug: eq * [$40] [3] unsigned char = palette2+0 to * unsigned char palette = [S+$18-8] (used reg = )
16132 3BC8           BB                   0B6E  mov	bx,#_palette2
16133 3BCB           895E         FA            mov	-6[bp],bx
16134                                           !BCC_EOS
16135                                           ! 1783       break;
16136 3BCE           EB           1A            jmp .49
16137                                           !BCC_EOS
16138                                           ! 1784      case 3:
16139                                           ! 1785       palette=&palette3;
16140                       00003BD0            .4F:
16141                                           ! Debug: eq * [$100] [3] unsigned char = palette3+0 to * unsigned char palette = [S+$18-8] (used reg = )
16142 3BD0           BB                   0C2E  mov	bx,#_palette3
16143 3BD3           895E         FA            mov	-6[bp],bx
16144                                           !BCC_EOS
16145                                           ! 1786       break;
16146 3BD6           EB           12            jmp .49
16147                                           !BCC_EOS
16148                                           ! 1787     }
16149                                           ! 1788    for(i=0;i<0x0100;i++)
16150 3BD8           EB           10            jmp .49
16151                       00003BDA            .4B:
16152 3BDA           2C                     00  sub	al,*0
16153 3BDC           74           DA            je 	.4C
16154 3BDE           2C                     01  sub	al,*1
16155 3BE0           74           DE            je 	.4D
16156 3BE2           2C                     01  sub	al,*1
16157 3BE4           74           E2            je 	.4E
16158 3BE6           2C                     01  sub	al,*1
16159 3BE8           74           E6            je 	.4F
16160                       00003BEA            .49:
16161                       FFFFFFE8            ..FFFE	=	-$18
16162                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
16163 3BEA           31C0                       xor	ax,ax
16164 3BEC           8946         F6            mov	-$A[bp],ax
16165                                           !BCC_EOS
16166                                           !BCC_EOS
16167                                           ! 1789     {if(i<=dac_regs[vga_modes[line].dacmodel])
16168 3BEF           E9         00AB            br 	.52
16169                       00003BF2            .53:
16170                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16171 3BF2           8A46         FE            mov	al,-2[bp]
16172 3BF5           30E4                       xor	ah,ah
16173 3BF7           B1                     03  mov	cl,*3
16174 3BF9           D3E0                       shl	ax,cl
16175 3BFB           89C3                       mov	bx,ax
16176 3BFD           81C3                 01DA  add	bx,#_vga_modes
16177                                           ! Debug: ptradd unsigned char = [bx+7] to [4] unsigned char = dac_regs+0 (used reg = )
16178 3C01           8A47         07            mov	al,7[bx]
16179 3C04           30E4                       xor	ah,ah
16180 3C06           89C3                       mov	bx,ax
16181                                           ! Debug: le unsigned char = [bx+_dac_regs+0] to unsigned short i = [S+$18-$C] (used reg = )
16182 3C08           8A87       026A            mov	al,_dac_regs[bx]
16183 3C0C           30E4                       xor	ah,ah
16184 3C0E           3B46         F6            cmp	ax,-$A[bp]
16185 3C11           72           5C            jb  	.54
16186                       00003C13            .55:
16187                                           ! 1790       {outb(0x3c9,palette[(i*3)+0]);
16188                                           ! Debug: mul int = const 3 to unsigned short i = [S+$18-$C] (used reg = )
16189 3C13           8B46         F6            mov	ax,-$A[bp]
16190 3C16           89C2                       mov	dx,ax
16191 3C18           D1E0                       shl	ax,*1
16192 3C1A           01D0                       add	ax,dx
16193                                           ! Debug: add int = const 0 to unsigned int = ax+0 (used reg = )
16194                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char palette = [S+$18-8] (used reg = )
16195 3C1C           0346         FA            add	ax,-6[bp]
16196 3C1F           89C3                       mov	bx,ax
16197                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16198 3C21           8A07                       mov	al,[bx]
16199 3C23           30E4                       xor	ah,ah
16200 3C25           50                         push	ax
16201                                           ! Debug: list int = const $3C9 (used reg = )
16202 3C26           B8                   03C9  mov	ax,#$3C9
16203 3C29           50                         push	ax
16204                                           ! Debug: func () void = outb+0 (used reg = )
16205 3C2A           E8         3EDF            call	_outb
16206 3C2D           83C4                   04  add	sp,*4
16207                                           !BCC_EOS
16208                                           ! 1791        outb(0x3c9,palette[(i*3)+1]);
16209                                           ! Debug: mul int = const 3 to unsigned short i = [S+$18-$C] (used reg = )
16210 3C30           8B46         F6            mov	ax,-$A[bp]
16211 3C33           89C2                       mov	dx,ax
16212 3C35           D1E0                       shl	ax,*1
16213 3C37           01D0                       add	ax,dx
16214                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
16215                                           ! Debug: ptradd unsigned int = ax+1 to * unsigned char palette = [S+$18-8] (used reg = )
16216 3C39           40                         inc	ax
16217 3C3A           0346         FA            add	ax,-6[bp]
16218 3C3D           89C3                       mov	bx,ax
16219                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16220 3C3F           8A07                       mov	al,[bx]
16221 3C41           30E4                       xor	ah,ah
16222 3C43           50                         push	ax
16223                                           ! Debug: list int = const $3C9 (used reg = )
16224 3C44           B8                   03C9  mov	ax,#$3C9
16225 3C47           50                         push	ax
16226                                           ! Debug: func () void = outb+0 (used reg = )
16227 3C48           E8         3EC1            call	_outb
16228 3C4B           83C4                   04  add	sp,*4
16229                                           !BCC_EOS
16230                                           ! 1792        outb(0x3
16231                                           ! 1792 c9,palette[(i*3)+2]);
16232                                           ! Debug: mul int = const 3 to unsigned short i = [S+$18-$C] (used reg = )
16233 3C4E           8B46         F6            mov	ax,-$A[bp]
16234 3C51           89C2                       mov	dx,ax
16235 3C53           D1E0                       shl	ax,*1
16236 3C55           01D0                       add	ax,dx
16237                                           ! Debug: add int = const 2 to unsigned int = ax+0 (used reg = )
16238                                           ! Debug: ptradd unsigned int = ax+2 to * unsigned char palette = [S+$18-8] (used reg = )
16239 3C57           40                         inc	ax
16240 3C58           40                         inc	ax
16241 3C59           0346         FA            add	ax,-6[bp]
16242 3C5C           89C3                       mov	bx,ax
16243                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16244 3C5E           8A07                       mov	al,[bx]
16245 3C60           30E4                       xor	ah,ah
16246 3C62           50                         push	ax
16247                                           ! Debug: list int = const $3C9 (used reg = )
16248 3C63           B8                   03C9  mov	ax,#$3C9
16249 3C66           50                         push	ax
16250                                           ! Debug: func () void = outb+0 (used reg = )
16251 3C67           E8         3EA2            call	_outb
16252 3C6A           83C4                   04  add	sp,*4
16253                                           !BCC_EOS
16254                                           ! 1793       }
16255                                           ! 1794      else
16256                                           ! 1795       {outb(0x3c9,0);
16257 3C6D           EB           27            jmp .56
16258                       00003C6F            .54:
16259                                           ! Debug: list int = const 0 (used reg = )
16260 3C6F           31C0                       xor	ax,ax
16261 3C71           50                         push	ax
16262                                           ! Debug: list int = const $3C9 (used reg = )
16263 3C72           B8                   03C9  mov	ax,#$3C9
16264 3C75           50                         push	ax
16265                                           ! Debug: func () void = outb+0 (used reg = )
16266 3C76           E8         3E93            call	_outb
16267 3C79           83C4                   04  add	sp,*4
16268                                           !BCC_EOS
16269                                           ! 1796        outb(0x3c9,0);
16270                                           ! Debug: list int = const 0 (used reg = )
16271 3C7C           31C0                       xor	ax,ax
16272 3C7E           50                         push	ax
16273                                           ! Debug: list int = const $3C9 (used reg = )
16274 3C7F           B8                   03C9  mov	ax,#$3C9
16275 3C82           50                         push	ax
16276                                           ! Debug: func () void = outb+0 (used reg = )
16277 3C83           E8         3E86            call	_outb
16278 3C86           83C4                   04  add	sp,*4
16279                                           !BCC_EOS
16280                                           ! 1797        outb(0x3c9,0);
16281                                           ! Debug: list int = const 0 (used reg = )
16282 3C89           31C0                       xor	ax,ax
16283 3C8B           50                         push	ax
16284                                           ! Debug: list int = const $3C9 (used reg = )
16285 3C8C           B8                   03C9  mov	ax,#$3C9
16286 3C8F           50                         push	ax
16287                                           ! Debug: func () void = outb+0 (used reg = )
16288 3C90           E8         3E79            call	_outb
16289 3C93           83C4                   04  add	sp,*4
16290                                           !BCC_EOS
16291                                           ! 1798       }
16292                                           ! 1799     }
16293                       00003C96            .56:
16294                                           ! 1800    if((modeset_ctl&0x02)==0x02)
16295                       00003C96            .51:
16296                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16297 3C96           8B46         F6            mov	ax,-$A[bp]
16298 3C99           40                         inc	ax
16299 3C9A           8946         F6            mov	-$A[bp],ax
16300                       00003C9D            .52:
16301                                           ! Debug: lt int = const $100 to unsigned short i = [S+$18-$C] (used reg = )
16302 3C9D           8B46         F6            mov	ax,-$A[bp]
16303 3CA0           3D                   0100  cmp	ax,#$100
16304 3CA3         0F82         FF4B            blo 	.53
16305                       00003CA7            .57:
16306                       00003CA7            .50:
16307                                           ! Debug: and int = const 2 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16308 3CA7           8A46         EF            mov	al,-$11[bp]
16309 3CAA           24                     02  and	al,*2
16310                                           ! Debug: logeq int = const 2 to unsigned char = al+0 (used reg = )
16311 3CAC           3C                     02  cmp	al,*2
16312 3CAE           75           0D            jne 	.58
16313                       00003CB0            .59:
16314                                           ! 1801     {
16315                                           ! 1802      biosfn_perform_gray_scale_summing(0x00, 0x100);
16316                                           ! Debug: list int = const $100 (used reg = )
16317 3CB0           B8                   0100  mov	ax,#$100
16318 3CB3           50                         push	ax
16319                                           ! Debug: list int = const 0 (used reg = )
16320 3CB4           31C0                       xor	ax,ax
16321 3CB6           50                         push	ax
16322                                           ! Debug: func () void = biosfn_perform_gray_scale_summing+0 (used reg = )
16323 3CB7           E8         26DE            call	_biosfn_perform_gray_scale_summing
16324 3CBA           83C4                   04  add	sp,*4
16325                                           !BCC_EOS
16326                                           ! 1803     }
16327                                           ! 1804   }
16328                       00003CBD            .58:
16329                                           ! 1805  inb(0x3da);
16330                       00003CBD            .47:
16331                                           ! Debug: list int = const $3DA (used reg = )
16332 3CBD           B8                   03DA  mov	ax,#$3DA
16333 3CC0           50                         push	ax
16334                                           ! Debug: func () unsigned char = inb+0 (used reg = )
16335 3CC1           E8         3E32            call	_inb
16336 3CC4           44                         inc	sp
16337 3CC5           44                         inc	sp
16338                                           !BCC_EOS
16339                                           ! 1806  for(i=0;i<=0x13;i++)
16340                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
16341 3CC6           31C0                       xor	ax,ax
16342 3CC8           8946         F6            mov	-$A[bp],ax
16343                                           !BCC_EOS
16344                                           !BCC_EOS
16345                                           ! 1807   {outb(0x3c0,i);
16346 3CCB           EB           38            jmp .5C
16347                       00003CCD            .5D:
16348                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
16349 3CCD           FF76         F6            push	-$A[bp]
16350                                           ! Debug: list int = const $3C0 (used reg = )
16351 3CD0           B8                   03C0  mov	ax,#$3C0
16352 3CD3           50                         push	ax
16353                                           ! Debug: func () void = outb+0 (used reg = )
16354 3CD4           E8         3E35            call	_outb
16355 3CD7           83C4                   04  add	sp,*4
16356                                           !BCC_EOS
16357                                           ! 1808    outb(0x3c0,video_param_table[vpti].actl_regs[i]);
16358                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16359 3CDA           8A46         F9            mov	al,-7[bp]
16360 3CDD           30E4                       xor	ah,ah
16361 3CDF           B1                     06  mov	cl,*6
16362 3CE1           D3E0                       shl	ax,cl
16363 3CE3           89C3                       mov	bx,ax
16364 3CE5           81C3                 026E  add	bx,#_video_param_table
16365                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [$14] unsigned char = bx+$23 (used reg = )
16366 3CE9           8B46         F6            mov	ax,-$A[bp]
16367 3CEC           01C3                       add	bx,ax
16368                                           ! Debug: list unsigned char = [bx+$23] (used reg = )
16369 3CEE           8A47         23            mov	al,$23[bx]
16370 3CF1           30E4                       xor	ah,ah
16371 3CF3           50                         push	ax
16372                                           ! Debug: list int = const $3C0 (used reg = )
16373 3CF4           B8                   03C0  mov	ax,#$3C0
16374 3CF7           50                         push	ax
16375                                           ! Debug: func () void = outb+0 (used reg = )
16376 3CF8           E8         3E11            call	_outb
16377 3CFB           83C4                   04  add	sp,*4
16378                                           !BCC_EOS
16379                                           ! 1809   }
16380                                           ! 1810  outb(0x3c0,0x14);
16381                       00003CFE            .5B:
16382                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16383 3CFE           8B46         F6            mov	ax,-$A[bp]
16384 3D01           40                         inc	ax
16385 3D02           8946         F6            mov	-$A[bp],ax
16386                       00003D05            .5C:
16387                                           ! Debug: le int = const $13 to unsigned short i = [S+$18-$C] (used reg = )
16388 3D05           8B46         F6            mov	ax,-$A[bp]
16389 3D08           3D                   0013  cmp	ax,*$13
16390 3D0B           76           C0            jbe	.5D
16391                       00003D0D            .5E:
16392                       00003D0D            .5A:
16393                                           ! Debug: list int = const $14 (used reg = )
16394 3D0D           B8                   0014  mov	ax,*$14
16395 3D10           50                         push	ax
16396                                           ! Debug: list int = const $3C0 (used reg = )
16397 3D11           B8                   03C0  mov	ax,#$3C0
16398 3D14           50                         push	ax
16399                                           ! Debug: func () void = outb+0 (used reg = )
16400 3D15           E8         3DF4            call	_outb
16401 3D18           83C4                   04  add	sp,*4
16402                                           !BCC_EOS
16403                                           ! 1811  outb(0x3c0,0x00);
16404                                           ! Debug: list int = const 0 (used reg = )
16405 3D1B           31C0                       xor	ax,ax
16406 3D1D           50                         push	ax
16407                                           ! Debug: list int = const $3C0 (used reg = )
16408 3D1E           B8                   03C0  mov	ax,#$3C0
16409 3D21           50                         push	ax
16410                                           ! Debug: func () void = outb+0 (used reg = )
16411 3D22           E8         3DE7            call	_outb
16412 3D25           83C4                   04  add	sp,*4
16413                                           !BCC_EOS
16414                                           ! 1812  outb(0x3c4,0);
16415                                           ! Debug: list int = const 0 (used reg = )
16416 3D28           31C0                       xor	ax,ax
16417 3D2A           50                         push	ax
16418                                           ! Debug: list int = const $3C4 (used reg = )
16419 3D2B           B8                   03C4  mov	ax,#$3C4
16420 3D2E           50                         push	ax
16421                                           ! Debug: func () void = outb+0 (used reg = )
16422 3D2F           E8         3DDA            call	_outb
16423 3D32           83C4                   04  add	sp,*4
16424                                           !BCC_EOS
16425                                           ! 1813  outb(0x3c5,0x03);
16426                                           ! Debug: list int = const 3 (used reg = )
16427 3D35           B8                   0003  mov	ax,*3
16428 3D38           50                         push	ax
16429                                           ! Debug: list int = const $3C5 (used reg = )
16430 3D39           B8                   03C5  mov	ax,#$3C5
16431 3D3C           50                         push	ax
16432                                           ! Debug: func () void = outb+0 (used reg = )
16433 3D3D           E8         3DCC            call	_outb
16434 3D40           83C4                   04  add	sp,*4
16435                                           !BCC_EOS
16436                                           ! 1814  for(i=1;i<=4;i++)
16437                                           ! Debug: eq int = const 1 to unsigned short i = [S+$18-$C] (used reg = )
16438 3D43           B8                   0001  mov	ax,*1
16439 3D46           8946         F6            mov	-$A[bp],ax
16440                                           !BCC_EOS
16441                                           !BCC_EOS
16442                                           ! 1815   {outb(0x3c4,i);
16443 3D49           EB           3F            jmp .61
16444                       00003D4B            .62:
16445                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
16446 3D4B           FF76         F6            push	-$A[bp]
16447                                           ! Debug: list int = const $3C4 (used reg = )
16448 3D4E           B8                   03C4  mov	ax,#$3C4
16449 3D51           50                         push	ax
16450                                           ! Debug: func () void = outb+0 (used reg = )
16451 3D52           E8         3DB7            call	_outb
16452 3D55           83C4                   04  add	sp,*4
16453                                           !BCC_EOS
16454                                           ! 1816    outb(0x3c5,video_param_table[vpti].sequ_regs[i - 1]);
16455                                           ! Debug: sub int = const 1 to unsigned short i = [S+$18-$C] (used reg = )
16456 3D58           8B46         F6            mov	ax,-$A[bp]
16457 3D5B           48                         dec	ax
16458 3D5C           50                         push	ax
16459                                           ! Debug: ptradd unsigned char vpti = [S+$1A-9] to [$1E] struct  = video_param_table+0 (used reg = )
16460 3D5D           8A46         F9            mov	al,-7[bp]
16461 3D60           30E4                       xor	ah,ah
16462 3D62           B1                     06  mov	cl,*6
16463 3D64           D3E0                       shl	ax,cl
16464 3D66           89C3                       mov	bx,ax
16465 3D68           81C3                 026E  add	bx,#_video_param_table
16466                                           ! Debug: ptradd unsigned int (temp) = [S+$1A-$1A] to [4] unsigned char = bx+5 (used reg = )
16467 3D6C           8B46         E8            mov	ax,-$18[bp]
16468 3D6F           01C3                       add	bx,ax
16469 3D71           44                         inc	sp
16470 3D72           44                         inc	sp
16471                                           ! Debug: list unsigned char = [bx+5] (used reg = )
16472 3D73           8A47         05            mov	al,5[bx]
16473 3D76           30E4                       xor	ah,ah
16474 3D78           50                         push	ax
16475                                           ! Debug: list int = const $3C5 (used reg = )
16476 3D79           B8                   03C5  mov	ax,#$3C5
16477 3D7C           50                         push	ax
16478                                           ! Debug: func () void = outb+0 (used reg = )
16479 3D7D           E8         3D8C            call	_outb
16480 3D80           83C4                   04  add	sp,*4
16481                                           !BCC_EOS
16482                                           ! 1817   }
16483                                           ! 1818  for(i=0;i<=8;i++)
16484                       00003D83            .60:
16485                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16486 3D83           8B46         F6            mov	ax,-$A[bp]
16487 3D86           40                         inc	ax
16488 3D87           8946         F6            mov	-$A[bp],ax
16489                       00003D8A            .61:
16490                                           ! Debug: le int = const 4 to unsigned short i = [S+$18-$C] (used reg = )
16491 3D8A           8B46         F6            mov	ax,-$A[bp]
16492 3D8D           3D                   0004  cmp	ax,*4
16493 3D90           76           B9            jbe	.62
16494                       00003D92            .63:
16495                       00003D92            .5F:
16496                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
16497 3D92           31C0                       xor	ax,ax
16498 3D94           8946         F6            mov	-$A[bp],ax
16499                                           !BCC_EOS
16500                                           !BCC_EOS
16501                                           ! 1819   {outb(0x3ce,i);
16502 3D97           EB           38            jmp .66
16503                       00003D99            .67:
16504                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
16505 3D99           FF76         F6            push	-$A[bp]
16506                                           ! Debug: list int = const $3CE (used reg = )
16507 3D9C           B8                   03CE  mov	ax,#$3CE
16508 3D9F           50                         push	ax
16509                                           ! Debug: func () void = outb+0 (used reg = )
16510 3DA0           E8         3D69            call	_outb
16511 3DA3           83C4                   04  add	sp,*4
16512                                           !BCC_EOS
16513                                           ! 1820    outb(0x3cf,video_param_table[vpti].grdc_regs[i]);
16514                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16515 3DA6           8A46         F9            mov	al,-7[bp]
16516 3DA9           30E4                       xor	ah,ah
16517 3DAB           B1                     06  mov	cl,*6
16518 3DAD           D3E0                       shl	ax,cl
16519 3DAF           89C3                       mov	bx,ax
16520 3DB1           81C3                 026E  add	bx,#_video_param_table
16521                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [9] unsigned char = bx+$37 (used reg = )
16522 3DB5           8B46         F6            mov	ax,-$A[bp]
16523 3DB8           01C3                       add	bx,ax
16524                                           ! Debug: list unsigned char = [bx+$37] (used reg = )
16525 3DBA           8A47         37            mov	al,$37[bx]
16526 3DBD           30E4                       xor	ah,ah
16527 3DBF           50                         push	ax
16528                                           ! Debug: list int = const $3CF (used reg = )
16529 3DC0           B8                   03CF  mov	ax,#$3CF
16530 3DC3           50                         push	ax
16531                                           ! Debug: func () void = outb+0 (used reg = )
16532 3DC4           E8         3D45            call	_outb
16533 3DC7           83C4                   04  add	sp,*4
16534                                           !BCC_EOS
16535                                           ! 1821   }
16536                                           ! 1822  crtc_addr=vga_modes[line].memmodel==0x01?0x3b4:0x3d4;
16537                       00003DCA            .65:
16538                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16539 3DCA           8B46         F6            mov	ax,-$A[bp]
16540 3DCD           40                         inc	ax
16541 3DCE           8946         F6            mov	-$A[bp],ax
16542                       00003DD1            .66:
16543                                           ! Debug: le int = const 8 to unsigned short i = [S+$18-$C] (used reg = )
16544 3DD1           8B46         F6            mov	ax,-$A[bp]
16545 3DD4           3D                   0008  cmp	ax,*8
16546 3DD7           76           C0            jbe	.67
16547                       00003DD9            .68:
16548                       00003DD9            .64:
16549                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16550 3DD9           8A46         FE            mov	al,-2[bp]
16551 3DDC           30E4                       xor	ah,ah
16552 3DDE           B1                     03  mov	cl,*3
16553 3DE0           D3E0                       shl	ax,cl
16554 3DE2           89C3                       mov	bx,ax
16555 3DE4           81C3                 01DA  add	bx,#_vga_modes
16556                                           ! Debug: logeq int = const 1 to unsigned char = [bx+2] (used reg = )
16557 3DE8           8A47         02            mov	al,2[bx]
16558 3DEB           3C                     01  cmp	al,*1
16559 3DED           75           05            jne 	.69
16560                       00003DEF            .6A:
16561 3DEF           B8                   03B4  mov	ax,#$3B4
16562 3DF2           EB           03            jmp .6B
16563                       00003DF4            .69:
16564 3DF4           B8                   03D4  mov	ax,#$3D4
16565                       00003DF7            .6B:
16566                                           ! Debug: eq int = ax+0 to unsigned short crtc_addr = [S+$18-$18] (used reg = )
16567 3DF7           8946         EA            mov	-$16[bp],ax
16568                                           !BCC_EOS
16569                                           ! 1823  outw(crtc_addr,0x0011);
16570                                           ! Debug: list int = const $11 (used reg = )
16571 3DFA           B8                   0011  mov	ax,*$11
16572 3DFD           50                         push	ax
16573                                           ! Debug: list unsigned short crtc_addr = [S+$1A-$18] (used reg = )
16574 3DFE           FF76         EA            push	-$16[bp]
16575                                           ! Debug: func () void = outw+0 (used reg = )
16576 3E01           E8         3D18            call	_outw
16577 3E04           83C4                   04  add	sp,*4
16578                                           !BCC_EOS
16579                                           ! 1824  for(i=0;i<=0x18;i++)
16580                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
16581 3E07           31C0                       xor	ax,ax
16582 3E09           8946         F6            mov	-$A[bp],ax
16583                                           !BCC_EOS
16584                                           !BCC_EOS
16585                                           ! 1825   {outb(crtc_addr,i);
16586 3E0C           EB           38            jmp .6E
16587                       00003E0E            .6F:
16588                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
16589 3E0E           FF76         F6            push	-$A[bp]
16590                                           ! Debug: list unsigned short crtc_addr = [S+$1A-$18] (used reg = )
16591 3E11           FF76         EA            push	-$16[bp]
16592                                           ! Debug: func () void = outb+0 (used reg = )
16593 3E14           E8         3CF5            call	_outb
16594 3E17           83C4                   04  add	sp,*4
16595                                           !BCC_EOS
16596                                           ! 1826    outb(crtc_addr+1,video_param_table[vpti].crtc_regs[i]);
16597                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16598 3E1A           8A46         F9            mov	al,-7[bp]
16599 3E1D           30E4                       xor	ah,ah
16600 3E1F           B1                     06  mov	cl,*6
16601 3E21           D3E0                       shl	ax,cl
16602 3E23           89C3                       mov	bx,ax
16603 3E25           81C3                 026E  add	bx,#_video_param_table
16604                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [$19] unsigned char = bx+$A (used reg = )
16605 3E29           8B46         F6            mov	ax,-$A[bp]
16606 3E2C           01C3                       add	bx,ax
16607                                           ! Debug: list unsigned char = [bx+$A] (used reg = )
16608 3E2E           8A47         0A            mov	al,$A[bx]
16609 3E31           30E4                       xor	ah,ah
16610 3E33           50                         push	ax
16611                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$1A-$18] (used reg = )
16612 3E34           8B46         EA            mov	ax,-$16[bp]
16613                                           ! Debug: list unsigned int = ax+1 (used reg = )
16614 3E37           40                         inc	ax
16615 3E38           50                         push	ax
16616                                           ! Debug: func () void = outb+0 (used reg = )
16617 3E39           E8         3CD0            call	_outb
16618 3E3C           83C4                   04  add	sp,*4
16619                                           !BCC_EOS
16620                                           ! 1827   }
16621                                           ! 1828  outb(0x3c2,video_param_table[vpti].miscreg);
16622                       00003E3F            .6D:
16623                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16624 3E3F           8B46         F6            mov	ax,-$A[bp]
16625 3E42           40                         inc	ax
16626 3E43           8946         F6            mov	-$A[bp],ax
16627                       00003E46            .6E:
16628                                           ! Debug: le int = const $18 to unsigned short i = [S+$18-$C] (used reg = )
16629 3E46           8B46         F6            mov	ax,-$A[bp]
16630 3E49           3D                   0018  cmp	ax,*$18
16631 3E4C           76           C0            jbe	.6F
16632                       00003E4E            .70:
16633                       00003E4E            .6C:
16634                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16635 3E4E           8A46         F9            mov	al,-7[bp]
16636 3E51           30E4                       xor	ah,ah
16637 3E53           B1                     06  mov	cl,*6
16638 3E55           D3E0                       shl	ax,cl
16639 3E57           89C3                       mov	bx,ax
16640 3E59           81C3                 026E  add	bx,#_video_param_table
16641                                           ! Debug: list unsigned char = [bx+9] (used reg = )
16642 3E5D           8A47         09            mov	al,9[bx]
16643 3E60           30E4                       xor	ah,ah
16644 3E62           50                         push	ax
16645                                           ! Debug: list int = const $3C2 (used reg = )
16646 3E63           B8                   03C2  mov	ax,#$3C2
16647 3E66           50                         push	ax
16648                                           ! Debug: func () void = outb+0 (used reg = )
16649 3E67           E8         3CA2            call	_outb
16650 3E6A           83C4                   04  add	sp,*4
16651                                           !BCC_EOS
16652                                           ! 1829  outb(0x3c0,0x20);
16653                                           ! Debug: list int = const $20 (used reg = )
16654 3E6D           B8                   0020  mov	ax,*$20
16655 3E70           50                         push	ax
16656                                           ! Debug: list int = const $3C0 (used reg = )
16657 3E71           B8                   03C0  mov	ax,#$3C0
16658 3E74           50                         push	ax
16659                                           ! Debug: func () void = outb+0 (used reg = )
16660 3E75           E8         3C94            call	_outb
16661 3E78           83C4                   04  add	sp,*4
16662                                           !BCC_EOS
16663                                           ! 1830  inb(0x3da);
16664                                           ! Debug: list int = const $3DA (used reg = )
16665 3E7B           B8                   03DA  mov	ax,#$3DA
16666 3E7E           50                         push	ax
16667                                           ! Debug: func () unsigned char = inb+0 (used reg = )
16668 3E7F           E8         3C74            call	_inb
16669 3E82           44                         inc	sp
16670 3E83           44                         inc	sp
16671                                           !BCC_EOS
16672                                           ! 1831  if(noclearmem==0x00)
16673                                           ! Debug: logeq int = const 0 to unsigned char noclearmem = [S+$18-3] (used reg = )
16674 3E84           8A46         FF            mov	al,-1[bp]
16675 3E87           84C0                       test	al,al
16676 3E89         0F85         00C1            bne 	.71
16677                       00003E8D            .72:
16678                                           ! 1832   {
16679                                           ! 1833    if(vga_modes[line].class==0x00)
16680                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16681 3E8D           8A46         FE            mov	al,-2[bp]
16682 3E90           30E4                       xor	ah,ah
16683 3E92           B1                     03  mov	cl,*3
16684 3E94           D3E0                       shl	ax,cl
16685 3E96           89C3                       mov	bx,ax
16686 3E98           81C3                 01DA  add	bx,#_vga_modes
16687                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
16688 3E9C           8A47         01            mov	al,1[bx]
16689 3E9F           84C0                       test	al,al
16690 3EA1           75           26            jne 	.73
16691                       00003EA3            .74:
16692                                           ! 1834     {
16693                                           ! 1835      memsetw(vga_modes[line].sstart,0,0x0720,0x4000);
16694                                           ! Debug: list int = const $4000 (used reg = )
16695 3EA3           B8                   4000  mov	ax,#$4000
16696 3EA6           50                         push	ax
16697                                           ! Debug: list int = const $720 (used reg = )
16698 3EA7           B8                   0720  mov	ax,#$720
16699 3EAA           50                         push	ax
16700                                           ! Debug: list int = const 0 (used reg = )
16701 3EAB           31C0                       xor	ax,ax
16702 3EAD           50                         push	ax
16703                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$10] struct  = vga_modes+0 (used reg = )
16704 3EAE           8A46         FE            mov	al,-2[bp]
16705 3EB1           30E4                       xor	ah,ah
16706 3EB3           B1                     03  mov	cl,*3
16707 3EB5           D3E0                       shl	ax,cl
16708 3EB7           89C3                       mov	bx,ax
16709 3EB9           81C3                 01DA  add	bx,#_vga_modes
16710                                           ! Debug: list unsigned short = [bx+4] (used reg = )
16711 3EBD           FF77         04            push	4[bx]
16712                                           ! Debug: func () void = memsetw+0 (used reg = )
16713 3EC0           E8         3B58            call	_memsetw
16714 3EC3           83C4                   08  add	sp,*8
16715                                           !BCC_EOS
16716                                           ! 1836     }
16717                                           ! 1837    else
16718                                           ! 1838     {
16719 3EC6           E9         0085            br 	.75
16720                       00003EC9            .73:
16721                                           ! 1839      if(mode<0x0d)
16722                                           ! Debug: lt int = const $D to unsigned char mode = [S+$18+2] (used reg = )
16723 3EC9           8A46         04            mov	al,4[bp]
16724 3ECC           3C                     0D  cmp	al,*$D
16725 3ECE           73           24            jae 	.76
16726                       00003ED0            .77:
16727                                           ! 1840       {
16728                                           ! 1841        memsetw(vga_modes[line].sstart,0,0x0000,0x4000);
16729                                           ! Debug: list int = const $4000 (used reg = )
16730 3ED0           B8                   4000  mov	ax,#$4000
16731 3ED3           50                         push	ax
16732                                           ! Debug: list int = const 0 (used reg = )
16733 3ED4           31C0                       xor	ax,ax
16734 3ED6           50                         push	ax
16735                                           ! Debug: list int = const 0 (used reg = )
16736 3ED7           31C0                       xor	ax,ax
16737 3ED9           50                         push	ax
16738                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$10] struct  = vga_modes+0 (used reg = )
16739 3EDA           8A46         FE            mov	al,-2[bp]
16740 3EDD           30E4                       xor	ah,ah
16741 3EDF           B1                     03  mov	cl,*3
16742 3EE1           D3E0                       shl	ax,cl
16743 3EE3           89C3                       mov	bx,ax
16744 3EE5           81C3                 01DA  add	bx,#_vga_modes
16745                                           ! Debug: list unsigned short = [bx+4] (used reg = )
16746 3EE9           FF77         04            push	4[bx]
16747                                           ! Debug: func () void = memsetw+0 (used reg = )
16748 3EEC           E8         3B2C            call	_memsetw
16749 3EEF           83C4                   08  add	sp,*8
16750                                           !BCC_EOS
16751                                           ! 1842       }
16752                                           ! 1843      else
16753                                           ! 1844       {
16754 3EF2           EB           5A            jmp .78
16755                       00003EF4            .76:
16756                                           ! 1845        outb( 0x3c4, 0x02 );
16757                                           ! Debug: list int = const 2 (used reg = )
16758 3EF4           B8                   0002  mov	ax,*2
16759 3EF7           50                         push	ax
16760                                           ! Debug: list int = const $3C4 (used reg = )
16761 3EF8           B8                   03C4  mov	ax,#$3C4
16762 3EFB           50                         push	ax
16763                                           ! Debug: func () void = outb+0 (used reg = )
16764 3EFC           E8         3C0D            call	_outb
16765 3EFF           83C4                   04  add	sp,*4
16766                                           !BCC_EOS
16767                                           ! 1846        mmask = inb( 0x3c5 );
16768                                           ! Debug: list int = const $3C5 (used reg = )
16769 3F02           B8                   03C5  mov	ax,#$3C5
16770 3F05           50                         push	ax
16771                                           ! Debug: func () unsigned char = inb+0 (used reg = )
16772 3F06           E8         3BED            call	_inb
16773 3F09           44                         inc	sp
16774 3F0A           44                         inc	sp
16775                                           ! Debug: eq unsigned char = al+0 to unsigned char mmask = [S+$18-5] (used reg = )
16776 3F0B           8846         FD            mov	-3[bp],al
16777                                           !BCC_EOS
16778                                           ! 1847        outb( 0x3c5, 0x0f );
16779                                           ! Debug: list int = const $F (used reg = )
16780 3F0E           B8                   000F  mov	ax,*$F
16781 3F11           50                         push	ax
16782                                           ! Debug: list int = const $3C5 (used reg = )
16783 3F12           B8                   03C5  mov	ax,#$3C5
16784 3F15           50                         push	ax
16785                                           ! Debug: func () void = outb+0 (used reg = )
16786 3F16           E8         3BF3            call	_outb
16787 3F19           83C4                   04  add	sp,*4
16788                                           !BCC_EOS
16789                                           ! 1848        memsetw(vga_modes[line].sstart,0,0x0000,0x8000);
16790                                           ! Debug: list unsigned int = const $8000 (used reg = )
16791 3F1C           B8                   8000  mov	ax,#$8000
16792 3F1F           50                         push	ax
16793                                           ! Debug: list int = const 0 (used reg = )
16794 3F20           31C0                       xor	ax,ax
16795 3F22           50                         push	ax
16796                                           ! Debug: list int = const 0 (used reg = )
16797 3F23           31C0                       xor	ax,ax
16798 3F25           50                         push	ax
16799                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$10] struct  = vga_modes+0 (used reg = )
16800 3F26           8A46         FE            mov	al,-2[bp]
16801 3F29           30E4                       xor	ah,ah
16802 3F2B           B1                     03  mov	cl,*3
16803 3F2D           D3E0                       shl	ax,cl
16804 3F2F           89C3                       mov	bx,ax
16805 3F31           81C3                 01DA  add	bx,#_vga_modes
16806                                           ! Debug: list unsigned short = [bx+4] (used reg = )
16807 3F35           FF77         04            push	4[bx]
16808                                           ! Debug: func () void = memsetw+0 (used reg = )
16809 3F38           E8         3AE0            call	_memsetw
16810 3F3B           83C4                   08  add	sp,*8
16811                                           !BCC_EOS
16812                                           ! 1849        outb( 0x3c5, mmask );
16813                                           ! Debug: list unsigned char mmask = [S+$18-5] (used reg = )
16814 3F3E           8A46         FD            mov	al,-3[bp]
16815 3F41           30E4                       xor	ah,ah
16816 3F43           50                         push	ax
16817                                           ! Debug: list int = const $3C5 (used reg = )
16818 3F44           B8                   03C5  mov	ax,#$3C5
16819 3F47           50                         push	ax
16820                                           ! Debug: func () void = outb+0 (used reg = )
16821 3F48           E8         3BC1            call	_outb
16822 3F4B           83C4                   04  add	sp,*4
16823                                           !BCC_EOS
16824                                           ! 1850       }
16825                                           ! 1851     }
16826                       00003F4E            .78:
16827                                           ! 1852   }
16828                       00003F4E            .75:
16829                                           ! 1853  write_byte(0x40,0x49,mode);
16830                       00003F4E            .71:
16831                                           ! Debug: list unsigned char mode = [S+$18+2] (used reg = )
16832 3F4E           8A46         04            mov	al,4[bp]
16833 3F51           30E4                       xor	ah,ah
16834 3F53           50                         push	ax
16835                                           ! Debug: list int = const $49 (used reg = )
16836 3F54           B8                   0049  mov	ax,*$49
16837 3F57           50                         push	ax
16838                                           ! Debug: list int = const $40 (used reg = )
16839 3F58           B8                   0040  mov	ax,*$40
16840 3F5B           50                         push	ax
16841                                           ! Debug: func () void = write_byte+0 (used reg = )
16842 3F5C           E8         3B67            call	_write_byte
16843 3F5F           83C4                   06  add	sp,*6
16844                                           !BCC_EOS
16845                                           ! 1854  write_word(0x40,0x4A,twidth);
16846                                           ! Debug: list unsigned short twidth = [S+$18-$E] (used reg = )
16847 3F62           FF76         F4            push	-$C[bp]
16848                                           ! Debug: list int = const $4A (used reg = )
16849 3F65           B8                   004A  mov	ax,*$4A
16850 3F68           50                         push	ax
16851                                           ! Debug: list int = const $40 (used reg = )
16852 3F69           B8                   0040  mov	ax,*$40
16853 3F6C           50                         push	ax
16854                                           ! Debug: func () void = write_word+0 (used reg = )
16855 3F6D           E8         3B6E            call	_write_word
16856 3F70           83C4                   06  add	sp,*6
16857                                           !BCC_EOS
16858                                           ! 1855  write_word(0x40,0x4C,*(Bit16u *)&video_param_table[vpti].slength_l);
16859                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16860 3F73           8A46         F9            mov	al,-7[bp]
16861 3F76           30E4                       xor	ah,ah
16862 3F78           B1                     06  mov	cl,*6
16863 3F7A           D3E0                       shl	ax,cl
16864 3F7C           89C3                       mov	bx,ax
16865 3F7E           81C3                 026E  add	bx,#_video_param_table
16866                                           ! Debug: address unsigned char = [bx+3] (used reg = )
16867                                           ! Debug: cast * unsigned short = const 0 to * unsigned char = bx+3 (used reg = )
16868                                           ! Debug: list unsigned short = [bx+3] (used reg = )
16869 3F82           FF77         03            push	3[bx]
16870                                           ! Debug: list int = const $4C (used reg = )
16871 3F85           B8                   004C  mov	ax,*$4C
16872 3F88           50                         push	ax
16873                                           ! Debug: list int = const $40 (used reg = )
16874 3F89           B8                   0040  mov	ax,*$40
16875 3F8C           50                         push	ax
16876                                           ! Debug: func () void = write_word+0 (used reg = )
16877 3F8D           E8         3B4E            call	_write_word
16878 3F90           83C4                   06  add	sp,*6
16879                                           !BCC_EOS
16880                                           ! 1856  write_word(0x40,0x63,crtc_addr);
16881                                           ! Debug: list unsigned short crtc_addr = [S+$18-$18] (used reg = )
16882 3F93           FF76         EA            push	-$16[bp]
16883                                           ! Debug: list int = const $63 (used reg = )
16884 3F96           B8                   0063  mov	ax,*$63
16885 3F99           50                         push	ax
16886                                           ! Debug: list int = const $40 (used reg = )
16887 3F9A           B8                   0040  mov	ax,*$40
16888 3F9D           50                         push	ax
16889                                           ! Debug: func () void = write_word+0 (used reg = )
16890 3F9E           E8         3B3D            call	_write_word
16891 3FA1           83C4                   06  add	sp,*6
16892                                           !BCC_EOS
16893                                           ! 1857  write_byte(0x40,0x84,theightm1);
16894                                           ! Debug: list unsigned short theightm1 = [S+$18-$10] (used reg = )
16895 3FA4           FF76         F2            push	-$E[bp]
16896                                           ! Debug: list int = const $84 (used reg = )
16897 3FA7           B8                   0084  mov	ax,#$84
16898 3FAA           50                         push	ax
16899                                           ! Debug: list int = const $40 (used reg = )
16900 3FAB           B8                   0040  mov	ax,*$40
16901 3FAE           50                         push	ax
16902                                           ! Debug: func () void = write_byte+0 (used reg = )
16903 3FAF           E8         3B14            call	_write_byte
16904 3FB2           83C4                   06  add	sp,*6
16905                                           !BCC_EOS
16906                                           ! 1858  write_word(0x40,0x85,cheight);
16907                                           ! Debug: list unsigned short cheight = [S+$18-$12] (used reg = )
16908 3FB5           FF76         F0            push	-$10[bp]
16909                                           ! Debug: list int = const $85 (used reg = )
16910 3FB8           B8                   0085  mov	ax,#$85
16911 3FBB           50                         push	ax
16912                                           ! Debug: list int = const $40 (used reg = )
16913 3FBC           B8                   0040  mov	ax,*$40
16914 3FBF           50                         push	ax
16915                                           ! Debug: func () void = write_word+0 (used reg = )
16916 3FC0           E8         3B1B            call	_write_word
16917 3FC3           83C4                   06  add	sp,*6
16918                                           !BCC_EOS
16919                                           ! 1859  write_byte(0x40,0x87,(0x60|noclearmem));
16920                                           ! Debug: or unsigned char noclearmem = [S+$18-3] to int = const $60 (used reg = )
16921                                           ! Debug: expression subtree swapping
16922 3FC6           8A46         FF            mov	al,-1[bp]
16923 3FC9           0C                     60  or	al,*$60
16924                                           ! Debug: list unsigned char = al+0 (used reg = )
16925 3FCB           30E4                       xor	ah,ah
16926 3FCD           50                         push	ax
16927                                           ! Debug: list int = const $87 (used reg = )
16928 3FCE           B8                   0087  mov	ax,#$87
16929 3FD1           50                         push	ax
16930                                           ! Debug: list int = const $40 (used reg = )
16931 3FD2           B8                   0040  mov	ax,*$40
16932 3FD5           50                         push	ax
16933                                           ! Debug: func () void = write_byte+0 (used reg = )
16934 3FD6           E8         3AED            call	_write_byte
16935 3FD9           83C4                   06  add	sp,*6
16936                                           !BCC_EOS
16937                                           ! 1860  write_byte(0x40,0x88,0xF9);
16938                                           ! Debug: list int = const $F9 (used reg = )
16939 3FDC           B8                   00F9  mov	ax,#$F9
16940 3FDF           50                         push	ax
16941                                           ! Debug: list int = const $88 (used reg = )
16942 3FE0           B8                   0088  mov	ax,#$88
16943 3FE3           50                         push	ax
16944                                           ! Debug: list int = const $40 (used reg = )
16945 3FE4           B8                   0040  mov	ax,*$40
16946 3FE7           50                         push	ax
16947                                           ! Debug: func () void = write_byte+0 (used reg = )
16948 3FE8           E8         3ADB            call	_write_byte
16949 3FEB           83C4                   06  add	sp,*6
16950                                           !BCC_EOS
16951                                           ! 1861  write_byte(0x40,0x89,read_byte(0x40,0x89)&0x7f);
16952                                           ! Debug: list int = const $89 (used reg = )
16953 3FEE           B8                   0089  mov	ax,#$89
16954 3FF1           50                         push	ax
16955                                           ! Debug: list int = const $40 (used reg = )
16956 3FF2           B8                   0040  mov	ax,*$40
16957 3FF5           50                         push	ax
16958                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16959 3FF6           E8         3AA7            call	_read_byte
16960 3FF9           83C4                   04  add	sp,*4
16961                                           ! Debug: and int = const $7F to unsigned char = al+0 (used reg = )
16962 3FFC           24                     7F  and	al,*$7F
16963                                           ! Debug: list unsigned char = al+0 (used reg = )
16964 3FFE           30E4                       xor	ah,ah
16965 4000           50                         push	ax
16966                                           ! Debug: list int = const $89 (used reg = )
16967 4001           B8                   0089  mov	ax,#$89
16968 4004           50                         push	ax
16969                                           ! Debug: list int = const $40 (used reg = )
16970 4005           B8                   0040  mov	ax,*$40
16971 4008           50                         push	ax
16972                                           ! Debug: func () void = write_byte+0 (used reg = )
16973 4009           E8         3ABA            call	_write_byte
16974 400C           83C4                   06  add	sp,*6
16975                                           !BCC_EOS
16976                                           ! 1862  write_byte(0x40,0x8A,0x08);
16977                                           ! Debug: list int = const 8 (used reg = )
16978 400F           B8                   0008  mov	ax,*8
16979 4012           50                         push	ax
16980                                           ! Debug: list int = const $8A (used reg = )
16981 4013           B8                   008A  mov	ax,#$8A
16982 4016           50                         push	ax
16983                                           ! Debug: list int = const $40 (used reg = )
16984 4017           B8                   0040  mov	ax,*$40
16985 401A           50                         push	ax
16986                                           ! Debug: func () void = write_byte+0 (used reg = )
16987 401B           E8         3AA8            call	_write_byte
16988 401E           83C4                   06  add	sp,*6
16989                                           !BCC_EOS
16990                                           ! 1863  write_word(0x40,0xA8, video_save_pointer_table);
16991                                           ! Debug: list * unsigned char = video_save_pointer_table+0 (used reg = )
16992 4021           BB                   35D7  mov	bx,#_video_save_pointer_table
16993 4024           53                         push	bx
16994                                           ! Debug: list int = const $A8 (used reg = )
16995 4025           B8                   00A8  mov	ax,#$A8
16996 4028           50                         push	ax
16997                                           ! Debug: list int = const $40 (used reg = )
16998 4029           B8                   0040  mov	ax,*$40
16999 402C           50                         push	ax
17000                                           ! Debug: func () void = write_word+0 (used reg = )
17001 402D           E8         3AAE            call	_write_word
17002 4030           83C4                   06  add	sp,*6
17003                                           !BCC_EOS
17004                                           ! 1864  write_word(0x40,0xA8 +2, 0xc000);
17005                                           ! Debug: list unsigned int = const $C000 (used reg = )
17006 4033           B8                   C000  mov	ax,#$C000
17007 4036           50                         push	ax
17008                                           ! Debug: list int = const $AA (used reg = )
17009 4037           B8                   00AA  mov	ax,#$AA
17010 403A           50                         push	ax
17011                                           ! Debug: list int = const $40 (used reg = )
17012 403B           B8                   0040  mov	ax,*$40
17013 403E           50                         push	ax
17014                                           ! Debug: func () void = write_word+0 (used reg = )
17015 403F           E8         3A9C            call	_write_word
17016 4042           83C4                   06  add	sp,*6
17017                                           !BCC_EOS
17018                                           ! 1865  write_byte(0x40,0x65,0x00);
17019                                           ! Debug: list int = const 0 (used reg = )
17020 4045           31C0                       xor	ax,ax
17021 4047           50                         push	ax
17022                                           ! Debug: list int = const $65 (used reg = )
17023 4048           B8                   0065  mov	ax,*$65
17024 404B           50                         push	ax
17025                                           ! Debug: list int = const $40 (used reg = )
17026 404C           B8                   0040  mov	ax,*$40
17027 404F           50                         push	ax
17028                                           ! Debug: func () void = write_byte+0 (used reg = )
17029 4050           E8         3A73            call	_write_byte
17030 4053           83C4                   06  add	sp,*6
17031                                           !BCC_EOS
17032                                           ! 1866  write_byte(0x40,0x66,0x00);
17033                                           ! Debug: list int = const 0 (used reg = )
17034 4056           31C0                       xor	ax,ax
17035 4058           50                         push	ax
17036                                           ! Debug: list int = const $66 (used reg = )
17037 4059           B8                   0066  mov	ax,*$66
17038 405C           50                         push	ax
17039                                           ! Debug: list int = const $40 (used reg = )
17040 405D           B8                   0040  mov	ax,*$40
17041 4060           50                         push	ax
17042                                           ! Debug: func () void = write_byte+0 (used reg = )
17043 4061           E8         3A62            call	_write_byte
17044 4064           83C4                   06  add	sp,*6
17045                                           !BCC_EOS
17046                                           ! 1867  if(vga_modes[line].class==0x00)
17047                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
17048 4067           8A46         FE            mov	al,-2[bp]
17049 406A           30E4                       xor	ah,ah
17050 406C           B1                     03  mov	cl,*3
17051 406E           D3E0                       shl	ax,cl
17052 4070           89C3                       mov	bx,ax
17053 4072           81C3                 01DA  add	bx,#_vga_modes
17054                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
17055 4076           8A47         01            mov	al,1[bx]
17056 4079           84C0                       test	al,al
17057 407B           75           0E            jne 	.79
17058                       0000407D            .7A:
17059                                           ! 1868   {
17060                                           ! 1869    biosfn_set_cursor_shape(0x06,0x07);
17061                                           ! Debug: list int = const 7 (used reg = )
17062 407D           B8                   0007  mov	ax,*7
17063 4080           50                         push	ax
17064                                           ! Debug: list int = const 6 (used reg = )
17065 4081           B8                   0006  mov	ax,*6
17066 4084           50                         push	ax
17067                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
17068 4085           E8         00BA            call	_biosfn_set_cursor_shape
17069 4088           83C4                   04  add	sp,*4
17070                                           !BCC_EOS
17071                                           ! 1870   }
17072                                           ! 1871  for(i=0;i<8;i++)
17073                       0000408B            .79:
17074                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
17075 408B           31C0                       xor	ax,ax
17076 408D           8946         F6            mov	-$A[bp],ax
17077                                           !BCC_EOS
17078                                           !BCC_EOS
17079                                           ! 1872   biosfn_set_cursor_pos(i,0x0000);
17080 4090           EB           13            jmp .7D
17081                       00004092            .7E:
17082                                           ! Debug: list int = const 0 (used reg = )
17083 4092           31C0                       xor	ax,ax
17084 4094           50                         push	ax
17085                                           ! Debug: list unsigned short i = [S+$1A-$C] (used reg = )
17086 4095           FF76         F6            push	-$A[bp]
17087                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
17088 4098           E8         01C2            call	_biosfn_set_cursor_pos
17089 409B           83C4                   04  add	sp,*4
17090                                           !BCC_EOS
17091                                           ! 1873  biosfn_set_active_page(0x00);
17092                       0000409E            .7C:
17093                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
17094 409E           8B46         F6            mov	ax,-$A[bp]
17095 40A1           40                         inc	ax
17096 40A2           8946         F6            mov	-$A[bp],ax
17097                       000040A5            .7D:
17098                                           ! Debug: lt int = const 8 to unsigned short i = [S+$18-$C] (used reg = )
17099 40A5           8B46         F6            mov	ax,-$A[bp]
17100 40A8           3D                   0008  cmp	ax,*8
17101 40AB           72           E5            jb 	.7E
17102                       000040AD            .7F:
17103                       000040AD            .7B:
17104                                           ! Debug: list int = const 0 (used reg = )
17105 40AD           31C0                       xor	ax,ax
17106 40AF           50                         push	ax
17107                                           ! Debug: func () void = biosfn_set_active_page+0 (used reg = )
17108 40B0           E8         031F            call	_biosfn_set_active_page
17109 40B3           44                         inc	sp
17110 40B4           44                         inc	sp
17111                                           !BCC_EOS
17112                                           ! 1874  if(vga_modes[line].class==0x00)
17113                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
17114 40B5           8A46         FE            mov	al,-2[bp]
17115 40B8           30E4                       xor	ah,ah
17116 40BA           B1                     03  mov	cl,*3
17117 40BC           D3E0                       shl	ax,cl
17118 40BE           89C3                       mov	bx,ax
17119 40C0           81C3                 01DA  add	bx,#_vga_modes
17120                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
17121 40C4           8A47         01            mov	al,1[bx]
17122 40C7           84C0                       test	al,al
17123 40C9           75           0E            jne 	.80
17124                       000040CB            .81:
17125                                           ! 1875   {
17126                                           ! 1876 #asm
17127                                           !BCC_EOS
17128                                           !BCC_ASM
17129                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17130                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17131                       00000008            _biosfn_set_video_mode.theightm1	set	8
17132                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17133                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17134                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17135                       00000014            _biosfn_set_video_mode.line	set	$14
17136                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17137                       00000006            _biosfn_set_video_mode.cheight	set	6
17138                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17139                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17140                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17141                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17142                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17143                       0000000C            _biosfn_set_video_mode.i	set	$C
17144                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17145                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17146                       00000004            .biosfn_set_video_mode.mode	set	4
17147                       00000010            _biosfn_set_video_mode.palette	set	$10
17148                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17149                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17150                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17151                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17152                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17153                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17154                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17155                       00000013            _biosfn_set_video_mode.mmask	set	$13
17156                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17157                                             ;; copy and activate 8x16 font
17158 40CB           B8                   1104    mov ax, #0x1104
17159 40CE           B3                     00    mov bl, #0x00
17160 40D0           CD                     10    int #0x10
17161 40D2           B8                   1103    mov ax, #0x1103
17162 40D5           B3                     00    mov bl, #0x00
17163 40D7           CD                     10    int #0x10
17164                                           ! 1884 endasm
17165                                           !BCC_ENDASM
17166                                           !BCC_EOS
17167                                           ! 1885   }
17168                                           ! 1886 #asm
17169                       000040D9            .80:
17170                                           !BCC_EOS
17171                                           !BCC_ASM
17172                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17173                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17174                       00000008            _biosfn_set_video_mode.theightm1	set	8
17175                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17176                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17177                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17178                       00000014            _biosfn_set_video_mode.line	set	$14
17179                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17180                       00000006            _biosfn_set_video_mode.cheight	set	6
17181                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17182                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17183                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17184                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17185                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17186                       0000000C            _biosfn_set_video_mode.i	set	$C
17187                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17188                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17189                       00000004            .biosfn_set_video_mode.mode	set	4
17190                       00000010            _biosfn_set_video_mode.palette	set	$10
17191                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17192                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17193                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17194                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17195                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17196                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17197                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17198                       00000013            _biosfn_set_video_mode.mmask	set	$13
17199                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17200                                            SET_INT_VECTOR(0x1f, #0xC000, #_vgafont8+128*8)
 +a   40D9           1E                           push ds
 +a   40DA           31C0                         xor ax, ax
 +a   40DC           8ED8                         mov ds, ax
 +a   40DE           B8                   133E    mov ax,  #_vgafont8+128*8
 +a   40E1           A3         007C              mov 0x1f*4, ax
 +a   40E4           B8                   C000    mov ax,  #0xC000
 +a   40E7           A3         007E              mov 0x1f*4+2, ax
 +a   40EA           1F                           pop ds
17201                                           ! 1888 endasm
17202                                           !BCC_ENDASM
17203                                           !BCC_EOS
17204                                           ! 1889   switch(cheight)
17205 40EB           8B46         F0            mov	ax,-$10[bp]
17206                                           ! 1890    {case 8:
17207 40EE           E9         003E            br 	.84
17208                                           ! 1891 #asm
17209                       000040F1            .85:
17210                                           !BCC_EOS
17211                                           !BCC_ASM
17212                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17213                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17214                       00000008            _biosfn_set_video_mode.theightm1	set	8
17215                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17216                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17217                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17218                       00000014            _biosfn_set_video_mode.line	set	$14
17219                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17220                       00000006            _biosfn_set_video_mode.cheight	set	6
17221                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17222                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17223                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17224                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17225                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17226                       0000000C            _biosfn_set_video_mode.i	set	$C
17227                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17228                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17229                       00000004            .biosfn_set_video_mode.mode	set	4
17230                       00000010            _biosfn_set_video_mode.palette	set	$10
17231                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17232                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17233                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17234                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17235                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17236                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17237                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17238                       00000013            _biosfn_set_video_mode.mmask	set	$13
17239                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17240                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont8)
 +a   40F1           1E                           push ds
 +a   40F2           31C0                         xor ax, ax
 +a   40F4           8ED8                         mov ds, ax
 +a   40F6           B8                   0F3E    mov ax,  #_vgafont8
 +a   40F9           A3         010C              mov 0x43*4, ax
 +a   40FC           B8                   C000    mov ax,  #0xC000
 +a   40FF           A3         010E              mov 0x43*4+2, ax
 +a   4102           1F                           pop ds
17241                                           ! 1893 endasm
17242                                           !BCC_ENDASM
17243                                           !BCC_EOS
17244                                           ! 1894      break;
17245 4103           EB           39            jmp .82
17246                                           !BCC_EOS
17247                                           ! 1895     case 14:
17248                                           ! 1896 #asm
17249                       00004105            .86:
17250                                           !BCC_EOS
17251                                           !BCC_ASM
17252                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17253                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17254                       00000008            _biosfn_set_video_mode.theightm1	set	8
17255                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17256                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17257                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17258                       00000014            _biosfn_set_video_mode.line	set	$14
17259                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17260                       00000006            _biosfn_set_video_mode.cheight	set	6
17261                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17262                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17263                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17264                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17265                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17266                       0000000C            _biosfn_set_video_mode.i	set	$C
17267                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17268                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17269                       00000004            .biosfn_set_video_mode.mode	set	4
17270                       00000010            _biosfn_set_video_mode.palette	set	$10
17271                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17272                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17273                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17274                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17275                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17276                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17277                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17278                       00000013            _biosfn_set_video_mode.mmask	set	$13
17279                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17280                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont14)
 +a   4105           1E                           push ds
 +a   4106           31C0                         xor ax, ax
 +a   4108           8ED8                         mov ds, ax
 +a   410A           B8                   173E    mov ax,  #_vgafont14
 +a   410D           A3         010C              mov 0x43*4, ax
 +a   4110           B8                   C000    mov ax,  #0xC000
 +a   4113           A3         010E              mov 0x43*4+2, ax
 +a   4116           1F                           pop ds
17281                                           ! 1898 endasm
17282                                           !BCC_ENDASM
17283                                           !BCC_EOS
17284                                           ! 1899      break;
17285 4117           EB           25            jmp .82
17286                                           !BCC_EOS
17287                                           ! 1900     case 16:
17288                                           ! 1901 #asm
17289                       00004119            .87:
17290                                           !BCC_EOS
17291                                           !BCC_ASM
17292                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17293                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17294                       00000008            _biosfn_set_video_mode.theightm1	set	8
17295                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17296                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17297                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17298                       00000014            _biosfn_set_video_mode.line	set	$14
17299                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17300                       00000006            _biosfn_set_video_mode.cheight	set	6
17301                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17302                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17303                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17304                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17305                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17306                       0000000C            _biosfn_set_video_mode.i	set	$C
17307                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17308                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17309                       00000004            .biosfn_set_video_mode.mode	set	4
17310                       00000010            _biosfn_set_video_mode.palette	set	$10
17311                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17312                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17313                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17314                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17315                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17316                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17317                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17318                       00000013            _biosfn_set_video_mode.mmask	set	$13
17319                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17320                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont16)
 +a   4119           1E                           push ds
 +a   411A           31C0                         xor ax, ax
 +a   411C           8ED8                         mov ds, ax
 +a   411E           B8                   253E    mov ax,  #_vgafont16
 +a   4121           A3         010C              mov 0x43*4, ax
 +a   4124           B8                   C000    mov ax,  #0xC000
 +a   4127           A3         010E              mov 0x43*4+2, ax
 +a   412A           1F                           pop ds
17321                                           ! 1903 endasm
17322                                           !BCC_ENDASM
17323                                           !BCC_EOS
17324                                           ! 1904      break;
17325 412B           EB           11            jmp .82
17326                                           !BCC_EOS
17327                                           ! 1905    }
17328                                           ! 1906 }
17329 412D           EB           0F            jmp .82
17330                       0000412F            .84:
17331 412F           2D                   0008  sub	ax,*8
17332 4132           74           BD            je 	.85
17333 4134           2D                   0006  sub	ax,*6
17334 4137           74           CC            je 	.86
17335 4139           2D                   0002  sub	ax,*2
17336 413C           74           DB            je 	.87
17337                       0000413E            .82:
17338                       FFFFFFE8            ..FFFD	=	-$18
17339 413E           89EC                       mov	sp,bp
17340 4140           5D                         pop	bp
17341 4141           C3                         ret
17342                                           ! 1907 static void biosfn_set_cursor_shape (CH,CL)
17343                                           ! Register BX used in function biosfn_set_video_mode
17344                                           ! 1908 Bit8u CH;Bit8u CL;
17345                       00004142            _biosfn_set_cursor_shape:
17346                                           !BCC_EOS
17347                                           !BCC_EOS
17348                                           ! 1909 {Bit16u cheight,curs,crtc_addr;
17349                                           !BCC_EOS
17350                                           ! 1910  Bit8u modeset_ctl;
17351                                           !BCC_EOS
17352                                           ! 1911  CH&=0x3f;
17353 4142           55                         push	bp
17354 4143           89E5                       mov	bp,sp
17355 4145           83C4                   F8  add	sp,*-8
17356                                           ! Debug: andab int = const $3F to unsigned char CH = [S+$A+2] (used reg = )
17357 4148           8A46         04            mov	al,4[bp]
17358 414B           24                     3F  and	al,*$3F
17359 414D           8846         04            mov	4[bp],al
17360                                           !BCC_EOS
17361                                           ! 1912  CL&=0x1f;
17362                                           ! Debug: andab int = const $1F to unsigned char CL = [S+$A+4] (used reg = )
17363 4150           8A46         06            mov	al,6[bp]
17364 4153           24                     1F  and	al,*$1F
17365 4155           8846         06            mov	6[bp],al
17366                                           !BCC_EOS
17367                                           ! 1913  curs=(CH<<8)+CL;
17368                                           ! Debug: sl int = const 8 to unsigned char CH = [S+$A+2] (used reg = )
17369 4158           8A46         04            mov	al,4[bp]
17370 415B           30E4                       xor	ah,ah
17371 415D           88C4                       mov	ah,al
17372 415F           30C0                       xor	al,al
17373                                           ! Debug: add unsigned char CL = [S+$A+4] to unsigned int = ax+0 (used reg = )
17374 4161           0246         06            add	al,6[bp]
17375 4164           80D4                   00  adc	ah,*0
17376                                           ! Debug: eq unsigned int = ax+0 to unsigned short curs = [S+$A-6] (used reg = )
17377 4167           8946         FC            mov	-4[bp],ax
17378                                           !BCC_EOS
17379                                           ! 1914  write_word(0x40,0x60,curs);
17380                                           ! Debug: list unsigned short curs = [S+$A-6] (used reg = )
17381 416A           FF76         FC            push	-4[bp]
17382                                           ! Debug: list int = const $60 (used reg = )
17383 416D           B8                   0060  mov	ax,*$60
17384 4170           50                         push	ax
17385                                           ! Debug: list int = const $40 (used reg = )
17386 4171           B8                   0040  mov	ax,*$40
17387 4174           50                         push	ax
17388                                           ! Debug: func () void = write_word+0 (used reg = )
17389 4175           E8         3966            call	_write_word
17390 4178           83C4                   06  add	sp,*6
17391                                           !BCC_EOS
17392                                           ! 1915  modeset_ctl=read_byte(0x40,0x89);
17393                                           ! Debug: list int = const $89 (used reg = )
17394 417B           B8                   0089  mov	ax,#$89
17395 417E           50                         push	ax
17396                                           ! Debug: list int = const $40 (used reg = )
17397 417F           B8                   0040  mov	ax,*$40
17398 4182           50                         push	ax
17399                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
17400 4183           E8         391A            call	_read_byte
17401 4186           83C4                   04  add	sp,*4
17402                                           ! Debug: eq unsigned char = al+0 to unsigned char modeset_ctl = [S+$A-9] (used reg = )
17403 4189           8846         F9            mov	-7[bp],al
17404                                           !BCC_EOS
17405                                           ! 1916  cheight = read_word(0x40,0x85);
17406                                           ! Debug: list int = const $85 (used reg = )
17407 418C           B8                   0085  mov	ax,#$85
17408 418F           50                         push	ax
17409                                           ! Debug: list int = const $40 (used reg = )
17410 4190           B8                   0040  mov	ax,*$40
17411 4193           50                         push	ax
17412                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17413 4194           E8         391C            call	_read_word
17414 4197           83C4                   04  add	sp,*4
17415                                           ! Debug: eq unsigned short = ax+0 to unsigned short cheight = [S+$A-4] (used reg = )
17416 419A           8946         FE            mov	-2[bp],ax
17417                                           !BCC_EOS
17418                                           ! 1917  if((modeset_ctl&0x01) && (cheight>8) && (CL<8) && (CH<0x20))
17419                                           ! Debug: and int = const 1 to unsigned char modeset_ctl = [S+$A-9] (used reg = )
17420 419D           8A46         F9            mov	al,-7[bp]
17421 41A0           24                     01  and	al,*1
17422 41A2           84C0                       test	al,al
17423 41A4           74           66            je  	.88
17424                       000041A6            .8C:
17425                                           ! Debug: gt int = const 8 to unsigned short cheight = [S+$A-4] (used reg = )
17426 41A6           8B46         FE            mov	ax,-2[bp]
17427 41A9           3D                   0008  cmp	ax,*8
17428 41AC           76           5E            jbe 	.88
17429                       000041AE            .8B:
17430                                           ! Debug: lt int = const 8 to unsigned char CL = [S+$A+4] (used reg = )
17431 41AE           8A46         06            mov	al,6[bp]
17432 41B1           3C                     08  cmp	al,*8
17433 41B3           73           57            jae 	.88
17434                       000041B5            .8A:
17435                                           ! Debug: lt int = const $20 to unsigned char CH = [S+$A+2] (used reg = )
17436 41B5           8A46         04            mov	al,4[bp]
17437 41B8           3C                     20  cmp	al,*$20
17438 41BA           73           50            jae 	.88
17439                       000041BC            .89:
17440                                           ! 1918   {
17441                                           ! 1919    if(CL!=(CH+1))
17442                                           ! Debug: add int = const 1 to unsigned char CH = [S+$A+2] (used reg = )
17443 41BC           8A46         04            mov	al,4[bp]
17444 41BF           30E4                       xor	ah,ah
17445                                           ! Debug: ne unsigned int = ax+1 to unsigned char CL = [S+$A+4] (used reg = )
17446                                           ! Debug: expression subtree swapping
17447 41C1           40                         inc	ax
17448 41C2           50                         push	ax
17449 41C3           8A46         06            mov	al,6[bp]
17450 41C6           30E4                       xor	ah,ah
17451 41C8           3B46         F6            cmp	ax,-$A[bp]
17452 41CB           8D66         F8            lea	sp,-8[bp]
17453 41CE           74           15            je  	.8D
17454                       000041D0            .8E:
17455                                           ! 1920     {
17456                                           ! 1921      CH = ((CH+1) * cheight / 8) -1;
17457                                           ! Debug: add int = const 1 to unsigned char CH = [S+$A+2] (used reg = )
17458 41D0           8A46         04            mov	al,4[bp]
17459 41D3           30E4                       xor	ah,ah
17460                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
17461 41D5           40                         inc	ax
17462 41D6           8B4E         FE            mov	cx,-2[bp]
17463 41D9           F7E9                       imul	cx
17464                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
17465 41DB           B1                     03  mov	cl,*3
17466 41DD           D3E8                       shr	ax,cl
17467                                           ! Debug: sub int = const 1 to unsigned int = ax+0 (used reg = )
17468                                           ! Debug: eq unsigned int = ax-1 to unsigned char CH = [S+$A+2] (used reg = )
17469 41DF           48                         dec	ax
17470 41E0           8846         04            mov	4[bp],al
17471                                           !BCC_EOS
17472                                           ! 1922     }
17473                                           ! 1923    else
17474                                           ! 1924     {
17475 41E3           EB           14            jmp .8F
17476                       000041E5            .8D:
17477                                           ! 1925      CH = ((CL+1) * cheight / 8) - 2;
17478                                           ! Debug: add int = const 1 to unsigned char CL = [S+$A+4] (used reg = )
17479 41E5           8A46         06            mov	al,6[bp]
17480 41E8           30E4                       xor	ah,ah
17481                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
17482 41EA           40                         inc	ax
17483 41EB           8B4E         FE            mov	cx,-2[bp]
17484 41EE           F7E9                       imul	cx
17485                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
17486 41F0           B1                     03  mov	cl,*3
17487 41F2           D3E8                       shr	ax,cl
17488                                           ! Debug: sub int = const 2 to unsigned int = ax+0 (used reg = )
17489                                           ! Debug: eq unsigned int = ax-2 to unsigned char CH = [S+$A+2] (used reg = )
17490 41F4           48                         dec	ax
17491 41F5           48                         dec	ax
17492 41F6           8846         04            mov	4[bp],al
17493                                           !BCC_EOS
17494                                           ! 1926     }
17495                                           ! 1927    CL = ((CL+1) * cheight / 8) - 1;
17496                       000041F9            .8F:
17497                                           ! Debug: add int = const 1 to unsigned char CL = [S+$A+4] (used reg = )
17498 41F9           8A46         06            mov	al,6[bp]
17499 41FC           30E4                       xor	ah,ah
17500                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
17501 41FE           40                         inc	ax
17502 41FF           8B4E         FE            mov	cx,-2[bp]
17503 4202           F7E9                       imul	cx
17504                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
17505 4204           B1                     03  mov	cl,*3
17506 4206           D3E8                       shr	ax,cl
17507                                           ! Debug: sub int = const 1 to unsigned int = ax+0 (used reg = )
17508                                           ! Debug: eq unsigned int = ax-1 to unsigned char CL = [S+$A+4] (used reg = )
17509 4208           48                         dec	ax
17510 4209           8846         06            mov	6[bp],al
17511                                           !BCC_EOS
17512                                           ! 1928   }
17513                                           ! 1929  crtc_addr=read_word(0x40,0x63);
17514                       0000420C            .88:
17515                                           ! Debug: list int = const $63 (used reg = )
17516 420C           B8                   0063  mov	ax,*$63
17517 420F           50                         push	ax
17518                                           ! Debug: list int = const $40 (used reg = )
17519 4210           B8                   0040  mov	ax,*$40
17520 4213           50                         push	ax
17521                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17522 4214           E8         389C            call	_read_word
17523 4217           83C4                   04  add	sp,*4
17524                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$A-8] (used reg = )
17525 421A           8946         FA            mov	-6[bp],ax
17526                                           !BCC_EOS
17527                                           ! 1930  outb(crtc_addr,0x0a);
17528                                           ! Debug: list int = const $A (used reg = )
17529 421D           B8                   000A  mov	ax,*$A
17530 4220           50                         push	ax
17531                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
17532 4221           FF76         FA            push	-6[bp]
17533                                           ! Debug: func () void = outb+0 (used reg = )
17534 4224           E8         38E5            call	_outb
17535 4227           83C4                   04  add	sp,*4
17536                                           !BCC_EOS
17537                                           ! 1931  outb(crtc_addr+1,CH);
17538                                           ! Debug: list unsigned char CH = [S+$A+2] (used reg = )
17539 422A           8A46         04            mov	al,4[bp]
17540 422D           30E4                       xor	ah,ah
17541 422F           50                         push	ax
17542                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$C-8] (used reg = )
17543 4230           8B46         FA            mov	ax,-6[bp]
17544                                           ! Debug: list unsigned int = ax+1 (used reg = )
17545 4233           40                         inc	ax
17546 4234           50                         push	ax
17547                                           ! Debug: func () void = outb+0 (used reg = )
17548 4235           E8         38D4            call	_outb
17549 4238           83C4                   04  add	sp,*4
17550                                           !BCC_EOS
17551                                           ! 1932  outb(crtc_addr,0x0b);
17552                                           ! Debug: list int = const $B (used reg = )
17553 423B           B8                   000B  mov	ax,*$B
17554 423E           50                         push	ax
17555                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
17556 423F           FF76         FA            push	-6[bp]
17557                                           ! Debug: func () void = outb+0 (used reg = )
17558 4242           E8         38C7            call	_outb
17559 4245           83C4                   04  add	sp,*4
17560                                           !BCC_EOS
17561                                           ! 1933  outb(crtc_addr+1,CL);
17562                                           ! Debug: list unsigned char CL = [S+$A+4] (used reg = )
17563 4248           8A46         06            mov	al,6[bp]
17564 424B           30E4                       xor	ah,ah
17565 424D           50                         push	ax
17566                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$C-8] (used reg = )
17567 424E           8B46         FA            mov	ax,-6[bp]
17568                                           ! Debug: list unsigned int = ax+1 (used reg = )
17569 4251           40                         inc	ax
17570 4252           50                         push	ax
17571                                           ! Debug: func () void = outb+0 (used reg = )
17572 4253           E8         38B6            call	_outb
17573 4256           83C4                   04  add	sp,*4
17574                                           !BCC_EOS
17575                                           ! 1934 }
17576 4259           89EC                       mov	sp,bp
17577 425B           5D                         pop	bp
17578 425C           C3                         ret
17579                                           ! 1935 static void biosfn_set_cursor_pos (page, cursor)
17580                                           ! 1936 Bit8u page;Bit16u cursor;
17581                       0000425D            _biosfn_set_cursor_pos:
17582                                           !BCC_EOS
17583                                           !BCC_EOS
17584                                           ! 1937 {
17585                                           ! 1938  Bit8u xcurs,ycurs,current;
17586                                           !BCC_EOS
17587                                           ! 1939  Bit16u nbcols,nbrows,address,crtc_addr;
17588                                           !BCC_EOS
17589                                           ! 1940  if(page>7)return;
17590 425D           55                         push	bp
17591 425E           89E5                       mov	bp,sp
17592 4260           83C4                   F4  add	sp,*-$C
17593                                           ! Debug: gt int = const 7 to unsigned char page = [S+$E+2] (used reg = )
17594 4263           8A46         04            mov	al,4[bp]
17595 4266           3C                     07  cmp	al,*7
17596 4268           76           04            jbe 	.90
17597                       0000426A            .91:
17598 426A           89EC                       mov	sp,bp
17599 426C           5D                         pop	bp
17600 426D           C3                         ret
17601                                           !BCC_EOS
17602                                           ! 1941  write_word(0x40, 0x50 +2*page, cursor);
17603                       0000426E            .90:
17604                                           ! Debug: list unsigned short cursor = [S+$E+4] (used reg = )
17605 426E           FF76         06            push	6[bp]
17606                                           ! Debug: mul unsigned char page = [S+$10+2] to int = const 2 (used reg = )
17607                                           ! Debug: expression subtree swapping
17608 4271           8A46         04            mov	al,4[bp]
17609 4274           30E4                       xor	ah,ah
17610 4276           D1E0                       shl	ax,*1
17611                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
17612                                           ! Debug: expression subtree swapping
17613                                           ! Debug: list unsigned int = ax+$50 (used reg = )
17614 4278           05                   0050  add	ax,*$50
17615 427B           50                         push	ax
17616                                           ! Debug: list int = const $40 (used reg = )
17617 427C           B8                   0040  mov	ax,*$40
17618 427F           50                         push	ax
17619                                           ! Debug: func () void = write_word+0 (used reg = )
17620 4280           E8         385B            call	_write_word
17621 4283           83C4                   06  add	sp,*6
17622                                           !BCC_EOS
17623                                           ! 1942  current=read_byte(0x40,0x62);
17624                                           ! Debug: list int = const $62 (used reg = )
17625 4286           B8                   0062  mov	ax,*$62
17626 4289           50                         push	ax
17627                                           ! Debug: list int = const $40 (used reg = )
17628 428A           B8                   0040  mov	ax,*$40
17629 428D           50                         push	ax
17630                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
17631 428E           E8         380F            call	_read_byte
17632 4291           83C4                   04  add	sp,*4
17633                                           ! Debug: eq unsigned char = al+0 to unsigned char current = [S+$E-5] (used reg = )
17634 4294           8846         FD            mov	-3[bp],al
17635                                           !BCC_EOS
17636                                           ! 1943  if(page==current)
17637                                           ! Debug: logeq unsigned char current = [S+$E-5] to unsigned char page = [S+$E+2] (used reg = )
17638 4297           8A46         04            mov	al,4[bp]
17639 429A           3A46         FD            cmp	al,-3[bp]
17640 429D         0F85         00B8            bne 	.92
17641                       000042A1            .93:
17642                                           ! 1944   {
17643                                           ! 1945    nbcols=read_word(0x40,0x4A);
17644                                           ! Debug: list int = const $4A (used reg = )
17645 42A1           B8                   004A  mov	ax,*$4A
17646 42A4           50                         push	ax
17647                                           ! Debug: list int = const $40 (used reg = )
17648 42A5           B8                   0040  mov	ax,*$40
17649 42A8           50                         push	ax
17650                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17651 42A9           E8         3807            call	_read_word
17652 42AC           83C4                   04  add	sp,*4
17653                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$E-8] (used reg = )
17654 42AF           8946         FA            mov	-6[bp],ax
17655                                           !BCC_EOS
17656                                           ! 1946    nbrows=read_byte(0x40,0x84)+1;
17657                                           ! Debug: list int = const $84 (used reg = )
17658 42B2           B8                   0084  mov	ax,#$84
17659 42B5           50                         push	ax
17660                                           ! Debug: list int = const $40 (used reg = )
17661 42B6           B8                   0040  mov	ax,*$40
17662 42B9           50                         push	ax
17663                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
17664 42BA           E8         37E3            call	_read_byte
17665 42BD           83C4                   04  add	sp,*4
17666                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
17667 42C0           30E4                       xor	ah,ah
17668                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$E-$A] (used reg = )
17669 42C2           40                         inc	ax
17670 42C3           8946         F8            mov	-8[bp],ax
17671                                           !BCC_EOS
17672                                           ! 1947    xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
17673                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$E+4] (used reg = )
17674 42C6           8A46         06            mov	al,6[bp]
17675                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$E-3] (used reg = )
17676 42C9           8846         FF            mov	-1[bp],al
17677                                           !BCC_EOS
17678                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$E+4] (used reg = )
17679 42CC           8B46         06            mov	ax,6[bp]
17680 42CF           30C0                       xor	al,al
17681                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
17682 42D1           88E0                       mov	al,ah
17683 42D3           30E4                       xor	ah,ah
17684                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$E-4] (used reg = )
17685 42D5           8846         FE            mov	-2[bp],al
17686                                           !BCC_EOS
17687                                           ! 1948    address=((((nbcols*nbrows)|0x00ff)+1)*page)+xcurs+ycurs*nbcols;
17688                                           ! Debug: mul unsigned short nbcols = [S+$E-8] to unsigned char ycurs = [S+$E-4] (used reg = )
17689 42D8           8A46         FE            mov	al,-2[bp]
17690 42DB           30E4                       xor	ah,ah
17691 42DD           8B4E         FA            mov	cx,-6[bp]
17692 42E0           F7E9                       imul	cx
17693 42E2           50                         push	ax
17694                                           ! Debug: mul unsigned short nbrows = [S+$10-$A] to unsigned short nbcols = [S+$10-8] (used reg = )
17695 42E3           8B46         FA            mov	ax,-6[bp]
17696 42E6           8B4E         F8            mov	cx,-8[bp]
17697 42E9           F7E9                       imul	cx
17698                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
17699 42EB           0C                     FF  or	al,#$FF
17700                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
17701                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
17702 42ED           89C3                       mov	bx,ax
17703 42EF           8A46         04            mov	al,4[bp]
17704 42F2           30E4                       xor	ah,ah
17705 42F4           93                         xchg	ax,bx
17706 42F5           40                         inc	ax
17707 42F6           89D9                       mov	cx,bx
17708 42F8           F7E9                       imul	cx
17709                                           ! Debug: add unsigned char xcurs = [S+$10-3] to unsigned int = ax+0 (used reg = )
17710 42FA           0246         FF            add	al,-1[bp]
17711 42FD           80D4                   00  adc	ah,*0
17712                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
17713 4300           0346         F2            add	ax,-$E[bp]
17714 4303           44                         inc	sp
17715 4304           44                         inc	sp
17716                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$E-$C] (used reg = )
17717 4305           8946         F6            mov	-$A[bp],ax
17718                                           !BCC_EOS
17719                                           ! 1949    crtc_addr=read_word(0x40,0x63);
17720                                           ! Debug: list int = const $63 (used reg = )
17721 4308           B8                   0063  mov	ax,*$63
17722 430B           50                         push	ax
17723                                           ! Debug: list int = const $40 (used reg = )
17724 430C           B8                   0040  mov	ax,*$40
17725 430F           50                         push	ax
17726                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17727 4310           E8         37A0            call	_read_word
17728 4313           83C4                   04  add	sp,*4
17729                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$E-$E] (used reg = )
17730 4316           8946         F4            mov	-$C[bp],ax
17731                                           !BCC_EOS
17732                                           ! 1950    outb(crtc_addr,0x0e);
17733                                           ! Debug: list int = const $E (used reg = )
17734 4319           B8                   000E  mov	ax,*$E
17735 431C           50                         push	ax
17736                                           ! Debug: list unsigned short crtc_addr = [S+$10-$E] (used reg = )
17737 431D           FF76         F4            push	-$C[bp]
17738                                           ! Debug: func () void = outb+0 (used reg = )
17739 4320           E8         37E9            call	_outb
17740 4323           83C4                   04  add	sp,*4
17741                                           !BCC_EOS
17742                                           ! 1951    outb(crtc_addr+1,(address&0xff00)>>8);
17743                                           ! Debug: and unsigned int = const $FF00 to unsigned short address = [S+$E-$C] (used reg = )
17744 4326           8B46         F6            mov	ax,-$A[bp]
17745 4329           30C0                       xor	al,al
17746                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
17747 432B           88E0                       mov	al,ah
17748 432D           30E4                       xor	ah,ah
17749                                           ! Debug: list unsigned int = ax+0 (used reg = )
17750 432F           50                         push	ax
17751                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-$E] (used reg = )
17752 4330           8B46         F4            mov	ax,-$C[bp]
17753                                           ! Debug: list unsigned int = ax+1 (used reg = )
17754 4333           40                         inc	ax
17755 4334           50                         push	ax
17756                                           ! Debug: func () void = outb+0 (used reg = )
17757 4335           E8         37D4            call	_outb
17758 4338           83C4                   04  add	sp,*4
17759                                           !BCC_EOS
17760                                           ! 1952    outb(crtc_addr,0x0f);
17761                                           ! Debug: list int = const $F (used reg = )
17762 433B           B8                   000F  mov	ax,*$F
17763 433E           50                         push	ax
17764                                           ! Debug: list unsigned short crtc_addr = [S+$10-$E] (used reg = )
17765 433F           FF76         F4            push	-$C[bp]
17766                                           ! Debug: func () void = outb+0 (used reg = )
17767 4342           E8         37C7            call	_outb
17768 4345           83C4                   04  add	sp,*4
17769                                           !BCC_EOS
17770                                           ! 1953    outb(crtc_addr+1,address&0x00ff);
17771                                           ! Debug: and int = const $FF to unsigned short address = [S+$E-$C] (used reg = )
17772 4348           8A46         F6            mov	al,-$A[bp]
17773                                           ! Debug: list unsigned char = al+0 (used reg = )
17774 434B           30E4                       xor	ah,ah
17775 434D           50                         push	ax
17776                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-$E] (used reg = )
17777 434E           8B46         F4            mov	ax,-$C[bp]
17778                                           ! Debug: list unsigned int = ax+1 (used reg = )
17779 4351           40                         inc	ax
17780 4352           50                         push	ax
17781                                           ! Debug: func () void = outb+0 (used reg = )
17782 4353           E8         37B6            call	_outb
17783 4356           83C4                   04  add	sp,*4
17784                                           !BCC_EOS
17785                                           ! 1954   }
17786                                           ! 1955 }
17787                       00004359            .92:
17788 4359           89EC                       mov	sp,bp
17789 435B           5D                         pop	bp
17790 435C           C3                         ret
17791                                           ! 1956 static void biosfn_get_cursor_pos (page,shape, pos)
17792                                           ! Register BX used in function biosfn_set_cursor_pos
17793                                           ! 1957 Bit8u page;Bit16u *shape;Bit16u *pos;
17794                       0000435D            _biosfn_get_cursor_pos:
17795                                           !BCC_EOS
17796                                           !BCC_EOS
17797                                           !BCC_EOS
17798                                           ! 1958 {
17799                                           ! 1959  Bit16u ss=get_SS();
17800 435D           55                         push	bp
17801 435E           89E5                       mov	bp,sp
17802 4360           4C                         dec	sp
17803 4361           4C                         dec	sp
17804                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
17805 4362           E8         37C7            call	_get_SS
17806                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
17807 4365           8946         FE            mov	-2[bp],ax
17808                                           !BCC_EOS
17809                                           ! 1960  write_word(ss, shape, 0);
17810                                           ! Debug: list int = const 0 (used reg = )
17811 4368           31C0                       xor	ax,ax
17812 436A           50                         push	ax
17813                                           ! Debug: list * unsigned short shape = [S+6+4] (used reg = )
17814 436B           FF76         06            push	6[bp]
17815                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
17816 436E           FF76         FE            push	-2[bp]
17817                                           ! Debug: func () void = write_word+0 (used reg = )
17818 4371           E8         376A            call	_write_word
17819 4374           83C4                   06  add	sp,*6
17820                                           !BCC_EOS
17821                                           ! 1961  write_word(ss, pos, 0);
17822                                           ! Debug: list int = const 0 (used reg = )
17823 4377           31C0                       xor	ax,ax
17824 4379           50                         push	ax
17825                                           ! Debug: list * unsigned short pos = [S+6+6] (used reg = )
17826 437A           FF76         08            push	8[bp]
17827                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
17828 437D           FF76         FE            push	-2[bp]
17829                                           ! Debug: func () void = write_word+0 (used reg = )
17830 4380           E8         375B            call	_write_word
17831 4383           83C4                   06  add	sp,*6
17832                                           !BCC_EOS
17833                                           ! 1962  if(page>7)return;
17834                                           ! Debug: gt int = const 7 to unsigned char page = [S+4+2] (used reg = )
17835 4386           8A46         04            mov	al,4[bp]
17836 4389           3C                     07  cmp	al,*7
17837 438B           76           04            jbe 	.94
17838                       0000438D            .95:
17839 438D           89EC                       mov	sp,bp
17840 438F           5D                         pop	bp
17841 4390           C3                         ret
17842                                           !BCC_EOS
17843                                           ! 1963  write_word(ss,shape,read_word(0x40,0x60));
17844                       00004391            .94:
17845                                           ! Debug: list int = const $60 (used reg = )
17846 4391           B8                   0060  mov	ax,*$60
17847 4394           50                         push	ax
17848                                           ! Debug: list int = const $40 (used reg = )
17849 4395           B8                   0040  mov	ax,*$40
17850 4398           50                         push	ax
17851                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17852 4399           E8         3717            call	_read_word
17853 439C           83C4                   04  add	sp,*4
17854                                           ! Debug: list unsigned short = ax+0 (used reg = )
17855 439F           50                         push	ax
17856                                           ! Debug: list * unsigned short shape = [S+6+4] (used reg = )
17857 43A0           FF76         06            push	6[bp]
17858                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
17859 43A3           FF76         FE            push	-2[bp]
17860                                           ! Debug: func () void = write_word+0 (used reg = )
17861 43A6           E8         3735            call	_write_word
17862 43A9           83C4                   06  add	sp,*6
17863                                           !BCC_EOS
17864                                           ! 1964  write_word(ss,pos,read_word(0x40,0x50 +page*2));
17865                                           ! Debug: mul int = const 2 to unsigned char page = [S+4+2] (used reg = )
17866 43AC           8A46         04            mov	al,4[bp]
17867 43AF           30E4                       xor	ah,ah
17868 43B1           D1E0                       shl	ax,*1
17869                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
17870                                           ! Debug: expression subtree swapping
17871                                           ! Debug: list unsigned int = ax+$50 (used reg = )
17872 43B3           05                   0050  add	ax,*$50
17873 43B6           50                         push	ax
17874                                           ! Debug: list int = const $40 (used reg = )
17875 43B7           B8                   0040  mov	ax,*$40
17876 43BA           50                         push	ax
17877                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17878 43BB           E8         36F5            call	_read_word
17879 43BE           83C4                   04  add	sp,*4
17880                                           ! Debug: list unsigned short = ax+0 (used reg = )
17881 43C1           50                         push	ax
17882                                           ! Debug: list * unsigned short pos = [S+6+6] (used reg = )
17883 43C2           FF76         08            push	8[bp]
17884                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
17885 43C5           FF76         FE            push	-2[bp]
17886                                           ! Debug: func () void = write_word+0 (used reg = )
17887 43C8           E8         3713            call	_write_word
17888 43CB           83C4                   06  add	sp,*6
17889                                           !BCC_EOS
17890                                           ! 1965 }
17891 43CE           89EC                       mov	sp,bp
17892 43D0           5D                         pop	bp
17893 43D1           C3                         ret
17894                                           ! 1966 static void biosfn_set_active_page (page)
17895                                           ! 1967 Bit8u page;
17896                       000043D2            _biosfn_set_active_page:
17897                                           !BCC_EOS
17898                                           ! 1968 {
17899                                           ! 1969  Bit16u cursor,dummy,crtc_addr
17900                                           ! 1969 ;
17901                                           !BCC_EOS
17902                                           ! 1970  Bit16u nbcols,nbrows,address;
17903                                           !BCC_EOS
17904                                           ! 1971  Bit8u mode,line;
17905                                           !BCC_EOS
17906                                           ! 1972  if(page>7)return;
17907 43D2           55                         push	bp
17908 43D3           89E5                       mov	bp,sp
17909 43D5           83C4                   F2  add	sp,*-$E
17910                                           ! Debug: gt int = const 7 to unsigned char page = [S+$10+2] (used reg = )
17911 43D8           8A46         04            mov	al,4[bp]
17912 43DB           3C                     07  cmp	al,*7
17913 43DD           76           04            jbe 	.96
17914                       000043DF            .97:
17915 43DF           89EC                       mov	sp,bp
17916 43E1           5D                         pop	bp
17917 43E2           C3                         ret
17918                                           !BCC_EOS
17919                                           ! 1973  mode=read_byte(0x40,0x49);
17920                       000043E3            .96:
17921                                           ! Debug: list int = const $49 (used reg = )
17922 43E3           B8                   0049  mov	ax,*$49
17923 43E6           50                         push	ax
17924                                           ! Debug: list int = const $40 (used reg = )
17925 43E7           B8                   0040  mov	ax,*$40
17926 43EA           50                         push	ax
17927                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
17928 43EB           E8         36B2            call	_read_byte
17929 43EE           83C4                   04  add	sp,*4
17930                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$10-$F] (used reg = )
17931 43F1           8846         F3            mov	-$D[bp],al
17932                                           !BCC_EOS
17933                                           ! 1974  line=find_vga_entry(mode);
17934                                           ! Debug: list unsigned char mode = [S+$10-$F] (used reg = )
17935 43F4           8A46         F3            mov	al,-$D[bp]
17936 43F7           30E4                       xor	ah,ah
17937 43F9           50                         push	ax
17938                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
17939 43FA           E8         35B7            call	_find_vga_entry
17940 43FD           44                         inc	sp
17941 43FE           44                         inc	sp
17942                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$10-$10] (used reg = )
17943 43FF           8846         F2            mov	-$E[bp],al
17944                                           !BCC_EOS
17945                                           ! 1975  if(line==0xFF)return;
17946                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$10-$10] (used reg = )
17947 4402           8A46         F2            mov	al,-$E[bp]
17948 4405           3C                     FF  cmp	al,#$FF
17949 4407           75           04            jne 	.98
17950                       00004409            .99:
17951 4409           89EC                       mov	sp,bp
17952 440B           5D                         pop	bp
17953 440C           C3                         ret
17954                                           !BCC_EOS
17955                                           ! 1976  biosfn_get_cursor_pos(page,&dummy,&cursor);
17956                       0000440D            .98:
17957                                           ! Debug: list * unsigned short cursor = S+$10-4 (used reg = )
17958 440D           8D5E         FE            lea	bx,-2[bp]
17959 4410           53                         push	bx
17960                                           ! Debug: list * unsigned short dummy = S+$12-6 (used reg = )
17961 4411           8D5E         FC            lea	bx,-4[bp]
17962 4414           53                         push	bx
17963                                           ! Debug: list unsigned char page = [S+$14+2] (used reg = )
17964 4415           8A46         04            mov	al,4[bp]
17965 4418           30E4                       xor	ah,ah
17966 441A           50                         push	ax
17967                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
17968 441B           E8         FF3F            call	_biosfn_get_cursor_pos
17969 441E           83C4                   06  add	sp,*6
17970                                           !BCC_EOS
17971                                           ! 1977  if(vga_modes[line].class==0x00)
17972                                           ! Debug: ptradd unsigned char line = [S+$10-$10] to [$10] struct  = vga_modes+0 (used reg = )
17973 4421           8A46         F2            mov	al,-$E[bp]
17974 4424           30E4                       xor	ah,ah
17975 4426           B1                     03  mov	cl,*3
17976 4428           D3E0                       shl	ax,cl
17977 442A           89C3                       mov	bx,ax
17978 442C           81C3                 01DA  add	bx,#_vga_modes
17979                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
17980 4430           8A47         01            mov	al,1[bx]
17981 4433           84C0                       test	al,al
17982 4435           75           6E            jne 	.9A
17983                       00004437            .9B:
17984                                           ! 1978   {
17985                                           ! 1979    nbcols=read_word(0x40,0x4A);
17986                                           ! Debug: list int = const $4A (used reg = )
17987 4437           B8                   004A  mov	ax,*$4A
17988 443A           50                         push	ax
17989                                           ! Debug: list int = const $40 (used reg = )
17990 443B           B8                   0040  mov	ax,*$40
17991 443E           50                         push	ax
17992                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17993 443F           E8         3671            call	_read_word
17994 4442           83C4                   04  add	sp,*4
17995                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$10-$A] (used reg = )
17996 4445           8946         F8            mov	-8[bp],ax
17997                                           !BCC_EOS
17998                                           ! 1980    nbrows=read_byte(0x40,0x84)+1;
17999                                           ! Debug: list int = const $84 (used reg = )
18000 4448           B8                   0084  mov	ax,#$84
18001 444B           50                         push	ax
18002                                           ! Debug: list int = const $40 (used reg = )
18003 444C           B8                   0040  mov	ax,*$40
18004 444F           50                         push	ax
18005                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18006 4450           E8         364D            call	_read_byte
18007 4453           83C4                   04  add	sp,*4
18008                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
18009 4456           30E4                       xor	ah,ah
18010                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$10-$C] (used reg = )
18011 4458           40                         inc	ax
18012 4459           8946         F6            mov	-$A[bp],ax
18013                                           !BCC_EOS
18014                                           ! 1981    address=((((nbcols*nbrows*2)|0x00ff)+1)*page);
18015                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
18016 445C           8B46         F8            mov	ax,-8[bp]
18017 445F           8B4E         F6            mov	cx,-$A[bp]
18018 4462           F7E9                       imul	cx
18019                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
18020 4464           D1E0                       shl	ax,*1
18021                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
18022 4466           0C                     FF  or	al,#$FF
18023                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
18024                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
18025 4468           89C3                       mov	bx,ax
18026 446A           8A46         04            mov	al,4[bp]
18027 446D           30E4                       xor	ah,ah
18028 446F           93                         xchg	ax,bx
18029 4470           40                         inc	ax
18030 4471           89D9                       mov	cx,bx
18031 4473           F7E9                       imul	cx
18032                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18033 4475           8946         F4            mov	-$C[bp],ax
18034                                           !BCC_EOS
18035                                           ! 1982    write_word(0x40,0x4E,address);
18036                                           ! Debug: list unsigned short address = [S+$10-$E] (used reg = )
18037 4478           FF76         F4            push	-$C[bp]
18038                                           ! Debug: list int = const $4E (used reg = )
18039 447B           B8                   004E  mov	ax,*$4E
18040 447E           50                         push	ax
18041                                           ! Debug: list int = const $40 (used reg = )
18042 447F           B8                   0040  mov	ax,*$40
18043 4482           50                         push	ax
18044                                           ! Debug: func () void = write_word+0 (used reg = )
18045 4483           E8         3658            call	_write_word
18046 4486           83C4                   06  add	sp,*6
18047                                           !BCC_EOS
18048                                           ! 1983    address=((((nbcols*nbrows)|0x00ff)+1)*page);
18049                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
18050 4489           8B46         F8            mov	ax,-8[bp]
18051 448C           8B4E         F6            mov	cx,-$A[bp]
18052 448F           F7E9                       imul	cx
18053                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
18054 4491           0C                     FF  or	al,#$FF
18055                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
18056                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
18057 4493           89C3                       mov	bx,ax
18058 4495           8A46         04            mov	al,4[bp]
18059 4498           30E4                       xor	ah,ah
18060 449A           93                         xchg	ax,bx
18061 449B           40                         inc	ax
18062 449C           89D9                       mov	cx,bx
18063 449E           F7E9                       imul	cx
18064                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18065 44A0           8946         F4            mov	-$C[bp],ax
18066                                           !BCC_EOS
18067                                           ! 1984   }
18068                                           ! 1985  else
18069                                           ! 1986   {
18070 44A3           EB           24            jmp .9C
18071                       000044A5            .9A:
18072                                           ! 1987    address = page * (*(Bit16u *)&video_param_table[line_to_vpti[line]].slength_l);
18073                                           ! Debug: ptradd unsigned char line = [S+$10-$10] to [$10] unsigned char = line_to_vpti+0 (used reg = )
18074 44A5           8A46         F2            mov	al,-$E[bp]
18075 44A8           30E4                       xor	ah,ah
18076 44AA           89C3                       mov	bx,ax
18077                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
18078 44AC           8A87       025A            mov	al,_line_to_vpti[bx]
18079 44B0           30E4                       xor	ah,ah
18080 44B2           B1                     06  mov	cl,*6
18081 44B4           D3E0                       shl	ax,cl
18082 44B6           89C3                       mov	bx,ax
18083 44B8           81C3                 026E  add	bx,#_video_param_table
18084                                           ! Debug: address unsigned char = [bx+3] (used reg = )
18085                                           ! Debug: cast * unsigned short = const 0 to * unsigned char = bx+3 (used reg = )
18086                                           ! Debug: mul unsigned short = [bx+3] to unsigned char page = [S+$10+2] (used reg = )
18087 44BC           8A46         04            mov	al,4[bp]
18088 44BF           30E4                       xor	ah,ah
18089 44C1           8B4F         03            mov	cx,3[bx]
18090 44C4           F7E9                       imul	cx
18091                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18092 44C6           8946         F4            mov	-$C[bp],ax
18093                                           !BCC_EOS
18094                                           ! 1988   }
18095                                           ! 1989  crtc_addr=read_word(0x40,0x63);
18096                       000044C9            .9C:
18097                                           ! Debug: list int = const $63 (used reg = )
18098 44C9           B8                   0063  mov	ax,*$63
18099 44CC           50                         push	ax
18100                                           ! Debug: list int = const $40 (used reg = )
18101 44CD           B8                   0040  mov	ax,*$40
18102 44D0           50                         push	ax
18103                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18104 44D1           E8         35DF            call	_read_word
18105 44D4           83C4                   04  add	sp,*4
18106                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$10-8] (used reg = )
18107 44D7           8946         FA            mov	-6[bp],ax
18108                                           !BCC_EOS
18109                                           ! 1990  outb(crtc_addr,0x0c);
18110                                           ! Debug: list int = const $C (used reg = )
18111 44DA           B8                   000C  mov	ax,*$C
18112 44DD           50                         push	ax
18113                                           ! Debug: list unsigned short crtc_addr = [S+$12-8] (used reg = )
18114 44DE           FF76         FA            push	-6[bp]
18115                                           ! Debug: func () void = outb+0 (used reg = )
18116 44E1           E8         3628            call	_outb
18117 44E4           83C4                   04  add	sp,*4
18118                                           !BCC_EOS
18119                                           ! 1991  outb(crtc_addr+1,(address&0xff00)>>8);
18120                                           ! Debug: and unsigned int = const $FF00 to unsigned short address = [S+$10-$E] (used reg = )
18121 44E7           8B46         F4            mov	ax,-$C[bp]
18122 44EA           30C0                       xor	al,al
18123                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
18124 44EC           88E0                       mov	al,ah
18125 44EE           30E4                       xor	ah,ah
18126                                           ! Debug: list unsigned int = ax+0 (used reg = )
18127 44F0           50                         push	ax
18128                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$12-8] (used reg = )
18129 44F1           8B46         FA            mov	ax,-6[bp]
18130                                           ! Debug: list unsigned int = ax+1 (used reg = )
18131 44F4           40                         inc	ax
18132 44F5           50                         push	ax
18133                                           ! Debug: func () void = outb+0 (used reg = )
18134 44F6           E8         3613            call	_outb
18135 44F9           83C4                   04  add	sp,*4
18136                                           !BCC_EOS
18137                                           ! 1992  outb(crtc_addr,0x0d);
18138                                           ! Debug: list int = const $D (used reg = )
18139 44FC           B8                   000D  mov	ax,*$D
18140 44FF           50                         push	ax
18141                                           ! Debug: list unsigned short crtc_addr = [S+$12-8] (used reg = )
18142 4500           FF76         FA            push	-6[bp]
18143                                           ! Debug: func () void = outb+0 (used reg = )
18144 4503           E8         3606            call	_outb
18145 4506           83C4                   04  add	sp,*4
18146                                           !BCC_EOS
18147                                           ! 1993  outb(crtc_addr+1,address&0x00ff);
18148                                           ! Debug: and int = const $FF to unsigned short address = [S+$10-$E] (used reg = )
18149 4509           8A46         F4            mov	al,-$C[bp]
18150                                           ! Debug: list unsigned char = al+0 (used reg = )
18151 450C           30E4                       xor	ah,ah
18152 450E           50                         push	ax
18153                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$12-8] (used reg = )
18154 450F           8B46         FA            mov	ax,-6[bp]
18155                                           ! Debug: list unsigned int = ax+1 (used reg = )
18156 4512           40                         inc	ax
18157 4513           50                         push	ax
18158                                           ! Debug: func () void = outb+0 (used reg = )
18159 4514           E8         35F5            call	_outb
18160 4517           83C4                   04  add	sp,*4
18161                                           !BCC_EOS
18162                                           ! 1994  write_byte(0x40,0x62,page);
18163                                           ! Debug: list unsigned char page = [S+$10+2] (used reg = )
18164 451A           8A46         04            mov	al,4[bp]
18165 451D           30E4                       xor	ah,ah
18166 451F           50                         push	ax
18167                                           ! Debug: list int = const $62 (used reg = )
18168 4520           B8                   0062  mov	ax,*$62
18169 4523           50                         push	ax
18170                                           ! Debug: list int = const $40 (used reg = )
18171 4524           B8                   0040  mov	ax,*$40
18172 4527           50                         push	ax
18173                                           ! Debug: func () void = write_byte+0 (used reg = )
18174 4528           E8         359B            call	_write_byte
18175 452B           83C4                   06  add	sp,*6
18176                                           !BCC_EOS
18177                                           ! 1995  biosfn_set_cursor_pos(page,cursor);
18178                                           ! Debug: list unsigned short cursor = [S+$10-4] (used reg = )
18179 452E           FF76         FE            push	-2[bp]
18180                                           ! Debug: list unsigned char page = [S+$12+2] (used reg = )
18181 4531           8A46         04            mov	al,4[bp]
18182 4534           30E4                       xor	ah,ah
18183 4536           50                         push	ax
18184                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
18185 4537           E8         FD23            call	_biosfn_set_cursor_pos
18186 453A           83C4                   04  add	sp,*4
18187                                           !BCC_EOS
18188                                           ! 1996 }
18189 453D           89EC                       mov	sp,bp
18190 453F           5D                         pop	bp
18191 4540           C3                         ret
18192                                           ! 1997 static void vgamem_copy_pl4(xstart,ysrc,ydest,cols,nbcols,cheight)
18193                                           ! Register BX used in function biosfn_set_active_page
18194                                           ! 1998 Bit8u xstart;Bit8u ysrc;Bit8u ydest;Bit8u cols;Bit8u nbcols;Bit8u cheight;
18195                       00004541            _vgamem_copy_pl4:
18196                                           !BCC_EOS
18197                                           !BCC_EOS
18198                                           !BCC_EOS
18199                                           !BCC_EOS
18200                                           !BCC_EOS
18201                                           !BCC_EOS
18202                                           ! 1999 {
18203                                           ! 2000  Bit16u src,dest;
18204                                           !BCC_EOS
18205                                           ! 2001  Bit8u i;
18206                                           !BCC_EOS
18207                                           ! 2002  src=ysrc*cheight*nbcols+xstart;
18208 4541           55                         push	bp
18209 4542           89E5                       mov	bp,sp
18210 4544           83C4                   FA  add	sp,*-6
18211                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ysrc = [S+8+4] (used reg = )
18212 4547           8A46         0E            mov	al,$E[bp]
18213 454A           30E4                       xor	ah,ah
18214 454C           89C3                       mov	bx,ax
18215 454E           8A46         06            mov	al,6[bp]
18216 4551           30E4                       xor	ah,ah
18217 4553           89D9                       mov	cx,bx
18218 4555           F7E9                       imul	cx
18219                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18220 4557           89C3                       mov	bx,ax
18221 4559           8A46         0C            mov	al,$C[bp]
18222 455C           30E4                       xor	ah,ah
18223 455E           93                         xchg	ax,bx
18224 455F           89D9                       mov	cx,bx
18225 4561           F7E9                       imul	cx
18226                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18227 4563           0246         04            add	al,4[bp]
18228 4566           80D4                   00  adc	ah,*0
18229                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+8-4] (used reg = )
18230 4569           8946         FE            mov	-2[bp],ax
18231                                           !BCC_EOS
18232                                           ! 2003  dest=ydest*cheight*nbcols+xstart;
18233                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ydest = [S+8+6] (used reg = )
18234 456C           8A46         0E            mov	al,$E[bp]
18235 456F           30E4                       xor	ah,ah
18236 4571           89C3                       mov	bx,ax
18237 4573           8A46         08            mov	al,8[bp]
18238 4576           30E4                       xor	ah,ah
18239 4578           89D9                       mov	cx,bx
18240 457A           F7E9                       imul	cx
18241                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18242 457C           89C3                       mov	bx,ax
18243 457E           8A46         0C            mov	al,$C[bp]
18244 4581           30E4                       xor	ah,ah
18245 4583           93                         xchg	ax,bx
18246 4584           89D9                       mov	cx,bx
18247 4586           F7E9                       imul	cx
18248                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18249 4588           0246         04            add	al,4[bp]
18250 458B           80D4                   00  adc	ah,*0
18251                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+8-6] (used reg = )
18252 458E           8946         FC            mov	-4[bp],ax
18253                                           !BCC_EOS
18254                                           ! 2004  outw(0x3ce, 0x0105);
18255                                           ! Debug: list int = const $105 (used reg = )
18256 4591           B8                   0105  mov	ax,#$105
18257 4594           50                         push	ax
18258                                           ! Debug: list int = const $3CE (used reg = )
18259 4595           B8                   03CE  mov	ax,#$3CE
18260 4598           50                         push	ax
18261                                           ! Debug: func () void = outw+0 (used reg = )
18262 4599           E8         3580            call	_outw
18263 459C           83C4                   04  add	sp,*4
18264                                           !BCC_EOS
18265                                           ! 2005  for(i=0;i<cheight;i++)
18266                                           ! Debug: eq int = const 0 to unsigned char i = [S+8-7] (used reg = )
18267 459F           30C0                       xor	al,al
18268 45A1           8846         FB            mov	-5[bp],al
18269                                           !BCC_EOS
18270                                           !BCC_EOS
18271                                           ! 2006   {
18272 45A4           EB           43            jmp .9F
18273                       000045A6            .A0:
18274                                           ! 2007    memcpyb(0xa000,dest+i*nbcols,0xa000,src+i*nbcols,cols);
18275                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
18276 45A6           8A46         0A            mov	al,$A[bp]
18277 45A9           30E4                       xor	ah,ah
18278 45AB           50                         push	ax
18279                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned char i = [S+$A-7] (used reg = )
18280 45AC           8A46         0C            mov	al,$C[bp]
18281 45AF           30E4                       xor	ah,ah
18282 45B1           89C3                       mov	bx,ax
18283 45B3           8A46         FB            mov	al,-5[bp]
18284 45B6           30E4                       xor	ah,ah
18285 45B8           89D9                       mov	cx,bx
18286 45BA           F7E9                       imul	cx
18287                                           ! Debug: add unsigned int = ax+0 to unsigned short src = [S+$A-4] (used reg = )
18288                                           ! Debug: expression subtree swapping
18289 45BC           0346         FE            add	ax,-2[bp]
18290                                           ! Debug: list unsigned int = ax+0 (used reg = )
18291 45BF           50                         push	ax
18292                                           ! Debug: list unsigned int = const $A000 (used reg = )
18293 45C0           B8                   A000  mov	ax,#$A000
18294 45C3           50                         push	ax
18295                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-7] (used reg = )
18296 45C4           8A46         0C            mov	al,$C[bp]
18297 45C7           30E4                       xor	ah,ah
18298 45C9           89C3                       mov	bx,ax
18299 45CB           8A46         FB            mov	al,-5[bp]
18300 45CE           30E4                       xor	ah,ah
18301 45D0           89D9                       mov	cx,bx
18302 45D2           F7E9                       imul	cx
18303                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$E-6] (used reg = )
18304                                           ! Debug: expression subtree swapping
18305 45D4           0346         FC            add	ax,-4[bp]
18306                                           ! Debug: list unsigned int = ax+0 (used reg = )
18307 45D7           50                         push	ax
18308                                           ! Debug: list unsigned int = const $A000 (used reg = )
18309 45D8           B8                   A000  mov	ax,#$A000
18310 45DB           50                         push	ax
18311                                           ! Debug: func () void = memcpyb+0 (used reg = )
18312 45DC           E8         3461            call	_memcpyb
18313 45DF           83C4                   0A  add	sp,*$A
18314                                           !BCC_EOS
18315                                           ! 2008   }
18316                                           ! 2009  outw(0x3ce, 0x0005);
18317                       000045E2            .9E:
18318                                           ! Debug: postinc unsigned char i = [S+8-7] (used reg = )
18319 45E2           8A46         FB            mov	al,-5[bp]
18320 45E5           40                         inc	ax
18321 45E6           8846         FB            mov	-5[bp],al
18322                       000045E9            .9F:
18323                                           ! Debug: lt unsigned char cheight = [S+8+$C] to unsigned char i = [S+8-7] (used reg = )
18324 45E9           8A46         FB            mov	al,-5[bp]
18325 45EC           3A46         0E            cmp	al,$E[bp]
18326 45EF           72           B5            jb 	.A0
18327                       000045F1            .A1:
18328                       000045F1            .9D:
18329                                           ! Debug: list int = const 5 (used reg = )
18330 45F1           B8                   0005  mov	ax,*5
18331 45F4           50                         push	ax
18332                                           ! Debug: list int = const $3CE (used reg = )
18333 45F5           B8                   03CE  mov	ax,#$3CE
18334 45F8           50                         push	ax
18335                                           ! Debug: func () void = outw+0 (used reg = )
18336 45F9           E8         3520            call	_outw
18337 45FC           83C4                   04  add	sp,*4
18338                                           !BCC_EOS
18339                                           ! 2010 }
18340 45FF           89EC                       mov	sp,bp
18341 4601           5D                         pop	bp
18342 4602           C3                         ret
18343                                           ! 2011 static void vgamem_fill_pl4(xstart,ystart,cols,nbcols,cheight,attr)
18344                                           ! Register BX used in function vgamem_copy_pl4
18345                                           ! 2012 Bit8u xstart;Bit8u ystart;Bit8u cols;Bit8u nbcols;Bit8u cheight;Bit8u attr;
18346                       00004603            _vgamem_fill_pl4:
18347                                           !BCC_EOS
18348                                           !BCC_EOS
18349                                           !BCC_EOS
18350                                           !BCC_EOS
18351                                           !BCC_EOS
18352                                           !BCC_EOS
18353                                           ! 2013 {
18354                                           ! 2014  Bit16u dest;
18355                                           !BCC_EOS
18356                                           ! 2015  Bit8u i;
18357                                           !BCC_EOS
18358                                           ! 2016  dest=ystart*cheight*nbcols+xstart;
18359 4603           55                         push	bp
18360 4604           89E5                       mov	bp,sp
18361 4606           83C4                   FC  add	sp,*-4
18362                                           ! Debug: mul unsigned char cheight = [S+6+$A] to unsigned char ystart = [S+6+4] (used reg = )
18363 4609           8A46         0C            mov	al,$C[bp]
18364 460C           30E4                       xor	ah,ah
18365 460E           89C3                       mov	bx,ax
18366 4610           8A46         06            mov	al,6[bp]
18367 4613           30E4                       xor	ah,ah
18368 4615           89D9                       mov	cx,bx
18369 4617           F7E9                       imul	cx
18370                                           ! Debug: mul unsigned char nbcols = [S+6+8] to unsigned int = ax+0 (used reg = )
18371 4619           89C3                       mov	bx,ax
18372 461B           8A46         0A            mov	al,$A[bp]
18373 461E           30E4                       xor	ah,ah
18374 4620           93                         xchg	ax,bx
18375 4621           89D9                       mov	cx,bx
18376 4623           F7E9                       imul	cx
18377                                           ! Debug: add unsigned char xstart = [S+6+2] to unsigned int = ax+0 (used reg = )
18378 4625           0246         04            add	al,4[bp]
18379 4628           80D4                   00  adc	ah,*0
18380                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+6-4] (used reg = )
18381 462B           8946         FE            mov	-2[bp],ax
18382                                           !BCC_EOS
18383                                           ! 2017  outw(0x3ce, 0x0205);
18384                                           ! Debug: list int = const $205 (used reg = )
18385 462E           B8                   0205  mov	ax,#$205
18386 4631           50                         push	ax
18387                                           ! Debug: list int = const $3CE (used reg = )
18388 4632           B8                   03CE  mov	ax,#$3CE
18389 4635           50                         push	ax
18390                                           ! Debug: func () void = outw+0 (used reg = )
18391 4636           E8         34E3            call	_outw
18392 4639           83C4                   04  add	sp,*4
18393                                           !BCC_EOS
18394                                           ! 2018  for(i=0;i<cheight;i++)
18395                                           ! Debug: eq int = const 0 to unsigned char i = [S+6-5] (used reg = )
18396 463C           30C0                       xor	al,al
18397 463E           8846         FD            mov	-3[bp],al
18398                                           !BCC_EOS
18399                                           !BCC_EOS
18400                                           ! 2019   {
18401 4641           EB           31            jmp .A4
18402                       00004643            .A5:
18403                                           ! 2020    memsetb(0xa000,dest+i*nbcols,attr,cols);
18404                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
18405 4643           8A46         08            mov	al,8[bp]
18406 4646           30E4                       xor	ah,ah
18407 4648           50                         push	ax
18408                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
18409 4649           8A46         0E            mov	al,$E[bp]
18410 464C           30E4                       xor	ah,ah
18411 464E           50                         push	ax
18412                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned char i = [S+$A-5] (used reg = )
18413 464F           8A46         0A            mov	al,$A[bp]
18414 4652           30E4                       xor	ah,ah
18415 4654           89C3                       mov	bx,ax
18416 4656           8A46         FD            mov	al,-3[bp]
18417 4659           30E4                       xor	ah,ah
18418 465B           89D9                       mov	cx,bx
18419 465D           F7E9                       imul	cx
18420                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$A-4] (used reg = )
18421                                           ! Debug: expression subtree swapping
18422 465F           0346         FE            add	ax,-2[bp]
18423                                           ! Debug: list unsigned int = ax+0 (used reg = )
18424 4662           50                         push	ax
18425                                           ! Debug: list unsigned int = const $A000 (used reg = )
18426 4663           B8                   A000  mov	ax,#$A000
18427 4666           50                         push	ax
18428                                           ! Debug: func () void = memsetb+0 (used reg = )
18429 4667           E8         338C            call	_memsetb
18430 466A           83C4                   08  add	sp,*8
18431                                           !BCC_EOS
18432                                           ! 2021   }
18433                                           ! 2022  outw(0x3ce, 0x0005);
18434                       0000466D            .A3:
18435                                           ! Debug: postinc unsigned char i = [S+6-5] (used reg = )
18436 466D           8A46         FD            mov	al,-3[bp]
18437 4670           40                         inc	ax
18438 4671           8846         FD            mov	-3[bp],al
18439                       00004674            .A4:
18440                                           ! Debug: lt unsigned char cheight = [S+6+$A] to unsigned char i = [S+6-5] (used reg = )
18441 4674           8A46         FD            mov	al,-3[bp]
18442 4677           3A46         0C            cmp	al,$C[bp]
18443 467A           72           C7            jb 	.A5
18444                       0000467C            .A6:
18445                       0000467C            .A2:
18446                                           ! Debug: list int = const 5 (used reg = )
18447 467C           B8                   0005  mov	ax,*5
18448 467F           50                         push	ax
18449                                           ! Debug: list int = const $3CE (used reg = )
18450 4680           B8                   03CE  mov	ax,#$3CE
18451 4683           50                         push	ax
18452                                           ! Debug: func () void = outw+0 (used reg = )
18453 4684           E8         3495            call	_outw
18454 4687           83C4                   04  add	sp,*4
18455                                           !BCC_EOS
18456                                           ! 2023 }
18457 468A           89EC                       mov	sp,bp
18458 468C           5D                         pop	bp
18459 468D           C3                         ret
18460                                           ! 2024 static void vgamem_copy_cga(xstart,ysrc,ydest,cols,nbcols,cheight)
18461                                           ! Register BX used in function vgamem_fill_pl4
18462                                           ! 2025 Bit8u xstart;Bit8u ysrc;Bit8u ydest;Bit8u cols;Bit8u nbcols;Bit8u cheight;
18463                       0000468E            _vgamem_copy_cga:
18464                                           !BCC_EOS
18465                                           !BCC_EOS
18466                                           !BCC_EOS
18467                                           !BCC_EOS
18468                                           !BCC_EOS
18469                                           !BCC_EOS
18470                                           ! 2026 {
18471                                           ! 2027  Bit16u src,dest;
18472                                           !BCC_EOS
18473                                           ! 2028  Bit8u i;
18474                                           !BCC_EOS
18475                                           ! 2029  src=((ysrc*cheight*nbcols)>>1)+xstart;
18476 468E           55                         push	bp
18477 468F           89E5                       mov	bp,sp
18478 4691           83C4                   FA  add	sp,*-6
18479                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ysrc = [S+8+4] (used reg = )
18480 4694           8A46         0E            mov	al,$E[bp]
18481 4697           30E4                       xor	ah,ah
18482 4699           89C3                       mov	bx,ax
18483 469B           8A46         06            mov	al,6[bp]
18484 469E           30E4                       xor	ah,ah
18485 46A0           89D9                       mov	cx,bx
18486 46A2           F7E9                       imul	cx
18487                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18488 46A4           89C3                       mov	bx,ax
18489 46A6           8A46         0C            mov	al,$C[bp]
18490 46A9           30E4                       xor	ah,ah
18491 46AB           93                         xchg	ax,bx
18492 46AC           89D9                       mov	cx,bx
18493 46AE           F7E9                       imul	cx
18494                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
18495 46B0           D1E8                       shr	ax,*1
18496                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18497 46B2           0246         04            add	al,4[bp]
18498 46B5           80D4                   00  adc	ah,*0
18499                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+8-4] (used reg = )
18500 46B8           8946         FE            mov	-2[bp],ax
18501                                           !BCC_EOS
18502                                           ! 2030  dest=((ydest*cheight*nbcols)>>1)+xstart;
18503                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ydest = [S+8+6] (used reg = )
18504 46BB           8A46         0E            mov	al,$E[bp]
18505 46BE           30E4                       xor	ah,ah
18506 46C0           89C3                       mov	bx,ax
18507 46C2           8A46         08            mov	al,8[bp]
18508 46C5           30E4                       xor	ah,ah
18509 46C7           89D9                       mov	cx,bx
18510 46C9           F7E9                       imul	cx
18511                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18512 46CB           89C3                       mov	bx,ax
18513 46CD           8A46         0C            mov	al,$C[bp]
18514 46D0           30E4                       xor	ah,ah
18515 46D2           93                         xchg	ax,bx
18516 46D3           89D9                       mov	cx,bx
18517 46D5           F7E9                       imul	cx
18518                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
18519 46D7           D1E8                       shr	ax,*1
18520                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18521 46D9           0246         04            add	al,4[bp]
18522 46DC           80D4                   00  adc	ah,*0
18523                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+8-6] (used reg = )
18524 46DF           8946         FC            mov	-4[bp],ax
18525                                           !BCC_EOS
18526                                           ! 2031  for(i=0;i<cheight;i++)
18527                                           ! Debug: eq int = const 0 to unsigned char i = [S+8-7] (used reg = )
18528 46E2           30C0                       xor	al,al
18529 46E4           8846         FB            mov	-5[bp],al
18530                                           !BCC_EOS
18531                                           !BCC_EOS
18532                                           ! 2032   {
18533 46E7           E9         00A8            br 	.A9
18534                       000046EA            .AA:
18535                                           ! 2033    if (i & 1)
18536                                           ! Debug: and int = const 1 to unsigned char i = [S+8-7] (used reg = )
18537 46EA           8A46         FB            mov	al,-5[bp]
18538 46ED           24                     01  and	al,*1
18539 46EF           84C0                       test	al,al
18540 46F1           74           56            je  	.AB
18541                       000046F3            .AC:
18542                                           ! 2034      memcpyb(0xb800,0x2000+dest+(i>>1)*nbcols,0xb800,0x2000+src+(i>>1)*nbcols,cols);
18543                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
18544 46F3           8A46         0A            mov	al,$A[bp]
18545 46F6           30E4                       xor	ah,ah
18546 46F8           50                         push	ax
18547                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-7] (used reg = )
18548 46F9           8A46         FB            mov	al,-5[bp]
18549 46FC           30E4                       xor	ah,ah
18550 46FE           D1E8                       shr	ax,*1
18551                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned int = ax+0 (used reg = )
18552 4700           89C3                       mov	bx,ax
18553 4702           8A46         0C            mov	al,$C[bp]
18554 4705           30E4                       xor	ah,ah
18555 4707           93                         xchg	ax,bx
18556 4708           89D9                       mov	cx,bx
18557 470A           F7E9                       imul	cx
18558 470C           50                         push	ax
18559                                           ! Debug: add unsigned short src = [S+$C-4] to int = const $2000 (used reg = )
18560                                           ! Debug: expression subtree swapping
18561 470D           8B46         FE            mov	ax,-2[bp]
18562                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+$2000 (used reg = )
18563 4710           05                   2000  add	ax,#$2000
18564 4713           0346         F6            add	ax,-$A[bp]
18565 4716           44                         inc	sp
18566 4717           44                         inc	sp
18567                                           ! Debug: list unsigned int = ax+0 (used reg = )
18568 4718           50                         push	ax
18569                                           ! Debug: list unsigned int = const $B800 (used reg = )
18570 4719           B8                   B800  mov	ax,#$B800
18571 471C           50                         push	ax
18572                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-7] (used reg = )
18573 471D           8A46         FB            mov	al,-5[bp]
18574 4720           30E4                       xor	ah,ah
18575 4722           D1E8                       shr	ax,*1
18576                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
18577 4724           89C3                       mov	bx,ax
18578 4726           8A46         0C            mov	al,$C[bp]
18579 4729           30E4                       xor	ah,ah
18580 472B           93                         xchg	ax,bx
18581 472C           89D9                       mov	cx,bx
18582 472E           F7E9                       imul	cx
18583 4730           50                         push	ax
18584                                           ! Debug: add unsigned short dest = [S+$10-6] to int = const $2000 (used reg = )
18585                                           ! Debug: expression subtree swapping
18586 4731           8B46         FC            mov	ax,-4[bp]
18587                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+$2000 (used reg = )
18588 4734           05                   2000  add	ax,#$2000
18589 4737           0346         F2            add	ax,-$E[bp]
18590 473A           44                         inc	sp
18591 473B           44                         inc	sp
18592                                           ! Debug: list unsigned int = ax+0 (used reg = )
18593 473C           50                         push	ax
18594                                           ! Debug: list unsigned int = const $B800 (used reg = )
18595 473D           B8                   B800  mov	ax,#$B800
18596 4740           50                         push	ax
18597                                           ! Debug: func () void = memcpyb+0 (used reg = )
18598 4741           E8         32FC            call	_memcpyb
18599 4744           83C4                   0A  add	sp,*$A
18600                                           !BCC_EOS
18601                                           ! 2035    else
18602                                           ! 2036      memcpyb(0xb800,dest+(i>>1)*nbcols,0xb800,src+(i>>1)*nbcols,cols);
18603 4747           EB           42            jmp .AD
18604                       00004749            .AB:
18605                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
18606 4749           8A46         0A            mov	al,$A[bp]
18607 474C           30E4                       xor	ah,ah
18608 474E           50                         push	ax
18609                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-7] (used reg = )
18610 474F           8A46         FB            mov	al,-5[bp]
18611 4752           30E4                       xor	ah,ah
18612 4754           D1E8                       shr	ax,*1
18613                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned int = ax+0 (used reg = )
18614 4756           89C3                       mov	bx,ax
18615 4758           8A46         0C            mov	al,$C[bp]
18616 475B           30E4                       xor	ah,ah
18617 475D           93                         xchg	ax,bx
18618 475E           89D9                       mov	cx,bx
18619 4760           F7E9                       imul	cx
18620                                           ! Debug: add unsigned int = ax+0 to unsigned short src = [S+$A-4] (used reg = )
18621                                           ! Debug: expression subtree swapping
18622 4762           0346         FE            add	ax,-2[bp]
18623                                           ! Debug: list unsigned int = ax+0 (used reg = )
18624 4765           50                         push	ax
18625                                           ! Debug: list unsigned int = const $B800 (used reg = )
18626 4766           B8                   B800  mov	ax,#$B800
18627 4769           50                         push	ax
18628                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-7] (used reg = )
18629 476A           8A46         FB            mov	al,-5[bp]
18630 476D           30E4                       xor	ah,ah
18631 476F           D1E8                       shr	ax,*1
18632                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
18633 4771           89C3                       mov	bx,ax
18634 4773           8A46         0C            mov	al,$C[bp]
18635 4776           30E4                       xor	ah,ah
18636 4778           93                         xchg	ax,bx
18637 4779           89D9                       mov	cx,bx
18638 477B           F7E9                       imul	cx
18639                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$E-6] (used reg = )
18640                                           ! Debug: expression subtree swapping
18641 477D           0346         FC            add	ax,-4[bp]
18642                                           ! Debug: list unsigned int = ax+0 (used reg = )
18643 4780           50                         push	ax
18644                                           ! Debug: list unsigned int = const $B800 (used reg = )
18645 4781           B8                   B800  mov	ax,#$B800
18646 4784           50                         push	ax
18647                                           ! Debug: func () void = memcpyb+0 (used reg = )
18648 4785           E8         32B8            call	_memcpyb
18649 4788           83C4                   0A  add	sp,*$A
18650                                           !BCC_EOS
18651                                           ! 2037   }
18652                       0000478B            .AD:
18653                                           ! 2038 }
18654                       0000478B            .A8:
18655                                           ! Debug: postinc unsigned char i = [S+8-7] (used reg = )
18656 478B           8A46         FB            mov	al,-5[bp]
18657 478E           40                         inc	ax
18658 478F           8846         FB            mov	-5[bp],al
18659                       00004792            .A9:
18660                                           ! Debug: lt unsigned char cheight = [S+8+$C] to unsigned char i = [S+8-7] (used reg = )
18661 4792           8A46         FB            mov	al,-5[bp]
18662 4795           3A46         0E            cmp	al,$E[bp]
18663 4798         0F82         FF4E            blo 	.AA
18664                       0000479C            .AE:
18665                       0000479C            .A7:
18666 479C           89EC                       mov	sp,bp
18667 479E           5D                         pop	bp
18668 479F           C3                         ret
18669                                           ! 2039 static void vgamem_fill_cga(xstart,ystart,cols,nbcols,cheight,attr)
18670                                           ! Register BX used in function vgamem_copy_cga
18671                                           ! 2040 Bit8u xstart;Bit8u ystart;Bit8u cols;Bit8u nbcols;Bit8u c
18672                       000047A0            _vgamem_fill_cga:
18673                                           !BCC_EOS
18674                                           !BCC_EOS
18675                                           !BCC_EOS
18676                                           !BCC_EOS
18677                                           ! 2040 height;Bit8u attr;
18678                                           !BCC_EOS
18679                                           !BCC_EOS
18680                                           ! 2041 {
18681                                           ! 2042  Bit16u dest;
18682                                           !BCC_EOS
18683                                           ! 2043  Bit8u i;
18684                                           !BCC_EOS
18685                                           ! 2044  dest=((ystart*cheight*nbcols)>>1)+xstart;
18686 47A0           55                         push	bp
18687 47A1           89E5                       mov	bp,sp
18688 47A3           83C4                   FC  add	sp,*-4
18689                                           ! Debug: mul unsigned char cheight = [S+6+$A] to unsigned char ystart = [S+6+4] (used reg = )
18690 47A6           8A46         0C            mov	al,$C[bp]
18691 47A9           30E4                       xor	ah,ah
18692 47AB           89C3                       mov	bx,ax
18693 47AD           8A46         06            mov	al,6[bp]
18694 47B0           30E4                       xor	ah,ah
18695 47B2           89D9                       mov	cx,bx
18696 47B4           F7E9                       imul	cx
18697                                           ! Debug: mul unsigned char nbcols = [S+6+8] to unsigned int = ax+0 (used reg = )
18698 47B6           89C3                       mov	bx,ax
18699 47B8           8A46         0A            mov	al,$A[bp]
18700 47BB           30E4                       xor	ah,ah
18701 47BD           93                         xchg	ax,bx
18702 47BE           89D9                       mov	cx,bx
18703 47C0           F7E9                       imul	cx
18704                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
18705 47C2           D1E8                       shr	ax,*1
18706                                           ! Debug: add unsigned char xstart = [S+6+2] to unsigned int = ax+0 (used reg = )
18707 47C4           0246         04            add	al,4[bp]
18708 47C7           80D4                   00  adc	ah,*0
18709                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+6-4] (used reg = )
18710 47CA           8946         FE            mov	-2[bp],ax
18711                                           !BCC_EOS
18712                                           ! 2045  for(i=0;i<cheight;i++)
18713                                           ! Debug: eq int = const 0 to unsigned char i = [S+6-5] (used reg = )
18714 47CD           30C0                       xor	al,al
18715 47CF           8846         FD            mov	-3[bp],al
18716                                           !BCC_EOS
18717                                           !BCC_EOS
18718                                           ! 2046   {
18719 47D2           EB           75            jmp .B1
18720                       000047D4            .B2:
18721                                           ! 2047    if (i & 1)
18722                                           ! Debug: and int = const 1 to unsigned char i = [S+6-5] (used reg = )
18723 47D4           8A46         FD            mov	al,-3[bp]
18724 47D7           24                     01  and	al,*1
18725 47D9           84C0                       test	al,al
18726 47DB           74           38            je  	.B3
18727                       000047DD            .B4:
18728                                           ! 2048      memsetb(0xb800,0x2000+dest+(i>>1)*nbcols,attr,cols);
18729                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
18730 47DD           8A46         08            mov	al,8[bp]
18731 47E0           30E4                       xor	ah,ah
18732 47E2           50                         push	ax
18733                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
18734 47E3           8A46         0E            mov	al,$E[bp]
18735 47E6           30E4                       xor	ah,ah
18736 47E8           50                         push	ax
18737                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-5] (used reg = )
18738 47E9           8A46         FD            mov	al,-3[bp]
18739 47EC           30E4                       xor	ah,ah
18740 47EE           D1E8                       shr	ax,*1
18741                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned int = ax+0 (used reg = )
18742 47F0           89C3                       mov	bx,ax
18743 47F2           8A46         0A            mov	al,$A[bp]
18744 47F5           30E4                       xor	ah,ah
18745 47F7           93                         xchg	ax,bx
18746 47F8           89D9                       mov	cx,bx
18747 47FA           F7E9                       imul	cx
18748 47FC           50                         push	ax
18749                                           ! Debug: add unsigned short dest = [S+$C-4] to int = const $2000 (used reg = )
18750                                           ! Debug: expression subtree swapping
18751 47FD           8B46         FE            mov	ax,-2[bp]
18752                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+$2000 (used reg = )
18753 4800           05                   2000  add	ax,#$2000
18754 4803           0346         F6            add	ax,-$A[bp]
18755 4806           44                         inc	sp
18756 4807           44                         inc	sp
18757                                           ! Debug: list unsigned int = ax+0 (used reg = )
18758 4808           50                         push	ax
18759                                           ! Debug: list unsigned int = const $B800 (used reg = )
18760 4809           B8                   B800  mov	ax,#$B800
18761 480C           50                         push	ax
18762                                           ! Debug: func () void = memsetb+0 (used reg = )
18763 480D           E8         31E6            call	_memsetb
18764 4810           83C4                   08  add	sp,*8
18765                                           !BCC_EOS
18766                                           ! 2049    else
18767                                           ! 2050      memsetb(0xb800,dest+(i>>1)*nbcols,attr,cols);
18768 4813           EB           2D            jmp .B5
18769                       00004815            .B3:
18770                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
18771 4815           8A46         08            mov	al,8[bp]
18772 4818           30E4                       xor	ah,ah
18773 481A           50                         push	ax
18774                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
18775 481B           8A46         0E            mov	al,$E[bp]
18776 481E           30E4                       xor	ah,ah
18777 4820           50                         push	ax
18778                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-5] (used reg = )
18779 4821           8A46         FD            mov	al,-3[bp]
18780 4824           30E4                       xor	ah,ah
18781 4826           D1E8                       shr	ax,*1
18782                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned int = ax+0 (used reg = )
18783 4828           89C3                       mov	bx,ax
18784 482A           8A46         0A            mov	al,$A[bp]
18785 482D           30E4                       xor	ah,ah
18786 482F           93                         xchg	ax,bx
18787 4830           89D9                       mov	cx,bx
18788 4832           F7E9                       imul	cx
18789                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$A-4] (used reg = )
18790                                           ! Debug: expression subtree swapping
18791 4834           0346         FE            add	ax,-2[bp]
18792                                           ! Debug: list unsigned int = ax+0 (used reg = )
18793 4837           50                         push	ax
18794                                           ! Debug: list unsigned int = const $B800 (used reg = )
18795 4838           B8                   B800  mov	ax,#$B800
18796 483B           50                         push	ax
18797                                           ! Debug: func () void = memsetb+0 (used reg = )
18798 483C           E8         31B7            call	_memsetb
18799 483F           83C4                   08  add	sp,*8
18800                                           !BCC_EOS
18801                                           ! 2051   }
18802                       00004842            .B5:
18803                                           ! 2052 }
18804                       00004842            .B0:
18805                                           ! Debug: postinc unsigned char i = [S+6-5] (used reg = )
18806 4842           8A46         FD            mov	al,-3[bp]
18807 4845           40                         inc	ax
18808 4846           8846         FD            mov	-3[bp],al
18809                       00004849            .B1:
18810                                           ! Debug: lt unsigned char cheight = [S+6+$A] to unsigned char i = [S+6-5] (used reg = )
18811 4849           8A46         FD            mov	al,-3[bp]
18812 484C           3A46         0C            cmp	al,$C[bp]
18813 484F           72           83            jb 	.B2
18814                       00004851            .B6:
18815                       00004851            .AF:
18816 4851           89EC                       mov	sp,bp
18817 4853           5D                         pop	bp
18818 4854           C3                         ret
18819                                           ! 2053 static void biosfn_scroll (nblines,attr,rul,cul,rlr,clr,page,dir)
18820                                           ! Register BX used in function vgamem_fill_cga
18821                                           ! 2054 Bit8u nblines;Bit8u attr;Bit8u rul;Bit8u cul;Bit8u rlr;Bit8u clr;Bit8u page;Bit8u dir;
18822                       00004855            _biosfn_scroll:
18823                                           !BCC_EOS
18824                                           !BCC_EOS
18825                                           !BCC_EOS
18826                                           !BCC_EOS
18827                                           !BCC_EOS
18828                                           !BCC_EOS
18829                                           !BCC_EOS
18830                                           !BCC_EOS
18831                                           ! 2055 {
18832                                           ! 2056  Bit8u mode,line,cheight,bpp,cols;
18833                                           !BCC_EOS
18834                                           ! 2057  Bit16u nbcols,nbrows,i;
18835                                           !BCC_EOS
18836                                           ! 2058  Bit16u address;
18837                                           !BCC_EOS
18838                                           ! 2059  if(rul>rlr)return;
18839 4855           55                         push	bp
18840 4856           89E5                       mov	bp,sp
18841 4858           83C4                   F2  add	sp,*-$E
18842                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned char rul = [S+$10+6] (used reg = )
18843 485B           8A46         08            mov	al,8[bp]
18844 485E           3A46         0C            cmp	al,$C[bp]
18845 4861           76           04            jbe 	.B7
18846                       00004863            .B8:
18847 4863           89EC                       mov	sp,bp
18848 4865           5D                         pop	bp
18849 4866           C3                         ret
18850                                           !BCC_EOS
18851                                           ! 2060  if(cul>clr)return;
18852                       00004867            .B7:
18853                                           ! Debug: gt unsigned char clr = [S+$10+$C] to unsigned char cul = [S+$10+8] (used reg = )
18854 4867           8A46         0A            mov	al,$A[bp]
18855 486A           3A46         0E            cmp	al,$E[bp]
18856 486D           76           04            jbe 	.B9
18857                       0000486F            .BA:
18858 486F           89EC                       mov	sp,bp
18859 4871           5D                         pop	bp
18860 4872           C3                         ret
18861                                           !BCC_EOS
18862                                           ! 2061  mode=read_byte(0x40,0x49);
18863                       00004873            .B9:
18864                                           ! Debug: list int = const $49 (used reg = )
18865 4873           B8                   0049  mov	ax,*$49
18866 4876           50                         push	ax
18867                                           ! Debug: list int = const $40 (used reg = )
18868 4877           B8                   0040  mov	ax,*$40
18869 487A           50                         push	ax
18870                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18871 487B           E8         3222            call	_read_byte
18872 487E           83C4                   04  add	sp,*4
18873                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$10-3] (used reg = )
18874 4881           8846         FF            mov	-1[bp],al
18875                                           !BCC_EOS
18876                                           ! 2062  line=find_vga_entry(mode);
18877                                           ! Debug: list unsigned char mode = [S+$10-3] (used reg = )
18878 4884           8A46         FF            mov	al,-1[bp]
18879 4887           30E4                       xor	ah,ah
18880 4889           50                         push	ax
18881                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
18882 488A           E8         3127            call	_find_vga_entry
18883 488D           44                         inc	sp
18884 488E           44                         inc	sp
18885                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$10-4] (used reg = )
18886 488F           8846         FE            mov	-2[bp],al
18887                                           !BCC_EOS
18888                                           ! 2063  if(line==0xFF)return;
18889                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$10-4] (used reg = )
18890 4892           8A46         FE            mov	al,-2[bp]
18891 4895           3C                     FF  cmp	al,#$FF
18892 4897           75           04            jne 	.BB
18893                       00004899            .BC:
18894 4899           89EC                       mov	sp,bp
18895 489B           5D                         pop	bp
18896 489C           C3                         ret
18897                                           !BCC_EOS
18898                                           ! 2064  nbrows=read_byte(0x40,0x84)+1;
18899                       0000489D            .BB:
18900                                           ! Debug: list int = const $84 (used reg = )
18901 489D           B8                   0084  mov	ax,#$84
18902 48A0           50                         push	ax
18903                                           ! Debug: list int = const $40 (used reg = )
18904 48A1           B8                   0040  mov	ax,*$40
18905 48A4           50                         push	ax
18906                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18907 48A5           E8         31F8            call	_read_byte
18908 48A8           83C4                   04  add	sp,*4
18909                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
18910 48AB           30E4                       xor	ah,ah
18911                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$10-$C] (used reg = )
18912 48AD           40                         inc	ax
18913 48AE           8946         F6            mov	-$A[bp],ax
18914                                           !BCC_EOS
18915                                           ! 2065  nbcols=read_word(0x40,0x4A);
18916                                           ! Debug: list int = const $4A (used reg = )
18917 48B1           B8                   004A  mov	ax,*$4A
18918 48B4           50                         push	ax
18919                                           ! Debug: list int = const $40 (used reg = )
18920 48B5           B8                   0040  mov	ax,*$40
18921 48B8           50                         push	ax
18922                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18923 48B9           E8         31F7            call	_read_word
18924 48BC           83C4                   04  add	sp,*4
18925                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$10-$A] (used reg = )
18926 48BF           8946         F8            mov	-8[bp],ax
18927                                           !BCC_EOS
18928                                           ! 2066  if(page==0xFF)
18929                                           ! Debug: logeq int = const $FF to unsigned char page = [S+$10+$E] (used reg = )
18930 48C2           8A46         10            mov	al,$10[bp]
18931 48C5           3C                     FF  cmp	al,#$FF
18932 48C7           75           11            jne 	.BD
18933                       000048C9            .BE:
18934                                           ! 2067   page=read_byte(0x40,0x62);
18935                                           ! Debug: list int = const $62 (used reg = )
18936 48C9           B8                   0062  mov	ax,*$62
18937 48CC           50                         push	ax
18938                                           ! Debug: list int = const $40 (used reg = )
18939 48CD           B8                   0040  mov	ax,*$40
18940 48D0           50                         push	ax
18941                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18942 48D1           E8         31CC            call	_read_byte
18943 48D4           83C4                   04  add	sp,*4
18944                                           ! Debug: eq unsigned char = al+0 to unsigned char page = [S+$10+$E] (used reg = )
18945 48D7           8846         10            mov	$10[bp],al
18946                                           !BCC_EOS
18947                                           ! 2068  if(rlr>=nbrows)rlr=nbrows-1;
18948                       000048DA            .BD:
18949                                           ! Debug: ge unsigned short nbrows = [S+$10-$C] to unsigned char rlr = [S+$10+$A] (used reg = )
18950 48DA           8A46         0C            mov	al,$C[bp]
18951 48DD           30E4                       xor	ah,ah
18952 48DF           3B46         F6            cmp	ax,-$A[bp]
18953 48E2           72           07            jb  	.BF
18954                       000048E4            .C0:
18955                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
18956 48E4           8B46         F6            mov	ax,-$A[bp]
18957                                           ! Debug: eq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
18958 48E7           48                         dec	ax
18959 48E8           8846         0C            mov	$C[bp],al
18960                                           !BCC_EOS
18961                                           ! 2069  if(clr>=nbcols)clr=nbcols-1;
18962                       000048EB            .BF:
18963                                           ! Debug: ge unsigned short nbcols = [S+$10-$A] to unsigned char clr = [S+$10+$C] (used reg = )
18964 48EB           8A46         0E            mov	al,$E[bp]
18965 48EE           30E4                       xor	ah,ah
18966 48F0           3B46         F8            cmp	ax,-8[bp]
18967 48F3           72           07            jb  	.C1
18968                       000048F5            .C2:
18969                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
18970 48F5           8B46         F8            mov	ax,-8[bp]
18971                                           ! Debug: eq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
18972 48F8           48                         dec	ax
18973 48F9           8846         0E            mov	$E[bp],al
18974                                           !BCC_EOS
18975                                           ! 2070  if(nblines>nbrows)nblines=0;
18976                       000048FC            .C1:
18977                                           ! Debug: gt unsigned short nbrows = [S+$10-$C] to unsigned char nblines = [S+$10+2] (used reg = )
18978 48FC           8A46         04            mov	al,4[bp]
18979 48FF           30E4                       xor	ah,ah
18980 4901           3B46         F6            cmp	ax,-$A[bp]
18981 4904           76           05            jbe 	.C3
18982                       00004906            .C4:
18983                                           ! Debug: eq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
18984 4906           30C0                       xor	al,al
18985 4908           8846         04            mov	4[bp],al
18986                                           !BCC_EOS
18987                                           ! 2071  cols=clr-cul+1;
18988                       0000490B            .C3:
18989                                           ! Debug: sub unsigned char cul = [S+$10+8] to unsigned char clr = [S+$10+$C] (used reg = )
18990 490B           8A46         0E            mov	al,$E[bp]
18991 490E           30E4                       xor	ah,ah
18992 4910           2A46         0A            sub	al,$A[bp]
18993 4913           80DC                   00  sbb	ah,*0
18994                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
18995                                           ! Debug: eq unsigned int = ax+1 to unsigned char cols = [S+$10-7] (used reg = )
18996 4916           40                         inc	ax
18997 4917           8846         FB            mov	-5[bp],al
18998                                           !BCC_EOS
18999                                           ! 2072  if(vga_modes[line].class==0x00)
19000                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] struct  = vga_modes+0 (used reg = )
19001 491A           8A46         FE            mov	al,-2[bp]
19002 491D           30E4                       xor	ah,ah
19003 491F           B1                     03  mov	cl,*3
19004 4921           D3E0                       shl	ax,cl
19005 4923           89C3                       mov	bx,ax
19006 4925           81C3                 01DA  add	bx,#_vga_modes
19007                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
19008 4929           8A47         01            mov	al,1[bx]
19009 492C           84C0                       test	al,al
19010 492E         0F85         0250            bne 	.C5
19011                       00004932            .C6:
19012                                           ! 2073   {
19013                                           ! 2074    address=((((nbcols*nbrows*2)|0x00ff)+1)*page);
19014                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
19015 4932           8B46         F8            mov	ax,-8[bp]
19016 4935           8B4E         F6            mov	cx,-$A[bp]
19017 4938           F7E9                       imul	cx
19018                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19019 493A           D1E0                       shl	ax,*1
19020                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
19021 493C           0C                     FF  or	al,#$FF
19022                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
19023                                           ! Debug: mul unsigned char page = [S+$10+$E] to unsigned int = ax+1 (used reg = )
19024 493E           89C3                       mov	bx,ax
19025 4940           8A46         10            mov	al,$10[bp]
19026 4943           30E4                       xor	ah,ah
19027 4945           93                         xchg	ax,bx
19028 4946           40                         inc	ax
19029 4947           89D9                       mov	cx,bx
19030 4949           F7E9                       imul	cx
19031                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$10] (used reg = )
19032 494B           8946         F2            mov	-$E[bp],ax
19033                                           !BCC_EOS
19034                                           ! 2075    if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
19035                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19036 494E           8A46         04            mov	al,4[bp]
19037 4951           84C0                       test	al,al
19038 4953           75           67            jne 	.C7
19039                       00004955            .CC:
19040                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
19041 4955           8A46         08            mov	al,8[bp]
19042 4958           84C0                       test	al,al
19043 495A           75           60            jne 	.C7
19044                       0000495C            .CB:
19045                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
19046 495C           8A46         0A            mov	al,$A[bp]
19047 495F           84C0                       test	al,al
19048 4961           75           59            jne 	.C7
19049                       00004963            .CA:
19050                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19051 4963           8B46         F6            mov	ax,-$A[bp]
19052                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
19053                                           ! Debug: expression subtree swapping
19054 4966           48                         dec	ax
19055 4967           50                         push	ax
19056 4968           8A46         0C            mov	al,$C[bp]
19057 496B           30E4                       xor	ah,ah
19058 496D           3B46         F0            cmp	ax,-$10[bp]
19059 4970           8D66         F2            lea	sp,-$E[bp]
19060 4973           75           47            jne 	.C7
19061                       00004975            .C9:
19062                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19063 4975           8B46         F8            mov	ax,-8[bp]
19064                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
19065                                           ! Debug: expression subtree swapping
19066 4978           48                         dec	ax
19067 4979           50                         push	ax
19068 497A           8A46         0E            mov	al,$E[bp]
19069 497D           30E4                       xor	ah,ah
19070 497F           3B46         F0            cmp	ax,-$10[bp]
19071 4982           8D66         F2            lea	sp,-$E[bp]
19072 4985           75           35            jne 	.C7
19073                       00004987            .C8:
19074                                           ! 2076     {
19075                                           ! 2077      memsetw(vga_modes[line].sstart,address,(Bit16u)attr*0x100+' ',nbrows*nbcols);
19076                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
19077 4987           8B46         F6            mov	ax,-$A[bp]
19078 498A           8B4E         F8            mov	cx,-8[bp]
19079 498D           F7E9                       imul	cx
19080                                           ! Debug: list unsigned int = ax+0 (used reg = )
19081 498F           50                         push	ax
19082                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19083 4990           8A46         06            mov	al,6[bp]
19084 4993           30E4                       xor	ah,ah
19085                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19086 4995           B9                   0100  mov	cx,#$100
19087 4998           F7E9                       imul	cx
19088                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19089                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19090 499A           05                   0020  add	ax,*$20
19091 499D           50                         push	ax
19092                                           ! Debug: list unsigned short address = [S+$14-$10] (used reg = )
19093 499E           FF76         F2            push	-$E[bp]
19094                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19095 49A1           8A46         FE            mov	al,-2[bp]
19096 49A4           30E4                       xor	ah,ah
19097 49A6           B1                     03  mov	cl,*3
19098 49A8           D3E0                       shl	ax,cl
19099 49AA           89C3                       mov	bx,ax
19100 49AC           81C3                 01DA  add	bx,#_vga_modes
19101                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19102 49B0           FF77         04            push	4[bx]
19103                                           ! Debug: func () void = memsetw+0 (used reg = )
19104 49B3           E8         3065            call	_memsetw
19105 49B6           83C4                   08  add	sp,*8
19106                                           !BCC_EOS
19107                                           ! 2078     }
19108                                           ! 2079    else
19109                                           ! 2080     {
19110 49B9           E9         01C3            br 	.CD
19111                       000049BC            .C7:
19112                                           ! 2081      if(dir==1)
19113                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
19114 49BC           8A46         12            mov	al,$12[bp]
19115 49BF           3C                     01  cmp	al,*1
19116 49C1         0F85         00DC            bne 	.CE
19117                       000049C5            .CF:
19118                                           ! 2082       {for(i=rul;i<=rlr;i++)
19119                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
19120 49C5           8A46         08            mov	al,8[bp]
19121 49C8           30E4                       xor	ah,ah
19122 49CA           8946         F4            mov	-$C[bp],ax
19123                                           !BCC_EOS
19124                                           !BCC_EOS
19125                                           ! 2083         {
19126 49CD           E9         00C2            br 	.D2
19127                       000049D0            .D3:
19128                                           ! 2084          if((i+nblines>rlr)||(nblines==0))
19129                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
19130 49D0           8B46         F4            mov	ax,-$C[bp]
19131 49D3           0246         04            add	al,4[bp]
19132 49D6           80D4                   00  adc	ah,*0
19133                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
19134 49D9           50                         push	ax
19135 49DA           8A46         0C            mov	al,$C[bp]
19136 49DD           30E4                       xor	ah,ah
19137 49DF           3B46         F0            cmp	ax,-$10[bp]
19138 49E2           8D66         F2            lea	sp,-$E[bp]
19139 49E5           72           07            jb  	.D5
19140                       000049E7            .D6:
19141                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19142 49E7           8A46         04            mov	al,4[bp]
19143 49EA           84C0                       test	al,al
19144 49EC           75           42            jne 	.D4
19145                       000049EE            .D5:
19146                                           ! 2085           memsetw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,(Bit16u)attr*0x100+' ',cols);
19147                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19148 49EE           8A46         FB            mov	al,-5[bp]
19149 49F1           30E4                       xor	ah,ah
19150 49F3           50                         push	ax
19151                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19152 49F4           8A46         06            mov	al,6[bp]
19153 49F7           30E4                       xor	ah,ah
19154                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19155 49F9           B9                   0100  mov	cx,#$100
19156 49FC           F7E9                       imul	cx
19157                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19158                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19159 49FE           05                   0020  add	ax,*$20
19160 4A01           50                         push	ax
19161                                           ! Debug: mul unsigned short nbcols = [S+$14-$A] to unsigned short i = [S+$14-$E] (used reg = )
19162 4A02           8B46         F4            mov	ax,-$C[bp]
19163 4A05           8B4E         F8            mov	cx,-8[bp]
19164 4A08           F7E9                       imul	cx
19165                                           ! Debug: add unsigned char cul = [S+$14+8] to unsigned int = ax+0 (used reg = )
19166 4A0A           0246         0A            add	al,$A[bp]
19167 4A0D           80D4                   00  adc	ah,*0
19168                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19169 4A10           D1E0                       shl	ax,*1
19170                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$14-$10] (used reg = )
19171                                           ! Debug: expression subtree swapping
19172 4A12           0346         F2            add	ax,-$E[bp]
19173                                           ! Debug: list unsigned int = ax+0 (used reg = )
19174 4A15           50                         push	ax
19175                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19176 4A16           8A46         FE            mov	al,-2[bp]
19177 4A19           30E4                       xor	ah,ah
19178 4A1B           B1                     03  mov	cl,*3
19179 4A1D           D3E0                       shl	ax,cl
19180 4A1F           89C3                       mov	bx,ax
19181 4A21           81C3                 01DA  add	bx,#_vga_modes
19182                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19183 4A25           FF77         04            push	4[bx]
19184                                           ! Debug: func () void = memsetw+0 (used reg = )
19185 4A28           E8         2FF0            call	_memsetw
19186 4A2B           83C4                   08  add	sp,*8
19187                                           !BCC_EOS
19188                                           ! 2086          else
19189                                           ! 2087           memcpyw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,vga_modes[line].sstart,((i+nblines)*nbcols+cul)*2,cols);
19190 4A2E           EB           5B            jmp .D7
19191                       00004A30            .D4:
19192                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19193 4A30           8A46         FB            mov	al,-5[bp]
19194 4A33           30E4                       xor	ah,ah
19195 4A35           50                         push	ax
19196                                           ! Debug: add unsigned char nblines = [S+$12+2] to unsigned short i = [S+$12-$E] (used reg = )
19197 4A36           8B46         F4            mov	ax,-$C[bp]
19198 4A39           0246         04            add	al,4[bp]
19199 4A3C           80D4                   00  adc	ah,*0
19200                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned int = ax+0 (used reg = )
19201 4A3F           8B4E         F8            mov	cx,-8[bp]
19202 4A42           F7E9                       imul	cx
19203                                           ! Debug: add unsigned char cul = [S+$12+8] to unsigned int = ax+0 (used reg = )
19204 4A44           0246         0A            add	al,$A[bp]
19205 4A47           80D4                   00  adc	ah,*0
19206                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19207 4A4A           D1E0                       shl	ax,*1
19208                                           ! Debug: list unsigned int = ax+0 (used reg = )
19209 4A4C           50                         push	ax
19210                                           ! Debug: ptradd unsigned char line = [S+$14-4] to [$10] struct  = vga_modes+0 (used reg = )
19211 4A4D           8A46         FE            mov	al,-2[bp]
19212 4A50           30E4                       xor	ah,ah
19213 4A52           B1                     03  mov	cl,*3
19214 4A54           D3E0                       shl	ax,cl
19215 4A56           89C3                       mov	bx,ax
19216 4A58           81C3                 01DA  add	bx,#_vga_modes
19217                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19218 4A5C           FF77         04            push	4[bx]
19219                                           ! Debug: mul unsigned short nbcols = [S+$16-$A] to unsigned short i = [S+$16-$E] (used reg = )
19220 4A5F           8B46         F4            mov	ax,-$C[bp]
19221 4A62           8B4E         F8            mov	cx,-8[bp]
19222 4A65           F7E9                       imul	cx
19223                                           ! Debug: add unsigned char cul = [S+$16+8] to unsigned int = ax+0 (used reg = )
19224 4A67           0246         0A            add	al,$A[bp]
19225 4A6A           80D4                   00  adc	ah,*0
19226                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19227 4A6D           D1E0                       shl	ax,*1
19228                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$16-$10] (used reg = )
19229                                           ! Debug: expression subtree swapping
19230 4A6F           0346         F2            add	ax,-$E[bp]
19231                                           ! Debug: list unsigned int = ax+0 (used reg = )
19232 4A72           50                         push	ax
19233                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
19234 4A73           8A46         FE            mov	al,-2[bp]
19235 4A76           30E4                       xor	ah,ah
19236 4A78           B1                     03  mov	cl,*3
19237 4A7A           D3E0                       shl	ax,cl
19238 4A7C           89C3                       mov	bx,ax
19239 4A7E           81C3                 01DA  add	bx,#_vga_modes
19240                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19241 4A82           FF77         04            push	4[bx]
19242                                           ! Debug: func () void = memcpyw+0 (used reg = )
19243 4A85           E8         2FE8            call	_memcpyw
19244 4A88           83C4                   0A  add	sp,*$A
19245                                           !BCC_EOS
19246                                           ! 2088         }
19247                       00004A8B            .D7:
19248                                           ! 2089       }
19249                       00004A8B            .D1:
19250                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
19251 4A8B           8B46         F4            mov	ax,-$C[bp]
19252 4A8E           40                         inc	ax
19253 4A8F           8946         F4            mov	-$C[bp],ax
19254                       00004A92            .D2:
19255                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19256 4A92           8A46         0C            mov	al,$C[bp]
19257 4A95           30E4                       xor	ah,ah
19258 4A97           3B46         F4            cmp	ax,-$C[bp]
19259 4A9A         0F83         FF32            bhis	.D3
19260                       00004A9E            .D8:
19261                       00004A9E            .D0:
19262                                           ! 2090      else
19263                                           ! 2091       {for(i=rlr;i>=rul;i--)
19264 4A9E           E9         00DE            br 	.D9
19265                       00004AA1            .CE:
19266                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19267 4AA1           8A46         0C            mov	al,$C[bp]
19268 4AA4           30E4                       xor	ah,ah
19269 4AA6           8946         F4            mov	-$C[bp],ax
19270                                           !BCC_EOS
19271                                           !BCC_EOS
19272                                           ! 2092         {
19273 4AA9           E9         00C7            br 	.DC
19274                       00004AAC            .DD:
19275                                           ! 2093          if((i<rul+nblines)||(nblines==0))
19276                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
19277 4AAC           8A46         08            mov	al,8[bp]
19278 4AAF           30E4                       xor	ah,ah
19279 4AB1           0246         04            add	al,4[bp]
19280 4AB4           80D4                   00  adc	ah,*0
19281                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
19282 4AB7           3B46         F4            cmp	ax,-$C[bp]
19283 4ABA           77           07            ja  	.DF
19284                       00004ABC            .E0:
19285                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19286 4ABC           8A46         04            mov	al,4[bp]
19287 4ABF           84C0                       test	al,al
19288 4AC1           75           42            jne 	.DE
19289                       00004AC3            .DF:
19290                                           ! 2094           memsetw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,(Bit16u)attr*0x100+' ',cols);
19291                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19292 4AC3           8A46         FB            mov	al,-5[bp]
19293 4AC6           30E4                       xor	ah,ah
19294 4AC8           50                         push	ax
19295                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19296 4AC9           8A46         06            mov	al,6[bp]
19297 4ACC           30E4                       xor	ah,ah
19298                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19299 4ACE           B9                   0100  mov	cx,#$100
19300 4AD1           F7E9                       imul	cx
19301                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19302                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19303 4AD3           05                   0020  add	ax,*$20
19304 4AD6           50                         push	ax
19305                                           ! Debug: mul unsigned short nbcols = [S+$14-$A] to unsigned short i = [S+$14-$E] (used reg = )
19306 4AD7           8B46         F4            mov	ax,-$C[bp]
19307 4ADA           8B4E         F8            mov	cx,-8[bp]
19308 4ADD           F7E9                       imul	cx
19309                                           ! Debug: add unsigned char cul = [S+$14+8] to unsigned int = ax+0 (used reg = )
19310 4ADF           0246         0A            add	al,$A[bp]
19311 4AE2           80D4                   00  adc	ah,*0
19312                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19313 4AE5           D1E0                       shl	ax,*1
19314                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$14-$10] (used reg = )
19315                                           ! Debug: expression subtree swapping
19316 4AE7           0346         F2            add	ax,-$E[bp]
19317                                           ! Debug: list unsigned int = ax+0 (used reg = )
19318 4AEA           50                         push	ax
19319                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19320 4AEB           8A46         FE            mov	al,-2[bp]
19321 4AEE           30E4                       xor	ah,ah
19322 4AF0           B1                     03  mov	cl,*3
19323 4AF2           D3E0                       shl	ax,cl
19324 4AF4           89C3                       mov	bx,ax
19325 4AF6           81C3                 01DA  add	bx,#_vga_modes
19326                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19327 4AFA           FF77         04            push	4[bx]
19328                                           ! Debug: func () void = memsetw+0 (used reg = )
19329 4AFD           E8         2F1B            call	_memsetw
19330 4B00           83C4                   08  add	sp,*8
19331                                           !BCC_EOS
19332                                           ! 2095          else
19333                                           ! 2096           memcpyw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,vga_modes[line].sstart,((i-nblines)*nbcols+cul)*2,cols);
19334 4B03           EB           5B            jmp .E1
19335                       00004B05            .DE:
19336                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19337 4B05           8A46         FB            mov	al,-5[bp]
19338 4B08           30E4                       xor	ah,ah
19339 4B0A           50                         push	ax
19340                                           ! Debug: sub unsigned char nblines = [S+$12+2] to unsigned short i = [S+$12-$E] (used reg = )
19341 4B0B           8B46         F4            mov	ax,-$C[bp]
19342 4B0E           2A46         04            sub	al,4[bp]
19343 4B11           80DC                   00  sbb	ah,*0
19344                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned int = ax+0 (used reg = )
19345 4B14           8B4E         F8            mov	cx,-8[bp]
19346 4B17           F7E9                       imul	cx
19347                                           ! Debug: add unsigned char cul = [S+$12+8] to unsigned int = ax+0 (used reg = )
19348 4B19           0246         0A            add	al,$A[bp]
19349 4B1C           80D4                   00  adc	ah,*0
19350                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19351 4B1F           D1E0                       shl	ax,*1
19352                                           ! Debug: list unsigned int = ax+0 (used reg = )
19353 4B21           50                         push	ax
19354                                           ! Debug: ptradd unsigned char line = [S+$14-4] to [$10] struct  = vga_modes+0 (used reg = )
19355 4B22           8A46         FE            mov	al,-2[bp]
19356 4B25           30E4                       xor	ah,ah
19357 4B27           B1                     03  mov	cl,*3
19358 4B29           D3E0                       shl	ax,cl
19359 4B2B           89C3                       mov	bx,ax
19360 4B2D           81C3                 01DA  add	bx,#_vga_modes
19361                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19362 4B31           FF77         04            push	4[bx]
19363                                           ! Debug: mul unsigned short nbcols = [S+$16-$A] to unsigned short i = [S+$16-$E] (used reg = )
19364 4B34           8B46         F4            mov	ax,-$C[bp]
19365 4B37           8B4E         F8            mov	cx,-8[bp]
19366 4B3A           F7E9                       imul	cx
19367                                           ! Debug: add unsigned char cul = [S+$16+8] to unsigned int = ax+0 (used reg = )
19368 4B3C           0246         0A            add	al,$A[bp]
19369 4B3F           80D4                   00  adc	ah,*0
19370                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19371 4B42           D1E0                       shl	ax,*1
19372                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$16-$10] (used reg = )
19373                                           ! Debug: expression subtree swapping
19374 4B44           0346         F2            add	ax,-$E[bp]
19375                                           ! Debug: list unsigned int = ax+0 (used reg = )
19376 4B47           50                         push	ax
19377                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
19378 4B48           8A46         FE            mov	al,-2[bp]
19379 4B4B           30E4                       xor	ah,ah
19380 4B4D           B1                     03  mov	cl,*3
19381 4B4F           D3E0                       shl	ax,cl
19382 4B51           89C3                       mov	bx,ax
19383 4B53           81C3                 01DA  add	bx,#_vga_modes
19384                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19385 4B57           FF77         04            push	4[bx]
19386                                           ! Debug: func () void = memcpyw+0 (used reg = )
19387 4B5A           E8         2F13            call	_memcpyw
19388 4B5D           83C4                   0A  add	sp,*$A
19389                                           !BCC_EOS
19390                                           ! 2097          if (i>rlr) break;
19391                       00004B60            .E1:
19392                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19393 4B60           8A46         0C            mov	al,$C[bp]
19394 4B63           30E4                       xor	ah,ah
19395 4B65           3B46         F4            cmp	ax,-$C[bp]
19396 4B68           73           02            jae 	.E2
19397                       00004B6A            .E3:
19398 4B6A           EB           13            jmp .DA
19399                                           !BCC_EOS
19400                                           ! 2098         }
19401                       00004B6C            .E2:
19402                                           ! 2099       }
19403                       00004B6C            .DB:
19404                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
19405 4B6C           8B46         F4            mov	ax,-$C[bp]
19406 4B6F           48                         dec	ax
19407 4B70           8946         F4            mov	-$C[bp],ax
19408                       00004B73            .DC:
19409                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
19410 4B73           8A46         08            mov	al,8[bp]
19411 4B76           30E4                       xor	ah,ah
19412 4B78           3B46         F4            cmp	ax,-$C[bp]
19413 4B7B         0F86         FF2D            blos	.DD
19414                       00004B7F            .E4:
19415                       00004B7F            .DA:
19416                                           ! 2100     }
19417                       00004B7F            .D9:
19418                                           ! 2101   }
19419                       00004B7F            .CD:
19420                                           ! 2102  else
19421                                           ! 2103   {
19422 4B7F           E9         03D5            br 	.E5
19423                       00004B82            .C5:
19424                                           ! 2104    cheight=video_param_table[line_to_vpti[line]].cheight;
19425                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] unsigned char = line_to_vpti+0 (used reg = )
19426 4B82           8A46         FE            mov	al,-2[bp]
19427 4B85           30E4                       xor	ah,ah
19428 4B87           89C3                       mov	bx,ax
19429                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
19430 4B89           8A87       025A            mov	al,_line_to_vpti[bx]
19431 4B8D           30E4                       xor	ah,ah
19432 4B8F           B1                     06  mov	cl,*6
19433 4B91           D3E0                       shl	ax,cl
19434 4B93           89C3                       mov	bx,ax
19435 4B95           81C3                 026E  add	bx,#_video_param_table
19436                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$10-5] (used reg = )
19437 4B99           8A47         02            mov	al,2[bx]
19438 4B9C           8846         FD            mov	-3[bp],al
19439                                           !BCC_EOS
19440                                           ! 2105    switch(vga_modes[line].memmodel)
19441                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] struct  = vga_modes+0 (used reg = )
19442 4B9F           8A46         FE            mov	al,-2[bp]
19443 4BA2           30E4                       xor	ah,ah
19444 4BA4           B1                     03  mov	cl,*3
19445 4BA6           D3E0                       shl	ax,cl
19446 4BA8           89C3                       mov	bx,ax
19447 4BAA           81C3                 01DA  add	bx,#_vga_modes
19448 4BAE           8A47         02            mov	al,2[bx]
19449                                           ! 2106     {
19450 4BB1           E9         0391            br 	.E8
19451                                           ! 2107      case 0x04:
19452                                           ! 2108      case 0x03:
19453                       00004BB4            .E9:
19454                                           ! 2109        if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
19455                       00004BB4            .EA:
19456                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19457 4BB4           8A46         04            mov	al,4[bp]
19458 4BB7           84C0                       test	al,al
19459 4BB9         0F85         0089            bne 	.EB
19460                       00004BBD            .F0:
19461                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
19462 4BBD           8A46         08            mov	al,8[bp]
19463 4BC0           84C0                       test	al,al
19464 4BC2         0F85         0080            bne 	.EB
19465                       00004BC6            .EF:
19466                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
19467 4BC6           8A46         0A            mov	al,$A[bp]
19468 4BC9           84C0                       test	al,al
19469 4BCB           75           79            jne 	.EB
19470                       00004BCD            .EE:
19471                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19472 4BCD           8B46         F6            mov	ax,-$A[bp]
19473                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
19474                                           ! Debug: expression subtree swapping
19475 4BD0           48                         dec	ax
19476 4BD1           50                         push	ax
19477 4BD2           8A46         0C            mov	al,$C[bp]
19478 4BD5           30E4                       xor	ah,ah
19479 4BD7           3B46         F0            cmp	ax,0+..FFFC[bp]
19480 4BDA           8D66         F2            lea	sp,2+..FFFC[bp]
19481 4BDD           75           67            jne 	.EB
19482                       00004BDF            .ED:
19483                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19484 4BDF           8B46         F8            mov	ax,-8[bp]
19485                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
19486                                           ! Debug: expression subtree swapping
19487 4BE2           48                         dec	ax
19488 4BE3           50                         push	ax
19489 4BE4           8A46         0E            mov	al,$E[bp]
19490 4BE7           30E4                       xor	ah,ah
19491 4BE9           3B46         F0            cmp	ax,0+..FFFC[bp]
19492 4BEC           8D66         F2            lea	sp,2+..FFFC[bp]
19493 4BEF           75           55            jne 	.EB
19494                       00004BF1            .EC:
19495                                           ! 2110         {
19496                                           ! 2111          outw(0x3ce, 
19497                                           ! 2111 0x0205);
19498                                           ! Debug: list int = const $205 (used reg = )
19499 4BF1           B8                   0205  mov	ax,#$205
19500 4BF4           50                         push	ax
19501                                           ! Debug: list int = const $3CE (used reg = )
19502 4BF5           B8                   03CE  mov	ax,#$3CE
19503 4BF8           50                         push	ax
19504                                           ! Debug: func () void = outw+0 (used reg = )
19505 4BF9           E8         2F20            call	_outw
19506 4BFC           83C4                   04  add	sp,*4
19507                                           !BCC_EOS
19508                                           ! 2112          memsetb(vga_modes[line].sstart,0,attr,nbrows*nbcols*cheight);
19509                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
19510 4BFF           8B46         F6            mov	ax,-$A[bp]
19511 4C02           8B4E         F8            mov	cx,-8[bp]
19512 4C05           F7E9                       imul	cx
19513                                           ! Debug: mul unsigned char cheight = [S+$10-5] to unsigned int = ax+0 (used reg = )
19514 4C07           89C3                       mov	bx,ax
19515 4C09           8A46         FD            mov	al,-3[bp]
19516 4C0C           30E4                       xor	ah,ah
19517 4C0E           93                         xchg	ax,bx
19518 4C0F           89D9                       mov	cx,bx
19519 4C11           F7E9                       imul	cx
19520                                           ! Debug: list unsigned int = ax+0 (used reg = )
19521 4C13           50                         push	ax
19522                                           ! Debug: list unsigned char attr = [S+$12+4] (used reg = )
19523 4C14           8A46         06            mov	al,6[bp]
19524 4C17           30E4                       xor	ah,ah
19525 4C19           50                         push	ax
19526                                           ! Debug: list int = const 0 (used reg = )
19527 4C1A           31C0                       xor	ax,ax
19528 4C1C           50                         push	ax
19529                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19530 4C1D           8A46         FE            mov	al,-2[bp]
19531 4C20           30E4                       xor	ah,ah
19532 4C22           B1                     03  mov	cl,*3
19533 4C24           D3E0                       shl	ax,cl
19534 4C26           89C3                       mov	bx,ax
19535 4C28           81C3                 01DA  add	bx,#_vga_modes
19536                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19537 4C2C           FF77         04            push	4[bx]
19538                                           ! Debug: func () void = memsetb+0 (used reg = )
19539 4C2F           E8         2DC4            call	_memsetb
19540 4C32           83C4                   08  add	sp,*8
19541                                           !BCC_EOS
19542                                           ! 2113          outw(0x3ce, 0x0005);
19543                                           ! Debug: list int = const 5 (used reg = )
19544 4C35           B8                   0005  mov	ax,*5
19545 4C38           50                         push	ax
19546                                           ! Debug: list int = const $3CE (used reg = )
19547 4C39           B8                   03CE  mov	ax,#$3CE
19548 4C3C           50                         push	ax
19549                                           ! Debug: func () void = outw+0 (used reg = )
19550 4C3D           E8         2EDC            call	_outw
19551 4C40           83C4                   04  add	sp,*4
19552                                           !BCC_EOS
19553                                           ! 2114         }
19554                                           ! 2115        else
19555                                           ! 2116         {
19556 4C43           E9         0121            br 	.F1
19557                       00004C46            .EB:
19558                                           ! 2117          if(dir==1)
19559                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
19560 4C46           8A46         12            mov	al,$12[bp]
19561 4C49           3C                     01  cmp	al,*1
19562 4C4B         0F85         008A            bne 	.F2
19563                       00004C4F            .F3:
19564                                           ! 2118           {for(i=rul;i<=rlr;i++)
19565                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
19566 4C4F           8A46         08            mov	al,8[bp]
19567 4C52           30E4                       xor	ah,ah
19568 4C54           8946         F4            mov	-$C[bp],ax
19569                                           !BCC_EOS
19570                                           !BCC_EOS
19571                                           ! 2119             {
19572 4C57           EB           73            jmp .F6
19573                       00004C59            .F7:
19574                                           ! 2120              if((i+nblines>rlr)||(nblines==0))
19575                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
19576 4C59           8B46         F4            mov	ax,-$C[bp]
19577 4C5C           0246         04            add	al,4[bp]
19578 4C5F           80D4                   00  adc	ah,*0
19579                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
19580 4C62           50                         push	ax
19581 4C63           8A46         0C            mov	al,$C[bp]
19582 4C66           30E4                       xor	ah,ah
19583 4C68           3B46         F0            cmp	ax,0+..FFFC[bp]
19584 4C6B           8D66         F2            lea	sp,2+..FFFC[bp]
19585 4C6E           72           07            jb  	.F9
19586                       00004C70            .FA:
19587                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19588 4C70           8A46         04            mov	al,4[bp]
19589 4C73           84C0                       test	al,al
19590 4C75           75           26            jne 	.F8
19591                       00004C77            .F9:
19592                                           ! 2121               vgamem_fill_pl4(cul,i,cols,nbcols,cheight,attr);
19593                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
19594 4C77           8A46         06            mov	al,6[bp]
19595 4C7A           30E4                       xor	ah,ah
19596 4C7C           50                         push	ax
19597                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
19598 4C7D           8A46         FD            mov	al,-3[bp]
19599 4C80           30E4                       xor	ah,ah
19600 4C82           50                         push	ax
19601                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
19602 4C83           FF76         F8            push	-8[bp]
19603                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
19604 4C86           8A46         FB            mov	al,-5[bp]
19605 4C89           30E4                       xor	ah,ah
19606 4C8B           50                         push	ax
19607                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
19608 4C8C           FF76         F4            push	-$C[bp]
19609                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
19610 4C8F           8A46         0A            mov	al,$A[bp]
19611 4C92           30E4                       xor	ah,ah
19612 4C94           50                         push	ax
19613                                           ! Debug: func () void = vgamem_fill_pl4+0 (used reg = )
19614 4C95           E8         F96B            call	_vgamem_fill_pl4
19615 4C98           83C4                   0C  add	sp,*$C
19616                                           !BCC_EOS
19617                                           ! 2122              else
19618                                           ! 2123               vgamem_copy_pl4(cul,i+nblines,i,cols,nbcols,cheight);
19619 4C9B           EB           28            jmp .FB
19620                       00004C9D            .F8:
19621                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
19622 4C9D           8A46         FD            mov	al,-3[bp]
19623 4CA0           30E4                       xor	ah,ah
19624 4CA2           50                         push	ax
19625                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
19626 4CA3           FF76         F8            push	-8[bp]
19627                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
19628 4CA6           8A46         FB            mov	al,-5[bp]
19629 4CA9           30E4                       xor	ah,ah
19630 4CAB           50                         push	ax
19631                                           ! Debug: list unsigned short i = [S+$16-$E] (used reg = )
19632 4CAC           FF76         F4            push	-$C[bp]
19633                                           ! Debug: add unsigned char nblines = [S+$18+2] to unsigned short i = [S+$18-$E] (used reg = )
19634 4CAF           8B46         F4            mov	ax,-$C[bp]
19635 4CB2           0246         04            add	al,4[bp]
19636 4CB5           80D4                   00  adc	ah,*0
19637                                           ! Debug: list unsigned int = ax+0 (used reg = )
19638 4CB8           50                         push	ax
19639                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
19640 4CB9           8A46         0A            mov	al,$A[bp]
19641 4CBC           30E4                       xor	ah,ah
19642 4CBE           50                         push	ax
19643                                           ! Debug: func () void = vgamem_copy_pl4+0 (used reg = )
19644 4CBF           E8         F87F            call	_vgamem_copy_pl4
19645 4CC2           83C4                   0C  add	sp,*$C
19646                                           !BCC_EOS
19647                                           ! 2124             }
19648                       00004CC5            .FB:
19649                                           ! 2125           }
19650                       00004CC5            .F5:
19651                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
19652 4CC5           8B46         F4            mov	ax,-$C[bp]
19653 4CC8           40                         inc	ax
19654 4CC9           8946         F4            mov	-$C[bp],ax
19655                       00004CCC            .F6:
19656                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19657 4CCC           8A46         0C            mov	al,$C[bp]
19658 4CCF           30E4                       xor	ah,ah
19659 4CD1           3B46         F4            cmp	ax,-$C[bp]
19660 4CD4           73           83            jae	.F7
19661                       00004CD6            .FC:
19662                       00004CD6            .F4:
19663                                           ! 2126          else
19664                                           ! 2127           {for(i=rlr;i>=rul;i--)
19665 4CD6           E9         008E            br 	.FD
19666                       00004CD9            .F2:
19667                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19668 4CD9           8A46         0C            mov	al,$C[bp]
19669 4CDC           30E4                       xor	ah,ah
19670 4CDE           8946         F4            mov	-$C[bp],ax
19671                                           !BCC_EOS
19672                                           !BCC_EOS
19673                                           ! 2128             {
19674 4CE1           EB           78            jmp .100
19675                       00004CE3            .101:
19676                                           ! 2129              if((i<rul+nblines)||(nblines==0))
19677                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
19678 4CE3           8A46         08            mov	al,8[bp]
19679 4CE6           30E4                       xor	ah,ah
19680 4CE8           0246         04            add	al,4[bp]
19681 4CEB           80D4                   00  adc	ah,*0
19682                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
19683 4CEE           3B46         F4            cmp	ax,-$C[bp]
19684 4CF1           77           07            ja  	.103
19685                       00004CF3            .104:
19686                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19687 4CF3           8A46         04            mov	al,4[bp]
19688 4CF6           84C0                       test	al,al
19689 4CF8           75           26            jne 	.102
19690                       00004CFA            .103:
19691                                           ! 2130               vgamem_fill_pl4(cul,i,cols,nbcols,cheight,attr);
19692                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
19693 4CFA           8A46         06            mov	al,6[bp]
19694 4CFD           30E4                       xor	ah,ah
19695 4CFF           50                         push	ax
19696                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
19697 4D00           8A46         FD            mov	al,-3[bp]
19698 4D03           30E4                       xor	ah,ah
19699 4D05           50                         push	ax
19700                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
19701 4D06           FF76         F8            push	-8[bp]
19702                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
19703 4D09           8A46         FB            mov	al,-5[bp]
19704 4D0C           30E4                       xor	ah,ah
19705 4D0E           50                         push	ax
19706                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
19707 4D0F           FF76         F4            push	-$C[bp]
19708                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
19709 4D12           8A46         0A            mov	al,$A[bp]
19710 4D15           30E4                       xor	ah,ah
19711 4D17           50                         push	ax
19712                                           ! Debug: func () void = vgamem_fill_pl4+0 (used reg = )
19713 4D18           E8         F8E8            call	_vgamem_fill_pl4
19714 4D1B           83C4                   0C  add	sp,*$C
19715                                           !BCC_EOS
19716                                           ! 2131              else
19717                                           ! 2132               vgamem_copy_pl4(cul,i,i-nblines,cols,nbcols,cheight);
19718 4D1E           EB           28            jmp .105
19719                       00004D20            .102:
19720                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
19721 4D20           8A46         FD            mov	al,-3[bp]
19722 4D23           30E4                       xor	ah,ah
19723 4D25           50                         push	ax
19724                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
19725 4D26           FF76         F8            push	-8[bp]
19726                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
19727 4D29           8A46         FB            mov	al,-5[bp]
19728 4D2C           30E4                       xor	ah,ah
19729 4D2E           50                         push	ax
19730                                           ! Debug: sub unsigned char nblines = [S+$16+2] to unsigned short i = [S+$16-$E] (used reg = )
19731 4D2F           8B46         F4            mov	ax,-$C[bp]
19732 4D32           2A46         04            sub	al,4[bp]
19733 4D35           80DC                   00  sbb	ah,*0
19734                                           ! Debug: list unsigned int = ax+0 (used reg = )
19735 4D38           50                         push	ax
19736                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
19737 4D39           FF76         F4            push	-$C[bp]
19738                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
19739 4D3C           8A46         0A            mov	al,$A[bp]
19740 4D3F           30E4                       xor	ah,ah
19741 4D41           50                         push	ax
19742                                           ! Debug: func () void = vgamem_copy_pl4+0 (used reg = )
19743 4D42           E8         F7FC            call	_vgamem_copy_pl4
19744 4D45           83C4                   0C  add	sp,*$C
19745                                           !BCC_EOS
19746                                           ! 2133              if (i>rlr) break;
19747                       00004D48            .105:
19748                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19749 4D48           8A46         0C            mov	al,$C[bp]
19750 4D4B           30E4                       xor	ah,ah
19751 4D4D           3B46         F4            cmp	ax,-$C[bp]
19752 4D50           73           02            jae 	.106
19753                       00004D52            .107:
19754 4D52           EB           13            jmp .FE
19755                                           !BCC_EOS
19756                                           ! 2134             }
19757                       00004D54            .106:
19758                                           ! 2135           }
19759                       00004D54            .FF:
19760                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
19761 4D54           8B46         F4            mov	ax,-$C[bp]
19762 4D57           48                         dec	ax
19763 4D58           8946         F4            mov	-$C[bp],ax
19764                       00004D5B            .100:
19765                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
19766 4D5B           8A46         08            mov	al,8[bp]
19767 4D5E           30E4                       xor	ah,ah
19768 4D60           3B46         F4            cmp	ax,-$C[bp]
19769 4D63         0F86         FF7C            blos	.101
19770                       00004D67            .108:
19771                       00004D67            .FE:
19772                                           ! 2136         }
19773                       00004D67            .FD:
19774                                           ! 2137        break;
19775                       00004D67            .F1:
19776 4D67           E9         01ED            br 	.E6
19777                                           !BCC_EOS
19778                                           ! 2138      case 0x02:
19779                                           ! 2139        bpp=vga_modes[line].pixbits;
19780                       00004D6A            .109:
19781                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] struct  = vga_modes+0 (used reg = )
19782 4D6A           8A46         FE            mov	al,-2[bp]
19783 4D6D           30E4                       xor	ah,ah
19784 4D6F           B1                     03  mov	cl,*3
19785 4D71           D3E0                       shl	ax,cl
19786 4D73           89C3                       mov	bx,ax
19787 4D75           81C3                 01DA  add	bx,#_vga_modes
19788                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$10-6] (used reg = )
19789 4D79           8A47         03            mov	al,3[bx]
19790 4D7C           8846         FC            mov	-4[bp],al
19791                                           !BCC_EOS
19792                                           ! 2140        if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
19793                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19794 4D7F           8A46         04            mov	al,4[bp]
19795 4D82           84C0                       test	al,al
19796 4D84           75           77            jne 	.10A
19797                       00004D86            .10F:
19798                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
19799 4D86           8A46         08            mov	al,8[bp]
19800 4D89           84C0                       test	al,al
19801 4D8B           75           70            jne 	.10A
19802                       00004D8D            .10E:
19803                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
19804 4D8D           8A46         0A            mov	al,$A[bp]
19805 4D90           84C0                       test	al,al
19806 4D92           75           69            jne 	.10A
19807                       00004D94            .10D:
19808                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19809 4D94           8B46         F6            mov	ax,-$A[bp]
19810                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
19811                                           ! Debug: expression subtree swapping
19812 4D97           48                         dec	ax
19813 4D98           50                         push	ax
19814 4D99           8A46         0C            mov	al,$C[bp]
19815 4D9C           30E4                       xor	ah,ah
19816 4D9E           3B46         F0            cmp	ax,0+..FFFC[bp]
19817 4DA1           8D66         F2            lea	sp,2+..FFFC[bp]
19818 4DA4           75           57            jne 	.10A
19819                       00004DA6            .10C:
19820                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19821 4DA6           8B46         F8            mov	ax,-8[bp]
19822                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
19823                                           ! Debug: expression subtree swapping
19824 4DA9           48                         dec	ax
19825 4DAA           50                         push	ax
19826 4DAB           8A46         0E            mov	al,$E[bp]
19827 4DAE           30E4                       xor	ah,ah
19828 4DB0           3B46         F0            cmp	ax,0+..FFFC[bp]
19829 4DB3           8D66         F2            lea	sp,2+..FFFC[bp]
19830 4DB6           75           45            jne 	.10A
19831                       00004DB8            .10B:
19832                                           ! 2141         {
19833                                           ! 2142          memsetb(vga_modes[line].sstart,0,attr,nbrows*nbcols*cheight*bpp);
19834                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
19835 4DB8           8B46         F6            mov	ax,-$A[bp]
19836 4DBB           8B4E         F8            mov	cx,-8[bp]
19837 4DBE           F7E9                       imul	cx
19838                                           ! Debug: mul unsigned char cheight = [S+$10-5] to unsigned int = ax+0 (used reg = )
19839 4DC0           89C3                       mov	bx,ax
19840 4DC2           8A46         FD            mov	al,-3[bp]
19841 4DC5           30E4                       xor	ah,ah
19842 4DC7           93                         xchg	ax,bx
19843 4DC8           89D9                       mov	cx,bx
19844 4DCA           F7E9                       imul	cx
19845                                           ! Debug: mul unsigned char bpp = [S+$10-6] to unsigned int = ax+0 (used reg = )
19846 4DCC           89C3                       mov	bx,ax
19847 4DCE           8A46         FC            mov	al,-4[bp]
19848 4DD1           30E4                       xor	ah,ah
19849 4DD3           93                         xchg	ax,bx
19850 4DD4           89D9                       mov	cx,bx
19851 4DD6           F7E9                       imul	cx
19852                                           ! Debug: list unsigned int = ax+0 (used reg = )
19853 4DD8           50                         push	ax
19854                                           ! Debug: list unsigned char attr = [S+$12+4] (used reg = )
19855 4DD9           8A46         06            mov	al,6[bp]
19856 4DDC           30E4                       xor	ah,ah
19857 4DDE           50                         push	ax
19858                                           ! Debug: list int = const 0 (used reg = )
19859 4DDF           31C0                       xor	ax,ax
19860 4DE1           50                         push	ax
19861                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19862 4DE2           8A46         FE            mov	al,-2[bp]
19863 4DE5           30E4                       xor	ah,ah
19864 4DE7           B1                     03  mov	cl,*3
19865 4DE9           D3E0                       shl	ax,cl
19866 4DEB           89C3                       mov	bx,ax
19867 4DED           81C3                 01DA  add	bx,#_vga_modes
19868                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19869 4DF1           FF77         04            push	4[bx]
19870                                           ! Debug: func () void = memsetb+0 (used reg = )
19871 4DF4           E8         2BFF            call	_memsetb
19872 4DF7           83C4                   08  add	sp,*8
19873                                           !BCC_EOS
19874                                           ! 2143         }
19875                                           ! 2144        else
19876                                           ! 2145         {
19877 4DFA           E9         0144            br 	.110
19878                       00004DFD            .10A:
19879                                           ! 2146          if(bpp==2)
19880                                           ! Debug: logeq int = const 2 to unsigned char bpp = [S+$10-6] (used reg = )
19881 4DFD           8A46         FC            mov	al,-4[bp]
19882 4E00           3C                     02  cmp	al,*2
19883 4E02           75           1C            jne 	.111
19884                       00004E04            .112:
19885                                           ! 2147           {
19886                                           ! 2148            cul<<=1;
19887                                           ! Debug: slab int = const 1 to unsigned char cul = [S+$10+8] (used reg = )
19888 4E04           8A46         0A            mov	al,$A[bp]
19889 4E07           30E4                       xor	ah,ah
19890 4E09           D1E0                       shl	ax,*1
19891 4E0B           8846         0A            mov	$A[bp],al
19892                                           !BCC_EOS
19893                                           ! 2149            cols<<=1;
19894                                           ! Debug: slab int = const 1 to unsigned char cols = [S+$10-7] (used reg = )
19895 4E0E           8A46         FB            mov	al,-5[bp]
19896 4E11           30E4                       xor	ah,ah
19897 4E13           D1E0                       shl	ax,*1
19898 4E15           8846         FB            mov	-5[bp],al
19899                                           !BCC_EOS
19900                                           ! 2150            nbcols<<=1;
19901                                           ! Debug: slab int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19902 4E18           8B46         F8            mov	ax,-8[bp]
19903 4E1B           D1E0                       shl	ax,*1
19904 4E1D           8946         F8            mov	-8[bp],ax
19905                                           !BCC_EOS
19906                                           ! 2151           }
19907                                           ! 2152          if(dir==1)
19908                       00004E20            .111:
19909                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
19910 4E20           8A46         12            mov	al,$12[bp]
19911 4E23           3C                     01  cmp	al,*1
19912 4E25         0F85         008A            bne 	.113
19913                       00004E29            .114:
19914                                           ! 2153           {for(i=rul;i<=rlr;i++)
19915                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
19916 4E29           8A46         08            mov	al,8[bp]
19917 4E2C           30E4                       xor	ah,ah
19918 4E2E           8946         F4            mov	-$C[bp],ax
19919                                           !BCC_EOS
19920                                           !BCC_EOS
19921                                           ! 2154             {
19922 4E31           EB           73            jmp .117
19923                       00004E33            .118:
19924                                           ! 2155              if((i+nblines>rlr)||(nblines==0))
19925                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
19926 4E33           8B46         F4            mov	ax,-$C[bp]
19927 4E36           0246         04            add	al,4[bp]
19928 4E39           80D4                   00  adc	ah,*0
19929                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
19930 4E3C           50                         push	ax
19931 4E3D           8A46         0C            mov	al,$C[bp]
19932 4E40           30E4                       xor	ah,ah
19933 4E42           3B46         F0            cmp	ax,0+..FFFC[bp]
19934 4E45           8D66         F2            lea	sp,2+..FFFC[bp]
19935 4E48           72           07            jb  	.11A
19936                       00004E4A            .11B:
19937                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19938 4E4A           8A46         04            mov	al,4[bp]
19939 4E4D           84C0                       test	al,al
19940 4E4F           75           26            jne 	.119
19941                       00004E51            .11A:
19942                                           ! 2156               vgamem_fill_cga(cul,i,cols,nbcols,cheight,attr);
19943                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
19944 4E51           8A46         06            mov	al,6[bp]
19945 4E54           30E4                       xor	ah,ah
19946 4E56           50                         push	ax
19947                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
19948 4E57           8A46         FD            mov	al,-3[bp]
19949 4E5A           30E4                       xor	ah,ah
19950 4E5C           50                         push	ax
19951                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
19952 4E5D           FF76         F8            push	-8[bp]
19953                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
19954 4E60           8A46         FB            mov	al,-5[bp]
19955 4E63           30E4                       xor	ah,ah
19956 4E65           50                         push	ax
19957                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
19958 4E66           FF76         F4            push	-$C[bp]
19959                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
19960 4E69           8A46         0A            mov	al,$A[bp]
19961 4E6C           30E4                       xor	ah,ah
19962 4E6E           50                         push	ax
19963                                           ! Debug: func () void = vgamem_fill_cga+0 (used reg = )
19964 4E6F           E8         F92E            call	_vgamem_fill_cga
19965 4E72           83C4                   0C  add	sp,*$C
19966                                           !BCC_EOS
19967                                           ! 2157              else
19968                                           ! 2158               vgamem_copy_cga(cul,i+nblines,i,cols,nbcols,cheight);
19969 4E75           EB           28            jmp .11C
19970                       00004E77            .119:
19971                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
19972 4E77           8A46         FD            mov	al,-3[bp]
19973 4E7A           30E4                       xor	ah,ah
19974 4E7C           50                         push	ax
19975                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
19976 4E7D           FF76         F8            push	-8[bp]
19977                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
19978 4E80           8A46         FB            mov	al,-5[bp]
19979 4E83           30E4                       xor	ah,ah
19980 4E85           50                         push	ax
19981                                           ! Debug: list unsigned short i = [S+$16-$E] (used reg = )
19982 4E86           FF76         F4            push	-$C[bp]
19983                                           ! Debug: add unsigned char nblines = [S+$18+2] to unsigned short i = [S+$18-$E] (used reg = )
19984 4E89           8B46         F4            mov	ax,-$C[bp]
19985 4E8C           0246         04            add	al,4[bp]
19986 4E8F           80D4                   00  adc	ah,*0
19987                                           ! Debug: list unsigned int = ax+0 (used reg = )
19988 4E92           50                         push	ax
19989                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
19990 4E93           8A46         0A            mov	al,$A[bp]
19991 4E96           30E4                       xor	ah,ah
19992 4E98           50                         push	ax
19993                                           ! Debug: func () void = vgamem_copy_cga+0 (used reg = )
19994 4E99           E8         F7F2            call	_vgamem_copy_cga
19995 4E9C           83C4                   0C  add	sp,*$C
19996                                           !BCC_EOS
19997                                           ! 2159             }
19998                       00004E9F            .11C:
19999                                           ! 2160           }
20000                       00004E9F            .116:
20001                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
20002 4E9F           8B46         F4            mov	ax,-$C[bp]
20003 4EA2           40                         inc	ax
20004 4EA3           8946         F4            mov	-$C[bp],ax
20005                       00004EA6            .117:
20006                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20007 4EA6           8A46         0C            mov	al,$C[bp]
20008 4EA9           30E4                       xor	ah,ah
20009 4EAB           3B46         F4            cmp	ax,-$C[bp]
20010 4EAE           73           83            jae	.118
20011                       00004EB0            .11D:
20012                       00004EB0            .115:
20013                                           ! 2161          else
20014                                           ! 2162           {for(i=rlr;i>=rul;i--)
20015 4EB0           E9         008E            br 	.11E
20016                       00004EB3            .113:
20017                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20018 4EB3           8A46         0C            mov	al,$C[bp]
20019 4EB6           30E4                       xor	ah,ah
20020 4EB8           8946         F4            mov	-$C[bp],ax
20021                                           !BCC_EOS
20022                                           !BCC_EOS
20023                                           ! 2163             {
20024 4EBB           EB           78            jmp .121
20025                       00004EBD            .122:
20026                                           ! 2164              if((i<rul+nblines)||(nblines==0))
20027                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
20028 4EBD           8A46         08            mov	al,8[bp]
20029 4EC0           30E4                       xor	ah,ah
20030 4EC2           0246         04            add	al,4[bp]
20031 4EC5           80D4                   00  adc	ah,*0
20032                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
20033 4EC8           3B46         F4            cmp	ax,-$C[bp]
20034 4ECB           77           07            ja  	.124
20035                       00004ECD            .125:
20036                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20037 4ECD           8A46         04            mov	al,4[bp]
20038 4ED0           84C0                       test	al,al
20039 4ED2           75           26            jne 	.123
20040                       00004ED4            .124:
20041                                           ! 2165               vgamem_fill_cga(cul,i,cols,nbcols,cheight,attr);
20042                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
20043 4ED4           8A46         06            mov	al,6[bp]
20044 4ED7           30E4                       xor	ah,ah
20045 4ED9           50                         push	ax
20046                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
20047 4EDA           8A46         FD            mov	al,-3[bp]
20048 4EDD           30E4                       xor	ah,ah
20049 4EDF           50                         push	ax
20050                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
20051 4EE0           FF76         F8            push	-8[bp]
20052                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
20053 4EE3           8A46         FB            mov	al,-5[bp]
20054 4EE6           30E4                       xor	ah,ah
20055 4EE8           50                         push	ax
20056                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20057 4EE9           FF76         F4            push	-$C[bp]
20058                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20059 4EEC           8A46         0A            mov	al,$A[bp]
20060 4EEF           30E4                       xor	ah,ah
20061 4EF1           50                         push	ax
20062                                           ! Debug: func () void = vgamem_fill_cga+0 (used reg = )
20063 4EF2           E8         F8AB            call	_vgamem_fill_cga
20064 4EF5           83C4                   0C  add	sp,*$C
20065                                           !BCC_EOS
20066                                           ! 2166              else
20067                                           ! 2167               vgamem_copy_cga(cul,i,i-nblines,cols,nbcols,cheight);
20068 4EF8           EB           28            jmp .126
20069                       00004EFA            .123:
20070                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
20071 4EFA           8A46         FD            mov	al,-3[bp]
20072 4EFD           30E4                       xor	ah,ah
20073 4EFF           50                         push	ax
20074                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
20075 4F00           FF76         F8            push	-8[bp]
20076                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
20077 4F03           8A46         FB            mov	al,-5[bp]
20078 4F06           30E4                       xor	ah,ah
20079 4F08           50                         push	ax
20080                                           ! Debug: sub unsigned char nblines = [S+$16+2] to unsigned short i = [S+$16-$E] (used reg = )
20081 4F09           8B46         F4            mov	ax,-$C[bp]
20082 4F0C           2A46         04            sub	al,4[bp]
20083 4F0F           80DC                   00  sbb	ah,*0
20084                                           ! Debug: list unsigned int = ax+0 (used reg = )
20085 4F12           50                         push	ax
20086                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20087 4F13           FF76         F4            push	-$C[bp]
20088                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20089 4F16           8A46         0A            mov	al,$A[bp]
20090 4F19           30E4                       xor	ah,ah
20091 4F1B           50                         push	ax
20092                                           ! Debug: func () void = vgamem_copy_cga+0 (used reg = )
20093 4F1C           E8         F76F            call	_vgamem_copy_cga
20094 4F1F           83C4                   0C  add	sp,*$C
20095                                           !BCC_EOS
20096                                           ! 2168              if (i>rlr) break;
20097                       00004F22            .126:
20098                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20099 4F22           8A46         0C            mov	al,$C[bp]
20100 4F25           30E4                       xor	ah,ah
20101 4F27           3B46         F4            cmp	ax,-$C[bp]
20102 4F2A           73           02            jae 	.127
20103                       00004F2C            .128:
20104 4F2C           EB           13            jmp .11F
20105                                           !BCC_EOS
20106                                           ! 2169             }
20107                       00004F2E            .127:
20108                                           ! 2170           }
20109                       00004F2E            .120:
20110                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
20111 4F2E           8B46         F4            mov	ax,-$C[bp]
20112 4F31           48                         dec	ax
20113 4F32           8946         F4            mov	-$C[bp],ax
20114                       00004F35            .121:
20115                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20116 4F35           8A46         08            mov	al,8[bp]
20117 4F38           30E4                       xor	ah,ah
20118 4F3A           3B46         F4            cmp	ax,-$C[bp]
20119 4F3D         0F86         FF7C            blos	.122
20120                       00004F41            .129:
20121                       00004F41            .11F:
20122                                           ! 2171         }
20123                       00004F41            .11E:
20124                                           ! 2172        break;
20125                       00004F41            .110:
20126 4F41           EB           14            jmp .E6
20127                                           !BCC_EOS
20128                                           ! 2173     }
20129                                           ! 2174   }
20130 4F43           EB           12            jmp .E6
20131                       00004F45            .E8:
20132 4F45           2C                     02  sub	al,*2
20133 4F47         0F84         FE1F            beq 	.109
20134 4F4B           2C                     01  sub	al,*1
20135 4F4D         0F84         FC63            beq 	.EA
20136 4F51           2C                     01  sub	al,*1
20137 4F53         0F84         FC5D            beq 	.E9
20138                       00004F57            .E6:
20139                       FFFFFFF0            ..FFFC	=	-$10
20140                                           ! 2175 }
20141                       00004F57            .E5:
20142 4F57           89EC                       mov	sp,bp
20143 4F59           5D                         pop	bp
20144 4F5A           C3                         ret
20145                                           ! 2176 static void biosfn_read_char_attr (page,car)
20146                                           ! Register BX used in function biosfn_scroll
20147                                           ! 2177 Bit8u page;Bit16u *car;
20148                       00004F5B            _biosfn_read_char_attr:
20149                                           !BCC_EOS
20150                                           !BCC_EOS
20151                                           ! 2178 {Bit16u ss=get_SS();
20152 4F5B           55                         push	bp
20153 4F5C           89E5                       mov	bp,sp
20154 4F5E           4C                         dec	sp
20155 4F5F           4C                         dec	sp
20156                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
20157 4F60           E8         2BC9            call	_get_SS
20158                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
20159 4F63           8946         FE            mov	-2[bp],ax
20160                                           !BCC_EOS
20161                                           ! 2179  Bit8u xcurs,ycurs,mode,line;
20162                                           !BCC_EOS
20163                                           ! 2180  Bit16u nbcols,nbrows,address;
20164                                           !BCC_EOS
20165                                           ! 2181  Bit16u cursor,dummy;
20166                                           !BCC_EOS
20167                                           ! 2182  mode=read_byte(0x40,0x49);
20168 4F66           83C4                   F2  add	sp,*-$E
20169                                           ! Debug: list int = const $49 (used reg = )
20170 4F69           B8                   0049  mov	ax,*$49
20171 4F6C           50                         push	ax
20172                                           ! Debug: list int = const $40 (used reg = )
20173 4F6D           B8                   0040  mov	ax,*$40
20174 4F70           50                         push	ax
20175                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20176 4F71           E8         2B2C            call	_read_byte
20177 4F74           83C4                   04  add	sp,*4
20178                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-7] (used reg = )
20179 4F77           8846         FB            mov	-5[bp],al
20180                                           !BCC_EOS
20181                                           ! 2183  line=find_vga_entry(mode);
20182                                           ! Debug: list unsigned char mode = [S+$12-7] (used reg = )
20183 4F7A           8A46         FB            mov	al,-5[bp]
20184 4F7D           30E4                       xor	ah,ah
20185 4F7F           50                         push	ax
20186                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
20187 4F80           E8         2A31            call	_find_vga_entry
20188 4F83           44                         inc	sp
20189 4F84           44                         inc	sp
20190                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-8] (used reg = )
20191 4F85           8846         FA            mov	-6[bp],al
20192                                           !BCC_EOS
20193                                           ! 2184  if(line==0xFF)return;
20194                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-8] (used reg = )
20195 4F88           8A46         FA            mov	al,-6[bp]
20196 4F8B           3C                     FF  cmp	al,#$FF
20197 4F8D           75           04            jne 	.12A
20198                       00004F8F            .12B:
20199 4F8F           89EC                       mov	sp,bp
20200 4F91           5D                         pop	bp
20201 4F92           C3                         ret
20202                                           !BCC_EOS
20203                                           ! 2185  biosfn_get_cursor_pos(page,&dummy,&cursor)
20204                       00004F93            .12A:
20205                                           ! 2185 ;
20206                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
20207 4F93           8D5E         F2            lea	bx,-$E[bp]
20208 4F96           53                         push	bx
20209                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
20210 4F97           8D5E         F0            lea	bx,-$10[bp]
20211 4F9A           53                         push	bx
20212                                           ! Debug: list unsigned char page = [S+$16+2] (used reg = )
20213 4F9B           8A46         04            mov	al,4[bp]
20214 4F9E           30E4                       xor	ah,ah
20215 4FA0           50                         push	ax
20216                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
20217 4FA1           E8         F3B9            call	_biosfn_get_cursor_pos
20218 4FA4           83C4                   06  add	sp,*6
20219                                           !BCC_EOS
20220                                           ! 2186  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
20221                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
20222 4FA7           8A46         F2            mov	al,-$E[bp]
20223                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-5] (used reg = )
20224 4FAA           8846         FD            mov	-3[bp],al
20225                                           !BCC_EOS
20226                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
20227 4FAD           8B46         F2            mov	ax,-$E[bp]
20228 4FB0           30C0                       xor	al,al
20229                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
20230 4FB2           88E0                       mov	al,ah
20231 4FB4           30E4                       xor	ah,ah
20232                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-6] (used reg = )
20233 4FB6           8846         FC            mov	-4[bp],al
20234                                           !BCC_EOS
20235                                           ! 2187  nbrows=read_byte(0x40,0x84)+1;
20236                                           ! Debug: list int = const $84 (used reg = )
20237 4FB9           B8                   0084  mov	ax,#$84
20238 4FBC           50                         push	ax
20239                                           ! Debug: list int = const $40 (used reg = )
20240 4FBD           B8                   0040  mov	ax,*$40
20241 4FC0           50                         push	ax
20242                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20243 4FC1           E8         2ADC            call	_read_byte
20244 4FC4           83C4                   04  add	sp,*4
20245                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
20246 4FC7           30E4                       xor	ah,ah
20247                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
20248 4FC9           40                         inc	ax
20249 4FCA           8946         F6            mov	-$A[bp],ax
20250                                           !BCC_EOS
20251                                           ! 2188  nbcols=read_word(0x40,0x4A);
20252                                           ! Debug: list int = const $4A (used reg = )
20253 4FCD           B8                   004A  mov	ax,*$4A
20254 4FD0           50                         push	ax
20255                                           ! Debug: list int = const $40 (used reg = )
20256 4FD1           B8                   0040  mov	ax,*$40
20257 4FD4           50                         push	ax
20258                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
20259 4FD5           E8         2ADB            call	_read_word
20260 4FD8           83C4                   04  add	sp,*4
20261                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
20262 4FDB           8946         F8            mov	-8[bp],ax
20263                                           !BCC_EOS
20264                                           ! 2189  if(vga_modes[line].class==0x00)
20265                                           ! Debug: ptradd unsigned char line = [S+$12-8] to [$10] struct  = vga_modes+0 (used reg = )
20266 4FDE           8A46         FA            mov	al,-6[bp]
20267 4FE1           30E4                       xor	ah,ah
20268 4FE3           B1                     03  mov	cl,*3
20269 4FE5           D3E0                       shl	ax,cl
20270 4FE7           89C3                       mov	bx,ax
20271 4FE9           81C3                 01DA  add	bx,#_vga_modes
20272                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
20273 4FED           8A47         01            mov	al,1[bx]
20274 4FF0           84C0                       test	al,al
20275 4FF2           75           5E            jne 	.12C
20276                       00004FF4            .12D:
20277                                           ! 2190   {
20278                                           ! 2191    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
20279                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-6] (used reg = )
20280 4FF4           8A46         FC            mov	al,-4[bp]
20281 4FF7           30E4                       xor	ah,ah
20282 4FF9           8B4E         F8            mov	cx,-8[bp]
20283 4FFC           F7E9                       imul	cx
20284                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-5] (used reg = )
20285                                           ! Debug: expression subtree swapping
20286 4FFE           0246         FD            add	al,-3[bp]
20287 5001           80D4                   00  adc	ah,*0
20288                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
20289 5004           D1E0                       shl	ax,*1
20290 5006           50                         push	ax
20291                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
20292 5007           8B46         F8            mov	ax,-8[bp]
20293 500A           8B4E         F6            mov	cx,-$A[bp]
20294 500D           F7E9                       imul	cx
20295                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
20296 500F           D1E0                       shl	ax,*1
20297                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
20298 5011           0C                     FF  or	al,#$FF
20299                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
20300                                           ! Debug: mul unsigned char page = [S+$14+2] to unsigned int = ax+1 (used reg = )
20301 5013           89C3                       mov	bx,ax
20302 5015           8A46         04            mov	al,4[bp]
20303 5018           30E4                       xor	ah,ah
20304 501A           93                         xchg	ax,bx
20305 501B           40                         inc	ax
20306 501C           89D9                       mov	cx,bx
20307 501E           F7E9                       imul	cx
20308                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
20309 5020           0346         EE            add	ax,-$12[bp]
20310 5023           44                         inc	sp
20311 5024           44                         inc	sp
20312                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
20313 5025           8946         F4            mov	-$C[bp],ax
20314                                           !BCC_EOS
20315                                           ! 2192    write_word(ss,car,read_word(vga_modes[line].sstart,address));
20316                                           ! Debug: list unsigned short address = [S+$12-$E] (used reg = )
20317 5028           FF76         F4            push	-$C[bp]
20318                                           ! Debug: ptradd unsigned char line = [S+$14-8] to [$10] struct  = vga_modes+0 (used reg = )
20319 502B           8A46         FA            mov	al,-6[bp]
20320 502E           30E4                       xor	ah,ah
20321 5030           B1                     03  mov	cl,*3
20322 5032           D3E0                       shl	ax,cl
20323 5034           89C3                       mov	bx,ax
20324 5036           81C3                 01DA  add	bx,#_vga_modes
20325                                           ! Debug: list unsigned short = [bx+4] (used reg = )
20326 503A           FF77         04            push	4[bx]
20327                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
20328 503D           E8         2A73            call	_read_word
20329 5040           83C4                   04  add	sp,*4
20330                                           ! Debug: list unsigned short = ax+0 (used reg = )
20331 5043           50                         push	ax
20332                                           ! Debug: list * unsigned short car = [S+$14+4] (used reg = )
20333 5044           FF76         06            push	6[bp]
20334                                           ! Debug: list unsigned short ss = [S+$16-4] (used reg = )
20335 5047           FF76         FE            push	-2[bp]
20336                                           ! Debug: func () void = write_word+0 (used reg = )
20337 504A           E8         2A91            call	_write_word
20338 504D           83C4                   06  add	sp,*6
20339                                           !BCC_EOS
20340                                           ! 2193   }
20341                                           ! 2194  else
20342                                           ! 2195   {
20343 5050           EB           00            jmp .12E
20344                       00005052            .12C:
20345                                           ! 2196   }
20346                                           ! 2197 }
20347                       00005052            .12E:
20348 5052           89EC                       mov	sp,bp
20349 5054           5D                         pop	bp
20350 5055           C3                         ret
20351                                           ! 2198 static void write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight)
20352                                           ! Register BX used in function biosfn_read_char_attr
20353                                           ! 2199 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;Bit8u cheight;
20354                       00005056            _write_gfx_char_pl4:
20355                                           !BCC_EOS
20356                                           !BCC_EOS
20357                                           !BCC_EOS
20358                                           !BCC_EOS
20359                                           !BCC_EOS
20360                                           !BCC_EOS
20361                                           ! 2200 {
20362                                           ! 2201  Bit8u i,j,mask;
20363                                           !BCC_EOS
20364                                           ! 2202  Bit8u *fdata;
20365                                           !BCC_EOS
20366                                           ! 2203  Bit16u addr,dest,src;
20367                                           !BCC_EOS
20368                                           ! 2204  switch(cheight)
20369 5056           55                         push	bp
20370 5057           89E5                       mov	bp,sp
20371 5059           83C4                   F4  add	sp,*-$C
20372 505C           8A46         0E            mov	al,$E[bp]
20373                                           ! 2205   {case 14:
20374 505F           EB           18            jmp .131
20375                                           ! 2206     fdata = &vgafont14;
20376                       00005061            .132:
20377                                           ! Debug: eq * [$E00] unsigned char = vgafont14+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20378 5061           BB                   173E  mov	bx,#_vgafont14
20379 5064           895E         FA            mov	-6[bp],bx
20380                                           !BCC_EOS
20381                                           ! 2207     break;
20382 5067           EB           1A            jmp .12F
20383                                           !BCC_EOS
20384                                           ! 2208    case 16:
20385                                           ! 2209     fdata = &vgafont16;
20386                       00005069            .133:
20387                                           ! Debug: eq * [$1000] unsigned char = vgafont16+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20388 5069           BB                   253E  mov	bx,#_vgafont16
20389 506C           895E         FA            mov	-6[bp],bx
20390                                           !BCC_EOS
20391                                           ! 2210     break;
20392 506F           EB           12            jmp .12F
20393                                           !BCC_EOS
20394                                           ! 2211    default:
20395                                           ! 2212     fdata = &vgafont8;
20396                       00005071            .134:
20397                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20398 5071           BB                   0F3E  mov	bx,#_vgafont8
20399 5074           895E         FA            mov	-6[bp],bx
20400                                           !BCC_EOS
20401                                           ! 2213   }
20402                                           ! 2214  addr=xcurs+ycurs*cheight*nbcols;
20403 5077           EB           0A            jmp .12F
20404                       00005079            .131:
20405 5079           2C                     0E  sub	al,*$E
20406 507B           74           E4            je 	.132
20407 507D           2C                     02  sub	al,*2
20408 507F           74           E8            je 	.133
20409 5081           EB           EE            jmp	.134
20410                       00005083            .12F:
20411                       FFFFFFF2            ..FFFB	=	-$E
20412                                           ! Debug: mul unsigned char cheight = [S+$E+$C] to unsigned char ycurs = [S+$E+8] (used reg = )
20413 5083           8A46         0E            mov	al,$E[bp]
20414 5086           30E4                       xor	ah,ah
20415 5088           89C3                       mov	bx,ax
20416 508A           8A46         0A            mov	al,$A[bp]
20417 508D           30E4                       xor	ah,ah
20418 508F           89D9                       mov	cx,bx
20419 5091           F7E9                       imul	cx
20420                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
20421 5093           89C3                       mov	bx,ax
20422 5095           8A46         0C            mov	al,$C[bp]
20423 5098           30E4                       xor	ah,ah
20424 509A           93                         xchg	ax,bx
20425 509B           89D9                       mov	cx,bx
20426 509D           F7E9                       imul	cx
20427                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$E+6] (used reg = )
20428                                           ! Debug: expression subtree swapping
20429 509F           0246         08            add	al,8[bp]
20430 50A2           80D4                   00  adc	ah,*0
20431                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
20432 50A5           8946         F8            mov	-8[bp],ax
20433                                           !BCC_EOS
20434                                           ! 2215  src = car * cheight;
20435                                           ! Debug: mul unsigned char cheight = [S+$E+$C] to unsigned char car = [S+$E+2] (used reg = )
20436 50A8           8A46         0E            mov	al,$E[bp]
20437 50AB           30E4                       xor	ah,ah
20438 50AD           89C3                       mov	bx,ax
20439 50AF           8A46         04            mov	al,4[bp]
20440 50B2           30E4                       xor	ah,ah
20441 50B4           89D9                       mov	cx,bx
20442 50B6           F7E9                       imul	cx
20443                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
20444 50B8           8946         F4            mov	-$C[bp],ax
20445                                           !BCC_EOS
20446                                           ! 2216  outw(0x3c4, 0x0f02);
20447                                           ! Debug: list int = const $F02 (used reg = )
20448 50BB           B8                   0F02  mov	ax,#$F02
20449 50BE           50                         push	ax
20450                                           ! Debug: list int = const $3C4 (used reg = )
20451 50BF           B8                   03C4  mov	ax,#$3C4
20452 50C2           50                         push	ax
20453                                           ! Debug: func () void = outw+0 (used reg = )
20454 50C3           E8         2A56            call	_outw
20455 50C6           83C4                   04  add	sp,*4
20456                                           !BCC_EOS
20457                                           ! 2217  outw(0x3ce, 0x0205);
20458                                           ! Debug: list int = const $205 (used reg = )
20459 50C9           B8                   0205  mov	ax,#$205
20460 50CC           50                         push	ax
20461                                           ! Debug: list int = const $3CE (used reg = )
20462 50CD           B8                   03CE  mov	ax,#$3CE
20463 50D0           50                         push	ax
20464                                           ! Debug: func () void = outw+0 (used reg = )
20465 50D1           E8         2A48            call	_outw
20466 50D4           83C4                   04  add	sp,*4
20467                                           !BCC_EOS
20468                                           ! 2218  if(attr&0x80)
20469                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
20470 50D7           8A46         06            mov	al,6[bp]
20471 50DA           24                     80  and	al,#$80
20472 50DC           84C0                       test	al,al
20473 50DE           74           10            je  	.135
20474                       000050E0            .136:
20475                                           ! 2219   {
20476                                           ! 2220    outw(0x3ce, 0x1803);
20477                                           ! Debug: list int = const $1803 (used reg = )
20478 50E0           B8                   1803  mov	ax,#$1803
20479 50E3           50                         push	ax
20480                                           ! Debug: list int = const $3CE (used reg = )
20481 50E4           B8                   03CE  mov	ax,#$3CE
20482 50E7           50                         push	ax
20483                                           ! Debug: func () void = outw+0 (used reg = )
20484 50E8           E8         2A31            call	_outw
20485 50EB           83C4                   04  add	sp,*4
20486                                           !BCC_EOS
20487                                           ! 2221   }
20488                                           ! 2222  else
20489                                           ! 2223   {
20490 50EE           EB           0E            jmp .137
20491                       000050F0            .135:
20492                                           ! 2224    outw(0x3ce, 0x0003);
20493                                           ! Debug: list int = const 3 (used reg = )
20494 50F0           B8                   0003  mov	ax,*3
20495 50F3           50                         push	ax
20496                                           ! Debug: list int = const $3CE (used reg = )
20497 50F4           B8                   03CE  mov	ax,#$3CE
20498 50F7           50                         push	ax
20499                                           ! Debug: func () void = outw+0 (used reg = )
20500 50F8           E8         2A21            call	_outw
20501 50FB           83C4                   04  add	sp,*4
20502                                           !BCC_EOS
20503                                           ! 2225   }
20504                                           ! 2226  for(i=0;i<cheight;i++)
20505                       000050FE            .137:
20506                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
20507 50FE           30C0                       xor	al,al
20508 5100           8846         FF            mov	-1[bp],al
20509                                           !BCC_EOS
20510                                           !BCC_EOS
20511                                           ! 2227   {
20512 5103           E9         00A6            br 	.13A
20513                       00005106            .13B:
20514                                           ! 2228    dest=addr+i*nbcols;
20515                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-3] (used reg = )
20516 5106           8A46         0C            mov	al,$C[bp]
20517 5109           30E4                       xor	ah,ah
20518 510B           89C3                       mov	bx,ax
20519 510D           8A46         FF            mov	al,-1[bp]
20520 5110           30E4                       xor	ah,ah
20521 5112           89D9                       mov	cx,bx
20522 5114           F7E9                       imul	cx
20523                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
20524                                           ! Debug: expression subtree swapping
20525 5116           0346         F8            add	ax,-8[bp]
20526                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
20527 5119           8946         F6            mov	-$A[bp],ax
20528                                           !BCC_EOS
20529                                           ! 2229    for(j=0;j<8;j++)
20530                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
20531 511C           30C0                       xor	al,al
20532 511E           8846         FE            mov	-2[bp],al
20533                                           !BCC_EOS
20534                                           !BCC_EOS
20535                                           ! 2230     {
20536 5121           EB           79            jmp .13E
20537                       00005123            .13F:
20538                                           ! 2231      mask=0x80>>j;
20539                                           ! Debug: sr unsigned char j = [S+$E-4] to int = const $80 (used reg = )
20540 5123           8A46         FE            mov	al,-2[bp]
20541 5126           30E4                       xor	ah,ah
20542 5128           89C3                       mov	bx,ax
20543 512A           B8                   0080  mov	ax,#$80
20544 512D           89D9                       mov	cx,bx
20545 512F           D3F8                       sar	ax,cl
20546                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$E-5] (used reg = )
20547 5131           8846         FD            mov	-3[bp],al
20548                                           !BCC_EOS
20549                                           ! 2232      outw(0x3ce, (mask << 8) | 0x08);
20550                                           ! Debug: sl int = const 8 to unsigned char mask = [S+$E-5] (used reg = )
20551 5134           8A46         FD            mov	al,-3[bp]
20552 5137           30E4                       xor	ah,ah
20553 5139           88C4                       mov	ah,al
20554 513B           30C0                       xor	al,al
20555                                           ! Debug: or int = const 8 to unsigned int = ax+0 (used reg = )
20556 513D           0C                     08  or	al,*8
20557                                           ! Debug: list unsigned int = ax+0 (used reg = )
20558 513F           50                         push	ax
20559                                           ! Debug: list int = const $3CE (used reg = )
20560 5140           B8                   03CE  mov	ax,#$3CE
20561 5143           50                         push	ax
20562                                           ! Debug: func () void = outw+0 (used reg = )
20563 5144           E8         29D5            call	_outw
20564 5147           83C4                   04  add	sp,*4
20565                                           !BCC_EOS
20566                                           ! 2233      read_byte(0xa000,dest);
20567                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
20568 514A           FF76         F6            push	-$A[bp]
20569                                           ! Debug: list unsigned int = const $A000 (used reg = )
20570 514D           B8                   A000  mov	ax,#$A000
20571 5150           50                         push	ax
20572                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20573 5151           E8         294C            call	_read_byte
20574 5154           83C4                   04  add	sp,*4
20575                                           !BCC_EOS
20576                                           ! 2234      if(fdata[src+i]&mask)
20577                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
20578 5157           8B46         F4            mov	ax,-$C[bp]
20579 515A           0246         FF            add	al,-1[bp]
20580 515D           80D4                   00  adc	ah,*0
20581                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20582 5160           0346         FA            add	ax,-6[bp]
20583 5163           89C3                       mov	bx,ax
20584                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
20585 5165           8A07                       mov	al,[bx]
20586 5167           2246         FD            and	al,-3[bp]
20587 516A           84C0                       test	al,al
20588 516C           74           17            je  	.140
20589                       0000516E            .141:
20590                                           ! 2235       {
20591                                           ! 2236        write_byte(0xa000,dest,attr&0x0f);
20592                                           ! Debug: and int = const $F to unsigned char attr = [S+$E+4] (used reg = )
20593 516E           8A46         06            mov	al,6[bp]
20594 5171           24                     0F  and	al,*$F
20595                                           ! Debug: list unsigned char = al+0 (used reg = )
20596 5173           30E4                       xor	ah,ah
20597 5175           50                         push	ax
20598                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
20599 5176           FF76         F6            push	-$A[bp]
20600                                           ! Debug: list unsigned int = const $A000 (used reg = )
20601 5179           B8                   A000  mov	ax,#$A000
20602 517C           50                         push	ax
20603                                           ! Debug: func () void = write_byte+0 (used reg = )
20604 517D           E8         2946            call	_write_byte
20605 5180           83C4                   06  add	sp,*6
20606                                           !BCC_EOS
20607                                           ! 2237       }
20608                                           ! 2238      else
20609                                           ! 2239       {
20610 5183           EB           10            jmp .142
20611                       00005185            .140:
20612                                           ! 2240        write_byte(0xa000,dest,0x00);
20613                                           ! Debug: list int = const 0 (used reg = )
20614 5185           31C0                       xor	ax,ax
20615 5187           50                         push	ax
20616                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
20617 5188           FF76         F6            push	-$A[bp]
20618                                           ! Debug: list unsigned int = const $A000 (used reg = )
20619 518B           B8                   A000  mov	ax,#$A000
20620 518E           50                         push	ax
20621                                           ! Debug: func () void = write_byte+0 (used reg = )
20622 518F           E8         2934            call	_write_byte
20623 5192           83C4                   06  add	sp,*6
20624                                           !BCC_EOS
20625                                           ! 2241       }
20626                                           ! 2242     }
20627                       00005195            .142:
20628                                           ! 2243   }
20629                       00005195            .13D:
20630                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
20631 5195           8A46         FE            mov	al,-2[bp]
20632 5198           40                         inc	ax
20633 5199           8846         FE            mov	-2[bp],al
20634                       0000519C            .13E:
20635                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
20636 519C           8A46         FE            mov	al,-2[bp]
20637 519F           3C                     08  cmp	al,*8
20638 51A1         0F82         FF7E            blo 	.13F
20639                       000051A5            .143:
20640                       000051A5            .13C:
20641                                           ! 2244 #asm
20642                       000051A5            .139:
20643                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
20644 51A5           8A46         FF            mov	al,-1[bp]
20645 51A8           40                         inc	ax
20646 51A9           8846         FF            mov	-1[bp],al
20647                       000051AC            .13A:
20648                                           ! Debug: lt unsigned char cheight = [S+$E+$C] to unsigned char i = [S+$E-3] (used reg = )
20649 51AC           8A46         FF            mov	al,-1[bp]
20650 51AF           3A46         0E            cmp	al,$E[bp]
20651 51B2         0F82         FF50            blo 	.13B
20652                       000051B6            .144:
20653                       000051B6            .138:
20654                                           !BCC_EOS
20655                                           !BCC_ASM
20656                       0000000A            _write_gfx_char_pl4.j	set	$A
20657                       FFFFFFFE            .write_gfx_char_pl4.j	set	-2
20658                       00000006            _write_gfx_char_pl4.fdata	set	6
20659                       FFFFFFFA            .write_gfx_char_pl4.fdata	set	-6
20660                       0000001A            _write_gfx_char_pl4.cheight	set	$1A
20661                       0000000E            .write_gfx_char_pl4.cheight	set	$E
20662                       00000018            _write_gfx_char_pl4.nbcols	set	$18
20663                       0000000C            .write_gfx_char_pl4.nbcols	set	$C
20664                       0000000B            _write_gfx_char_pl4.i	set	$B
20665                       FFFFFFFF            .write_gfx_char_pl4.i	set	-1
20666                       00000016            _write_gfx_char_pl4.ycurs	set	$16
20667                       0000000A            .write_gfx_char_pl4.ycurs	set	$A
20668                       00000009            _write_gfx_char_pl4.mask	set	9
20669                       FFFFFFFD            .write_gfx_char_pl4.mask	set	-3
20670                       00000002            _write_gfx_char_pl4.dest	set	2
20671                       FFFFFFF6            .write_gfx_char_pl4.dest	set	-$A
20672                       00000014            _write_gfx_char_pl4.xcurs	set	$14
20673                       00000008            .write_gfx_char_pl4.xcurs	set	8
20674                       00000000            _write_gfx_char_pl4.src	set	0
20675                       FFFFFFF4            .write_gfx_char_pl4.src	set	-$C
20676                       00000012            _write_gfx_char_pl4.attr	set	$12
20677                       00000006            .write_gfx_char_pl4.attr	set	6
20678                       00000010            _write_gfx_char_pl4.car	set	$10
20679                       00000004            .write_gfx_char_pl4.car	set	4
20680                       00000004            _write_gfx_char_pl4.addr	set	4
20681                       FFFFFFF8            .write_gfx_char_pl4.addr	set	-8
20682 51B6           BA                   03CE    mov dx, # 0x3ce
20683 51B9           B8                   FF08    mov ax, #0xff08
20684 51BC           EF                           out dx, ax
20685 51BD           B8                   0005    mov ax, #0x0005
20686 51C0           EF                           out dx, ax
20687 51C1           B8                   0003    mov ax, #0x0003
20688 51C4           EF                           out dx, ax
20689                                           ! 2252 endasm
20690                                           !BCC_ENDASM
20691                                           !BCC_EOS
20692                                           ! 2253 }
20693 51C5           89EC                       mov	sp,bp
20694 51C7           5D                         pop	bp
20695 51C8           C3                         ret
20696                                           ! 2254 static void write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp)
20697                                           ! Register BX used in function write_gfx_char_pl4
20698                                           ! 2255 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;Bit8u bpp;
20699                       000051C9            _write_gfx_char_cga:
20700                                           !BCC_EOS
20701                                           !BCC_EOS
20702                                           !BCC_EOS
20703                                           !BCC_EOS
20704                                           !BCC_EOS
20705                                           !BCC_EOS
20706                                           ! 2256 {
20707                                           ! 2257  Bit8u i,j,mask,data;
20708                                           !BCC_EOS
20709                                           ! 2258  Bit8u *fdata;
20710                                           !BCC_EOS
20711                                           ! 2259  Bit16u addr,dest,src;
20712                                           !BCC_EOS
20713                                           ! 2260  fdata = &vgafont8;
20714 51C9           55                         push	bp
20715 51CA           89E5                       mov	bp,sp
20716 51CC           83C4                   F4  add	sp,*-$C
20717                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20718 51CF           BB                   0F3E  mov	bx,#_vgafont8
20719 51D2           895E         FA            mov	-6[bp],bx
20720                                           !BCC_EOS
20721                                           ! 2261  addr=(xcurs*bpp)+ycurs*320;
20722                                           ! Debug: mul int = const $140 to unsigned char ycurs = [S+$E+8] (used reg = )
20723 51D5           8A46         0A            mov	al,$A[bp]
20724 51D8           30E4                       xor	ah,ah
20725 51DA           B9                   0140  mov	cx,#$140
20726 51DD           F7E9                       imul	cx
20727 51DF           50                         push	ax
20728                                           ! Debug: mul unsigned char bpp = [S+$10+$C] to unsigned char xcurs = [S+$10+6] (used reg = )
20729 51E0           8A46         0E            mov	al,$E[bp]
20730 51E3           30E4                       xor	ah,ah
20731 51E5           89C3                       mov	bx,ax
20732 51E7           8A46         08            mov	al,8[bp]
20733 51EA           30E4                       xor	ah,ah
20734 51EC           89D9                       mov	cx,bx
20735 51EE           F7E9                       imul	cx
20736                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
20737 51F0           0346         F2            add	ax,-$E[bp]
20738 51F3           44                         inc	sp
20739 51F4           44                         inc	sp
20740                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
20741 51F5           8946         F8            mov	-8[bp],ax
20742                                           !BCC_EOS
20743                                           ! 2262  src = car * 8;
20744                                           ! Debug: mul int = const 8 to unsigned char car = [S+$E+2] (used reg = )
20745 51F8           8A46         04            mov	al,4[bp]
20746 51FB           30E4                       xor	ah,ah
20747 51FD           B1                     03  mov	cl,*3
20748 51FF           D3E0                       shl	ax,cl
20749                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
20750 5201           8946         F4            mov	-$C[bp],ax
20751                                           !BCC_EOS
20752                                           ! 2263  for(i=0;i<8;i++)
20753                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
20754 5204           30C0                       xor	al,al
20755 5206           8846         FF            mov	-1[bp],al
20756                                           !BCC_EOS
20757                                           !BCC_EOS
20758                                           ! 2264   {
20759 5209           E9         01B3            br 	.147
20760                       0000520C            .148:
20761                                           ! 2265    dest=addr+(i>>1)*80;
20762                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-3] (used reg = )
20763 520C           8A46         FF            mov	al,-1[bp]
20764 520F           30E4                       xor	ah,ah
20765 5211           D1E8                       shr	ax,*1
20766                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
20767 5213           B9                   0050  mov	cx,*$50
20768 5216           F7E9                       imul	cx
20769                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
20770                                           ! Debug: expression subtree swapping
20771 5218           0346         F8            add	ax,-8[bp]
20772                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
20773 521B           8946         F6            mov	-$A[bp],ax
20774                                           !BCC_EOS
20775                                           ! 2266    if (i & 1) dest += 0x2000;
20776                                           ! Debug: and int = const 1 to unsigned char i = [S+$E-3] (used reg = )
20777 521E           8A46         FF            mov	al,-1[bp]
20778 5221           24                     01  and	al,*1
20779 5223           84C0                       test	al,al
20780 5225           74           09            je  	.149
20781                       00005227            .14A:
20782                                           ! Debug: addab int = const $2000 to unsigned short dest = [S+$E-$C] (used reg = )
20783 5227           8B46         F6            mov	ax,-$A[bp]
20784 522A           05                   2000  add	ax,#$2000
20785 522D           8946         F6            mov	-$A[bp],ax
20786                                           !BCC_EOS
20787                                           ! 2267    mask = 0x80;
20788                       00005230            .149:
20789                                           ! Debug: eq int = const $80 to unsigned char mask = [S+$E-5] (used reg = )
20790 5230           B0                     80  mov	al,#$80
20791 5232           8846         FD            mov	-3[bp],al
20792                                           !BCC_EOS
20793                                           ! 2268    if (bpp == 1)
20794                                           ! Debug: logeq int = const 1 to unsigned char bpp = [S+$E+$C] (used reg = )
20795 5235           8A46         0E            mov	al,$E[bp]
20796 5238           3C                     01  cmp	al,*1
20797 523A         0F85         00B3            bne 	.14B
20798                       0000523E            .14C:
20799                                           ! 2269     {
20800                                           ! 2270      if (attr & 0x80)
20801                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
20802 523E           8A46         06            mov	al,6[bp]
20803 5241           24                     80  and	al,#$80
20804 5243           84C0                       test	al,al
20805 5245           74           12            je  	.14D
20806                       00005247            .14E:
20807                                           ! 2271       {
20808                                           ! 2272        data = read_byte(0xb800,dest);
20809                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
20810 5247           FF76         F6            push	-$A[bp]
20811                                           ! Debug: list unsigned int = const $B800 (used reg = )
20812 524A           B8                   B800  mov	ax,#$B800
20813 524D           50                         push	ax
20814                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20815 524E           E8         284F            call	_read_byte
20816 5251           83C4                   04  add	sp,*4
20817                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$E-6] (used reg = )
20818 5254           8846         FC            mov	-4[bp],al
20819                                           !BCC_EOS
20820                                           ! 2273       }
20821                                           ! 2274      else
20822                                           ! 2275       {
20823 5257           EB           05            jmp .14F
20824                       00005259            .14D:
20825                                           ! 2276        data = 0x00;
20826                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
20827 5259           30C0                       xor	al,al
20828 525B           8846         FC            mov	-4[bp],al
20829                                           !BCC_EOS
20830                                           ! 2277       }
20831                                           ! 2278      for(j=0;j<8;j++)
20832                       0000525E            .14F:
20833                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
20834 525E           30C0                       xor	al,al
20835 5260           8846         FE            mov	-2[bp],al
20836                                           !BCC_EOS
20837                                           !BCC_EOS
20838                                           ! 2279       {
20839 5263           EB           6F            jmp .152
20840                       00005265            .153:
20841                                           ! 2280        if (fdata[src+i] & mask)
20842                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
20843 5265           8B46         F4            mov	ax,-$C[bp]
20844 5268           0246         FF            add	al,-1[bp]
20845 526B           80D4                   00  adc	ah,*0
20846                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20847 526E           0346         FA            add	ax,-6[bp]
20848 5271           89C3                       mov	bx,ax
20849                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
20850 5273           8A07                       mov	al,[bx]
20851 5275           2246         FD            and	al,-3[bp]
20852 5278           84C0                       test	al,al
20853 527A           74           47            je  	.154
20854                       0000527C            .155:
20855                                           ! 2281         {
20856                                           ! 2282          if (attr & 0x80)
20857                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
20858 527C           8A46         06            mov	al,6[bp]
20859 527F           24                     80  and	al,#$80
20860 5281           84C0                       test	al,al
20861 5283           74           20            je  	.156
20862                       00005285            .157:
20863                                           ! 2283           {
20864                                           ! 2284            data ^= (attr & 0x01) << (7-j);
20865                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 7 (used reg = )
20866 5285           B8                   0007  mov	ax,*7
20867 5288           2A46         FE            sub	al,-2[bp]
20868 528B           80DC                   00  sbb	ah,*0
20869 528E           50                         push	ax
20870                                           ! Debug: and int = const 1 to unsigned char attr = [S+$10+4] (used reg = )
20871 528F           8A46         06            mov	al,6[bp]
20872 5292           24                     01  and	al,*1
20873                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
20874 5294           30E4                       xor	ah,ah
20875 5296           8B4E         F2            mov	cx,-$E[bp]
20876 5299           D3E0                       shl	ax,cl
20877 529B           44                         inc	sp
20878 529C           44                         inc	sp
20879                                           ! Debug: eorab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
20880 529D           3246         FC            xor	al,-4[bp]
20881 52A0           8846         FC            mov	-4[bp],al
20882                                           !BCC_EOS
20883                                           ! 2285           }
20884                                           ! 2286          else
20885                                           ! 2287           {
20886 52A3           EB           1E            jmp .158
20887                       000052A5            .156:
20888                                           ! 2288            data |= (attr & 0x01) << (7-j);
20889                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 7 (used reg = )
20890 52A5           B8                   0007  mov	ax,*7
20891 52A8           2A46         FE            sub	al,-2[bp]
20892 52AB           80DC                   00  sbb	ah,*0
20893 52AE           50                         push	ax
20894                                           ! Debug: and int = const 1 to unsigned char attr = [S+$10+4] (used reg = )
20895 52AF           8A46         06            mov	al,6[bp]
20896 52B2           24                     01  and	al,*1
20897                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
20898 52B4           30E4                       xor	ah,ah
20899 52B6           8B4E         F2            mov	cx,-$E[bp]
20900 52B9           D3E0                       shl	ax,cl
20901 52BB           44                         inc	sp
20902 52BC           44                         inc	sp
20903                                           ! Debug: orab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
20904 52BD           0A46         FC            or	al,-4[bp]
20905 52C0           8846         FC            mov	-4[bp],al
20906                                           !BCC_EOS
20907                                           ! 2289           }
20908                                           ! 2290         }
20909                       000052C3            .158:
20910                                           ! 2291        ma
20911                                           ! 2291 sk >>= 1;
20912                       000052C3            .154:
20913                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
20914 52C3           8A46         FD            mov	al,-3[bp]
20915 52C6           30E4                       xor	ah,ah
20916 52C8           D1E8                       shr	ax,*1
20917 52CA           8846         FD            mov	-3[bp],al
20918                                           !BCC_EOS
20919                                           ! 2292       }
20920                                           ! 2293      write_byte(0xb800,dest,data);
20921                       000052CD            .151:
20922                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
20923 52CD           8A46         FE            mov	al,-2[bp]
20924 52D0           40                         inc	ax
20925 52D1           8846         FE            mov	-2[bp],al
20926                       000052D4            .152:
20927                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
20928 52D4           8A46         FE            mov	al,-2[bp]
20929 52D7           3C                     08  cmp	al,*8
20930 52D9           72           8A            jb 	.153
20931                       000052DB            .159:
20932                       000052DB            .150:
20933                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
20934 52DB           8A46         FC            mov	al,-4[bp]
20935 52DE           30E4                       xor	ah,ah
20936 52E0           50                         push	ax
20937                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
20938 52E1           FF76         F6            push	-$A[bp]
20939                                           ! Debug: list unsigned int = const $B800 (used reg = )
20940 52E4           B8                   B800  mov	ax,#$B800
20941 52E7           50                         push	ax
20942                                           ! Debug: func () void = write_byte+0 (used reg = )
20943 52E8           E8         27DB            call	_write_byte
20944 52EB           83C4                   06  add	sp,*6
20945                                           !BCC_EOS
20946                                           ! 2294     }
20947                                           ! 2295    else
20948                                           ! 2296     {
20949 52EE           E9         00C7            br 	.15A
20950                       000052F1            .14B:
20951                                           ! 2297      while (mask > 0)
20952                                           ! 2298       {
20953 52F1           E9         00BB            br 	.15C
20954                       000052F4            .15D:
20955                                           ! 2299        if (attr & 0x80)
20956                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
20957 52F4           8A46         06            mov	al,6[bp]
20958 52F7           24                     80  and	al,#$80
20959 52F9           84C0                       test	al,al
20960 52FB           74           12            je  	.15E
20961                       000052FD            .15F:
20962                                           ! 2300         {
20963                                           ! 2301          data = read_byte(0xb800,dest);
20964                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
20965 52FD           FF76         F6            push	-$A[bp]
20966                                           ! Debug: list unsigned int = const $B800 (used reg = )
20967 5300           B8                   B800  mov	ax,#$B800
20968 5303           50                         push	ax
20969                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20970 5304           E8         2799            call	_read_byte
20971 5307           83C4                   04  add	sp,*4
20972                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$E-6] (used reg = )
20973 530A           8846         FC            mov	-4[bp],al
20974                                           !BCC_EOS
20975                                           ! 2302         }
20976                                           ! 2303        else
20977                                           ! 2304         {
20978 530D           EB           05            jmp .160
20979                       0000530F            .15E:
20980                                           ! 2305          data = 0x00;
20981                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
20982 530F           30C0                       xor	al,al
20983 5311           8846         FC            mov	-4[bp],al
20984                                           !BCC_EOS
20985                                           ! 2306         }
20986                                           ! 2307        for(j=0;j<4;j++)
20987                       00005314            .160:
20988                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
20989 5314           30C0                       xor	al,al
20990 5316           8846         FE            mov	-2[bp],al
20991                                           !BCC_EOS
20992                                           !BCC_EOS
20993                                           ! 2308         {
20994 5319           EB           73            jmp .163
20995                       0000531B            .164:
20996                                           ! 2309          if (fdata[src+i] & mask)
20997                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
20998 531B           8B46         F4            mov	ax,-$C[bp]
20999 531E           0246         FF            add	al,-1[bp]
21000 5321           80D4                   00  adc	ah,*0
21001                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21002 5324           0346         FA            add	ax,-6[bp]
21003 5327           89C3                       mov	bx,ax
21004                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21005 5329           8A07                       mov	al,[bx]
21006 532B           2246         FD            and	al,-3[bp]
21007 532E           84C0                       test	al,al
21008 5330           74           4B            je  	.165
21009                       00005332            .166:
21010                                           ! 2310           {
21011                                           ! 2311            if (attr & 0x80)
21012                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21013 5332           8A46         06            mov	al,6[bp]
21014 5335           24                     80  and	al,#$80
21015 5337           84C0                       test	al,al
21016 5339           74           22            je  	.167
21017                       0000533B            .168:
21018                                           ! 2312             {
21019                                           ! 2313              data ^= (attr & 0x03) << ((3-j)*2);
21020                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 3 (used reg = )
21021 533B           B8                   0003  mov	ax,*3
21022 533E           2A46         FE            sub	al,-2[bp]
21023 5341           80DC                   00  sbb	ah,*0
21024                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21025 5344           D1E0                       shl	ax,*1
21026 5346           50                         push	ax
21027                                           ! Debug: and int = const 3 to unsigned char attr = [S+$10+4] (used reg = )
21028 5347           8A46         06            mov	al,6[bp]
21029 534A           24                     03  and	al,*3
21030                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21031 534C           30E4                       xor	ah,ah
21032 534E           8B4E         F2            mov	cx,-$E[bp]
21033 5351           D3E0                       shl	ax,cl
21034 5353           44                         inc	sp
21035 5354           44                         inc	sp
21036                                           ! Debug: eorab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21037 5355           3246         FC            xor	al,-4[bp]
21038 5358           8846         FC            mov	-4[bp],al
21039                                           !BCC_EOS
21040                                           ! 2314             }
21041                                           ! 2315            else
21042                                           ! 2316             {
21043 535B           EB           20            jmp .169
21044                       0000535D            .167:
21045                                           ! 2317              data |= (attr & 0x03) << ((3-j)*2);
21046                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 3 (used reg = )
21047 535D           B8                   0003  mov	ax,*3
21048 5360           2A46         FE            sub	al,-2[bp]
21049 5363           80DC                   00  sbb	ah,*0
21050                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21051 5366           D1E0                       shl	ax,*1
21052 5368           50                         push	ax
21053                                           ! Debug: and int = const 3 to unsigned char attr = [S+$10+4] (used reg = )
21054 5369           8A46         06            mov	al,6[bp]
21055 536C           24                     03  and	al,*3
21056                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21057 536E           30E4                       xor	ah,ah
21058 5370           8B4E         F2            mov	cx,-$E[bp]
21059 5373           D3E0                       shl	ax,cl
21060 5375           44                         inc	sp
21061 5376           44                         inc	sp
21062                                           ! Debug: orab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21063 5377           0A46         FC            or	al,-4[bp]
21064 537A           8846         FC            mov	-4[bp],al
21065                                           !BCC_EOS
21066                                           ! 2318             }
21067                                           ! 2319           }
21068                       0000537D            .169:
21069                                           ! 2320          mask >>= 1;
21070                       0000537D            .165:
21071                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
21072 537D           8A46         FD            mov	al,-3[bp]
21073 5380           30E4                       xor	ah,ah
21074 5382           D1E8                       shr	ax,*1
21075 5384           8846         FD            mov	-3[bp],al
21076                                           !BCC_EOS
21077                                           ! 2321         }
21078                                           ! 2322        write_byte(0xb800,dest,data);
21079                       00005387            .162:
21080                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21081 5387           8A46         FE            mov	al,-2[bp]
21082 538A           40                         inc	ax
21083 538B           8846         FE            mov	-2[bp],al
21084                       0000538E            .163:
21085                                           ! Debug: lt int = const 4 to unsigned char j = [S+$E-4] (used reg = )
21086 538E           8A46         FE            mov	al,-2[bp]
21087 5391           3C                     04  cmp	al,*4
21088 5393           72           86            jb 	.164
21089                       00005395            .16A:
21090                       00005395            .161:
21091                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
21092 5395           8A46         FC            mov	al,-4[bp]
21093 5398           30E4                       xor	ah,ah
21094 539A           50                         push	ax
21095                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
21096 539B           FF76         F6            push	-$A[bp]
21097                                           ! Debug: list unsigned int = const $B800 (used reg = )
21098 539E           B8                   B800  mov	ax,#$B800
21099 53A1           50                         push	ax
21100                                           ! Debug: func () void = write_byte+0 (used reg = )
21101 53A2           E8         2721            call	_write_byte
21102 53A5           83C4                   06  add	sp,*6
21103                                           !BCC_EOS
21104                                           ! 2323        dest += 1;
21105                                           ! Debug: addab int = const 1 to unsigned short dest = [S+$E-$C] (used reg = )
21106 53A8           8B46         F6            mov	ax,-$A[bp]
21107 53AB           40                         inc	ax
21108 53AC           8946         F6            mov	-$A[bp],ax
21109                                           !BCC_EOS
21110                                           ! 2324       }
21111                                           ! 2325     }
21112                       000053AF            .15C:
21113                                           ! Debug: gt int = const 0 to unsigned char mask = [S+$E-5] (used reg = )
21114 53AF           8A46         FD            mov	al,-3[bp]
21115 53B2           84C0                       test	al,al
21116 53B4         0F85         FF3C            bne 	.15D
21117                       000053B8            .16B:
21118                       000053B8            .15B:
21119                                           ! 2326   }
21120                       000053B8            .15A:
21121                                           ! 2327 }
21122                       000053B8            .146:
21123                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
21124 53B8           8A46         FF            mov	al,-1[bp]
21125 53BB           40                         inc	ax
21126 53BC           8846         FF            mov	-1[bp],al
21127                       000053BF            .147:
21128                                           ! Debug: lt int = const 8 to unsigned char i = [S+$E-3] (used reg = )
21129 53BF           8A46         FF            mov	al,-1[bp]
21130 53C2           3C                     08  cmp	al,*8
21131 53C4         0F82         FE44            blo 	.148
21132                       000053C8            .16C:
21133                       000053C8            .145:
21134 53C8           89EC                       mov	sp,bp
21135 53CA           5D                         pop	bp
21136 53CB           C3                         ret
21137                                           ! 2328 static void write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols)
21138                                           ! Register BX used in function write_gfx_char_cga
21139                                           ! 2329 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;
21140                       000053CC            _write_gfx_char_lin:
21141                                           !BCC_EOS
21142                                           !BCC_EOS
21143                                           !BCC_EOS
21144                                           !BCC_EOS
21145                                           !BCC_EOS
21146                                           ! 2330 {
21147                                           ! 2331  Bit8u i,j,mask,data;
21148                                           !BCC_EOS
21149                                           ! 2332  Bit8u *fdata;
21150                                           !BCC_EOS
21151                                           ! 2333  Bit16u addr,dest,src;
21152                                           !BCC_EOS
21153                                           ! 2334  fdata = &vgafont8;
21154 53CC           55                         push	bp
21155 53CD           89E5                       mov	bp,sp
21156 53CF           83C4                   F4  add	sp,*-$C
21157                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21158 53D2           BB                   0F3E  mov	bx,#_vgafont8
21159 53D5           895E         FA            mov	-6[bp],bx
21160                                           !BCC_EOS
21161                                           ! 2335  addr=xcurs*8+ycurs*nbcols*64;
21162                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char ycurs = [S+$E+8] (used reg = )
21163 53D8           8A46         0C            mov	al,$C[bp]
21164 53DB           30E4                       xor	ah,ah
21165 53DD           89C3                       mov	bx,ax
21166 53DF           8A46         0A            mov	al,$A[bp]
21167 53E2           30E4                       xor	ah,ah
21168 53E4           89D9                       mov	cx,bx
21169 53E6           F7E9                       imul	cx
21170                                           ! Debug: mul int = const $40 to unsigned int = ax+0 (used reg = )
21171 53E8           B1                     06  mov	cl,*6
21172 53EA           D3E0                       shl	ax,cl
21173 53EC           50                         push	ax
21174                                           ! Debug: mul int = const 8 to unsigned char xcurs = [S+$10+6] (used reg = )
21175 53ED           8A46         08            mov	al,8[bp]
21176 53F0           30E4                       xor	ah,ah
21177 53F2           B1                     03  mov	cl,*3
21178 53F4           D3E0                       shl	ax,cl
21179                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
21180 53F6           0346         F2            add	ax,-$E[bp]
21181 53F9           44                         inc	sp
21182 53FA           44                         inc	sp
21183                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21184 53FB           8946         F8            mov	-8[bp],ax
21185                                           !BCC_EOS
21186                                           ! 2336  src = car * 8;
21187                                           ! Debug: mul int = const 8 to unsigned char car = [S+$E+2] (used reg = )
21188 53FE           8A46         04            mov	al,4[bp]
21189 5401           30E4                       xor	ah,ah
21190 5403           B1                     03  mov	cl,*3
21191 5405           D3E0                       shl	ax,cl
21192                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
21193 5407           8946         F4            mov	-$C[bp],ax
21194                                           !BCC_EOS
21195                                           ! 2337  for(i=0;i<8;i++)
21196                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
21197 540A           30C0                       xor	al,al
21198 540C           8846         FF            mov	-1[bp],al
21199                                           !BCC_EOS
21200                                           !BCC_EOS
21201                                           ! 2338   {
21202 540F           E9         0081            br 	.16F
21203                       00005412            .170:
21204                                           ! 2339    dest=addr+i*nbcols*8;
21205                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-3] (used reg = )
21206 5412           8A46         0C            mov	al,$C[bp]
21207 5415           30E4                       xor	ah,ah
21208 5417           89C3                       mov	bx,ax
21209 5419           8A46         FF            mov	al,-1[bp]
21210 541C           30E4                       xor	ah,ah
21211 541E           89D9                       mov	cx,bx
21212 5420           F7E9                       imul	cx
21213                                           ! Debug: mul int = const 8 to unsigned int = ax+0 (used reg = )
21214 5422           B1                     03  mov	cl,*3
21215 5424           D3E0                       shl	ax,cl
21216                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21217                                           ! Debug: expression subtree swapping
21218 5426           0346         F8            add	ax,-8[bp]
21219                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
21220 5429           8946         F6            mov	-$A[bp],ax
21221                                           !BCC_EOS
21222                                           ! 2340    mask = 0x80;
21223                                           ! Debug: eq int = const $80 to unsigned char mask = [S+$E-5] (used reg = )
21224 542C           B0                     80  mov	al,#$80
21225 542E           8846         FD            mov	-3[bp],al
21226                                           !BCC_EOS
21227                                           ! 2341    for(j=0;j<8;j++)
21228                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
21229 5431           30C0                       xor	al,al
21230 5433           8846         FE            mov	-2[bp],al
21231                                           !BCC_EOS
21232                                           !BCC_EOS
21233                                           ! 2342     {
21234 5436           EB           4D            jmp .173
21235                       00005438            .174:
21236                                           ! 2343      data = 0x00;
21237                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
21238 5438           30C0                       xor	al,al
21239 543A           8846         FC            mov	-4[bp],al
21240                                           !BCC_EOS
21241                                           ! 2344      if (fdata[src+i] & mask)
21242                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21243 543D           8B46         F4            mov	ax,-$C[bp]
21244 5440           0246         FF            add	al,-1[bp]
21245 5443           80D4                   00  adc	ah,*0
21246                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21247 5446           0346         FA            add	ax,-6[bp]
21248 5449           89C3                       mov	bx,ax
21249                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21250 544B           8A07                       mov	al,[bx]
21251 544D           2246         FD            and	al,-3[bp]
21252 5450           84C0                       test	al,al
21253 5452           74           06            je  	.175
21254                       00005454            .176:
21255                                           ! 2345       {
21256                                           ! 2346        data = attr;
21257                                           ! Debug: eq unsigned char attr = [S+$E+4] to unsigned char data = [S+$E-6] (used reg = )
21258 5454           8A46         06            mov	al,6[bp]
21259 5457           8846         FC            mov	-4[bp],al
21260                                           !BCC_EOS
21261                                           ! 2347       }
21262                                           ! 2348      write_byte(0xa000,dest+j,data);
21263                       0000545A            .175:
21264                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
21265 545A           8A46         FC            mov	al,-4[bp]
21266 545D           30E4                       xor	ah,ah
21267 545F           50                         push	ax
21268                                           ! Debug: add unsigned char j = [S+$10-4] to unsigned short dest = [S+$10-$C] (used reg = )
21269 5460           8B46         F6            mov	ax,-$A[bp]
21270 5463           0246         FE            add	al,-2[bp]
21271 5466           80D4                   00  adc	ah,*0
21272                                           ! Debug: list unsigned int = ax+0 (used reg = )
21273 5469           50                         push	ax
21274                                           ! Debug: list unsigned int = const $A000 (used reg = )
21275 546A           B8                   A000  mov	ax,#$A000
21276 546D           50                         push	ax
21277                                           ! Debug: func () void = write_byte+0 (used reg = )
21278 546E           E8         2655            call	_write_byte
21279 5471           83C4                   06  add	sp,*6
21280                                           !BCC_EOS
21281                                           ! 2349      mask >>= 1;
21282                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
21283 5474           8A46         FD            mov	al,-3[bp]
21284 5477           30E4                       xor	ah,ah
21285 5479           D1E8                       shr	ax,*1
21286 547B           8846         FD            mov	-3[bp],al
21287                                           !BCC_EOS
21288                                           ! 2350     }
21289                                           ! 2351   }
21290                       0000547E            .172:
21291                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21292 547E           8A46         FE            mov	al,-2[bp]
21293 5481           40                         inc	ax
21294 5482           8846         FE            mov	-2[bp],al
21295                       00005485            .173:
21296                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
21297 5485           8A46         FE            mov	al,-2[bp]
21298 5488           3C                     08  cmp	al,*8
21299 548A           72           AC            jb 	.174
21300                       0000548C            .177:
21301                       0000548C            .171:
21302                                           ! 2352 }
21303                       0000548C            .16E:
21304                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
21305 548C           8A46         FF            mov	al,-1[bp]
21306 548F           40                         inc	ax
21307 5490           8846         FF            mov	-1[bp],al
21308                       00005493            .16F:
21309                                           ! Debug: lt int = const 8 to unsigned char i = [S+$E-3] (used reg = )
21310 5493           8A46         FF            mov	al,-1[bp]
21311 5496           3C                     08  cmp	al,*8
21312 5498         0F82         FF76            blo 	.170
21313                       0000549C            .178:
21314                       0000549C            .16D:
21315 549C           89EC                       mov	sp,bp
21316 549E           5D                         pop	bp
21317 549F           C3                         ret
21318                                           ! 2353 static void biosfn_write_char_attr (car,page,attr,count)
21319                                           ! Register BX used in function write_gfx_char_lin
21320                                           ! 2354 Bit8u car;Bit8u page;Bit8u attr;Bit16u count;
21321                       000054A0            _biosfn_write_char_attr:
21322                                           !BCC_EOS
21323                                           !BCC_EOS
21324                                           !BCC_EOS
21325                                           !BCC_EOS
21326                                           ! 2355 {
21327                                           ! 2356  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
21328                                           !BCC_EOS
21329                                           ! 2357  Bit16u nbcols,nbrows,address;
21330                                           !BCC_EOS
21331                                           ! 2358  Bit16u cursor,dummy;
21332                                           !BCC_EOS
21333                                           ! 2359  mode=read_byte(0x40,0x49);
21334 54A0           55                         push	bp
21335 54A1           89E5                       mov	bp,sp
21336 54A3           83C4                   F0  add	sp,*-$10
21337                                           ! Debug: list int = const $49 (used reg = )
21338 54A6           B8                   0049  mov	ax,*$49
21339 54A9           50                         push	ax
21340                                           ! Debug: list int = const $40 (used reg = )
21341 54AA           B8                   0040  mov	ax,*$40
21342 54AD           50                         push	ax
21343                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21344 54AE           E8         25EF            call	_read_byte
21345 54B1           83C4                   04  add	sp,*4
21346                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
21347 54B4           8846         FC            mov	-4[bp],al
21348                                           !BCC_EOS
21349                                           ! 2360  line=find_vga_entry(mode);
21350                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
21351 54B7           8A46         FC            mov	al,-4[bp]
21352 54BA           30E4                       xor	ah,ah
21353 54BC           50                         push	ax
21354                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
21355 54BD           E8         24F4            call	_find_vga_entry
21356 54C0           44                         inc	sp
21357 54C1           44                         inc	sp
21358                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
21359 54C2           8846         FB            mov	-5[bp],al
21360                                           !BCC_EOS
21361                                           ! 2361  if(line==0xFF)return;
21362                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
21363 54C5           8A46         FB            mov	al,-5[bp]
21364 54C8           3C                     FF  cmp	al,#$FF
21365 54CA           75           04            jne 	.179
21366                       000054CC            .17A:
21367 54CC           89EC                       mov	sp,bp
21368 54CE           5D                         pop	bp
21369 54CF           C3                         ret
21370                                           !BCC_EOS
21371                                           ! 2362  biosfn_get_cursor_pos(page,&dummy,&cursor);
21372                       000054D0            .179:
21373                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
21374 54D0           8D5E         F2            lea	bx,-$E[bp]
21375 54D3           53                         push	bx
21376                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
21377 54D4           8D5E         F0            lea	bx,-$10[bp]
21378 54D7           53                         push	bx
21379                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
21380 54D8           8A46         06            mov	al,6[bp]
21381 54DB           30E4                       xor	ah,ah
21382 54DD           50                         push	ax
21383                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
21384 54DE           E8         EE7C            call	_biosfn_get_cursor_pos
21385 54E1           83C4                   06  add	sp,*6
21386                                           !BCC_EOS
21387                                           ! 2363  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
21388                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
21389 54E4           8A46         F2            mov	al,-$E[bp]
21390                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
21391 54E7           8846         FE            mov	-2[bp],al
21392                                           !BCC_EOS
21393                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
21394 54EA           8B46         F2            mov	ax,-$E[bp]
21395 54ED           30C0                       xor	al,al
21396                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
21397 54EF           88E0                       mov	al,ah
21398 54F1           30E4                       xor	ah,ah
21399                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
21400 54F3           8846         FD            mov	-3[bp],al
21401                                           !BCC_EOS
21402                                           ! 2364  nbrows=read_byte(0x40,0x84)+1;
21403                                           ! Debug: list int = const $84 (used reg = )
21404 54F6           B8                   0084  mov	ax,#$84
21405 54F9           50                         push	ax
21406                                           ! Debug: list int = const $40 (used reg = )
21407 54FA           B8                   0040  mov	ax,*$40
21408 54FD           50                         push	ax
21409                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21410 54FE           E8         259F            call	_read_byte
21411 5501           83C4                   04  add	sp,*4
21412                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
21413 5504           30E4                       xor	ah,ah
21414                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
21415 5506           40                         inc	ax
21416 5507           8946         F6            mov	-$A[bp],ax
21417                                           !BCC_EOS
21418                                           ! 2365  nbcols=read_word(0x40,0x4A);
21419                                           ! Debug: list int = const $4A (used reg = )
21420 550A           B8                   004A  mov	ax,*$4A
21421 550D           50                         push	ax
21422                                           ! Debug: list int = const $40 (used reg = )
21423 550E           B8                   0040  mov	ax,*$40
21424 5511           50                         push	ax
21425                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
21426 5512           E8         259E            call	_read_word
21427 5515           83C4                   04  add	sp,*4
21428                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
21429 5518           8946         F8            mov	-8[bp],ax
21430                                           !BCC_EOS
21431                                           ! 2366  if(vga_modes[line].class==0x00)
21432                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
21433 551B           8A46         FB            mov	al,-5[bp]
21434 551E           30E4                       xor	ah,ah
21435 5520           B1                     03  mov	cl,*3
21436 5522           D3E0                       shl	ax,cl
21437 5524           89C3                       mov	bx,ax
21438 5526           81C3                 01DA  add	bx,#_vga_modes
21439                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
21440 552A           8A47         01            mov	al,1[bx]
21441 552D           84C0                       test	al,al
21442 552F           75           6A            jne 	.17B
21443                       00005531            .17C:
21444                                           ! 2367   {
21445                                           ! 2368    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
21446                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
21447 5531           8A46         FD            mov	al,-3[bp]
21448 5534           30E4                       xor	ah,ah
21449 5536           8B4E         F8            mov	cx,-8[bp]
21450 5539           F7E9                       imul	cx
21451                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
21452                                           ! Debug: expression subtree swapping
21453 553B           0246         FE            add	al,-2[bp]
21454 553E           80D4                   00  adc	ah,*0
21455                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21456 5541           D1E0                       shl	ax,*1
21457 5543           50                         push	ax
21458                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
21459 5544           8B46         F8            mov	ax,-8[bp]
21460 5547           8B4E         F6            mov	cx,-$A[bp]
21461 554A           F7E9                       imul	cx
21462                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21463 554C           D1E0                       shl	ax,*1
21464                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
21465 554E           0C                     FF  or	al,#$FF
21466                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
21467                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
21468 5550           89C3                       mov	bx,ax
21469 5552           8A46         06            mov	al,6[bp]
21470 5555           30E4                       xor	ah,ah
21471 5557           93                         xchg	ax,bx
21472 5558           40                         inc	ax
21473 5559           89D9                       mov	cx,bx
21474 555B           F7E9                       imul	cx
21475                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
21476 555D           0346         EE            add	ax,-$12[bp]
21477 5560           44                         inc	sp
21478 5561           44                         inc	sp
21479                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
21480 5562           8946         F4            mov	-$C[bp],ax
21481                                           !BCC_EOS
21482                                           ! 2369    dummy=((Bit16u)attr<<8)+car;
21483                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+6] (used reg = )
21484 5565           8A46         08            mov	al,8[bp]
21485 5568           30E4                       xor	ah,ah
21486                                           ! Debug: sl int = const 8 to unsigned short = ax+0 (used reg = )
21487 556A           88C4                       mov	ah,al
21488 556C           30C0                       xor	al,al
21489                                           ! Debug: add unsigned char car = [S+$12+2] to unsigned int = ax+0 (used reg = )
21490 556E           0246         04            add	al,4[bp]
21491 5571           80D4                   00  adc	ah,*0
21492                                           ! Debug: eq unsigned int = ax+0 to unsigned short dummy = [S+$12-$12] (used reg = )
21493 5574           8946         F0            mov	-$10[bp],ax
21494                                           !BCC_EOS
21495                                           ! 2370    memsetw(vga_modes[line].sstart,address,dummy,count);
21496                                           ! Debug: list unsigned short count = [S+$12+8] (used reg = )
21497 5577           FF76         0A            push	$A[bp]
21498                                           ! Debug: list unsigned short dummy = [S+$14-$12] (used reg = )
21499 557A           FF76         F0            push	-$10[bp]
21500                                           ! Debug: list unsigned short address = [S+$16-$E] (used reg = )
21501 557D           FF76         F4            push	-$C[bp]
21502                                           ! Debug: ptradd unsigned char line = [S+$18-7] to [$10] struct  = vga_modes+0 (used reg = )
21503 5580           8A46         FB            mov	al,-5[bp]
21504 5583           30E4                       xor	ah,ah
21505 5585           B1                     03  mov	cl,*3
21506 5587           D3E0                       shl	ax,cl
21507 5589           89C3                       mov	bx,ax
21508 558B           81C3                 01DA  add	bx,#_vga_modes
21509                                           ! Debug: list unsigned short = [bx+4] (used reg = )
21510 558F           FF77         04            push	4[bx]
21511                                           ! Debug: func () void = memsetw+0 (used reg = )
21512 5592           E8         2486            call	_memsetw
21513 5595           83C4                   08  add	sp,*8
21514                                           !BCC_EOS
21515                                           ! 2371   }
21516                                           ! 2372  else
21517                                           ! 2373   {
21518 5598           E9         00F3            br 	.17D
21519                       0000559B            .17B:
21520                                           ! 2374    cheight=video_param_table[line_to_vpti[line]].cheight;
21521                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] unsigned char = line_to_vpti+0 (used reg = )
21522 559B           8A46         FB            mov	al,-5[bp]
21523 559E           30E4                       xor	ah,ah
21524 55A0           89C3                       mov	bx,ax
21525                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
21526 55A2           8A87       025A            mov	al,_line_to_vpti[bx]
21527 55A6           30E4                       xor	ah,ah
21528 55A8           B1                     06  mov	cl,*6
21529 55AA           D3E0                       shl	ax,cl
21530 55AC           89C3                       mov	bx,ax
21531 55AE           81C3                 026E  add	bx,#_video_param_table
21532                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$12-3] (used reg = )
21533 55B2           8A47         02            mov	al,2[bx]
21534 55B5           8846         FF            mov	-1[bp],al
21535                                           !BCC_EOS
21536                                           ! 2375    bpp=vga_modes[line].pixbits;
21537                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
21538 55B8           8A46         FB            mov	al,-5[bp]
21539 55BB           30E4                       xor	ah,ah
21540 55BD           B1                     03  mov	cl,*3
21541 55BF           D3E0                       shl	ax,cl
21542 55C1           89C3                       mov	bx,ax
21543 55C3           81C3                 01DA  add	bx,#_vga_modes
21544                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
21545 55C7           8A47         03            mov	al,3[bx]
21546 55CA           8846         FA            mov	-6[bp],al
21547                                           !BCC_EOS
21548                                           ! 2376    while((count-->0) && (xcurs<nbcols))
21549                                           ! 2377     {
21550 55CD           E9         00A6            br 	.17F
21551                       000055D0            .180:
21552                                           ! 2378      switch(vga_modes[line].memmodel)
21553                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
21554 55D0           8A46         FB            mov	al,-5[bp]
21555 55D3           30E4                       xor	ah,ah
21556 55D5           B1                     03  mov	cl,*3
21557 55D7           D3E0                       shl	ax,cl
21558 55D9           89C3                       mov	bx,ax
21559 55DB           81C3                 01DA  add	bx,#_vga_modes
21560 55DF           8A47         02            mov	al,2[bx]
21561                                           ! 2379       {
21562 55E2           EB           77            jmp .183
21563                                           ! 2380        case 0x04:
21564                                           ! 2381        case 0x03:
21565                       000055E4            .184:
21566                                           ! 2382          write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheig
21567                       000055E4            .185:
21568                                           ! 2382 ht);
21569                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
21570 55E4           8A46         FF            mov	al,-1[bp]
21571 55E7           30E4                       xor	ah,ah
21572 55E9           50                         push	ax
21573                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
21574 55EA           FF76         F8            push	-8[bp]
21575                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
21576 55ED           8A46         FD            mov	al,-3[bp]
21577 55F0           30E4                       xor	ah,ah
21578 55F2           50                         push	ax
21579                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
21580 55F3           8A46         FE            mov	al,-2[bp]
21581 55F6           30E4                       xor	ah,ah
21582 55F8           50                         push	ax
21583                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
21584 55F9           8A46         08            mov	al,8[bp]
21585 55FC           30E4                       xor	ah,ah
21586 55FE           50                         push	ax
21587                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
21588 55FF           8A46         04            mov	al,4[bp]
21589 5602           30E4                       xor	ah,ah
21590 5604           50                         push	ax
21591                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
21592 5605           E8         FA4E            call	_write_gfx_char_pl4
21593 5608           83C4                   0C  add	sp,*$C
21594                                           !BCC_EOS
21595                                           ! 2383          break;
21596 560B           EB           62            jmp .181
21597                                           !BCC_EOS
21598                                           ! 2384        case 0x02:
21599                                           ! 2385          write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp);
21600                       0000560D            .186:
21601                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
21602 560D           8A46         FA            mov	al,-6[bp]
21603 5610           30E4                       xor	ah,ah
21604 5612           50                         push	ax
21605                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
21606 5613           FF76         F8            push	-8[bp]
21607                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
21608 5616           8A46         FD            mov	al,-3[bp]
21609 5619           30E4                       xor	ah,ah
21610 561B           50                         push	ax
21611                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
21612 561C           8A46         FE            mov	al,-2[bp]
21613 561F           30E4                       xor	ah,ah
21614 5621           50                         push	ax
21615                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
21616 5622           8A46         08            mov	al,8[bp]
21617 5625           30E4                       xor	ah,ah
21618 5627           50                         push	ax
21619                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
21620 5628           8A46         04            mov	al,4[bp]
21621 562B           30E4                       xor	ah,ah
21622 562D           50                         push	ax
21623                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
21624 562E           E8         FB98            call	_write_gfx_char_cga
21625 5631           83C4                   0C  add	sp,*$C
21626                                           !BCC_EOS
21627                                           ! 2386          break;
21628 5634           EB           39            jmp .181
21629                                           !BCC_EOS
21630                                           ! 2387        case 0x05:
21631                                           ! 2388          write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
21632                       00005636            .187:
21633                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
21634 5636           FF76         F8            push	-8[bp]
21635                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
21636 5639           8A46         FD            mov	al,-3[bp]
21637 563C           30E4                       xor	ah,ah
21638 563E           50                         push	ax
21639                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
21640 563F           8A46         FE            mov	al,-2[bp]
21641 5642           30E4                       xor	ah,ah
21642 5644           50                         push	ax
21643                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
21644 5645           8A46         08            mov	al,8[bp]
21645 5648           30E4                       xor	ah,ah
21646 564A           50                         push	ax
21647                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
21648 564B           8A46         04            mov	al,4[bp]
21649 564E           30E4                       xor	ah,ah
21650 5650           50                         push	ax
21651                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
21652 5651           E8         FD78            call	_write_gfx_char_lin
21653 5654           83C4                   0A  add	sp,*$A
21654                                           !BCC_EOS
21655                                           ! 2389          break;
21656 5657           EB           16            jmp .181
21657                                           !BCC_EOS
21658                                           ! 2390       }
21659                                           ! 2391      xcurs++;
21660 5659           EB           14            jmp .181
21661                       0000565B            .183:
21662 565B           2C                     02  sub	al,*2
21663 565D           74           AE            je 	.186
21664 565F           2C                     01  sub	al,*1
21665 5661         0F84         FF7F            beq 	.185
21666 5665           2C                     01  sub	al,*1
21667 5667         0F84         FF79            beq 	.184
21668 566B           2C                     01  sub	al,*1
21669 566D           74           C7            je 	.187
21670                       0000566F            .181:
21671                       FFFFFFEE            ..FFFA	=	-$12
21672                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
21673 566F           8A46         FE            mov	al,-2[bp]
21674 5672           40                         inc	ax
21675 5673           8846         FE            mov	-2[bp],al
21676                                           !BCC_EOS
21677                                           ! 2392     }
21678                                           ! 2393   }
21679                       00005676            .17F:
21680                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
21681 5676           8B46         0A            mov	ax,$A[bp]
21682 5679           48                         dec	ax
21683 567A           8946         0A            mov	$A[bp],ax
21684                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
21685 567D           3D                   FFFF  cmp	ax,*-1
21686 5680           74           0C            je  	.188
21687                       00005682            .189:
21688                                           ! Debug: lt unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
21689 5682           8A46         FE            mov	al,-2[bp]
21690 5685           30E4                       xor	ah,ah
21691 5687           3B46         F8            cmp	ax,-8[bp]
21692 568A         0F82         FF42            blo 	.180
21693                       0000568E            .188:
21694                       0000568E            .17E:
21695                                           ! 2394 }
21696                       0000568E            .17D:
21697 568E           89EC                       mov	sp,bp
21698 5690           5D                         pop	bp
21699 5691           C3                         ret
21700                                           ! 2395 static void biosfn_write_char_only (car,page,attr,count)
21701                                           ! Register BX used in function biosfn_write_char_attr
21702                                           ! 2396 Bit8u car;Bit8u page;Bit8u attr;Bit16u count;
21703                       00005692            _biosfn_write_char_only:
21704                                           !BCC_EOS
21705                                           !BCC_EOS
21706                                           !BCC_EOS
21707                                           !BCC_EOS
21708                                           ! 2397 {
21709                                           ! 2398  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
21710                                           !BCC_EOS
21711                                           ! 2399  Bit16u nbcols,nbrows,address;
21712                                           !BCC_EOS
21713                                           ! 2400  Bit16u cursor,dummy;
21714                                           !BCC_EOS
21715                                           ! 2401  mode=read_byte(0x40,0x49);
21716 5692           55                         push	bp
21717 5693           89E5                       mov	bp,sp
21718 5695           83C4                   F0  add	sp,*-$10
21719                                           ! Debug: list int = const $49 (used reg = )
21720 5698           B8                   0049  mov	ax,*$49
21721 569B           50                         push	ax
21722                                           ! Debug: list int = const $40 (used reg = )
21723 569C           B8                   0040  mov	ax,*$40
21724 569F           50                         push	ax
21725                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21726 56A0           E8         23FD            call	_read_byte
21727 56A3           83C4                   04  add	sp,*4
21728                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
21729 56A6           8846         FC            mov	-4[bp],al
21730                                           !BCC_EOS
21731                                           ! 2402  line=find_vga_entry(mode);
21732                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
21733 56A9           8A46         FC            mov	al,-4[bp]
21734 56AC           30E4                       xor	ah,ah
21735 56AE           50                         push	ax
21736                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
21737 56AF           E8         2302            call	_find_vga_entry
21738 56B2           44                         inc	sp
21739 56B3           44                         inc	sp
21740                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
21741 56B4           8846         FB            mov	-5[bp],al
21742                                           !BCC_EOS
21743                                           ! 2403  if(line==0xFF)return;
21744                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
21745 56B7           8A46         FB            mov	al,-5[bp]
21746 56BA           3C                     FF  cmp	al,#$FF
21747 56BC           75           04            jne 	.18A
21748                       000056BE            .18B:
21749 56BE           89EC                       mov	sp,bp
21750 56C0           5D                         pop	bp
21751 56C1           C3                         ret
21752                                           !BCC_EOS
21753                                           ! 2404  biosfn_get_cursor_pos(page,&dummy,&cursor);
21754                       000056C2            .18A:
21755                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
21756 56C2           8D5E         F2            lea	bx,-$E[bp]
21757 56C5           53                         push	bx
21758                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
21759 56C6           8D5E         F0            lea	bx,-$10[bp]
21760 56C9           53                         push	bx
21761                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
21762 56CA           8A46         06            mov	al,6[bp]
21763 56CD           30E4                       xor	ah,ah
21764 56CF           50                         push	ax
21765                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
21766 56D0           E8         EC8A            call	_biosfn_get_cursor_pos
21767 56D3           83C4                   06  add	sp,*6
21768                                           !BCC_EOS
21769                                           ! 2405  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
21770                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
21771 56D6           8A46         F2            mov	al,-$E[bp]
21772                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
21773 56D9           8846         FE            mov	-2[bp],al
21774                                           !BCC_EOS
21775                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
21776 56DC           8B46         F2            mov	ax,-$E[bp]
21777 56DF           30C0                       xor	al,al
21778                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
21779 56E1           88E0                       mov	al,ah
21780 56E3           30E4                       xor	ah,ah
21781                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
21782 56E5           8846         FD            mov	-3[bp],al
21783                                           !BCC_EOS
21784                                           ! 2406  nbrows=read_byte(0x40,0x84)+1;
21785                                           ! Debug: list int = const $84 (used reg = )
21786 56E8           B8                   0084  mov	ax,#$84
21787 56EB           50                         push	ax
21788                                           ! Debug: list int = const $40 (used reg = )
21789 56EC           B8                   0040  mov	ax,*$40
21790 56EF           50                         push	ax
21791                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21792 56F0           E8         23AD            call	_read_byte
21793 56F3           83C4                   04  add	sp,*4
21794                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
21795 56F6           30E4                       xor	ah,ah
21796                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
21797 56F8           40                         inc	ax
21798 56F9           8946         F6            mov	-$A[bp],ax
21799                                           !BCC_EOS
21800                                           ! 2407  nbcols=read_word(0x40,0x4A);
21801                                           ! Debug: list int = const $4A (used reg = )
21802 56FC           B8                   004A  mov	ax,*$4A
21803 56FF           50                         push	ax
21804                                           ! Debug: list int = const $40 (used reg = )
21805 5700           B8                   0040  mov	ax,*$40
21806 5703           50                         push	ax
21807                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
21808 5704           E8         23AC            call	_read_word
21809 5707           83C4                   04  add	sp,*4
21810                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
21811 570A           8946         F8            mov	-8[bp],ax
21812                                           !BCC_EOS
21813                                           ! 2408  if(vga_modes[line].class==0x00)
21814                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
21815 570D           8A46         FB            mov	al,-5[bp]
21816 5710           30E4                       xor	ah,ah
21817 5712           B1                     03  mov	cl,*3
21818 5714           D3E0                       shl	ax,cl
21819 5716           89C3                       mov	bx,ax
21820 5718           81C3                 01DA  add	bx,#_vga_modes
21821                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
21822 571C           8A47         01            mov	al,1[bx]
21823 571F           84C0                       test	al,al
21824 5721           75           6E            jne 	.18C
21825                       00005723            .18D:
21826                                           ! 2409   {
21827                                           ! 2410    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
21828                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
21829 5723           8A46         FD            mov	al,-3[bp]
21830 5726           30E4                       xor	ah,ah
21831 5728           8B4E         F8            mov	cx,-8[bp]
21832 572B           F7E9                       imul	cx
21833                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
21834                                           ! Debug: expression subtree swapping
21835 572D           0246         FE            add	al,-2[bp]
21836 5730           80D4                   00  adc	ah,*0
21837                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21838 5733           D1E0                       shl	ax,*1
21839 5735           50                         push	ax
21840                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
21841 5736           8B46         F8            mov	ax,-8[bp]
21842 5739           8B4E         F6            mov	cx,-$A[bp]
21843 573C           F7E9                       imul	cx
21844                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21845 573E           D1E0                       shl	ax,*1
21846                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
21847 5740           0C                     FF  or	al,#$FF
21848                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
21849                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
21850 5742           89C3                       mov	bx,ax
21851 5744           8A46         06            mov	al,6[bp]
21852 5747           30E4                       xor	ah,ah
21853 5749           93                         xchg	ax,bx
21854 574A           40                         inc	ax
21855 574B           89D9                       mov	cx,bx
21856 574D           F7E9                       imul	cx
21857                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
21858 574F           0346         EE            add	ax,-$12[bp]
21859 5752           44                         inc	sp
21860 5753           44                         inc	sp
21861                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
21862 5754           8946         F4            mov	-$C[bp],ax
21863                                           !BCC_EOS
21864                                           ! 2411    while(count-->0)
21865                                           ! 2412     {write_byte(vga_modes[line].sstart,address,car);
21866 5757           EB           29            jmp .18F
21867                       00005759            .190:
21868                                           ! Debug: list unsigned char car = [S+$12+2] (used reg = )
21869 5759           8A46         04            mov	al,4[bp]
21870 575C           30E4                       xor	ah,ah
21871 575E           50                         push	ax
21872                                           ! Debug: list unsigned short address = [S+$14-$E] (used reg = )
21873 575F           FF76         F4            push	-$C[bp]
21874                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$10] struct  = vga_modes+0 (used reg = )
21875 5762           8A46         FB            mov	al,-5[bp]
21876 5765           30E4                       xor	ah,ah
21877 5767           B1                     03  mov	cl,*3
21878 5769           D3E0                       shl	ax,cl
21879 576B           89C3                       mov	bx,ax
21880 576D           81C3                 01DA  add	bx,#_vga_modes
21881                                           ! Debug: list unsigned short = [bx+4] (used reg = )
21882 5771           FF77         04            push	4[bx]
21883                                           ! Debug: func () void = write_byte+0 (used reg = )
21884 5774           E8         234F            call	_write_byte
21885 5777           83C4                   06  add	sp,*6
21886                                           !BCC_EOS
21887                                           ! 2413      address+=2;
21888                                           ! Debug: addab int = const 2 to unsigned short address = [S+$12-$E] (used reg = )
21889 577A           8B46         F4            mov	ax,-$C[bp]
21890 577D           40                         inc	ax
21891 577E           40                         inc	ax
21892 577F           8946         F4            mov	-$C[bp],ax
21893                                           !BCC_EOS
21894                                           ! 2414     }
21895                                           ! 2415   }
21896                       00005782            .18F:
21897                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
21898 5782           8B46         0A            mov	ax,$A[bp]
21899 5785           48                         dec	ax
21900 5786           8946         0A            mov	$A[bp],ax
21901                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
21902 5789           3D                   FFFF  cmp	ax,*-1
21903 578C           75           CB            jne	.190
21904                       0000578E            .191:
21905                       0000578E            .18E:
21906                                           ! 2416  else
21907                                           ! 2417   {
21908 578E           E9         00F3            br 	.192
21909                       00005791            .18C:
21910                                           ! 2418    cheight=video_param_table[line_to_vpti[line]].cheight;
21911                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] unsigned char = line_to_vpti+0 (used reg = )
21912 5791           8A46         FB            mov	al,-5[bp]
21913 5794           30E4                       xor	ah,ah
21914 5796           89C3                       mov	bx,ax
21915                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
21916 5798           8A87       025A            mov	al,_line_to_vpti[bx]
21917 579C           30E4                       xor	ah,ah
21918 579E           B1                     06  mov	cl,*6
21919 57A0           D3E0                       shl	ax,cl
21920 57A2           89C3                       mov	bx,ax
21921 57A4           81C3                 026E  add	bx,#_video_param_table
21922                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$12-3] (used reg = )
21923 57A8           8A47         02            mov	al,2[bx]
21924 57AB           8846         FF            mov	-1[bp],al
21925                                           !BCC_EOS
21926                                           ! 2419    bpp=vga_modes[line].pixbits;
21927                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
21928 57AE           8A46         FB            mov	al,-5[bp]
21929 57B1           30E4                       xor	ah,ah
21930 57B3           B1                     03  mov	cl,*3
21931 57B5           D3E0                       shl	ax,cl
21932 57B7           89C3                       mov	bx,ax
21933 57B9           81C3                 01DA  add	bx,#_vga_modes
21934                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
21935 57BD           8A47         03            mov	al,3[bx]
21936 57C0           8846         FA            mov	-6[bp],al
21937                                           !BCC_EOS
21938                                           ! 2420    while((count-->0) && (xcurs<nbcols))
21939                                           ! 2421     {
21940 57C3           E9         00A6            br 	.194
21941                       000057C6            .195:
21942                                           ! 2422      switch(vga_modes[line].memmodel)
21943                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
21944 57C6           8A46         FB            mov	al,-5[bp]
21945 57C9           30E4                       xor	ah,ah
21946 57CB           B1                     03  mov	cl,*3
21947 57CD           D3E0                       shl	ax,cl
21948 57CF           89C3                       mov	bx,ax
21949 57D1           81C3                 01DA  add	bx,#_vga_modes
21950 57D5           8A47         02            mov	al,2[bx]
21951                                           ! 2423       {
21952 57D8           EB           77            jmp .198
21953                                           ! 2424        case 0x04:
21954                                           ! 2425        case 0x03:
21955                       000057DA            .199:
21956                                           ! 2426          write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight);
21957                       000057DA            .19A:
21958                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
21959 57DA           8A46         FF            mov	al,-1[bp]
21960 57DD           30E4                       xor	ah,ah
21961 57DF           50                         push	ax
21962                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
21963 57E0           FF76         F8            push	-8[bp]
21964                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
21965 57E3           8A46         FD            mov	al,-3[bp]
21966 57E6           30E4                       xor	ah,ah
21967 57E8           50                         push	ax
21968                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
21969 57E9           8A46         FE            mov	al,-2[bp]
21970 57EC           30E4                       xor	ah,ah
21971 57EE           50                         push	ax
21972                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
21973 57EF           8A46         08            mov	al,8[bp]
21974 57F2           30E4                       xor	ah,ah
21975 57F4           50                         push	ax
21976                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
21977 57F5           8A46         04            mov	al,4[bp]
21978 57F8           30E4                       xor	ah,ah
21979 57FA           50                         push	ax
21980                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
21981 57FB           E8         F858            call	_write_gfx_char_pl4
21982 57FE           83C4                   0C  add	sp,*$C
21983                                           !BCC_EOS
21984                                           ! 2427          break;
21985 5801           EB           62            jmp .196
21986                                           !BCC_EOS
21987                                           ! 2428        case 0x02:
21988                                           ! 2429          write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp);
21989                       00005803            .19B:
21990                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
21991 5803           8A46         FA            mov	al,-6[bp]
21992 5806           30E4                       xor	ah,ah
21993 5808           50                         push	ax
21994                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
21995 5809           FF76         F8            push	-8[bp]
21996                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
21997 580C           8A46         FD            mov	al,-3[bp]
21998 580F           30E4                       xor	ah,ah
21999 5811           50                         push	ax
22000                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
22001 5812           8A46         FE            mov	al,-2[bp]
22002 5815           30E4                       xor	ah,ah
22003 5817           50                         push	ax
22004                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
22005 5818           8A46         08            mov	al,8[bp]
22006 581B           30E4                       xor	ah,ah
22007 581D           50                         push	ax
22008                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
22009 581E           8A46         04            mov	al,4[bp]
22010 5821           30E4                       xor	ah,ah
22011 5823           50                         push	ax
22012                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
22013 5824           E8         F9A2            call	_write_gfx_char_cga
22014 5827           83C4                   0C  add	sp,*$C
22015                                           !BCC_EOS
22016                                           ! 2430          break;
22017 582A           EB           39            jmp .196
22018                                           !BCC_EOS
22019                                           ! 2431        case 0x05:
22020                                           ! 2432          write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
22021                       0000582C            .19C:
22022                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
22023 582C           FF76         F8            push	-8[bp]
22024                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
22025 582F           8A46         FD            mov	al,-3[bp]
22026 5832           30E4                       xor	ah,ah
22027 5834           50                         push	ax
22028                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
22029 5835           8A46         FE            mov	al,-2[bp]
22030 5838           30E4                       xor	ah,ah
22031 583A           50                         push	ax
22032                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
22033 583B           8A46         08            mov	al,8[bp]
22034 583E           30E4                       xor	ah,ah
22035 5840           50                         push	ax
22036                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
22037 5841           8A46         04            mov	al,4[bp]
22038 5844           30E4                       xor	ah,ah
22039 5846           50                         push	ax
22040                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
22041 5847           E8         FB82            call	_write_gfx_char_lin
22042 584A           83C4                   0A  add	sp,*$A
22043                                           !BCC_EOS
22044                                           ! 2433          break;
22045 584D           EB           16            jmp .196
22046                                           !BCC_EOS
22047                                           ! 2434       }
22048                                           ! 2435      xcurs++;
22049 584F           EB           14            jmp .196
22050                       00005851            .198:
22051 5851           2C                     02  sub	al,*2
22052 5853           74           AE            je 	.19B
22053 5855           2C                     01  sub	al,*1
22054 5857         0F84         FF7F            beq 	.19A
22055 585B           2C                     01  sub	al,*1
22056 585D         0F84         FF79            beq 	.199
22057 5861           2C                     01  sub	al,*1
22058 5863           74           C7            je 	.19C
22059                       00005865            .196:
22060                       FFFFFFEE            ..FFF9	=	-$12
22061                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
22062 5865           8A46         FE            mov	al,-2[bp]
22063 5868           40                         inc	ax
22064 5869           8846         FE            mov	-2[bp],al
22065                                           !BCC_EOS
22066                                           ! 2436     }
22067                                           ! 2437   }
22068                       0000586C            .194:
22069                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
22070 586C           8B46         0A            mov	ax,$A[bp]
22071 586F           48                         dec	ax
22072 5870           8946         0A            mov	$A[bp],ax
22073                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
22074 5873           3D                   FFFF  cmp	ax,*-1
22075 5876           74           0C            je  	.19D
22076                       00005878            .19E:
22077                                           ! Debug: lt unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
22078 5878           8A46         FE            mov	al,-2[bp]
22079 587B           30E4                       xor	ah,ah
22080 587D           3B46         F8            cmp	ax,-8[bp]
22081 5880         0F82         FF42            blo 	.195
22082                       00005884            .19D:
22083                       00005884            .193:
22084                                           ! 2438 }
22085                       00005884            .192:
22086 5884           89EC                       mov	sp,bp
22087 5886           5D                         pop	bp
22088 5887           C3                         ret
22089                                           ! 2439 #asm
22090                                           !BCC_ASM
22091                       00000008            _biosfn_write_char_only.count	set	8
22092                       00000006            _biosfn_write_char_only.attr	set	6
22093                       00000004            _biosfn_write_char_only.page	set	4
22094                       00000002            _biosfn_write_char_only.car	set	2
22095                       00005888            biosfn_group_0B:
22096 5888           80FF                   00    cmp bh, #0x00
22097 588B           74           06              je biosfn_set_border_color
22098 588D           80FF                   01    cmp bh, #0x01
22099 5890           74           40              je biosfn_set_palette
22100 5892           C3                           ret
22101                       00005893            biosfn_set_border_color:
22102 5893           50                           push ax
22103 5894           53                           push bx
22104 5895           51                           push cx
22105 5896           52                           push dx
22106 5897           BA                   03DA    mov dx, # 0x3da
22107 589A           EC                           in al, dx
22108 589B           BA                   03C0    mov dx, # 0x3c0
22109 589E           B0                     00    mov al, #0x00
22110 58A0           EE                           out dx, al
22111 58A1           88D8                         mov al, bl
22112 58A3           24                     0F    and al, #0x0f
22113 58A5           A8                     08    test al, #0x08
22114 58A7           74           02              jz set_low_border
22115 58A9           04                     08    add al, #0x08
22116                       000058AB            set_low_border:
22117 58AB           EE                           out dx, al
22118 58AC           B1                     01    mov cl, #0x01
22119 58AE           80E3                   10    and bl, #0x10
22120                       000058B1            set_intensity_loop:
22121 58B1           BA                   03C0    mov dx, # 0x3c0
22122 58B4           88C8                         mov al, cl
22123 58B6           EE                           out dx, al
22124 58B7           BA                   03C1    mov dx, # 0x3c1
22125 58BA           EC                           in al, dx
22126 58BB           24                     EF    and al, #0xef
22127 58BD           08D8                         or al, bl
22128 58BF           BA                   03C0    mov dx, # 0x3c0
22129 58C2           EE                           out dx, al
22130 58C3           FEC1                         inc cl
22131 58C5           80F9                   04    cmp cl, #0x04
22132 58C8           75           E7              jne set_intensity_loop
22133 58CA           B0                     20    mov al, #0x20
22134 58CC           EE                           out dx, al
22135 58CD           5A                           pop dx
22136 58CE           59                           pop cx
22137 58CF           5B                           pop bx
22138 58D0           58                           pop ax
22139 58D1           C3                           ret
22140                       000058D2            biosfn_set_palette:
22141 58D2           50                           push ax
22142 58D3           53                           push bx
22143 58D4           51                           push cx
22144 58D5           52                           push dx
22145 58D6           BA                   03DA    mov dx, # 0x3da
22146 58D9           EC                           in al, dx
22147 58DA           B1                     01    mov cl, #0x01
22148 58DC           80E3                   01    and bl, #0x01
22149                       000058DF            set_cga_palette_loop:
22150 58DF           BA                   03C0    mov dx, # 0x3c0
22151 58E2           88C8                         mov al, cl
22152 58E4           EE                           out dx, al
22153 58E5           BA                   03C1    mov dx, # 0x3c1
22154 58E8           EC                           in al, dx
22155 58E9           24                     FE    and al, #0xfe
22156 58EB           08D8                         or al, bl
22157 58ED           BA                   03C0    mov dx, # 0x3c0
22158 58F0           EE                           out dx, al
22159 58F1           FEC1                         inc cl
22160 58F3           80F9                   04    cmp cl, #0x04
22161 58F6           75           E7              jne set_cga_palette_loop
22162 58F8           B0                     20    mov al, #0x20
22163 58FA           EE                           out dx, al
22164 58FB           5A                           pop dx
22165 58FC           59                           pop cx
22166 58FD           5B                           pop bx
22167 58FE           58                           pop ax
22168 58FF           C3                           ret
22169                                           ! 2514 endasm
22170                                           !BCC_ENDASM
22171                                           ! 2515 static void biosfn_write_pixel (BH,AL,CX,DX) Bit8u BH;Bit8u AL;Bit16u CX;Bit16u DX;
22172                                           ! Register BX used in function biosfn_write_char_only
22173                       00005900            _biosfn_write_pixel:
22174                                           !BCC_EOS
22175                                           !BCC_EOS
22176                                           !BCC_EOS
22177                                           !BCC_EOS
22178                                           ! 2516 {
22179                                           ! 2517  Bit8u mode,line,mask,attr,data;
22180                                           !BCC_EOS
22181                                           ! 2518  Bit16u addr;
22182                                           !BCC_EOS
22183                                           ! 2519  mode=read_byte(0x40,0x49);
22184 5900           55                         push	bp
22185 5901           89E5                       mov	bp,sp
22186 5903           83C4                   F8  add	sp,*-8
22187                                           ! Debug: list int = const $49 (used reg = )
22188 5906           B8                   0049  mov	ax,*$49
22189 5909           50                         push	ax
22190                                           ! Debug: list int = const $40 (used reg = )
22191 590A           B8                   0040  mov	ax,*$40
22192 590D           50                         push	ax
22193                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22194 590E           E8         218F            call	_read_byte
22195 5911           83C4                   04  add	sp,*4
22196                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$A-3] (used reg = )
22197 5914           8846         FF            mov	-1[bp],al
22198                                           !BCC_EOS
22199                                           ! 2520  line=find_vga_entry(mode);
22200                                           ! Debug: list unsigned char mode = [S+$A-3] (used reg = )
22201 5917           8A46         FF            mov	al,-1[bp]
22202 591A           30E4                       xor	ah,ah
22203 591C           50                         push	ax
22204                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
22205 591D           E8         2094            call	_find_vga_entry
22206 5920           44                         inc	sp
22207 5921           44                         inc	sp
22208                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$A-4] (used reg = )
22209 5922           8846         FE            mov	-2[bp],al
22210                                           !BCC_EOS
22211                                           ! 2521  if(line==0xFF)return;
22212                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$A-4] (used reg = )
22213 5925           8A46         FE            mov	al,-2[bp]
22214 5928           3C                     FF  cmp	al,#$FF
22215 592A           75           04            jne 	.19F
22216                       0000592C            .1A0:
22217 592C           89EC                       mov	sp,bp
22218 592E           5D                         pop	bp
22219 592F           C3                         ret
22220                                           !BCC_EOS
22221                                           ! 2522  if(vga_modes[line].class==0x00)return;
22222                       00005930            .19F:
22223                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22224 5930           8A46         FE            mov	al,-2[bp]
22225 5933           30E4                       xor	ah,ah
22226 5935           B1                     03  mov	cl,*3
22227 5937           D3E0                       shl	ax,cl
22228 5939           89C3                       mov	bx,ax
22229 593B           81C3                 01DA  add	bx,#_vga_modes
22230                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
22231 593F           8A47         01            mov	al,1[bx]
22232 5942           84C0                       test	al,al
22233 5944           75           04            jne 	.1A1
22234                       00005946            .1A2:
22235 5946           89EC                       mov	sp,bp
22236 5948           5D                         pop	bp
22237 5949           C3                         ret
22238                                           !BCC_EOS
22239                                           ! 2523  switch(vga_modes[line].memmodel)
22240                       0000594A            .1A1:
22241                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22242 594A           8A46         FE            mov	al,-2[bp]
22243 594D           30E4                       xor	ah,ah
22244 594F           B1                     03  mov	cl,*3
22245 5951           D3E0                       shl	ax,cl
22246 5953           89C3                       mov	bx,ax
22247 5955           81C3                 01DA  add	bx,#_vga_modes
22248 5959           8A47         02            mov	al,2[bx]
22249                                           ! 2524   {
22250 595C           E9         0223            br 	.1A5
22251                                           ! 2525    case 0x04:
22252                                           ! 2526    case 0x03:
22253                       0000595F            .1A6:
22254                                           ! 2527      addr = CX/8+DX*read_word(0x40,0x4A);
22255                       0000595F            .1A7:
22256                                           ! Debug: list int = const $4A (used reg = )
22257 595F           B8                   004A  mov	ax,*$4A
22258 5962           50                         push	ax
22259                                           ! Debug: list int = const $40 (used reg = )
22260 5963           B8                   0040  mov	ax,*$40
22261 5966           50                         push	ax
22262                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
22263 5967           E8         2149            call	_read_word
22264 596A           83C4                   04  add	sp,*4
22265                                           ! Debug: mul unsigned short = ax+0 to unsigned short DX = [S+$A+8] (used reg = )
22266                                           ! Debug: expression subtree swapping
22267 596D           8B4E         0A            mov	cx,$A[bp]
22268 5970           F7E9                       imul	cx
22269 5972           50                         push	ax
22270                                           ! Debug: div int = const 8 to unsigned short CX = [S+$C+6] (used reg = )
22271 5973           8B46         08            mov	ax,8[bp]
22272 5976           B1                     03  mov	cl,*3
22273 5978           D3E8                       shr	ax,cl
22274                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
22275 597A           0346         F6            add	ax,0+..FFF8[bp]
22276 597D           44                         inc	sp
22277 597E           44                         inc	sp
22278                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
22279 597F           8946         F8            mov	-8[bp],ax
22280                                           !BCC_EOS
22281                                           ! 2528      mask = 0x80 >> (CX & 0x07);
22282                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
22283 5982           8A46         08            mov	al,8[bp]
22284 5985           24                     07  and	al,*7
22285                                           ! Debug: sr unsigned char = al+0 to int = const $80 (used reg = )
22286 5987           30E4                       xor	ah,ah
22287 5989           89C3                       mov	bx,ax
22288 598B           B8                   0080  mov	ax,#$80
22289 598E           89D9                       mov	cx,bx
22290 5990           D3F8                       sar	ax,cl
22291                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
22292 5992           8846         FD            mov	-3[bp],al
22293                                           !BCC_EOS
22294                                           ! 2529      outw(0x3ce, (mask << 8) | 0x08);
22295                                           ! Debug: sl int = const 8 to unsigned char mask = [S+$A-5] (used reg = )
22296 5995           8A46         FD            mov	al,-3[bp]
22297 5998           30E4                       xor	ah,ah
22298 599A           88C4                       mov	ah,al
22299 599C           30C0                       xor	al,al
22300                                           ! Debug: or int = const 8 to unsigned int = ax+0 (used reg = )
22301 599E           0C                     08  or	al,*8
22302                                           ! Debug: list unsigned int = ax+0 (used reg = )
22303 59A0           50                         push	ax
22304                                           ! Debug: list int = const $3CE (used reg = )
22305 59A1           B8                   03CE  mov	ax,#$3CE
22306 59A4           50                         push	ax
22307                                           ! Debug: func () void = outw+0 (used reg = )
22308 59A5           E8         2174            call	_outw
22309 59A8           83C4                   04  add	sp,*4
22310                                           !BCC_EOS
22311                                           ! 2530      outw(0x3ce, 0x0205);
22312                                           ! Debug: list int = const $205 (used reg = )
22313 59AB           B8                   0205  mov	ax,#$205
22314 59AE           50                         push	ax
22315                                           ! Debug: list int = const $3CE (used reg = )
22316 59AF           B8                   03CE  mov	ax,#$3CE
22317 59B2           50                         push	ax
22318                                           ! Debug: func () void = outw+0 (used reg = )
22319 59B3           E8         2166            call	_outw
22320 59B6           83C4                   04  add	sp,*4
22321                                           !BCC_EOS
22322                                           ! 2531      data = read_byte(0xa000,addr);
22323                                           ! Debug: list unsigned short addr = [S+$A-$A] (used reg = )
22324 59B9           FF76         F8            push	-8[bp]
22325                                           ! Debug: list unsigned int = const $A000 (used reg = )
22326 59BC           B8                   A000  mov	ax,#$A000
22327 59BF           50                         push	ax
22328                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22329 59C0           E8         20DD            call	_read_byte
22330 59C3           83C4                   04  add	sp,*4
22331                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$A-7] (used reg = )
22332 59C6           8846         FB            mov	-5[bp],al
22333                                           !BCC_EOS
22334                                           ! 2532      if (AL & 0x80)
22335                                           ! Debug: and int = const $80 to unsigned char AL = [S+$A+4] (used reg = )
22336 59C9           8A46         06            mov	al,6[bp]
22337 59CC           24                     80  and	al,#$80
22338 59CE           84C0                       test	al,al
22339 59D0           74           0E            je  	.1A8
22340                       000059D2            .1A9:
22341                                           ! 2533       {
22342                                           ! 2534        outw(0x3ce, 0x1803);
22343                                           ! Debug: list int = const $1803 (used reg = )
22344 59D2           B8                   1803  mov	ax,#$1803
22345 59D5           50                         push	ax
22346                                           ! Debug: list int = const $3CE (used reg = )
22347 59D6           B8                   03CE  mov	ax,#$3CE
22348 59D9           50                         push	ax
22349                                           ! Debug: func () void = outw+0 (used reg = )
22350 59DA           E8         213F            call	_outw
22351 59DD           83C4                   04  add	sp,*4
22352                                           !BCC_EOS
22353                                           ! 2535       }
22354                                           ! 2536      write_byte(0xa000,addr,AL);
22355                       000059E0            .1A8:
22356                                           ! Debug: list unsigned char AL = [S+$A+4] (used reg = )
22357 59E0           8A46         06            mov	al,6[bp]
22358 59E3           30E4                       xor	ah,ah
22359 59E5           50                         push	ax
22360                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
22361 59E6           FF76         F8            push	-8[bp]
22362                                           ! Debug: list unsigned int = const $A000 (used reg = )
22363 59E9           B8                   A000  mov	ax,#$A000
22364 59EC           50                         push	ax
22365                                           ! Debug: func () void = write_byte+0 (used reg = )
22366 59ED           E8         20D6            call	_write_byte
22367 59F0           83C4                   06  add	sp,*6
22368                                           !BCC_EOS
22369                                           ! 2537 #asm
22370                                           !BCC_EOS
22371                                           !BCC_ASM
22372                       0000000C            _biosfn_write_pixel.BH	set	$C
22373                       00000004            .biosfn_write_pixel.BH	set	4
22374                       00000010            _biosfn_write_pixel.CX	set	$10
22375                       00000008            .biosfn_write_pixel.CX	set	8
22376                       00000006            _biosfn_write_pixel.line	set	6
22377                       FFFFFFFE            .biosfn_write_pixel.line	set	-2
22378                       0000000E            _biosfn_write_pixel.AL	set	$E
22379                       00000006            .biosfn_write_pixel.AL	set	6
22380                       00000003            _biosfn_write_pixel.data	set	3
22381                       FFFFFFFB            .biosfn_write_pixel.data	set	-5
22382                       00000012            _biosfn_write_pixel.DX	set	$12
22383                       0000000A            .biosfn_write_pixel.DX	set	$A
22384                       00000005            _biosfn_write_pixel.mask	set	5
22385                       FFFFFFFD            .biosfn_write_pixel.mask	set	-3
22386                       00000004            _biosfn_write_pixel.attr	set	4
22387                       FFFFFFFC            .biosfn_write_pixel.attr	set	-4
22388                       00000007            _biosfn_write_pixel.mode	set	7
22389                       FFFFFFFF            .biosfn_write_pixel.mode	set	-1
22390                       00000000            _biosfn_write_pixel.addr	set	0
22391                       FFFFFFF8            .biosfn_write_pixel.addr	set	-8
22392 59F3           BA                   03CE       mov dx, # 0x3ce
22393 59F6           B8                   FF08       mov ax, #0xff08
22394 59F9           EF                              out dx, ax
22395 59FA           B8                   0005       mov ax, #0x0005
22396 59FD           EF                              out dx, ax
22397 59FE           B8                   0003       mov ax, #0x0003
22398 5A01           EF                              out dx, ax
22399                                           ! 2545 endasm
22400                                           !BCC_ENDASM
22401                                           !BCC_EOS
22402                                           ! 2546      break;
22403 5A02           E9         0193            br 	.1A3
22404                                           !BCC_EOS
22405                                           ! 2547    case 0x02:
22406                                           ! 2548      if(vga_modes[line].pixbits==2)
22407                       00005A05            .1AA:
22408                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22409 5A05           8A46         FE            mov	al,-2[bp]
22410 5A08           30E4                       xor	ah,ah
22411 5A0A           B1                     03  mov	cl,*3
22412 5A0C           D3E0                       shl	ax,cl
22413 5A0E           89C3                       mov	bx,ax
22414 5A10           81C3                 01DA  add	bx,#_vga_modes
22415                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
22416 5A14           8A47         03            mov	al,3[bx]
22417 5A17           3C                     02  cmp	al,*2
22418 5A19           75           1C            jne 	.1AB
22419                       00005A1B            .1AC:
22420                                           ! 2549       {
22421                                           ! 2550        addr=(CX>>2)+(DX>>1)*80;
22422                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
22423 5A1B           8B46         0A            mov	ax,$A[bp]
22424 5A1E           D1E8                       shr	ax,*1
22425                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
22426 5A20           B9                   0050  mov	cx,*$50
22427 5A23           F7E9                       imul	cx
22428 5A25           50                         push	ax
22429                                           ! Debug: sr int = const 2 to unsigned short CX = [S+$C+6] (used reg = )
22430 5A26           8B46         08            mov	ax,8[bp]
22431 5A29           D1E8                       shr	ax,*1
22432 5A2B           D1E8                       shr	ax,*1
22433                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
22434 5A2D           0346         F6            add	ax,0+..FFF8[bp]
22435 5A30           44                         inc	sp
22436 5A31           44                         inc	sp
22437                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
22438 5A32           8946         F8            mov	-8[bp],ax
22439                                           !BCC_EOS
22440                                           ! 2551       }
22441                                           ! 2552      else
22442                                           ! 2553       {
22443 5A35           EB           1A            jmp .1AD
22444                       00005A37            .1AB:
22445                                           ! 2554        addr=(CX>>3)+(DX>>1)*80;
22446                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
22447 5A37           8B46         0A            mov	ax,$A[bp]
22448 5A3A           D1E8                       shr	ax,*1
22449                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
22450 5A3C           B9                   0050  mov	cx,*$50
22451 5A3F           F7E9                       imul	cx
22452 5A41           50                         push	ax
22453                                           ! Debug: sr int = const 3 to unsigned short CX = [S+$C+6] (used reg = )
22454 5A42           8B46         08            mov	ax,8[bp]
22455 5A45           B1                     03  mov	cl,*3
22456 5A47           D3E8                       shr	ax,cl
22457                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
22458 5A49           0346         F6            add	ax,0+..FFF8[bp]
22459 5A4C           44                         inc	sp
22460 5A4D           44                         inc	sp
22461                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
22462 5A4E           8946         F8            mov	-8[bp],ax
22463                                           !BCC_EOS
22464                                           ! 2555       }
22465                                           ! 2556      if (DX & 1) addr += 0x2000;
22466                       00005A51            .1AD:
22467                                           ! Debug: and int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
22468 5A51           8A46         0A            mov	al,$A[bp]
22469 5A54           24                     01  and	al,*1
22470 5A56           84C0                       test	al,al
22471 5A58           74           09            je  	.1AE
22472                       00005A5A            .1AF:
22473                                           ! Debug: addab int = const $2000 to unsigned short addr = [S+$A-$A] (used reg = )
22474 5A5A           8B46         F8            mov	ax,-8[bp]
22475 5A5D           05                   2000  add	ax,#$2000
22476 5A60           8946         F8            mov	-8[bp],ax
22477                                           !BCC_EOS
22478                                           ! 2557      data = read_byte(0xb800,addr);
22479                       00005A63            .1AE:
22480                                           ! Debug: list unsigned short addr = [S+$A-$A] (used reg = )
22481 5A63           FF76         F8            push	-8[bp]
22482                                           ! Debug: list unsigned int = const $B800 (used reg = )
22483 5A66           B8                   B800  mov	ax,#$B800
22484 5A69           50                         push	ax
22485                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22486 5A6A           E8         2033            call	_read_byte
22487 5A6D           83C4                   04  add	sp,*4
22488                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$A-7] (used reg = )
22489 5A70           8846         FB            mov	-5[bp],al
22490                                           !BCC_EOS
22491                                           ! 2558      if(vga_modes[line].pixbits==2)
22492                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22493 5A73           8A46         FE            mov	al,-2[bp]
22494 5A76           30E4                       xor	ah,ah
22495 5A78           B1                     03  mov	cl,*3
22496 5A7A           D3E0                       shl	ax,cl
22497 5A7C           89C3                       mov	bx,ax
22498 5A7E           81C3                 01DA  add	bx,#_vga_modes
22499                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
22500 5A82           8A47         03            mov	al,3[bx]
22501 5A85           3C                     02  cmp	al,*2
22502 5A87           75           46            jne 	.1B0
22503                       00005A89            .1B1:
22504                                           ! 2559       {
22505                                           ! 2560        attr = (AL & 0x03) << ((3 - (CX & 0x03)) * 2);
22506                                           ! Debug: and int = const 3 to unsigned short CX = [S+$A+6] (used reg = )
22507 5A89           8A46         08            mov	al,8[bp]
22508 5A8C           24                     03  and	al,*3
22509                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
22510 5A8E           50                         push	ax
22511 5A8F           B8                   0003  mov	ax,*3
22512 5A92           2A46         F6            sub	al,0+..FFF8[bp]
22513 5A95           80DC                   00  sbb	ah,*0
22514 5A98           44                         inc	sp
22515 5A99           44                         inc	sp
22516                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22517 5A9A           D1E0                       shl	ax,*1
22518 5A9C           50                         push	ax
22519                                           ! Debug: and int = const 3 to unsigned char AL = [S+$C+4] (used reg = )
22520 5A9D           8A46         06            mov	al,6[bp]
22521 5AA0           24                     03  and	al,*3
22522                                           ! Debug: sl unsigned int (temp) = [S+$C-$C] to unsigned char = al+0 (used reg = )
22523 5AA2           30E4                       xor	ah,ah
22524 5AA4           8B4E         F6            mov	cx,0+..FFF8[bp]
22525 5AA7           D3E0                       shl	ax,cl
22526 5AA9           44                         inc	sp
22527 5AAA           44                         inc	sp
22528                                           ! Debug: eq unsigned int = ax+0 to unsigned char attr = [S+$A-6] (used reg = )
22529 5AAB           8846         FC            mov	-4[bp],al
22530                                           !BCC_EOS
22531                                           ! 2561        mask = 0x03 << ((3 - (CX & 0x03)) * 2);
22532                                           ! Debug: and int = const 3 to unsigned short CX = [S+$A+6] (used reg = )
22533 5AAE           8A46         08            mov	al,8[bp]
22534 5AB1           24                     03  and	al,*3
22535                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
22536 5AB3           50                         push	ax
22537 5AB4           B8                   0003  mov	ax,*3
22538 5AB7           2A46         F6            sub	al,0+..FFF8[bp]
22539 5ABA           80DC                   00  sbb	ah,*0
22540 5ABD           44                         inc	sp
22541 5ABE           44                         inc	sp
22542                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22543 5ABF           D1E0                       shl	ax,*1
22544                                           ! Debug: sl unsigned int = ax+0 to int = const 3 (used reg = )
22545 5AC1           89C3                       mov	bx,ax
22546 5AC3           B8                   0003  mov	ax,*3
22547 5AC6           89D9                       mov	cx,bx
22548 5AC8           D3E0                       shl	ax,cl
22549                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
22550 5ACA           8846         FD            mov	-3[bp],al
22551                                           !BCC_EOS
22552                                           ! 2562       }
22553                                           ! 2563      else
22554                                           ! 2564       {
22555 5ACD           EB           40            jmp .1B2
22556                       00005ACF            .1B0:
22557                                           ! 2565        attr = (AL & 0x01) << (7 - (CX & 0x07));
22558                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
22559 5ACF           8A46         08            mov	al,8[bp]
22560 5AD2           24                     07  and	al,*7
22561                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
22562 5AD4           50                         push	ax
22563 5AD5           B8                   0007  mov	ax,*7
22564 5AD8           2A46         F6            sub	al,0+..FFF8[bp]
22565 5ADB           80DC                   00  sbb	ah,*0
22566 5ADE           44                         inc	sp
22567 5ADF           44                         inc	sp
22568 5AE0           50                         push	ax
22569                                           ! Debug: and int = const 1 to unsigned char AL = [S+$C+4] (used reg = )
22570 5AE1           8A46         06            mov	al,6[bp]
22571 5AE4           24                     01  and	al,*1
22572                                           ! Debug: sl unsigned int (temp) = [S+$C-$C] to unsigned char = al+0 (used reg = )
22573 5AE6           30E4                       xor	ah,ah
22574 5AE8           8B4E         F6            mov	cx,0+..FFF8[bp]
22575 5AEB           D3E0                       shl	ax,cl
22576 5AED           44                         inc	sp
22577 5AEE           44                         inc	sp
22578                                           ! Debug: eq unsigned int = ax+0 to unsigned char attr = [S+$A-6] (used reg = )
22579 5AEF           8846         FC            mov	-4[bp],al
22580                                           !BCC_EOS
22581                                           ! 2566        mask = 0x01 << (7 - (CX & 0x07));
22582                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
22583 5AF2           8A46         08            mov	al,8[bp]
22584 5AF5           24                     07  and	al,*7
22585                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
22586 5AF7           50                         push	ax
22587 5AF8           B8                   0007  mov	ax,*7
22588 5AFB           2A46         F6            sub	al,0+..FFF8[bp]
22589 5AFE           80DC                   00  sbb	ah,*0
22590 5B01           44                         inc	sp
22591 5B02           44                         inc	sp
22592                                           ! Debug: sl unsigned int = ax+0 to int = const 1 (used reg = )
22593 5B03           89C3                       mov	bx,ax
22594 5B05           B8                   0001  mov	ax,*1
22595 5B08           89D9                       mov	cx,bx
22596 5B0A           D3E0                       shl	ax,cl
22597                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
22598 5B0C           8846         FD            mov	-3[bp],al
22599                                           !BCC_EOS
22600                                           ! 2567       }
22601                                           ! 2568      if (AL & 0x80)
22602                       00005B0F            .1B2:
22603                                           ! Debug: and int = const $80 to unsigned char AL = [S+$A+4] (used reg = )
22604 5B0F           8A46         06            mov	al,6[bp]
22605 5B12           24                     80  and	al,#$80
22606 5B14           84C0                       test	al,al
22607 5B16           74           0B            je  	.1B3
22608                       00005B18            .1B4:
22609                                           ! 2569       {
22610                                           ! 2570        data ^= attr;
22611                                           ! Debug: eorab unsigned char attr = [S+$A-6] to unsigned char data = [S+$A-7] (used reg = )
22612 5B18           8A46         FB            mov	al,-5[bp]
22613 5B1B           3246         FC            xor	al,-4[bp]
22614 5B1E           8846         FB            mov	-5[bp],al
22615                                           !BCC_EOS
22616                                           ! 2571       }
22617                                           ! 2572      else
22618                                           ! 2573       {
22619 5B21           EB           16            jmp .1B5
22620                       00005B23            .1B3:
22621                                           ! 2574        data &= ~mask;
22622                                           ! Debug: not unsigned char mask = [S+$A-5] (used reg = )
22623 5B23           8A46         FD            mov	al,-3[bp]
22624 5B26           30E4                       xor	ah,ah
22625 5B28           F7D0                       not	ax
22626                                           ! Debug: andab unsigned int = ax+0 to unsigned char data = [S+$A-7] (used reg = )
22627 5B2A           2246         FB            and	al,-5[bp]
22628 5B2D           8846         FB            mov	-5[bp],al
22629                                           !BCC_EOS
22630                                           ! 2575        data |= attr;
22631                                           ! Debug: orab unsigned char attr = [S+$A-6] to unsigned char data = [S+$A-7] (used reg = )
22632 5B30           8A46         FB            mov	al,-5[bp]
22633 5B33           0A46         FC            or	al,-4[bp]
22634 5B36           8846         FB            mov	-5[bp],al
22635                                           !BCC_EOS
22636                                           ! 2576       }
22637                                           ! 2577      write_byte(0xb800,addr,data);
22638                       00005B39            .1B5:
22639                                           ! Debug: list unsigned char data = [S+$A-7] (used reg = )
22640 5B39           8A46         FB            mov	al,-5[bp]
22641 5B3C           30E4                       xor	ah,ah
22642 5B3E           50                         push	ax
22643                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
22644 5B3F           FF76         F8            push	-8[bp]
22645                                           ! Debug: list unsigned int = const $B800 (used reg = )
22646 5B42           B8                   B800  mov	ax,#$B800
22647 5B45           50                         push	ax
22648                                           ! Debug: func () void = write_byte+0 (used reg = )
22649 5B46           E8         1F7D            call	_write_byte
22650 5B49           83C4                   06  add	sp,*6
22651                                           !BCC_EOS
22652                                           ! 2578      break;
22653 5B4C           EB           4A            jmp .1A3
22654                                           !BCC_EOS
22655                                           ! 2579    case 0x05:
22656                                           ! 2580      addr=CX+DX*(read_word(0x40,0x4A)*8);
22657                       00005B4E            .1B6:
22658                                           ! Debug: list int = const $4A (used reg = )
22659 5B4E           B8                   004A  mov	ax,*$4A
22660 5B51           50                         push	ax
22661                                           ! Debug: list int = const $40 (used reg = )
22662 5B52           B8                   0040  mov	ax,*$40
22663 5B55           50                         push	ax
22664                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
22665 5B56           E8         1F5A            call	_read_word
22666 5B59           83C4                   04  add	sp,*4
22667                                           ! Debug: mul int = const 8 to unsigned short = ax+0 (used reg = )
22668 5B5C           B1                     03  mov	cl,*3
22669 5B5E           D3E0                       shl	ax,cl
22670                                           ! Debug: mul unsigned int = ax+0 to unsigned short DX = [S+$A+8] (used reg = )
22671                                           ! Debug: expression subtree swapping
22672 5B60           8B4E         0A            mov	cx,$A[bp]
22673 5B63           F7E9                       imul	cx
22674                                           ! Debug: add unsigned int = ax+0 to unsigned short CX = [S+$A+6] (used reg = )
22675                                           ! Debug: expression subtree swapping
22676 5B65           0346         08            add	ax,8[bp]
22677                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
22678 5B68           8946         F8            mov	-8[bp],ax
22679                                           !BCC_EOS
22680                                           ! 2581      write_byte(0xa000,addr,AL);
22681                                           ! Debug: list unsigned char AL = [S+$A+4] (used reg = )
22682 5B6B           8A46         06            mov	al,6[bp]
22683 5B6E           30E4                       xor	ah,ah
22684 5B70           50                         push	ax
22685                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
22686 5B71           FF76         F8            push	-8[bp]
22687                                           ! Debug: list unsigned int = const $A000 (used reg = )
22688 5B74           B8                   A000  mov	ax,#$A000
22689 5B77           50                         push	ax
22690                                           ! Debug: func () void = write_byte+0 (used reg = )
22691 5B78           E8         1F4B            call	_write_byte
22692 5B7B           83C4                   06  add	sp,*6
22693                                           !BCC_EOS
22694                                           ! 2582      break;
22695 5B7E           EB           18            jmp .1A3
22696                                           !BCC_EOS
22697                                           ! 2583   }
22698                                           ! 2584 }
22699 5B80           EB           16            jmp .1A3
22700                       00005B82            .1A5:
22701 5B82           2C                     02  sub	al,*2
22702 5B84         0F84         FE7D            beq 	.1AA
22703 5B88           2C                     01  sub	al,*1
22704 5B8A         0F84         FDD1            beq 	.1A7
22705 5B8E           2C                     01  sub	al,*1
22706 5B90         0F84         FDCB            beq 	.1A6
22707 5B94           2C                     01  sub	al,*1
22708 5B96           74           B6            je 	.1B6
22709                       00005B98            .1A3:
22710                       FFFFFFF6            ..FFF8	=	-$A
22711 5B98           89EC                       mov	sp,bp
22712 5B9A           5D                         pop	bp
22713 5B9B           C3                         ret
22714                                           ! 2585 static void biosfn_read_pixel (BH,CX,DX,AX) Bit8u BH;Bit16u CX;Bit16u DX;Bit16
22715                                           ! Register BX used in function biosfn_write_pixel
22716                       00005B9C            _biosfn_read_pixel:
22717                                           !BCC_EOS
22718                                           !BCC_EOS
22719                                           !BCC_EOS
22720                                           ! 2585 u *AX;
22721                                           !BCC_EOS
22722                                           ! 2586 {
22723                                           ! 2587  Bit8u mode,line,mask,attr,data,i;
22724                                           !BCC_EOS
22725                                           ! 2588  Bit16u addr;
22726                                           !BCC_EOS
22727                                           ! 2589  Bit16u ss=get_SS();
22728 5B9C           55                         push	bp
22729 5B9D           89E5                       mov	bp,sp
22730 5B9F           83C4                   F6  add	sp,*-$A
22731                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
22732 5BA2           E8         1F87            call	_get_SS
22733                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+$C-$C] (used reg = )
22734 5BA5           8946         F6            mov	-$A[bp],ax
22735                                           !BCC_EOS
22736                                           ! 2590  mode=read_byte(0x40,0x49);
22737                                           ! Debug: list int = const $49 (used reg = )
22738 5BA8           B8                   0049  mov	ax,*$49
22739 5BAB           50                         push	ax
22740                                           ! Debug: list int = const $40 (used reg = )
22741 5BAC           B8                   0040  mov	ax,*$40
22742 5BAF           50                         push	ax
22743                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22744 5BB0           E8         1EED            call	_read_byte
22745 5BB3           83C4                   04  add	sp,*4
22746                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$C-3] (used reg = )
22747 5BB6           8846         FF            mov	-1[bp],al
22748                                           !BCC_EOS
22749                                           ! 2591  line=find_vga_entry(mode);
22750                                           ! Debug: list unsigned char mode = [S+$C-3] (used reg = )
22751 5BB9           8A46         FF            mov	al,-1[bp]
22752 5BBC           30E4                       xor	ah,ah
22753 5BBE           50                         push	ax
22754                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
22755 5BBF           E8         1DF2            call	_find_vga_entry
22756 5BC2           44                         inc	sp
22757 5BC3           44                         inc	sp
22758                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$C-4] (used reg = )
22759 5BC4           8846         FE            mov	-2[bp],al
22760                                           !BCC_EOS
22761                                           ! 2592  if(line==0xFF)return;
22762                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$C-4] (used reg = )
22763 5BC7           8A46         FE            mov	al,-2[bp]
22764 5BCA           3C                     FF  cmp	al,#$FF
22765 5BCC           75           04            jne 	.1B7
22766                       00005BCE            .1B8:
22767 5BCE           89EC                       mov	sp,bp
22768 5BD0           5D                         pop	bp
22769 5BD1           C3                         ret
22770                                           !BCC_EOS
22771                                           ! 2593  if(vga_modes[line].class==0x00)return;
22772                       00005BD2            .1B7:
22773                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$10] struct  = vga_modes+0 (used reg = )
22774 5BD2           8A46         FE            mov	al,-2[bp]
22775 5BD5           30E4                       xor	ah,ah
22776 5BD7           B1                     03  mov	cl,*3
22777 5BD9           D3E0                       shl	ax,cl
22778 5BDB           89C3                       mov	bx,ax
22779 5BDD           81C3                 01DA  add	bx,#_vga_modes
22780                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
22781 5BE1           8A47         01            mov	al,1[bx]
22782 5BE4           84C0                       test	al,al
22783 5BE6           75           04            jne 	.1B9
22784                       00005BE8            .1BA:
22785 5BE8           89EC                       mov	sp,bp
22786 5BEA           5D                         pop	bp
22787 5BEB           C3                         ret
22788                                           !BCC_EOS
22789                                           ! 2594  switch(vga_modes[line].memmodel)
22790                       00005BEC            .1B9:
22791                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$10] struct  = vga_modes+0 (used reg = )
22792 5BEC           8A46         FE            mov	al,-2[bp]
22793 5BEF           30E4                       xor	ah,ah
22794 5BF1           B1                     03  mov	cl,*3
22795 5BF3           D3E0                       shl	ax,cl
22796 5BF5           89C3                       mov	bx,ax
22797 5BF7           81C3                 01DA  add	bx,#_vga_modes
22798 5BFB           8A47         02            mov	al,2[bx]
22799                                           ! 2595   {
22800 5BFE           E9         0167            br 	.1BD
22801                                           ! 2596    case 0x04:
22802                                           ! 2597    case 0x03:
22803                       00005C01            .1BE:
22804                                           ! 2598      addr = CX/8+DX*read_word(0x40,0x4A);
22805                       00005C01            .1BF:
22806                                           ! Debug: list int = const $4A (used reg = )
22807 5C01           B8                   004A  mov	ax,*$4A
22808 5C04           50                         push	ax
22809                                           ! Debug: list int = const $40 (used reg = )
22810 5C05           B8                   0040  mov	ax,*$40
22811 5C08           50                         push	ax
22812                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
22813 5C09           E8         1EA7            call	_read_word
22814 5C0C           83C4                   04  add	sp,*4
22815                                           ! Debug: mul unsigned short = ax+0 to unsigned short DX = [S+$C+6] (used reg = )
22816                                           ! Debug: expression subtree swapping
22817 5C0F           8B4E         08            mov	cx,8[bp]
22818 5C12           F7E9                       imul	cx
22819 5C14           50                         push	ax
22820                                           ! Debug: div int = const 8 to unsigned short CX = [S+$E+4] (used reg = )
22821 5C15           8B46         06            mov	ax,6[bp]
22822 5C18           B1                     03  mov	cl,*3
22823 5C1A           D3E8                       shr	ax,cl
22824                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
22825 5C1C           0346         F4            add	ax,0+..FFF7[bp]
22826 5C1F           44                         inc	sp
22827 5C20           44                         inc	sp
22828                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
22829 5C21           8946         F8            mov	-8[bp],ax
22830                                           !BCC_EOS
22831                                           ! 2599      mask = 0x80 >> (CX & 0x07);
22832                                           ! Debug: and int = const 7 to unsigned short CX = [S+$C+4] (used reg = )
22833 5C24           8A46         06            mov	al,6[bp]
22834 5C27           24                     07  and	al,*7
22835                                           ! Debug: sr unsigned char = al+0 to int = const $80 (used reg = )
22836 5C29           30E4                       xor	ah,ah
22837 5C2B           89C3                       mov	bx,ax
22838 5C2D           B8                   0080  mov	ax,#$80
22839 5C30           89D9                       mov	cx,bx
22840 5C32           D3F8                       sar	ax,cl
22841                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$C-5] (used reg = )
22842 5C34           8846         FD            mov	-3[bp],al
22843                                           !BCC_EOS
22844                                           ! 2600      attr = 0x00;
22845                                           ! Debug: eq int = const 0 to unsigned char attr = [S+$C-6] (used reg = )
22846 5C37           30C0                       xor	al,al
22847 5C39           8846         FC            mov	-4[bp],al
22848                                           !BCC_EOS
22849                                           ! 2601      for(i=0;i<4;i++)
22850                                           ! Debug: eq int = const 0 to unsigned char i = [S+$C-8] (used reg = )
22851 5C3C           30C0                       xor	al,al
22852 5C3E           8846         FA            mov	-6[bp],al
22853                                           !BCC_EOS
22854                                           !BCC_EOS
22855                                           ! 2602       {
22856 5C41           EB           4B            jmp .1C2
22857                       00005C43            .1C3:
22858                                           ! 2603        outw(0x3ce, (i << 8) | 0x04);
22859                                           ! Debug: sl int = const 8 to unsigned char i = [S+$C-8] (used reg = )
22860 5C43           8A46         FA            mov	al,-6[bp]
22861 5C46           30E4                       xor	ah,ah
22862 5C48           88C4                       mov	ah,al
22863 5C4A           30C0                       xor	al,al
22864                                           ! Debug: or int = const 4 to unsigned int = ax+0 (used reg = )
22865 5C4C           0C                     04  or	al,*4
22866                                           ! Debug: list unsigned int = ax+0 (used reg = )
22867 5C4E           50                         push	ax
22868                                           ! Debug: list int = const $3CE (used reg = )
22869 5C4F           B8                   03CE  mov	ax,#$3CE
22870 5C52           50                         push	ax
22871                                           ! Debug: func () void = outw+0 (used reg = )
22872 5C53           E8         1EC6            call	_outw
22873 5C56           83C4                   04  add	sp,*4
22874                                           !BCC_EOS
22875                                           ! 2604        data = read_byte(0xa000,addr) & mask;
22876                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
22877 5C59           FF76         F8            push	-8[bp]
22878                                           ! Debug: list unsigned int = const $A000 (used reg = )
22879 5C5C           B8                   A000  mov	ax,#$A000
22880 5C5F           50                         push	ax
22881                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22882 5C60           E8         1E3D            call	_read_byte
22883 5C63           83C4                   04  add	sp,*4
22884                                           ! Debug: and unsigned char mask = [S+$C-5] to unsigned char = al+0 (used reg = )
22885 5C66           2246         FD            and	al,-3[bp]
22886                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$C-7] (used reg = )
22887 5C69           8846         FB            mov	-5[bp],al
22888                                           !BCC_EOS
22889                                           ! 2605        if (data > 0) attr |= (0x01 << i);
22890                                           ! Debug: gt int = const 0 to unsigned char data = [S+$C-7] (used reg = )
22891 5C6C           8A46         FB            mov	al,-5[bp]
22892 5C6F           84C0                       test	al,al
22893 5C71           74           14            je  	.1C4
22894                       00005C73            .1C5:
22895                                           ! Debug: sl unsigned char i = [S+$C-8] to int = const 1 (used reg = )
22896 5C73           8A46         FA            mov	al,-6[bp]
22897 5C76           30E4                       xor	ah,ah
22898 5C78           89C3                       mov	bx,ax
22899 5C7A           B8                   0001  mov	ax,*1
22900 5C7D           89D9                       mov	cx,bx
22901 5C7F           D3E0                       shl	ax,cl
22902                                           ! Debug: orab int = ax+0 to unsigned char attr = [S+$C-6] (used reg = )
22903 5C81           0A46         FC            or	al,-4[bp]
22904 5C84           8846         FC            mov	-4[bp],al
22905                                           !BCC_EOS
22906                                           ! 2606       }
22907                       00005C87            .1C4:
22908                                           ! 2607      break;
22909                       00005C87            .1C1:
22910                                           ! Debug: postinc unsigned char i = [S+$C-8] (used reg = )
22911 5C87           8A46         FA            mov	al,-6[bp]
22912 5C8A           40                         inc	ax
22913 5C8B           8846         FA            mov	-6[bp],al
22914                       00005C8E            .1C2:
22915                                           ! Debug: lt int = const 4 to unsigned char i = [S+$C-8] (used reg = )
22916 5C8E           8A46         FA            mov	al,-6[bp]
22917 5C91           3C                     04  cmp	al,*4
22918 5C93           72           AE            jb 	.1C3
22919                       00005C95            .1C6:
22920                       00005C95            .1C0:
22921 5C95           E9         00E8            br 	.1BB
22922                                           !BCC_EOS
22923                                           ! 2608    case 0x02:
22924                                           ! 2609      addr=(CX>>2)+(DX>>1)*80;
22925                       00005C98            .1C7:
22926                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$C+6] (used reg = )
22927 5C98           8B46         08            mov	ax,8[bp]
22928 5C9B           D1E8                       shr	ax,*1
22929                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
22930 5C9D           B9                   0050  mov	cx,*$50
22931 5CA0           F7E9                       imul	cx
22932 5CA2           50                         push	ax
22933                                           ! Debug: sr int = const 2 to unsigned short CX = [S+$E+4] (used reg = )
22934 5CA3           8B46         06            mov	ax,6[bp]
22935 5CA6           D1E8                       shr	ax,*1
22936 5CA8           D1E8                       shr	ax,*1
22937                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
22938 5CAA           0346         F4            add	ax,0+..FFF7[bp]
22939 5CAD           44                         inc	sp
22940 5CAE           44                         inc	sp
22941                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
22942 5CAF           8946         F8            mov	-8[bp],ax
22943                                           !BCC_EOS
22944                                           ! 2610      if (DX & 1) addr += 0x2000;
22945                                           ! Debug: and int = const 1 to unsigned short DX = [S+$C+6] (used reg = )
22946 5CB2           8A46         08            mov	al,8[bp]
22947 5CB5           24                     01  and	al,*1
22948 5CB7           84C0                       test	al,al
22949 5CB9           74           09            je  	.1C8
22950                       00005CBB            .1C9:
22951                                           ! Debug: addab int = const $2000 to unsigned short addr = [S+$C-$A] (used reg = )
22952 5CBB           8B46         F8            mov	ax,-8[bp]
22953 5CBE           05                   2000  add	ax,#$2000
22954 5CC1           8946         F8            mov	-8[bp],ax
22955                                           !BCC_EOS
22956                                           ! 2611      data = read_byte(0xb800,addr);
22957                       00005CC4            .1C8:
22958                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
22959 5CC4           FF76         F8            push	-8[bp]
22960                                           ! Debug: list unsigned int = const $B800 (used reg = )
22961 5CC7           B8                   B800  mov	ax,#$B800
22962 5CCA           50                         push	ax
22963                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22964 5CCB           E8         1DD2            call	_read_byte
22965 5CCE           83C4                   04  add	sp,*4
22966                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$C-7] (used reg = )
22967 5CD1           8846         FB            mov	-5[bp],al
22968                                           !BCC_EOS
22969                                           ! 2612      if(vga_modes[line].pixbits==2)
22970                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$10] struct  = vga_modes+0 (used reg = )
22971 5CD4           8A46         FE            mov	al,-2[bp]
22972 5CD7           30E4                       xor	ah,ah
22973 5CD9           B1                     03  mov	cl,*3
22974 5CDB           D3E0                       shl	ax,cl
22975 5CDD           89C3                       mov	bx,ax
22976 5CDF           81C3                 01DA  add	bx,#_vga_modes
22977                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
22978 5CE3           8A47         03            mov	al,3[bx]
22979 5CE6           3C                     02  cmp	al,*2
22980 5CE8           75           25            jne 	.1CA
22981                       00005CEA            .1CB:
22982                                           ! 2613       {
22983                                           ! 2614        attr = (data >> ((3 - (CX & 0x03)) * 2)) & 0x03;
22984                                           ! Debug: and int = const 3 to unsigned short CX = [S+$C+4] (used reg = )
22985 5CEA           8A46         06            mov	al,6[bp]
22986 5CED           24                     03  and	al,*3
22987                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
22988 5CEF           50                         push	ax
22989 5CF0           B8                   0003  mov	ax,*3
22990 5CF3           2A46         F4            sub	al,0+..FFF7[bp]
22991 5CF6           80DC                   00  sbb	ah,*0
22992 5CF9           44                         inc	sp
22993 5CFA           44                         inc	sp
22994                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22995 5CFB           D1E0                       shl	ax,*1
22996                                           ! Debug: sr unsigned int = ax+0 to unsigned char data = [S+$C-7] (used reg = )
22997 5CFD           89C3                       mov	bx,ax
22998 5CFF           8A46         FB            mov	al,-5[bp]
22999 5D02           30E4                       xor	ah,ah
23000 5D04           89D9                       mov	cx,bx
23001 5D06           D3E8                       shr	ax,cl
23002                                           ! Debug: and int = const 3 to unsigned int = ax+0 (used reg = )
23003 5D08           24                     03  and	al,*3
23004                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
23005 5D0A           8846         FC            mov	-4[bp],al
23006                                           !BCC_EOS
23007                                           ! 2615       }
23008                                           ! 2616      else
23009                                           ! 2617       {
23010 5D0D           EB           21            jmp .1CC
23011                       00005D0F            .1CA:
23012                                           ! 2618        attr = (data >> (7 - (CX & 0x07))) & 0x01;
23013                                           ! Debug: and int = const 7 to unsigned short CX = [S+$C+4] (used reg = )
23014 5D0F           8A46         06            mov	al,6[bp]
23015 5D12           24                     07  and	al,*7
23016                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
23017 5D14           50                         push	ax
23018 5D15           B8                   0007  mov	ax,*7
23019 5D18           2A46         F4            sub	al,0+..FFF7[bp]
23020 5D1B           80DC                   00  sbb	ah,*0
23021 5D1E           44                         inc	sp
23022 5D1F           44                         inc	sp
23023                                           ! Debug: sr unsigned int = ax+0 to unsigned char data = [S+$C-7] (used reg = )
23024 5D20           89C3                       mov	bx,ax
23025 5D22           8A46         FB            mov	al,-5[bp]
23026 5D25           30E4                       xor	ah,ah
23027 5D27           89D9                       mov	cx,bx
23028 5D29           D3E8                       shr	ax,cl
23029                                           ! Debug: and int = const 1 to unsigned int = ax+0 (used reg = )
23030 5D2B           24                     01  and	al,*1
23031                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
23032 5D2D           8846         FC            mov	-4[bp],al
23033                                           !BCC_EOS
23034                                           ! 2619       }
23035                                           ! 2620      break;
23036                       00005D30            .1CC:
23037 5D30           EB           4E            jmp .1BB
23038                                           !BCC_EOS
23039                                           ! 2621    case 0x05:
23040                                           ! 2622      addr=CX+DX*(read_word(0x40,0x4A)*8);
23041                       00005D32            .1CD:
23042                                           ! Debug: list int = const $4A (used reg = )
23043 5D32           B8                   004A  mov	ax,*$4A
23044 5D35           50                         push	ax
23045                                           ! Debug: list int = const $40 (used reg = )
23046 5D36           B8                   0040  mov	ax,*$40
23047 5D39           50                         push	ax
23048                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23049 5D3A           E8         1D76            call	_read_word
23050 5D3D           83C4                   04  add	sp,*4
23051                                           ! Debug: mul int = const 8 to unsigned short = ax+0 (used reg = )
23052 5D40           B1                     03  mov	cl,*3
23053 5D42           D3E0                       shl	ax,cl
23054                                           ! Debug: mul unsigned int = ax+0 to unsigned short DX = [S+$C+6] (used reg = )
23055                                           ! Debug: expression subtree swapping
23056 5D44           8B4E         08            mov	cx,8[bp]
23057 5D47           F7E9                       imul	cx
23058                                           ! Debug: add unsigned int = ax+0 to unsigned short CX = [S+$C+4] (used reg = )
23059                                           ! Debug: expression subtree swapping
23060 5D49           0346         06            add	ax,6[bp]
23061                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
23062 5D4C           8946         F8            mov	-8[bp],ax
23063                                           !BCC_EOS
23064                                           ! 2623      attr=read_byte(0xa000,addr);
23065                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23066 5D4F           FF76         F8            push	-8[bp]
23067                                           ! Debug: list unsigned int = const $A000 (used reg = )
23068 5D52           B8                   A000  mov	ax,#$A000
23069 5D55           50                         push	ax
23070                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23071 5D56           E8         1D47            call	_read_byte
23072 5D59           83C4                   04  add	sp,*4
23073                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
23074 5D5C           8846         FC            mov	-4[bp],al
23075                                           !BCC_EOS
23076                                           ! 2624      break;
23077 5D5F           EB           1F            jmp .1BB
23078                                           !BCC_EOS
23079                                           ! 2625    default:
23080                                           ! 2626      attr = 0;
23081                       00005D61            .1CE:
23082                                           ! Debug: eq int = const 0 to unsigned char attr = [S+$C-6] (used reg = )
23083 5D61           30C0                       xor	al,al
23084 5D63           8846         FC            mov	-4[bp],al
23085                                           !BCC_EOS
23086                                           ! 2627   }
23087                                           ! 2628  write_word(ss,AX,(read_word(ss,AX) & 0xff00) | attr);
23088 5D66           EB           18            jmp .1BB
23089                       00005D68            .1BD:
23090 5D68           2C                     02  sub	al,*2
23091 5D6A         0F84         FF2A            beq 	.1C7
23092 5D6E           2C                     01  sub	al,*1
23093 5D70         0F84         FE8D            beq 	.1BF
23094 5D74           2C                     01  sub	al,*1
23095 5D76         0F84         FE87            beq 	.1BE
23096 5D7A           2C                     01  sub	al,*1
23097 5D7C           74           B4            je 	.1CD
23098 5D7E           EB           E1            jmp	.1CE
23099                       00005D80            .1BB:
23100                       FFFFFFF4            ..FFF7	=	-$C
23101                                           ! Debug: list * unsigned short AX = [S+$C+8] (used reg = )
23102 5D80           FF76         0A            push	$A[bp]
23103                                           ! Debug: list unsigned short ss = [S+$E-$C] (used reg = )
23104 5D83           FF76         F6            push	-$A[bp]
23105                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23106 5D86           E8         1D2A            call	_read_word
23107 5D89           83C4                   04  add	sp,*4
23108                                           ! Debug: and unsigned int = const $FF00 to unsigned short = ax+0 (used reg = )
23109 5D8C           30C0                       xor	al,al
23110                                           ! Debug: or unsigned char attr = [S+$C-6] to unsigned int = ax+0 (used reg = )
23111 5D8E           0A46         FC            or	al,-4[bp]
23112                                           ! Debug: list unsigned int = ax+0 (used reg = )
23113 5D91           50                         push	ax
23114                                           ! Debug: list * unsigned short AX = [S+$E+8] (used reg = )
23115 5D92           FF76         0A            push	$A[bp]
23116                                           ! Debug: list unsigned short ss = [S+$10-$C] (used reg = )
23117 5D95           FF76         F6            push	-$A[bp]
23118                                           ! Debug: func () void = write_word+0 (used reg = )
23119 5D98           E8         1D43            call	_write_word
23120 5D9B           83C4                   06  add	sp,*6
23121                                           !BCC_EOS
23122                                           ! 2629 }
23123 5D9E           89EC                       mov	sp,bp
23124 5DA0           5D                         pop	bp
23125 5DA1           C3                         ret
23126                                           ! 2630 static void biosfn_write_teletype (car, page, attr, flag)
23127                                           ! Register BX used in function biosfn_read_pixel
23128                                           ! 2631 Bit8u car;Bit8u page;Bit8u attr;Bit8u flag;
23129                       00005DA2            _biosfn_write_teletype:
23130                                           !BCC_EOS
23131                                           !BCC_EOS
23132                                           !BCC_EOS
23133                                           !BCC_EOS
23134                                           ! 2632 {
23135                                           ! 2633  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
23136                                           !BCC_EOS
23137                                           ! 2634  Bit16u nbcols,nbrows,address;
23138                                           !BCC_EOS
23139                                           ! 2635  Bit16u cursor,dummy;
23140                                           !BCC_EOS
23141                                           ! 2636  if(page==0xff)
23142 5DA2           55                         push	bp
23143 5DA3           89E5                       mov	bp,sp
23144 5DA5           83C4                   F0  add	sp,*-$10
23145                                           ! Debug: logeq int = const $FF to unsigned char page = [S+$12+4] (used reg = )
23146 5DA8           8A46         06            mov	al,6[bp]
23147 5DAB           3C                     FF  cmp	al,#$FF
23148 5DAD           75           11            jne 	.1CF
23149                       00005DAF            .1D0:
23150                                           ! 2637   page=read_byte(0x40,0x62);
23151                                           ! Debug: list int = const $62 (used reg = )
23152 5DAF           B8                   0062  mov	ax,*$62
23153 5DB2           50                         push	ax
23154                                           ! Debug: list int = const $40 (used reg = )
23155 5DB3           B8                   0040  mov	ax,*$40
23156 5DB6           50                         push	ax
23157                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23158 5DB7           E8         1CE6            call	_read_byte
23159 5DBA           83C4                   04  add	sp,*4
23160                                           ! Debug: eq unsigned char = al+0 to unsigned char page = [S+$12+4] (used reg = )
23161 5DBD           8846         06            mov	6[bp],al
23162                                           !BCC_EOS
23163                                           ! 2638  mode=read_byte(0x40,0x49);
23164                       00005DC0            .1CF:
23165                                           ! Debug: list int = const $49 (used reg = )
23166 5DC0           B8                   0049  mov	ax,*$49
23167 5DC3           50                         push	ax
23168                                           ! Debug: list int = const $40 (used reg = )
23169 5DC4           B8                   0040  mov	ax,*$40
23170 5DC7           50                         push	ax
23171                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23172 5DC8           E8         1CD5            call	_read_byte
23173 5DCB           83C4                   04  add	sp,*4
23174                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
23175 5DCE           8846         FC            mov	-4[bp],al
23176                                           !BCC_EOS
23177                                           ! 2639  line=find_vga_entry(mode);
23178                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
23179 5DD1           8A46         FC            mov	al,-4[bp]
23180 5DD4           30E4                       xor	ah,ah
23181 5DD6           50                         push	ax
23182                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
23183 5DD7           E8         1BDA            call	_find_vga_entry
23184 5DDA           44                         inc	sp
23185 5DDB           44                         inc	sp
23186                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
23187 5DDC           8846         FB            mov	-5[bp],al
23188                                           !BCC_EOS
23189                                           ! 2640  if(line==0xFF)return;
23190                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
23191 5DDF           8A46         FB            mov	al,-5[bp]
23192 5DE2           3C                     FF  cmp	al,#$FF
23193 5DE4           75           04            jne 	.1D1
23194                       00005DE6            .1D2:
23195 5DE6           89EC                       mov	sp,bp
23196 5DE8           5D                         pop	bp
23197 5DE9           C3                         ret
23198                                           !BCC_EOS
23199                                           ! 2641  biosfn_get_cursor_pos(page,&dummy,&cursor);
23200                       00005DEA            .1D1:
23201                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
23202 5DEA           8D5E         F2            lea	bx,-$E[bp]
23203 5DED           53                         push	bx
23204                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
23205 5DEE           8D5E         F0            lea	bx,-$10[bp]
23206 5DF1           53                         push	bx
23207                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
23208 5DF2           8A46         06            mov	al,6[bp]
23209 5DF5           30E4                       xor	ah,ah
23210 5DF7           50                         push	ax
23211                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
23212 5DF8           E8         E562            call	_biosfn_get_cursor_pos
23213 5DFB           83C4                   06  add	sp,*6
23214                                           !BCC_EOS
23215                                           ! 2642  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
23216                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
23217 5DFE           8A46         F2            mov	al,-$E[bp]
23218                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
23219 5E01           8846         FE            mov	-2[bp],al
23220                                           !BCC_EOS
23221                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
23222 5E04           8B46         F2            mov	ax,-$E[bp]
23223 5E07           30C0                       xor	al,al
23224                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
23225 5E09           88E0                       mov	al,ah
23226 5E0B           30E4                       xor	ah,ah
23227                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
23228 5E0D           8846         FD            mov	-3[bp],al
23229                                           !BCC_EOS
23230                                           ! 2643  nbrows=read_byte(0x40,0x84)+1;
23231                                           ! Debug: list int = const $84 (used reg = )
23232 5E10           B8                   0084  mov	ax,#$84
23233 5E13           50                         push	ax
23234                                           ! Debug: list int = const $40 (used reg = )
23235 5E14           B8                   0040  mov	ax,*$40
23236 5E17           50                         push	ax
23237                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23238 5E18           E8         1C85            call	_read_byte
23239 5E1B           83C4                   04  add	sp,*4
23240                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
23241 5E1E           30E4                       xor	ah,ah
23242                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
23243 5E20           40                         inc	ax
23244 5E21           8946         F6            mov	-$A[bp],ax
23245                                           !BCC_EOS
23246                                           ! 2644  nbcols=read_word(0x40,0x4A);
23247                                           ! Debug: list int = const $4A (used reg = )
23248 5E24           B8                   004A  mov	ax,*$4A
23249 5E27           50                         push	ax
23250                                           ! Debug: list int = const $40 (used reg = )
23251 5E28           B8                   0040  mov	ax,*$40
23252 5E2B           50                         push	ax
23253                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23254 5E2C           E8         1C84            call	_read_word
23255 5E2F           83C4                   04  add	sp,*4
23256                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
23257 5E32           8946         F8            mov	-8[bp],ax
23258                                           !BCC_EOS
23259                                           ! 2645  switch(car)
23260 5E35           8A46         04            mov	al,4[bp]
23261                                           ! 2646   {
23262 5E38           E9         01EB            br 	.1D5
23263                                           ! 2647    case 7:
23264                                           ! 2648     break;
23265                       00005E3B            .1D6:
23266 5E3B           E9         0209            br 	.1D3
23267                                           !BCC_EOS
23268                                           ! 2649    case 8:
23269                                           ! 2650     if(xcurs>0)xcurs--;
23270                       00005E3E            .1D7:
23271                                           ! Debug: gt int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
23272 5E3E           8A46         FE            mov	al,-2[bp]
23273 5E41           84C0                       test	al,al
23274 5E43           74           07            je  	.1D8
23275                       00005E45            .1D9:
23276                                           ! Debug: postdec unsigned char xcurs = [S+$12-4] (used reg = )
23277 5E45           8A46         FE            mov	al,-2[bp]
23278 5E48           48                         dec	ax
23279 5E49           8846         FE            mov	-2[bp],al
23280                                           !BCC_EOS
23281                                           ! 2651     break;
23282                       00005E4C            .1D8:
23283 5E4C           E9         01F8            br 	.1D3
23284                                           !BCC_EOS
23285                                           ! 2652    case '\r':
23286                                           ! 2653     xcurs=0;
23287                       00005E4F            .1DA:
23288                                           ! Debug: eq int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
23289 5E4F           30C0                       xor	al,al
23290 5E51           8846         FE            mov	-2[bp],al
23291                                           !BCC_EOS
23292                                           ! 2654     break;
23293 5E54           E9         01F0            br 	.1D3
23294                                           !BCC_EOS
23295                                           ! 2655    case '\n':
23296                                           ! 2656     ycurs++;
23297                       00005E57            .1DB:
23298                                           ! Debug: postinc unsigned char ycurs = [S+$12-5] (used reg = )
23299 5E57           8A46         FD            mov	al,-3[bp]
23300 5E5A           40                         inc	ax
23301 5E5B           8846         FD            mov	-3[bp],al
23302                                           !BCC_EOS
23303                                           ! 2657     break;
23304 5E5E           E9         01E6            br 	.1D3
23305                                           !BCC_EOS
23306                                           ! 2658    case '\t':
23307                                           ! 2659     do
23308                       00005E61            .1DC:
23309                                           ! 2660      {
23310                       00005E61            .1DF:
23311                                           ! 2661       biosfn_write_teletype(' ',page,attr,flag);
23312                                           ! Debug: list unsigned char flag = [S+$12+8] (used reg = )
23313 5E61           8A46         0A            mov	al,$A[bp]
23314 5E64           30E4                       xor	ah,ah
23315 5E66           50                         push	ax
23316                                           ! Debug: list unsigned char attr = [S+$14+6] (used reg = )
23317 5E67           8A46         08            mov	al,8[bp]
23318 5E6A           30E4                       xor	ah,ah
23319 5E6C           50                         push	ax
23320                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
23321 5E6D           8A46         06            mov	al,6[bp]
23322 5E70           30E4                       xor	ah,ah
23323 5E72           50                         push	ax
23324                                           ! Debug: list int = const $20 (used reg = )
23325 5E73           B8                   0020  mov	ax,*$20
23326 5E76           50                         push	ax
23327                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
23328 5E77           E8         FF28            call	_biosfn_write_teletype
23329 5E7A           83C4                   08  add	sp,*8
23330                                           !BCC_EOS
23331                                           ! 2662       biosfn_get_cursor_pos(page,&dummy,&cursor);
23332                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
23333 5E7D           8D5E         F2            lea	bx,-$E[bp]
23334 5E80           53                         push	bx
23335                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
23336 5E81           8D5E         F0            lea	bx,-$10[bp]
23337 5E84           53                         push	bx
23338                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
23339 5E85           8A46         06            mov	al,6[bp]
23340 5E88           30E4                       xor	ah,ah
23341 5E8A           50                         push	ax
23342                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
23343 5E8B           E8         E4CF            call	_biosfn_get_cursor_pos
23344 5E8E           83C4                   06  add	sp,*6
23345                                           !BCC_EOS
23346                                           ! 2663       xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
23347                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
23348 5E91           8A46         F2            mov	al,-$E[bp]
23349                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
23350 5E94           8846         FE            mov	-2[bp],al
23351                                           !BCC_EOS
23352                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
23353 5E97           8B46         F2            mov	ax,-$E[bp]
23354 5E9A           30C0                       xor	al,al
23355                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
23356 5E9C           88E0                       mov	al,ah
23357 5E9E           30E4                       xor	ah,ah
23358                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
23359 5EA0           8846         FD            mov	-3[bp],al
23360                                           !BCC_EOS
23361                                           ! 2664      }while(xcurs%8==0);
23362                       00005EA3            .1DE:
23363                                           ! Debug: mod int = const 8 to unsigned char xcurs = [S+$12-4] (used reg = )
23364 5EA3           8A46         FE            mov	al,-2[bp]
23365 5EA6           30E4                       xor	ah,ah
23366 5EA8           24                     07  and	al,*7
23367                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
23368 5EAA           84C0                       test	al,al
23369 5EAC           74           B3            je 	.1DF
23370                       00005EAE            .1E0:
23371                                           !BCC_EOS
23372                                           ! 2665     break;
23373                       00005EAE            .1DD:
23374 5EAE           E9         0196            br 	.1D3
23375                                           !BCC_EOS
23376                                           ! 2666    default:
23377                                           ! 2667     if(vga_modes[line].class==0x00)
23378                       00005EB1            .1E1:
23379                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
23380 5EB1           8A46         FB            mov	al,-5[bp]
23381 5EB4           30E4                       xor	ah,ah
23382 5EB6           B1                     03  mov	cl,*3
23383 5EB8           D3E0                       shl	ax,cl
23384 5EBA           89C3                       mov	bx,ax
23385 5EBC           81C3                 01DA  add	bx,#_vga_modes
23386                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
23387 5EC0           8A47         01            mov	al,1[bx]
23388 5EC3           84C0                       test	al,al
23389 5EC5         0F85         0082            bne 	.1E2
23390                       00005EC9            .1E3:
23391                                           ! 2668      {
23392                                           ! 2669       address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
23393                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
23394 5EC9           8A46         FD            mov	al,-3[bp]
23395 5ECC           30E4                       xor	ah,ah
23396 5ECE           8B4E         F8            mov	cx,-8[bp]
23397 5ED1           F7E9                       imul	cx
23398                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
23399                                           ! Debug: expression subtree swapping
23400 5ED3           0246         FE            add	al,-2[bp]
23401 5ED6           80D4                   00  adc	ah,*0
23402                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23403 5ED9           D1E0                       shl	ax,*1
23404 5EDB           50                         push	ax
23405                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
23406 5EDC           8B46         F8            mov	ax,-8[bp]
23407 5EDF           8B4E         F6            mov	cx,-$A[bp]
23408 5EE2           F7E9                       imul	cx
23409                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23410 5EE4           D1E0                       shl	ax,*1
23411                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
23412 5EE6           0C                     FF  or	al,#$FF
23413                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
23414                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
23415 5EE8           89C3                       mov	bx,ax
23416 5EEA           8A46         06            mov	al,6[bp]
23417 5EED           30E4                       xor	ah,ah
23418 5EEF           93                         xchg	ax,bx
23419 5EF0           40                         inc	ax
23420 5EF1           89D9                       mov	cx,bx
23421 5EF3           F7E9                       imul	cx
23422                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
23423 5EF5           0346         EE            add	ax,0+..FFF6[bp]
23424 5EF8           44                         inc	sp
23425 5EF9           44                         inc	sp
23426                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
23427 5EFA           8946         F4            mov	-$C[bp],ax
23428                                           !BCC_EOS
23429                                           ! 2670       write_byte(vga_modes[line].s
23430                                           ! 2670 start,address,car);
23431                                           ! Debug: list unsigned char car = [S+$12+2] (used reg = )
23432 5EFD           8A46         04            mov	al,4[bp]
23433 5F00           30E4                       xor	ah,ah
23434 5F02           50                         push	ax
23435                                           ! Debug: list unsigned short address = [S+$14-$E] (used reg = )
23436 5F03           FF76         F4            push	-$C[bp]
23437                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$10] struct  = vga_modes+0 (used reg = )
23438 5F06           8A46         FB            mov	al,-5[bp]
23439 5F09           30E4                       xor	ah,ah
23440 5F0B           B1                     03  mov	cl,*3
23441 5F0D           D3E0                       shl	ax,cl
23442 5F0F           89C3                       mov	bx,ax
23443 5F11           81C3                 01DA  add	bx,#_vga_modes
23444                                           ! Debug: list unsigned short = [bx+4] (used reg = )
23445 5F15           FF77         04            push	4[bx]
23446                                           ! Debug: func () void = write_byte+0 (used reg = )
23447 5F18           E8         1BAB            call	_write_byte
23448 5F1B           83C4                   06  add	sp,*6
23449                                           !BCC_EOS
23450                                           ! 2671       if(flag==3)
23451                                           ! Debug: logeq int = const 3 to unsigned char flag = [S+$12+8] (used reg = )
23452 5F1E           8A46         0A            mov	al,$A[bp]
23453 5F21           3C                     03  cmp	al,*3
23454 5F23           75           23            jne 	.1E4
23455                       00005F25            .1E5:
23456                                           ! 2672        write_byte(vga_modes[line].sstart,address+1,attr);
23457                                           ! Debug: list unsigned char attr = [S+$12+6] (used reg = )
23458 5F25           8A46         08            mov	al,8[bp]
23459 5F28           30E4                       xor	ah,ah
23460 5F2A           50                         push	ax
23461                                           ! Debug: add int = const 1 to unsigned short address = [S+$14-$E] (used reg = )
23462 5F2B           8B46         F4            mov	ax,-$C[bp]
23463                                           ! Debug: list unsigned int = ax+1 (used reg = )
23464 5F2E           40                         inc	ax
23465 5F2F           50                         push	ax
23466                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$10] struct  = vga_modes+0 (used reg = )
23467 5F30           8A46         FB            mov	al,-5[bp]
23468 5F33           30E4                       xor	ah,ah
23469 5F35           B1                     03  mov	cl,*3
23470 5F37           D3E0                       shl	ax,cl
23471 5F39           89C3                       mov	bx,ax
23472 5F3B           81C3                 01DA  add	bx,#_vga_modes
23473                                           ! Debug: list unsigned short = [bx+4] (used reg = )
23474 5F3F           FF77         04            push	4[bx]
23475                                           ! Debug: func () void = write_byte+0 (used reg = )
23476 5F42           E8         1B81            call	_write_byte
23477 5F45           83C4                   06  add	sp,*6
23478                                           !BCC_EOS
23479                                           ! 2673      }
23480                       00005F48            .1E4:
23481                                           ! 2674     else
23482                                           ! 2675      {
23483 5F48           E9         00D2            br 	.1E6
23484                       00005F4B            .1E2:
23485                                           ! 2676       cheight=video_param_table[line_to_vpti[line]].cheight;
23486                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] unsigned char = line_to_vpti+0 (used reg = )
23487 5F4B           8A46         FB            mov	al,-5[bp]
23488 5F4E           30E4                       xor	ah,ah
23489 5F50           89C3                       mov	bx,ax
23490                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
23491 5F52           8A87       025A            mov	al,_line_to_vpti[bx]
23492 5F56           30E4                       xor	ah,ah
23493 5F58           B1                     06  mov	cl,*6
23494 5F5A           D3E0                       shl	ax,cl
23495 5F5C           89C3                       mov	bx,ax
23496 5F5E           81C3                 026E  add	bx,#_video_param_table
23497                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$12-3] (used reg = )
23498 5F62           8A47         02            mov	al,2[bx]
23499 5F65           8846         FF            mov	-1[bp],al
23500                                           !BCC_EOS
23501                                           ! 2677       bpp=vga_modes[line].pixbits;
23502                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
23503 5F68           8A46         FB            mov	al,-5[bp]
23504 5F6B           30E4                       xor	ah,ah
23505 5F6D           B1                     03  mov	cl,*3
23506 5F6F           D3E0                       shl	ax,cl
23507 5F71           89C3                       mov	bx,ax
23508 5F73           81C3                 01DA  add	bx,#_vga_modes
23509                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
23510 5F77           8A47         03            mov	al,3[bx]
23511 5F7A           8846         FA            mov	-6[bp],al
23512                                           !BCC_EOS
23513                                           ! 2678       switch(vga_modes[line].memmodel)
23514                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
23515 5F7D           8A46         FB            mov	al,-5[bp]
23516 5F80           30E4                       xor	ah,ah
23517 5F82           B1                     03  mov	cl,*3
23518 5F84           D3E0                       shl	ax,cl
23519 5F86           89C3                       mov	bx,ax
23520 5F88           81C3                 01DA  add	bx,#_vga_modes
23521 5F8C           8A47         02            mov	al,2[bx]
23522                                           ! 2679        {
23523 5F8F           E9         0077            br 	.1E9
23524                                           ! 2680         case 0x04:
23525                                           ! 2681         case 0x03:
23526                       00005F92            .1EA:
23527                                           ! 2682           write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight);
23528                       00005F92            .1EB:
23529                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
23530 5F92           8A46         FF            mov	al,-1[bp]
23531 5F95           30E4                       xor	ah,ah
23532 5F97           50                         push	ax
23533                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
23534 5F98           FF76         F8            push	-8[bp]
23535                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
23536 5F9B           8A46         FD            mov	al,-3[bp]
23537 5F9E           30E4                       xor	ah,ah
23538 5FA0           50                         push	ax
23539                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
23540 5FA1           8A46         FE            mov	al,-2[bp]
23541 5FA4           30E4                       xor	ah,ah
23542 5FA6           50                         push	ax
23543                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
23544 5FA7           8A46         08            mov	al,8[bp]
23545 5FAA           30E4                       xor	ah,ah
23546 5FAC           50                         push	ax
23547                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
23548 5FAD           8A46         04            mov	al,4[bp]
23549 5FB0           30E4                       xor	ah,ah
23550 5FB2           50                         push	ax
23551                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
23552 5FB3           E8         F0A0            call	_write_gfx_char_pl4
23553 5FB6           83C4                   0C  add	sp,*$C
23554                                           !BCC_EOS
23555                                           ! 2683           break;
23556 5FB9           EB           62            jmp .1E7
23557                                           !BCC_EOS
23558                                           ! 2684         case 0x02:
23559                                           ! 2685           write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp);
23560                       00005FBB            .1EC:
23561                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
23562 5FBB           8A46         FA            mov	al,-6[bp]
23563 5FBE           30E4                       xor	ah,ah
23564 5FC0           50                         push	ax
23565                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
23566 5FC1           FF76         F8            push	-8[bp]
23567                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
23568 5FC4           8A46         FD            mov	al,-3[bp]
23569 5FC7           30E4                       xor	ah,ah
23570 5FC9           50                         push	ax
23571                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
23572 5FCA           8A46         FE            mov	al,-2[bp]
23573 5FCD           30E4                       xor	ah,ah
23574 5FCF           50                         push	ax
23575                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
23576 5FD0           8A46         08            mov	al,8[bp]
23577 5FD3           30E4                       xor	ah,ah
23578 5FD5           50                         push	ax
23579                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
23580 5FD6           8A46         04            mov	al,4[bp]
23581 5FD9           30E4                       xor	ah,ah
23582 5FDB           50                         push	ax
23583                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
23584 5FDC           E8         F1EA            call	_write_gfx_char_cga
23585 5FDF           83C4                   0C  add	sp,*$C
23586                                           !BCC_EOS
23587                                           ! 2686           break;
23588 5FE2           EB           39            jmp .1E7
23589                                           !BCC_EOS
23590                                           ! 2687         case 0x05:
23591                                           ! 2688           write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
23592                       00005FE4            .1ED:
23593                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
23594 5FE4           FF76         F8            push	-8[bp]
23595                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
23596 5FE7           8A46         FD            mov	al,-3[bp]
23597 5FEA           30E4                       xor	ah,ah
23598 5FEC           50                         push	ax
23599                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
23600 5FED           8A46         FE            mov	al,-2[bp]
23601 5FF0           30E4                       xor	ah,ah
23602 5FF2           50                         push	ax
23603                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
23604 5FF3           8A46         08            mov	al,8[bp]
23605 5FF6           30E4                       xor	ah,ah
23606 5FF8           50                         push	ax
23607                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
23608 5FF9           8A46         04            mov	al,4[bp]
23609 5FFC           30E4                       xor	ah,ah
23610 5FFE           50                         push	ax
23611                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
23612 5FFF           E8         F3CA            call	_write_gfx_char_lin
23613 6002           83C4                   0A  add	sp,*$A
23614                                           !BCC_EOS
23615                                           ! 2689           break;
23616 6005           EB           16            jmp .1E7
23617                                           !BCC_EOS
23618                                           ! 2690        }
23619                                           ! 2691      }
23620 6007           EB           14            jmp .1E7
23621                       00006009            .1E9:
23622 6009           2C                     02  sub	al,*2
23623 600B           74           AE            je 	.1EC
23624 600D           2C                     01  sub	al,*1
23625 600F         0F84         FF7F            beq 	.1EB
23626 6013           2C                     01  sub	al,*1
23627 6015         0F84         FF79            beq 	.1EA
23628 6019           2C                     01  sub	al,*1
23629 601B           74           C7            je 	.1ED
23630                       0000601D            .1E7:
23631                                           ! 2692     xcurs++;
23632                       0000601D            .1E6:
23633                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
23634 601D           8A46         FE            mov	al,-2[bp]
23635 6020           40                         inc	ax
23636 6021           8846         FE            mov	-2[bp],al
23637                                           !BCC_EOS
23638                                           ! 2693   }
23639                                           ! 2694  if(xcurs==nbcols)
23640 6024           EB           21            jmp .1D3
23641                       00006026            .1D5:
23642 6026           2C                     07  sub	al,*7
23643 6028         0F84         FE0F            beq 	.1D6
23644 602C           2C                     01  sub	al,*1
23645 602E         0F84         FE0C            beq 	.1D7
23646 6032           2C                     01  sub	al,*1
23647 6034         0F84         FE29            beq 	.1DC
23648 6038           2C                     01  sub	al,*1
23649 603A         0F84         FE19            beq 	.1DB
23650 603E           2C                     03  sub	al,*3
23651 6040         0F84         FE0B            beq 	.1DA
23652 6044           E9         FE6A            br 	.1E1
23653                       00006047            .1D3:
23654                       FFFFFFEE            ..FFF6	=	-$12
23655                                           ! Debug: logeq unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
23656 6047           8A46         FE            mov	al,-2[bp]
23657 604A           30E4                       xor	ah,ah
23658 604C           3B46         F8            cmp	ax,-8[bp]
23659 604F           75           0C            jne 	.1EE
23660                       00006051            .1EF:
23661                                           ! 2695   {xcurs=0;
23662                                           ! Debug: eq int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
23663 6051           30C0                       xor	al,al
23664 6053           8846         FE            mov	-2[bp],al
23665                                           !BCC_EOS
23666                                           ! 2696    ycurs++;
23667                                           ! Debug: postinc unsigned char ycurs = [S+$12-5] (used reg = )
23668 6056           8A46         FD            mov	al,-3[bp]
23669 6059           40                         inc	ax
23670 605A           8846         FD            mov	-3[bp],al
23671                                           !BCC_EOS
23672                                           ! 2697   }
23673                                           ! 2698  if(ycurs==nbrows)
23674                       0000605D            .1EE:
23675                                           ! Debug: logeq unsigned short nbrows = [S+$12-$C] to unsigned char ycurs = [S+$12-5] (used reg = )
23676 605D           8A46         FD            mov	al,-3[bp]
23677 6060           30E4                       xor	ah,ah
23678 6062           3B46         F6            cmp	ax,-$A[bp]
23679 6065           75           70            jne 	.1F0
23680                       00006067            .1F1:
23681                                           ! 2699   {
23682                                           ! 2700    if(vga_modes[line].class==0x00)
23683                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
23684 6067           8A46         FB            mov	al,-5[bp]
23685 606A           30E4                       xor	ah,ah
23686 606C           B1                     03  mov	cl,*3
23687 606E           D3E0                       shl	ax,cl
23688 6070           89C3                       mov	bx,ax
23689 6072           81C3                 01DA  add	bx,#_vga_modes
23690                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
23691 6076           8A47         01            mov	al,1[bx]
23692 6079           84C0                       test	al,al
23693 607B           75           2A            jne 	.1F2
23694                       0000607D            .1F3:
23695                                           ! 2701     {
23696                                           ! 2702      biosfn_scroll(0x01,0x07,0,0,nbrows-1,nbcols-1,page,1);
23697                                           ! Debug: list int = const 1 (used reg = )
23698 607D           B8                   0001  mov	ax,*1
23699 6080           50                         push	ax
23700                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
23701 6081           8A46         06            mov	al,6[bp]
23702 6084           30E4                       xor	ah,ah
23703 6086           50                         push	ax
23704                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$16-$A] (used reg = )
23705 6087           8B46         F8            mov	ax,-8[bp]
23706                                           ! Debug: list unsigned int = ax-1 (used reg = )
23707 608A           48                         dec	ax
23708 608B           50                         push	ax
23709                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$18-$C] (used reg = )
23710 608C           8B46         F6            mov	ax,-$A[bp]
23711                                           ! Debug: list unsigned int = ax-1 (used reg = )
23712 608F           48                         dec	ax
23713 6090           50                         push	ax
23714                                           ! Debug: list int = const 0 (used reg = )
23715 6091           31C0                       xor	ax,ax
23716 6093           50                         push	ax
23717                                           ! Debug: list int = const 0 (used reg = )
23718 6094           31C0                       xor	ax,ax
23719 6096           50                         push	ax
23720                                           ! Debug: list int = const 7 (used reg = )
23721 6097           B8                   0007  mov	ax,*7
23722 609A           50                         push	ax
23723                                           ! Debug: list int = const 1 (used reg = )
23724 609B           B8                   0001  mov	ax,*1
23725 609E           50                         push	ax
23726                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
23727 609F           E8         E7B3            call	_biosfn_scroll
23728 60A2           83C4                   10  add	sp,*$10
23729                                           !BCC_EOS
23730                                           ! 2703     }
23731                                           ! 2704    else
23732                                           ! 2705     {
23733 60A5           EB           27            jmp .1F4
23734                       000060A7            .1F2:
23735                                           ! 2706      biosfn_scroll(0x01,0x00,0,0,nbrows-1,nbcols-1,page,1);
23736                                           ! Debug: list int = const 1 (used reg = )
23737 60A7           B8                   0001  mov	ax,*1
23738 60AA           50                         push	ax
23739                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
23740 60AB           8A46         06            mov	al,6[bp]
23741 60AE           30E4                       xor	ah,ah
23742 60B0           50                         push	ax
23743                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$16-$A] (used reg = )
23744 60B1           8B46         F8            mov	ax,-8[bp]
23745                                           ! Debug: list unsigned int = ax-1 (used reg = )
23746 60B4           48                         dec	ax
23747 60B5           50                         push	ax
23748                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$18-$C] (used reg = )
23749 60B6           8B46         F6            mov	ax,-$A[bp]
23750                                           ! Debug: list unsigned int = ax-1 (used reg = )
23751 60B9           48                         dec	ax
23752 60BA           50                         push	ax
23753                                           ! Debug: list int = const 0 (used reg = )
23754 60BB           31C0                       xor	ax,ax
23755 60BD           50                         push	ax
23756                                           ! Debug: list int = const 0 (used reg = )
23757 60BE           31C0                       xor	ax,ax
23758 60C0           50                         push	ax
23759                                           ! Debug: list int = const 0 (used reg = )
23760 60C1           31C0                       xor	ax,ax
23761 60C3           50                         push	ax
23762                                           ! Debug: list int = const 1 (used reg = )
23763 60C4           B8                   0001  mov	ax,*1
23764 60C7           50                         push	ax
23765                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
23766 60C8           E8         E78A            call	_biosfn_scroll
23767 60CB           83C4                   10  add	sp,*$10
23768                                           !BCC_EOS
23769                                           ! 2707     }
23770                                           ! 2708    ycurs-=1;
23771                       000060CE            .1F4:
23772                                           ! Debug: subab int = const 1 to unsigned char ycurs = [S+$12-5] (used reg = )
23773 60CE           8A46         FD            mov	al,-3[bp]
23774 60D1           30E4                       xor	ah,ah
23775 60D3           48                         dec	ax
23776 60D4           8846         FD            mov	-3[bp],al
23777                                           !BCC_EOS
23778                                           ! 2709   }
23779                                           ! 2710  cursor=ycurs; cursor<<=8; cursor+=xcurs;
23780                       000060D7            .1F0:
23781                                           ! Debug: eq unsigned char ycurs = [S+$12-5] to unsigned short cursor = [S+$12-$10] (used reg = )
23782 60D7           8A46         FD            mov	al,-3[bp]
23783 60DA           30E4                       xor	ah,ah
23784 60DC           8946         F2            mov	-$E[bp],ax
23785                                           !BCC_EOS
23786                                           ! Debug: slab int = const 8 to unsigned short cursor = [S+$12-$10] (used reg = )
23787 60DF           8B46         F2            mov	ax,-$E[bp]
23788 60E2           88C4                       mov	ah,al
23789 60E4           30C0                       xor	al,al
23790 60E6           8946         F2            mov	-$E[bp],ax
23791                                           !BCC_EOS
23792                                           ! Debug: addab unsigned char xcurs = [S+$12-4] to unsigned short cursor = [S+$12-$10] (used reg = )
23793 60E9           8B46         F2            mov	ax,-$E[bp]
23794 60EC           0246         FE            add	al,-2[bp]
23795 60EF           80D4                   00  adc	ah,*0
23796 60F2           8946         F2            mov	-$E[bp],ax
23797                                           !BCC_EOS
23798                                           ! 2711  biosfn_set_cursor_pos(page,cursor);
23799                                           ! Debug: list unsigned short cursor = [S+$12-$10] (used reg = )
23800 60F5           FF76         F2            push	-$E[bp]
23801                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
23802 60F8           8A46         06            mov	al,6[bp]
23803 60FB           30E4                       xor	ah,ah
23804 60FD           50                         push	ax
23805                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
23806 60FE           E8         E15C            call	_biosfn_set_cursor_pos
23807 6101           83C4                   04  add	sp,*4
23808                                           !BCC_EOS
23809                                           ! 2712 }
23810 6104           89EC                       mov	sp,bp
23811 6106           5D                         pop	bp
23812 6107           C3                         ret
23813                                           ! 2713 #asm
23814                                           !BCC_ASM
23815                       00000008            _biosfn_write_teletype.flag	set	8
23816                       00000006            _biosfn_write_teletype.attr	set	6
23817                       00000004            _biosfn_write_teletype.page	set	4
23818                       00000002            _biosfn_write_teletype.car	set	2
23819                       00006108            biosfn_get_video_mode:
23820 6108           1E                           push ds
23821 6109           B8                   0040    mov ax, # 0x40
23822 610C           8ED8                         mov ds, ax
23823 610E           53                           push bx
23824 610F           BB                   0062    mov bx, # 0x62
23825 6112           8A07                         mov al, [bx]
23826 6114           5B                           pop bx
23827 6115           88C7                         mov bh, al
23828 6117           53                           push bx
23829 6118           BB                   0087    mov bx, # 0x87
23830 611B           8A27                         mov ah, [bx]
23831 611D           80E4                   80    and ah, #0x80
23832 6120           BB                   0049    mov bx, # 0x49
23833 6123           8A07                         mov al, [bx]
23834 6125           08E0                         or al, ah
23835 6127           BB                   004A    mov bx, # 0x4A
23836 612A           8A27                         mov ah, [bx]
23837 612C           5B                           pop bx
23838 612D           1F                           pop ds
23839 612E           C3                           ret
23840                                           ! 2735 endasm
23841                                           !BCC_ENDASM
23842                                           ! 2736 #asm
23843                                           !BCC_ASM
23844                       00000008            _biosfn_write_teletype.flag	set	8
23845                       00000006            _biosfn_write_teletype.attr	set	6
23846                       00000004            _biosfn_write_teletype.page	set	4
23847                       00000002            _biosfn_write_teletype.car	set	2
23848                       0000612F            biosfn_group_10:
23849 612F           3C                     00    cmp al, #0x00
23850 6131           75           02              jne int10_test_1001
23851 6133           EB           61              jmp biosfn_set_single_palette_reg
23852                       00006135            int10_test_1001:
23853 6135           3C                     01    cmp al, #0x01
23854 6137           75           02              jne int10_test_1002
23855 6139           EB           75              jmp biosfn_set_overscan_border_color
23856                       0000613B            int10_test_1002:
23857 613B           3C                     02    cmp al, #0x02
23858 613D           75           02              jne int10_test_1003
23859 613F           EB           77              jmp biosfn_set_all_palette_reg
23860                       00006141            int10_test_1003:
23861 6141           3C                     03    cmp al, #0x03
23862 6143           75           03              jne int10_test_1007
23863 6145           E9         009D              jmp biosfn_toggle_intensity
23864                       00006148            int10_test_1007:
23865 6148           3C                     07    cmp al, #0x07
23866 614A           75           03              jne int10_test_1008
23867 614C           E9         00BC              jmp biosfn_get_single_palette_reg
23868                       0000614F            int10_test_1008:
23869 614F           3C                     08    cmp al, #0x08
23870 6151           75           03              jne int10_test_1009
23871 6153           E9         00D9              jmp biosfn_read_overscan_border_color
23872                       00006156            int10_test_1009:
23873 6156           3C                     09    cmp al, #0x09
23874 6158           75           03              jne int10_test_1010
23875 615A           E9         00E0              jmp biosfn_get_all_palette_reg
23876                       0000615D            int10_test_1010:
23877 615D           3C                     10    cmp al, #0x10
23878 615F           75           03              jne int10_test_1012
23879 6161           E9         011A              jmp biosfn_set_single_dac_reg
23880                       00006164            int10_test_1012:
23881 6164           3C                     12    cmp al, #0x12
23882 6166           75           03              jne int10_test_1013
23883 6168           E9         012C              jmp biosfn_set_all_dac_reg
23884                       0000616B            int10_test_1013:
23885 616B           3C                     13    cmp al, #0x13
23886 616D           75           03              jne int10_test_1015
23887 616F           E9         014D              jmp biosfn_select_video_dac_color_page
23888                       00006172            int10_test_1015:
23889 6172           3C                     15    cmp al, #0x15
23890 6174           75           03              jne int10_test_1017
23891 6176           E9         0189              jmp biosfn_read_single_dac_reg
23892                       00006179            int10_test_1017:
23893 6179           3C                     17    cmp al, #0x17
23894 617B           75           03              jne int10_test_1018
23895 617D           E9         019D              jmp biosfn_read_all_dac_reg
23896                       00006180            int10_test_1018:
23897 6180           3C                     18    cmp al, #0x18
23898 6182           75           03              jne int10_test_1019
23899 6184           E9         01BE              jmp biosfn_set_pel_mask
23900                       00006187            int10_test_1019:
23901 6187           3C                     19    cmp al, #0x19
23902 6189           75           03              jne int10_test_101A
23903 618B           E9         01C2              jmp biosfn_read_pel_mask
23904                       0000618E            int10_test_101A:
23905 618E           3C                     1A    cmp al, #0x1a
23906 6190           75           03              jne int10_group_10_unknown
23907 6192           E9         01C6              jmp biosfn_read_video_dac_state
23908                       00006195            int10_group_10_unknown:
23909 6195           C3                           ret
23910                       00006196            biosfn_set_single_palette_reg:
23911 6196           80FB                   14    cmp bl, #0x14
23912 6199           77           14              ja no_actl_reg1
23913 619B           50                           push ax
23914 619C           52                           push dx
23915 619D           BA                   03DA    mov dx, # 0x3da
23916 61A0           EC                           in al, dx
23917 61A1           BA                   03C0    mov dx, # 0x3c0
23918 61A4           88D8                         mov al, bl
23919 61A6           EE                           out dx, al
23920 61A7           88F8                         mov al, bh
23921 61A9           EE                           out dx, al
23922 61AA           B0                     20    mov al, #0x20
23923 61AC           EE                           out dx, al
23924 61AD           5A                           pop dx
23925 61AE           58                           pop ax
23926                       000061AF            no_actl_reg1:
23927 61AF           C3                           ret
23928                                           ! 2817 endasm
23929                                           !BCC_ENDASM
23930                                           ! 2818 #asm
23931                                           !BCC_ASM
23932                       00000008            _biosfn_write_teletype.flag	set	8
23933                       00000006            _biosfn_write_teletype.attr	set	6
23934                       00000004            _biosfn_write_teletype.page	set	4
23935                       00000002            _biosfn_write_teletype.car	set	2
23936                       000061B0            biosfn_set_overscan_border_color:
23937 61B0           53                           push bx
23938 61B1           B3                     11    mov bl, #0x11
23939 61B3           E8         FFE0              call biosfn_set_single_palette_reg
23940 61B6           5B                           pop bx
23941 61B7           C3                           ret
23942                                           ! 2825 endasm
23943                                           !BCC_ENDASM
23944                                           ! 2826 #asm
23945                                           !BCC_ASM
23946                       00000008            _biosfn_write_teletype.flag	set	8
23947                       00000006            _biosfn_write_teletype.attr	set	6
23948                       00000004            _biosfn_write_teletype.page	set	4
23949                       00000002            _biosfn_write_teletype.car	set	2
23950                       000061B8            biosfn_set_all_palette_reg:
23951 61B8           50                           push ax
23952 61B9           53                           push bx
23953 61BA           51                           push cx
23954 61BB           52                           push dx
23955 61BC           89D3                         mov bx, dx
23956 61BE           BA                   03DA    mov dx, # 0x3da
23957 61C1           EC                           in al, dx
23958 61C2           B1                     00    mov cl, #0x00
23959 61C4           BA                   03C0    mov dx, # 0x3c0
23960                       000061C7            set_palette_loop:
23961 61C7           88C8                         mov al, cl
23962 61C9           EE                           out dx, al
23963 61CA           26                           seg es
23964 61CB           8A07                         mov al, [bx]
23965 61CD           EE                           out dx, al
23966 61CE           43                           inc bx
23967 61CF           FEC1                         inc cl
23968 61D1           80F9                   10    cmp cl, #0x10
23969 61D4           75           F1              jne set_palette_loop
23970 61D6           B0                     11    mov al, #0x11
23971 61D8           EE                           out dx, al
23972 61D9           26                           seg es
23973 61DA           8A07                         mov al, [bx]
23974 61DC           EE                           out dx, al
23975 61DD           B0                     20    mov al, #0x20
23976 61DF           EE                           out dx, al
23977 61E0           5A                           pop dx
23978 61E1           59                           pop cx
23979 61E2           5B                           pop bx
23980 61E3           58                           pop ax
23981 61E4           C3                           ret
23982                                           ! 2859 endasm
23983                                           !BCC_ENDASM
23984                                           ! 2860 #asm
23985                                           !BCC_ASM
23986                       00000008            _biosfn_write_teletype.flag	set	8
23987                       00000006            _biosfn_write_teletype.attr	set	6
23988                       00000004            _biosfn_write_teletype.page	set	4
23989                       00000002            _biosfn_write_teletype.car	set	2
23990                       000061E5            biosfn_toggle_intensity:
23991 61E5           50                           push ax
23992 61E6           53                           push bx
23993 61E7           52                           push dx
23994 61E8           BA                   03DA    mov dx, # 0x3da
23995 61EB           EC                           in al, dx
23996 61EC           BA                   03C0    mov dx, # 0x3c0
23997 61EF           B0                     10    mov al, #0x10
23998 61F1           EE                           out dx, al
23999 61F2           BA                   03C1    mov dx, # 0x3c1
24000 61F5           EC                           in al, dx
24001 61F6           24                     F7    and al, #0xf7
24002 61F8           80E3                   01    and bl, #0x01
24003 61FB           C0E3                   03    shl bl, 3
24004 61FE           08D8                         or al, bl
24005 6200           BA                   03C0    mov dx, # 0x3c0
24006 6203           EE                           out dx, al
24007 6204           B0                     20    mov al, #0x20
24008 6206           EE                           out dx, al
24009 6207           5A                           pop dx
24010 6208           5B                           pop bx
24011 6209           58                           pop ax
24012 620A           C3                           ret
24013                                           ! 2884 endasm
24014                                           !BCC_ENDASM
24015                                           ! 2885 #asm
24016                                           !BCC_ASM
24017                       00000008            _biosfn_write_teletype.flag	set	8
24018                       00000006            _biosfn_write_teletype.attr	set	6
24019                       00000004            _biosfn_write_teletype.page	set	4
24020                       00000002            _biosfn_write_teletype.car	set	2
24021                       0000620B            biosfn_get_single_palette_reg:
24022 620B           80FB                   14    cmp bl, #0x14
24023 620E           77           1E              ja no_actl_reg2
24024 6210           50                           push ax
24025 6211           52                           push dx
24026 6212           BA                   03DA    mov dx, # 0x3da
24027 6215           EC                           in al, dx
24028 6216           BA                   03C0    mov dx, # 0x3c0
24029 6219           88D8                         mov al, bl
24030 621B           EE                           out dx, al
24031 621C           BA                   03C1    mov dx, # 0x3c1
24032 621F           EC                           in al, dx
24033 6220           88C7                         mov bh, al
24034 6222           BA                   03DA    mov dx, # 0x3da
24035 6225           EC                           in al, dx
24036 6226           BA                   03C0    mov dx, # 0x3c0
24037 6229           B0                     20    mov al, #0x20
24038 622B           EE                           out dx, al
24039 622C           5A                           pop dx
24040 622D           58                           pop ax
24041                       0000622E            no_actl_reg2:
24042 622E           C3                           ret
24043                                           ! 2908 endasm
24044                                           !BCC_ENDASM
24045                                           ! 2909 #asm
24046                                           !BCC_ASM
24047                       00000008            _biosfn_write_teletype.flag	set	8
24048                       00000006            _biosfn_write_teletype.attr	set	6
24049                       00000004            _biosfn_write_teletype.page	set	4
24050                       00000002            _biosfn_write_teletype.car	set	2
24051                       0000622F            biosfn_read_overscan_border_color:
24052 622F           50                           push ax
24053 6230           53                           push bx
24054 6231           B3                     11    mov bl, #0x11
24055 6233           E8         FFD5              call biosfn_get_single_palette_reg
24056 6236           88F8                         mov al, bh
24057 6238           5B                           pop bx
24058 6239           88C7                         mov bh, al
24059 623B           58                           pop ax
24060 623C           C3                           ret
24061                                           ! 2920 endasm
24062                                           !BCC_ENDASM
24063                                           ! 2921 #asm
24064                                           !BCC_ASM
24065                       00000008            _biosfn_write_teletype.flag	set	8
24066                       00000006            _biosfn_write_teletype.attr	set	6
24067                       00000004            _biosfn_write_teletype.page	set	4
24068                       00000002            _biosfn_write_teletype.car	set	2
24069                       0000623D            biosfn_get_all_palette_reg:
24070 623D           50                           push ax
24071 623E           53                           push bx
24072 623F           51                           push cx
24073 6240           52                           push dx
24074 6241           89D3                         mov bx, dx
24075 6243           B1                     00    mov cl, #0x00
24076                       00006245            get_palette_loop:
24077 6245           BA                   03DA    mov dx, # 0x3da
24078 6248           EC                           in al, dx
24079 6249           BA                   03C0    mov dx, # 0x3c0
24080 624C           88C8                         mov al, cl
24081 624E           EE                           out dx, al
24082 624F           BA                   03C1    mov dx, # 0x3c1
24083 6252           EC                           in al, dx
24084 6253           26                           seg es
24085 6254           8807                         mov [bx], al
24086 6256           43                           inc bx
24087 6257           FEC1                         inc cl
24088 6259           80F9                   10    cmp cl, #0x10
24089 625C           75           E7              jne get_palette_loop
24090 625E           BA                   03DA    mov dx, # 0x3da
24091 6261           EC                           in al, dx
24092 6262           BA                   03C0    mov dx, # 0x3c0
24093 6265           B0                     11    mov al, #0x11
24094 6267           EE                           out dx, al
24095 6268           BA                   03C1    mov dx, # 0x3c1
24096 626B           EC                           in al, dx
24097 626C           26                           seg es
24098 626D           8807                         mov [bx], al
24099 626F           BA                   03DA    mov dx, # 0x3da
24100 6272           EC                           in al, dx
24101 6273           BA                   03C0    mov dx, # 0x3c0
24102 6276           B0                     20    mov al, #0x20
24103 6278           EE                           out dx, al
24104 6279           5A                           pop dx
24105 627A           59                           pop cx
24106 627B           5B                           pop bx
24107 627C           58                           pop ax
24108 627D           C3                           ret
24109                                           ! 2962 endasm
24110                                           !BCC_ENDASM
24111                                           ! 2963 #asm
24112                                           !BCC_ASM
24113                       00000008            _biosfn_write_teletype.flag	set	8
24114                       00000006            _biosfn_write_teletype.attr	set	6
24115                       00000004            _biosfn_write_teletype.page	set	4
24116                       00000002            _biosfn_write_teletype.car	set	2
24117                       0000627E            biosfn_set_single_dac_reg:
24118 627E           50                           push ax
24119 627F           52                           push dx
24120 6280           BA                   03C8    mov dx, # 0x3c8
24121 6283           88D8                         mov al, bl
24122 6285           EE                           out dx, al
24123 6286           BA                   03C9    mov dx, # 0x3c9
24124 6289           58                           pop ax
24125 628A           50                           push ax
24126 628B           88E0                         mov al, ah
24127 628D           EE                           out dx, al
24128 628E           88E8                         mov al, ch
24129 6290           EE                           out dx, al
24130 6291           88C8                         mov al, cl
24131 6293           EE                           out dx, al
24132 6294           5A                           pop dx
24133 6295           58                           pop ax
24134 6296           C3                           ret
24135                                           ! 2982 endasm
24136                                           !BCC_ENDASM
24137                                           ! 2983 #asm
24138                                           !BCC_ASM
24139                       00000008            _biosfn_write_teletype.flag	set	8
24140                       00000006            _biosfn_write_teletype.attr	set	6
24141                       00000004            _biosfn_write_teletype.page	set	4
24142                       00000002            _biosfn_write_teletype.car	set	2
24143                       00006297            biosfn_set_all_dac_reg:
24144 6297           50                           push ax
24145 6298           53                           push bx
24146 6299           51                           push cx
24147 629A           52                           push dx
24148 629B           BA                   03C8    mov dx, # 0x3c8
24149 629E           88D8                         mov al, bl
24150 62A0           EE                           out dx, al
24151 62A1           5A                           pop dx
24152 62A2           52                           push dx
24153 62A3           89D3                         mov bx, dx
24154 62A5           BA                   03C9    mov dx, # 0x3c9
24155                       000062A8            set_dac_loop:
24156 62A8           26                           seg es
24157 62A9           8A07                         mov al, [bx]
24158 62AB           EE                           out dx, al
24159 62AC           43                           inc bx
24160 62AD           26                           seg es
24161 62AE           8A07                         mov al, [bx]
24162 62B0           EE                           out dx, al
24163 62B1           43                           inc bx
24164 62B2           26                           seg es
24165 62B3           8A07                         mov al, [bx]
24166 62B5           EE                           out dx, al
24167 62B6           43                           inc bx
24168 62B7           49                           dec cx
24169 62B8           75           EE              jnz set_dac_loop
24170 62BA           5A                           pop dx
24171 62BB           59                           pop cx
24172 62BC           5B                           pop bx
24173 62BD           58                           pop ax
24174 62BE           C3                           ret
24175                                           ! 3016 endasm
24176                                           !BCC_ENDASM
24177                                           ! 3017 #asm
24178                                           !BCC_ASM
24179                       00000008            _biosfn_write_teletype.flag	set	8
24180                       00000006            _biosfn_write_teletype.attr	set	6
24181                       00000004            _biosfn_write_teletype.page	set	4
24182                       00000002            _biosfn_write_teletype.car	set	2
24183                       000062BF            biosfn_select_video_dac_color_page:
24184 62BF           50                           push ax
24185 62C0           53                           push bx
24186 62C1           52                           push dx
24187 62C2           BA                   03DA    mov dx, # 0x3da
24188 62C5           EC                           in al, dx
24189 62C6           BA                   03C0    mov dx, # 0x3c0
24190 62C9           B0                     10    mov al, #0x10
24191 62CB           EE                           out dx, al
24192 62CC           BA                   03C1    mov dx, # 0x3c1
24193 62CF           EC                           in al, dx
24194 62D0           80E3                   01    and bl, #0x01
24195 62D3           75           0D              jnz set_dac_page
24196 62D5           24                     7F    and al, #0x7f
24197 62D7           C0E7                   07    shl bh, 7
24198 62DA           08F8                         or al, bh
24199 62DC           BA                   03C0    mov dx, # 0x3c0
24200 62DF           EE                           out dx, al
24201 62E0           EB           19              jmp set_actl_normal
24202                       000062E2            set_dac_page:
24203 62E2           50                           push ax
24204 62E3           BA                   03DA    mov dx, # 0x3da
24205 62E6           EC                           in al, dx
24206 62E7           BA                   03C0    mov dx, # 0x3c0
24207 62EA           B0                     14    mov al, #0x14
24208 62EC           EE                           out dx, al
24209 62ED           58                           pop ax
24210 62EE           24                     80    and al, #0x80
24211 62F0           75           03              jnz set_dac_16_page
24212 62F2           C0E7                   02    shl bh, 2
24213                       000062F5            set_dac_16_page:
24214 62F5           80E7                   0F    and bh, #0x0f
24215 62F8           88F8                         mov al, bh
24216 62FA           EE                           out dx, al
24217                       000062FB            set_actl_normal:
24218 62FB           B0                     20    mov al, #0x20
24219 62FD           EE                           out dx, al
24220 62FE           5A                           pop dx
24221 62FF           5B                           pop bx
24222 6300           58                           pop ax
24223 6301           C3                           ret
24224                                           ! 3059 endasm
24225                                           !BCC_ENDASM
24226                                           ! 3060 #asm
24227                                           !BCC_ASM
24228                       00000008            _biosfn_write_teletype.flag	set	8
24229                       00000006            _biosfn_write_teletype.attr	set	6
24230                       00000004            _biosfn_write_teletype.page	set	4
24231                       00000002            _biosfn_write_teletype.car	set	2
24232                       00006302            biosfn_read_single_dac_reg:
24233 6302           50                           push ax
24234 6303           52                           push dx
24235 6304           BA                   03C7    mov dx, # 0x3c7
24236 6307           88D8                         mov al, bl
24237 6309           EE                           out dx, al
24238 630A           58                           pop ax
24239 630B           88C4                         mov ah, al
24240 630D           BA                   03C9    mov dx, # 0x3c9
24241 6310           EC                           in al, dx
24242 6311           86E0                         xchg al, ah
24243 6313           50                           push ax
24244 6314           EC                           in al, dx
24245 6315           88C5                         mov ch, al
24246 6317           EC                           in al, dx
24247 6318           88C1                         mov cl, al
24248 631A           5A                           pop dx
24249 631B           58                           pop ax
24250 631C           C3                           ret
24251                                           ! 3080 endasm
24252                                           !BCC_ENDASM
24253                                           ! 3081 #asm
24254                                           !BCC_ASM
24255                       00000008            _biosfn_write_teletype.flag	set	8
24256                       00000006            _biosfn_write_teletype.attr	set	6
24257                       00000004            _biosfn_write_teletype.page	set	4
24258                       00000002            _biosfn_write_teletype.car	set	2
24259                       0000631D            biosfn_read_all_dac_reg:
24260 631D           50                           push ax
24261 631E           53                           push bx
24262 631F           51                           push cx
24263 6320           52                           push dx
24264 6321           BA                   03C7    mov dx, # 0x3c7
24265 6324           88D8                         mov al, bl
24266 6326           EE                           out dx, al
24267 6327           5A                           pop dx
24268 6328           52                           push dx
24269 6329           89D3                         mov bx, dx
24270 632B           BA                   03C9    mov dx, # 0x3c9
24271                       0000632E            read_dac_loop:
24272 632E           EC                           in al, dx
24273 632F           26                           seg es
24274 6330           8807                         mov [bx], al
24275 6332           43                           inc bx
24276 6333           EC                           in al, dx
24277 6334           26                           seg es
24278 6335           8807                         mov [bx], al
24279 6337           43                           inc bx
24280 6338           EC                           in al, dx
24281 6339           26                           seg es
24282 633A           8807                         mov [bx], al
24283 633C           43                           inc bx
24284 633D           49                           dec cx
24285 633E           75           EE              jnz read_dac_loop
24286 6340           5A                           pop dx
24287 6341           59                           pop cx
24288 6342           5B                           pop bx
24289 6343           58                           pop ax
24290 6344           C3                           ret
24291                                           ! 3114 endasm
24292                                           !BCC_ENDASM
24293                                           ! 3115 #asm
24294                                           !BCC_ASM
24295                       00000008            _biosfn_write_teletype.flag	set	8
24296                       00000006            _biosfn_write_teletype.attr	set	6
24297                       00000004            _biosfn_write_teletype.page	set	4
24298                       00000002            _biosfn_write_teletype.car	set	2
24299                       00006345            biosfn_set_pel_mask:
24300 6345           50                           push ax
24301 6346           52                           push dx
24302 6347           BA                   03C6    mov dx, # 0x3c6
24303 634A           88D8                         mov al, bl
24304 634C           EE                           out dx, al
24305 634D           5A                           pop dx
24306 634E           58                           pop ax
24307 634F           C3                           ret
24308                                           ! 3125 endasm
24309                                           !BCC_ENDASM
24310                                           ! 3126 #asm
24311                                           !BCC_ASM
24312                       00000008            _biosfn_write_teletype.flag	set	8
24313                       00000006            _biosfn_write_teletype.attr	set	6
24314                       00000004            _biosfn_write_teletype.page	set	4
24315                       00000002            _biosfn_write_teletype.car	set	2
24316                       00006350            biosfn_read_pel_mask:
24317 6350           50                           push ax
24318 6351           52                           push dx
24319 6352           BA                   03C6    mov dx, # 0x3c6
24320 6355           EC                           in al, dx
24321 6356           88C3                         mov bl, al
24322 6358           5A                           pop dx
24323 6359           58                           pop ax
24324 635A           C3                           ret
24325                                           ! 3136 endasm
24326                                           !BCC_ENDASM
24327                                           ! 3137 #asm
24328                                           !BCC_ASM
24329                       00000008            _biosfn_write_teletype.flag	set	8
24330                       00000006            _biosfn_write_teletype.attr	set	6
24331                       00000004            _biosfn_write_teletype.page	set	4
24332                       00000002            _biosfn_write_teletype.car	set	2
24333                       0000635B            biosfn_read_video_dac_state:
24334 635B           50                           push ax
24335 635C           52                           push dx
24336 635D           BA                   03DA    mov dx, # 0x3da
24337 6360           EC                           in al, dx
24338 6361           BA                   03C0    mov dx, # 0x3c0
24339 6364           B0                     10    mov al, #0x10
24340 6366           EE                           out dx, al
24341 6367           BA                   03C1    mov dx, # 0x3c1
24342 636A           EC                           in al, dx
24343 636B           88C3                         mov bl, al
24344 636D           C0EB                   07    shr bl, 7
24345 6370           BA                   03DA    mov dx, # 0x3da
24346 6373           EC                           in al, dx
24347 6374           BA                   03C0    mov dx, # 0x3c0
24348 6377           B0                     14    mov al, #0x14
24349 6379           EE                           out dx, al
24350 637A           BA                   03C1    mov dx, # 0x3c1
24351 637D           EC                           in al, dx
24352 637E           88C7                         mov bh, al
24353 6380           80E7                   0F    and bh, #0x0f
24354 6383           F6C3                   01    test bl, #0x01
24355 6386           75           03              jnz get_dac_16_page
24356 6388           C0EF                   02    shr bh, 2
24357                       0000638B            get_dac_16_page:
24358 638B           BA                   03DA    mov dx, # 0x3da
24359 638E           EC                           in al, dx
24360 638F           BA                   03C0    mov dx, # 0x3c0
24361 6392           B0                     20    mov al, #0x20
24362 6394           EE                           out dx, al
24363 6395           5A                           pop dx
24364 6396           58                           pop ax
24365 6397           C3                           ret
24366                                           ! 3171 endasm
24367                                           !BCC_ENDASM
24368                                           ! 3172 static void biosfn_perform_gray_scale_summing (start,count)
24369                                           ! Register BX used in function biosfn_write_teletype
24370                                           ! 3173 Bit16u start;Bit16u count;
24371                       00006398            _biosfn_perform_gray_scale_summing:
24372                                           !BCC_EOS
24373                                           !BCC_EOS
24374                                           ! 3174 {Bit8u r,g,b;
24375                                           !BCC_EOS
24376                                           ! 3175  Bit16u i;
24377                                           !BCC_EOS
24378                                           ! 3176  Bit16u index;
24379                                           !BCC_EOS
24380                                           ! 3177  inb(0x3da);
24381 6398           55                         push	bp
24382 6399           89E5                       mov	bp,sp
24383 639B           83C4                   F8  add	sp,*-8
24384                                           ! Debug: list int = const $3DA (used reg = )
24385 639E           B8                   03DA  mov	ax,#$3DA
24386 63A1           50                         push	ax
24387                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24388 63A2           E8         1751            call	_inb
24389 63A5           44                         inc	sp
24390 63A6           44                         inc	sp
24391                                           !BCC_EOS
24392                                           ! 3178  outb(0x3c0,0x00);
24393                                           ! Debug: list int = const 0 (used reg = )
24394 63A7           31C0                       xor	ax,ax
24395 63A9           50                         push	ax
24396                                           ! Debug: list int = const $3C0 (used reg = )
24397 63AA           B8                   03C0  mov	ax,#$3C0
24398 63AD           50                         push	ax
24399                                           ! Debug: func () void = outb+0 (used reg = )
24400 63AE           E8         175B            call	_outb
24401 63B1           83C4                   04  add	sp,*4
24402                                           !BCC_EOS
24403                                           ! 3179  for( index = 0; index < count; index++ )
24404                                           ! Debug: eq int = const 0 to unsigned short index = [S+$A-$A] (used reg = )
24405 63B4           31C0                       xor	ax,ax
24406 63B6           8946         F8            mov	-8[bp],ax
24407                                           !BCC_EOS
24408                                           !BCC_EOS
24409                                           ! 3180   {
24410 63B9           E9         00BE            br 	.1F7
24411                       000063BC            .1F8:
24412                                           ! 3181    outb(0x3c7,start);
24413                                           ! Debug: list unsigned short start = [S+$A+2] (used reg = )
24414 63BC           FF76         04            push	4[bp]
24415                                           ! Debug: list int = const $3C7 (used reg = )
24416 63BF           B8                   03C7  mov	ax,#$3C7
24417 63C2           50                         push	ax
24418                                           ! Debug: func () void = outb+0 (used reg = )
24419 63C3           E8         1746            call	_outb
24420 63C6           83C4                   04  add	sp,*4
24421                                           !BCC_EOS
24422                                           ! 3182    r=inb( 0x3c9 );
24423                                           ! Debug: list int = const $3C9 (used reg = )
24424 63C9           B8                   03C9  mov	ax,#$3C9
24425 63CC           50                         push	ax
24426                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24427 63CD           E8         1726            call	_inb
24428 63D0           44                         inc	sp
24429 63D1           44                         inc	sp
24430                                           ! Debug: eq unsigned char = al+0 to unsigned char r = [S+$A-3] (used reg = )
24431 63D2           8846         FF            mov	-1[bp],al
24432                                           !BCC_EOS
24433                                           ! 3183    g=inb( 0x3c9 );
24434                                           ! Debug: list int = const $3C9 (used reg = )
24435 63D5           B8                   03C9  mov	ax,#$3C9
24436 63D8           50                         push	ax
24437                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24438 63D9           E8         171A            call	_inb
24439 63DC           44                         inc	sp
24440 63DD           44                         inc	sp
24441                                           ! Debug: eq unsigned char = al+0 to unsigned char g = [S+$A-4] (used reg = )
24442 63DE           8846         FE            mov	-2[bp],al
24443                                           !BCC_EOS
24444                                           ! 3184    b=inb( 0x3c9 );
24445                                           ! Debug: list int = const $3C9 (used reg = )
24446 63E1           B8                   03C9  mov	ax,#$3C9
24447 63E4           50                         push	ax
24448                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24449 63E5           E8         170E            call	_inb
24450 63E8           44                         inc	sp
24451 63E9           44                         inc	sp
24452                                           ! Debug: eq unsigned char = al+0 to unsigned char b = [S+$A-5] (used reg = )
24453 63EA           8846         FD            mov	-3[bp],al
24454                                           !BCC_EOS
24455                                           ! 3185    i = ( ( 77*r + 151*g + 28*b ) + 0x80 ) >> 8;
24456                                           ! Debug: mul unsigned char b = [S+$A-5] to int = const $1C (used reg = )
24457                                           ! Debug: expression subtree swapping
24458 63ED           8A46         FD            mov	al,-3[bp]
24459 63F0           30E4                       xor	ah,ah
24460 63F2           B9                   001C  mov	cx,*$1C
24461 63F5           F7E9                       imul	cx
24462 63F7           50                         push	ax
24463                                           ! Debug: mul unsigned char g = [S+$C-4] to int = const $97 (used reg = )
24464                                           ! Debug: expression subtree swapping
24465 63F8           8A46         FE            mov	al,-2[bp]
24466 63FB           30E4                       xor	ah,ah
24467 63FD           B9                   0097  mov	cx,#$97
24468 6400           F7E9                       imul	cx
24469 6402           50                         push	ax
24470                                           ! Debug: mul unsigned char r = [S+$E-3] to int = const $4D (used reg = )
24471                                           ! Debug: expression subtree swapping
24472 6403           8A46         FF            mov	al,-1[bp]
24473 6406           30E4                       xor	ah,ah
24474 6408           B9                   004D  mov	cx,*$4D
24475 640B           F7E9                       imul	cx
24476                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
24477 640D           0346         F4            add	ax,-$C[bp]
24478 6410           44                         inc	sp
24479 6411           44                         inc	sp
24480                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
24481 6412           0346         F6            add	ax,-$A[bp]
24482 6415           44                         inc	sp
24483 6416           44                         inc	sp
24484                                           ! Debug: add int = const $80 to unsigned int = ax+0 (used reg = )
24485                                           ! Debug: sr int = const 8 to unsigned int = ax+$80 (used reg = )
24486 6417           05                   0080  add	ax,#$80
24487 641A           88E0                       mov	al,ah
24488 641C           30E4                       xor	ah,ah
24489                                           ! Debug: eq unsigned int = ax+0 to unsigned short i = [S+$A-8] (used reg = )
24490 641E           8946         FA            mov	-6[bp],ax
24491                                           !BCC_EOS
24492                                           ! 3186    if(i>0x3f)i=0x3f;
24493                                           ! Debug: gt int = const $3F to unsigned short i = [S+$A-8] (used reg = )
24494 6421           8B46         FA            mov	ax,-6[bp]
24495 6424           3D                   003F  cmp	ax,*$3F
24496 6427           76           06            jbe 	.1F9
24497                       00006429            .1FA:
24498                                           ! Debug: eq int = const $3F to unsigned short i = [S+$A-8] (used reg = )
24499 6429           B8                   003F  mov	ax,*$3F
24500 642C           8946         FA            mov	-6[bp],ax
24501                                           !BCC_EOS
24502                                           ! 3187    outb(0x3c8,start);
24503                       0000642F            .1F9:
24504                                           ! Debug: list unsigned short start = [S+$A+2] (used reg = )
24505 642F           FF76         04            push	4[bp]
24506                                           ! Debug: list int = const $3C8 (used reg = )
24507 6432           B8                   03C8  mov	ax,#$3C8
24508 6435           50                         push	ax
24509                                           ! Debug: func () void = outb+0 (used reg = )
24510 6436           E8         16D3            call	_outb
24511 6439           83C4                   04  add	sp,*4
24512                                           !BCC_EOS
24513                                           ! 3188    outb( 0x3c9, i&0xff );
24514                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
24515 643C           8A46         FA            mov	al,-6[bp]
24516                                           ! Debug: list unsigned char = al+0 (used reg = )
24517 643F           30E4                       xor	ah,ah
24518 6441           50                         push	ax
24519                                           ! Debug: list int = const $3C9 (used reg = )
24520 6442           B8                   03C9  mov	ax,#$3C9
24521 6445           50                         push	ax
24522                                           ! Debug: func () void = outb+0 (used reg = )
24523 6446           E8         16C3            call	_outb
24524 6449           83C4                   04  add	sp,*4
24525                                           !BCC_EOS
24526                                           ! 3189    outb( 0x3c9, i&0xff );
24527                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
24528 644C           8A46         FA            mov	al,-6[bp]
24529                                           ! Debug: list unsigned char = al+0 (used reg = )
24530 644F           30E4                       xor	ah,ah
24531 6451           50                         push	ax
24532                                           ! Debug: list int = const $3C9 (used reg = )
24533 6452           B8                   03C9  mov	ax,#$3C9
24534 6455           50                         push	ax
24535                                           ! Debug: func () void = outb+0 (used reg = )
24536 6456           E8         16B3            call	_outb
24537 6459           83C4                   04  add	sp,*4
24538                                           !BCC_EOS
24539                                           ! 3190    outb( 0x3c9, i&0xff );
24540                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
24541 645C           8A46         FA            mov	al,-6[bp]
24542                                           ! Debug: list unsigned char = al+0 (used reg = )
24543 645F           30E4                       xor	ah,ah
24544 6461           50                         push	ax
24545                                           ! Debug: list int = const $3C9 (used reg = )
24546 6462           B8                   03C9  mov	ax,#$3C9
24547 6465           50                         push	ax
24548                                           ! Debug: func () void = outb+0 (used reg = )
24549 6466           E8         16A3            call	_outb
24550 6469           83C4                   04  add	sp,*4
24551                                           !BCC_EOS
24552                                           ! 3191    start++;
24553                                           ! Debug: postinc unsigned short start = [S+$A+2] (used reg = )
24554 646C           8B46         04            mov	ax,4[bp]
24555 646F           40                         inc	ax
24556 6470           8946         04            mov	4[bp],ax
24557                                           !BCC_EOS
24558                                           ! 3192   }
24559                                           ! 3193  inb(0x3da);
24560                       00006473            .1F6:
24561                                           ! Debug: postinc unsigned short index = [S+$A-$A] (used reg = )
24562 6473           8B46         F8            mov	ax,-8[bp]
24563 6476           40                         inc	ax
24564 6477           8946         F8            mov	-8[bp],ax
24565                       0000647A            .1F7:
24566                                           ! Debug: lt unsigned short count = [S+$A+4] to unsigned short index = [S+$A-$A] (used reg = )
24567 647A           8B46         F8            mov	ax,-8[bp]
24568 647D           3B46         06            cmp	ax,6[bp]
24569 6480         0F82         FF38            blo 	.1F8
24570                       00006484            .1FB:
24571                       00006484            .1F5:
24572                                           ! Debug: list int = const $3DA (used reg = )
24573 6484           B8                   03DA  mov	ax,#$3DA
24574 6487           50                         push	ax
24575                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24576 6488           E8         166B            call	_inb
24577 648B           44                         inc	sp
24578 648C           44                         inc	sp
24579                                           !BCC_EOS
24580                                           ! 3194  outb(0x3c0,0x20);
24581                                           ! Debug: list int = const $20 (used reg = )
24582 648D           B8                   0020  mov	ax,*$20
24583 6490           50                         push	ax
24584                                           ! Debug: list int = const $3C0 (used reg = )
24585 6491           B8                   03C0  mov	ax,#$3C0
24586 6494           50                         push	ax
24587                                           ! Debug: func () void = outb+0 (used reg = )
24588 6495           E8         1674            call	_outb
24589 6498           83C4                   04  add	sp,*4
24590                                           !BCC_EOS
24591                                           ! 3195 }
24592 649B           89EC                       mov	sp,bp
24593 649D           5D                         pop	bp
24594 649E           C3                         ret
24595                                           ! 3196 static void get_font_access()
24596                                           ! 3197 {
24597                       0000649F            _get_font_access:
24598                                           ! 3198 #asm
24599                                           !BCC_ASM
24600 649F           BA                   03C4   mov dx, # 0x3c4
24601 64A2           B8                   0100   mov ax, #0x0100
24602 64A5           EF                          out dx, ax
24603 64A6           B8                   0402   mov ax, #0x0402
24604 64A9           EF                          out dx, ax
24605 64AA           B8                   0704   mov ax, #0x0704
24606 64AD           EF                          out dx, ax
24607 64AE           B8                   0300   mov ax, #0x0300
24608 64B1           EF                          out dx, ax
24609 64B2           BA                   03CE   mov dx, # 0x3ce
24610 64B5           B8                   0204   mov ax, #0x0204
24611 64B8           EF                          out dx, ax
24612 64B9           B8                   0005   mov ax, #0x0005
24613 64BC           EF                          out dx, ax
24614 64BD           B8                   0406   mov ax, #0x0406
24615 64C0           EF                          out dx, ax
24616                                           ! 3215 endasm
24617                                           !BCC_ENDASM
24618                                           ! 3216 }
24619 64C1           C3                         ret
24620                                           ! 3217 static void release_font_access()
24621                                           ! 3218 {
24622                       000064C2            _release_font_access:
24623                                           ! 3219 #asm
24624                                           !BCC_ASM
24625 64C2           BA                   03C4   mov dx, # 0x3c4
24626 64C5           B8                   0100   mov ax, #0x0100
24627 64C8           EF                          out dx, ax
24628 64C9           B8                   0302   mov ax, #0x0302
24629 64CC           EF                          out dx, ax
24630 64CD           B8                   0304   mov ax, #0x0304
24631 64D0           EF                          out dx, ax
24632 64D1           B8                   0300   mov ax, #0x0300
24633 64D4           EF                          out dx, ax
24634 64D5           BA                   03CC   mov dx, # 0x3cc
24635 64D8           EC                          in al, dx
24636 64D9           24                     01   and al, #0x01
24637 64DB           C0E0                   02   shl al, 2
24638 64DE           0C                     0A   or al, #0x0a
24639 64E0           88C4                        mov ah, al
24640 64E2           B0                     06   mov al, #0x06
24641 64E4           BA                   03CE   mov dx, # 0x3ce
24642 64E7           EF                          out dx, ax
24643 64E8           B8                   0004   mov ax, #0x0004
24644 64EB           EF                          out dx, ax
24645 64EC           B8                   1005   mov ax, #0x1005
24646 64EF           EF                          out dx, ax
24647                                           ! 3242 endasm
24648                                           !BCC_ENDASM
24649                                           ! 3243 }
24650 64F0           C3                         ret
24651                                           ! 3244 #asm
24652                                           !BCC_ASM
24653                       000064F1            idiv_u:
24654 64F1           31D2                         xor dx,dx
24655 64F3           F7F3                         div bx
24656 64F5           C3                           ret
24657                                           ! 3249 endasm
24658                                           !BCC_ENDASM
24659                                           ! 3250 static void set_scan_lines(lines) Bit8u lines;
24660                       000064F6            _set_scan_lines:
24661                                           !BCC_EOS
24662                                           ! 3251 {
24663                                           ! 3252  Bit16u crtc_addr,cols,page,vde;
24664                                           !BCC_EOS
24665                                           ! 3253  Bit8u crtc_r9,ovl,rows;
24666                                           !BCC_EOS
24667                                           ! 3254  crtc_addr = read_word(0x40,0x63);
24668 64F6           55                         push	bp
24669 64F7           89E5                       mov	bp,sp
24670 64F9           83C4                   F4  add	sp,*-$C
24671                                           ! Debug: list int = const $63 (used reg = )
24672 64FC           B8                   0063  mov	ax,*$63
24673 64FF           50                         push	ax
24674                                           ! Debug: list int = const $40 (used reg = )
24675 6500           B8                   0040  mov	ax,*$40
24676 6503           50                         push	ax
24677                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
24678 6504           E8         15AC            call	_read_word
24679 6507           83C4                   04  add	sp,*4
24680                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$E-4] (used reg = )
24681 650A           8946         FE            mov	-2[bp],ax
24682                                           !BCC_EOS
24683                                           ! 3255  outb(crtc_addr, 0x09);
24684                                           ! Debug: list int = const 9 (used reg = )
24685 650D           B8                   0009  mov	ax,*9
24686 6510           50                         push	ax
24687                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
24688 6511           FF76         FE            push	-2[bp]
24689                                           ! Debug: func () void = outb+0 (used reg = )
24690 6514           E8         15F5            call	_outb
24691 6517           83C4                   04  add	sp,*4
24692                                           !BCC_EOS
24693                                           ! 3256  crtc_r9 = inb(crtc_addr+1);
24694                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
24695 651A           8B46         FE            mov	ax,-2[bp]
24696                                           ! Debug: list unsigned int = ax+1 (used reg = )
24697 651D           40                         inc	ax
24698 651E           50                         push	ax
24699                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24700 651F           E8         15D4            call	_inb
24701 6522           44                         inc	sp
24702 6523           44                         inc	sp
24703                                           ! Debug: eq unsigned char = al+0 to unsigned char crtc_r9 = [S+$E-$B] (used reg = )
24704 6524           8846         F7            mov	-9[bp],al
24705                                           !BCC_EOS
24706                                           ! 3257  crtc_r9 = (crtc_r9 & 0xe0) | (lines - 1);
24707                                           ! Debug: sub int = const 1 to unsigned char lines = [S+$E+2] (used reg = )
24708 6527           8A46         04            mov	al,4[bp]
24709 652A           30E4                       xor	ah,ah
24710 652C           48                         dec	ax
24711 652D           50                         push	ax
24712                                           ! Debug: and int = const $E0 to unsigned char crtc_r9 = [S+$10-$B] (used reg = )
24713 652E           8A46         F7            mov	al,-9[bp]
24714 6531           24                     E0  and	al,#$E0
24715                                           ! Debug: or unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
24716 6533           30E4                       xor	ah,ah
24717 6535           0B46         F2            or	ax,-$E[bp]
24718 6538           44                         inc	sp
24719 6539           44                         inc	sp
24720                                           ! Debug: eq unsigned int = ax+0 to unsigned char crtc_r9 = [S+$E-$B] (used reg = )
24721 653A           8846         F7            mov	-9[bp],al
24722                                           !BCC_EOS
24723                                           ! 3258  outb(crtc_addr+1, crtc_r9);
24724                                           ! Debug: list unsigned char crtc_r9 = [S+$E-$B] (used reg = )
24725 653D           8A46         F7            mov	al,-9[bp]
24726 6540           30E4                       xor	ah,ah
24727 6542           50                         push	ax
24728                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-4] (used reg = )
24729 6543           8B46         FE            mov	ax,-2[bp]
24730                                           ! Debug: list unsigned int = ax+1 (used reg = )
24731 6546           40                         inc	ax
24732 6547           50                         push	ax
24733                                           ! Debug: func () void = outb+0 (used reg = )
24734 6548           E8         15C1            call	_outb
24735 654B           83C4                   04  add	sp,*4
24736                                           !BCC_EOS
24737                                           ! 3259  if(lines==8)
24738                                           ! Debug: logeq int = const 8 to unsigned char lines = [S+$E+2] (used reg = )
24739 654E           8A46         04            mov	al,4[bp]
24740 6551           3C                     08  cmp	al,*8
24741 6553           75           10            jne 	.1FC
24742                       00006555            .1FD:
24743                                           ! 3260   {
24744                                           ! 3261    biosfn_set_cursor_shape(0x06,0x07);
24745                                           ! Debug: list int = const 7 (used reg = )
24746 6555           B8                   0007  mov	ax,*7
24747 6558           50                         push	ax
24748                                           ! Debug: list int = const 6 (used reg = )
24749 6559           B8                   0006  mov	ax,*6
24750 655C           50                         push	ax
24751                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
24752 655D           E8         DBE2            call	_biosfn_set_cursor_shape
24753 6560           83C4                   04  add	sp,*4
24754                                           !BCC_EOS
24755                                           ! 3262   }
24756                                           ! 3263  else
24757                                           ! 3264   {
24758 6563           EB           18            jmp .1FE
24759                       00006565            .1FC:
24760                                           ! 3265    biosfn_set_cursor_shape(lines-4,lines-3);
24761                                           ! Debug: sub int = const 3 to unsigned char lines = [S+$E+2] (used reg = )
24762 6565           8A46         04            mov	al,4[bp]
24763 6568           30E4                       xor	ah,ah
24764                                           ! Debug: list unsigned int = ax-3 (used reg = )
24765 656A           05                   FFFD  add	ax,*-3
24766 656D           50                         push	ax
24767                                           ! Debug: sub int = const 4 to unsigned char lines = [S+$10+2] (used reg = )
24768 656E           8A46         04            mov	al,4[bp]
24769 6571           30E4                       xor	ah,ah
24770                                           ! Debug: list unsigned int = ax-4 (used reg = )
24771 6573           05                   FFFC  add	ax,*-4
24772 6576           50                         push	ax
24773                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
24774 6577           E8         DBC8            call	_biosfn_set_cursor_shape
24775 657A           83C4                   04  add	sp,*4
24776                                           !BCC_EOS
24777                                           ! 3266   }
24778                                           ! 3267  write_word(0x40,0x85, lines);
24779                       0000657D            .1FE:
24780                                           ! Debug: list unsigned char lines = [S+$E+2] (used reg = )
24781 657D           8A46         04            mov	al,4[bp]
24782 6580           30E4                       xor	ah,ah
24783 6582           50                         push	ax
24784                                           ! Debug: list int = const $85 (used reg = )
24785 6583           B8                   0085  mov	ax,#$85
24786 6586           50                         push	ax
24787                                           ! Debug: list int = const $40 (used reg = )
24788 6587           B8                   0040  mov	ax,*$40
24789 658A           50                         push	ax
24790                                           ! Debug: func () void = write_word+0 (used reg = )
24791 658B           E8         1550            call	_write_word
24792 658E           83C4                   06  add	sp,*6
24793                                           !BCC_EOS
24794                                           ! 3268  outb(crtc_addr, 0x12);
24795                                           ! Debug: list int = const $12 (used reg = )
24796 6591           B8                   0012  mov	ax,*$12
24797 6594           50                         push	ax
24798                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
24799 6595           FF76         FE            push	-2[bp]
24800                                           ! Debug: func () void = outb+0 (used reg = )
24801 6598           E8         1571            call	_outb
24802 659B           83C4                   04  add	sp,*4
24803                                           !BCC_EOS
24804                                           ! 3269  vde = inb(crtc_addr+1);
24805                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
24806 659E           8B46         FE            mov	ax,-2[bp]
24807                                           ! Debug: list unsigned int = ax+1 (used reg = )
24808 65A1           40                         inc	ax
24809 65A2           50                         push	ax
24810                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24811 65A3           E8         1550            call	_inb
24812 65A6           44                         inc	sp
24813 65A7           44                         inc	sp
24814                                           ! Debug: eq unsigned char = al+0 to unsigned short vde = [S+$E-$A] (used reg = )
24815 65A8           30E4                       xor	ah,ah
24816 65AA           8946         F8            mov	-8[bp],ax
24817                                           !BCC_EOS
24818                                           ! 3270  outb(crtc_addr, 0x07);
24819                                           ! Debug: list int = const 7 (used reg = )
24820 65AD           B8                   0007  mov	ax,*7
24821 65B0           50                         push	ax
24822                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
24823 65B1           FF76         FE            push	-2[bp]
24824                                           ! Debug: func () void = outb+0 (used reg = )
24825 65B4           E8         1555            call	_outb
24826 65B7           83C4                   04  add	sp,*4
24827                                           !BCC_EOS
24828                                           ! 3271  ovl = inb(crtc_addr+1);
24829                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
24830 65BA           8B46         FE            mov	ax,-2[bp]
24831                                           ! Debug: list unsigned int = ax+1 (used reg = )
24832 65BD           40                         inc	ax
24833 65BE           50                         push	ax
24834                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24835 65BF           E8         1534            call	_inb
24836 65C2           44                         inc	sp
24837 65C3           44                         inc	sp
24838                                           ! Debug: eq unsigned char = al+0 to unsigned char ovl = [S+$E-$C] (used reg = )
24839 65C4           8846         F6            mov	-$A[bp],al
24840                                           !BCC_EOS
24841                                           ! 3272  vde += (((ovl & 0x02) << 7) + ((ovl & 0x40) << 3) + 1);
24842                                           ! Debug: and int = const $40 to unsigned char ovl = [S+$E-$C] (used reg = )
24843 65C7           8A46         F6            mov	al,-$A[bp]
24844 65CA           24                     40  and	al,*$40
24845                                           ! Debug: sl int = const 3 to unsigned char = al+0 (used reg = )
24846 65CC           30E4                       xor	ah,ah
24847 65CE           B1                     03  mov	cl,*3
24848 65D0           D3E0                       shl	ax,cl
24849 65D2           50                         push	ax
24850                                           ! Debug: and int = const 2 to unsigned char ovl = [S+$10-$C] (used reg = )
24851 65D3           8A46         F6            mov	al,-$A[bp]
24852 65D6           24                     02  and	al,*2
24853                                           ! Debug: sl int = const 7 to unsigned char = al+0 (used reg = )
24854 65D8           30E4                       xor	ah,ah
24855 65DA           B1                     07  mov	cl,*7
24856 65DC           D3E0                       shl	ax,cl
24857                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
24858 65DE           0346         F2            add	ax,-$E[bp]
24859 65E1           44                         inc	sp
24860 65E2           44                         inc	sp
24861                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
24862                                           ! Debug: addab unsigned int = ax+1 to unsigned short vde = [S+$E-$A] (used reg = )
24863 65E3           40                         inc	ax
24864 65E4           0346         F8            add	ax,-8[bp]
24865 65E7           8946         F8            mov	-8[bp],ax
24866                                           !BCC_EOS
24867                                           ! 3273  rows = vde / lines;
24868                                           ! Debug: div unsigned char lines = [S+$E+2] to unsigned short vde = [S+$E-$A] (used reg = )
24869 65EA           8A46         04            mov	al,4[bp]
24870 65ED           30E4                       xor	ah,ah
24871 65EF           89C3                       mov	bx,ax
24872 65F1           8B46         F8            mov	ax,-8[bp]
24873 65F4           E8         FEFA            call	idiv_u
24874                                           ! Debug: eq unsigned int = ax+0 to unsigned char rows = [S+$E-$D] (used reg = )
24875 65F7           8846         F5            mov	-$B[bp],al
24876                                           !BCC_EOS
24877                                           ! 3274  write_byte(0x40,0x84, rows-1);
24878                                           ! Debug: sub int = const 1 to unsigned char rows = [S+$E-$D] (used reg = )
24879 65FA           8A46         F5            mov	al,-$B[bp]
24880 65FD           30E4                       xor	ah,ah
24881                                           ! Debug: list unsigned int = ax-1 (used reg = )
24882 65FF           48                         dec	ax
24883 6600           50                         push	ax
24884                                           ! Debug: list int = const $84 (used reg = )
24885 6601           B8                   0084  mov	ax,#$84
24886 6604           50                         push	ax
24887                                           ! Debug: list int = const $40 (used reg = )
24888 6605           B8                   0040  mov	ax,*$40
24889 6608           50                         push	ax
24890                                           ! Debug: func () void = write_byte+0 (used reg = )
24891 6609           E8         14BA            call	_write_byte
24892 660C           83C4                   06  add	sp,*6
24893                                           !BCC_EOS
24894                                           ! 3275  cols = read_word(0x40,0x4A);
24895                                           ! Debug: list int = const $4A (used reg = )
24896 660F           B8                   004A  mov	ax,*$4A
24897 6612           50                         push	ax
24898                                           ! Debug: list int = const $40 (used reg = )
24899 6613           B8                   0040  mov	ax,*$40
24900 6616           50                         push	ax
24901                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
24902 6617           E8         1499            call	_read_word
24903 661A           83C4                   04  add	sp,*4
24904                                           ! Debug: eq unsigned short = ax+0 to unsigned short cols = [S+$E-6] (used reg = )
24905 661D           8946         FC            mov	-4[bp],ax
24906                                           !BCC_EOS
24907                                           ! 3276  write_word(0x40,0x4C, rows * cols * 2);
24908                                           ! Debug: mul unsigned short cols = [S+$E-6] to unsigned char rows = [S+$E-$D] (used reg = )
24909 6620           8A46         F5            mov	al,-$B[bp]
24910 6623           30E4                       xor	ah,ah
24911 6625           8B4E         FC            mov	cx,-4[bp]
24912 6628           F7E9                       imul	cx
24913                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
24914 662A           D1E0                       shl	ax,*1
24915                                           ! Debug: list unsigned int = ax+0 (used reg = )
24916 662C           50                         push	ax
24917                                           ! Debug: list int = const $4C (used reg = )
24918 662D           B8                   004C  mov	ax,*$4C
24919 6630           50                         push	ax
24920                                           ! Debug: list int = const $40 (used reg = )
24921 6631           B8                   0040  mov	ax,*$40
24922 6634           50                         push	ax
24923                                           ! Debug: func () void = write_word+0 (used reg = )
24924 6635           E8         14A6            call	_write_word
24925 6638           83C4                   06  add	sp,*6
24926                                           !BCC_EOS
24927                                           ! 3277 }
24928 663B           89EC                       mov	sp,bp
24929 663D           5D                         pop	bp
24930 663E           C3                         ret
24931                                           ! 3278 static void biosfn_load_text_user_pat (AL,ES,BP,CX,DX,BL,BH) Bit8u AL;Bit16u ES;Bit16u BP;Bit16u CX;Bit16u DX;Bit8u BL;Bit8u BH;
24932                                           ! Register BX used in function set_scan_lines
24933                       0000663F            _biosfn_load_text_user_pat:
24934                                           !BCC_EOS
24935                                           !BCC_EOS
24936                                           !BCC_EOS
24937                                           !BCC_EOS
24938                                           !BCC_EOS
24939                                           !BCC_EOS
24940                                           !BCC_EOS
24941                                           ! 3279 {
24942                                           ! 3280  Bit16u blockaddr,dest,i,src;
24943                                           !BCC_EOS
24944                                           ! 3281  get_font_access();
24945 663F           55                         push	bp
24946 6640           89E5                       mov	bp,sp
24947 6642           83C4                   F8  add	sp,*-8
24948                                           ! Debug: func () void = get_font_access+0 (used reg = )
24949 6645           E8         FE57            call	_get_font_access
24950                                           !BCC_EOS
24951                                           ! 3282  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
24952                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+$C] (used reg = )
24953 6648           8A46         0E            mov	al,$E[bp]
24954 664B           24                     04  and	al,*4
24955                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
24956 664D           30E4                       xor	ah,ah
24957 664F           88C4                       mov	ah,al
24958 6651           30C0                       xor	al,al
24959 6653           B1                     03  mov	cl,*3
24960 6655           D3E0                       shl	ax,cl
24961 6657           50                         push	ax
24962                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+$C] (used reg = )
24963 6658           8A46         0E            mov	al,$E[bp]
24964 665B           24                     03  and	al,*3
24965                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
24966 665D           30E4                       xor	ah,ah
24967 665F           88C4                       mov	ah,al
24968 6661           30C0                       xor	al,al
24969 6663           B1                     06  mov	cl,*6
24970 6665           D3E0                       shl	ax,cl
24971                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
24972 6667           0346         F6            add	ax,-$A[bp]
24973 666A           44                         inc	sp
24974 666B           44                         inc	sp
24975                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
24976 666C           8946         FE            mov	-2[bp],ax
24977                                           !BCC_EOS
24978                                           ! 3283  for(i=0;i<CX;i++)
24979                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
24980 666F           31C0                       xor	ax,ax
24981 6671           8946         FA            mov	-6[bp],ax
24982                                           !BCC_EOS
24983                                           !BCC_EOS
24984                                           ! 3284   {
24985 6674           EB           44            jmp .201
24986                       00006676            .202:
24987                                           ! 3285    src = BP + i * BH;
24988                                           ! Debug: mul unsigned char BH = [S+$A+$E] to unsigned short i = [S+$A-8] (used reg = )
24989 6676           8A46         10            mov	al,$10[bp]
24990 6679           30E4                       xor	ah,ah
24991 667B           89C3                       mov	bx,ax
24992 667D           8B46         FA            mov	ax,-6[bp]
24993 6680           89D9                       mov	cx,bx
24994 6682           F7E9                       imul	cx
24995                                           ! Debug: add unsigned int = ax+0 to unsigned short BP = [S+$A+6] (used reg = )
24996                                           ! Debug: expression subtree swapping
24997 6684           0346         08            add	ax,8[bp]
24998                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
24999 6687           8946         F8            mov	-8[bp],ax
25000                                           !BCC_EOS
25001                                           ! 3286    dest = blockaddr + (DX + i) * 32;
25002                                           ! Debug: add unsigned short i = [S+$A-8] to unsigned short DX = [S+$A+$A] (used reg = )
25003 668A           8B46         0C            mov	ax,$C[bp]
25004 668D           0346         FA            add	ax,-6[bp]
25005                                           ! Debug: mul int = const $20 to unsigned int = ax+0 (used reg = )
25006 6690           B1                     05  mov	cl,*5
25007 6692           D3E0                       shl	ax,cl
25008                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25009                                           ! Debug: expression subtree swapping
25010 6694           0346         FE            add	ax,-2[bp]
25011                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25012 6697           8946         FC            mov	-4[bp],ax
25013                                           !BCC_EOS
25014                                           ! 3287    memcpyb(0xA000, dest, ES, src, BH);
25015                                           ! Debug: list unsigned char BH = [S+$A+$E] (used reg = )
25016 669A           8A46         10            mov	al,$10[bp]
25017 669D           30E4                       xor	ah,ah
25018 669F           50                         push	ax
25019                                           ! Debug: list unsigned short src = [S+$C-$A] (used reg = )
25020 66A0           FF76         F8            push	-8[bp]
25021                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
25022 66A3           FF76         06            push	6[bp]
25023                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25024 66A6           FF76         FC            push	-4[bp]
25025                                           ! Debug: list unsigned int = const $A000 (used reg = )
25026 66A9           B8                   A000  mov	ax,#$A000
25027 66AC           50                         push	ax
25028                                           ! Debug: func () void = memcpyb+0 (used reg = )
25029 66AD           E8         1390            call	_memcpyb
25030 66B0           83C4                   0A  add	sp,*$A
25031                                           !BCC_EOS
25032                                           ! 3288   }
25033                                           ! 3289  release_font_access();
25034                       000066B3            .200:
25035                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25036 66B3           8B46         FA            mov	ax,-6[bp]
25037 66B6           40                         inc	ax
25038 66B7           8946         FA            mov	-6[bp],ax
25039                       000066BA            .201:
25040                                           ! Debug: lt unsigned short CX = [S+$A+8] to unsigned short i = [S+$A-8] (used reg = )
25041 66BA           8B46         FA            mov	ax,-6[bp]
25042 66BD           3B46         0A            cmp	ax,$A[bp]
25043 66C0           72           B4            jb 	.202
25044                       000066C2            .203:
25045                       000066C2            .1FF:
25046                                           ! Debug: func () void = release_font_access+0 (used reg = )
25047 66C2           E8         FDFD            call	_release_font_access
25048                                           !BCC_EOS
25049                                           ! 3290  if(AL>=0x10)
25050                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25051 66C5           8A46         04            mov	al,4[bp]
25052 66C8           3C                     10  cmp	al,*$10
25053 66CA           72           0B            jb  	.204
25054                       000066CC            .205:
25055                                           ! 3291   {
25056                                           ! 3292    set_scan_lines(BH);
25057                                           ! Debug: list unsigned char BH = [S+$A+$E] (used reg = )
25058 66CC           8A46         10            mov	al,$10[bp]
25059 66CF           30E4                       xor	ah,ah
25060 66D1           50                         push	ax
25061                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25062 66D2           E8         FE21            call	_set_scan_lines
25063 66D5           44                         inc	sp
25064 66D6           44                         inc	sp
25065                                           !BCC_EOS
25066                                           ! 3293   }
25067                                           ! 3294 }
25068                       000066D7            .204:
25069 66D7           89EC                       mov	sp,bp
25070 66D9           5D                         pop	bp
25071 66DA           C3                         ret
25072                                           ! 3295 static void biosfn_load_text_8_14_pat (AL,BL) Bit8u AL;Bit8u BL;
25073                                           ! Register BX used in function biosfn_load_text_user_pat
25074                       000066DB            _biosfn_load_text_8_14_pat:
25075                                           !BCC_EOS
25076                                           !BCC_EOS
25077                                           ! 3296 {
25078                                           ! 3297  Bit16u blockaddr,dest,i,src;
25079                                           !BCC_EOS
25080                                           ! 3298  get_font_access();
25081 66DB           55                         push	bp
25082 66DC           89E5                       mov	bp,sp
25083 66DE           83C4                   F8  add	sp,*-8
25084                                           ! Debug: func () void = get_font_access+0 (used reg = )
25085 66E1           E8         FDBB            call	_get_font_access
25086                                           !BCC_EOS
25087                                           ! 3299  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25088                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
25089 66E4           8A46         06            mov	al,6[bp]
25090 66E7           24                     04  and	al,*4
25091                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25092 66E9           30E4                       xor	ah,ah
25093 66EB           88C4                       mov	ah,al
25094 66ED           30C0                       xor	al,al
25095 66EF           B1                     03  mov	cl,*3
25096 66F1           D3E0                       shl	ax,cl
25097 66F3           50                         push	ax
25098                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
25099 66F4           8A46         06            mov	al,6[bp]
25100 66F7           24                     03  and	al,*3
25101                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25102 66F9           30E4                       xor	ah,ah
25103 66FB           88C4                       mov	ah,al
25104 66FD           30C0                       xor	al,al
25105 66FF           B1                     06  mov	cl,*6
25106 6701           D3E0                       shl	ax,cl
25107                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25108 6703           0346         F6            add	ax,-$A[bp]
25109 6706           44                         inc	sp
25110 6707           44                         inc	sp
25111                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25112 6708           8946         FE            mov	-2[bp],ax
25113                                           !BCC_EOS
25114                                           ! 3300  for(i=0;i<0x100;i++)
25115                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25116 670B           31C0                       xor	ax,ax
25117 670D           8946         FA            mov	-6[bp],ax
25118                                           !BCC_EOS
25119                                           !BCC_EOS
25120                                           ! 3301   {
25121 6710           EB           41            jmp .208
25122                       00006712            .209:
25123                                           ! 3302    src = i * 14;
25124                                           ! Debug: mul int = const $E to unsigned short i = [S+$A-8] (used reg = )
25125 6712           8B46         FA            mov	ax,-6[bp]
25126 6715           89C2                       mov	dx,ax
25127 6717           B1                     03  mov	cl,*3
25128 6719           D3E0                       shl	ax,cl
25129 671B           29D0                       sub	ax,dx
25130 671D           D1E0                       shl	ax,*1
25131                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25132 671F           8946         F8            mov	-8[bp],ax
25133                                           !BCC_EOS
25134                                           ! 3303    dest = blockaddr + i * 32;
25135                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
25136 6722           8B46         FA            mov	ax,-6[bp]
25137 6725           B1                     05  mov	cl,*5
25138 6727           D3E0                       shl	ax,cl
25139                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25140                                           ! Debug: expression subtree swapping
25141 6729           0346         FE            add	ax,-2[bp]
25142                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25143 672C           8946         FC            mov	-4[bp],ax
25144                                           !BCC_EOS
25145                                           ! 3304    memcpyb(0xA000, dest, 0xC000, vgafont14+src, 14);
25146                                           ! Debug: list int = const $E (used reg = )
25147 672F           B8                   000E  mov	ax,*$E
25148 6732           50                         push	ax
25149                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$E00] unsigned char = vgafont14+0 (used reg = )
25150 6733           8B5E         F8            mov	bx,-8[bp]
25151                                           ! Debug: cast * unsigned char = const 0 to [$E00] unsigned char = bx+_vgafont14+0 (used reg = )
25152                                           ! Debug: list * unsigned char = bx+_vgafont14+0 (used reg = )
25153 6736           81C3                 173E  add	bx,#_vgafont14
25154 673A           53                         push	bx
25155                                           ! Debug: list unsigned int = const $C000 (used reg = )
25156 673B           B8                   C000  mov	ax,#$C000
25157 673E           50                         push	ax
25158                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25159 673F           FF76         FC            push	-4[bp]
25160                                           ! Debug: list unsigned int = const $A000 (used reg = )
25161 6742           B8                   A000  mov	ax,#$A000
25162 6745           50                         push	ax
25163                                           ! Debug: func () void = memcpyb+0 (used reg = )
25164 6746           E8         12F7            call	_memcpyb
25165 6749           83C4                   0A  add	sp,*$A
25166                                           !BCC_EOS
25167                                           ! 3305   }
25168                                           ! 3306  release_font_access();
25169                       0000674C            .207:
25170                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25171 674C           8B46         FA            mov	ax,-6[bp]
25172 674F           40                         inc	ax
25173 6750           8946         FA            mov	-6[bp],ax
25174                       00006753            .208:
25175                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
25176 6753           8B46         FA            mov	ax,-6[bp]
25177 6756           3D                   0100  cmp	ax,#$100
25178 6759           72           B7            jb 	.209
25179                       0000675B            .20A:
25180                       0000675B            .206:
25181                                           ! Debug: func () void = release_font_access+0 (used reg = )
25182 675B           E8         FD64            call	_release_font_access
25183                                           !BCC_EOS
25184                                           ! 3307  if(AL>=0x10)
25185                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25186 675E           8A46         04            mov	al,4[bp]
25187 6761           3C                     10  cmp	al,*$10
25188 6763           72           09            jb  	.20B
25189                       00006765            .20C:
25190                                           ! 3308   {
25191                                           ! 3309    set_scan_lines(14);
25192                                           ! Debug: list int = const $E (used reg = )
25193 6765           B8                   000E  mov	ax,*$E
25194 6768           50                         push	ax
25195                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25196 6769           E8         FD8A            call	_set_scan_lines
25197 676C           44                         inc	sp
25198 676D           44                         inc	sp
25199                                           !BCC_EOS
25200                                           ! 3310   }
25201                                           ! 3311 }
25202                       0000676E            .20B:
25203 676E           89EC                       mov	sp,bp
25204 6770           5D                         pop	bp
25205 6771           C3                         ret
25206                                           ! 3312 static void biosfn_load_text_8_8_pat (AL,BL) Bit8u AL;Bit
25207                                           ! Register BX used in function biosfn_load_text_8_14_pat
25208                       00006772            _biosfn_load_text_8_8_pat:
25209                                           !BCC_EOS
25210                                           ! 3312 8u BL;
25211                                           !BCC_EOS
25212                                           ! 3313 {
25213                                           ! 3314  Bit16u blockaddr,dest,i,src;
25214                                           !BCC_EOS
25215                                           ! 3315  get_font_access();
25216 6772           55                         push	bp
25217 6773           89E5                       mov	bp,sp
25218 6775           83C4                   F8  add	sp,*-8
25219                                           ! Debug: func () void = get_font_access+0 (used reg = )
25220 6778           E8         FD24            call	_get_font_access
25221                                           !BCC_EOS
25222                                           ! 3316  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25223                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
25224 677B           8A46         06            mov	al,6[bp]
25225 677E           24                     04  and	al,*4
25226                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25227 6780           30E4                       xor	ah,ah
25228 6782           88C4                       mov	ah,al
25229 6784           30C0                       xor	al,al
25230 6786           B1                     03  mov	cl,*3
25231 6788           D3E0                       shl	ax,cl
25232 678A           50                         push	ax
25233                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
25234 678B           8A46         06            mov	al,6[bp]
25235 678E           24                     03  and	al,*3
25236                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25237 6790           30E4                       xor	ah,ah
25238 6792           88C4                       mov	ah,al
25239 6794           30C0                       xor	al,al
25240 6796           B1                     06  mov	cl,*6
25241 6798           D3E0                       shl	ax,cl
25242                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25243 679A           0346         F6            add	ax,-$A[bp]
25244 679D           44                         inc	sp
25245 679E           44                         inc	sp
25246                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25247 679F           8946         FE            mov	-2[bp],ax
25248                                           !BCC_EOS
25249                                           ! 3317  for(i=0;i<0x100;i++)
25250                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25251 67A2           31C0                       xor	ax,ax
25252 67A4           8946         FA            mov	-6[bp],ax
25253                                           !BCC_EOS
25254                                           !BCC_EOS
25255                                           ! 3318   {
25256 67A7           E9         003B            br 	.20F
25257                       000067AA            .210:
25258                                           ! 3319    src = i * 8;
25259                                           ! Debug: mul int = const 8 to unsigned short i = [S+$A-8] (used reg = )
25260 67AA           8B46         FA            mov	ax,-6[bp]
25261 67AD           B1                     03  mov	cl,*3
25262 67AF           D3E0                       shl	ax,cl
25263                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25264 67B1           8946         F8            mov	-8[bp],ax
25265                                           !BCC_EOS
25266                                           ! 3320    dest = blockaddr + i * 32;
25267                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
25268 67B4           8B46         FA            mov	ax,-6[bp]
25269 67B7           B1                     05  mov	cl,*5
25270 67B9           D3E0                       shl	ax,cl
25271                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25272                                           ! Debug: expression subtree swapping
25273 67BB           0346         FE            add	ax,-2[bp]
25274                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25275 67BE           8946         FC            mov	-4[bp],ax
25276                                           !BCC_EOS
25277                                           ! 3321    memcpyb(0xA000, dest, 0xC000, vgafont8+src, 8);
25278                                           ! Debug: list int = const 8 (used reg = )
25279 67C1           B8                   0008  mov	ax,*8
25280 67C4           50                         push	ax
25281                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$800] unsigned char = vgafont8+0 (used reg = )
25282 67C5           8B5E         F8            mov	bx,-8[bp]
25283                                           ! Debug: cast * unsigned char = const 0 to [$800] unsigned char = bx+_vgafont8+0 (used reg = )
25284                                           ! Debug: list * unsigned char = bx+_vgafont8+0 (used reg = )
25285 67C8           81C3                 0F3E  add	bx,#_vgafont8
25286 67CC           53                         push	bx
25287                                           ! Debug: list unsigned int = const $C000 (used reg = )
25288 67CD           B8                   C000  mov	ax,#$C000
25289 67D0           50                         push	ax
25290                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25291 67D1           FF76         FC            push	-4[bp]
25292                                           ! Debug: list unsigned int = const $A000 (used reg = )
25293 67D4           B8                   A000  mov	ax,#$A000
25294 67D7           50                         push	ax
25295                                           ! Debug: func () void = memcpyb+0 (used reg = )
25296 67D8           E8         1265            call	_memcpyb
25297 67DB           83C4                   0A  add	sp,*$A
25298                                           !BCC_EOS
25299                                           ! 3322   }
25300                                           ! 3323  release_font_access();
25301                       000067DE            .20E:
25302                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25303 67DE           8B46         FA            mov	ax,-6[bp]
25304 67E1           40                         inc	ax
25305 67E2           8946         FA            mov	-6[bp],ax
25306                       000067E5            .20F:
25307                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
25308 67E5           8B46         FA            mov	ax,-6[bp]
25309 67E8           3D                   0100  cmp	ax,#$100
25310 67EB           72           BD            jb 	.210
25311                       000067ED            .211:
25312                       000067ED            .20D:
25313                                           ! Debug: func () void = release_font_access+0 (used reg = )
25314 67ED           E8         FCD2            call	_release_font_access
25315                                           !BCC_EOS
25316                                           ! 3324  if(AL>=0x10)
25317                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25318 67F0           8A46         04            mov	al,4[bp]
25319 67F3           3C                     10  cmp	al,*$10
25320 67F5           72           09            jb  	.212
25321                       000067F7            .213:
25322                                           ! 3325   {
25323                                           ! 3326    set_scan_lines(8);
25324                                           ! Debug: list int = const 8 (used reg = )
25325 67F7           B8                   0008  mov	ax,*8
25326 67FA           50                         push	ax
25327                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25328 67FB           E8         FCF8            call	_set_scan_lines
25329 67FE           44                         inc	sp
25330 67FF           44                         inc	sp
25331                                           !BCC_EOS
25332                                           ! 3327   }
25333                                           ! 3328 }
25334                       00006800            .212:
25335 6800           89EC                       mov	sp,bp
25336 6802           5D                         pop	bp
25337 6803           C3                         ret
25338                                           ! 3329 #asm
25339                                           !BCC_ASM
25340                       00000002            _biosfn_load_text_8_8_pat.AL	set	2
25341                       00000004            _biosfn_load_text_8_8_pat.BL	set	4
25342                       00006804            biosfn_set_text_block_specifier:
25343 6804           50                           push ax
25344 6805           52                           push dx
25345 6806           BA                   03C4    mov dx, # 0x3c4
25346 6809           88DC                         mov ah, bl
25347 680B           B0                     03    mov al, #0x03
25348 680D           EF                           out dx, ax
25349 680E           5A                           pop dx
25350 680F           58                           pop ax
25351 6810           C3                           ret
25352                                           ! 3340 endasm
25353                                           !BCC_ENDASM
25354                                           ! 3341 static void biosfn_load_text_8_16_pat (AL,BL) Bit8u AL;Bit8u BL;
25355                                           ! Register BX used in function biosfn_load_text_8_8_pat
25356                       00006811            _biosfn_load_text_8_16_pat:
25357                                           !BCC_EOS
25358                                           !BCC_EOS
25359                                           ! 3342 {
25360                                           ! 3343  Bit16u blockaddr,dest,i,src;
25361                                           !BCC_EOS
25362                                           ! 3344  get_font_access();
25363 6811           55                         push	bp
25364 6812           89E5                       mov	bp,sp
25365 6814           83C4                   F8  add	sp,*-8
25366                                           ! Debug: func () void = get_font_access+0 (used reg = )
25367 6817           E8         FC85            call	_get_font_access
25368                                           !BCC_EOS
25369                                           ! 3345  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25370                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
25371 681A           8A46         06            mov	al,6[bp]
25372 681D           24                     04  and	al,*4
25373                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25374 681F           30E4                       xor	ah,ah
25375 6821           88C4                       mov	ah,al
25376 6823           30C0                       xor	al,al
25377 6825           B1                     03  mov	cl,*3
25378 6827           D3E0                       shl	ax,cl
25379 6829           50                         push	ax
25380                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
25381 682A           8A46         06            mov	al,6[bp]
25382 682D           24                     03  and	al,*3
25383                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25384 682F           30E4                       xor	ah,ah
25385 6831           88C4                       mov	ah,al
25386 6833           30C0                       xor	al,al
25387 6835           B1                     06  mov	cl,*6
25388 6837           D3E0                       shl	ax,cl
25389                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25390 6839           0346         F6            add	ax,-$A[bp]
25391 683C           44                         inc	sp
25392 683D           44                         inc	sp
25393                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25394 683E           8946         FE            mov	-2[bp],ax
25395                                           !BCC_EOS
25396                                           ! 3346  for(i=0;i<0x100;i++)
25397                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25398 6841           31C0                       xor	ax,ax
25399 6843           8946         FA            mov	-6[bp],ax
25400                                           !BCC_EOS
25401                                           !BCC_EOS
25402                                           ! 3347   {
25403 6846           EB           3B            jmp .216
25404                       00006848            .217:
25405                                           ! 3348    src = i * 16;
25406                                           ! Debug: mul int = const $10 to unsigned short i = [S+$A-8] (used reg = )
25407 6848           8B46         FA            mov	ax,-6[bp]
25408 684B           B1                     04  mov	cl,*4
25409 684D           D3E0                       shl	ax,cl
25410                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25411 684F           8946         F8            mov	-8[bp],ax
25412                                           !BCC_EOS
25413                                           ! 3349    dest = blockaddr + i * 32;
25414                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
25415 6852           8B46         FA            mov	ax,-6[bp]
25416 6855           B1                     05  mov	cl,*5
25417 6857           D3E0                       shl	ax,cl
25418                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25419                                           ! Debug: expression subtree swapping
25420 6859           0346         FE            add	ax,-2[bp]
25421                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25422 685C           8946         FC            mov	-4[bp],ax
25423                                           !BCC_EOS
25424                                           ! 3350    memcpyb(0xA000, dest, 0xC000, vgafont16+src, 16);
25425                                           ! Debug: list int = const $10 (used reg = )
25426 685F           B8                   0010  mov	ax,*$10
25427 6862           50                         push	ax
25428                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$1000] unsigned char = vgafont16+0 (used reg = )
25429 6863           8B5E         F8            mov	bx,-8[bp]
25430                                           ! Debug: cast * unsigned char = const 0 to [$1000] unsigned char = bx+_vgafont16+0 (used reg = )
25431                                           ! Debug: list * unsigned char = bx+_vgafont16+0 (used reg = )
25432 6866           81C3                 253E  add	bx,#_vgafont16
25433 686A           53                         push	bx
25434                                           ! Debug: list unsigned int = const $C000 (used reg = )
25435 686B           B8                   C000  mov	ax,#$C000
25436 686E           50                         push	ax
25437                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25438 686F           FF76         FC            push	-4[bp]
25439                                           ! Debug: list unsigned int = const $A000 (used reg = )
25440 6872           B8                   A000  mov	ax,#$A000
25441 6875           50                         push	ax
25442                                           ! Debug: func () void = memcpyb+0 (used reg = )
25443 6876           E8         11C7            call	_memcpyb
25444 6879           83C4                   0A  add	sp,*$A
25445                                           !BCC_EOS
25446                                           ! 3351   }
25447                                           ! 3352  release_font_access();
25448                       0000687C            .215:
25449                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25450 687C           8B46         FA            mov	ax,-6[bp]
25451 687F           40                         inc	ax
25452 6880           8946         FA            mov	-6[bp],ax
25453                       00006883            .216:
25454                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
25455 6883           8B46         FA            mov	ax,-6[bp]
25456 6886           3D                   0100  cmp	ax,#$100
25457 6889           72           BD            jb 	.217
25458                       0000688B            .218:
25459                       0000688B            .214:
25460                                           ! Debug: func () void = release_font_access+0 (used reg = )
25461 688B           E8         FC34            call	_release_font_access
25462                                           !BCC_EOS
25463                                           ! 3353  if(AL>=0x10)
25464                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25465 688E           8A46         04            mov	al,4[bp]
25466 6891           3C                     10  cmp	al,*$10
25467 6893           72           09            jb  	.219
25468                       00006895            .21A:
25469                                           ! 3354   {
25470                                           ! 3355    set_scan_lines(16);
25471                                           ! Debug: list int = const $10 (used reg = )
25472 6895           B8                   0010  mov	ax,*$10
25473 6898           50                         push	ax
25474                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25475 6899           E8         FC5A            call	_set_scan_lines
25476 689C           44                         inc	sp
25477 689D           44                         inc	sp
25478                                           !BCC_EOS
25479                                           ! 3356   }
25480                                           ! 3357 }
25481                       0000689E            .219:
25482 689E           89EC                       mov	sp,bp
25483 68A0           5D                         pop	bp
25484 68A1           C3                         ret
25485                                           ! 3358 static void biosfn_load_gfx_8_8_chars (ES,BP) Bit16u ES;Bit16u BP;
25486                                           ! Register BX used in function biosfn_load_text_8_16_pat
25487                       000068A2            _biosfn_load_gfx_8_8_chars:
25488                                           !BCC_EOS
25489                                           !BCC_EOS
25490                                           ! 3359 {
25491                                           ! 3360 }
25492 68A2           C3                         ret
25493                                           ! 3361 static void biosfn_load_gfx_user_chars (ES,BP,CX,BL,DL) Bit16u ES;Bit16u BP;Bit16u CX;Bit8u BL;Bit8u DL;
25494                       000068A3            _biosfn_load_gfx_user_chars:
25495                                           !BCC_EOS
25496                                           !BCC_EOS
25497                                           !BCC_EOS
25498                                           !BCC_EOS
25499                                           !BCC_EOS
25500                                           ! 3362 {
25501                                           ! 3363 }
25502 68A3           C3                         ret
25503                                           ! 3364 static void biosfn_load_gfx_8_14_chars (BL) Bit8u BL;
25504                       000068A4            _biosfn_load_gfx_8_14_chars:
25505                                           !BCC_EOS
25506                                           ! 3365 {
25507                                           ! 3366 }
25508 68A4           C3                         ret
25509                                           ! 3367 static void biosfn_load_gfx_8_8_dd_chars (BL) Bit8u BL;
25510                       000068A5            _biosfn_load_gfx_8_8_dd_chars:
25511                                           !BCC_EOS
25512                                           ! 3368 {
25513                                           ! 3369 }
25514 68A5           C3                         ret
25515                                           ! 3370 static void biosfn_load_gfx_8_16_chars (BL) Bit8u BL;
25516                       000068A6            _biosfn_load_gfx_8_16_chars:
25517                                           !BCC_EOS
25518                                           ! 3371 {
25519                                           ! 3372 }
25520 68A6           C3                         ret
25521                                           ! 3373 static void biosfn_get_font_info (BH,ES,BP,CX,DX)
25522                                           ! 3374 Bit8u BH;Bit16u *ES;Bit16u *BP;Bit16u *CX;Bit16u *DX;
25523                       000068A7            _biosfn_get_font_info:
25524                                           !BCC_EOS
25525                                           !BCC_EOS
25526                                           !BCC_EOS
25527                                           !BCC_EOS
25528                                           !BCC_EOS
25529                                           ! 3375 {Bit16u ss=get_SS();
25530 68A7           55                         push	bp
25531 68A8           89E5                       mov	bp,sp
25532 68AA           4C                         dec	sp
25533 68AB           4C                         dec	sp
25534                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
25535 68AC           E8         127D            call	_get_SS
25536                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
25537 68AF           8946         FE            mov	-2[bp],ax
25538                                           !BCC_EOS
25539                                           ! 3376  switch(BH)
25540 68B2           8A46         04            mov	al,4[bp]
25541                                           ! 3377   {case 0x00:
25542 68B5           E9         0143            br 	.21D
25543                                           ! 3378     write_word(ss,ES,read_word(0x00,0x1f*4));
25544                       000068B8            .21E:
25545                                           ! Debug: list int = const $7C (used reg = )
25546 68B8           B8                   007C  mov	ax,*$7C
25547 68BB           50                         push	ax
25548                                           ! Debug: list int = const 0 (used reg = )
25549 68BC           31C0                       xor	ax,ax
25550 68BE           50                         push	ax
25551                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
25552 68BF           E8         11F1            call	_read_word
25553 68C2           83C4                   04  add	sp,*4
25554                                           ! Debug: list unsigned short = ax+0 (used reg = )
25555 68C5           50                         push	ax
25556                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
25557 68C6           FF76         06            push	6[bp]
25558                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25559 68C9           FF76         FE            push	-2[bp]
25560                                           ! Debug: func () void = write_word+0 (used reg = )
25561 68CC           E8         120F            call	_write_word
25562 68CF           83C4                   06  add	sp,*6
25563                                           !BCC_EOS
25564                                           ! 3379     write_word(ss,BP,read_word(0x00,(0x1f*4)+2));
25565                                           ! Debug: list int = const $7E (used reg = )
25566 68D2           B8                   007E  mov	ax,*$7E
25567 68D5           50                         push	ax
25568                                           ! Debug: list int = const 0 (used reg = )
25569 68D6           31C0                       xor	ax,ax
25570 68D8           50                         push	ax
25571                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
25572 68D9           E8         11D7            call	_read_word
25573 68DC           83C4                   04  add	sp,*4
25574                                           ! Debug: list unsigned short = ax+0 (used reg = )
25575 68DF           50                         push	ax
25576                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
25577 68E0           FF76         08            push	8[bp]
25578                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25579 68E3           FF76         FE            push	-2[bp]
25580                                           ! Debug: func () void = write_word+0 (used reg = )
25581 68E6           E8         11F5            call	_write_word
25582 68E9           83C4                   06  add	sp,*6
25583                                           !BCC_EOS
25584                                           ! 3380     break;
25585 68EC           E9         0131            br 	.21B
25586                                           !BCC_EOS
25587                                           ! 3381    case 0x01:
25588                                           ! 3382     write_word(ss,ES,read_word(0x00,0x43*4));
25589                       000068EF            .21F:
25590                                           ! Debug: list int = const $10C (used reg = )
25591 68EF           B8                   010C  mov	ax,#$10C
25592 68F2           50                         push	ax
25593                                           ! Debug: list int = const 0 (used reg = )
25594 68F3           31C0                       xor	ax,ax
25595 68F5           50                         push	ax
25596                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
25597 68F6           E8         11BA            call	_read_word
25598 68F9           83C4                   04  add	sp,*4
25599                                           ! Debug: list unsigned short = ax+0 (used reg = )
25600 68FC           50                         push	ax
25601                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
25602 68FD           FF76         06            push	6[bp]
25603                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25604 6900           FF76         FE            push	-2[bp]
25605                                           ! Debug: func () void = write_word+0 (used reg = )
25606 6903           E8         11D8            call	_write_word
25607 6906           83C4                   06  add	sp,*6
25608                                           !BCC_EOS
25609                                           ! 3383     write_word(ss,BP,read_word(0x00,(0x43*4)+2));
25610                                           ! Debug: list int = const $10E (used reg = )
25611 6909           B8                   010E  mov	ax,#$10E
25612 690C           50                         push	ax
25613                                           ! Debug: list int = const 0 (used reg = )
25614 690D           31C0                       xor	ax,ax
25615 690F           50                         push	ax
25616                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
25617 6910           E8         11A0            call	_read_word
25618 6913           83C4                   04  add	sp,*4
25619                                           ! Debug: list unsigned short = ax+0 (used reg = )
25620 6916           50                         push	ax
25621                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
25622 6917           FF76         08            push	8[bp]
25623                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25624 691A           FF76         FE            push	-2[bp]
25625                                           ! Debug: func () void = write_word+0 (used reg = )
25626 691D           E8         11BE            call	_write_word
25627 6920           83C4                   06  add	sp,*6
25628                                           !BCC_EOS
25629                                           ! 3384     break;
25630 6923           E9         00FA            br 	.21B
25631                                           !BCC_EOS
25632                                           ! 3385    case 0x02:
25633                                           ! 3386     write_word(ss,ES,0xC000);
25634                       00006926            .220:
25635                                           ! Debug: list unsigned int = const $C000 (used reg = )
25636 6926           B8                   C000  mov	ax,#$C000
25637 6929           50                         push	ax
25638                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
25639 692A           FF76         06            push	6[bp]
25640                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25641 692D           FF76         FE            push	-2[bp]
25642                                           ! Debug: func () void = write_word+0 (used reg = )
25643 6930           E8         11AB            call	_write_word
25644 6933           83C4                   06  add	sp,*6
25645                                           !BCC_EOS
25646                                           ! 3387     write_word(ss,BP,vgafont14);
25647                                           ! Debug: list * unsigned char = vgafont14+0 (used reg = )
25648 6936           BB                   173E  mov	bx,#_vgafont14
25649 6939           53                         push	bx
25650                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
25651 693A           FF76         08            push	8[bp]
25652                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25653 693D           FF76         FE            push	-2[bp]
25654                                           ! Debug: func () void = write_word+0 (used reg = )
25655 6940           E8         119B            call	_write_word
25656 6943           83C4                   06  add	sp,*6
25657                                           !BCC_EOS
25658                                           ! 3388     break;
25659 6946           E9         00D7            br 	.21B
25660                                           !BCC_EOS
25661                                           ! 3389    case 0x03:
25662                                           ! 3390     write_word(ss,ES,0xC000);
25663                       00006949            .221:
25664                                           ! Debug: list unsigned int = const $C000 (used reg = )
25665 6949           B8                   C000  mov	ax,#$C000
25666 694C           50                         push	ax
25667                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
25668 694D           FF76         06            push	6[bp]
25669                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25670 6950           FF76         FE            push	-2[bp]
25671                                           ! Debug: func () void = write_word+0 (used reg = )
25672 6953           E8         1188            call	_write_word
25673 6956           83C4                   06  add	sp,*6
25674                                           !BCC_EOS
25675                                           ! 3391     write_word(ss,BP,vgafont8);
25676                                           ! Debug: list * unsigned char = vgafont8+0 (used reg = )
25677 6959           BB                   0F3E  mov	bx,#_vgafont8
25678 695C           53                         push	bx
25679                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
25680 695D           FF76         08            push	8[bp]
25681                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25682 6960           FF76         FE            push	-2[bp]
25683                                           ! Debug: func () void = write_word+0 (used reg = )
25684 6963           E8         1178            call	_write_word
25685 6966           83C4                   06  add	sp,*6
25686                                           !BCC_EOS
25687                                           ! 3392     break;
25688 6969           E9         00B4            br 	.21B
25689                                           !BCC_EOS
25690                                           ! 3393    case 0x04:
25691                                           ! 3394     write_word(ss,ES,0xC000);
25692                       0000696C            .222:
25693                                           ! Debug: list unsigned int = const $C000 (used reg = )
25694 696C           B8                   C000  mov	ax,#$C000
25695 696F           50                         push	ax
25696                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
25697 6970           FF76         06            push	6[bp]
25698                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25699 6973           FF76         FE            push	-2[bp]
25700                                           ! Debug: func () void = write_word+0 (used reg = )
25701 6976           E8         1165            call	_write_word
25702 6979           83C4                   06  add	sp,*6
25703                                           !BCC_EOS
25704                                           ! 3395     write_word(ss,BP,vgafont8+128*8);
25705                                           ! Debug: list * unsigned char = vgafont8+$400 (used reg = )
25706 697C           BB                   133E  mov	bx,#_vgafont8+$400
25707 697F           53                         push	bx
25708                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
25709 6980           FF76         08            push	8[bp]
25710                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25711 6983           FF76         FE            push	-2[bp]
25712                                           ! Debug: func () void = write_word+0 (used reg = )
25713 6986           E8         1155            call	_write_word
25714 6989           83C4                   06  add	sp,*6
25715                                           !BCC_EOS
25716                                           ! 3396     break;
25717 698C           E9         0091            br 	.21B
25718                                           !BCC_EOS
25719                                           ! 3397    case 0x05:
25720                                           ! 3398     write_word(ss,ES,0xC000);
25721                       0000698F            .223:
25722                                           ! Debug: list unsigned int = const $C000 (used reg = )
25723 698F           B8                   C000  mov	ax,#$C000
25724 6992           50                         push	ax
25725                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
25726 6993           FF76         06            push	6[bp]
25727                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25728 6996           FF76         FE            push	-2[bp]
25729                                           ! Debug: func () void = write_word+0 (used reg = )
25730 6999           E8         1142            call	_write_word
25731 699C           83C4                   06  add	sp,*6
25732                                           !BCC_EOS
25733                                           ! 3399     write_word(ss,BP,vgafont14alt);
25734                                           ! Debug: list * unsigned char = vgafont14alt+0 (used reg = )
25735 699F           BB                   353E  mov	bx,#_vgafont14alt
25736 69A2           53                         push	bx
25737                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
25738 69A3           FF76         08            push	8[bp]
25739                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25740 69A6           FF76         FE            push	-2[bp]
25741                                           ! Debug: func () void = write_word+0 (used reg = )
25742 69A9           E8         1132            call	_write_word
25743 69AC           83C4                   06  add	sp,*6
25744                                           !BCC_EOS
25745                                           ! 3400     break;
25746 69AF           EB           6F            jmp .21B
25747                                           !BCC_EOS
25748                                           ! 3401    case 0x06:
25749                                           ! 3402     write_word(ss,ES,0xC000);
25750                       000069B1            .224:
25751                                           ! Debug: list unsigned int = const $C000 (used reg = )
25752 69B1           B8                   C000  mov	ax,#$C000
25753 69B4           50                         push	ax
25754                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
25755 69B5           FF76         06            push	6[bp]
25756                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25757 69B8           FF76         FE            push	-2[bp]
25758                                           ! Debug: func () void = write_word+0 (used reg = )
25759 69BB           E8         1120            call	_write_word
25760 69BE           83C4                   06  add	sp,*6
25761                                           !BCC_EOS
25762                                           ! 3403     write_word(ss,BP,vgafont16);
25763                                           ! Debug: list * unsigned char = vgafont16+0 (used reg = )
25764 69C1           BB                   253E  mov	bx,#_vgafont16
25765 69C4           53                         push	bx
25766                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
25767 69C5           FF76         08            push	8[bp]
25768                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25769 69C8           FF76         FE            push	-2[bp]
25770                                           ! Debug: func () void = write_word+0 (used reg = )
25771 69CB           E8         1110            call	_write_word
25772 69CE           83C4                   06  add	sp,*6
25773                                           !BCC_EOS
25774                                           ! 3404     break;
25775 69D1           EB           4D            jmp .21B
25776                                           !BCC_EOS
25777                                           ! 3405    case 0x07:
25778                                           ! 3406     write_word(s
25779                       000069D3            .225:
25780                                           ! 3406 s,ES,0xC000);
25781                                           ! Debug: list unsigned int = const $C000 (used reg = )
25782 69D3           B8                   C000  mov	ax,#$C000
25783 69D6           50                         push	ax
25784                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
25785 69D7           FF76         06            push	6[bp]
25786                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25787 69DA           FF76         FE            push	-2[bp]
25788                                           ! Debug: func () void = write_word+0 (used reg = )
25789 69DD           E8         10FE            call	_write_word
25790 69E0           83C4                   06  add	sp,*6
25791                                           !BCC_EOS
25792                                           ! 3407     write_word(ss,BP,vgafont16alt);
25793                                           ! Debug: list * unsigned char = vgafont16alt+0 (used reg = )
25794 69E3           BB                   353F  mov	bx,#_vgafont16alt
25795 69E6           53                         push	bx
25796                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
25797 69E7           FF76         08            push	8[bp]
25798                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25799 69EA           FF76         FE            push	-2[bp]
25800                                           ! Debug: func () void = write_word+0 (used reg = )
25801 69ED           E8         10EE            call	_write_word
25802 69F0           83C4                   06  add	sp,*6
25803                                           !BCC_EOS
25804                                           ! 3408     break;
25805 69F3           EB           2B            jmp .21B
25806                                           !BCC_EOS
25807                                           ! 3409    default:
25808                                           ! 3410     return;
25809                       000069F5            .226:
25810 69F5           89EC                       mov	sp,bp
25811 69F7           5D                         pop	bp
25812 69F8           C3                         ret
25813                                           !BCC_EOS
25814                                           ! 3411   }
25815                                           ! 3412  write_word(ss,CX,(Bit16u)read_byte(0x40,0x85));
25816 69F9           EB           25            jmp .21B
25817                       000069FB            .21D:
25818 69FB           2C                     00  sub	al,*0
25819 69FD           72           F6            jb 	.226
25820 69FF           3C                     07  cmp	al,*7
25821 6A01           77           1B            ja  	.227
25822 6A03           30E4                       xor	ah,ah
25823 6A05           D1E0                       shl	ax,*1
25824 6A07           89C3                       mov	bx,ax
25825 6A09           2E                         seg	cs
25826 6A0A           FFA7       6A0E            br	.228[bx]
25827                       00006A0E            .228:
25828 6A0E                      68B8            .word	.21E
25829 6A10                      68EF            .word	.21F
25830 6A12                      6926            .word	.220
25831 6A14                      6949            .word	.221
25832 6A16                      696C            .word	.222
25833 6A18                      698F            .word	.223
25834 6A1A                      69B1            .word	.224
25835 6A1C                      69D3            .word	.225
25836                       00006A1E            .227:
25837 6A1E           EB           D5            jmp	.226
25838                       00006A20            .21B:
25839                       FFFFFFFC            ..FFF5	=	-4
25840                                           ! Debug: list int = const $85 (used reg = )
25841 6A20           B8                   0085  mov	ax,#$85
25842 6A23           50                         push	ax
25843                                           ! Debug: list int = const $40 (used reg = )
25844 6A24           B8                   0040  mov	ax,*$40
25845 6A27           50                         push	ax
25846                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
25847 6A28           E8         1075            call	_read_byte
25848 6A2B           83C4                   04  add	sp,*4
25849                                           ! Debug: cast unsigned short = const 0 to unsigned char = al+0 (used reg = )
25850 6A2E           30E4                       xor	ah,ah
25851                                           ! Debug: list unsigned short = ax+0 (used reg = )
25852 6A30           50                         push	ax
25853                                           ! Debug: list * unsigned short CX = [S+6+8] (used reg = )
25854 6A31           FF76         0A            push	$A[bp]
25855                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25856 6A34           FF76         FE            push	-2[bp]
25857                                           ! Debug: func () void = write_word+0 (used reg = )
25858 6A37           E8         10A4            call	_write_word
25859 6A3A           83C4                   06  add	sp,*6
25860                                           !BCC_EOS
25861                                           ! 3413  write_word(ss,DX,(Bit16u)read_byte(0x40,0x84));
25862                                           ! Debug: list int = const $84 (used reg = )
25863 6A3D           B8                   0084  mov	ax,#$84
25864 6A40           50                         push	ax
25865                                           ! Debug: list int = const $40 (used reg = )
25866 6A41           B8                   0040  mov	ax,*$40
25867 6A44           50                         push	ax
25868                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
25869 6A45           E8         1058            call	_read_byte
25870 6A48           83C4                   04  add	sp,*4
25871                                           ! Debug: cast unsigned short = const 0 to unsigned char = al+0 (used reg = )
25872 6A4B           30E4                       xor	ah,ah
25873                                           ! Debug: list unsigned short = ax+0 (used reg = )
25874 6A4D           50                         push	ax
25875                                           ! Debug: list * unsigned short DX = [S+6+$A] (used reg = )
25876 6A4E           FF76         0C            push	$C[bp]
25877                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25878 6A51           FF76         FE            push	-2[bp]
25879                                           ! Debug: func () void = write_word+0 (used reg = )
25880 6A54           E8         1087            call	_write_word
25881 6A57           83C4                   06  add	sp,*6
25882                                           !BCC_EOS
25883                                           ! 3414 }
25884 6A5A           89EC                       mov	sp,bp
25885 6A5C           5D                         pop	bp
25886 6A5D           C3                         ret
25887                                           ! 3415 #asm
25888                                           !BCC_ASM
25889                       00000006            _biosfn_get_font_info.BP	set	6
25890                       00000002            _biosfn_get_font_info.BH	set	2
25891                       00000008            _biosfn_get_font_info.CX	set	8
25892                       0000000A            _biosfn_get_font_info.DX	set	$A
25893                       00000004            _biosfn_get_font_info.ES	set	4
25894                       00006A5E            biosfn_get_ega_info:
25895 6A5E           1E                           push ds
25896 6A5F           50                           push ax
25897 6A60           B8                   0040    mov ax, # 0x40
25898 6A63           8ED8                         mov ds, ax
25899 6A65           30ED                         xor ch, ch
25900 6A67           BB                   0088    mov bx, # 0x88
25901 6A6A           8A0F                         mov cl, [bx]
25902 6A6C           80E1                   0F    and cl, #0x0f
25903 6A6F           BB                   0063    mov bx, # 0x63
25904 6A72           8B07                         mov ax, [bx]
25905 6A74           BB                   0003    mov bx, #0x0003
25906 6A77           3D                   03B4    cmp ax, # 0x3b4
25907 6A7A           75           02              jne mode_ega_color
25908 6A7C           B7                     01    mov bh, #0x01
25909                       00006A7E            mode_ega_color:
25910 6A7E           58                           pop ax
25911 6A7F           1F                           pop ds
25912 6A80           C3                           ret
25913                                           ! 3435 endasm
25914                                           !BCC_ENDASM
25915                                           ! 3436 static void biosfn_alternate_prtsc()
25916                                           ! Register BX used in function biosfn_get_font_info
25917                                           ! 3437 {
25918                       00006A81            _biosfn_alternate_prtsc:
25919                                           ! 3438 }
25920 6A81           C3                         ret
25921                                           ! 3439 #asm
25922                                           !BCC_ASM
25923                       00006A82            biosfn_select_vert_res:
25924                                           ; res : 00 200 lines, 01 350 lines, 02 400 lines
25925 6A82           1E                           push ds
25926 6A83           53                           push bx
25927 6A84           52                           push dx
25928 6A85           88C2                         mov dl, al
25929 6A87           B8                   0040    mov ax, # 0x40
25930 6A8A           8ED8                         mov ds, ax
25931 6A8C           BB                   0089    mov bx, # 0x89
25932 6A8F           8A07                         mov al, [bx]
25933 6A91           BB                   0088    mov bx, # 0x88
25934 6A94           8A27                         mov ah, [bx]
25935 6A96           80FA                   01    cmp dl, #0x01
25936 6A99           74           15              je vert_res_350
25937 6A9B           72           1D              jb vert_res_200
25938 6A9D           80FA                   02    cmp dl, #0x02
25939 6AA0           74           02              je vert_res_400
25940 6AA2           EB           2A              jmp set_retcode
25941                       00006AA4            vert_res_400:
25942                                             ; reset modeset ctl bit 7 and set bit 4
25943                                             ; set switches bit 3-0 to 0x09
25944 6AA4           24                     7F    and al, #0x7f
25945 6AA6           0C                     10    or al, #0x10
25946 6AA8           80E4                   F0    and ah, #0xf0
25947 6AAB           80CC                   09    or ah, #0x09
25948 6AAE           75           14              jnz set_vert_res
25949                       00006AB0            vert_res_350:
25950                                             ; reset modeset ctl bit 7 and bit 4
25951                                             ; set switches bit 3-0 to 0x09
25952 6AB0           24                     6F    and al, #0x6f
25953 6AB2           80E4                   F0    and ah, #0xf0
25954 6AB5           80CC                   09    or ah, #0x09
25955 6AB8           75           0A              jnz set_vert_res
25956                       00006ABA            vert_res_200:
25957                                             ; set modeset ctl bit 7 and reset bit 4
25958                                             ; set switches bit 3-0 to 0x08
25959 6ABA           24                     EF    and al, #0xef
25960 6ABC           0C                     80    or al, #0x80
25961 6ABE           80E4                   F0    and ah, #0xf0
25962 6AC1           80CC                   08    or ah, #0x08
25963                       00006AC4            set_vert_res:
25964 6AC4           BB                   0089    mov bx, # 0x89
25965 6AC7           8807                         mov [bx], al
25966 6AC9           BB                   0088    mov bx, # 0x88
25967 6ACC           8827                         mov [bx], ah
25968                       00006ACE            set_retcode:
25969 6ACE           B8                   1212    mov ax, #0x1212
25970 6AD1           5A                           pop dx
25971 6AD2           5B                           pop bx
25972 6AD3           1F                           pop ds
25973 6AD4           C3                           ret
25974                       00006AD5            biosfn_enable_default_palette_loading:
25975 6AD5           1E                           push ds
25976 6AD6           53                           push bx
25977 6AD7           52                           push dx
25978 6AD8           88C2                         mov dl, al
25979 6ADA           80E2                   01    and dl, #0x01
25980 6ADD           C0E2                   03    shl dl, 3
25981 6AE0           B8                   0040    mov ax, # 0x40
25982 6AE3           8ED8                         mov ds, ax
25983 6AE5           BB                   0089    mov bx, # 0x89
25984 6AE8           8A07                         mov al, [bx]
25985 6AEA           24                     F7    and al, #0xf7
25986 6AEC           08D0                         or al, dl
25987 6AEE           8807                         mov [bx], al
25988 6AF0           B8                   1212    mov ax, #0x1212
25989 6AF3           5A                           pop dx
25990 6AF4           5B                           pop bx
25991 6AF5           1F                           pop ds
25992 6AF6           C3                           ret
25993                       00006AF7            biosfn_enable_video_addressing:
25994 6AF7           53                           push bx
25995 6AF8           52                           push dx
25996 6AF9           88C3                         mov bl, al
25997 6AFB           80E3                   01    and bl, #0x01
25998 6AFE           80F3                   01    xor bl, #0x01
25999 6B01           D0E3                         shl bl, 1
26000 6B03           BA                   03CC    mov dx, # 0x3cc
26001 6B06           EC                           in al, dx
26002 6B07           24                     FD    and al, #0xfd
26003 6B09           08D8                         or al, bl
26004 6B0B           BA                   03C2    mov dx, # 0x3c2
26005 6B0E           EE                           out dx, al
26006 6B0F           B8                   1212    mov ax, #0x1212
26007 6B12           5A                           pop dx
26008 6B13           5B                           pop bx
26009 6B14           C3                           ret
26010                       00006B15            biosfn_enable_grayscale_summing:
26011 6B15           1E                           push ds
26012 6B16           53                           push bx
26013 6B17           52                           push dx
26014 6B18           88C2                         mov dl, al
26015 6B1A           80E2                   01    and dl, #0x01
26016 6B1D           80F2                   01    xor dl, #0x01
26017 6B20           D0E2                         shl dl, 1
26018 6B22           B8                   0040    mov ax, # 0x40
26019 6B25           8ED8                         mov ds, ax
26020 6B27           BB                   0089    mov bx, # 0x89
26021 6B2A           8A07                         mov al, [bx]
26022 6B2C           24                     FD    and al, #0xfd
26023 6B2E           08D0                         or al, dl
26024 6B30           8807                         mov [bx], al
26025 6B32           B8                   1212    mov ax, #0x1212
26026 6B35           5A                           pop dx
26027 6B36           5B                           pop bx
26028 6B37           1F                           pop ds
26029 6B38           C3                           ret
26030                       00006B39            biosfn_enable_cursor_emulation:
26031 6B39           1E                           push ds
26032 6B3A           53                           push bx
26033 6B3B           52                           push dx
26034 6B3C           88C2                         mov dl, al
26035 6B3E           80E2                   01    and dl, #0x01
26036 6B41           80F2                   01    xor dl, #0x01
26037 6B44           B8                   0040    mov ax, # 0x40
26038 6B47           8ED8                         mov ds, ax
26039 6B49           BB                   0089    mov bx, # 0x89
26040 6B4C           8A07                         mov al, [bx]
26041 6B4E           24                     FE    and al, #0xfe
26042 6B50           08D0                         or al, dl
26043 6B52           8807                         mov [bx], al
26044 6B54           B8                   1212    mov ax, #0x1212
26045 6B57           5A                           pop dx
26046 6B58           5B                           pop bx
26047 6B59           1F                           pop ds
26048 6B5A           C3                           ret
26049                                           ! 3566 endasm
26050                                           !BCC_ENDASM
26051                                           ! 3567 static void biosfn_switch_video_interface (AL,ES,DX) Bit8u AL;Bit16u ES;Bit16u DX;
26052                       00006B5B            _biosfn_switch_video_interface:
26053                                           !BCC_EOS
26054                                           !BCC_EOS
26055                                           !BCC_EOS
26056                                           ! 3568 {
26057                                           ! 3569 }
26058 6B5B           C3                         ret
26059                                           ! 3570 static void biosfn_enable_video_refresh_control (AL) Bit8u AL;
26060                       00006B5C            _biosfn_enable_video_refresh_control:
26061                                           !BCC_EOS
26062                                           ! 3571 {
26063                                           ! 3572 }
26064 6B5C           C3                         ret
26065                                           ! 3573 static void biosfn_write_string (flag,page,attr,count,row,col,seg,offset)
26066                                           ! 3574 Bit8u flag;Bit8u page;Bit8u attr;Bit16u count;Bit8u row;Bit8u col;Bit16u seg;Bit16u offset;
26067                       00006B5D            _biosfn_write_string:
26068                                           !BCC_EOS
26069                                           !BCC_EOS
26070                                           !BCC_EOS
26071                                           !BCC_EOS
26072                                           !BCC_EOS
26073                                           !BCC_EOS
26074                                           !BCC_EOS
26075                                           !BCC_EOS
26076                                           ! 3575 {
26077                                           ! 3576  Bit16u newcurs,oldcurs,dummy;
26078                                           !BCC_EOS
26079                                           ! 3577  Bit8u car,carattr;
26080                                           !BCC_EOS
26081                                           ! 3578  biosfn_get_cursor_pos(page,&dummy,&oldcurs);
26082 6B5D           55                         push	bp
26083 6B5E           89E5                       mov	bp,sp
26084 6B60           83C4                   F8  add	sp,*-8
26085                                           ! Debug: list * unsigned short oldcurs = S+$A-6 (used reg = )
26086 6B63           8D5E         FC            lea	bx,-4[bp]
26087 6B66           53                         push	bx
26088                                           ! Debug: list * unsigned short dummy = S+$C-8 (used reg = )
26089 6B67           8D5E         FA            lea	bx,-6[bp]
26090 6B6A           53                         push	bx
26091                                           ! Debug: list unsigned char page = [S+$E+4] (used reg = )
26092 6B6B           8A46         06            mov	al,6[bp]
26093 6B6E           30E4                       xor	ah,ah
26094 6B70           50                         push	ax
26095                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
26096 6B71           E8         D7E9            call	_biosfn_get_cursor_pos
26097 6B74           83C4                   06  add	sp,*6
26098                                           !BCC_EOS
26099                                           ! 3579  if(row==0xff)
26100                                           ! Debug: logeq int = const $FF to unsigned char row = [S+$A+$A] (used reg = )
26101 6B77           8A46         0C            mov	al,$C[bp]
26102 6B7A           3C                     FF  cmp	al,#$FF
26103 6B7C           75           12            jne 	.229
26104                       00006B7E            .22A:
26105                                           ! 3580   {col=oldcurs&0x00ff;
26106                                           ! Debug: and int = const $FF to unsigned short oldcurs = [S+$A-6] (used reg = )
26107 6B7E           8A46         FC            mov	al,-4[bp]
26108                                           ! Debug: eq unsigned char = al+0 to unsigned char col = [S+$A+$C] (used reg = )
26109 6B81           8846         0E            mov	$E[bp],al
26110                                           !BCC_EOS
26111                                           ! 3581    row=(oldcurs&0xff00)>>8;
26112                                           ! Debug: and unsigned int = const $FF00 to unsigned short oldcurs = [S+$A-6] (used reg = )
26113 6B84           8B46         FC            mov	ax,-4[bp]
26114 6B87           30C0                       xor	al,al
26115                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
26116 6B89           88E0                       mov	al,ah
26117 6B8B           30E4                       xor	ah,ah
26118                                           ! Debug: eq unsigned int = ax+0 to unsigned char row = [S+$A+$A] (used reg = )
26119 6B8D           8846         0C            mov	$C[bp],al
26120                                           !BCC_EOS
26121                                           ! 3582   }
26122                                           ! 3583  newcurs=row; newcurs<<=8; newcurs+=col;
26123                       00006B90            .229:
26124                                           ! Debug: eq unsigned char row = [S+$A+$A] to unsigned short newcurs = [S+$A-4] (used reg = )
26125 6B90           8A46         0C            mov	al,$C[bp]
26126 6B93           30E4                       xor	ah,ah
26127 6B95           8946         FE            mov	-2[bp],ax
26128                                           !BCC_EOS
26129                                           ! Debug: slab int = const 8 to unsigned short newcurs = [S+$A-4] (used reg = )
26130 6B98           8B46         FE            mov	ax,-2[bp]
26131 6B9B           88C4                       mov	ah,al
26132 6B9D           30C0                       xor	al,al
26133 6B9F           8946         FE            mov	-2[bp],ax
26134                                           !BCC_EOS
26135                                           ! Debug: addab unsigned char col = [S+$A+$C] to unsigned short newcurs = [S+$A-4] (used reg = )
26136 6BA2           8B46         FE            mov	ax,-2[bp]
26137 6BA5           0246         0E            add	al,$E[bp]
26138 6BA8           80D4                   00  adc	ah,*0
26139 6BAB           8946         FE            mov	-2[bp],ax
26140                                           !BCC_EOS
26141                                           ! 3584  biosfn_set_cursor_pos(page,newcurs);
26142                                           ! Debug: list unsigned short newcurs = [S+$A-4] (used reg = )
26143 6BAE           FF76         FE            push	-2[bp]
26144                                           ! Debug: list unsigned char page = [S+$C+4] (used reg = )
26145 6BB1           8A46         06            mov	al,6[bp]
26146 6BB4           30E4                       xor	ah,ah
26147 6BB6           50                         push	ax
26148                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
26149 6BB7           E8         D6A3            call	_biosfn_set_cursor_pos
26150 6BBA           83C4                   04  add	sp,*4
26151                                           !BCC_EOS
26152                                           ! 3585  while(count--!=0)
26153                                           ! 3586   {
26154 6BBD           EB           4F            jmp .22C
26155                       00006BBF            .22D:
26156                                           ! 3587    car=read_byte(seg,offset++);
26157                                           ! Debug: postinc unsigned short offset = [S+$A+$10] (used reg = )
26158 6BBF           8B46         12            mov	ax,$12[bp]
26159 6BC2           40                         inc	ax
26160 6BC3           8946         12            mov	$12[bp],ax
26161                                           ! Debug: list unsigned short = ax-1 (used reg = )
26162 6BC6           48                         dec	ax
26163 6BC7           50                         push	ax
26164                                           ! Debug: list unsigned short seg = [S+$C+$E] (used reg = )
26165 6BC8           FF76         10            push	$10[bp]
26166                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26167 6BCB           E8         0ED2            call	_read_byte
26168 6BCE           83C4                   04  add	sp,*4
26169                                           ! Debug: eq unsigned char = al+0 to unsigned char car = [S+$A-9] (used reg = )
26170 6BD1           8846         F9            mov	-7[bp],al
26171                                           !BCC_EOS
26172                                           ! 3588    if((flag&0x02)!=0)
26173                                           ! Debug: and int = const 2 to unsigned char flag = [S+$A+2] (used reg = )
26174 6BD4           8A46         04            mov	al,4[bp]
26175 6BD7           24                     02  and	al,*2
26176                                           ! Debug: ne int = const 0 to unsigned char = al+0 (used reg = )
26177 6BD9           84C0                       test	al,al
26178 6BDB           74           15            je  	.22E
26179                       00006BDD            .22F:
26180                                           ! 3589     attr=read_byte(seg,offset++);
26181                                           ! Debug: postinc unsigned short offset = [S+$A+$10] (used reg = )
26182 6BDD           8B46         12            mov	ax,$12[bp]
26183 6BE0           40                         inc	ax
26184 6BE1           8946         12            mov	$12[bp],ax
26185                                           ! Debug: list unsigned short = ax-1 (used reg = )
26186 6BE4           48                         dec	ax
26187 6BE5           50                         push	ax
26188                                           ! Debug: list unsigned short seg = [S+$C+$E] (used reg = )
26189 6BE6           FF76         10            push	$10[bp]
26190                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26191 6BE9           E8         0EB4            call	_read_byte
26192 6BEC           83C4                   04  add	sp,*4
26193                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$A+6] (used reg = )
26194 6BEF           8846         08            mov	8[bp],al
26195                                           !BCC_EOS
26196                                           ! 3590    biosfn_write_teletype(car,page,attr,3);
26197                       00006BF2            .22E:
26198                                           ! Debug: list int = const 3 (used reg = )
26199 6BF2           B8                   0003  mov	ax,*3
26200 6BF5           50                         push	ax
26201                                           ! Debug: list unsigned char attr = [S+$C+6] (used reg = )
26202 6BF6           8A46         08            mov	al,8[bp]
26203 6BF9           30E4                       xor	ah,ah
26204 6BFB           50                         push	ax
26205                                           ! Debug: list unsigned char page = [S+$E+4] (used reg = )
26206 6BFC           8A46         06            mov	al,6[bp]
26207 6BFF           30E4                       xor	ah,ah
26208 6C01           50                         push	ax
26209                                           ! Debug: list unsigned char car = [S+$10-9] (used reg = )
26210 6C02           8A46         F9            mov	al,-7[bp]
26211 6C05           30E4                       xor	ah,ah
26212 6C07           50                         push	ax
26213                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
26214 6C08           E8         F197            call	_biosfn_write_teletype
26215 6C0B           83C4                   08  add	sp,*8
26216                                           !BCC_EOS
26217                                           ! 3591   }
26218                                           ! 3592  if((flag&0x01)==0)
26219                       00006C0E            .22C:
26220                                           ! Debug: postdec unsigned short count = [S+$A+8] (used reg = )
26221 6C0E           8B46         0A            mov	ax,$A[bp]
26222 6C11           48                         dec	ax
26223 6C12           8946         0A            mov	$A[bp],ax
26224                                           ! Debug: ne int = const 0 to unsigned short = ax+1 (used reg = )
26225 6C15           3D                   FFFF  cmp	ax,*-1
26226 6C18           75           A5            jne	.22D
26227                       00006C1A            .230:
26228                       00006C1A            .22B:
26229                                           ! Debug: and int = const 1 to unsigned char flag = [S+$A+2] (used reg = )
26230 6C1A           8A46         04            mov	al,4[bp]
26231 6C1D           24                     01  and	al,*1
26232                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
26233 6C1F           84C0                       test	al,al
26234 6C21           75           0F            jne 	.231
26235                       00006C23            .232:
26236                                           ! 3593   biosfn_set_cursor_pos(page,oldcurs);
26237                                           ! Debug: list unsigned short oldcurs = [S+$A-6] (used reg = )
26238 6C23           FF76         FC            push	-4[bp]
26239                                           ! Debug: list unsigned char page = [S+$C+4] (used reg = )
26240 6C26           8A46         06            mov	al,6[bp]
26241 6C29           30E4                       xor	ah,ah
26242 6C2B           50                         push	ax
26243                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
26244 6C2C           E8         D62E            call	_biosfn_set_cursor_pos
26245 6C2F           83C4                   04  add	sp,*4
26246                                           !BCC_EOS
26247                                           ! 3594 }
26248                       00006C32            .231:
26249 6C32           89EC                       mov	sp,bp
26250 6C34           5D                         pop	bp
26251 6C35           C3                         ret
26252                                           ! 3595 #asm
26253                                           !BCC_ASM
26254                       00000008            _biosfn_write_string.count	set	8
26255                       0000000E            _biosfn_write_string.seg	set	$E
26256                       0000000C            _biosfn_write_string.col	set	$C
26257                       00000002            _biosfn_write_string.flag	set	2
26258                       00000006            _biosfn_write_string.attr	set	6
26259                       00000004            _biosfn_write_string.page	set	4
26260                       0000000A            _biosfn_write_string.row	set	$A
26261                       00000010            _biosfn_write_string.offset	set	$10
26262                       00006C36            biosfn_group_1A:
26263 6C36           3C                     00    cmp al, #0x00
26264 6C38           74           05              je biosfn_read_display_code
26265 6C3A           3C                     01    cmp al, #0x01
26266 6C3C           74           16              je biosfn_set_display_code
26267 6C3E           C3                           ret
26268                       00006C3F            biosfn_read_display_code:
26269 6C3F           1E                           push ds
26270 6C40           50                           push ax
26271 6C41           B8                   0040    mov ax, # 0x40
26272 6C44           8ED8                         mov ds, ax
26273 6C46           BB                   008A    mov bx, # 0x8A
26274 6C49           8A07                         mov al, [bx]
26275 6C4B           88C3                         mov bl, al
26276 6C4D           30FF                         xor bh, bh
26277 6C4F           58                           pop ax
26278 6C50           88E0                         mov al, ah
26279 6C52           1F                           pop ds
26280 6C53           C3                           ret
26281                       00006C54            biosfn_set_display_code:
26282 6C54           1E                           push ds
26283 6C55           50                           push ax
26284 6C56           53                           push bx
26285 6C57           B8                   0040    mov ax, # 0x40
26286 6C5A           8ED8                         mov ds, ax
26287 6C5C           89D8                         mov ax, bx
26288 6C5E           BB                   008A    mov bx, # 0x8A
26289 6C61           8807                         mov [bx], al
26290 6C63           5B                           pop bx
26291 6C64           58                           pop ax
26292 6C65           88E0                         mov al, ah
26293 6C67           1F                           pop ds
26294 6C68           C3                           ret
26295                                           ! 3629 endasm
26296                                           !BCC_ENDASM
26297                                           ! 3630 static void biosfn_read_state_info (BX,ES,DI)
26298                                           ! Register BX used in function biosfn_write_string
26299                                           ! 3631 Bit16u BX;Bit16u ES;Bit16u DI;
26300                       00006C69            _biosfn_read_state_info:
26301                                           !BCC_EOS
26302                                           !BCC_EOS
26303                                           !BCC_EOS
26304                                           ! 3632 {
26305                                           ! 3633  write_word(ES,DI+0x00,&static_functionality);
26306 6C69           55                         push	bp
26307 6C6A           89E5                       mov	bp,sp
26308                                           ! Debug: list * [$10] unsigned char = static_functionality+0 (used reg = )
26309 6C6C           BB                   0F2E  mov	bx,#_static_functionality
26310 6C6F           53                         push	bx
26311                                           ! Debug: add int = const 0 to unsigned short DI = [S+4+6] (used reg = )
26312 6C70           8B46         08            mov	ax,8[bp]
26313                                           ! Debug: list unsigned int = ax+0 (used reg = )
26314 6C73           50                         push	ax
26315                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26316 6C74           FF76         06            push	6[bp]
26317                                           ! Debug: func () void = write_word+0 (used reg = )
26318 6C77           E8         0E64            call	_write_word
26319 6C7A           89EC                       mov	sp,bp
26320                                           !BCC_EOS
26321                                           ! 3634  write_word(ES,DI+0x02,0xC000);
26322                                           ! Debug: list unsigned int = const $C000 (used reg = )
26323 6C7C           B8                   C000  mov	ax,#$C000
26324 6C7F           50                         push	ax
26325                                           ! Debug: add int = const 2 to unsigned short DI = [S+4+6] (used reg = )
26326 6C80           8B46         08            mov	ax,8[bp]
26327                                           ! Debug: list unsigned int = ax+2 (used reg = )
26328 6C83           40                         inc	ax
26329 6C84           40                         inc	ax
26330 6C85           50                         push	ax
26331                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26332 6C86           FF76         06            push	6[bp]
26333                                           ! Debug: func () void = write_word+0 (used reg = )
26334 6C89           E8         0E52            call	_write_word
26335 6C8C           89EC                       mov	sp,bp
26336                                           !BCC_EOS
26337                                           ! 3635  memcpyb(ES,DI+0x04,0x40,0x49,30);
26338                                           ! Debug: list int = const $1E (used reg = )
26339 6C8E           B8                   001E  mov	ax,*$1E
26340 6C91           50                         push	ax
26341                                           ! Debug: list int = const $49 (used reg = )
26342 6C92           B8                   0049  mov	ax,*$49
26343 6C95           50                         push	ax
26344                                           ! Debug: list int = const $40 (used reg = )
26345 6C96           B8                   0040  mov	ax,*$40
26346 6C99           50                         push	ax
26347                                           ! Debug: add int = const 4 to unsigned short DI = [S+8+6] (used reg = )
26348 6C9A           8B46         08            mov	ax,8[bp]
26349                                           ! Debug: list unsigned int = ax+4 (used reg = )
26350 6C9D           05                   0004  add	ax,*4
26351 6CA0           50                         push	ax
26352                                           ! Debug: list unsigned short ES = [S+$A+4] (used reg = )
26353 6CA1           FF76         06            push	6[bp]
26354                                           ! Debug: func () void = memcpyb+0 (used reg = )
26355 6CA4           E8         0D99            call	_memcpyb
26356 6CA7           89EC                       mov	sp,bp
26357                                           !BCC_EOS
26358                                           ! 3636  memcpyb(ES,DI+0x22,0x40,0x84,3);
26359                                           ! Debug: list int = const 3 (used reg = )
26360 6CA9           B8                   0003  mov	ax,*3
26361 6CAC           50                         push	ax
26362                                           ! Debug: list int = const $84 (used reg = )
26363 6CAD           B8                   0084  mov	ax,#$84
26364 6CB0           50                         push	ax
26365                                           ! Debug: list int = const $40 (used reg = )
26366 6CB1           B8                   0040  mov	ax,*$40
26367 6CB4           50                         push	ax
26368                                           ! Debug: add int = const $22 to unsigned short DI = [S+8+6] (used reg = )
26369 6CB5           8B46         08            mov	ax,8[bp]
26370                                           ! Debug: list unsigned int = ax+$22 (used reg = )
26371 6CB8           05                   0022  add	ax,*$22
26372 6CBB           50                         push	ax
26373                                           ! Debug: list unsigned short ES = [S+$A+4] (used reg = )
26374 6CBC           FF76         06            push	6[bp]
26375                                           ! Debug: func () void = memcpyb+0 (used reg = )
26376 6CBF           E8         0D7E            call	_memcpyb
26377 6CC2           89EC                       mov	sp,bp
26378                                           !BCC_EOS
26379                                           ! 3637  write_byte(ES,DI+0x25,read_byte(0x40,0x8A));
26380                                           ! Debug: list int = const $8A (used reg = )
26381 6CC4           B8                   008A  mov	ax,#$8A
26382 6CC7           50                         push	ax
26383                                           ! Debug: list int = const $40 (used reg = )
26384 6CC8           B8                   0040  mov	ax,*$40
26385 6CCB           50                         push	ax
26386                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26387 6CCC           E8         0DD1            call	_read_byte
26388 6CCF           89EC                       mov	sp,bp
26389                                           ! Debug: list unsigned char = al+0 (used reg = )
26390 6CD1           30E4                       xor	ah,ah
26391 6CD3           50                         push	ax
26392                                           ! Debug: add int = const $25 to unsigned short DI = [S+4+6] (used reg = )
26393 6CD4           8B46         08            mov	ax,8[bp]
26394                                           ! Debug: list unsigned int = ax+$25 (used reg = )
26395 6CD7           05                   0025  add	ax,*$25
26396 6CDA           50                         push	ax
26397                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26398 6CDB           FF76         06            push	6[bp]
26399                                           ! Debug: func () void = write_byte+0 (used reg = )
26400 6CDE           E8         0DE5            call	_write_byte
26401 6CE1           89EC                       mov	sp,bp
26402                                           !BCC_EOS
26403                                           ! 3638  write_byte(ES,DI+0x26,0);
26404                                           ! Debug: list int = const 0 (used reg = )
26405 6CE3           31C0                       xor	ax,ax
26406 6CE5           50                         push	ax
26407                                           ! Debug: add int = const $26 to unsigned short DI = [S+4+6] (used reg = )
26408 6CE6           8B46         08            mov	ax,8[bp]
26409                                           ! Debug: list unsigned int = ax+$26 (used reg = )
26410 6CE9           05                   0026  add	ax,*$26
26411 6CEC           50                         push	ax
26412                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26413 6CED           FF76         06            push	6[bp]
26414                                           ! Debug: func () void = write_byte+0 (used reg = )
26415 6CF0           E8         0DD3            call	_write_byte
26416 6CF3           89EC                       mov	sp,bp
26417                                           !BCC_EOS
26418                                           ! 3639  write_byte(ES,DI+0x27,16);
26419                                           ! Debug: list int = const $10 (used reg = )
26420 6CF5           B8                   0010  mov	ax,*$10
26421 6CF8           50                         push	ax
26422                                           ! Debug: add int = const $27 to unsigned short DI = [S+4+6] (used reg = )
26423 6CF9           8B46         08            mov	ax,8[bp]
26424                                           ! Debug: list unsigned int = ax+$27 (used reg = )
26425 6CFC           05                   0027  add	ax,*$27
26426 6CFF           50                         push	ax
26427                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26428 6D00           FF76         06            push	6[bp]
26429                                           ! Debug: func () void = write_byte+0 (used reg = )
26430 6D03           E8         0DC0            call	_write_byte
26431 6D06           89EC                       mov	sp,bp
26432                                           !BCC_EOS
26433                                           ! 3640  
26434                                           ! 3640 write_byte(ES,DI+0x28,0);
26435                                           ! Debug: list int = const 0 (used reg = )
26436 6D08           31C0                       xor	ax,ax
26437 6D0A           50                         push	ax
26438                                           ! Debug: add int = const $28 to unsigned short DI = [S+4+6] (used reg = )
26439 6D0B           8B46         08            mov	ax,8[bp]
26440                                           ! Debug: list unsigned int = ax+$28 (used reg = )
26441 6D0E           05                   0028  add	ax,*$28
26442 6D11           50                         push	ax
26443                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26444 6D12           FF76         06            push	6[bp]
26445                                           ! Debug: func () void = write_byte+0 (used reg = )
26446 6D15           E8         0DAE            call	_write_byte
26447 6D18           89EC                       mov	sp,bp
26448                                           !BCC_EOS
26449                                           ! 3641  write_byte(ES,DI+0x29,8);
26450                                           ! Debug: list int = const 8 (used reg = )
26451 6D1A           B8                   0008  mov	ax,*8
26452 6D1D           50                         push	ax
26453                                           ! Debug: add int = const $29 to unsigned short DI = [S+4+6] (used reg = )
26454 6D1E           8B46         08            mov	ax,8[bp]
26455                                           ! Debug: list unsigned int = ax+$29 (used reg = )
26456 6D21           05                   0029  add	ax,*$29
26457 6D24           50                         push	ax
26458                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26459 6D25           FF76         06            push	6[bp]
26460                                           ! Debug: func () void = write_byte+0 (used reg = )
26461 6D28           E8         0D9B            call	_write_byte
26462 6D2B           89EC                       mov	sp,bp
26463                                           !BCC_EOS
26464                                           ! 3642  write_byte(ES,DI+0x2a,2);
26465                                           ! Debug: list int = const 2 (used reg = )
26466 6D2D           B8                   0002  mov	ax,*2
26467 6D30           50                         push	ax
26468                                           ! Debug: add int = const $2A to unsigned short DI = [S+4+6] (used reg = )
26469 6D31           8B46         08            mov	ax,8[bp]
26470                                           ! Debug: list unsigned int = ax+$2A (used reg = )
26471 6D34           05                   002A  add	ax,*$2A
26472 6D37           50                         push	ax
26473                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26474 6D38           FF76         06            push	6[bp]
26475                                           ! Debug: func () void = write_byte+0 (used reg = )
26476 6D3B           E8         0D88            call	_write_byte
26477 6D3E           89EC                       mov	sp,bp
26478                                           !BCC_EOS
26479                                           ! 3643  write_byte(ES,DI+0x2b,0);
26480                                           ! Debug: list int = const 0 (used reg = )
26481 6D40           31C0                       xor	ax,ax
26482 6D42           50                         push	ax
26483                                           ! Debug: add int = const $2B to unsigned short DI = [S+4+6] (used reg = )
26484 6D43           8B46         08            mov	ax,8[bp]
26485                                           ! Debug: list unsigned int = ax+$2B (used reg = )
26486 6D46           05                   002B  add	ax,*$2B
26487 6D49           50                         push	ax
26488                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26489 6D4A           FF76         06            push	6[bp]
26490                                           ! Debug: func () void = write_byte+0 (used reg = )
26491 6D4D           E8         0D76            call	_write_byte
26492 6D50           89EC                       mov	sp,bp
26493                                           !BCC_EOS
26494                                           ! 3644  write_byte(ES,DI+0x2c,0);
26495                                           ! Debug: list int = const 0 (used reg = )
26496 6D52           31C0                       xor	ax,ax
26497 6D54           50                         push	ax
26498                                           ! Debug: add int = const $2C to unsigned short DI = [S+4+6] (used reg = )
26499 6D55           8B46         08            mov	ax,8[bp]
26500                                           ! Debug: list unsigned int = ax+$2C (used reg = )
26501 6D58           05                   002C  add	ax,*$2C
26502 6D5B           50                         push	ax
26503                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26504 6D5C           FF76         06            push	6[bp]
26505                                           ! Debug: func () void = write_byte+0 (used reg = )
26506 6D5F           E8         0D64            call	_write_byte
26507 6D62           89EC                       mov	sp,bp
26508                                           !BCC_EOS
26509                                           ! 3645  write_byte(ES,DI+0x31,3);
26510                                           ! Debug: list int = const 3 (used reg = )
26511 6D64           B8                   0003  mov	ax,*3
26512 6D67           50                         push	ax
26513                                           ! Debug: add int = const $31 to unsigned short DI = [S+4+6] (used reg = )
26514 6D68           8B46         08            mov	ax,8[bp]
26515                                           ! Debug: list unsigned int = ax+$31 (used reg = )
26516 6D6B           05                   0031  add	ax,*$31
26517 6D6E           50                         push	ax
26518                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26519 6D6F           FF76         06            push	6[bp]
26520                                           ! Debug: func () void = write_byte+0 (used reg = )
26521 6D72           E8         0D51            call	_write_byte
26522 6D75           89EC                       mov	sp,bp
26523                                           !BCC_EOS
26524                                           ! 3646  write_byte(ES,DI+0x32,0);
26525                                           ! Debug: list int = const 0 (used reg = )
26526 6D77           31C0                       xor	ax,ax
26527 6D79           50                         push	ax
26528                                           ! Debug: add int = const $32 to unsigned short DI = [S+4+6] (used reg = )
26529 6D7A           8B46         08            mov	ax,8[bp]
26530                                           ! Debug: list unsigned int = ax+$32 (used reg = )
26531 6D7D           05                   0032  add	ax,*$32
26532 6D80           50                         push	ax
26533                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26534 6D81           FF76         06            push	6[bp]
26535                                           ! Debug: func () void = write_byte+0 (used reg = )
26536 6D84           E8         0D3F            call	_write_byte
26537 6D87           89EC                       mov	sp,bp
26538                                           !BCC_EOS
26539                                           ! 3647  memsetb(ES,DI+0x33,0,13);
26540                                           ! Debug: list int = const $D (used reg = )
26541 6D89           B8                   000D  mov	ax,*$D
26542 6D8C           50                         push	ax
26543                                           ! Debug: list int = const 0 (used reg = )
26544 6D8D           31C0                       xor	ax,ax
26545 6D8F           50                         push	ax
26546                                           ! Debug: add int = const $33 to unsigned short DI = [S+6+6] (used reg = )
26547 6D90           8B46         08            mov	ax,8[bp]
26548                                           ! Debug: list unsigned int = ax+$33 (used reg = )
26549 6D93           05                   0033  add	ax,*$33
26550 6D96           50                         push	ax
26551                                           ! Debug: list unsigned short ES = [S+8+4] (used reg = )
26552 6D97           FF76         06            push	6[bp]
26553                                           ! Debug: func () void = memsetb+0 (used reg = )
26554 6D9A           E8         0C59            call	_memsetb
26555 6D9D           89EC                       mov	sp,bp
26556                                           !BCC_EOS
26557                                           ! 3648 }
26558 6D9F           5D                         pop	bp
26559 6DA0           C3                         ret
26560                                           ! 3649 static Bit16u biosfn_read_video_state_size2 (CX)
26561                                           ! Register BX used in function biosfn_read_state_info
26562                                           ! 3650      Bit16u CX;
26563                       00006DA1            _biosfn_read_video_state_size2:
26564                                           !BCC_EOS
26565                                           ! 3651 {
26566                                           ! 3652     Bit16u size;
26567                                           !BCC_EOS
26568                                           ! 3653     size = 0;
26569 6DA1           55                         push	bp
26570 6DA2           89E5                       mov	bp,sp
26571 6DA4           4C                         dec	sp
26572 6DA5           4C                         dec	sp
26573                                           ! Debug: eq int = const 0 to unsigned short size = [S+4-4] (used reg = )
26574 6DA6           31C0                       xor	ax,ax
26575 6DA8           8946         FE            mov	-2[bp],ax
26576                                           !BCC_EOS
26577                                           ! 3654     if (CX & 1) {
26578                                           ! Debug: and int = const 1 to unsigned short CX = [S+4+2] (used reg = )
26579 6DAB           8A46         04            mov	al,4[bp]
26580 6DAE           24                     01  and	al,*1
26581 6DB0           84C0                       test	al,al
26582 6DB2           74           09            je  	.233
26583                       00006DB4            .234:
26584                                           ! 3655         size += 0x46;
26585                                           ! Debug: addab int = const $46 to unsigned short size = [S+4-4] (used reg = )
26586 6DB4           8B46         FE            mov	ax,-2[bp]
26587 6DB7           05                   0046  add	ax,*$46
26588 6DBA           8946         FE            mov	-2[bp],ax
26589                                           !BCC_EOS
26590                                           ! 3656     }
26591                                           ! 3657     if (CX & 2) {
26592                       00006DBD            .233:
26593                                           ! Debug: and int = const 2 to unsigned short CX = [S+4+2] (used reg = )
26594 6DBD           8A46         04            mov	al,4[bp]
26595 6DC0           24                     02  and	al,*2
26596 6DC2           84C0                       test	al,al
26597 6DC4           74           09            je  	.235
26598                       00006DC6            .236:
26599                                           ! 3658         size += (5 + 8 + 5) * 2 + 6;
26600                                           ! Debug: addab int = const $2A to unsigned short size = [S+4-4] (used reg = )
26601 6DC6           8B46         FE            mov	ax,-2[bp]
26602 6DC9           05                   002A  add	ax,*$2A
26603 6DCC           8946         FE            mov	-2[bp],ax
26604                                           !BCC_EOS
26605                                           ! 3659     }
26606                                           ! 3660     if (CX & 4) {
26607                       00006DCF            .235:
26608                                           ! Debug: and int = const 4 to unsigned short CX = [S+4+2] (used reg = )
26609 6DCF           8A46         04            mov	al,4[bp]
26610 6DD2           24                     04  and	al,*4
26611 6DD4           84C0                       test	al,al
26612 6DD6           74           09            je  	.237
26613                       00006DD8            .238:
26614                                           ! 3661         size += 3 + 256 * 3 + 1;
26615                                           ! Debug: addab int = const $304 to unsigned short size = [S+4-4] (used reg = )
26616 6DD8           8B46         FE            mov	ax,-2[bp]
26617 6DDB           05                   0304  add	ax,#$304
26618 6DDE           8946         FE            mov	-2[bp],ax
26619                                           !BCC_EOS
26620                                           ! 3662 }
26621                                           ! 3663     return size;
26622                       00006DE1            .237:
26623 6DE1           8B46         FE            mov	ax,-2[bp]
26624 6DE4           89EC                       mov	sp,bp
26625 6DE6           5D                         pop	bp
26626 6DE7           C3                         ret
26627                                           !BCC_EOS
26628                                           ! 3664 }
26629                                           ! 3665 static void biosfn_read_video_state_size (CX, BX)
26630                                           ! 3666      Bit16u CX; Bit16u *BX;
26631                       00006DE8            _biosfn_read_video_state_size:
26632                                           !BCC_EOS
26633                                           !BCC_EOS
26634                                           ! 3667 {
26635                                           ! 3668     Bit16u ss=get_SS();
26636 6DE8           55                         push	bp
26637 6DE9           89E5                       mov	bp,sp
26638 6DEB           4C                         dec	sp
26639 6DEC           4C                         dec	sp
26640                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
26641 6DED           E8         0D3C            call	_get_SS
26642                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
26643 6DF0           8946         FE            mov	-2[bp],ax
26644                                           !BCC_EOS
26645                                           ! 3669     write_word(ss, BX, biosfn_read_video_state_size2(CX));
26646                                           ! Debug: list unsigned short CX = [S+4+2] (used reg = )
26647 6DF3           FF76         04            push	4[bp]
26648                                           ! Debug: func () unsigned short = biosfn_read_video_state_size2+0 (used reg = )
26649 6DF6           E8         FFA8            call	_biosfn_read_video_state_size2
26650 6DF9           44                         inc	sp
26651 6DFA           44                         inc	sp
26652                                           ! Debug: list unsigned short = ax+0 (used reg = )
26653 6DFB           50                         push	ax
26654                                           ! Debug: list * unsigned short BX = [S+6+4] (used reg = )
26655 6DFC           FF76         06            push	6[bp]
26656                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26657 6DFF           FF76         FE            push	-2[bp]
26658                                           ! Debug: func () void = write_word+0 (used reg = )
26659 6E02           E8         0CD9            call	_write_word
26660 6E05           83C4                   06  add	sp,*6
26661                                           !BCC_EOS
26662                                           ! 3670 }
26663 6E08           89EC                       mov	sp,bp
26664 6E0A           5D                         pop	bp
26665 6E0B           C3                         ret
26666                                           ! 3671 static Bit16u biosfn_save_video_state (CX,ES,BX)
26667                                           ! 3672      Bit16u CX;Bit16u ES;Bit16u BX;
26668                       00006E0C            _biosfn_save_video_state:
26669                                           !BCC_EOS
26670                                           !BCC_EOS
26671                                           !BCC_EOS
26672                                           ! 3673 {
26673                                           ! 3674     Bit16u i, v, crtc_addr, ar_index;
26674                                           !BCC_EOS
26675                                           ! 3675     crtc_addr = read_word(0x40, 0x63);
26676 6E0C           55                         push	bp
26677 6E0D           89E5                       mov	bp,sp
26678 6E0F           83C4                   F8  add	sp,*-8
26679                                           ! Debug: list int = const $63 (used reg = )
26680 6E12           B8                   0063  mov	ax,*$63
26681 6E15           50                         push	ax
26682                                           ! Debug: list int = const $40 (used reg = )
26683 6E16           B8                   0040  mov	ax,*$40
26684 6E19           50                         push	ax
26685                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
26686 6E1A           E8         0C96            call	_read_word
26687 6E1D           83C4                   04  add	sp,*4
26688                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$A-8] (used reg = )
26689 6E20           8946         FA            mov	-6[bp],ax
26690                                           !BCC_EOS
26691                                           ! 3676     if (CX & 1) {
26692                                           ! Debug: and int = const 1 to unsigned short CX = [S+$A+2] (used reg = )
26693 6E23           8A46         04            mov	al,4[bp]
26694 6E26           24                     01  and	al,*1
26695 6E28           84C0                       test	al,al
26696 6E2A         0F84         0266            beq 	.239
26697                       00006E2E            .23A:
26698                                           ! 3677         write_byte(ES, BX, inb(0x3c4)); BX++;
26699                                           ! Debug: list int = const $3C4 (used reg = )
26700 6E2E           B8                   03C4  mov	ax,#$3C4
26701 6E31           50                         push	ax
26702                                           ! Debug: func () unsigned char = inb+0 (used reg = )
26703 6E32           E8         0CC1            call	_inb
26704 6E35           44                         inc	sp
26705 6E36           44                         inc	sp
26706                                           ! Debug: list unsigned char = al+0 (used reg = )
26707 6E37           30E4                       xor	ah,ah
26708 6E39           50                         push	ax
26709                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
26710 6E3A           FF76         08            push	8[bp]
26711                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
26712 6E3D           FF76         06            push	6[bp]
26713                                           ! Debug: func () void = write_byte+0 (used reg = )
26714 6E40           E8         0C83            call	_write_byte
26715 6E43           83C4                   06  add	sp,*6
26716                                           !BCC_EOS
26717                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
26718 6E46           8B46         08            mov	ax,8[bp]
26719 6E49           40                         inc	ax
26720 6E4A           8946         08            mov	8[bp],ax
26721                                           !BCC_EOS
26722                                           ! 3678         write_byte(ES, BX, inb(crtc_addr)); BX++;
26723                                           ! Debug: list unsigned short crtc_addr = [S+$A-8] (used reg = )
26724 6E4D           FF76         FA            push	-6[bp]
26725                                           ! Debug: func () unsigned char = inb+0 (used reg = )
26726 6E50           E8         0CA3            call	_inb
26727 6E53           44                         inc	sp
26728 6E54           44                         inc	sp
26729                                           ! Debug: list unsigned char = al+0 (used reg = )
26730 6E55           30E4                       xor	ah,ah
26731 6E57           50                         push	ax
26732                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
26733 6E58           FF76         08            push	8[bp]
26734                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
26735 6E5B           FF76         06            push	6[bp]
26736                                           ! Debug: func () void = write_byte+0 (used reg = )
26737 6E5E           E8         0C65            call	_write_byte
26738 6E61           83C4                   06  add	sp,*6
26739                                           !BCC_EOS
26740                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
26741 6E64           8B46         08            mov	ax,8[bp]
26742 6E67           40                         inc	ax
26743 6E68           8946         08            mov	8[bp],ax
26744                                           !BCC_EOS
26745                                           ! 3679         write_byte(ES, BX, inb(0x3ce)); BX++;
26746                                           ! Debug: list int = const $3CE (used reg = )
26747 6E6B           B8                   03CE  mov	ax,#$3CE
26748 6E6E           50                         push	ax
26749                                           ! Debug: func () unsigned char = inb+0 (used reg = )
26750 6E6F           E8         0C84            call	_inb
26751 6E72           44                         inc	sp
26752 6E73           44                         inc	sp
26753                                           ! Debug: list unsigned char = al+0 (used reg = )
26754 6E74           30E4                       xor	ah,ah
26755 6E76           50                         push	ax
26756                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
26757 6E77           FF76         08            push	8[bp]
26758                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
26759 6E7A           FF76         06            push	6[bp]
26760                                           ! Debug: func () void = write_byte+0 (used reg = )
26761 6E7D           E8         0C46            call	_write_byte
26762 6E80           83C4                   06  add	sp,*6
26763                                           !BCC_EOS
26764                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
26765 6E83           8B46         08            mov	ax,8[bp]
26766 6E86           40                         inc	ax
26767 6E87           8946         08            mov	8[bp],ax
26768                                           !BCC_EOS
26769                                           ! 3680         inb(0x3da);
26770                                           ! Debug: list int = const $3DA (used reg = )
26771 6E8A           B8                   03DA  mov	ax,#$3DA
26772 6E8D           50                         push	ax
26773                                           ! Debug: func () unsigned char = inb+0 (used reg = )
26774 6E8E           E8         0C65            call	_inb
26775 6E91           44                         inc	sp
26776 6E92           44                         inc	sp
26777                                           !BCC_EOS
26778                                           ! 3681         ar_index = inb(0x3c0);
26779                                           ! Debug: list int = const $3C0 (used reg = )
26780 6E93           B8                   03C0  mov	ax,#$3C0
26781 6E96           50                         push	ax
26782                                           ! Debug: func () unsigned char = inb+0 (used reg = )
26783 6E97           E8         0C5C            call	_inb
26784 6E9A           44                         inc	sp
26785 6E9B           44                         inc	sp
26786                                           ! Debug: eq unsigned char = al+0 to unsigned short ar_index = [S+$A-$A] (used reg = )
26787 6E9C           30E4                       xor	ah,ah
26788 6E9E           8946         F8            mov	-8[bp],ax
26789                                           !BCC_EOS
26790                                           ! 3682         write_byte(ES, BX, ar_index); BX++;
26791                                           ! Debug: list unsigned short ar_index = [S+$A-$A] (used reg = )
26792 6EA1           FF76         F8            push	-8[bp]
26793                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
26794 6EA4           FF76         08            push	8[bp]
26795                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
26796 6EA7           FF76         06            push	6[bp]
26797                                           ! Debug: func () void = write_byte+0 (used reg = )
26798 6EAA           E8         0C19            call	_write_byte
26799 6EAD           83C4                   06  add	sp,*6
26800                                           !BCC_EOS
26801                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
26802 6EB0           8B46         08            mov	ax,8[bp]
26803 6EB3           40                         inc	ax
26804 6EB4           8946         08            mov	8[bp],ax
26805                                           !BCC_EOS
26806                                           ! 3683         write_byte(ES, BX, inb(0x3ca)); BX++;
26807                                           ! Debug: list int = const $3CA (used reg = )
26808 6EB7           B8                   03CA  mov	ax,#$3CA
26809 6EBA           50                         push	ax
26810                                           ! Debug: func () unsigned char = inb+0 (used reg = )
26811 6EBB           E8         0C38            call	_inb
26812 6EBE           44                         inc	sp
26813 6EBF           44                         inc	sp
26814                                           ! Debug: list unsigned char = al+0 (used reg = )
26815 6EC0           30E4                       xor	ah,ah
26816 6EC2           50                         push	ax
26817                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
26818 6EC3           FF76         08            push	8[bp]
26819                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
26820 6EC6           FF76         06            push	6[bp]
26821                                           ! Debug: func () void = write_byte+0 (used reg = )
26822 6EC9           E8         0BFA            call	_write_byte
26823 6ECC           83C4                   06  add	sp,*6
26824                                           !BCC_EOS
26825                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
26826 6ECF           8B46         08            mov	ax,8[bp]
26827 6ED2           40                         inc	ax
26828 6ED3           8946         08            mov	8[bp],ax
26829                                           !BCC_EOS
26830                                           ! 3684         for(i=1;i<=4;i++){
26831                                           ! Debug: eq int = const 1 to unsigned short i = [S+$A-4] (used reg = )
26832 6ED6           B8                   0001  mov	ax,*1
26833 6ED9           8946         FE            mov	-2[bp],ax
26834                                           !BCC_EOS
26835                                           !BCC_EOS
26836 6EDC           EB           33            jmp .23D
26837                       00006EDE            .23E:
26838                                           ! 3685             outb(0x3c4, i);
26839                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
26840 6EDE           FF76         FE            push	-2[bp]
26841                                           ! Debug: list int = const $3C4 (used reg = )
26842 6EE1           B8                   03C4  mov	ax,#$3C4
26843 6EE4           50                         push	ax
26844                                           ! Debug: func () void = outb+0 (used reg = )
26845 6EE5           E8         0C24            call	_outb
26846 6EE8           83C4                   04  add	sp,*4
26847                                           !BCC_EOS
26848                                           ! 3686             write_byte(ES, BX, inb(0x3c5)); BX++;
26849                                           ! Debug: list int = const $3C5 (used reg = )
26850 6EEB           B8                   03C5  mov	ax,#$3C5
26851 6EEE           50                         push	ax
26852                                           ! Debug: func () unsigned char = inb+0 (used reg = )
26853 6EEF           E8         0C04            call	_inb
26854 6EF2           44                         inc	sp
26855 6EF3           44                         inc	sp
26856                                           ! Debug: list unsigned char = al+0 (used reg = )
26857 6EF4           30E4                       xor	ah,ah
26858 6EF6           50                         push	ax
26859                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
26860 6EF7           FF76         08            push	8[bp]
26861                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
26862 6EFA           FF76         06            push	6[bp]
26863                                           ! Debug: func () void = write_byte+0 (used reg = )
26864 6EFD           E8         0BC6            call	_write_byte
26865 6F00           83C4                   06  add	sp,*6
26866                                           !BCC_EOS
26867                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
26868 6F03           8B46         08            mov	ax,8[bp]
26869 6F06           40                         inc	ax
26870 6F07           8946         08            mov	8[bp],ax
26871                                           !BCC_EOS
26872                                           ! 3687         }
26873                                           ! 3688         outb(0x3c4, 0);
26874                       00006F0A            .23C:
26875                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
26876 6F0A           8B46         FE            mov	ax,-2[bp]
26877 6F0D           40                         inc	ax
26878 6F0E           8946         FE            mov	-2[bp],ax
26879                       00006F11            .23D:
26880                                           ! Debug: le int = const 4 to unsigned short i = [S+$A-4] (used reg = )
26881 6F11           8B46         FE            mov	ax,-2[bp]
26882 6F14           3D                   0004  cmp	ax,*4
26883 6F17           76           C5            jbe	.23E
26884                       00006F19            .23F:
26885                       00006F19            .23B:
26886                                           ! Debug: list int = const 0 (used reg = )
26887 6F19           31C0                       xor	ax,ax
26888 6F1B           50                         push	ax
26889                                           ! Debug: list int = const $3C4 (used reg = )
26890 6F1C           B8                   03C4  mov	ax,#$3C4
26891 6F1F           50                         push	ax
26892                                           ! Debug: func () void = outb+0 (used reg = )
26893 6F20           E8         0BE9            call	_outb
26894 6F23           83C4                   04  add	sp,*4
26895                                           !BCC_EOS
26896                                           ! 3689         write_byte(ES, BX, inb(0x3c5)); BX++;
26897                                           ! Debug: list int = const $3C5 (used reg = )
26898 6F26           B8                   03C5  mov	ax,#$3C5
26899 6F29           50                         push	ax
26900                                           ! Debug: func () unsigned char = inb+0 (used reg = )
26901 6F2A           E8         0BC9            call	_inb
26902 6F2D           44                         inc	sp
26903 6F2E           44                         inc	sp
26904                                           ! Debug: list unsigned char = al+0 (used reg = )
26905 6F2F           30E4                       xor	ah,ah
26906 6F31           50                         push	ax
26907                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
26908 6F32           FF76         08            push	8[bp]
26909                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
26910 6F35           FF76         06            push	6[bp]
26911                                           ! Debug: func () void = write_byte+0 (used reg = )
26912 6F38           E8         0B8B            call	_write_byte
26913 6F3B           83C4                   06  add	sp,*6
26914                                           !BCC_EOS
26915                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
26916 6F3E           8B46         08            mov	ax,8[bp]
26917 6F41           40                         inc	ax
26918 6F42           8946         08            mov	8[bp],ax
26919                                           !BCC_EOS
26920                                           ! 3690         for(i=0;i<=0x18;i++) {
26921                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
26922 6F45           31C0                       xor	ax,ax
26923 6F47           8946         FE            mov	-2[bp],ax
26924                                           !BCC_EOS
26925                                           !BCC_EOS
26926 6F4A           EB           33            jmp .242
26927                       00006F4C            .243:
26928                                           ! 3691             outb(crtc_addr,i);
26929                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
26930 6F4C           FF76         FE            push	-2[bp]
26931                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
26932 6F4F           FF76         FA            push	-6[bp]
26933                                           ! Debug: func () void = outb+0 (used reg = )
26934 6F52           E8         0BB7            call	_outb
26935 6F55           83C4                   04  add	sp,*4
26936                                           !BCC_EOS
26937                                           ! 3692             write_byte(ES, BX, inb(crtc_addr+1)); BX++;
26938                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$A-8] (used reg = )
26939 6F58           8B46         FA            mov	ax,-6[bp]
26940                                           ! Debug: list unsigned int = ax+1 (used reg = )
26941 6F5B           40                         inc	ax
26942 6F5C           50                         push	ax
26943                                           ! Debug: func () unsigned char = inb+0 (used reg = )
26944 6F5D           E8         0B96            call	_inb
26945 6F60           44                         inc	sp
26946 6F61           44                         inc	sp
26947                                           ! Debug: list unsigned char = al+0 (used reg = )
26948 6F62           30E4                       xor	ah,ah
26949 6F64           50                         push	ax
26950                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
26951 6F65           FF76         08            push	8[bp]
26952                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
26953 6F68           FF76         06            push	6[bp]
26954                                           ! Debug: func () void = write_byte+0 (used reg = )
26955 6F6B           E8         0B58            call	_write_byte
26956 6F6E           83C4                   06  add	sp,*6
26957                                           !BCC_EOS
26958                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
26959 6F71           8B46         08            mov	ax,8[bp]
26960 6F74           40                         inc	ax
26961 6F75           8946         08            mov	8[bp],ax
26962                                           !BCC_EOS
26963                                           ! 3693         }
26964                                           ! 3694         for(i=0;i<=0x13;i++) {
26965                       00006F78            .241:
26966                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
26967 6F78           8B46         FE            mov	ax,-2[bp]
26968 6F7B           40                         inc	ax
26969 6F7C           8946         FE            mov	-2[bp],ax
26970                       00006F7F            .242:
26971                                           ! Debug: le int = const $18 to unsigned short i = [S+$A-4] (used reg = )
26972 6F7F           8B46         FE            mov	ax,-2[bp]
26973 6F82           3D                   0018  cmp	ax,*$18
26974 6F85           76           C5            jbe	.243
26975                       00006F87            .244:
26976                       00006F87            .240:
26977                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
26978 6F87           31C0                       xor	ax,ax
26979 6F89           8946         FE            mov	-2[bp],ax
26980                                           !BCC_EOS
26981                                           !BCC_EOS
26982 6F8C           EB           44            jmp .247
26983                       00006F8E            .248:
26984                                           ! 3695             inb(0x3da);
26985                                           ! Debug: list int = const $3DA (used reg = )
26986 6F8E           B8                   03DA  mov	ax,#$3DA
26987 6F91           50                         push	ax
26988                                           ! Debug: func () unsigned char = inb+0 (used reg = )
26989 6F92           E8         0B61            call	_inb
26990 6F95           44                         inc	sp
26991 6F96           44                         inc	sp
26992                                           !BCC_EOS
26993                                           ! 3696             outb(0x3c0, i | (ar_index & 0x20));
26994                                           ! Debug: and int = const $20 to unsigned short ar_index = [S+$A-$A] (used reg = )
26995 6F97           8A46         F8            mov	al,-8[bp]
26996 6F9A           24                     20  and	al,*$20
26997                                           ! Debug: or unsigned char = al+0 to unsigned short i = [S+$A-4] (used reg = )
26998                                           ! Debug: expression subtree swapping
26999 6F9C           30E4                       xor	ah,ah
27000 6F9E           0B46         FE            or	ax,-2[bp]
27001                                           ! Debug: list unsigned int = ax+0 (used reg = )
27002 6FA1           50                         push	ax
27003                                           ! Debug: list int = const $3C0 (used reg = )
27004 6FA2           B8                   03C0  mov	ax,#$3C0
27005 6FA5           50                         push	ax
27006                                           ! Debug: func () void = outb+0 (used reg = )
27007 6FA6           E8         0B63            call	_outb
27008 6FA9           83C4                   04  add	sp,*4
27009                                           !BCC_EOS
27010                                           ! 3697             write_byte(ES, BX, inb(0x3c1)); BX++;
27011                                           ! Debug: list int = const $3C1 (used reg = )
27012 6FAC           B8                   03C1  mov	ax,#$3C1
27013 6FAF           50                         push	ax
27014                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27015 6FB0           E8         0B43            call	_inb
27016 6FB3           44                         inc	sp
27017 6FB4           44                         inc	sp
27018                                           ! Debug: list unsigned char = al+0 (used reg = )
27019 6FB5           30E4                       xor	ah,ah
27020 6FB7           50                         push	ax
27021                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27022 6FB8           FF76         08            push	8[bp]
27023                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27024 6FBB           FF76         06            push	6[bp]
27025                                           ! Debug: func () void = write_byte+0 (used reg = )
27026 6FBE           E8         0B05            call	_write_byte
27027 6FC1           83C4                   06  add	sp,*6
27028                                           !BCC_EOS
27029                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27030 6FC4           8B46         08            mov	ax,8[bp]
27031 6FC7           40                         inc	ax
27032 6FC8           8946         08            mov	8[bp],ax
27033                                           !BCC_EOS
27034                                           ! 3698         }
27035                                           ! 3699         inb(0x3da);
27036                       00006FCB            .246:
27037                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27038 6FCB           8B46         FE            mov	ax,-2[bp]
27039 6FCE           40                         inc	ax
27040 6FCF           8946         FE            mov	-2[bp],ax
27041                       00006FD2            .247:
27042                                           ! Debug: le int = const $13 to unsigned short i = [S+$A-4] (used reg = )
27043 6FD2           8B46         FE            mov	ax,-2[bp]
27044 6FD5           3D                   0013  cmp	ax,*$13
27045 6FD8           76           B4            jbe	.248
27046                       00006FDA            .249:
27047                       00006FDA            .245:
27048                                           ! Debug: list int = const $3DA (used reg = )
27049 6FDA           B8                   03DA  mov	ax,#$3DA
27050 6FDD           50                         push	ax
27051                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27052 6FDE           E8         0B15            call	_inb
27053 6FE1           44                         inc	sp
27054 6FE2           44                         inc	sp
27055                                           !BCC_EOS
27056                                           ! 3700         for(i=0;i<=8;i++) {
27057                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27058 6FE3           31C0                       xor	ax,ax
27059 6FE5           8946         FE            mov	-2[bp],ax
27060                                           !BCC_EOS
27061                                           !BCC_EOS
27062 6FE8           EB           33            jmp .24C
27063                       00006FEA            .24D:
27064                                           ! 3701             outb(0x3ce,i);
27065                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
27066 6FEA           FF76         FE            push	-2[bp]
27067                                           ! Debug: list int = const $3CE (used reg = )
27068 6FED           B8                   03CE  mov	ax,#$3CE
27069 6FF0           50                         push	ax
27070                                           ! Debug: func () void = outb+0 (used reg = )
27071 6FF1           E8         0B18            call	_outb
27072 6FF4           83C4                   04  add	sp,*4
27073                                           !BCC_EOS
27074                                           ! 3702             write_byte(ES, BX, inb(0x3cf)); BX++;
27075                                           ! Debug: list int = const $3CF (used reg = )
27076 6FF7           B8                   03CF  mov	ax,#$3CF
27077 6FFA           50                         push	ax
27078                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27079 6FFB           E8         0AF8            call	_inb
27080 6FFE           44                         inc	sp
27081 6FFF           44                         inc	sp
27082                                           ! Debug: list unsigned char = al+0 (used reg = )
27083 7000           30E4                       xor	ah,ah
27084 7002           50                         push	ax
27085                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27086 7003           FF76         08            push	8[bp]
27087                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27088 7006           FF76         06            push	6[bp]
27089                                           ! Debug: func () void = write_byte+0 (used reg = )
27090 7009           E8         0ABA            call	_write_byte
27091 700C           83C4                   06  add	sp,*6
27092                                           !BCC_EOS
27093                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27094 700F           8B46         08            mov	ax,8[bp]
27095 7012           40                         inc	ax
27096 7013           8946         08            mov	8[bp],ax
27097                                           !BCC_EOS
27098                                           ! 3703         }
27099                                           ! 3704         write_word(ES, BX, crtc_addr); BX+= 2;
27100                       00007016            .24B:
27101                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27102 7016           8B46         FE            mov	ax,-2[bp]
27103 7019           40                         inc	ax
27104 701A           8946         FE            mov	-2[bp],ax
27105                       0000701D            .24C:
27106                                           ! Debug: le int = const 8 to unsigned short i = [S+$A-4] (used reg = )
27107 701D           8B46         FE            mov	ax,-2[bp]
27108 7020           3D                   0008  cmp	ax,*8
27109 7023           76           C5            jbe	.24D
27110                       00007025            .24E:
27111                       00007025            .24A:
27112                                           ! Debug: list unsigned short crtc_addr = [S+$A-8] (used reg = )
27113 7025           FF76         FA            push	-6[bp]
27114                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27115 7028           FF76         08            push	8[bp]
27116                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27117 702B           FF76         06            push	6[bp]
27118                                           ! Debug: func () void = write_word+0 (used reg = )
27119 702E           E8         0AAD            call	_write_word
27120 7031           83C4                   06  add	sp,*6
27121                                           !BCC_EOS
27122                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27123 7034           8B46         08            mov	ax,8[bp]
27124 7037           40                         inc	ax
27125 7038           40                         inc	ax
27126 7039           8946         08            mov	8[bp],ax
27127                                           !BCC_EOS
27128                                           ! 3705         write_byte(ES, BX, 0); BX++;
27129                                           ! Debug: list int = const 0 (used reg = )
27130 703C           31C0                       xor	ax,ax
27131 703E           50                         push	ax
27132                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27133 703F           FF76         08            push	8[bp]
27134                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27135 7042           FF76         06            push	6[bp]
27136                                           ! Debug: func () void = write_byte+0 (used reg = )
27137 7045           E8         0A7E            call	_write_byte
27138 7048           83C4                   06  add	sp,*6
27139                                           !BCC_EOS
27140                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27141 704B           8B46         08            mov	ax,8[bp]
27142 704E           40                         inc	ax
27143 704F           8946         08            mov	8[bp],ax
27144                                           !BCC_EOS
27145                                           ! 3706         write_byte(ES, BX, 0); BX++;
27146                                           ! Debug: list int = const 0 (used reg = )
27147 7052           31C0                       xor	ax,ax
27148 7054           50                         push	ax
27149                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27150 7055           FF76         08            push	8[bp]
27151                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27152 7058           FF76         06            push	6[bp]
27153                                           ! Debug: func () void = write_byte+0 (used reg = )
27154 705B           E8         0A68            call	_write_byte
27155 705E           83C4                   06  add	sp,*6
27156                                           !BCC_EOS
27157                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27158 7061           8B46         08            mov	ax,8[bp]
27159 7064           40                         inc	ax
27160 7065           8946         08            mov	8[bp],ax
27161                                           !BCC_EOS
27162                                           ! 3707         write_byte(ES, BX, 0); BX++;
27163                                           ! Debug: list int = const 0 (used reg = )
27164 7068           31C0                       xor	ax,ax
27165 706A           50                         push	ax
27166                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27167 706B           FF76         08            push	8[bp]
27168                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27169 706E           FF76         06            push	6[bp]
27170                                           ! Debug: func () void = write_byte+0 (used reg = )
27171 7071           E8         0A52            call	_write_byte
27172 7074           83C4                   06  add	sp,*6
27173                                           !BCC_EOS
27174                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27175 7077           8B46         08            mov	ax,8[bp]
27176 707A           40                         inc	ax
27177 707B           8946         08            mov	8[bp],ax
27178                                           !BCC_EOS
27179                                           ! 3708         write_byte(ES, BX, 0); BX++;
27180                                           ! Debug: list int = const 0 (used reg = )
27181 707E           31C0                       xor	ax,ax
27182 7080           50                         push	ax
27183                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27184 7081           FF76         08            push	8[bp]
27185                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27186 7084           FF76         06            push	6[bp]
27187                                           ! Debug: func () void = write_byte+0 (used reg = )
27188 7087           E8         0A3C            call	_write_byte
27189 708A           83C4                   06  add	sp,*6
27190                                           !BCC_EOS
27191                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27192 708D           8B46         08            mov	ax,8[bp]
27193 7090           40                         inc	ax
27194 7091           8946         08            mov	8[bp],ax
27195                                           !BCC_EOS
27196                                           ! 3709     }
27197                                           ! 3710     if (CX & 2) {
27198                       00007094            .239:
27199                                           ! Debug: and int = const 2 to unsigned short CX = [S+$A+2] (used reg = )
27200 7094           8A46         04            mov	al,4[bp]
27201 7097           24                     02  and	al,*2
27202 7099           84C0                       test	al,al
27203 709B         0F84         0270            beq 	.24F
27204                       0000709F            .250:
27205                                           ! 3711         write_byte(ES, BX, read_byte(0x40,0x49)); BX++;
27206                                           ! Debug: list int = const $49 (used reg = )
27207 709F           B8                   0049  mov	ax,*$49
27208 70A2           50                         push	ax
27209                                           ! Debug: list int = const $40 (used reg = )
27210 70A3           B8                   0040  mov	ax,*$40
27211 70A6           50                         push	ax
27212                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27213 70A7           E8         09F6            call	_read_byte
27214 70AA           83C4                   04  add	sp,*4
27215                                           ! Debug: list unsigned char = al+0 (used reg = )
27216 70AD           30E4                       xor	ah,ah
27217 70AF           50                         push	ax
27218                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27219 70B0           FF76         08            push	8[bp]
27220                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27221 70B3           FF76         06            push	6[bp]
27222                                           ! Debug: func () void = write_byte+0 (used reg = )
27223 70B6           E8         0A0D            call	_write_byte
27224 70B9           83C4                   06  add	sp,*6
27225                                           !BCC_EOS
27226                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27227 70BC           8B46         08            mov	ax,8[bp]
27228 70BF           40                         inc	ax
27229 70C0           8946         08            mov	8[bp],ax
27230                                           !BCC_EOS
27231                                           ! 3712         write_word(ES, BX, read_word(0
27232                                           ! 3712 x40,0x4A)); BX += 2;
27233                                           ! Debug: list int = const $4A (used reg = )
27234 70C3           B8                   004A  mov	ax,*$4A
27235 70C6           50                         push	ax
27236                                           ! Debug: list int = const $40 (used reg = )
27237 70C7           B8                   0040  mov	ax,*$40
27238 70CA           50                         push	ax
27239                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27240 70CB           E8         09E5            call	_read_word
27241 70CE           83C4                   04  add	sp,*4
27242                                           ! Debug: list unsigned short = ax+0 (used reg = )
27243 70D1           50                         push	ax
27244                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27245 70D2           FF76         08            push	8[bp]
27246                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27247 70D5           FF76         06            push	6[bp]
27248                                           ! Debug: func () void = write_word+0 (used reg = )
27249 70D8           E8         0A03            call	_write_word
27250 70DB           83C4                   06  add	sp,*6
27251                                           !BCC_EOS
27252                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27253 70DE           8B46         08            mov	ax,8[bp]
27254 70E1           40                         inc	ax
27255 70E2           40                         inc	ax
27256 70E3           8946         08            mov	8[bp],ax
27257                                           !BCC_EOS
27258                                           ! 3713         write_word(ES, BX, read_word(0x40,0x4C)); BX += 2;
27259                                           ! Debug: list int = const $4C (used reg = )
27260 70E6           B8                   004C  mov	ax,*$4C
27261 70E9           50                         push	ax
27262                                           ! Debug: list int = const $40 (used reg = )
27263 70EA           B8                   0040  mov	ax,*$40
27264 70ED           50                         push	ax
27265                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27266 70EE           E8         09C2            call	_read_word
27267 70F1           83C4                   04  add	sp,*4
27268                                           ! Debug: list unsigned short = ax+0 (used reg = )
27269 70F4           50                         push	ax
27270                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27271 70F5           FF76         08            push	8[bp]
27272                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27273 70F8           FF76         06            push	6[bp]
27274                                           ! Debug: func () void = write_word+0 (used reg = )
27275 70FB           E8         09E0            call	_write_word
27276 70FE           83C4                   06  add	sp,*6
27277                                           !BCC_EOS
27278                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27279 7101           8B46         08            mov	ax,8[bp]
27280 7104           40                         inc	ax
27281 7105           40                         inc	ax
27282 7106           8946         08            mov	8[bp],ax
27283                                           !BCC_EOS
27284                                           ! 3714         write_word(ES, BX, read_word(0x40,0x63)); BX += 2;
27285                                           ! Debug: list int = const $63 (used reg = )
27286 7109           B8                   0063  mov	ax,*$63
27287 710C           50                         push	ax
27288                                           ! Debug: list int = const $40 (used reg = )
27289 710D           B8                   0040  mov	ax,*$40
27290 7110           50                         push	ax
27291                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27292 7111           E8         099F            call	_read_word
27293 7114           83C4                   04  add	sp,*4
27294                                           ! Debug: list unsigned short = ax+0 (used reg = )
27295 7117           50                         push	ax
27296                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27297 7118           FF76         08            push	8[bp]
27298                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27299 711B           FF76         06            push	6[bp]
27300                                           ! Debug: func () void = write_word+0 (used reg = )
27301 711E           E8         09BD            call	_write_word
27302 7121           83C4                   06  add	sp,*6
27303                                           !BCC_EOS
27304                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27305 7124           8B46         08            mov	ax,8[bp]
27306 7127           40                         inc	ax
27307 7128           40                         inc	ax
27308 7129           8946         08            mov	8[bp],ax
27309                                           !BCC_EOS
27310                                           ! 3715         write_byte(ES, BX, read_byte(0x40,0x84)); BX++;
27311                                           ! Debug: list int = const $84 (used reg = )
27312 712C           B8                   0084  mov	ax,#$84
27313 712F           50                         push	ax
27314                                           ! Debug: list int = const $40 (used reg = )
27315 7130           B8                   0040  mov	ax,*$40
27316 7133           50                         push	ax
27317                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27318 7134           E8         0969            call	_read_byte
27319 7137           83C4                   04  add	sp,*4
27320                                           ! Debug: list unsigned char = al+0 (used reg = )
27321 713A           30E4                       xor	ah,ah
27322 713C           50                         push	ax
27323                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27324 713D           FF76         08            push	8[bp]
27325                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27326 7140           FF76         06            push	6[bp]
27327                                           ! Debug: func () void = write_byte+0 (used reg = )
27328 7143           E8         0980            call	_write_byte
27329 7146           83C4                   06  add	sp,*6
27330                                           !BCC_EOS
27331                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27332 7149           8B46         08            mov	ax,8[bp]
27333 714C           40                         inc	ax
27334 714D           8946         08            mov	8[bp],ax
27335                                           !BCC_EOS
27336                                           ! 3716         write_word(ES, BX, read_word(0x40,0x85)); BX += 2;
27337                                           ! Debug: list int = const $85 (used reg = )
27338 7150           B8                   0085  mov	ax,#$85
27339 7153           50                         push	ax
27340                                           ! Debug: list int = const $40 (used reg = )
27341 7154           B8                   0040  mov	ax,*$40
27342 7157           50                         push	ax
27343                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27344 7158           E8         0958            call	_read_word
27345 715B           83C4                   04  add	sp,*4
27346                                           ! Debug: list unsigned short = ax+0 (used reg = )
27347 715E           50                         push	ax
27348                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27349 715F           FF76         08            push	8[bp]
27350                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27351 7162           FF76         06            push	6[bp]
27352                                           ! Debug: func () void = write_word+0 (used reg = )
27353 7165           E8         0976            call	_write_word
27354 7168           83C4                   06  add	sp,*6
27355                                           !BCC_EOS
27356                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27357 716B           8B46         08            mov	ax,8[bp]
27358 716E           40                         inc	ax
27359 716F           40                         inc	ax
27360 7170           8946         08            mov	8[bp],ax
27361                                           !BCC_EOS
27362                                           ! 3717         write_byte(ES, BX, read_byte(0x40,0x87)); BX++;
27363                                           ! Debug: list int = const $87 (used reg = )
27364 7173           B8                   0087  mov	ax,#$87
27365 7176           50                         push	ax
27366                                           ! Debug: list int = const $40 (used reg = )
27367 7177           B8                   0040  mov	ax,*$40
27368 717A           50                         push	ax
27369                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27370 717B           E8         0922            call	_read_byte
27371 717E           83C4                   04  add	sp,*4
27372                                           ! Debug: list unsigned char = al+0 (used reg = )
27373 7181           30E4                       xor	ah,ah
27374 7183           50                         push	ax
27375                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27376 7184           FF76         08            push	8[bp]
27377                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27378 7187           FF76         06            push	6[bp]
27379                                           ! Debug: func () void = write_byte+0 (used reg = )
27380 718A           E8         0939            call	_write_byte
27381 718D           83C4                   06  add	sp,*6
27382                                           !BCC_EOS
27383                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27384 7190           8B46         08            mov	ax,8[bp]
27385 7193           40                         inc	ax
27386 7194           8946         08            mov	8[bp],ax
27387                                           !BCC_EOS
27388                                           ! 3718         write_byte(ES, BX, read_byte(0x40,0x88)); BX++;
27389                                           ! Debug: list int = const $88 (used reg = )
27390 7197           B8                   0088  mov	ax,#$88
27391 719A           50                         push	ax
27392                                           ! Debug: list int = const $40 (used reg = )
27393 719B           B8                   0040  mov	ax,*$40
27394 719E           50                         push	ax
27395                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27396 719F           E8         08FE            call	_read_byte
27397 71A2           83C4                   04  add	sp,*4
27398                                           ! Debug: list unsigned char = al+0 (used reg = )
27399 71A5           30E4                       xor	ah,ah
27400 71A7           50                         push	ax
27401                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27402 71A8           FF76         08            push	8[bp]
27403                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27404 71AB           FF76         06            push	6[bp]
27405                                           ! Debug: func () void = write_byte+0 (used reg = )
27406 71AE           E8         0915            call	_write_byte
27407 71B1           83C4                   06  add	sp,*6
27408                                           !BCC_EOS
27409                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27410 71B4           8B46         08            mov	ax,8[bp]
27411 71B7           40                         inc	ax
27412 71B8           8946         08            mov	8[bp],ax
27413                                           !BCC_EOS
27414                                           ! 3719         write_byte(ES, BX, read_byte(0x40,0x89)); BX++;
27415                                           ! Debug: list int = const $89 (used reg = )
27416 71BB           B8                   0089  mov	ax,#$89
27417 71BE           50                         push	ax
27418                                           ! Debug: list int = const $40 (used reg = )
27419 71BF           B8                   0040  mov	ax,*$40
27420 71C2           50                         push	ax
27421                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27422 71C3           E8         08DA            call	_read_byte
27423 71C6           83C4                   04  add	sp,*4
27424                                           ! Debug: list unsigned char = al+0 (used reg = )
27425 71C9           30E4                       xor	ah,ah
27426 71CB           50                         push	ax
27427                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27428 71CC           FF76         08            push	8[bp]
27429                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27430 71CF           FF76         06            push	6[bp]
27431                                           ! Debug: func () void = write_byte+0 (used reg = )
27432 71D2           E8         08F1            call	_write_byte
27433 71D5           83C4                   06  add	sp,*6
27434                                           !BCC_EOS
27435                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27436 71D8           8B46         08            mov	ax,8[bp]
27437 71DB           40                         inc	ax
27438 71DC           8946         08            mov	8[bp],ax
27439                                           !BCC_EOS
27440                                           ! 3720         write_word(ES, BX, read_word(0x40,0x60)); BX += 2;
27441                                           ! Debug: list int = const $60 (used reg = )
27442 71DF           B8                   0060  mov	ax,*$60
27443 71E2           50                         push	ax
27444                                           ! Debug: list int = const $40 (used reg = )
27445 71E3           B8                   0040  mov	ax,*$40
27446 71E6           50                         push	ax
27447                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27448 71E7           E8         08C9            call	_read_word
27449 71EA           83C4                   04  add	sp,*4
27450                                           ! Debug: list unsigned short = ax+0 (used reg = )
27451 71ED           50                         push	ax
27452                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27453 71EE           FF76         08            push	8[bp]
27454                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27455 71F1           FF76         06            push	6[bp]
27456                                           ! Debug: func () void = write_word+0 (used reg = )
27457 71F4           E8         08E7            call	_write_word
27458 71F7           83C4                   06  add	sp,*6
27459                                           !BCC_EOS
27460                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27461 71FA           8B46         08            mov	ax,8[bp]
27462 71FD           40                         inc	ax
27463 71FE           40                         inc	ax
27464 71FF           8946         08            mov	8[bp],ax
27465                                           !BCC_EOS
27466                                           ! 3721         for(i=0;i<8;i++) {
27467                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27468 7202           31C0                       xor	ax,ax
27469 7204           8946         FE            mov	-2[bp],ax
27470                                           !BCC_EOS
27471                                           !BCC_EOS
27472 7207           EB           2F            jmp .253
27473                       00007209            .254:
27474                                           ! 3722             write_word(ES, BX, read_word(0x40, 0x50 +2*i));
27475                                           ! Debug: mul unsigned short i = [S+$A-4] to int = const 2 (used reg = )
27476                                           ! Debug: expression subtree swapping
27477 7209           8B46         FE            mov	ax,-2[bp]
27478 720C           D1E0                       shl	ax,*1
27479                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
27480                                           ! Debug: expression subtree swapping
27481                                           ! Debug: list unsigned int = ax+$50 (used reg = )
27482 720E           05                   0050  add	ax,*$50
27483 7211           50                         push	ax
27484                                           ! Debug: list int = const $40 (used reg = )
27485 7212           B8                   0040  mov	ax,*$40
27486 7215           50                         push	ax
27487                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27488 7216           E8         089A            call	_read_word
27489 7219           83C4                   04  add	sp,*4
27490                                           ! Debug: list unsigned short = ax+0 (used reg = )
27491 721C           50                         push	ax
27492                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27493 721D           FF76         08            push	8[bp]
27494                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27495 7220           FF76         06            push	6[bp]
27496                                           ! Debug: func () void = write_word+0 (used reg = )
27497 7223           E8         08B8            call	_write_word
27498 7226           83C4                   06  add	sp,*6
27499                                           !BCC_EOS
27500                                           ! 3723             BX += 2;
27501                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27502 7229           8B46         08            mov	ax,8[bp]
27503 722C           40                         inc	ax
27504 722D           40                         inc	ax
27505 722E           8946         08            mov	8[bp],ax
27506                                           !BCC_EOS
27507                                           ! 3724         }
27508                                           ! 3725         write_word(ES, BX, read_word(0x40,0x4E)); BX += 2;
27509                       00007231            .252:
27510                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27511 7231           8B46         FE            mov	ax,-2[bp]
27512 7234           40                         inc	ax
27513 7235           8946         FE            mov	-2[bp],ax
27514                       00007238            .253:
27515                                           ! Debug: lt int = const 8 to unsigned short i = [S+$A-4] (used reg = )
27516 7238           8B46         FE            mov	ax,-2[bp]
27517 723B           3D                   0008  cmp	ax,*8
27518 723E           72           C9            jb 	.254
27519                       00007240            .255:
27520                       00007240            .251:
27521                                           ! Debug: list int = const $4E (used reg = )
27522 7240           B8                   004E  mov	ax,*$4E
27523 7243           50                         push	ax
27524                                           ! Debug: list int = const $40 (used reg = )
27525 7244           B8                   0040  mov	ax,*$40
27526 7247           50                         push	ax
27527                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27528 7248           E8         0868            call	_read_word
27529 724B           83C4                   04  add	sp,*4
27530                                           ! Debug: list unsigned short = ax+0 (used reg = )
27531 724E           50                         push	ax
27532                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27533 724F           FF76         08            push	8[bp]
27534                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27535 7252           FF76         06            push	6[bp]
27536                                           ! Debug: func () void = write_word+0 (used reg = )
27537 7255           E8         0886            call	_write_word
27538 7258           83C4                   06  add	sp,*6
27539                                           !BCC_EOS
27540                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27541 725B           8B46         08            mov	ax,8[bp]
27542 725E           40                         inc	ax
27543 725F           40                         inc	ax
27544 7260           8946         08            mov	8[bp],ax
27545                                           !BCC_EOS
27546                                           ! 3726         write_byte(ES, BX, read_byte(0x40,0x62)); BX++;
27547                                           ! Debug: list int = const $62 (used reg = )
27548 7263           B8                   0062  mov	ax,*$62
27549 7266           50                         push	ax
27550                                           ! Debug: list int = const $40 (used reg = )
27551 7267           B8                   0040  mov	ax,*$40
27552 726A           50                         push	ax
27553                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27554 726B           E8         0832            call	_read_byte
27555 726E           83C4                   04  add	sp,*4
27556                                           ! Debug: list unsigned char = al+0 (used reg = )
27557 7271           30E4                       xor	ah,ah
27558 7273           50                         push	ax
27559                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27560 7274           FF76         08            push	8[bp]
27561                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27562 7277           FF76         06            push	6[bp]
27563                                           ! Debug: func () void = write_byte+0 (used reg = )
27564 727A           E8         0849            call	_write_byte
27565 727D           83C4                   06  add	sp,*6
27566                                           !BCC_EOS
27567                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27568 7280           8B46         08            mov	ax,8[bp]
27569 7283           40                         inc	ax
27570 7284           8946         08            mov	8[bp],ax
27571                                           !BCC_EOS
27572                                           ! 3727         write_word(ES, BX, read_word(0, 0x1f * 4)); BX += 2;
27573                                           ! Debug: list int = const $7C (used reg = )
27574 7287           B8                   007C  mov	ax,*$7C
27575 728A           50                         push	ax
27576                                           ! Debug: list int = const 0 (used reg = )
27577 728B           31C0                       xor	ax,ax
27578 728D           50                         push	ax
27579                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27580 728E           E8         0822            call	_read_word
27581 7291           83C4                   04  add	sp,*4
27582                                           ! Debug: list unsigned short = ax+0 (used reg = )
27583 7294           50                         push	ax
27584                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27585 7295           FF76         08            push	8[bp]
27586                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27587 7298           FF76         06            push	6[bp]
27588                                           ! Debug: func () void = write_word+0 (used reg = )
27589 729B           E8         0840            call	_write_word
27590 729E           83C4                   06  add	sp,*6
27591                                           !BCC_EOS
27592                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27593 72A1           8B46         08            mov	ax,8[bp]
27594 72A4           40                         inc	ax
27595 72A5           40                         inc	ax
27596 72A6           8946         08            mov	8[bp],ax
27597                                           !BCC_EOS
27598                                           ! 3728         write_word(ES, BX, read_word(0, 0x1f * 4 + 2)); BX += 2;
27599                                           ! Debug: list int = const $7E (used reg = )
27600 72A9           B8                   007E  mov	ax,*$7E
27601 72AC           50                         push	ax
27602                                           ! Debug: list int = const 0 (used reg = )
27603 72AD           31C0                       xor	ax,ax
27604 72AF           50                         push	ax
27605                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27606 72B0           E8         0800            call	_read_word
27607 72B3           83C4                   04  add	sp,*4
27608                                           ! Debug: list unsigned short = ax+0 (used reg = )
27609 72B6           50                         push	ax
27610                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27611 72B7           FF76         08            push	8[bp]
27612                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27613 72BA           FF76         06            push	6[bp]
27614                                           ! Debug: func () void = write_word+0 (used reg = )
27615 72BD           E8         081E            call	_write_word
27616 72C0           83C4                   06  add	sp,*6
27617                                           !BCC_EOS
27618                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27619 72C3           8B46         08            mov	ax,8[bp]
27620 72C6           40                         inc	ax
27621 72C7           40                         inc	ax
27622 72C8           8946         08            mov	8[bp],ax
27623                                           !BCC_EOS
27624                                           ! 3729         write_word(ES, BX, read_word(0, 0x43 * 4)); BX += 2;
27625                                           ! Debug: list int = const $10C (used reg = )
27626 72CB           B8                   010C  mov	ax,#$10C
27627 72CE           50                         push	ax
27628                                           ! Debug: list int = const 0 (used reg = )
27629 72CF           31C0                       xor	ax,ax
27630 72D1           50                         push	ax
27631                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27632 72D2           E8         07DE            call	_read_word
27633 72D5           83C4                   04  add	sp,*4
27634                                           ! Debug: list unsigned short = ax+0 (used reg = )
27635 72D8           50                         push	ax
27636                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27637 72D9           FF76         08            push	8[bp]
27638                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27639 72DC           FF76         06            push	6[bp]
27640                                           ! Debug: func () void = write_word+0 (used reg = )
27641 72DF           E8         07FC            call	_write_word
27642 72E2           83C4                   06  add	sp,*6
27643                                           !BCC_EOS
27644                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27645 72E5           8B46         08            mov	ax,8[bp]
27646 72E8           40                         inc	ax
27647 72E9           40                         inc	ax
27648 72EA           8946         08            mov	8[bp],ax
27649                                           !BCC_EOS
27650                                           ! 3730         write_word(ES, BX, read_word(0, 0x43 * 4 + 2)); BX += 2;
27651                                           ! Debug: list int = const $10E (used reg = )
27652 72ED           B8                   010E  mov	ax,#$10E
27653 72F0           50                         push	ax
27654                                           ! Debug: list int = const 0 (used reg = )
27655 72F1           31C0                       xor	ax,ax
27656 72F3           50                         push	ax
27657                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27658 72F4           E8         07BC            call	_read_word
27659 72F7           83C4                   04  add	sp,*4
27660                                           ! Debug: list unsigned short = ax+0 (used reg = )
27661 72FA           50                         push	ax
27662                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27663 72FB           FF76         08            push	8[bp]
27664                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27665 72FE           FF76         06            push	6[bp]
27666                                           ! Debug: func () void = write_word+0 (used reg = )
27667 7301           E8         07DA            call	_write_word
27668 7304           83C4                   06  add	sp,*6
27669                                           !BCC_EOS
27670                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27671 7307           8B46         08            mov	ax,8[bp]
27672 730A           40                         inc	ax
27673 730B           40                         inc	ax
27674 730C           8946         08            mov	8[bp],ax
27675                                           !BCC_EOS
27676                                           ! 3731     }
27677                                           ! 3732     if (CX & 4) {
27678                       0000730F            .24F:
27679                                           ! Debug: and int = const 4 to unsigned short CX = [S+$A+2] (used reg = )
27680 730F           8A46         04            mov	al,4[bp]
27681 7312           24                     04  and	al,*4
27682 7314           84C0                       test	al,al
27683 7316         0F84         00B5            beq 	.256
27684                       0000731A            .257:
27685                                           ! 3733         write_byte(ES, BX, inb(0x3c7)); BX++;
27686                                           ! Debug: list int = const $3C7 (used reg = )
27687 731A           B8                   03C7  mov	ax,#$3C7
27688 731D           50                         push	ax
27689                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27690 731E           E8         07D5            call	_inb
27691 7321           44                         inc	sp
27692 7322           44                         inc	sp
27693                                           ! Debug: list unsigned char = al+0 (used reg = )
27694 7323           30E4                       xor	ah,ah
27695 7325           50                         push	ax
27696                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27697 7326           FF76         08            push	8[bp]
27698                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27699 7329           FF76         06            push	6[bp]
27700                                           ! Debug: func () void = write_byte+0 (used reg = )
27701 732C           E8         0797            call	_write_byte
27702 732F           83C4                   06  add	sp,*6
27703                                           !BCC_EOS
27704                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27705 7332           8B46         08            mov	ax,8[bp]
27706 7335           40                         inc	ax
27707 7336           8946         08            mov	8[bp],ax
27708                                           !BCC_EOS
27709                                           ! 3734         write_byte(ES, BX, inb(0x3c8)); BX++;
27710                                           ! Debug: list int = const $3C8 (used reg = )
27711 7339           B8                   03C8  mov	ax,#$3C8
27712 733C           50                         push	ax
27713                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27714 733D           E8         07B6            call	_inb
27715 7340           44                         inc	sp
27716 7341           44                         inc	sp
27717                                           ! Debug: list unsigned char = al+0 (used reg = )
27718 7342           30E4                       xor	ah,ah
27719 7344           50                         push	ax
27720                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27721 7345           FF76         08            push	8[bp]
27722                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27723 7348           FF76         06            push	6[bp]
27724                                           ! Debug: func () void = write_byte+0 (used reg = )
27725 734B           E8         0778            call	_write_byte
27726 734E           83C4                   06  add	sp,*6
27727                                           !BCC_EOS
27728                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27729 7351           8B46         08            mov	ax,8[bp]
27730 7354           40                         inc	ax
27731 7355           8946         08            mov	8[bp],ax
27732                                           !BCC_EOS
27733                                           ! 3735         write_byte(ES, BX, inb(0x3c6)); BX++;
27734                                           ! Debug: list int = const $3C6 (used reg = )
27735 7358           B8                   03C6  mov	ax,#$3C6
27736 735B           50                         push	ax
27737                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27738 735C           E8         0797            call	_inb
27739 735F           44                         inc	sp
27740 7360           44                         inc	sp
27741                                           ! Debug: list unsigned char = al+0 (used reg = )
27742 7361           30E4                       xor	ah,ah
27743 7363           50                         push	ax
27744                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27745 7364           FF76         08            push	8[bp]
27746                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27747 7367           FF76         06            push	6[bp]
27748                                           ! Debug: func () void = write_byte+0 (used reg = )
27749 736A           E8         0759            call	_write_byte
27750 736D           83C4                   06  add	sp,*6
27751                                           !BCC_EOS
27752                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27753 7370           8B46         08            mov	ax,8[bp]
27754 7373           40                         inc	ax
27755 7374           8946         08            mov	8[bp],ax
27756                                           !BCC_EOS
27757                                           ! 3736         outb(0x3c8,0x00);
27758                                           ! Debug: list int = const 0 (used reg = )
27759 7377           31C0                       xor	ax,ax
27760 7379           50                         push	ax
27761                                           ! Debug: list int = const $3C8 (used reg = )
27762 737A           B8                   03C8  mov	ax,#$3C8
27763 737D           50                         push	ax
27764                                           ! Debug: func () void = outb+0 (used reg = )
27765 737E           E8         078B            call	_outb
27766 7381           83C4                   04  add	sp,*4
27767                                           !BCC_EOS
27768                                           ! 3737         for(i=0;i<256*3;i++) {
27769                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27770 7384           31C0                       xor	ax,ax
27771 7386           8946         FE            mov	-2[bp],ax
27772                                           !BCC_EOS
27773                                           !BCC_EOS
27774 7389           EB           26            jmp .25A
27775                       0000738B            .25B:
27776                                           ! 3738             write_byte(ES, BX, inb(0x3c9)); BX++;
27777                                           ! Debug: list int = const $3C9 (used reg = )
27778 738B           B8                   03C9  mov	ax,#$3C9
27779 738E           50                         push	ax
27780                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27781 738F           E8         0764            call	_inb
27782 7392           44                         inc	sp
27783 7393           44                         inc	sp
27784                                           ! Debug: list unsigned char = al+0 (used reg = )
27785 7394           30E4                       xor	ah,ah
27786 7396           50                         push	ax
27787                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27788 7397           FF76         08            push	8[bp]
27789                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27790 739A           FF76         06            push	6[bp]
27791                                           ! Debug: func () void = write_byte+0 (used reg = )
27792 739D           E8         0726            call	_write_byte
27793 73A0           83C4                   06  add	sp,*6
27794                                           !BCC_EOS
27795                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27796 73A3           8B46         08            mov	ax,8[bp]
27797 73A6           40                         inc	ax
27798 73A7           8946         08            mov	8[bp],ax
27799                                           !BCC_EOS
27800                                           ! 3739         }
27801                                           ! 3740         write_byte(ES, BX, 0); BX++;
27802                       000073AA            .259:
27803                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27804 73AA           8B46         FE            mov	ax,-2[bp]
27805 73AD           40                         inc	ax
27806 73AE           8946         FE            mov	-2[bp],ax
27807                       000073B1            .25A:
27808                                           ! Debug: lt int = const $300 to unsigned short i = [S+$A-4] (used reg = )
27809 73B1           8B46         FE            mov	ax,-2[bp]
27810 73B4           3D                   0300  cmp	ax,#$300
27811 73B7           72           D2            jb 	.25B
27812                       000073B9            .25C:
27813                       000073B9            .258:
27814                                           ! Debug: list int = const 0 (used reg = )
27815 73B9           31C0                       xor	ax,ax
27816 73BB           50                         push	ax
27817                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27818 73BC           FF76         08            push	8[bp]
27819                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27820 73BF           FF76         06            push	6[bp]
27821                                           ! Debug: func () void = write_byte+0 (used reg = )
27822 73C2           E8         0701            call	_write_byte
27823 73C5           83C4                   06  add	sp,*6
27824                                           !BCC_EOS
27825                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27826 73C8           8B46         08            mov	ax,8[bp]
27827 73CB           40                         inc	ax
27828 73CC           8946         08            mov	8[bp],ax
27829                                           !BCC_EOS
27830                                           ! 3741     }
27831                                           ! 3742     return BX;
27832                       000073CF            .256:
27833 73CF           8B46         08            mov	ax,8[bp]
27834 73D2           89EC                       mov	sp,bp
27835 73D4           5D                         pop	bp
27836 73D5           C3                         ret
27837                                           !BCC_EOS
27838                                           ! 3743 }
27839                                           ! 3744 static Bit16u biosfn_restore_video_state (CX,ES,BX)
27840                                           ! 3745      Bit16u CX;Bit16u ES;Bit16u BX;
27841                       000073D6            _biosfn_restore_video_state:
27842                                           !BCC_EOS
27843                                           !BCC_EOS
27844                                           !BCC_EOS
27845                                           ! 3746 {
27846                                           ! 3747     Bit16u i, crtc_addr, v, addr1, ar_index;
27847                                           !BCC_EOS
27848                                           ! 3748     if (CX & 1) {
27849 73D6           55                         push	bp
27850 73D7           89E5                       mov	bp,sp
27851 73D9           83C4                   F6  add	sp,*-$A
27852                                           ! Debug: and int = const 1 to unsigned short CX = [S+$C+2] (used reg = )
27853 73DC           8A46         04            mov	al,4[bp]
27854 73DF           24                     01  and	al,*1
27855 73E1           84C0                       test	al,al
27856 73E3         0F84         02AA            beq 	.25D
27857                       000073E7            .25E:
27858                                           ! 3749         inb(0x3da);
27859                                           ! Debug: list int = const $3DA (used reg = )
27860 73E7           B8                   03DA  mov	ax,#$3DA
27861 73EA           50                         push	ax
27862                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27863 73EB           E8         0708            call	_inb
27864 73EE           44                         inc	sp
27865 73EF           44                         inc	sp
27866                                           !BCC_EOS
27867                                           ! 3750         crtc_addr = read_word(ES, BX + 0x40);
27868                                           ! Debug: add int = const $40 to unsigned short BX = [S+$C+6] (used reg = )
27869 73F0           8B46         08            mov	ax,8[bp]
27870                                           ! Debug: list unsigned int = ax+$40 (used reg = )
27871 73F3           05                   0040  add	ax,*$40
27872 73F6           50                         push	ax
27873                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27874 73F7           FF76         06            push	6[bp]
27875                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27876 73FA           E8         06B6            call	_read_word
27877 73FD           83C4                   04  add	sp,*4
27878                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$C-6] (used reg = )
27879 7400           8946         FC            mov	-4[bp],ax
27880                                           !BCC_EOS
27881                                           ! 3751         addr1 = BX;
27882                                           ! Debug: eq unsigned short BX = [S+$C+6] to unsigned short addr1 = [S+$C-$A] (used reg = )
27883 7403           8B46         08            mov	ax,8[bp]
27884 7406           8946         F8            mov	-8[bp],ax
27885                                           !BCC_EOS
27886                                           ! 3752         BX += 5;
27887                                           ! Debug: addab int = const 5 to unsigned short BX = [S+$C+6] (used reg = )
27888 7409           8B46         08            mov	ax,8[bp]
27889 740C           05                   0005  add	ax,*5
27890 740F           8946         08            mov	8[bp],ax
27891                                           !BCC_EOS
27892                                           ! 3753         for(i=1;i<=4;i++){
27893                                           ! Debug: eq int = const 1 to unsigned short i = [S+$C-4] (used reg = )
27894 7412           B8                   0001  mov	ax,*1
27895 7415           8946         FE            mov	-2[bp],ax
27896                                           !BCC_EOS
27897                                           !BCC_EOS
27898 7418           EB           34            jmp .261
27899                       0000741A            .262:
27900                                           ! 3754             outb(0x3c4, i);
27901                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
27902 741A           FF76         FE            push	-2[bp]
27903                                           ! Debug: list int = const $3C4 (used reg = )
27904 741D           B8                   03C4  mov	ax,#$3C4
27905 7420           50                         push	ax
27906                                           ! Debug: func () void = outb+0 (used reg = )
27907 7421           E8         06E8            call	_outb
27908 7424           83C4                   04  add	sp,*4
27909                                           !BCC_EOS
27910                                           ! 3755             outb(0x3c5, read_byte(ES, BX)); BX++;
27911                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27912 7427           FF76         08            push	8[bp]
27913                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27914 742A           FF76         06            push	6[bp]
27915                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27916 742D           E8         0670            call	_read_byte
27917 7430           83C4                   04  add	sp,*4
27918                                           ! Debug: list unsigned char = al+0 (used reg = )
27919 7433           30E4                       xor	ah,ah
27920 7435           50                         push	ax
27921                                           ! Debug: list int = const $3C5 (used reg = )
27922 7436           B8                   03C5  mov	ax,#$3C5
27923 7439           50                         push	ax
27924                                           ! Debug: func () void = outb+0 (used reg = )
27925 743A           E8         06CF            call	_outb
27926 743D           83C4                   04  add	sp,*4
27927                                           !BCC_EOS
27928                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
27929 7440           8B46         08            mov	ax,8[bp]
27930 7443           40                         inc	ax
27931 7444           8946         08            mov	8[bp],ax
27932                                           !BCC_EOS
27933                                           ! 3756         }
27934                                           ! 3757         outb(0x3c4, 0);
27935                       00007447            .260:
27936                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
27937 7447           8B46         FE            mov	ax,-2[bp]
27938 744A           40                         inc	ax
27939 744B           8946         FE            mov	-2[bp],ax
27940                       0000744E            .261:
27941                                           ! Debug: le int = const 4 to unsigned short i = [S+$C-4] (used reg = )
27942 744E           8B46         FE            mov	ax,-2[bp]
27943 7451           3D                   0004  cmp	ax,*4
27944 7454           76           C4            jbe	.262
27945                       00007456            .263:
27946                       00007456            .25F:
27947                                           ! Debug: list int = const 0 (used reg = )
27948 7456           31C0                       xor	ax,ax
27949 7458           50                         push	ax
27950                                           ! Debug: list int = const $3C4 (used reg = )
27951 7459           B8                   03C4  mov	ax,#$3C4
27952 745C           50                         push	ax
27953                                           ! Debug: func () void = outb+0 (used reg = )
27954 745D           E8         06AC            call	_outb
27955 7460           83C4                   04  add	sp,*4
27956                                           !BCC_EOS
27957                                           ! 3758         outb(0x3c5, read_byte(ES, BX)); BX++;
27958                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27959 7463           FF76         08            push	8[bp]
27960                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27961 7466           FF76         06            push	6[bp]
27962                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27963 7469           E8         0634            call	_read_byte
27964 746C           83C4                   04  add	sp,*4
27965                                           ! Debug: list unsigned char = al+0 (used reg = )
27966 746F           30E4                       xor	ah,ah
27967 7471           50                         push	ax
27968                                           ! Debug: list int = const $3C5 (used reg = )
27969 7472           B8                   03C5  mov	ax,#$3C5
27970 7475           50                         push	ax
27971                                           ! Debug: func () void = outb+0 (used reg = )
27972 7476           E8         0693            call	_outb
27973 7479           83C4                   04  add	sp,*4
27974                                           !BCC_EOS
27975                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
27976 747C           8B46         08            mov	ax,8[bp]
27977 747F           40                         inc	ax
27978 7480           8946         08            mov	8[bp],ax
27979                                           !BCC_EOS
27980                                           ! 3759         outw(crtc_addr,0x0011);
27981                                           ! Debug: list int = const $11 (used reg = )
27982 7483           B8                   0011  mov	ax,*$11
27983 7486           50                         push	ax
27984                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
27985 7487           FF76         FC            push	-4[bp]
27986                                           ! Debug: func () void = outw+0 (used reg = )
27987 748A           E8         068F            call	_outw
27988 748D           83C4                   04  add	sp,*4
27989                                           !BCC_EOS
27990                                           ! 3760         for(i=0;i<=0x18;i++) {
27991                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
27992 7490           31C0                       xor	ax,ax
27993 7492           8946         FE            mov	-2[bp],ax
27994                                           !BCC_EOS
27995                                           !BCC_EOS
27996 7495           EB           3C            jmp .266
27997                       00007497            .267:
27998                                           ! 3761             if (i != 0x11) {
27999                                           ! Debug: ne int = const $11 to unsigned short i = [S+$C-4] (used reg = )
28000 7497           8B46         FE            mov	ax,-2[bp]
28001 749A           3D                   0011  cmp	ax,*$11
28002 749D           74           26            je  	.268
28003                       0000749F            .269:
28004                                           ! 3762                 outb(crtc_addr,i);
28005                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
28006 749F           FF76         FE            push	-2[bp]
28007                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28008 74A2           FF76         FC            push	-4[bp]
28009                                           ! Debug: func () void = outb+0 (used reg = )
28010 74A5           E8         0664            call	_outb
28011 74A8           83C4                   04  add	sp,*4
28012                                           !BCC_EOS
28013                                           ! 3763                 outb(crtc_addr+1, read_byte(ES, BX));
28014                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28015 74AB           FF76         08            push	8[bp]
28016                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28017 74AE           FF76         06            push	6[bp]
28018                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28019 74B1           E8         05EC            call	_read_byte
28020 74B4           83C4                   04  add	sp,*4
28021                                           ! Debug: list unsigned char = al+0 (used reg = )
28022 74B7           30E4                       xor	ah,ah
28023 74B9           50                         push	ax
28024                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-6] (used reg = )
28025 74BA           8B46         FC            mov	ax,-4[bp]
28026                                           ! Debug: list unsigned int = ax+1 (used reg = )
28027 74BD           40                         inc	ax
28028 74BE           50                         push	ax
28029                                           ! Debug: func () void = outb+0 (used reg = )
28030 74BF           E8         064A            call	_outb
28031 74C2           83C4                   04  add	sp,*4
28032                                           !BCC_EOS
28033                                           ! 3764             }
28034                                           ! 3765             BX++;
28035                       000074C5            .268:
28036                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28037 74C5           8B46         08            mov	ax,8[bp]
28038 74C8           40                         inc	ax
28039 74C9           8946         08            mov	8[bp],ax
28040                                           !BCC_EOS
28041                                           ! 3766         }
28042                                           ! 3767         v = inb(0x3cc) & ~0x01;
28043                       000074CC            .265:
28044                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28045 74CC           8B46         FE            mov	ax,-2[bp]
28046 74CF           40                         inc	ax
28047 74D0           8946         FE            mov	-2[bp],ax
28048                       000074D3            .266:
28049                                           ! Debug: le int = const $18 to unsigned short i = [S+$C-4] (used reg = )
28050 74D3           8B46         FE            mov	ax,-2[bp]
28051 74D6           3D                   0018  cmp	ax,*$18
28052 74D9           76           BC            jbe	.267
28053                       000074DB            .26A:
28054                       000074DB            .264:
28055                                           ! Debug: list int = const $3CC (used reg = )
28056 74DB           B8                   03CC  mov	ax,#$3CC
28057 74DE           50                         push	ax
28058                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28059 74DF           E8         0614            call	_inb
28060 74E2           44                         inc	sp
28061 74E3           44                         inc	sp
28062                                           ! Debug: and int = const -2 to unsigned char = al+0 (used reg = )
28063 74E4           24                     FE  and	al,#$FE
28064                                           ! Debug: eq unsigned char = al+0 to unsigned short v = [S+$C-8] (used reg = )
28065 74E6           30E4                       xor	ah,ah
28066 74E8           8946         FA            mov	-6[bp],ax
28067                                           !BCC_EOS
28068                                           ! 3768         if (crtc_addr = 0x3d4)
28069                                           ! Debug: eq int = const $3D4 to unsigned short crtc_addr = [S+$C-6] (used reg = )
28070 74EB           B8                   03D4  mov	ax,#$3D4
28071 74EE           8946         FC            mov	-4[bp],ax
28072 74F1           85C0                       test	ax,ax
28073 74F3           74           08            je  	.26B
28074                       000074F5            .26C:
28075                                           ! 3769             v |=
28076                                           ! 3769  0x01;
28077                                           ! Debug: orab int = const 1 to unsigned short v = [S+$C-8] (used reg = )
28078 74F5           8B46         FA            mov	ax,-6[bp]
28079 74F8           0C                     01  or	al,*1
28080 74FA           8946         FA            mov	-6[bp],ax
28081                                           !BCC_EOS
28082                                           ! 3770         outb(0x3c2, v);
28083                       000074FD            .26B:
28084                                           ! Debug: list unsigned short v = [S+$C-8] (used reg = )
28085 74FD           FF76         FA            push	-6[bp]
28086                                           ! Debug: list int = const $3C2 (used reg = )
28087 7500           B8                   03C2  mov	ax,#$3C2
28088 7503           50                         push	ax
28089                                           ! Debug: func () void = outb+0 (used reg = )
28090 7504           E8         0605            call	_outb
28091 7507           83C4                   04  add	sp,*4
28092                                           !BCC_EOS
28093                                           ! 3771         outb(crtc_addr, 0x11);
28094                                           ! Debug: list int = const $11 (used reg = )
28095 750A           B8                   0011  mov	ax,*$11
28096 750D           50                         push	ax
28097                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28098 750E           FF76         FC            push	-4[bp]
28099                                           ! Debug: func () void = outb+0 (used reg = )
28100 7511           E8         05F8            call	_outb
28101 7514           83C4                   04  add	sp,*4
28102                                           !BCC_EOS
28103                                           ! 3772         outb(crtc_addr+1, read_byte(ES, BX - 0x18 + 0x11));
28104                                           ! Debug: sub int = const $18 to unsigned short BX = [S+$C+6] (used reg = )
28105 7517           8B46         08            mov	ax,8[bp]
28106                                           ! Debug: add int = const $11 to unsigned int = ax-$18 (used reg = )
28107                                           ! Debug: list unsigned int = ax-7 (used reg = )
28108 751A           05                   FFF9  add	ax,*-7
28109 751D           50                         push	ax
28110                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28111 751E           FF76         06            push	6[bp]
28112                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28113 7521           E8         057C            call	_read_byte
28114 7524           83C4                   04  add	sp,*4
28115                                           ! Debug: list unsigned char = al+0 (used reg = )
28116 7527           30E4                       xor	ah,ah
28117 7529           50                         push	ax
28118                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-6] (used reg = )
28119 752A           8B46         FC            mov	ax,-4[bp]
28120                                           ! Debug: list unsigned int = ax+1 (used reg = )
28121 752D           40                         inc	ax
28122 752E           50                         push	ax
28123                                           ! Debug: func () void = outb+0 (used reg = )
28124 752F           E8         05DA            call	_outb
28125 7532           83C4                   04  add	sp,*4
28126                                           !BCC_EOS
28127                                           ! 3773         ar_index = read_byte(ES, addr1 + 0x03);
28128                                           ! Debug: add int = const 3 to unsigned short addr1 = [S+$C-$A] (used reg = )
28129 7535           8B46         F8            mov	ax,-8[bp]
28130                                           ! Debug: list unsigned int = ax+3 (used reg = )
28131 7538           05                   0003  add	ax,*3
28132 753B           50                         push	ax
28133                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28134 753C           FF76         06            push	6[bp]
28135                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28136 753F           E8         055E            call	_read_byte
28137 7542           83C4                   04  add	sp,*4
28138                                           ! Debug: eq unsigned char = al+0 to unsigned short ar_index = [S+$C-$C] (used reg = )
28139 7545           30E4                       xor	ah,ah
28140 7547           8946         F6            mov	-$A[bp],ax
28141                                           !BCC_EOS
28142                                           ! 3774         inb(0x3da);
28143                                           ! Debug: list int = const $3DA (used reg = )
28144 754A           B8                   03DA  mov	ax,#$3DA
28145 754D           50                         push	ax
28146                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28147 754E           E8         05A5            call	_inb
28148 7551           44                         inc	sp
28149 7552           44                         inc	sp
28150                                           !BCC_EOS
28151                                           ! 3775         for(i=0;i<=0x13;i++) {
28152                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
28153 7553           31C0                       xor	ax,ax
28154 7555           8946         FE            mov	-2[bp],ax
28155                                           !BCC_EOS
28156                                           !BCC_EOS
28157 7558           EB           3C            jmp .26F
28158                       0000755A            .270:
28159                                           ! 3776             outb(0x3c0, i | (ar_index & 0x20));
28160                                           ! Debug: and int = const $20 to unsigned short ar_index = [S+$C-$C] (used reg = )
28161 755A           8A46         F6            mov	al,-$A[bp]
28162 755D           24                     20  and	al,*$20
28163                                           ! Debug: or unsigned char = al+0 to unsigned short i = [S+$C-4] (used reg = )
28164                                           ! Debug: expression subtree swapping
28165 755F           30E4                       xor	ah,ah
28166 7561           0B46         FE            or	ax,-2[bp]
28167                                           ! Debug: list unsigned int = ax+0 (used reg = )
28168 7564           50                         push	ax
28169                                           ! Debug: list int = const $3C0 (used reg = )
28170 7565           B8                   03C0  mov	ax,#$3C0
28171 7568           50                         push	ax
28172                                           ! Debug: func () void = outb+0 (used reg = )
28173 7569           E8         05A0            call	_outb
28174 756C           83C4                   04  add	sp,*4
28175                                           !BCC_EOS
28176                                           ! 3777             outb(0x3c0, read_byte(ES, BX)); BX++;
28177                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28178 756F           FF76         08            push	8[bp]
28179                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28180 7572           FF76         06            push	6[bp]
28181                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28182 7575           E8         0528            call	_read_byte
28183 7578           83C4                   04  add	sp,*4
28184                                           ! Debug: list unsigned char = al+0 (used reg = )
28185 757B           30E4                       xor	ah,ah
28186 757D           50                         push	ax
28187                                           ! Debug: list int = const $3C0 (used reg = )
28188 757E           B8                   03C0  mov	ax,#$3C0
28189 7581           50                         push	ax
28190                                           ! Debug: func () void = outb+0 (used reg = )
28191 7582           E8         0587            call	_outb
28192 7585           83C4                   04  add	sp,*4
28193                                           !BCC_EOS
28194                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28195 7588           8B46         08            mov	ax,8[bp]
28196 758B           40                         inc	ax
28197 758C           8946         08            mov	8[bp],ax
28198                                           !BCC_EOS
28199                                           ! 3778         }
28200                                           ! 3779         outb(0x3c0, ar_index);
28201                       0000758F            .26E:
28202                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28203 758F           8B46         FE            mov	ax,-2[bp]
28204 7592           40                         inc	ax
28205 7593           8946         FE            mov	-2[bp],ax
28206                       00007596            .26F:
28207                                           ! Debug: le int = const $13 to unsigned short i = [S+$C-4] (used reg = )
28208 7596           8B46         FE            mov	ax,-2[bp]
28209 7599           3D                   0013  cmp	ax,*$13
28210 759C           76           BC            jbe	.270
28211                       0000759E            .271:
28212                       0000759E            .26D:
28213                                           ! Debug: list unsigned short ar_index = [S+$C-$C] (used reg = )
28214 759E           FF76         F6            push	-$A[bp]
28215                                           ! Debug: list int = const $3C0 (used reg = )
28216 75A1           B8                   03C0  mov	ax,#$3C0
28217 75A4           50                         push	ax
28218                                           ! Debug: func () void = outb+0 (used reg = )
28219 75A5           E8         0564            call	_outb
28220 75A8           83C4                   04  add	sp,*4
28221                                           !BCC_EOS
28222                                           ! 3780         inb(0x3da);
28223                                           ! Debug: list int = const $3DA (used reg = )
28224 75AB           B8                   03DA  mov	ax,#$3DA
28225 75AE           50                         push	ax
28226                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28227 75AF           E8         0544            call	_inb
28228 75B2           44                         inc	sp
28229 75B3           44                         inc	sp
28230                                           !BCC_EOS
28231                                           ! 3781         for(i=0;i<=8;i++) {
28232                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
28233 75B4           31C0                       xor	ax,ax
28234 75B6           8946         FE            mov	-2[bp],ax
28235                                           !BCC_EOS
28236                                           !BCC_EOS
28237 75B9           EB           34            jmp .274
28238                       000075BB            .275:
28239                                           ! 3782             outb(0x3ce,i);
28240                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
28241 75BB           FF76         FE            push	-2[bp]
28242                                           ! Debug: list int = const $3CE (used reg = )
28243 75BE           B8                   03CE  mov	ax,#$3CE
28244 75C1           50                         push	ax
28245                                           ! Debug: func () void = outb+0 (used reg = )
28246 75C2           E8         0547            call	_outb
28247 75C5           83C4                   04  add	sp,*4
28248                                           !BCC_EOS
28249                                           ! 3783             outb(0x3cf, read_byte(ES, BX)); BX++;
28250                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28251 75C8           FF76         08            push	8[bp]
28252                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28253 75CB           FF76         06            push	6[bp]
28254                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28255 75CE           E8         04CF            call	_read_byte
28256 75D1           83C4                   04  add	sp,*4
28257                                           ! Debug: list unsigned char = al+0 (used reg = )
28258 75D4           30E4                       xor	ah,ah
28259 75D6           50                         push	ax
28260                                           ! Debug: list int = const $3CF (used reg = )
28261 75D7           B8                   03CF  mov	ax,#$3CF
28262 75DA           50                         push	ax
28263                                           ! Debug: func () void = outb+0 (used reg = )
28264 75DB           E8         052E            call	_outb
28265 75DE           83C4                   04  add	sp,*4
28266                                           !BCC_EOS
28267                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28268 75E1           8B46         08            mov	ax,8[bp]
28269 75E4           40                         inc	ax
28270 75E5           8946         08            mov	8[bp],ax
28271                                           !BCC_EOS
28272                                           ! 3784         }
28273                                           ! 3785         BX += 2;
28274                       000075E8            .273:
28275                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28276 75E8           8B46         FE            mov	ax,-2[bp]
28277 75EB           40                         inc	ax
28278 75EC           8946         FE            mov	-2[bp],ax
28279                       000075EF            .274:
28280                                           ! Debug: le int = const 8 to unsigned short i = [S+$C-4] (used reg = )
28281 75EF           8B46         FE            mov	ax,-2[bp]
28282 75F2           3D                   0008  cmp	ax,*8
28283 75F5           76           C4            jbe	.275
28284                       000075F7            .276:
28285                       000075F7            .272:
28286                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28287 75F7           8B46         08            mov	ax,8[bp]
28288 75FA           40                         inc	ax
28289 75FB           40                         inc	ax
28290 75FC           8946         08            mov	8[bp],ax
28291                                           !BCC_EOS
28292                                           ! 3786         BX += 4;
28293                                           ! Debug: addab int = const 4 to unsigned short BX = [S+$C+6] (used reg = )
28294 75FF           8B46         08            mov	ax,8[bp]
28295 7602           05                   0004  add	ax,*4
28296 7605           8946         08            mov	8[bp],ax
28297                                           !BCC_EOS
28298                                           ! 3787         outb(0x3c4, read_byte(ES, addr1)); addr1++;
28299                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
28300 7608           FF76         F8            push	-8[bp]
28301                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28302 760B           FF76         06            push	6[bp]
28303                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28304 760E           E8         048F            call	_read_byte
28305 7611           83C4                   04  add	sp,*4
28306                                           ! Debug: list unsigned char = al+0 (used reg = )
28307 7614           30E4                       xor	ah,ah
28308 7616           50                         push	ax
28309                                           ! Debug: list int = const $3C4 (used reg = )
28310 7617           B8                   03C4  mov	ax,#$3C4
28311 761A           50                         push	ax
28312                                           ! Debug: func () void = outb+0 (used reg = )
28313 761B           E8         04EE            call	_outb
28314 761E           83C4                   04  add	sp,*4
28315                                           !BCC_EOS
28316                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28317 7621           8B46         F8            mov	ax,-8[bp]
28318 7624           40                         inc	ax
28319 7625           8946         F8            mov	-8[bp],ax
28320                                           !BCC_EOS
28321                                           ! 3788         outb(crtc_addr, read_byte(ES, addr1)); addr1++;
28322                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
28323 7628           FF76         F8            push	-8[bp]
28324                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28325 762B           FF76         06            push	6[bp]
28326                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28327 762E           E8         046F            call	_read_byte
28328 7631           83C4                   04  add	sp,*4
28329                                           ! Debug: list unsigned char = al+0 (used reg = )
28330 7634           30E4                       xor	ah,ah
28331 7636           50                         push	ax
28332                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28333 7637           FF76         FC            push	-4[bp]
28334                                           ! Debug: func () void = outb+0 (used reg = )
28335 763A           E8         04CF            call	_outb
28336 763D           83C4                   04  add	sp,*4
28337                                           !BCC_EOS
28338                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28339 7640           8B46         F8            mov	ax,-8[bp]
28340 7643           40                         inc	ax
28341 7644           8946         F8            mov	-8[bp],ax
28342                                           !BCC_EOS
28343                                           ! 3789         outb(0x3ce, read_byte(ES, addr1)); addr1++;
28344                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
28345 7647           FF76         F8            push	-8[bp]
28346                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28347 764A           FF76         06            push	6[bp]
28348                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28349 764D           E8         0450            call	_read_byte
28350 7650           83C4                   04  add	sp,*4
28351                                           ! Debug: list unsigned char = al+0 (used reg = )
28352 7653           30E4                       xor	ah,ah
28353 7655           50                         push	ax
28354                                           ! Debug: list int = const $3CE (used reg = )
28355 7656           B8                   03CE  mov	ax,#$3CE
28356 7659           50                         push	ax
28357                                           ! Debug: func () void = outb+0 (used reg = )
28358 765A           E8         04AF            call	_outb
28359 765D           83C4                   04  add	sp,*4
28360                                           !BCC_EOS
28361                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28362 7660           8B46         F8            mov	ax,-8[bp]
28363 7663           40                         inc	ax
28364 7664           8946         F8            mov	-8[bp],ax
28365                                           !BCC_EOS
28366                                           ! 3790         addr1++;
28367                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28368 7667           8B46         F8            mov	ax,-8[bp]
28369 766A           40                         inc	ax
28370 766B           8946         F8            mov	-8[bp],ax
28371                                           !BCC_EOS
28372                                           ! 3791         outb(crtc_addr - 0x4 + 0xa, read_byte(ES, addr1)); addr1++;
28373                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
28374 766E           FF76         F8            push	-8[bp]
28375                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28376 7671           FF76         06            push	6[bp]
28377                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28378 7674           E8         0429            call	_read_byte
28379 7677           83C4                   04  add	sp,*4
28380                                           ! Debug: list unsigned char = al+0 (used reg = )
28381 767A           30E4                       xor	ah,ah
28382 767C           50                         push	ax
28383                                           ! Debug: sub int = const 4 to unsigned short crtc_addr = [S+$E-6] (used reg = )
28384 767D           8B46         FC            mov	ax,-4[bp]
28385                                           ! Debug: add int = const $A to unsigned int = ax-4 (used reg = )
28386                                           ! Debug: list unsigned int = ax+6 (used reg = )
28387 7680           05                   0006  add	ax,*6
28388 7683           50                         push	ax
28389                                           ! Debug: func () void = outb+0 (used reg = )
28390 7684           E8         0485            call	_outb
28391 7687           83C4                   04  add	sp,*4
28392                                           !BCC_EOS
28393                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28394 768A           8B46         F8            mov	ax,-8[bp]
28395 768D           40                         inc	ax
28396 768E           8946         F8            mov	-8[bp],ax
28397                                           !BCC_EOS
28398                                           ! 3792     }
28399                                           ! 3793     if (CX & 2) {
28400                       00007691            .25D:
28401                                           ! Debug: and int = const 2 to unsigned short CX = [S+$C+2] (used reg = )
28402 7691           8A46         04            mov	al,4[bp]
28403 7694           24                     02  and	al,*2
28404 7696           84C0                       test	al,al
28405 7698         0F84         0270            beq 	.277
28406                       0000769C            .278:
28407                                           ! 3794         write_byte(0x40,0x49, read_byte(ES, BX)); BX++;
28408                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28409 769C           FF76         08            push	8[bp]
28410                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28411 769F           FF76         06            push	6[bp]
28412                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28413 76A2           E8         03FB            call	_read_byte
28414 76A5           83C4                   04  add	sp,*4
28415                                           ! Debug: list unsigned char = al+0 (used reg = )
28416 76A8           30E4                       xor	ah,ah
28417 76AA           50                         push	ax
28418                                           ! Debug: list int = const $49 (used reg = )
28419 76AB           B8                   0049  mov	ax,*$49
28420 76AE           50                         push	ax
28421                                           ! Debug: list int = const $40 (used reg = )
28422 76AF           B8                   0040  mov	ax,*$40
28423 76B2           50                         push	ax
28424                                           ! Debug: func () void = write_byte+0 (used reg = )
28425 76B3           E8         0410            call	_write_byte
28426 76B6           83C4                   06  add	sp,*6
28427                                           !BCC_EOS
28428                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28429 76B9           8B46         08            mov	ax,8[bp]
28430 76BC           40                         inc	ax
28431 76BD           8946         08            mov	8[bp],ax
28432                                           !BCC_EOS
28433                                           ! 3795         write_word(0x40,0x4A, read_word(ES, BX)); BX += 2;
28434                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28435 76C0           FF76         08            push	8[bp]
28436                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28437 76C3           FF76         06            push	6[bp]
28438                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28439 76C6           E8         03EA            call	_read_word
28440 76C9           83C4                   04  add	sp,*4
28441                                           ! Debug: list unsigned short = ax+0 (used reg = )
28442 76CC           50                         push	ax
28443                                           ! Debug: list int = const $4A (used reg = )
28444 76CD           B8                   004A  mov	ax,*$4A
28445 76D0           50                         push	ax
28446                                           ! Debug: list int = const $40 (used reg = )
28447 76D1           B8                   0040  mov	ax,*$40
28448 76D4           50                         push	ax
28449                                           ! Debug: func () void = write_word+0 (used reg = )
28450 76D5           E8         0406            call	_write_word
28451 76D8           83C4                   06  add	sp,*6
28452                                           !BCC_EOS
28453                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28454 76DB           8B46         08            mov	ax,8[bp]
28455 76DE           40                         inc	ax
28456 76DF           40                         inc	ax
28457 76E0           8946         08            mov	8[bp],ax
28458                                           !BCC_EOS
28459                                           ! 3796         write_word(0x40,0x4C, read_word(ES, BX)); BX += 2;
28460                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28461 76E3           FF76         08            push	8[bp]
28462                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28463 76E6           FF76         06            push	6[bp]
28464                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28465 76E9           E8         03C7            call	_read_word
28466 76EC           83C4                   04  add	sp,*4
28467                                           ! Debug: list unsigned short = ax+0 (used reg = )
28468 76EF           50                         push	ax
28469                                           ! Debug: list int = const $4C (used reg = )
28470 76F0           B8                   004C  mov	ax,*$4C
28471 76F3           50                         push	ax
28472                                           ! Debug: list int = const $40 (used reg = )
28473 76F4           B8                   0040  mov	ax,*$40
28474 76F7           50                         push	ax
28475                                           ! Debug: func () void = write_word+0 (used reg = )
28476 76F8           E8         03E3            call	_write_word
28477 76FB           83C4                   06  add	sp,*6
28478                                           !BCC_EOS
28479                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28480 76FE           8B46         08            mov	ax,8[bp]
28481 7701           40                         inc	ax
28482 7702           40                         inc	ax
28483 7703           8946         08            mov	8[bp],ax
28484                                           !BCC_EOS
28485                                           ! 3797         write_word(0x40,0x63, read_word(ES, BX)); BX += 2;
28486                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28487 7706           FF76         08            push	8[bp]
28488                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28489 7709           FF76         06            push	6[bp]
28490                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28491 770C           E8         03A4            call	_read_word
28492 770F           83C4                   04  add	sp,*4
28493                                           ! Debug: list unsigned short = ax+0 (used reg = )
28494 7712           50                         push	ax
28495                                           ! Debug: list int = const $63 (used reg = )
28496 7713           B8                   0063  mov	ax,*$63
28497 7716           50                         push	ax
28498                                           ! Debug: list int = const $40 (used reg = )
28499 7717           B8                   0040  mov	ax,*$40
28500 771A           50                         push	ax
28501                                           ! Debug: func () void = write_word+0 (used reg = )
28502 771B           E8         03C0            call	_write_word
28503 771E           83C4                   06  add	sp,*6
28504                                           !BCC_EOS
28505                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28506 7721           8B46         08            mov	ax,8[bp]
28507 7724           40                         inc	ax
28508 7725           40                         inc	ax
28509 7726           8946         08            mov	8[bp],ax
28510                                           !BCC_EOS
28511                                           ! 3798         write_byte(0x40,0x84, read_byte(ES, BX)); BX++;
28512                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28513 7729           FF76         08            push	8[bp]
28514                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28515 772C           FF76         06            push	6[bp]
28516                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28517 772F           E8         036E            call	_read_byte
28518 7732           83C4                   04  add	sp,*4
28519                                           ! Debug: list unsigned char = al+0 (used reg = )
28520 7735           30E4                       xor	ah,ah
28521 7737           50                         push	ax
28522                                           ! Debug: list int = const $84 (used reg = )
28523 7738           B8                   0084  mov	ax,#$84
28524 773B           50                         push	ax
28525                                           ! Debug: list int = const $40 (used reg = )
28526 773C           B8                   0040  mov	ax,*$40
28527 773F           50                         push	ax
28528                                           ! Debug: func () void = write_byte+0 (used reg = )
28529 7740           E8         0383            call	_write_byte
28530 7743           83C4                   06  add	sp,*6
28531                                           !BCC_EOS
28532                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28533 7746           8B46         08            mov	ax,8[bp]
28534 7749           40                         inc	ax
28535 774A           8946         08            mov	8[bp],ax
28536                                           !BCC_EOS
28537                                           ! 3799         write_word(0x40,0x85, read_word(ES, BX)); BX += 2;
28538                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28539 774D           FF76         08            push	8[bp]
28540                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28541 7750           FF76         06            push	6[bp]
28542                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28543 7753           E8         035D            call	_read_word
28544 7756           83C4                   04  add	sp,*4
28545                                           ! Debug: list unsigned short = ax+0 (used reg = )
28546 7759           50                         push	ax
28547                                           ! Debug: list int = const $85 (used reg = )
28548 775A           B8                   0085  mov	ax,#$85
28549 775D           50                         push	ax
28550                                           ! Debug: list int = const $40 (used reg = )
28551 775E           B8                   0040  mov	ax,*$40
28552 7761           50                         push	ax
28553                                           ! Debug: func () void = write_word+0 (used reg = )
28554 7762           E8         0379            call	_write_word
28555 7765           83C4                   06  add	sp,*6
28556                                           !BCC_EOS
28557                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28558 7768           8B46         08            mov	ax,8[bp]
28559 776B           40                         inc	ax
28560 776C           40                         inc	ax
28561 776D           8946         08            mov	8[bp],ax
28562                                           !BCC_EOS
28563                                           ! 3800         write_byte(0x40,0x87, read_byte(ES, BX)); BX++;
28564                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28565 7770           FF76         08            push	8[bp]
28566                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28567 7773           FF76         06            push	6[bp]
28568                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28569 7776           E8         0327            call	_read_byte
28570 7779           83C4                   04  add	sp,*4
28571                                           ! Debug: list unsigned char = al+0 (used reg = )
28572 777C           30E4                       xor	ah,ah
28573 777E           50                         push	ax
28574                                           ! Debug: list int = const $87 (used reg = )
28575 777F           B8                   0087  mov	ax,#$87
28576 7782           50                         push	ax
28577                                           ! Debug: list int = const $40 (used reg = )
28578 7783           B8                   0040  mov	ax,*$40
28579 7786           50                         push	ax
28580                                           ! Debug: func () void = write_byte+0 (used reg = )
28581 7787           E8         033C            call	_write_byte
28582 778A           83C4                   06  add	sp,*6
28583                                           !BCC_EOS
28584                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28585 778D           8B46         08            mov	ax,8[bp]
28586 7790           40                         inc	ax
28587 7791           8946         08            mov	8[bp],ax
28588                                           !BCC_EOS
28589                                           ! 3801         write_byte(0x40,0x88, read_byte(ES, BX)); BX++;
28590                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28591 7794           FF76         08            push	8[bp]
28592                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28593 7797           FF76         06            push	6[bp]
28594                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28595 779A           E8         0303            call	_read_byte
28596 779D           83C4                   04  add	sp,*4
28597                                           ! Debug: list unsigned char = al+0 (used reg = )
28598 77A0           30E4                       xor	ah,ah
28599 77A2           50                         push	ax
28600                                           ! Debug: list int = const $88 (used reg = )
28601 77A3           B8                   0088  mov	ax,#$88
28602 77A6           50                         push	ax
28603                                           ! Debug: list int = const $40 (used reg = )
28604 77A7           B8                   0040  mov	ax,*$40
28605 77AA           50                         push	ax
28606                                           ! Debug: func () void = write_byte+0 (used reg = )
28607 77AB           E8         0318            call	_write_byte
28608 77AE           83C4                   06  add	sp,*6
28609                                           !BCC_EOS
28610                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28611 77B1           8B46         08            mov	ax,8[bp]
28612 77B4           40                         inc	ax
28613 77B5           8946         08            mov	8[bp],ax
28614                                           !BCC_EOS
28615                                           ! 3802         write_byte(0x40,0x89, read_byte(ES, BX)); BX++;
28616                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28617 77B8           FF76         08            push	8[bp]
28618                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28619 77BB           FF76         06            push	6[bp]
28620                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28621 77BE           E8         02DF            call	_read_byte
28622 77C1           83C4                   04  add	sp,*4
28623                                           ! Debug: list unsigned char = al+0 (used reg = )
28624 77C4           30E4                       xor	ah,ah
28625 77C6           50                         push	ax
28626                                           ! Debug: list int = const $89 (used reg = )
28627 77C7           B8                   0089  mov	ax,#$89
28628 77CA           50                         push	ax
28629                                           ! Debug: list int = const $40 (used reg = )
28630 77CB           B8                   0040  mov	ax,*$40
28631 77CE           50                         push	ax
28632                                           ! Debug: func () void = write_byte+0 (used reg = )
28633 77CF           E8         02F4            call	_write_byte
28634 77D2           83C4                   06  add	sp,*6
28635                                           !BCC_EOS
28636                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28637 77D5           8B46         08            mov	ax,8[bp]
28638 77D8           40                         inc	ax
28639 77D9           8946         08            mov	8[bp],ax
28640                                           !BCC_EOS
28641                                           ! 3803         write_word(0x40,0x60, read_word(ES, BX)); BX += 2;
28642                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28643 77DC           FF76         08            push	8[bp]
28644                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28645 77DF           FF76         06            push	6[bp]
28646                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28647 77E2           E8         02CE            call	_read_word
28648 77E5           83C4                   04  add	sp,*4
28649                                           ! Debug: list unsigned short = ax+0 (used reg = )
28650 77E8           50                         push	ax
28651                                           ! Debug: list int = const $60 (used reg = )
28652 77E9           B8                   0060  mov	ax,*$60
28653 77EC           50                         push	ax
28654                                           ! Debug: list int = const $40 (used reg = )
28655 77ED           B8                   0040  mov	ax,*$40
28656 77F0           50                         push	ax
28657                                           ! Debug: func () void = write_word+0 (used reg = )
28658 77F1           E8         02EA            call	_write_word
28659 77F4           83C4                   06  add	sp,*6
28660                                           !BCC_EOS
28661                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28662 77F7           8B46         08            mov	ax,8[bp]
28663 77FA           40                         inc	ax
28664 77FB           40                         inc	ax
28665 77FC           8946         08            mov	8[bp],ax
28666                                           !BCC_EOS
28667                                           ! 3804         for(i=0;i<8;i++) {
28668                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
28669 77FF           31C0                       xor	ax,ax
28670 7801           8946         FE            mov	-2[bp],ax
28671                                           !BCC_EOS
28672                                           !BCC_EOS
28673 7804           EB           2F            jmp .27B
28674                       00007806            .27C:
28675                                           ! 3805             write_word(0x40, 0x50 +2*i, read_word(ES, BX));
28676                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28677 7806           FF76         08            push	8[bp]
28678                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28679 7809           FF76         06            push	6[bp]
28680                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28681 780C           E8         02A4            call	_read_word
28682 780F           83C4                   04  add	sp,*4
28683                                           ! Debug: list unsigned short = ax+0 (used reg = )
28684 7812           50                         push	ax
28685                                           ! Debug: mul unsigned short i = [S+$E-4] to int = const 2 (used reg = )
28686                                           ! Debug: expression subtree swapping
28687 7813           8B46         FE            mov	ax,-2[bp]
28688 7816           D1E0                       shl	ax,*1
28689                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
28690                                           ! Debug: expression subtree swapping
28691                                           ! Debug: list unsigned int = ax+$50 (used reg = )
28692 7818           05                   0050  add	ax,*$50
28693 781B           50                         push	ax
28694                                           ! Debug: list int = const $40 (used reg = )
28695 781C           B8                   0040  mov	ax,*$40
28696 781F           50                         push	ax
28697                                           ! Debug: func () void = write_word+0 (used reg = )
28698 7820           E8         02BB            call	_write_word
28699 7823           83C4                   06  add	sp,*6
28700                                           !BCC_EOS
28701                                           ! 3806             BX += 2;
28702                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28703 7826           8B46         08            mov	ax,8[bp]
28704 7829           40                         inc	ax
28705 782A           40                         inc	ax
28706 782B           8946         08            mov	8[bp],ax
28707                                           !BCC_EOS
28708                                           ! 3807         }
28709                                           ! 3808         write_word(0x40,0x4E, read_word(ES, BX)); BX += 2;
28710                       0000782E            .27A:
28711                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28712 782E           8B46         FE            mov	ax,-2[bp]
28713 7831           40                         inc	ax
28714 7832           8946         FE            mov	-2[bp],ax
28715                       00007835            .27B:
28716                                           ! Debug: lt int = const 8 to unsigned short i = [S+$C-4] (used reg = )
28717 7835           8B46         FE            mov	ax,-2[bp]
28718 7838           3D                   0008  cmp	ax,*8
28719 783B           72           C9            jb 	.27C
28720                       0000783D            .27D:
28721                       0000783D            .279:
28722                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28723 783D           FF76         08            push	8[bp]
28724                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28725 7840           FF76         06            push	6[bp]
28726                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28727 7843           E8         026D            call	_read_word
28728 7846           83C4                   04  add	sp,*4
28729                                           ! Debug: list unsigned short = ax+0 (used reg = )
28730 7849           50                         push	ax
28731                                           ! Debug: list int = const $4E (used reg = )
28732 784A           B8                   004E  mov	ax,*$4E
28733 784D           50                         push	ax
28734                                           ! Debug: list int = const $40 (used reg = )
28735 784E           B8                   0040  mov	ax,*$40
28736 7851           50                         push	ax
28737                                           ! Debug: func () void = write_word+0 (used reg = )
28738 7852           E8         0289            call	_write_word
28739 7855           83C4                   06  add	sp,*6
28740                                           !BCC_EOS
28741                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28742 7858           8B46         08            mov	ax,8[bp]
28743 785B           40                         inc	ax
28744 785C           40                         inc	ax
28745 785D           8946         08            mov	8[bp],ax
28746                                           !BCC_EOS
28747                                           ! 3809         write_byte(0x40,0x62, read_byte(ES, BX)); BX++;
28748                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28749 7860           FF76         08            push	8[bp]
28750                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28751 7863           FF76         06            push	6[bp]
28752                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28753 7866           E8         0237            call	_read_byte
28754 7869           83C4                   04  add	sp,*4
28755                                           ! Debug: list unsigned char = al+0 (used reg = )
28756 786C           30E4                       xor	ah,ah
28757 786E           50                         push	ax
28758                                           ! Debug: list int = const $62 (used reg = )
28759 786F           B8                   0062  mov	ax,*$62
28760 7872           50                         push	ax
28761                                           ! Debug: list int = const $40 (used reg = )
28762 7873           B8                   0040  mov	ax,*$40
28763 7876           50                         push	ax
28764                                           ! Debug: func () void = write_byte+0 (used reg = )
28765 7877           E8         024C            call	_write_byte
28766 787A           83C4                   06  add	sp,*6
28767                                           !BCC_EOS
28768                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28769 787D           8B46         08            mov	ax,8[bp]
28770 7880           40                         inc	ax
28771 7881           8946         08            mov	8[bp],ax
28772                                           !BCC_EOS
28773                                           ! 3810         write_word(0, 0x1f * 4, read_word(ES, BX)); BX += 2;
28774                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28775 7884           FF76         08            push	8[bp]
28776                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28777 7887           FF76         06            push	6[bp]
28778                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28779 788A           E8         0226            call	_read_word
28780 788D           83C4                   04  add	sp,*4
28781                                           ! Debug: list unsigned short = ax+0 (used reg = )
28782 7890           50                         push	ax
28783                                           ! Debug: list int = const $7C (used reg = )
28784 7891           B8                   007C  mov	ax,*$7C
28785 7894           50                         push	ax
28786                                           ! Debug: list int = const 0 (used reg = )
28787 7895           31C0                       xor	ax,ax
28788 7897           50                         push	ax
28789                                           ! Debug: func () void = write_word+0 (used reg = )
28790 7898           E8         0243            call	_write_word
28791 789B           83C4                   06  add	sp,*6
28792                                           !BCC_EOS
28793                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28794 789E           8B46         08            mov	ax,8[bp]
28795 78A1           40                         inc	ax
28796 78A2           40                         inc	ax
28797 78A3           8946         08            mov	8[bp],ax
28798                                           !BCC_EOS
28799                                           ! 3811         write_word(0, 0x1f * 4 + 2, read_word(ES, BX)); BX += 2;
28800                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28801 78A6           FF76         08            push	8[bp]
28802                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28803 78A9           FF76         06            push	6[bp]
28804                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28805 78AC           E8         0204            call	_read_word
28806 78AF           83C4                   04  add	sp,*4
28807                                           ! Debug: list unsigned short = ax+0 (used reg = )
28808 78B2           50                         push	ax
28809                                           ! Debug: list int = const $7E (used reg = )
28810 78B3           B8                   007E  mov	ax,*$7E
28811 78B6           50                         push	ax
28812                                           ! Debug: list int = const 0 (used reg = )
28813 78B7           31C0                       xor	ax,ax
28814 78B9           50                         push	ax
28815                                           ! Debug: func () void = write_word+0 (used reg = )
28816 78BA           E8         0221            call	_write_word
28817 78BD           83C4                   06  add	sp,*6
28818                                           !BCC_EOS
28819                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28820 78C0           8B46         08            mov	ax,8[bp]
28821 78C3           40                         inc	ax
28822 78C4           40                         inc	ax
28823 78C5           8946         08            mov	8[bp],ax
28824                                           !BCC_EOS
28825                                           ! 3812         write_word(0, 0x43 * 4, read_word(ES, BX)); BX += 2;
28826                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28827 78C8           FF76         08            push	8[bp]
28828                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28829 78CB           FF76         06            push	6[bp]
28830                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28831 78CE           E8         01E2            call	_read_word
28832 78D1           83C4                   04  add	sp,*4
28833                                           ! Debug: list unsigned short = ax+0 (used reg = )
28834 78D4           50                         push	ax
28835                                           ! Debug: list int = const $10C (used reg = )
28836 78D5           B8                   010C  mov	ax,#$10C
28837 78D8           50                         push	ax
28838                                           ! Debug: list int = const 0 (used reg = )
28839 78D9           31C0                       xor	ax,ax
28840 78DB           50                         push	ax
28841                                           ! Debug: func () void = write_word+0 (used reg = )
28842 78DC           E8         01FF            call	_write_word
28843 78DF           83C4                   06  add	sp,*6
28844                                           !BCC_EOS
28845                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28846 78E2           8B46         08            mov	ax,8[bp]
28847 78E5           40                         inc	ax
28848 78E6           40                         inc	ax
28849 78E7           8946         08            mov	8[bp],ax
28850                                           !BCC_EOS
28851                                           ! 3813         write_word(0, 0x43 * 4 + 2, read_word(ES, BX)); BX += 2;
28852                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28853 78EA           FF76         08            push	8[bp]
28854                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28855 78ED           FF76         06            push	6[bp]
28856                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28857 78F0           E8         01C0            call	_read_word
28858 78F3           83C4                   04  add	sp,*4
28859                                           ! Debug: list unsigned short = ax+0 (used reg = )
28860 78F6           50                         push	ax
28861                                           ! Debug: list int = const $10E (used reg = )
28862 78F7           B8                   010E  mov	ax,#$10E
28863 78FA           50                         push	ax
28864                                           ! Debug: list int = const 0 (used reg = )
28865 78FB           31C0                       xor	ax,ax
28866 78FD           50                         push	ax
28867                                           ! Debug: func () void = write_word+0 (used reg = )
28868 78FE           E8         01DD            call	_write_word
28869 7901           83C4                   06  add	sp,*6
28870                                           !BCC_EOS
28871                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28872 7904           8B46         08            mov	ax,8[bp]
28873 7907           40                         inc	ax
28874 7908           40                         inc	ax
28875 7909           8946         08            mov	8[bp],ax
28876                                           !BCC_EOS
28877                                           ! 3814     }
28878                                           ! 3815     if (CX & 4) {
28879                       0000790C            .277:
28880                                           ! Debug: and int = const 4 to unsigned short CX = [S+$C+2] (used reg = )
28881 790C           8A46         04            mov	al,4[bp]
28882 790F           24                     04  and	al,*4
28883 7911           84C0                       test	al,al
28884 7913         0F84         0096            beq 	.27E
28885                       00007917            .27F:
28886                                           ! 3816         BX++;
28887                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28888 7917           8B46         08            mov	ax,8[bp]
28889 791A           40                         inc	ax
28890 791B           8946         08            mov	8[bp],ax
28891                                           !BCC_EOS
28892                                           ! 3817         v = read_byte(ES, BX); BX++;
28893                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28894 791E           FF76         08            push	8[bp]
28895                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28896 7921           FF76         06            push	6[bp]
28897                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28898 7924           E8         0179            call	_read_byte
28899 7927           83C4                   04  add	sp,*4
28900                                           ! Debug: eq unsigned char = al+0 to unsigned short v = [S+$C-8] (used reg = )
28901 792A           30E4                       xor	ah,ah
28902 792C           8946         FA            mov	-6[bp],ax
28903                                           !BCC_EOS
28904                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28905 792F           8B46         08            mov	ax,8[bp]
28906 7932           40                         inc	ax
28907 7933           8946         08            mov	8[bp],ax
28908                                           !BCC_EOS
28909                                           ! 3818         outb(0x3c6, read_byte(ES, BX)); BX++;
28910                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28911 7936           FF76         08            push	8[bp]
28912                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28913 7939           FF76         06            push	6[bp]
28914                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28915 793C           E8         0161            call	_read_byte
28916 793F           83C4                   04  add	sp,*4
28917                                           ! Debug: list unsigned char = al+0 (used reg = )
28918 7942           30E4                       xor	ah,ah
28919 7944           50                         push	ax
28920                                           ! Debug: list int = const $3C6 (used reg = )
28921 7945           B8                   03C6  mov	ax,#$3C6
28922 7948           50                         push	ax
28923                                           ! Debug: func () void = outb+0 (used reg = )
28924 7949           E8         01C0            call	_outb
28925 794C           83C4                   04  add	sp,*4
28926                                           !BCC_EOS
28927                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28928 794F           8B46         08            mov	ax,8[bp]
28929 7952           40                         inc	ax
28930 7953           8946         08            mov	8[bp],ax
28931                                           !BCC_EOS
28932                                           ! 3819         outb(0x3c8,0x00);
28933                                           ! Debug: list int = const 0 (used reg = )
28934 7956           31C0                       xor	ax,ax
28935 7958           50                         push	ax
28936                                           ! Debug: list int = const $3C8 (used reg = )
28937 7959           B8                   03C8  mov	ax,#$3C8
28938 795C           50                         push	ax
28939                                           ! Debug: func () void = outb+0 (used reg = )
28940 795D           E8         01AC            call	_outb
28941 7960           83C4                   04  add	sp,*4
28942                                           !BCC_EOS
28943                                           ! 3820         for(i=0;i<256*3;i++) {
28944                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
28945 7963           31C0                       xor	ax,ax
28946 7965           8946         FE            mov	-2[bp],ax
28947                                           !BCC_EOS
28948                                           !BCC_EOS
28949 7968           EB           27            jmp .282
28950                       0000796A            .283:
28951                                           ! 3821             
28952                                           ! 3821 outb(0x3c9, read_byte(ES, BX)); BX++;
28953                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28954 796A           FF76         08            push	8[bp]
28955                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28956 796D           FF76         06            push	6[bp]
28957                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28958 7970           E8         012D            call	_read_byte
28959 7973           83C4                   04  add	sp,*4
28960                                           ! Debug: list unsigned char = al+0 (used reg = )
28961 7976           30E4                       xor	ah,ah
28962 7978           50                         push	ax
28963                                           ! Debug: list int = const $3C9 (used reg = )
28964 7979           B8                   03C9  mov	ax,#$3C9
28965 797C           50                         push	ax
28966                                           ! Debug: func () void = outb+0 (used reg = )
28967 797D           E8         018C            call	_outb
28968 7980           83C4                   04  add	sp,*4
28969                                           !BCC_EOS
28970                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28971 7983           8B46         08            mov	ax,8[bp]
28972 7986           40                         inc	ax
28973 7987           8946         08            mov	8[bp],ax
28974                                           !BCC_EOS
28975                                           ! 3822         }
28976                                           ! 3823         BX++;
28977                       0000798A            .281:
28978                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28979 798A           8B46         FE            mov	ax,-2[bp]
28980 798D           40                         inc	ax
28981 798E           8946         FE            mov	-2[bp],ax
28982                       00007991            .282:
28983                                           ! Debug: lt int = const $300 to unsigned short i = [S+$C-4] (used reg = )
28984 7991           8B46         FE            mov	ax,-2[bp]
28985 7994           3D                   0300  cmp	ax,#$300
28986 7997           72           D1            jb 	.283
28987                       00007999            .284:
28988                       00007999            .280:
28989                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28990 7999           8B46         08            mov	ax,8[bp]
28991 799C           40                         inc	ax
28992 799D           8946         08            mov	8[bp],ax
28993                                           !BCC_EOS
28994                                           ! 3824         outb(0x3c8, v);
28995                                           ! Debug: list unsigned short v = [S+$C-8] (used reg = )
28996 79A0           FF76         FA            push	-6[bp]
28997                                           ! Debug: list int = const $3C8 (used reg = )
28998 79A3           B8                   03C8  mov	ax,#$3C8
28999 79A6           50                         push	ax
29000                                           ! Debug: func () void = outb+0 (used reg = )
29001 79A7           E8         0162            call	_outb
29002 79AA           83C4                   04  add	sp,*4
29003                                           !BCC_EOS
29004                                           ! 3825     }
29005                                           ! 3826     return BX;
29006                       000079AD            .27E:
29007 79AD           8B46         08            mov	ax,8[bp]
29008 79B0           89EC                       mov	sp,bp
29009 79B2           5D                         pop	bp
29010 79B3           C3                         ret
29011                                           !BCC_EOS
29012                                           ! 3827 }
29013                                           ! 3828 static Bit8u find_vga_entry(mode)
29014                                           ! 3829 Bit8u mode;
29015                       000079B4            _find_vga_entry:
29016                                           !BCC_EOS
29017                                           ! 3830 {
29018                                           ! 3831  Bit8u i,line=0xFF;
29019 79B4           55                         push	bp
29020 79B5           89E5                       mov	bp,sp
29021 79B7           4C                         dec	sp
29022 79B8           4C                         dec	sp
29023                                           ! Debug: eq int = const $FF to unsigned char line = [S+4-4] (used reg = )
29024 79B9           B0                     FF  mov	al,#$FF
29025 79BB           8846         FE            mov	-2[bp],al
29026                                           !BCC_EOS
29027                                           ! 3832  for(i=0;i<=15;i++)
29028                                           ! Debug: eq int = const 0 to unsigned char i = [S+4-3] (used reg = )
29029 79BE           30C0                       xor	al,al
29030 79C0           8846         FF            mov	-1[bp],al
29031                                           !BCC_EOS
29032                                           !BCC_EOS
29033                                           ! 3833   if(vga_modes[i].svgamode==mode)
29034 79C3           EB           23            jmp .287
29035                       000079C5            .288:
29036                                           ! Debug: ptradd unsigned char i = [S+4-3] to [$10] struct  = vga_modes+0 (used reg = )
29037 79C5           8A46         FF            mov	al,-1[bp]
29038 79C8           30E4                       xor	ah,ah
29039 79CA           B1                     03  mov	cl,*3
29040 79CC           D3E0                       shl	ax,cl
29041 79CE           89C3                       mov	bx,ax
29042                                           ! Debug: logeq unsigned char mode = [S+4+2] to unsigned char = [bx+_vga_modes+0] (used reg = )
29043 79D0           8A87       01DA            mov	al,_vga_modes[bx]
29044 79D4           3A46         04            cmp	al,4[bp]
29045 79D7           75           08            jne 	.289
29046                       000079D9            .28A:
29047                                           ! 3834    {line=i;
29048                                           ! Debug: eq unsigned char i = [S+4-3] to unsigned char line = [S+4-4] (used reg = )
29049 79D9           8A46         FF            mov	al,-1[bp]
29050 79DC           8846         FE            mov	-2[bp],al
29051                                           !BCC_EOS
29052                                           ! 3835     break;
29053 79DF           EB           0E            jmp .285
29054                                           !BCC_EOS
29055                                           ! 3836    }
29056                                           ! 3837  return line;
29057                       000079E1            .289:
29058                       000079E1            .286:
29059                                           ! Debug: postinc unsigned char i = [S+4-3] (used reg = )
29060 79E1           8A46         FF            mov	al,-1[bp]
29061 79E4           40                         inc	ax
29062 79E5           8846         FF            mov	-1[bp],al
29063                       000079E8            .287:
29064                                           ! Debug: le int = const $F to unsigned char i = [S+4-3] (used reg = )
29065 79E8           8A46         FF            mov	al,-1[bp]
29066 79EB           3C                     0F  cmp	al,*$F
29067 79ED           76           D6            jbe	.288
29068                       000079EF            .28B:
29069                       000079EF            .285:
29070 79EF           8A46         FE            mov	al,-2[bp]
29071 79F2           89EC                       mov	sp,bp
29072 79F4           5D                         pop	bp
29073 79F5           C3                         ret
29074                                           !BCC_EOS
29075                                           ! 3838 }
29076                                           ! 3839 static void memsetb(seg,offset,value,count)
29077                                           ! Register BX used in function find_vga_entry
29078                                           ! 3840   Bit16u seg;
29079                       000079F6            _memsetb:
29080                                           !BCC_EOS
29081                                           ! 3841   Bit16u offset;
29082                                           !BCC_EOS
29083                                           ! 3842   Bit16u value;
29084                                           !BCC_EOS
29085                                           ! 3843   Bit16u count;
29086                                           !BCC_EOS
29087                                           ! 3844 {
29088                                           ! 3845 #asm
29089                                           !BCC_ASM
29090                       00000008            _memsetb.count	set	8
29091                       00000002            _memsetb.seg	set	2
29092                       00000006            _memsetb.value	set	6
29093                       00000004            _memsetb.offset	set	4
29094 79F6           55                           push bp
29095 79F7           89E5                         mov bp, sp
29096 79F9           50                             push ax
29097 79FA           51                             push cx
29098 79FB           06                             push es
29099 79FC           57                             push di
29100 79FD           8B4E         0A                mov cx, 10[bp] ; count
29101 7A00           83F9                   00      cmp cx, #0x00
29102 7A03           74           10                je memsetb_end
29103 7A05           8B46         04                mov ax, 4[bp] ; segment
29104 7A08           8EC0                           mov es, ax
29105 7A0A           8B46         06                mov ax, 6[bp] ; offset
29106 7A0D           89C7                           mov di, ax
29107 7A0F           8A46         08                mov al, 8[bp] ; value
29108 7A12           FC                             cld
29109 7A13           F3                             rep
29110 7A14           AA                              stosb
29111                       00007A15            memsetb_end:
29112 7A15           5F                             pop di
29113 7A16           07                             pop es
29114 7A17           59                             pop cx
29115 7A18           58                             pop ax
29116 7A19           5D                           pop bp
29117                                           ! 3869 endasm
29118                                           !BCC_ENDASM
29119                                           ! 3870 }
29120 7A1A           C3                         ret
29121                                           ! 3871 static void memsetw(seg,offset,value,count)
29122                                           ! 3872   Bit16u seg;
29123                       00007A1B            _memsetw:
29124                                           !BCC_EOS
29125                                           ! 3873   Bit16u offset;
29126                                           !BCC_EOS
29127                                           ! 3874   Bit16u value;
29128                                           !BCC_EOS
29129                                           ! 3875   Bit16u count;
29130                                           !BCC_EOS
29131                                           ! 3876 {
29132                                           ! 3877 #asm
29133                                           !BCC_ASM
29134                       00000008            _memsetw.count	set	8
29135                       00000002            _memsetw.seg	set	2
29136                       00000006            _memsetw.value	set	6
29137                       00000004            _memsetw.offset	set	4
29138 7A1B           55                           push bp
29139 7A1C           89E5                         mov bp, sp
29140 7A1E           50                             push ax
29141 7A1F           51                             push cx
29142 7A20           06                             push es
29143 7A21           57                             push di
29144 7A22           8B4E         0A                mov cx, 10[bp] ; count
29145 7A25           83F9                   00      cmp cx, #0x00
29146 7A28           74           10                je memsetw_end
29147 7A2A           8B46         04                mov ax, 4[bp] ; segment
29148 7A2D           8EC0                           mov es, ax
29149 7A2F           8B46         06                mov ax, 6[bp] ; offset
29150 7A32           89C7                           mov di, ax
29151 7A34           8B46         08                mov ax, 8[bp] ; value
29152 7A37           FC                             cld
29153 7A38           F3                             rep
29154 7A39           AB                              stosw
29155                       00007A3A            memsetw_end:
29156 7A3A           5F                             pop di
29157 7A3B           07                             pop es
29158 7A3C           59                             pop cx
29159 7A3D           58                             pop ax
29160 7A3E           5D                           pop bp
29161                                           ! 3901 endasm
29162                                           !BCC_ENDASM
29163                                           ! 3902 }
29164 7A3F           C3                         ret
29165                                           ! 3903 static void memcpyb(dseg,doffset,sseg,soffset,count)
29166                                           ! 3904   Bit16u dseg;
29167                       00007A40            _memcpyb:
29168                                           !BCC_EOS
29169                                           ! 3905   Bit16u doffset;
29170                                           !BCC_EOS
29171                                           ! 3906   Bit16u sseg;
29172                                           !BCC_EOS
29173                                           ! 3907   Bit16u soffset;
29174                                           !BCC_EOS
29175                                           ! 3908   Bit16u count;
29176                                           !BCC_EOS
29177                                           ! 3909 {
29178                                           ! 3910 #asm
29179                                           !BCC_ASM
29180                       0000000A            _memcpyb.count	set	$A
29181                       00000006            _memcpyb.sseg	set	6
29182                       00000008            _memcpyb.soffset	set	8
29183                       00000002            _memcpyb.dseg	set	2
29184                       00000004            _memcpyb.doffset	set	4
29185 7A40           55                           push bp
29186 7A41           89E5                         mov bp, sp
29187 7A43           50                             push ax
29188 7A44           51                             push cx
29189 7A45           06                             push es
29190 7A46           57                             push di
29191 7A47           1E                             push ds
29192 7A48           56                             push si
29193 7A49           8B4E         0C                mov cx, 12[bp] ; count
29194 7A4C           83F9                   00      cmp cx, #0x0000
29195 7A4F           74           17                je memcpyb_end
29196 7A51           8B46         04                mov ax, 4[bp] ; dsegment
29197 7A54           8EC0                           mov es, ax
29198 7A56           8B46         06                mov ax, 6[bp] ; doffset
29199 7A59           89C7                           mov di, ax
29200 7A5B           8B46         08                mov ax, 8[bp] ; ssegment
29201 7A5E           8ED8                           mov ds, ax
29202 7A60           8B46         0A                mov ax, 10[bp] ; soffset
29203 7A63           89C6                           mov si, ax
29204 7A65           FC                             cld
29205 7A66           F3                             rep
29206 7A67           A4                              movsb
29207                       00007A68            memcpyb_end:
29208 7A68           5E                             pop si
29209 7A69           1F                             pop ds
29210 7A6A           5F                             pop di
29211 7A6B           07                             pop es
29212 7A6C           59                             pop cx
29213 7A6D           58                             pop ax
29214 7A6E           5D                           pop bp
29215                                           ! 3941 endasm
29216                                           !BCC_ENDASM
29217                                           ! 3942 }
29218 7A6F           C3                         ret
29219                                           ! 3943 static void memcpyw(dseg,doffset,sseg,soffset,count)
29220                                           ! 3944   Bit16u dseg;
29221                       00007A70            _memcpyw:
29222                                           !BCC_EOS
29223                                           ! 3945   Bit16u doffset;
29224                                           !BCC_EOS
29225                                           ! 3946   Bit16u sseg;
29226                                           !BCC_EOS
29227                                           ! 3947   Bit16u soffset;
29228                                           !BCC_EOS
29229                                           ! 3948   Bit16u count;
29230                                           !BCC_EOS
29231                                           ! 3949 {
29232                                           ! 3950 #asm
29233                                           !BCC_ASM
29234                       0000000A            _memcpyw.count	set	$A
29235                       00000006            _memcpyw.sseg	set	6
29236                       00000008            _memcpyw.soffset	set	8
29237                       00000002            _memcpyw.dseg	set	2
29238                       00000004            _memcpyw.doffset	set	4
29239 7A70           55                           push bp
29240 7A71           89E5                         mov bp, sp
29241 7A73           50                             push ax
29242 7A74           51                             push cx
29243 7A75           06                             push es
29244 7A76           57                             push di
29245 7A77           1E                             push ds
29246 7A78           56                             push si
29247 7A79           8B4E         0C                mov cx, 12[bp] ; count
29248 7A7C           83F9                   00      cmp cx, #0x0000
29249 7A7F           74           17                je memcpyw_end
29250 7A81           8B46         04                mov ax, 4[bp] ; dsegment
29251 7A84           8EC0                           mov es, ax
29252 7A86           8B46         06                mov ax, 6[bp] ; doffset
29253 7A89           89C7                           mov di, ax
29254 7A8B           8B46         08                mov ax, 8[bp] ; ssegment
29255 7A8E           8ED8                           mov ds, ax
29256 7A90           8B46         0A                mov ax, 10[bp] ; soffset
29257 7A93           89C6                           mov si, ax
29258 7A95           FC                             cld
29259 7A96           F3                             rep
29260 7A97           A5                              movsw
29261                       00007A98            memcpyw_end:
29262 7A98           5E                             pop si
29263 7A99           1F                             pop ds
29264 7A9A           5F                             pop di
29265 7A9B           07                             pop es
29266 7A9C           59                             pop cx
29267 7A9D           58                             pop ax
29268 7A9E           5D                           pop bp
29269                                           ! 3981 endasm
29270                                           !BCC_ENDASM
29271                                           ! 3982 }
29272 7A9F           C3                         ret
29273                                           ! 3983 static Bit8u
29274                                           ! 3984 read_byte(seg, offset)
29275                                           ! 3985   Bit16u seg;
29276                       00007AA0            _read_byte:
29277                                           !BCC_EOS
29278                                           ! 3986   Bit16u offset;
29279                                           !BCC_EOS
29280                                           ! 3987 {
29281                                           ! 3988 #asm
29282                                           !BCC_ASM
29283                       00000002            _read_byte.seg	set	2
29284                       00000004            _read_byte.offset	set	4
29285 7AA0           55                           push bp
29286 7AA1           89E5                         mov bp, sp
29287 7AA3           53                             push bx
29288 7AA4           1E                             push ds
29289 7AA5           8B46         04                mov ax, 4[bp] ; segment
29290 7AA8           8ED8                           mov ds, ax
29291 7AAA           8B5E         06                mov bx, 6[bp] ; offset
29292 7AAD           8A07                           mov al, [bx]
29293                                               ;; al = return value (byte)
29294 7AAF           1F                             pop ds
29295 7AB0           5B                             pop bx
29296 7AB1           5D                           pop bp
29297                                           ! 4001 endasm
29298                                           !BCC_ENDASM
29299                                           ! 4002 }
29300 7AB2           C3                         ret
29301                                           ! 4003 static Bit16u
29302                                           ! 4004 read_word(seg, offset)
29303                                           ! 4005   Bit16u seg;
29304                       00007AB3            _read_word:
29305                                           !BCC_EOS
29306                                           ! 4006   Bit16u offset;
29307                                           !BCC_EOS
29308                                           ! 4007 {
29309                                           ! 4008 #asm
29310                                           !BCC_ASM
29311                       00000002            _read_word.seg	set	2
29312                       00000004            _read_word.offset	set	4
29313 7AB3           55                           push bp
29314 7AB4           89E5                         mov bp, sp
29315 7AB6           53                             push bx
29316 7AB7           1E                             push ds
29317 7AB8           8B46         04                mov ax, 4[bp] ; segment
29318 7ABB           8ED8                           mov ds, ax
29319 7ABD           8B5E         06                mov bx, 6[bp] ; offset
29320 7AC0           8B07                           mov ax, [bx]
29321                                               ;; ax = return value (word)
29322 7AC2           1F                             pop ds
29323 7AC3           5B                             pop bx
29324 7AC4           5D                           pop bp
29325                                           ! 4021 endasm
29326                                           !BCC_ENDASM
29327                                           ! 4022 }
29328 7AC5           C3                         ret
29329                                           ! 4023 static void
29330                                           ! 4024 write_byte(seg, offset, data)
29331                                           ! 4025   Bit16u seg;
29332                       00007AC6            _write_byte:
29333                                           !BCC_EOS
29334                                           ! 4026   Bit16u offset;
29335                                           !BCC_EOS
29336                                           ! 4027   Bit8u data;
29337                                           !BCC_EOS
29338                                           ! 4028 {
29339                                           ! 4029 #asm
29340                                           !BCC_ASM
29341                       00000002            _write_byte.seg	set	2
29342                       00000006            _write_byte.data	set	6
29343                       00000004            _write_byte.offset	set	4
29344 7AC6           55                           push bp
29345 7AC7           89E5                         mov bp, sp
29346 7AC9           50                             push ax
29347 7ACA           53                             push bx
29348 7ACB           1E                             push ds
29349 7ACC           8B46         04                mov ax, 4[bp] ; segment
29350 7ACF           8ED8                           mov ds, ax
29351 7AD1           8B5E         06                mov bx, 6[bp] ; offset
29352 7AD4           8A46         08                mov al, 8[bp] ; data byte
29353 7AD7           8807                           mov [bx], al ; write data byte
29354 7AD9           1F                             pop ds
29355 7ADA           5B                             pop bx
29356 7ADB           58                             pop ax
29357 7ADC           5D                           pop bp
29358                                           ! 4044 endasm
29359                                           !BCC_ENDASM
29360                                           ! 4045 }
29361 7ADD           C3                         ret
29362                                           ! 4046 static void
29363                                           ! 4047 write_word(seg, offset, data)
29364                                           ! 4048   Bit16u seg;
29365                       00007ADE            _write_word:
29366                                           !BCC_EOS
29367                                           ! 4049   Bit16u offset;
29368                                           !BCC_EOS
29369                                           ! 4050   Bit16u data;
29370                                           !BCC_EOS
29371                                           ! 4051 {
29372                                           ! 4052 #asm
29373                                           !BCC_ASM
29374                       00000002            _write_word.seg	set	2
29375                       00000006            _write_word.data	set	6
29376                       00000004            _write_word.offset	set	4
29377 7ADE           55                           push bp
29378 7ADF           89E5                         mov bp, sp
29379 7AE1           50                             push ax
29380 7AE2           53                             push bx
29381 7AE3           1E                             push ds
29382 7AE4           8B46         04                mov ax, 4[bp] ; segment
29383 7AE7           8ED8                           mov ds, ax
29384 7AE9           8B5E         06                mov bx, 6[bp] ; offset
29385 7AEC           8B46         08                mov ax, 8[bp] ; data word
29386 7AEF           8907                           mov [bx], ax ; write data word
29387 7AF1           1F                             pop ds
29388 7AF2           5B                             pop bx
29389 7AF3           58                             pop ax
29390 7AF4           5D                           pop bp
29391                                           ! 4067 endasm
29392                                           !BCC_ENDASM
29393                                           ! 4068 }
29394 7AF5           C3                         ret
29395                                           ! 4069  Bit8u
29396                                           ! 4070 inb(port)
29397                                           ! 4071   Bit16u port;
29398                                           export	_inb
29399                       00007AF6            _inb:
29400                                           !BCC_EOS
29401                                           ! 4072 {
29402                                           ! 4073 #asm
29403                                           !BCC_ASM
29404                       00000002            _inb.port	set	2
29405 7AF6           55                           push bp
29406 7AF7           89E5                         mov bp, sp
29407 7AF9           52                             push dx
29408 7AFA           8B56         04                mov dx, 4[bp]
29409 7AFD           EC                             in al, dx
29410 7AFE           5A                             pop dx
29411 7AFF           5D                           pop bp
29412                                           ! 4081 endasm
29413                                           !BCC_ENDASM
29414                                           ! 4082 }
29415 7B00           C3                         ret
29416                                           ! 4083   Bit16u
29417                                           ! 4084 inw(port)
29418                                           ! 4085   Bit16u port;
29419                                           export	_inw
29420                       00007B01            _inw:
29421                                           !BCC_EOS
29422                                           ! 4086 {
29423                                           ! 4087 #asm
29424                                           !BCC_ASM
29425                       00000002            _inw.port	set	2
29426 7B01           55                           push bp
29427 7B02           89E5                         mov bp, sp
29428 7B04           52                             push dx
29429 7B05           8B56         04                mov dx, 4[bp]
29430 7B08           ED                             in ax, dx
29431 7B09           5A                             pop dx
29432 7B0A           5D                           pop bp
29433                                           ! 4095 endasm
29434                                           !BCC_ENDASM
29435                                           ! 4096 }
29436 7B0B           C3                         ret
29437                                           ! 4097   void
29438                                           ! 4098 outb(port, val)
29439                                           ! 4099   Bit16u port;
29440                                           export	_outb
29441                       00007B0C            _outb:
29442                                           !BCC_EOS
29443                                           ! 4100   Bit8u val;
29444                                           !BCC_EOS
29445                                           ! 4101 {
29446                                           ! 4102 #asm
29447                                           !BCC_ASM
29448                       00000004            _outb.val	set	4
29449                       00000002            _outb.port	set	2
29450 7B0C           55                           push bp
29451 7B0D           89E5                         mov bp, sp
29452 7B0F           50                             push ax
29453 7B10           52                             push dx
29454 7B11           8B56         04                mov dx, 4[bp]
29455 7B14           8A46         06                mov al, 6[bp]
29456 7B17           EE                             out dx, al
29457 7B18           5A                             pop dx
29458 7B19           58                             pop ax
29459 7B1A           5D                           pop bp
29460                                           ! 4113 endasm
29461                                           !BCC_ENDASM
29462                                           ! 4114 }
29463 7B1B           C3                         ret
29464                                           ! 4115   void
29465                                           ! 4116 outw(port, val)
29466                                           ! 4117   Bit16u port;
29467                                           export	_outw
29468                       00007B1C            _outw:
29469                                           !BCC_EOS
29470                                           ! 4118   Bit16u val;
29471                                           !BCC_EOS
29472                                           ! 4119 {
29473                                           ! 4120 #asm
29474                                           !BCC_ASM
29475                       00000004            _outw.val	set	4
29476                       00000002            _outw.port	set	2
29477 7B1C           55                           push bp
29478 7B1D           89E5                         mov bp, sp
29479 7B1F           50                             push ax
29480 7B20           52                             push dx
29481 7B21           8B56         04                mov dx, 4[bp]
29482 7B24           8B46         06                mov ax, 6[bp]
29483 7B27           EF                             out dx, ax
29484 7B28           5A                             pop dx
29485 7B29           58                             pop ax
29486 7B2A           5D                           pop bp
29487                                           ! 4131 endasm
29488                                           !BCC_ENDASM
29489                                           ! 4132 }
29490 7B2B           C3                         ret
29491                                           ! 4133 Bit16u get_SS()
29492                                           ! 4134 {
29493                                           export	_get_SS
29494                       00007B2C            _get_SS:
29495                                           ! 4135 #asm
29496                                           !BCC_ASM
29497 7B2C           8CD0                         mov ax, ss
29498                                           ! 4137 endasm
29499                                           !BCC_ENDASM
29500                                           ! 4138 }
29501 7B2E           C3                         ret
29502                                           ! 4139 void printf(s)
29503                                           ! 4140   Bit8u *s;
29504                                           export	_printf
29505                       00007B2F            _printf:
29506                                           !BCC_EOS
29507                                           ! 4141 {
29508                                           ! 4142   Bit8u c, format_char;
29509                                           !BCC_EOS
29510                                           ! 4143   Boolean in_format;
29511                                           !BCC_EOS
29512                                           ! 4144   unsigned format_width, i;
29513                                           !BCC_EOS
29514                                           ! 4145   Bit16u *arg_ptr;
29515                                           !BCC_EOS
29516                                           ! 4146   Bit16u arg_seg, arg, digit, nibble, shift_count;
29517                                           !BCC_EOS
29518                                           ! 4147   arg_ptr = &s;
29519 7B2F           55                         push	bp
29520 7B30           89E5                       mov	bp,sp
29521 7B32           83C4                   EC  add	sp,*-$14
29522                                           ! Debug: eq * * unsigned char s = S+$16+2 to * unsigned short arg_ptr = [S+$16-$C] (used reg = )
29523 7B35           8D5E         04            lea	bx,4[bp]
29524 7B38           895E         F6            mov	-$A[bp],bx
29525                                           !BCC_EOS
29526                                           ! 4148   arg_seg = get_SS();
29527                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
29528 7B3B           E8         FFEE            call	_get_SS
29529                                           ! Debug: eq unsigned short = ax+0 to unsigned short arg_seg = [S+$16-$E] (used reg = )
29530 7B3E           8946         F4            mov	-$C[bp],ax
29531                                           !BCC_EOS
29532                                           ! 4149   in_format = 0;
29533                                           ! Debug: eq int = const 0 to unsigned short in_format = [S+$16-6] (used reg = )
29534 7B41           31C0                       xor	ax,ax
29535 7B43           8946         FC            mov	-4[bp],ax
29536                                           !BCC_EOS
29537                                           ! 4150   format_width = 0;
29538                                           ! Debug: eq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
29539 7B46           31C0                       xor	ax,ax
29540 7B48           8946         FA            mov	-6[bp],ax
29541                                           !BCC_EOS
29542                                           ! 4151   while (c = read_byte(0xc000, s)) {
29543 7B4B           E9         0104            br 	.28D
29544                       00007B4E            .28E:
29545                                           ! 4152     if ( c == '%' ) {
29546                                           ! Debug: logeq int = const $25 to unsigned char c = [S+$16-3] (used reg = )
29547 7B4E           8A46         FF            mov	al,-1[bp]
29548 7B51           3C                     25  cmp	al,*$25
29549 7B53           75           0E            jne 	.28F
29550                       00007B55            .290:
29551                                           ! 4153       in_format = 1;
29552                                           ! Debug: eq int = const 1 to unsigned short in_format = [S+$16-6] (used reg = )
29553 7B55           B8                   0001  mov	ax,*1
29554 7B58           8946         FC            mov	-4[bp],ax
29555                                           !BCC_EOS
29556                                           ! 4154       format_width = 0;
29557                                           ! Debug: eq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
29558 7B5B           31C0                       xor	ax,ax
29559 7B5D           8946         FA            mov	-6[bp],ax
29560                                           !BCC_EOS
29561                                           ! 4155       }
29562                                           ! 4156     else if (in_format) {
29563 7B60           E9         00E8            br 	.291
29564                       00007B63            .28F:
29565 7B63           8B46         FC            mov	ax,-4[bp]
29566 7B66           85C0                       test	ax,ax
29567 7B68         0F84         00CF            beq 	.292
29568                       00007B6C            .293:
29569                                           ! 4157       if ( (c>='0') && (c<='9') ) {
29570                                           ! Debug: ge int = const $30 to unsigned char c = [S+$16-3] (used reg = )
29571 7B6C           8A46         FF            mov	al,-1[bp]
29572 7B6F           3C                     30  cmp	al,*$30
29573 7B71           72           28            jb  	.294
29574                       00007B73            .296:
29575                                           ! Debug: le int = const $39 to unsigned char c = [S+$16-3] (used reg = )
29576 7B73           8A46         FF            mov	al,-1[bp]
29577 7B76           3C                     39  cmp	al,*$39
29578 7B78           77           21            ja  	.294
29579                       00007B7A            .295:
29580                                           ! 4158         format_width = (format_width * 10) + (c - '0');
29581                                           ! Debug: sub int = const $30 to unsigned char c = [S+$16-3] (used reg = )
29582 7B7A           8A46         FF            mov	al,-1[bp]
29583 7B7D           30E4                       xor	ah,ah
29584 7B7F           05                   FFD0  add	ax,*-$30
29585 7B82           50                         push	ax
29586                                           ! Debug: mul int = const $A to unsigned int format_width = [S+$18-8] (used reg = )
29587 7B83           8B46         FA            mov	ax,-6[bp]
29588 7B86           89C2                       mov	dx,ax
29589 7B88           D1E0                       shl	ax,*1
29590 7B8A           D1E0                       shl	ax,*1
29591 7B8C           01D0                       add	ax,dx
29592 7B8E           D1E0                       shl	ax,*1
29593                                           ! Debug: add unsigned int (temp) = [S+$18-$18] to unsigned int = ax+0 (used reg = )
29594 7B90           0346         EA            add	ax,-$16[bp]
29595 7B93           44                         inc	sp
29596 7B94           44                         inc	sp
29597                                           ! Debug: eq unsigned int = ax+0 to unsigned int format_width = [S+$16-8] (used reg = )
29598 7B95           8946         FA            mov	-6[bp],ax
29599                                           !BCC_EOS
29600                                           ! 4159         }
29601                                           ! 4160       else if (c == 'x') {
29602 7B98           E9         009E            br 	.297
29603                       00007B9B            .294:
29604                                           ! Debug: logeq int = const $78 to unsigned char c = [S+$16-3] (used reg = )
29605 7B9B           8A46         FF            mov	al,-1[bp]
29606 7B9E           3C                     78  cmp	al,*$78
29607 7BA0         0F85         0095            bne 	.298
29608                       00007BA4            .299:
29609                                           ! 4161         arg_ptr++;
29610                                           ! Debug: postinc * unsigned short arg_ptr = [S+$16-$C] (used reg = )
29611 7BA4           8B5E         F6            mov	bx,-$A[bp]
29612 7BA7           43                         inc	bx
29613 7BA8           43                         inc	bx
29614 7BA9           895E         F6            mov	-$A[bp],bx
29615                                           !BCC_EOS
29616                                           ! 4162         arg = read_word(arg_seg, arg_ptr);
29617                                           ! Debug: list * unsigned short arg_ptr = [S+$16-$C] (used reg = )
29618 7BAC           FF76         F6            push	-$A[bp]
29619                                           ! Debug: list unsigned short arg_seg = [S+$18-$E] (used reg = )
29620 7BAF           FF76         F4            push	-$C[bp]
29621                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29622 7BB2           E8         FEFE            call	_read_word
29623 7BB5           83C4                   04  add	sp,*4
29624                                           ! Debug: eq unsigned short = ax+0 to unsigned short arg = [S+$16-$10] (used reg = )
29625 7BB8           8946         F2            mov	-$E[bp],ax
29626                                           !BCC_EOS
29627                                           ! 4163         if (format_width == 0)
29628                                           ! Debug: logeq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
29629 7BBB           8B46         FA            mov	ax,-6[bp]
29630 7BBE           85C0                       test	ax,ax
29631 7BC0           75           06            jne 	.29A
29632                       00007BC2            .29B:
29633                                           ! 4164           format_width = 4;
29634                                           ! Debug: eq int = const 4 to unsigned int format_width = [S+$16-8] (used reg = )
29635 7BC2           B8                   0004  mov	ax,*4
29636 7BC5           8946         FA            mov	-6[bp],ax
29637                                           !BCC_EOS
29638                                           ! 4165         i = 0;
29639                       00007BC8            .29A:
29640                                           ! Debug: eq int = const 0 to unsigned int i = [S+$16-$A] (used reg = )
29641 7BC8           31C0                       xor	ax,ax
29642 7BCA           8946         F8            mov	-8[bp],ax
29643                                           !BCC_EOS
29644                                           ! 4166         digit = format_width - 1;
29645                                           ! Debug: sub int = const 1 to unsigned int format_width = [S+$16-8] (used reg = )
29646 7BCD           8B46         FA            mov	ax,-6[bp]
29647                                           ! Debug: eq unsigned int = ax-1 to unsigned short digit = [S+$16-$12] (used reg = )
29648 7BD0           48                         dec	ax
29649 7BD1           8946         F0            mov	-$10[bp],ax
29650                                           !BCC_EOS
29651                                           ! 4167         for (i=0; i<format_width; i++) {
29652                                           ! Debug: eq int = const 0 to unsigned int i = [S+$16-$A] (used reg = )
29653 7BD4           31C0                       xor	ax,ax
29654 7BD6           8946         F8            mov	-8[bp],ax
29655                                           !BCC_EOS
29656                                           !BCC_EOS
29657 7BD9           EB           51            jmp .29E
29658                       00007BDB            .29F:
29659                                           ! 4168           nibble = (arg >> (4 * digit)) & 0x000f;
29660                                           ! Debug: mul unsigned short digit = [S+$16-$12] to int = const 4 (used reg = )
29661                                           ! Debug: expression subtree swapping
29662 7BDB           8B46         F0            mov	ax,-$10[bp]
29663 7BDE           D1E0                       shl	ax,*1
29664 7BE0           D1E0                       shl	ax,*1
29665                                           ! Debug: sr unsigned int = ax+0 to unsigned short arg = [S+$16-$10] (used reg = )
29666 7BE2           89C3                       mov	bx,ax
29667 7BE4           8B46         F2            mov	ax,-$E[bp]
29668 7BE7           89D9                       mov	cx,bx
29669 7BE9           D3E8                       shr	ax,cl
29670                                           ! Debug: and int = const $F to unsigned int = ax+0 (used reg = )
29671 7BEB           24                     0F  and	al,*$F
29672                                           ! Debug: eq unsigned char = al+0 to unsigned short nibble = [S+$16-$14] (used reg = )
29673 7BED           30E4                       xor	ah,ah
29674 7BEF           8946         EE            mov	-$12[bp],ax
29675                                           !BCC_EOS
29676                                           ! 4169           if (nibble <= 9)
29677                                           ! Debug: le int = const 9 to unsigned short nibble = [S+$16-$14] (used reg = )
29678 7BF2           8B46         EE            mov	ax,-$12[bp]
29679 7BF5           3D                   0009  cmp	ax,*9
29680 7BF8           77           13            ja  	.2A0
29681                       00007BFA            .2A1:
29682                                           ! 4170             outb(0xe9, nibble + '0');
29683                                           ! Debug: add int = const $30 to unsigned short nibble = [S+$16-$14] (used reg = )
29684 7BFA           8B46         EE            mov	ax,-$12[bp]
29685                                           ! Debug: list unsigned int = ax+$30 (used reg = )
29686 7BFD           05                   0030  add	ax,*$30
29687 7C00           50                         push	ax
29688                                           ! Debug: list int = const $E9 (used reg = )
29689 7C01           B8                   00E9  mov	ax,#$E9
29690 7C04           50                         push	ax
29691                                           ! Debug: func () void = outb+0 (used reg = )
29692 7C05           E8         FF04            call	_outb
29693 7C08           83C4                   04  add	sp,*4
29694                                           !BCC_EOS
29695                                           ! 4171           else
29696                                           ! 4172             outb(0xe9, (nibble - 10) + 'A');
29697 7C0B           EB           11            jmp .2A2
29698                       00007C0D            .2A0:
29699                                           ! Debug: sub int = const $A to unsigned short nibble = [S+$16-$14] (used reg = )
29700 7C0D           8B46         EE            mov	ax,-$12[bp]
29701                                           ! Debug: add int = const $41 to unsigned int = ax-$A (used reg = )
29702                                           ! Debug: list unsigned int = ax+$37 (used reg = )
29703 7C10           05                   0037  add	ax,*$37
29704 7C13           50                         push	ax
29705                                           ! Debug: list int = const $E9 (used reg = )
29706 7C14           B8                   00E9  mov	ax,#$E9
29707 7C17           50                         push	ax
29708                                           ! Debug: func () void = outb+0 (used reg = )
29709 7C18           E8         FEF1            call	_outb
29710 7C1B           83C4                   04  add	sp,*4
29711                                           !BCC_EOS
29712                                           ! 4173           digit--;
29713                       00007C1E            .2A2:
29714                                           ! Debug: postdec unsigned short digit = [S+$16-$12] (used reg = )
29715 7C1E           8B46         F0            mov	ax,-$10[bp]
29716 7C21           48                         dec	ax
29717 7C22           8946         F0            mov	-$10[bp],ax
29718                                           !BCC_EOS
29719                                           ! 4174           }
29720                                           ! 4175         in_format = 0;
29721                       00007C25            .29D:
29722                                           ! Debug: postinc unsigned int i = [S+$16-$A] (used reg = )
29723 7C25           8B46         F8            mov	ax,-8[bp]
29724 7C28           40                         inc	ax
29725 7C29           8946         F8            mov	-8[bp],ax
29726                       00007C2C            .29E:
29727                                           ! Debug: lt unsigned int format_width = [S+$16-8] to unsigned int i = [S+$16-$A] (used reg = )
29728 7C2C           8B46         F8            mov	ax,-8[bp]
29729 7C2F           3B46         FA            cmp	ax,-6[bp]
29730 7C32           72           A7            jb 	.29F
29731                       00007C34            .2A3:
29732                       00007C34            .29C:
29733                                           ! Debug: eq int = const 0 to unsigned short in_format = [S+$16-6] (used reg = )
29734 7C34           31C0                       xor	ax,ax
29735 7C36           8946         FC            mov	-4[bp],ax
29736                                           !BCC_EOS
29737                                           ! 4176         }
29738                                           ! 4177       }
29739                       00007C39            .298:
29740                       00007C39            .297:
29741                                           ! 4178     else {
29742 7C39           EB           10            jmp .2A4
29743                       00007C3B            .292:
29744                                           ! 4179       outb(0xe9, c);
29745                                           ! Debug: list unsigned char c = [S+$16-3] (used reg = )
29746 7C3B           8A46         FF            mov	al,-1[bp]
29747 7C3E           30E4                       xor	ah,ah
29748 7C40           50                         push	ax
29749                                           ! Debug: list int = const $E9 (used reg = )
29750 7C41           B8                   00E9  mov	ax,#$E9
29751 7C44           50                         push	ax
29752                                           ! Debug: func () void = outb+0 (used reg = )
29753 7C45           E8         FEC4            call	_outb
29754 7C48           83C4                   04  add	sp,*4
29755                                           !BCC_EOS
29756                                           ! 4180       }
29757                                           ! 4181     s ++;
29758                       00007C4B            .2A4:
29759                       00007C4B            .291:
29760                                           ! Debug: postinc * unsigned char s = [S+$16+2] (used reg = )
29761 7C4B           8B5E         04            mov	bx,4[bp]
29762 7C4E           43                         inc	bx
29763 7C4F           895E         04            mov	4[bp],bx
29764                                           !BCC_EOS
29765                                           ! 4182     }
29766                                           ! 4183 }
29767                       00007C52            .28D:
29768                                           ! Debug: list * unsigned char s = [S+$16+2] (used reg = )
29769 7C52           FF76         04            push	4[bp]
29770                                           ! Debug: list unsigned int = const $C000 (used reg = )
29771 7C55           B8                   C000  mov	ax,#$C000
29772 7C58           50                         push	ax
29773                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29774 7C59           E8         FE44            call	_read_byte
29775 7C5C           83C4                   04  add	sp,*4
29776                                           ! Debug: eq unsigned char = al+0 to unsigned char c = [S+$16-3] (used reg = )
29777 7C5F           8846         FF            mov	-1[bp],al
29778 7C62           84C0                       test	al,al
29779 7C64         0F85         FEE6            bne 	.28E
29780                       00007C68            .2A5:
29781                       00007C68            .28C:
29782 7C68           89EC                       mov	sp,bp
29783 7C6A           5D                         pop	bp
29784 7C6B           C3                         ret
29785                                           ! 4184 typedef struct
29786                                           ! Register BX used in function printf
29787                                           ! 4185 {
29788                                           ! 4186   unsigned short mode;
29789                                           !BCC_EOS
29790                                           ! 4187   unsigned short width;
29791                                           !BCC_EOS
29792                                           ! 4188   unsigned short height;
29793                                           !BCC_EOS
29794                                           ! 4189   unsigned short depth;
29795                                           !BCC_EOS
29796                                           ! 4190   unsigned short hidden_dac;
29797                                           !BCC_EOS
29798                                           ! 4191   unsigned short *seq;
29799                                           !BCC_EOS
29800                                           ! 4192   unsigned short *graph;
29801                                           !BCC_EOS
29802                                           ! 4193   unsigned short *crtc;
29803                                           !BCC_EOS
29804                                           ! 4194   unsigned char bitsperpixel;
29805                                           !BCC_EOS
29806                                           ! 4195   unsigned char vesacolortype;
29807                                           !BCC_EOS
29808                                           ! 4196   unsigned char vesaredmask;
29809                                           !BCC_EOS
29810                                           ! 4197   unsigned char vesaredpos;
29811                                           !BCC_EOS
29812                                           ! 4198   unsigned char vesagreenmask;
29813                                           !BCC_EOS
29814                                           ! 4199   unsigned char vesagreenpos;
29815                                           !BCC_EOS
29816                                           ! 4200   unsigned char vesabluemask;
29817                                           !BCC_EOS
29818                                           ! 4201   unsigned char vesabluepos;
29819                                           !BCC_EOS
29820                                           ! 4202   unsigned char vesareservedmask;
29821                                           !BCC_EOS
29822                                           ! 4203   unsigned char vesareservedpos;
29823                                           !BCC_EOS
29824                                           ! 4204 } cirrus_mode_t;
29825                                           !BCC_EOS
29826                                           ! 4205 unsigned short cseq_vga[] = {0x0007,0xffff};
29827                                           
29828                                           export	_cseq_vga
29829                       00007C6C            _cseq_vga:
29830 7C6C                      0007            .word	7
29831 7C6E                      FFFF            .word	$FFFF
29832                                           !BCC_EOS
29833                                           ! 4206 unsigned short cgraph_vga[] = {0x0009,0x000a,0x000b,0xffff};
29834                                           export	_cgraph_vga
29835                       00007C70            _cgraph_vga:
29836 7C70                      0009            .word	9
29837 7C72                      000A            .word	$A
29838 7C74                      000B            .word	$B
29839 7C76                      FFFF            .word	$FFFF
29840                                           !BCC_EOS
29841                                           ! 4207 unsigned short ccrtc_vga[] = {0x001a,0x001b,0x001d,0xffff};
29842                                           export	_ccrtc_vga
29843                       00007C78            _ccrtc_vga:
29844 7C78                      001A            .word	$1A
29845 7C7A                      001B            .word	$1B
29846 7C7C                      001D            .word	$1D
29847 7C7E                      FFFF            .word	$FFFF
29848                                           !BCC_EOS
29849                                           ! 4208 unsigned short cgraph_svgacolor[] = {
29850                                           export	_cgraph_svgacolor
29851                       00007C80            _cgraph_svgacolor:
29852                                           ! 4209 0x0000,0
29853 7C80                      0000            .word	0
29854                                           ! 4209 x0001,0x0002,0x0003,0x0004,0x4005,0x0506,0x0f07,0xff08,
29855 7C82                      0001            .word	1
29856 7C84                      0002            .word	2
29857 7C86                      0003            .word	3
29858 7C88                      0004            .word	4
29859 7C8A                      4005            .word	$4005
29860 7C8C                      0506            .word	$506
29861 7C8E                      0F07            .word	$F07
29862 7C90                      FF08            .word	$FF08
29863                                           ! 4210 0x0009,0x000a,0x000b,
29864 7C92                      0009            .word	9
29865 7C94                      000A            .word	$A
29866 7C96                      000B            .word	$B
29867                                           ! 4211 0xffff
29868                                           ! 4212 };
29869 7C98                      FFFF            .word	$FFFF
29870                                           !BCC_EOS
29871                                           ! 4213 unsigned short cseq_640x480x8[] = {
29872                                           export	_cseq_640x480x8
29873                       00007C9A            _cseq_640x480x8:
29874                                           ! 4214 0x0300,0x2101,0x0f02,0x0003,0x0e04,0x1107,
29875 7C9A                      0300            .word	$300
29876 7C9C                      2101            .word	$2101
29877 7C9E                      0F02            .word	$F02
29878 7CA0                      0003            .word	3
29879 7CA2                      0E04            .word	$E04
29880 7CA4                      1107            .word	$1107
29881                                           ! 4215 0x580b,0x580c,0x580d,0x580e,
29882 7CA6                      580B            .word	$580B
29883 7CA8                      580C            .word	$580C
29884 7CAA                      580D            .word	$580D
29885 7CAC                      580E            .word	$580E
29886                                           ! 4216 0x0412,0x0013,0x2017,
29887 7CAE                      0412            .word	$412
29888 7CB0                      0013            .word	$13
29889 7CB2                      2017            .word	$2017
29890                                           ! 4217 0x331b,0x331c,0x331d,0x331e,
29891 7CB4                      331B            .word	$331B
29892 7CB6                      331C            .word	$331C
29893 7CB8                      331D            .word	$331D
29894 7CBA                      331E            .word	$331E
29895                                           ! 4218 0xffff
29896                                           ! 4219 };
29897 7CBC                      FFFF            .word	$FFFF
29898                                           !BCC_EOS
29899                                           ! 4220 unsigned short ccrtc_640x480x8[] = {
29900                                           export	_ccrtc_640x480x8
29901                       00007CBE            _ccrtc_640x480x8:
29902                                           ! 4221 0x2c11,
29903 7CBE                      2C11            .word	$2C11
29904                                           ! 4222 0x5f00,0x4f01,0x4f02,0x8003,0x5204,0x1e05,0x0b06,0x3e07,
29905 7CC0                      5F00            .word	$5F00
29906 7CC2                      4F01            .word	$4F01
29907 7CC4                      4F02            .word	$4F02
29908 7CC6                      8003            .word	$8003
29909 7CC8                      5204            .word	$5204
29910 7CCA                      1E05            .word	$1E05
29911 7CCC                      0B06            .word	$B06
29912 7CCE                      3E07            .word	$3E07
29913                                           ! 4223 0x4009,0x000c,0x000d,
29914 7CD0                      4009            .word	$4009
29915 7CD2                      000C            .word	$C
29916 7CD4                      000D            .word	$D
29917                                           ! 4224 0xea10,0xdf12,0x5013,0x4014,0xdf15,0x0b16,0xc317,0xff18,
29918 7CD6                      EA10            .word	$EA10
29919 7CD8                      DF12            .word	$DF12
29920 7CDA                      5013            .word	$5013
29921 7CDC                      4014            .word	$4014
29922 7CDE                      DF15            .word	$DF15
29923 7CE0                      0B16            .word	$B16
29924 7CE2                      C317            .word	$C317
29925 7CE4                      FF18            .word	$FF18
29926                                           ! 4225 0x001a,0x221b,0x001d,
29927 7CE6                      001A            .word	$1A
29928 7CE8                      221B            .word	$221B
29929 7CEA                      001D            .word	$1D
29930                                           ! 4226 0xffff
29931                                           ! 4227 };
29932 7CEC                      FFFF            .word	$FFFF
29933                                           !BCC_EOS
29934                                           ! 4228 unsigned short cseq_640x480x16[] = {
29935                                           export	_cseq_640x480x16
29936                       00007CEE            _cseq_640x480x16:
29937                                           ! 4229 0x0300,0x2101,0x0f02,0x0003,0x0e04,0x1707,
29938 7CEE                      0300            .word	$300
29939 7CF0                      2101            .word	$2101
29940 7CF2                      0F02            .word	$F02
29941 7CF4                      0003            .word	3
29942 7CF6                      0E04            .word	$E04
29943 7CF8                      1707            .word	$1707
29944                                           ! 4230 0x580b,0x580c,0x580d,0x580e,
29945 7CFA                      580B            .word	$580B
29946 7CFC                      580C            .word	$580C
29947 7CFE                      580D            .word	$580D
29948 7D00                      580E            .word	$580E
29949                                           ! 4231 0x0412,0x0013,0x2017,
29950 7D02                      0412            .word	$412
29951 7D04                      0013            .word	$13
29952 7D06                      2017            .word	$2017
29953                                           ! 4232 0x331b,0x331c,0x331d,0x331e,
29954 7D08                      331B            .word	$331B
29955 7D0A                      331C            .word	$331C
29956 7D0C                      331D            .word	$331D
29957 7D0E                      331E            .word	$331E
29958                                           ! 4233 0xffff
29959                                           ! 4234 };
29960 7D10                      FFFF            .word	$FFFF
29961                                           !BCC_EOS
29962                                           ! 4235 unsigned short ccrtc_640x480x16[] = {
29963                                           export	_ccrtc_640x480x16
29964                       00007D12            _ccrtc_640x480x16:
29965                                           ! 4236 0x2c11,
29966 7D12                      2C11            .word	$2C11
29967                                           ! 4237 0x5f00,0x4f01,0x4f02,0x8003,0x5204,0x1e05,0x0b06,0x3e07,
29968 7D14                      5F00            .word	$5F00
29969 7D16                      4F01            .word	$4F01
29970 7D18                      4F02            .word	$4F02
29971 7D1A                      8003            .word	$8003
29972 7D1C                      5204            .word	$5204
29973 7D1E                      1E05            .word	$1E05
29974 7D20                      0B06            .word	$B06
29975 7D22                      3E07            .word	$3E07
29976                                           ! 4238 0x4009,0x000c,0x000d,
29977 7D24                      4009            .word	$4009
29978 7D26                      000C            .word	$C
29979 7D28                      000D            .word	$D
29980                                           ! 4239 0xea10,0xdf12,0xa013,0x4014,0xdf15,0x0b16,0xc317,0xff18,
29981 7D2A                      EA10            .word	$EA10
29982 7D2C                      DF12            .word	$DF12
29983 7D2E                      A013            .word	$A013
29984 7D30                      4014            .word	$4014
29985 7D32                      DF15            .word	$DF15
29986 7D34                      0B16            .word	$B16
29987 7D36                      C317            .word	$C317
29988 7D38                      FF18            .word	$FF18
29989                                           ! 4240 0x001a,0x221b,0x001d,
29990 7D3A                      001A            .word	$1A
29991 7D3C                      221B            .word	$221B
29992 7D3E                      001D            .word	$1D
29993                                           ! 4241 0xffff
29994                                           ! 4242 };
29995 7D40                      FFFF            .word	$FFFF
29996                                           !BCC_EOS
29997                                           ! 4243 unsigned short cseq_640x480x24[] = {
29998                                           export	_cseq_640x480x24
29999                       00007D42            _cseq_640x480x24:
30000                                           ! 4244 0x0300,0x2101,0x0f02,0x0003,0x0e04,0x1507,
30001 7D42                      0300            .word	$300
30002 7D44                      2101            .word	$2101
30003 7D46                      0F02            .word	$F02
30004 7D48                      0003            .word	3
30005 7D4A                      0E04            .word	$E04
30006 7D4C                      1507            .word	$1507
30007                                           ! 4245 0x580b,0x580c,0x580d,0x580e,
30008 7D4E                      580B            .word	$580B
30009 7D50                      580C            .word	$580C
30010 7D52                      580D            .word	$580D
30011 7D54                      580E            .word	$580E
30012                                           ! 4246 0x0412,0x0013,0x2017,
30013 7D56                      0412            .word	$412
30014 7D58                      0013            .word	$13
30015 7D5A                      2017            .word	$2017
30016                                           ! 4247 0x331b,0x331c,0x331d,0x331e,
30017 7D5C                      331B            .word	$331B
30018 7D5E                      331C            .word	$331C
30019 7D60                      331D            .word	$331D
30020 7D62                      331E            .word	$331E
30021                                           ! 4248 0xffff
30022                                           ! 4249 };
30023 7D64                      FFFF            .word	$FFFF
30024                                           !BCC_EOS
30025                                           ! 4250 unsigned short ccrtc_640x480x24[] = {
30026                                           export	_ccrtc_640x480x24
30027                       00007D66            _ccrtc_640x480x24:
30028                                           ! 4251 0x2c11,
30029 7D66                      2C11            .word	$2C11
30030                                           ! 4252 0x5f00,0x4f01,0x4f02,0x8003,0x5204,0x1e05,0x0b06,0x3e07,
30031 7D68                      5F00            .word	$5F00
30032 7D6A                      4F01            .word	$4F01
30033 7D6C                      4F02            .word	$4F02
30034 7D6E                      8003            .word	$8003
30035 7D70                      5204            .word	$5204
30036 7D72                      1E05            .word	$1E05
30037 7D74                      0B06            .word	$B06
30038 7D76                      3E07            .word	$3E07
30039                                           ! 4253 0x4009,0x000c,0x000d,
30040 7D78                      4009            .word	$4009
30041 7D7A                      000C            .word	$C
30042 7D7C                      000D            .word	$D
30043                                           ! 4254 0xea10,0xdf12,0x0013,0x4014,0xdf15,0x0b16,0xc317,0xff18,
30044 7D7E                      EA10            .word	$EA10
30045 7D80                      DF12            .word	$DF12
30046 7D82                      0013            .word	$13
30047 7D84                      4014            .word	$4014
30048 7D86                      DF15            .word	$DF15
30049 7D88                      0B16            .word	$B16
30050 7D8A                      C317            .word	$C317
30051 7D8C                      FF18            .word	$FF18
30052                                           ! 4255 0x001a,0x321b,0x001d,
30053 7D8E                      001A            .word	$1A
30054 7D90                      321B            .word	$321B
30055 7D92                      001D            .word	$1D
30056                                           ! 4256 0xffff
30057                                           ! 4257 };
30058 7D94                      FFFF            .word	$FFFF
30059                                           !BCC_EOS
30060                                           ! 4258 unsigned short cseq_800x600x8[] = {
30061                                           export	_cseq_800x600x8
30062                       00007D96            _cseq_800x600x8:
30063                                           ! 4259 0x0300,0x2101,0x0f02,0x0003,0x0e04,0x1107,
30064 7D96                      0300            .word	$300
30065 7D98                      2101            .word	$2101
30066 7D9A                      0F02            .word	$F02
30067 7D9C                      0003            .word	3
30068 7D9E                      0E04            .word	$E04
30069 7DA0                      1107            .word	$1107
30070                                           ! 4260 0x230b,0x230c,0x230d,0x230e,
30071 7DA2                      230B            .word	$230B
30072 7DA4                      230C            .word	$230C
30073 7DA6                      230D            .word	$230D
30074 7DA8                      230E            .word	$230E
30075                                           ! 4261 0x0412,0x0013,0x2017,
30076 7DAA                      0412            .word	$412
30077 7DAC                      0013            .word	$13
30078 7DAE                      2017            .word	$2017
30079                                           ! 4262 0x141b,0x141c,0x141d,0x141e,
30080 7DB0                      141B            .word	$141B
30081 7DB2                      141C            .word	$141C
30082 7DB4                      141D            .word	$141D
30083 7DB6                      141E            .word	$141E
30084                                           ! 4263 0xffff
30085                                           ! 4264 };
30086 7DB8                      FFFF            .word	$FFFF
30087                                           !BCC_EOS
30088                                           ! 4265 unsigned short ccrtc_800x600x8[] = {
30089                                           export	_ccrtc_800x600x8
30090                       00007DBA            _ccrtc_800x600x8:
30091                                           ! 4266 0x2311,0x7d00,0x6301,0x6302,0x8003,0x6b04,0x1a05,0x9806,0xf007,
30092 7DBA                      2311            .word	$2311
30093 7DBC                      7D00            .word	$7D00
30094 7DBE                      6301            .word	$6301
30095 7DC0                      6302            .word	$6302
30096 7DC2                      8003            .word	$8003
30097 7DC4                      6B04            .word	$6B04
30098 7DC6                      1A05            .word	$1A05
30099 7DC8                      9806            .word	$9806
30100 7DCA                      F007            .word	$F007
30101                                           ! 4267 0x6009,0x000c,0x000d,
30102 7DCC                      6009            .word	$6009
30103 7DCE                      000C            .word	$C
30104 7DD0                      000D            .word	$D
30105                                           ! 4268 0x7d10,0x5712,0x6413,0x4014,0x5715,0x9816,0xc317,0xff18,
30106 7DD2                      7D10            .word	$7D10
30107 7DD4                      5712            .word	$5712
30108 7DD6                      6413            .word	$6413
30109 7DD8                      4014            .word	$4014
30110 7DDA                      5715            .word	$5715
30111 7DDC                      9816            .word	$9816
30112 7DDE                      C317            .word	$C317
30113 7DE0                      FF18            .word	$FF18
30114                                           ! 4269 0x001a,0x221b,0x001d,
30115 7DE2                      001A            .word	$1A
30116 7DE4                      221B            .word	$221B
30117 7DE6                      001D            .word	$1D
30118                                           ! 4270 0xffff
30119                                           ! 4271 };
30120 7DE8                      FFFF            .word	$FFFF
30121                                           !BCC_EOS
30122                                           ! 4272 unsigned short cseq_800x600x16[] = {
30123                                           export	_cseq_800x600x16
30124                       00007DEA            _cseq_800x600x16:
30125                                           ! 4273 0x0300,0x2101,0x0f02,0x0003,0x0e04,0x1707,
30126 7DEA                      0300            .word	$300
30127 7DEC                      2101            .word	$2101
30128 7DEE                      0F02            .word	$F02
30129 7DF0                      0003            .word	3
30130 7DF2                      0E04            .word	$E04
30131 7DF4                      1707            .word	$1707
30132                                           ! 4274 0x230b,0x230c,0x230d,0x230e,
30133 7DF6                      230B            .word	$230B
30134 7DF8                      230C            .word	$230C
30135 7DFA                      230D            .word	$230D
30136 7DFC                      230E            .word	$230E
30137                                           ! 4275 0x0412,0x0013,0x2017,
30138 7DFE                      0412            .word	$412
30139 7E00                      0013            .word	$13
30140 7E02                      2017            .word	$2017
30141                                           ! 4276 0x141b,0x141c,0x141d,0x141e,
30142 7E04                      141B            .word	$141B
30143 7E06                      141C            .word	$141C
30144 7E08                      141D            .word	$141D
30145 7E0A                      141E            .word	$141E
30146                                           ! 4277 0xffff
30147                                           ! 4278 };
30148 7E0C                      FFFF            .word	$FFFF
30149                                           !BCC_EOS
30150                                           ! 4279 unsigned short ccrtc_800x600x16[] = {
30151                                           export	_ccrtc_800x600x16
30152                       00007E0E            _ccrtc_800x600x16:
30153                                           ! 4280 0x2311,0x7d00,0x6301,0x6302,0x8003,0x6b04,0x1a05,0x9806,0xf007,
30154 7E0E                      2311            .word	$2311
30155 7E10                      7D00            .word	$7D00
30156 7E12                      6301            .word	$6301
30157 7E14                      6302            .word	$6302
30158 7E16                      8003            .word	$8003
30159 7E18                      6B04            .word	$6B04
30160 7E1A                      1A05            .word	$1A05
30161 7E1C                      9806            .word	$9806
30162 7E1E                      F007            .word	$F007
30163                                           ! 4281 0x6009,0x000c,0x000d,
30164 7E20                      6009            .word	$6009
30165 7E22                      000C            .word	$C
30166 7E24                      000D            .word	$D
30167                                           ! 4282 0x7d10,0x5712,0xc813,0x4014,0x5715,0x9816,0xc317,0xff18,
30168 7E26                      7D10            .word	$7D10
30169 7E28                      5712            .word	$5712
30170 7E2A                      C813            .word	$C813
30171 7E2C                      4014            .word	$4014
30172 7E2E                      5715            .word	$5715
30173 7E30                      9816            .word	$9816
30174 7E32                      C317            .word	$C317
30175 7E34                      FF18            .word	$FF18
30176                                           ! 4283 0x001a,0x221b,0x001d,
30177 7E36                      001A            .word	$1A
30178 7E38                      221B            .word	$221B
30179 7E3A                      001D            .word	$1D
30180                                           ! 4284 0xffff
30181                                           ! 4285 };
30182 7E3C                      FFFF            .word	$FFFF
30183                                           !BCC_EOS
30184                                           ! 4286 unsigned short cseq_800x600x24[] = {
30185                                           export	_cseq_800x600x24
30186                       00007E3E            _cseq_800x600x24:
30187                                           ! 4287 0x0300,0x
30188 7E3E                      0300            .word	$300
30189                                           ! 4287 2101,0x0f02,0x0003,0x0e04,0x1507,
30190 7E40                      2101            .word	$2101
30191 7E42                      0F02            .word	$F02
30192 7E44                      0003            .word	3
30193 7E46                      0E04            .word	$E04
30194 7E48                      1507            .word	$1507
30195                                           ! 4288 0x230b,0x230c,0x230d,0x230e,
30196 7E4A                      230B            .word	$230B
30197 7E4C                      230C            .word	$230C
30198 7E4E                      230D            .word	$230D
30199 7E50                      230E            .word	$230E
30200                                           ! 4289 0x0412,0x0013,0x2017,
30201 7E52                      0412            .word	$412
30202 7E54                      0013            .word	$13
30203 7E56                      2017            .word	$2017
30204                                           ! 4290 0x141b,0x141c,0x141d,0x141e,
30205 7E58                      141B            .word	$141B
30206 7E5A                      141C            .word	$141C
30207 7E5C                      141D            .word	$141D
30208 7E5E                      141E            .word	$141E
30209                                           ! 4291 0xffff
30210                                           ! 4292 };
30211 7E60                      FFFF            .word	$FFFF
30212                                           !BCC_EOS
30213                                           ! 4293 unsigned short ccrtc_800x600x24[] = {
30214                                           export	_ccrtc_800x600x24
30215                       00007E62            _ccrtc_800x600x24:
30216                                           ! 4294 0x2311,0x7d00,0x6301,0x6302,0x8003,0x6b04,0x1a05,0x9806,0xf007,
30217 7E62                      2311            .word	$2311
30218 7E64                      7D00            .word	$7D00
30219 7E66                      6301            .word	$6301
30220 7E68                      6302            .word	$6302
30221 7E6A                      8003            .word	$8003
30222 7E6C                      6B04            .word	$6B04
30223 7E6E                      1A05            .word	$1A05
30224 7E70                      9806            .word	$9806
30225 7E72                      F007            .word	$F007
30226                                           ! 4295 0x6009,0x000c,0x000d,
30227 7E74                      6009            .word	$6009
30228 7E76                      000C            .word	$C
30229 7E78                      000D            .word	$D
30230                                           ! 4296 0x7d10,0x5712,0x2c13,0x4014,0x5715,0x9816,0xc317,0xff18,
30231 7E7A                      7D10            .word	$7D10
30232 7E7C                      5712            .word	$5712
30233 7E7E                      2C13            .word	$2C13
30234 7E80                      4014            .word	$4014
30235 7E82                      5715            .word	$5715
30236 7E84                      9816            .word	$9816
30237 7E86                      C317            .word	$C317
30238 7E88                      FF18            .word	$FF18
30239                                           ! 4297 0x001a,0x321b,0x001d,
30240 7E8A                      001A            .word	$1A
30241 7E8C                      321B            .word	$321B
30242 7E8E                      001D            .word	$1D
30243                                           ! 4298 0xffff
30244                                           ! 4299 };
30245 7E90                      FFFF            .word	$FFFF
30246                                           !BCC_EOS
30247                                           ! 4300 unsigned short cseq_1024x768x8[] = {
30248                                           export	_cseq_1024x768x8
30249                       00007E92            _cseq_1024x768x8:
30250                                           ! 4301 0x0300,0x2101,0x0f02,0x0003,0x0e04,0x1107,
30251 7E92                      0300            .word	$300
30252 7E94                      2101            .word	$2101
30253 7E96                      0F02            .word	$F02
30254 7E98                      0003            .word	3
30255 7E9A                      0E04            .word	$E04
30256 7E9C                      1107            .word	$1107
30257                                           ! 4302 0x760b,0x760c,0x760d,0x760e,
30258 7E9E                      760B            .word	$760B
30259 7EA0                      760C            .word	$760C
30260 7EA2                      760D            .word	$760D
30261 7EA4                      760E            .word	$760E
30262                                           ! 4303 0x0412,0x0013,0x2017,
30263 7EA6                      0412            .word	$412
30264 7EA8                      0013            .word	$13
30265 7EAA                      2017            .word	$2017
30266                                           ! 4304 0x341b,0x341c,0x341d,0x341e,
30267 7EAC                      341B            .word	$341B
30268 7EAE                      341C            .word	$341C
30269 7EB0                      341D            .word	$341D
30270 7EB2                      341E            .word	$341E
30271                                           ! 4305 0xffff
30272                                           ! 4306 };
30273 7EB4                      FFFF            .word	$FFFF
30274                                           !BCC_EOS
30275                                           ! 4307 unsigned short ccrtc_1024x768x8[] = {
30276                                           export	_ccrtc_1024x768x8
30277                       00007EB6            _ccrtc_1024x768x8:
30278                                           ! 4308 0x2911,0xa300,0x7f01,0x7f02,0x8603,0x8304,0x9405,0x2406,0xf507,
30279 7EB6                      2911            .word	$2911
30280 7EB8                      A300            .word	$A300
30281 7EBA                      7F01            .word	$7F01
30282 7EBC                      7F02            .word	$7F02
30283 7EBE                      8603            .word	$8603
30284 7EC0                      8304            .word	$8304
30285 7EC2                      9405            .word	$9405
30286 7EC4                      2406            .word	$2406
30287 7EC6                      F507            .word	$F507
30288                                           ! 4309 0x6009,0x000c,0x000d,
30289 7EC8                      6009            .word	$6009
30290 7ECA                      000C            .word	$C
30291 7ECC                      000D            .word	$D
30292                                           ! 4310 0x0310,0xff12,0x8013,0x4014,0xff15,0x2416,0xc317,0xff18,
30293 7ECE                      0310            .word	$310
30294 7ED0                      FF12            .word	$FF12
30295 7ED2                      8013            .word	$8013
30296 7ED4                      4014            .word	$4014
30297 7ED6                      FF15            .word	$FF15
30298 7ED8                      2416            .word	$2416
30299 7EDA                      C317            .word	$C317
30300 7EDC                      FF18            .word	$FF18
30301                                           ! 4311 0x001a,0x221b,0x001d,
30302 7EDE                      001A            .word	$1A
30303 7EE0                      221B            .word	$221B
30304 7EE2                      001D            .word	$1D
30305                                           ! 4312 0xffff
30306                                           ! 4313 };
30307 7EE4                      FFFF            .word	$FFFF
30308                                           !BCC_EOS
30309                                           ! 4314 unsigned short cseq_1024x768x16[] = {
30310                                           export	_cseq_1024x768x16
30311                       00007EE6            _cseq_1024x768x16:
30312                                           ! 4315 0x0300,0x2101,0x0f02,0x0003,0x0e04,0x1707,
30313 7EE6                      0300            .word	$300
30314 7EE8                      2101            .word	$2101
30315 7EEA                      0F02            .word	$F02
30316 7EEC                      0003            .word	3
30317 7EEE                      0E04            .word	$E04
30318 7EF0                      1707            .word	$1707
30319                                           ! 4316 0x760b,0x760c,0x760d,0x760e,
30320 7EF2                      760B            .word	$760B
30321 7EF4                      760C            .word	$760C
30322 7EF6                      760D            .word	$760D
30323 7EF8                      760E            .word	$760E
30324                                           ! 4317 0x0412,0x0013,0x2017,
30325 7EFA                      0412            .word	$412
30326 7EFC                      0013            .word	$13
30327 7EFE                      2017            .word	$2017
30328                                           ! 4318 0x341b,0x341c,0x341d,0x341e,
30329 7F00                      341B            .word	$341B
30330 7F02                      341C            .word	$341C
30331 7F04                      341D            .word	$341D
30332 7F06                      341E            .word	$341E
30333                                           ! 4319 0xffff
30334                                           ! 4320 };
30335 7F08                      FFFF            .word	$FFFF
30336                                           !BCC_EOS
30337                                           ! 4321 unsigned short ccrtc_1024x768x16[] = {
30338                                           export	_ccrtc_1024x768x16
30339                       00007F0A            _ccrtc_1024x768x16:
30340                                           ! 4322 0x2911,0xa300,0x7f01,0x7f02,0x8603,0x8304,0x9405,0x2406,0xf507,
30341 7F0A                      2911            .word	$2911
30342 7F0C                      A300            .word	$A300
30343 7F0E                      7F01            .word	$7F01
30344 7F10                      7F02            .word	$7F02
30345 7F12                      8603            .word	$8603
30346 7F14                      8304            .word	$8304
30347 7F16                      9405            .word	$9405
30348 7F18                      2406            .word	$2406
30349 7F1A                      F507            .word	$F507
30350                                           ! 4323 0x6009,0x000c,0x000d,
30351 7F1C                      6009            .word	$6009
30352 7F1E                      000C            .word	$C
30353 7F20                      000D            .word	$D
30354                                           ! 4324 0x0310,0xff12,0x0013,0x4014,0xff15,0x2416,0xc317,0xff18,
30355 7F22                      0310            .word	$310
30356 7F24                      FF12            .word	$FF12
30357 7F26                      0013            .word	$13
30358 7F28                      4014            .word	$4014
30359 7F2A                      FF15            .word	$FF15
30360 7F2C                      2416            .word	$2416
30361 7F2E                      C317            .word	$C317
30362 7F30                      FF18            .word	$FF18
30363                                           ! 4325 0x001a,0x321b,0x001d,
30364 7F32                      001A            .word	$1A
30365 7F34                      321B            .word	$321B
30366 7F36                      001D            .word	$1D
30367                                           ! 4326 0xffff
30368                                           ! 4327 };
30369 7F38                      FFFF            .word	$FFFF
30370                                           !BCC_EOS
30371                                           ! 4328 unsigned short cseq_1024x768x24[] = {
30372                                           export	_cseq_1024x768x24
30373                       00007F3A            _cseq_1024x768x24:
30374                                           ! 4329 0x0300,0x2101,0x0f02,0x0003,0x0e04,0x1507,
30375 7F3A                      0300            .word	$300
30376 7F3C                      2101            .word	$2101
30377 7F3E                      0F02            .word	$F02
30378 7F40                      0003            .word	3
30379 7F42                      0E04            .word	$E04
30380 7F44                      1507            .word	$1507
30381                                           ! 4330 0x760b,0x760c,0x760d,0x760e,
30382 7F46                      760B            .word	$760B
30383 7F48                      760C            .word	$760C
30384 7F4A                      760D            .word	$760D
30385 7F4C                      760E            .word	$760E
30386                                           ! 4331 0x0412,0x0013,0x2017,
30387 7F4E                      0412            .word	$412
30388 7F50                      0013            .word	$13
30389 7F52                      2017            .word	$2017
30390                                           ! 4332 0x341b,0x341c,0x341d,0x341e,
30391 7F54                      341B            .word	$341B
30392 7F56                      341C            .word	$341C
30393 7F58                      341D            .word	$341D
30394 7F5A                      341E            .word	$341E
30395                                           ! 4333 0xffff
30396                                           ! 4334 };
30397 7F5C                      FFFF            .word	$FFFF
30398                                           !BCC_EOS
30399                                           ! 4335 unsigned short ccrtc_1024x768x24[] = {
30400                                           export	_ccrtc_1024x768x24
30401                       00007F5E            _ccrtc_1024x768x24:
30402                                           ! 4336 0x2911,0xa300,0x7f01,0x7f02,0x8603,0x8304,0x9405,0x2406,0xf507,
30403 7F5E                      2911            .word	$2911
30404 7F60                      A300            .word	$A300
30405 7F62                      7F01            .word	$7F01
30406 7F64                      7F02            .word	$7F02
30407 7F66                      8603            .word	$8603
30408 7F68                      8304            .word	$8304
30409 7F6A                      9405            .word	$9405
30410 7F6C                      2406            .word	$2406
30411 7F6E                      F507            .word	$F507
30412                                           ! 4337 0x6009,0x000c,0x000d,
30413 7F70                      6009            .word	$6009
30414 7F72                      000C            .word	$C
30415 7F74                      000D            .word	$D
30416                                           ! 4338 0x0310,0xff12,0x8013,0x4014,0xff15,0x2416,0xc317,0xff18,
30417 7F76                      0310            .word	$310
30418 7F78                      FF12            .word	$FF12
30419 7F7A                      8013            .word	$8013
30420 7F7C                      4014            .word	$4014
30421 7F7E                      FF15            .word	$FF15
30422 7F80                      2416            .word	$2416
30423 7F82                      C317            .word	$C317
30424 7F84                      FF18            .word	$FF18
30425                                           ! 4339 0x001a,0x321b,0x001d,
30426 7F86                      001A            .word	$1A
30427 7F88                      321B            .word	$321B
30428 7F8A                      001D            .word	$1D
30429                                           ! 4340 0xffff
30430                                           ! 4341 };
30431 7F8C                      FFFF            .word	$FFFF
30432                                           !BCC_EOS
30433                                           ! 4342 unsigned short cseq_1280x1024x8[] = {
30434                                           export	_cseq_1280x1024x8
30435                       00007F8E            _cseq_1280x1024x8:
30436                                           ! 4343 0x0300,0x2101,0x0f02,0x0003,0x0e04,0x1107,
30437 7F8E                      0300            .word	$300
30438 7F90                      2101            .word	$2101
30439 7F92                      0F02            .word	$F02
30440 7F94                      0003            .word	3
30441 7F96                      0E04            .word	$E04
30442 7F98                      1107            .word	$1107
30443                                           ! 4344 0x760b,0x760c,0x760d,0x760e,
30444 7F9A                      760B            .word	$760B
30445 7F9C                      760C            .word	$760C
30446 7F9E                      760D            .word	$760D
30447 7FA0                      760E            .word	$760E
30448                                           ! 4345 0x0412,0x0013,0x2017,
30449 7FA2                      0412            .word	$412
30450 7FA4                      0013            .word	$13
30451 7FA6                      2017            .word	$2017
30452                                           ! 4346 0x341b,0x341c,0x341d,0x341e,
30453 7FA8                      341B            .word	$341B
30454 7FAA                      341C            .word	$341C
30455 7FAC                      341D            .word	$341D
30456 7FAE                      341E            .word	$341E
30457                                           ! 4347 0xffff
30458                                           ! 4348 };
30459 7FB0                      FFFF            .word	$FFFF
30460                                           !BCC_EOS
30461                                           ! 4349 unsigned short ccrtc_1280x1024x8[] = {
30462                                           export	_ccrtc_1280x1024x8
30463                       00007FB2            _ccrtc_1280x1024x8:
30464                                           ! 4350 0x2911,0xc300,0x9f01,0x9f02,0x8603,0x8304,0x9405,0x2406,0xf707,
30465 7FB2                      2911            .word	$2911
30466 7FB4                      C300            .word	$C300
30467 7FB6                      9F01            .word	$9F01
30468 7FB8                      9F02            .word	$9F02
30469 7FBA                      8603            .word	$8603
30470 7FBC                      8304            .word	$8304
30471 7FBE                      9405            .word	$9405
30472 7FC0                      2406            .word	$2406
30473 7FC2                      F707            .word	$F707
30474                                           ! 4351 0x6009,0x000c,0x000d,
30475 7FC4                      6009            .word	$6009
30476 7FC6                      000C            .word	$C
30477 7FC8                      000D            .word	$D
30478                                           ! 4352 0x0310,0xff12,0xa013,0x4014,0xff15,0x2416,0xc317,0xff18,
30479 7FCA                      0310            .word	$310
30480 7FCC                      FF12            .word	$FF12
30481 7FCE                      A013            .word	$A013
30482 7FD0                      4014            .word	$4014
30483 7FD2                      FF15            .word	$FF15
30484 7FD4                      2416            .word	$2416
30485 7FD6                      C317            .word	$C317
30486 7FD8                      FF18            .word	$FF18
30487                                           ! 4353 0x001a,0x221b,0x001d,
30488 7FDA                      001A            .word	$1A
30489 7FDC                      221B            .word	$221B
30490 7FDE                      001D            .word	$1D
30491                                           ! 4354 0xffff
30492                                           ! 4355 };
30493 7FE0                      FFFF            .word	$FFFF
30494                                           !BCC_EOS
30495                                           ! 4356 unsigned short cseq_1280x1024x16[] = {
30496                                           export	_cseq_1280x1024x16
30497                       00007FE2            _cseq_1280x1024x16:
30498                                           ! 4357 0x0300,0x2101,0x0f02,0x0003,0x0e04,0x1707,
30499 7FE2                      0300            .word	$300
30500 7FE4                      2101            .word	$2101
30501 7FE6                      0F02            .word	$F02
30502 7FE8                      0003            .word	3
30503 7FEA                      0E04            .word	$E04
30504 7FEC                      1707            .word	$1707
30505                                           ! 4358 0x760b,0x760c,0x760d,0x760e,
30506 7FEE                      760B            .word	$760B
30507 7FF0                      760C            .word	$760C
30508 7FF2                      760D            .word	$760D
30509 7FF4                      760E            .word	$760E
30510                                           ! 4359 0x0412,0x0013,0x2017,
30511 7FF6                      0412            .word	$412
30512 7FF8                      0013            .word	$13
30513 7FFA                      2017            .word	$2017
30514                                           ! 4360 0x341b,0x341c,0x341d,0x341e,
30515 7FFC                      341B            .word	$341B
30516 7FFE                      341C            .word	$341C
30517 8000                      341D            .word	$341D
30518 8002                      341E            .word	$341E
30519                                           ! 4361 0xffff
30520                                           ! 4362 };
30521 8004                      FFFF            .word	$FFFF
30522                                           !BCC_EOS
30523                                           ! 4363 u
30524                                           ! 4363 nsigned short ccrtc_1280x1024x16[] = {
30525                                           export	_ccrtc_1280x1024x16
30526                       00008006            _ccrtc_1280x1024x16:
30527                                           ! 4364 0x2911,0xc300,0x9f01,0x9f02,0x8603,0x8304,0x9405,0x2406,0xf707,
30528 8006                      2911            .word	$2911
30529 8008                      C300            .word	$C300
30530 800A                      9F01            .word	$9F01
30531 800C                      9F02            .word	$9F02
30532 800E                      8603            .word	$8603
30533 8010                      8304            .word	$8304
30534 8012                      9405            .word	$9405
30535 8014                      2406            .word	$2406
30536 8016                      F707            .word	$F707
30537                                           ! 4365 0x6009,0x000c,0x000d,
30538 8018                      6009            .word	$6009
30539 801A                      000C            .word	$C
30540 801C                      000D            .word	$D
30541                                           ! 4366 0x0310,0xff12,0x4013,0x4014,0xff15,0x2416,0xc317,0xff18,
30542 801E                      0310            .word	$310
30543 8020                      FF12            .word	$FF12
30544 8022                      4013            .word	$4013
30545 8024                      4014            .word	$4014
30546 8026                      FF15            .word	$FF15
30547 8028                      2416            .word	$2416
30548 802A                      C317            .word	$C317
30549 802C                      FF18            .word	$FF18
30550                                           ! 4367 0x001a,0x321b,0x001d,
30551 802E                      001A            .word	$1A
30552 8030                      321B            .word	$321B
30553 8032                      001D            .word	$1D
30554                                           ! 4368 0xffff
30555                                           ! 4369 };
30556 8034                      FFFF            .word	$FFFF
30557                                           !BCC_EOS
30558                                           ! 4370 unsigned short cseq_1600x1200x8[] = {
30559                                           export	_cseq_1600x1200x8
30560                       00008036            _cseq_1600x1200x8:
30561                                           ! 4371 0x0300,0x2101,0x0f02,0x0003,0x0e04,0x1107,
30562 8036                      0300            .word	$300
30563 8038                      2101            .word	$2101
30564 803A                      0F02            .word	$F02
30565 803C                      0003            .word	3
30566 803E                      0E04            .word	$E04
30567 8040                      1107            .word	$1107
30568                                           ! 4372 0x760b,0x760c,0x760d,0x760e,
30569 8042                      760B            .word	$760B
30570 8044                      760C            .word	$760C
30571 8046                      760D            .word	$760D
30572 8048                      760E            .word	$760E
30573                                           ! 4373 0x0412,0x0013,0x2017,
30574 804A                      0412            .word	$412
30575 804C                      0013            .word	$13
30576 804E                      2017            .word	$2017
30577                                           ! 4374 0x341b,0x341c,0x341d,0x341e,
30578 8050                      341B            .word	$341B
30579 8052                      341C            .word	$341C
30580 8054                      341D            .word	$341D
30581 8056                      341E            .word	$341E
30582                                           ! 4375 0xffff
30583                                           ! 4376 };
30584 8058                      FFFF            .word	$FFFF
30585                                           !BCC_EOS
30586                                           ! 4377 unsigned short ccrtc_1600x1200x8[] = {
30587                                           export	_ccrtc_1600x1200x8
30588                       0000805A            _ccrtc_1600x1200x8:
30589                                           ! 4378 0x2911,0xc300,0x9f01,0x9f02,0x8603,0x8304,0x9405,0x2406,0xf707,
30590 805A                      2911            .word	$2911
30591 805C                      C300            .word	$C300
30592 805E                      9F01            .word	$9F01
30593 8060                      9F02            .word	$9F02
30594 8062                      8603            .word	$8603
30595 8064                      8304            .word	$8304
30596 8066                      9405            .word	$9405
30597 8068                      2406            .word	$2406
30598 806A                      F707            .word	$F707
30599                                           ! 4379 0x6009,0x000c,0x000d,
30600 806C                      6009            .word	$6009
30601 806E                      000C            .word	$C
30602 8070                      000D            .word	$D
30603                                           ! 4380 0x0310,0xff12,0xa013,0x4014,0xff15,0x2416,0xc317,0xff18,
30604 8072                      0310            .word	$310
30605 8074                      FF12            .word	$FF12
30606 8076                      A013            .word	$A013
30607 8078                      4014            .word	$4014
30608 807A                      FF15            .word	$FF15
30609 807C                      2416            .word	$2416
30610 807E                      C317            .word	$C317
30611 8080                      FF18            .word	$FF18
30612                                           ! 4381 0x001a,0x221b,0x001d,
30613 8082                      001A            .word	$1A
30614 8084                      221B            .word	$221B
30615 8086                      001D            .word	$1D
30616                                           ! 4382 0xffff
30617                                           ! 4383 };
30618 8088                      FFFF            .word	$FFFF
30619                                           !BCC_EOS
30620                                           ! 4384 cirrus_mode_t cirrus_modes[] =
30621                                           ! 4385 {
30622                                           export	_cirrus_modes
30623                       0000808A            _cirrus_modes:
30624                                           ! 4386  {0x5f,640,480,8,0x00,
30625 808A                      005F            .word	$5F
30626 808C                      0280            .word	$280
30627 808E                      01E0            .word	$1E0
30628 8090                      0008            .word	8
30629 8092                      0000            .word	0
30630                                           ! 4387    cseq_640x480x8,cgraph_svgacolor,ccrtc_640x480x8,8,
30631 8094                      7C9A            .word	_cseq_640x480x8
30632 8096                      7C80            .word	_cgraph_svgacolor
30633 8098                      7CBE            .word	_ccrtc_640x480x8
30634 809A                        08            .byte	8
30635                                           ! 4388    4,0,0,0,0,0,0,0,0},
30636 809B                        04            .byte	4
30637 809C                        00            .byte	0
30638 809D                        00            .byte	0
30639 809E                        00            .byte	0
30640 809F                        00            .byte	0
30641 80A0                        00            .byte	0
30642 80A1                        00            .byte	0
30643 80A2                        00            .byte	0
30644 80A3                        00            .byte	0
30645                                           ! 4389  {0x64,640,480,16,0xe1,
30646 80A4                      0064            .word	$64
30647 80A6                      0280            .word	$280
30648 80A8                      01E0            .word	$1E0
30649 80AA                      0010            .word	$10
30650 80AC                      00E1            .word	$E1
30651                                           ! 4390    cseq_640x480x16,cgraph_svgacolor,ccrtc_640x480x16,16,
30652 80AE                      7CEE            .word	_cseq_640x480x16
30653 80B0                      7C80            .word	_cgraph_svgacolor
30654 80B2                      7D12            .word	_ccrtc_640x480x16
30655 80B4                        10            .byte	$10
30656                                           ! 4391    6,5,11,6,5,5,0,0,0},
30657 80B5                        06            .byte	6
30658 80B6                        05            .byte	5
30659 80B7                        0B            .byte	$B
30660 80B8                        06            .byte	6
30661 80B9                        05            .byte	5
30662 80BA                        05            .byte	5
30663 80BB                        00            .byte	0
30664 80BC                        00            .byte	0
30665 80BD                        00            .byte	0
30666                                           ! 4392  {0x66,640,480,15,0xf0,
30667 80BE                      0066            .word	$66
30668 80C0                      0280            .word	$280
30669 80C2                      01E0            .word	$1E0
30670 80C4                      000F            .word	$F
30671 80C6                      00F0            .word	$F0
30672                                           ! 4393    cseq_640x480x16,cgraph_svgacolor,ccrtc_640x480x16,16,
30673 80C8                      7CEE            .word	_cseq_640x480x16
30674 80CA                      7C80            .word	_cgraph_svgacolor
30675 80CC                      7D12            .word	_ccrtc_640x480x16
30676 80CE                        10            .byte	$10
30677                                           ! 4394    6,5,10,5,5,5,0,1,15},
30678 80CF                        06            .byte	6
30679 80D0                        05            .byte	5
30680 80D1                        0A            .byte	$A
30681 80D2                        05            .byte	5
30682 80D3                        05            .byte	5
30683 80D4                        05            .byte	5
30684 80D5                        00            .byte	0
30685 80D6                        01            .byte	1
30686 80D7                        0F            .byte	$F
30687                                           ! 4395  {0x71,640,480,24,0xe5,
30688 80D8                      0071            .word	$71
30689 80DA                      0280            .word	$280
30690 80DC                      01E0            .word	$1E0
30691 80DE                      0018            .word	$18
30692 80E0                      00E5            .word	$E5
30693                                           ! 4396    cseq_640x480x24,cgraph_svgacolor,ccrtc_640x480x24,24,
30694 80E2                      7D42            .word	_cseq_640x480x24
30695 80E4                      7C80            .word	_cgraph_svgacolor
30696 80E6                      7D66            .word	_ccrtc_640x480x24
30697 80E8                        18            .byte	$18
30698                                           ! 4397    6,8,16,8,8,8,0,0,0},
30699 80E9                        06            .byte	6
30700 80EA                        08            .byte	8
30701 80EB                        10            .byte	$10
30702 80EC                        08            .byte	8
30703 80ED                        08            .byte	8
30704 80EE                        08            .byte	8
30705 80EF                        00            .byte	0
30706 80F0                        00            .byte	0
30707 80F1                        00            .byte	0
30708                                           ! 4398  {0x5c,800,600,8,0x00,
30709 80F2                      005C            .word	$5C
30710 80F4                      0320            .word	$320
30711 80F6                      0258            .word	$258
30712 80F8                      0008            .word	8
30713 80FA                      0000            .word	0
30714                                           ! 4399    cseq_800x600x8,cgraph_svgacolor,ccrtc_800x600x8,8,
30715 80FC                      7D96            .word	_cseq_800x600x8
30716 80FE                      7C80            .word	_cgraph_svgacolor
30717 8100                      7DBA            .word	_ccrtc_800x600x8
30718 8102                        08            .byte	8
30719                                           ! 4400    4,0,0,0,0,0,0,0,0},
30720 8103                        04            .byte	4
30721 8104                        00            .byte	0
30722 8105                        00            .byte	0
30723 8106                        00            .byte	0
30724 8107                        00            .byte	0
30725 8108                        00            .byte	0
30726 8109                        00            .byte	0
30727 810A                        00            .byte	0
30728 810B                        00            .byte	0
30729                                           ! 4401  {0x65,800,600,16,0xe1,
30730 810C                      0065            .word	$65
30731 810E                      0320            .word	$320
30732 8110                      0258            .word	$258
30733 8112                      0010            .word	$10
30734 8114                      00E1            .word	$E1
30735                                           ! 4402    cseq_800x600x16,cgraph_svgacolor,ccrtc_800x600x16,16,
30736 8116                      7DEA            .word	_cseq_800x600x16
30737 8118                      7C80            .word	_cgraph_svgacolor
30738 811A                      7E0E            .word	_ccrtc_800x600x16
30739 811C                        10            .byte	$10
30740                                           ! 4403    6,5,11,6,5,5,0,0,0},
30741 811D                        06            .byte	6
30742 811E                        05            .byte	5
30743 811F                        0B            .byte	$B
30744 8120                        06            .byte	6
30745 8121                        05            .byte	5
30746 8122                        05            .byte	5
30747 8123                        00            .byte	0
30748 8124                        00            .byte	0
30749 8125                        00            .byte	0
30750                                           ! 4404  {0x67,800,600,15,0xf0,
30751 8126                      0067            .word	$67
30752 8128                      0320            .word	$320
30753 812A                      0258            .word	$258
30754 812C                      000F            .word	$F
30755 812E                      00F0            .word	$F0
30756                                           ! 4405    cseq_800x600x16,cgraph_svgacolor,ccrtc_800x600x16,16,
30757 8130                      7DEA            .word	_cseq_800x600x16
30758 8132                      7C80            .word	_cgraph_svgacolor
30759 8134                      7E0E            .word	_ccrtc_800x600x16
30760 8136                        10            .byte	$10
30761                                           ! 4406    6,5,10,5,5,5,0,1,15},
30762 8137                        06            .byte	6
30763 8138                        05            .byte	5
30764 8139                        0A            .byte	$A
30765 813A                        05            .byte	5
30766 813B                        05            .byte	5
30767 813C                        05            .byte	5
30768 813D                        00            .byte	0
30769 813E                        01            .byte	1
30770 813F                        0F            .byte	$F
30771                                           ! 4407  {0x60,1024,768,8,0x00,
30772 8140                      0060            .word	$60
30773 8142                      0400            .word	$400
30774 8144                      0300            .word	$300
30775 8146                      0008            .word	8
30776 8148                      0000            .word	0
30777                                           ! 4408    cseq_1024x768x8,cgraph_svgacolor,ccrtc_1024x768x8,8,
30778 814A                      7E92            .word	_cseq_1024x768x8
30779 814C                      7C80            .word	_cgraph_svgacolor
30780 814E                      7EB6            .word	_ccrtc_1024x768x8
30781 8150                        08            .byte	8
30782                                           ! 4409    4,0,0,0,0,0,0,0,0},
30783 8151                        04            .byte	4
30784 8152                        00            .byte	0
30785 8153                        00            .byte	0
30786 8154                        00            .byte	0
30787 8155                        00            .byte	0
30788 8156                        00            .byte	0
30789 8157                        00            .byte	0
30790 8158                        00            .byte	0
30791 8159                        00            .byte	0
30792                                           ! 4410  {0x74,1024,768,16,0xe1,
30793 815A                      0074            .word	$74
30794 815C                      0400            .word	$400
30795 815E                      0300            .word	$300
30796 8160                      0010            .word	$10
30797 8162                      00E1            .word	$E1
30798                                           ! 4411    cseq_1024x768x16,cgraph_svgacolor,ccrtc_1024x768x16,16,
30799 8164                      7EE6            .word	_cseq_1024x768x16
30800 8166                      7C80            .word	_cgraph_svgacolor
30801 8168                      7F0A            .word	_ccrtc_1024x768x16
30802 816A                        10            .byte	$10
30803                                           ! 4412    6,5,11,6,5,5,0,0,0},
30804 816B                        06            .byte	6
30805 816C                        05            .byte	5
30806 816D                        0B            .byte	$B
30807 816E                        06            .byte	6
30808 816F                        05            .byte	5
30809 8170                        05            .byte	5
30810 8171                        00            .byte	0
30811 8172                        00            .byte	0
30812 8173                        00            .byte	0
30813                                           ! 4413  {0x68,1024,768,15,0xf0,
30814 8174                      0068            .word	$68
30815 8176                      0400            .word	$400
30816 8178                      0300            .word	$300
30817 817A                      000F            .word	$F
30818 817C                      00F0            .word	$F0
30819                                           ! 4414    cseq_1024x768x16,cgraph_svgacolor,ccrtc_1024x768x16,16,
30820 817E                      7EE6            .word	_cseq_1024x768x16
30821 8180                      7C80            .word	_cgraph_svgacolor
30822 8182                      7F0A            .word	_ccrtc_1024x768x16
30823 8184                        10            .byte	$10
30824                                           ! 4415    6,5,10,5,5,5,0,1,15},
30825 8185                        06            .byte	6
30826 8186                        05            .byte	5
30827 8187                        0A            .byte	$A
30828 8188                        05            .byte	5
30829 8189                        05            .byte	5
30830 818A                        05            .byte	5
30831 818B                        00            .byte	0
30832 818C                        01            .byte	1
30833 818D                        0F            .byte	$F
30834                                           ! 4416  {0x78,800,600,24,0xe5,
30835 818E                      0078            .word	$78
30836 8190                      0320            .word	$320
30837 8192                      0258            .word	$258
30838 8194                      0018            .word	$18
30839 8196                      00E5            .word	$E5
30840                                           ! 4417    cseq_800x600x24,cgraph_svgacolor,ccrtc_800x600x24,24,
30841 8198                      7E3E            .word	_cseq_800x600x24
30842 819A                      7C80            .word	_cgraph_svgacolor
30843 819C                      7E62            .word	_ccrtc_800x600x24
30844 819E                        18            .byte	$18
30845                                           ! 4418    6,8,16,8,8,8,0,0,0},
30846 819F                        06            .byte	6
30847 81A0                        08            .byte	8
30848 81A1                        10            .byte	$10
30849 81A2                        08            .byte	8
30850 81A3                        08            .byte	8
30851 81A4                        08            .byte	8
30852 81A5                        00            .byte	0
30853 81A6                        00            .byte	0
30854 81A7                        00            .byte	0
30855                                           ! 4419  {0x79,1024,768,24,0xe5,
30856 81A8                      0079            .word	$79
30857 81AA                      0400            .word	$400
30858 81AC                      0300            .word	$300
30859 81AE                      0018            .word	$18
30860 81B0                      00E5            .word	$E5
30861                                           ! 4420    cseq_1024x768x24,cgraph_svgacolor,ccrtc_1024x768x24,24,
30862 81B2                      7F3A            .word	_cseq_1024x768x24
30863 81B4                      7C80            .word	_cgraph_svgacolor
30864 81B6                      7F5E            .word	_ccrtc_1024x768x24
30865 81B8                        18            .byte	$18
30866                                           ! 4421    6,8,16,8,8,8,0,0,0},
30867 81B9                        06            .byte	6
30868 81BA                        08            .byte	8
30869 81BB                        10            .byte	$10
30870 81BC                        08            .byte	8
30871 81BD                        08            .byte	8
30872 81BE                        08            .byte	8
30873 81BF                        00            .byte	0
30874 81C0                        00            .byte	0
30875 81C1                        00            .byte	0
30876                                           ! 4422  {0x6d,1280,1024,8,0x00,
30877 81C2                      006D            .word	$6D
30878 81C4                      0500            .word	$500
30879 81C6                      0400            .word	$400
30880 81C8                      0008            .word	8
30881 81CA                      0000            .word	0
30882                                           ! 4423    cseq_1280x1024x8,cgraph_svgacolor,ccrtc_1280x1024x8,8,
30883 81CC                      7F8E            .word	_cseq_1280x1024x8
30884 81CE                      7C80            .word	_cgraph_svgacolor
30885 81D0                      7FB2            .word	_ccrtc_1280x1024x8
30886 81D2                        08            .byte	8
30887                                           ! 4424    4,0,0,0,0,0,0,0,0},
30888 81D3                        04            .byte	4
30889 81D4                        00            .byte	0
30890 81D5                        00            .byte	0
30891 81D6                        00            .byte	0
30892 81D7                        00            .byte	0
30893 81D8                        00            .byte	0
30894 81D9                        00            .byte	0
30895 81DA                        00            .byte	0
30896 81DB                        00            .byte	0
30897                                           ! 4425  {0x69,1280,1024,15,0xf0,
30898 81DC                      0069            .word	$69
30899 81DE                      0500            .word	$500
30900 81E0                      0400            .word	$400
30901 81E2                      000F            .word	$F
30902 81E4                      00F0            .word	$F0
30903                                           ! 4426    cseq_1280x1024x16,cgr
30904 81E6                      7FE2            .word	_cseq_1280x1024x16
30905                                           ! 4426 aph_svgacolor,ccrtc_1280x1024x16,16,
30906 81E8                      7C80            .word	_cgraph_svgacolor
30907 81EA                      8006            .word	_ccrtc_1280x1024x16
30908 81EC                        10            .byte	$10
30909                                           ! 4427    6,5,10,5,5,5,0,1,15},
30910 81ED                        06            .byte	6
30911 81EE                        05            .byte	5
30912 81EF                        0A            .byte	$A
30913 81F0                        05            .byte	5
30914 81F1                        05            .byte	5
30915 81F2                        05            .byte	5
30916 81F3                        00            .byte	0
30917 81F4                        01            .byte	1
30918 81F5                        0F            .byte	$F
30919                                           ! 4428  {0x75,1280,1024,16,0xe1,
30920 81F6                      0075            .word	$75
30921 81F8                      0500            .word	$500
30922 81FA                      0400            .word	$400
30923 81FC                      0010            .word	$10
30924 81FE                      00E1            .word	$E1
30925                                           ! 4429    cseq_1280x1024x16,cgraph_svgacolor,ccrtc_1280x1024x16,16,
30926 8200                      7FE2            .word	_cseq_1280x1024x16
30927 8202                      7C80            .word	_cgraph_svgacolor
30928 8204                      8006            .word	_ccrtc_1280x1024x16
30929 8206                        10            .byte	$10
30930                                           ! 4430    6,5,11,6,5,5,0,0,0},
30931 8207                        06            .byte	6
30932 8208                        05            .byte	5
30933 8209                        0B            .byte	$B
30934 820A                        06            .byte	6
30935 820B                        05            .byte	5
30936 820C                        05            .byte	5
30937 820D                        00            .byte	0
30938 820E                        00            .byte	0
30939 820F                        00            .byte	0
30940                                           ! 4431  {0x7b,1600,1200,8,0x00,
30941 8210                      007B            .word	$7B
30942 8212                      0640            .word	$640
30943 8214                      04B0            .word	$4B0
30944 8216                      0008            .word	8
30945 8218                      0000            .word	0
30946                                           ! 4432    cseq_1600x1200x8,cgraph_svgacolor,ccrtc_1600x1200x8,8,
30947 821A                      8036            .word	_cseq_1600x1200x8
30948 821C                      7C80            .word	_cgraph_svgacolor
30949 821E                      805A            .word	_ccrtc_1600x1200x8
30950 8220                        08            .byte	8
30951                                           ! 4433    4,0,0,0,0,0,0,0,0},
30952 8221                        04            .byte	4
30953 8222                        00            .byte	0
30954 8223                        00            .byte	0
30955 8224                        00            .byte	0
30956 8225                        00            .byte	0
30957 8226                        00            .byte	0
30958 8227                        00            .byte	0
30959 8228                        00            .byte	0
30960 8229                        00            .byte	0
30961                                           ! 4434  {0xfe,0,0,0,0,cseq_vga,cgraph_vga,ccrtc_vga,0,
30962 822A                      00FE            .word	$FE
30963 822C                      0000            .word	0
30964 822E                      0000            .word	0
30965 8230                      0000            .word	0
30966 8232                      0000            .word	0
30967 8234                      7C6C            .word	_cseq_vga
30968 8236                      7C70            .word	_cgraph_vga
30969 8238                      7C78            .word	_ccrtc_vga
30970 823A                        00            .byte	0
30971                                           ! 4435    0xff,0,0,0,0,0,0,0,0},
30972 823B                        FF            .byte	$FF
30973 823C                        00            .byte	0
30974 823D                        00            .byte	0
30975 823E                        00            .byte	0
30976 823F                        00            .byte	0
30977 8240                        00            .byte	0
30978 8241                        00            .byte	0
30979 8242                        00            .byte	0
30980 8243                        00            .byte	0
30981                                           ! 4436  {0xff,0,0,0,0,0,0,0,0,
30982 8244                      00FF            .word	$FF
30983 8246                      0000            .word	0
30984 8248                      0000            .word	0
30985 824A                      0000            .word	0
30986 824C                      0000            .word	0
30987 824E                      0000            .word	0
30988 8250                      0000            .word	0
30989 8252                      0000            .word	0
30990 8254                        00            .byte	0
30991                                           ! 4437    0xff,0,0,0,0,0,0,0,0},
30992 8255                        FF            .byte	$FF
30993 8256                        00            .byte	0
30994 8257                        00            .byte	0
30995 8258                        00            .byte	0
30996 8259                        00            .byte	0
30997 825A                        00            .byte	0
30998 825B                        00            .byte	0
30999 825C                        00            .byte	0
31000 825D                        00            .byte	0
31001                                           ! 4438 };
31002                                           !BCC_EOS
31003                                           ! 4439 unsigned char cirrus_id_table[] = {
31004                                           export	_cirrus_id_table
31005                       0000825E            _cirrus_id_table:
31006                                           ! 4440   0xA0, 0x32,
31007 825E                        A0            .byte	$A0
31008 825F                        32            .byte	$32
31009                                           ! 4441   0xB8, 0x39,
31010 8260                        B8            .byte	$B8
31011 8261                        39            .byte	$39
31012                                           ! 4442   0xff, 0xff
31013 8262                        FF            .byte	$FF
31014                                           ! 4443 };
31015 8263                        FF            .byte	$FF
31016                                           !BCC_EOS
31017                                           ! 4444 unsigned short cirrus_vesa_modelist[] = {
31018                                           export	_cirrus_vesa_modelist
31019                       00008264            _cirrus_vesa_modelist:
31020                                           ! 4445   0x101, 0x5f,
31021 8264                      0101            .word	$101
31022 8266                      005F            .word	$5F
31023                                           ! 4446   0x110, 0x66,
31024 8268                      0110            .word	$110
31025 826A                      0066            .word	$66
31026                                           ! 4447   0x111, 0x64,
31027 826C                      0111            .word	$111
31028 826E                      0064            .word	$64
31029                                           ! 4448   0x112, 0x71,
31030 8270                      0112            .word	$112
31031 8272                      0071            .word	$71
31032                                           ! 4449   0x103, 0x5c,
31033 8274                      0103            .word	$103
31034 8276                      005C            .word	$5C
31035                                           ! 4450   0x113, 0x67,
31036 8278                      0113            .word	$113
31037 827A                      0067            .word	$67
31038                                           ! 4451   0x114, 0x65,
31039 827C                      0114            .word	$114
31040 827E                      0065            .word	$65
31041                                           ! 4452   0x115, 0x78,
31042 8280                      0115            .word	$115
31043 8282                      0078            .word	$78
31044                                           ! 4453   0x105, 0x60,
31045 8284                      0105            .word	$105
31046 8286                      0060            .word	$60
31047                                           ! 4454   0x116, 0x68,
31048 8288                      0116            .word	$116
31049 828A                      0068            .word	$68
31050                                           ! 4455   0x117, 0x74,
31051 828C                      0117            .word	$117
31052 828E                      0074            .word	$74
31053                                           ! 4456   0x118, 0x79,
31054 8290                      0118            .word	$118
31055 8292                      0079            .word	$79
31056                                           ! 4457   0x107, 0x6d,
31057 8294                      0107            .word	$107
31058 8296                      006D            .word	$6D
31059                                           ! 4458   0x119, 0x69,
31060 8298                      0119            .word	$119
31061 829A                      0069            .word	$69
31062                                           ! 4459   0x11a, 0x75,
31063 829C                      011A            .word	$11A
31064 829E                      0075            .word	$75
31065                                           ! 4460   0xffff,0xffff
31066 82A0                      FFFF            .word	$FFFF
31067                                           ! 4461 };
31068 82A2                      FFFF            .word	$FFFF
31069                                           !BCC_EOS
31070                                           ! 4462 #asm
31071                                           !BCC_ASM
31072                       000082A4            cirrus_installed:
31073 82A4                        63            .ascii "cirrus-compatible VGA is detected"
31074 82C5                        0D            .byte 0x0d,0x0a
31075 82C7                        0D            .byte 0x0d,0x0a,0x00
31076                       000082CA            cirrus_not_installed:
31077 82CA                        63            .ascii "cirrus-compatible VGA is not detected"
31078 82EF                        0D            .byte 0x0d,0x0a
31079 82F1                        0D            .byte 0x0d,0x0a,0x00
31080                       000082F4            cirrus_vesa_vendorname:
31081                       000082F4            cirrus_vesa_productname:
31082                       000082F4            cirrus_vesa_oemname:
31083 82F4                        56            .ascii "VGABIOS Cirrus extension"
31084 830C                        00            .byte 0
31085                       0000830D            cirrus_vesa_productrevision:
31086 830D                        31            .ascii "1.0"
31087 8310                        00            .byte 0
31088                       00008311            cirrus_init:
31089 8311           E8         0049              call cirrus_check
31090 8314           75           31              jnz no_cirrus
31091                                             SET_INT_VECTOR(0x10, #0xC000, #cirrus_int10_handler)
 +a   8316           1E                           push ds
 +a   8317           31C0                         xor ax, ax
 +a   8319           8ED8                         mov ds, ax
 +a   831B           B8                   836D    mov ax,  #cirrus_int10_handler
 +a   831E           A3         0040              mov 0x10*4, ax
 +a   8321           B8                   C000    mov ax,  #0xC000
 +a   8324           A3         0042              mov 0x10*4+2, ax
 +a   8327           1F                           pop ds
31092 8328           B0                     0F    mov al, #0x0f ; memory setup
31093 832A           BA                   03C4    mov dx, #0x3C4
31094 832D           EE                           out dx, al
31095 832E           42                           inc dx
31096 832F           EC                           in al, dx
31097 8330           24                     18    and al, #0x18
31098 8332           88C4                         mov ah, al
31099 8334           B0                     0A    mov al, #0x0a
31100 8336           4A                           dec dx
31101 8337           EF                           out dx, ax
31102 8338           B8                   0007    mov ax, #0x0007 ; set vga mode
31103 833B           EF                           out dx, ax
31104 833C           B8                   0431    mov ax, #0x0431 ; reset bitblt
31105 833F           BA                   03CE    mov dx, #0x3CE
31106 8342           EF                           out dx, ax
31107 8343           B8                   0031    mov ax, #0x0031
31108 8346           EF                           out dx, ax
31109                       00008347            no_cirrus:
31110 8347           C3                           ret
31111                       00008348            cirrus_display_info:
31112 8348           1E                           push ds
31113 8349           56                           push si
31114 834A           0E                           push cs
31115 834B           1F                           pop ds
31116 834C           E8         000E              call cirrus_check
31117 834F           BE                   82CA    mov si, #cirrus_not_installed
31118 8352           75           03              jnz cirrus_msgnotinstalled
31119 8354           BE                   82A4    mov si, #cirrus_installed
31120                       00008357            cirrus_msgnotinstalled:
31121 8357           E8         B2B8              call _display_string
31122 835A           5E                           pop si
31123 835B           1F                           pop ds
31124 835C           C3                           ret
31125                       0000835D            cirrus_check:
31126 835D           50                           push ax
31127 835E           52                           push dx
31128 835F           B8                   9206    mov ax, #0x9206
31129 8362           BA                   03C4    mov dx, #0x3C4
31130 8365           EF                           out dx, ax
31131 8366           42                           inc dx
31132 8367           EC                           in al, dx
31133 8368           3C                     12    cmp al, #0x12
31134 836A           5A                           pop dx
31135 836B           58                           pop ax
31136 836C           C3                           ret
31137                       0000836D            cirrus_int10_handler:
31138 836D           9C                           pushf
31139 836E           55                           push bp
31140 836F           80FC                   00    cmp ah, #0x00 ;; set video mode
31141 8372           74           15              jz cirrus_set_video_mode
31142 8374           80FC                   12    cmp ah, #0x12 ;; cirrus extension
31143 8377           74           34              jz cirrus_extbios
31144 8379           80FC                   4F    cmp ah, #0x4F ;; VESA extension
31145 837C           74           4D              jz cirrus_vesa
31146                       0000837E            cirrus_unhandled:
31147 837E           5D                           pop bp
31148 837F           9D                           popf
31149 8380           E9         7DCE              jmp vgabios_int10_handler
31150                       00008383            cirrus_return:
31151 8383           E8         0063              call cirrus_debug_dump
31152 8386           5D                           pop bp
31153 8387           9D                           popf
31154 8388           CF                           iret
31155                       00008389            cirrus_set_video_mode:
31156 8389           E8         005D              call cirrus_debug_dump
31157 838C           56                           push si
31158 838D           50                           push ax
31159 838E           53                           push bx
31160 838F           1E                           push ds
31161 8390           31F6                         xor si, si
31162 8392           8EDE                         mov ds, si
31163 8394           31DB                         xor bx, bx
31164 8396           891E       04BA              mov [0x4BA], bx
31165 839A           1F                           pop ds
31166 839B           5B                           pop bx
31167 839C           E8         04AB              call cirrus_get_modeentry
31168 839F           73           54              jnc cirrus_set_video_mode_extended
31169 83A1           B0                     FE    mov al, #0xfe
31170 83A3           E8         04A6              call cirrus_get_modeentry_nomask
31171 83A6           E8         0091              call cirrus_switch_mode
31172 83A9           58                           pop ax
31173 83AA           5E                           pop si
31174 83AB           EB           D1              jmp cirrus_unhandled
31175                       000083AD            cirrus_extbios:
31176 83AD           E8         0039              call cirrus_debug_dump
31177 83B0           80FB                   80    cmp bl, #0x80
31178 83B3           72           C9              jb cirrus_unhandled
31179 83B5           80FB                   AF    cmp bl, #0xAF
31180 83B8           77           C4              ja cirrus_unhandled
31181 83BA           53                           push bx
31182 83BB           83E3                   7F    and bx, #0x7F
31183 83BE           D1E3                         shl bx, 1
31184 83C0                        2E             db 0x2e ;; cs:
31185 83C1           8BAF       89EE              mov bp, cirrus_extbios_handlers[bx]
31186 83C5           5B                           pop bx
31187 83C6           68                   8383    push #cirrus_return
31188 83C9           55                           push bp
31189 83CA           C3                           ret
31190                       000083CB            cirrus_vesa:
31191 83CB           E8         001B              call cirrus_debug_dump
31192 83CE           3C                     10    cmp al, #0x10
31193 83D0           77           12              ja cirrus_vesa_not_handled
31194 83D2           53                           push bx
31195 83D3           31DB                         xor bx, bx
31196 83D5           88C3                         mov bl, al
31197 83D7           D1E3                         shl bx, 1
31198 83D9                        2E             db 0x2e ;; cs:
31199 83DA           8BAF       8A4E              mov bp, cirrus_vesa_handlers[bx]
31200 83DE           5B                           pop bx
31201 83DF           68                   8383    push #cirrus_return
31202 83E2           55                           push bp
31203 83E3           C3                           ret
31204                       000083E4            cirrus_vesa_not_handled:
31205 83E4           B8                   014F    mov ax, #0x014F ;; not implemented
31206 83E7           EB           9A              jmp cirrus_return
31207                       000083E9            cirrus_debug_dump:
31208 83E9           06                           push es
31209 83EA           1E                           push ds
31210 83EB           60                           pusha
31211 83EC           0E                           push cs
31212 83ED           1F                           pop ds
31213 83EE           E8         067F              call _cirrus_debugmsg
31214 83F1           61                           popa
31215 83F2           1F                           pop ds
31216 83F3           07                           pop es
31217 83F4           C3                           ret
31218                       000083F5            cirrus_set_video_mode_extended:
31219 83F5           E8         0042              call cirrus_switch_mode
31220 83F8           58                           pop ax ;; mode
31221 83F9           A8                     80    test al, #0x80
31222 83FB           75           08              jnz cirrus_set_video_mode_extended_1
31223 83FD           50                           push ax
31224 83FE           B8                   FFFF    mov ax, #0xffff ; set to 0xff to keep win 2K happy
31225 8401           E8         05B5              call cirrus_clear_vram
31226 8404           58                           pop ax
31227                       00008405            cirrus_set_video_mode_extended_1:
31228 8405           24                     7F    and al, #0x7f
31229 8407           1E                           push ds
31230 8408           31F6                         xor si, si
31231 840A           8EDE                         mov ds, si
31232 840C           A2         0449              mov [0x449], al
31233 840F           1F                           pop ds
31234 8410           B0                     20    mov al, #0x20
31235 8412           5E                           pop si
31236 8413           E9         FF6D              jmp cirrus_return
31237                       00008416            cirrus_vesa_pmbios_init:
31238 8416           CB                           retf
31239                       00008417            cirrus_vesa_pmbios_entry:
31240 8417           9C                           pushf
31241 8418           55                           push bp
31242 8419           80FC                   4F    cmp ah, #0x4F
31243 841C           75           16              jnz cirrus_vesa_pmbios_unimplemented
31244 841E           3C                     0F    cmp al, #0x0F
31245 8420           77           12              ja cirrus_vesa_pmbios_unimplemented
31246 8422           53                           push bx
31247 8423           31DB                         xor bx, bx
31248 8425           88C3                         mov bl, al
31249 8427           D1E3                         shl bx, 1
31250 8429                        2E             db 0x2e ;; cs:
31251 842A           8BAF       8A4E              mov bp, cirrus_vesa_handlers[bx]
31252 842E           5B                           pop bx
31253 842F           68                   8437    push #cirrus_vesa_pmbios_return
31254 8432           55                           push bp
31255 8433           C3                           ret
31256                       00008434            cirrus_vesa_pmbios_unimplemented:
31257 8434           B8                   014F    mov ax, #0x014F
31258                       00008437            cirrus_vesa_pmbios_return:
31259 8437           5D                           pop bp
31260 8438           9D                           popf
31261 8439           CB                           retf
31262                                           ; in si:mode table
31263                       0000843A            cirrus_switch_mode:
31264 843A           1E                           push ds
31265 843B           53                           push bx
31266 843C           52                           push dx
31267 843D           0E                           push cs
31268 843E           1F                           pop ds
31269 843F           8B5C         0A              mov bx, [si+10] ;; seq
31270 8442           BA                   03C4    mov dx, #0x3c4
31271 8445           B8                   1206    mov ax, #0x1206
31272 8448           EF                           out dx, ax ;; Unlock cirrus special
31273 8449           E8         0056              call cirrus_switch_mode_setregs
31274 844C           8B5C         0C              mov bx, [si+12] ;; graph
31275 844F           BA                   03CE    mov dx, #0x3ce
31276 8452           E8         004D              call cirrus_switch_mode_setregs
31277 8455           8B5C         0E              mov bx, [si+14] ;; crtc
31278 8458           E8         03DC              call cirrus_get_crtc
31279 845B           E8         0044              call cirrus_switch_mode_setregs
31280 845E           BA                   03C6    mov dx, #0x3c6
31281 8461           B0                     00    mov al, #0x00
31282 8463           EE                           out dx, al
31283 8464           EC                           in al, dx
31284 8465           EC                           in al, dx
31285 8466           EC                           in al, dx
31286 8467           EC                           in al, dx
31287 8468           8A44         08              mov al, [si+8] ;; hidden dac
31288 846B           EE                           out dx, al
31289 846C           B0                     FF    mov al, #0xff
31290 846E           EE                           out dx, al
31291 846F           B0                     00    mov al, #0x00
31292 8471           8A5C         11              mov bl, [si+17] ;; memory model
31293 8474           08DB                         or bl, bl
31294 8476           74           09              jz is_text_mode
31295 8478           B0                     01    mov al, #0x01
31296 847A           80FB                   03    cmp bl, #0x03
31297 847D           75           02              jnz is_text_mode
31298 847F           0C                     40    or al, #0x40
31299                       00008481            is_text_mode:
31300 8481           B3                     10    mov bl, #0x10
31301 8483           E8         DD85              call biosfn_get_single_palette_reg
31302 8486           80E7                   FE    and bh, #0xfe
31303 8489           08C7                         or bh, al
31304 848B           E8         DD08              call biosfn_set_single_palette_reg
31305 848E           5A                           pop dx
31306 848F           5B                           pop bx
31307 8490           1F                           pop ds
31308 8491           C3                           ret
31309                       00008492            cirrus_enable_16k_granularity:
31310 8492           50                           push ax
31311 8493           52                           push dx
31312 8494           BA                   03CE    mov dx, #0x3ce
31313 8497           B0                     0B    mov al, #0x0b
31314 8499           EE                           out dx, al
31315 849A           42                           inc dx
31316 849B           EC                           in al, dx
31317 849C           0C                     20    or al, #0x20 ;; enable 16k
31318 849E           EE                           out dx, al
31319 849F           5A                           pop dx
31320 84A0           58                           pop ax
31321 84A1           C3                           ret
31322                       000084A2            cirrus_switch_mode_setregs:
31323                       000084A2            csms_1:
31324 84A2           8B07                         mov ax, [bx]
31325 84A4           3D                   FFFF    cmp ax, #0xffff
31326 84A7           74           06              jz csms_2
31327 84A9           EF                           out dx, ax
31328 84AA           83C3                   02    add bx, #0x2
31329 84AD           EB           F3              jmp csms_1
31330                       000084AF            csms_2:
31331 84AF           C3                           ret
31332                       000084B0            cirrus_extbios_80h:
31333 84B0           52                           push dx
31334 84B1           E8         0383              call cirrus_get_crtc
31335 84B4           B0                     27    mov al, #0x27
31336 84B6           EE                           out dx, al
31337 84B7           42                           inc dx
31338 84B8           EC                           in al, dx
31339 84B9           BB                   825E    mov bx, #_cirrus_id_table
31340                       000084BC            c80h_1:
31341 84BC                        2E             db 0x2e ;; cs:
31342 84BD           8A27                         mov ah, [bx]
31343 84BF           38C4                         cmp ah, al
31344 84C1           74           09              jz c80h_2
31345 84C3           80FC                   FF    cmp ah, #0xff
31346 84C6           74           04              jz c80h_2
31347 84C8           43                           inc bx
31348 84C9           43                           inc bx
31349 84CA           EB           F0              jmp c80h_1
31350                       000084CC            c80h_2:
31351 84CC                        2E             db 0x2e ;; cs:
31352 84CD           8A47         01              mov al, 0x1[bx]
31353 84D0           5A                           pop dx
31354 84D1           B4                     00    mov ah, #0x00
31355 84D3           31DB                         xor bx, bx
31356 84D5           C3                           ret
31357                       000084D6            cirrus_extbios_81h:
31358 84D6           B8                   0103    mov ax, #0x103 ;; XXX
31359 84D9           C3                           ret
31360                       000084DA            cirrus_extbios_82h:
31361 84DA           52                           push dx
31362 84DB           E8         0359              call cirrus_get_crtc
31363 84DE           31C0                         xor ax, ax
31364 84E0           B0                     27    mov al, #0x27
31365 84E2           EE                           out dx, al
31366 84E3           42                           inc dx
31367 84E4           EC                           in al, dx
31368 84E5           24                     03    and al, #0x03
31369 84E7           B4                     AF    mov ah, #0xAF
31370 84E9           5A                           pop dx
31371 84EA           C3                           ret
31372                       000084EB            cirrus_extbios_85h:
31373 84EB           51                           push cx
31374 84EC           52                           push dx
31375 84ED           BA                   03C4    mov dx, #0x3C4
31376 84F0           B0                     0F    mov al, #0x0f ;; get DRAM band width
31377 84F2           EE                           out dx, al
31378 84F3           42                           inc dx
31379 84F4           EC                           in al, dx
31380                                             ;; al = 4 << bandwidth
31381 84F5           88C1                         mov cl, al
31382 84F7           C0E9                   03    shr cl, #0x03
31383 84FA           80E1                   03    and cl, #0x03
31384 84FD           80F9                   03    cmp cl, #0x03
31385 8500           74           06              je c85h2
31386 8502           B0                     04    mov al, #0x04
31387 8504           D2E0                         shl al, cl
31388 8506           EB           08              jmp c85h3
31389                       00008508            c85h2:
31390                                           ;; 4MB or 2MB
31391 8508           24                     80    and al, #0x80
31392 850A           B0                     20    mov al, #0x20 ;; 2 MB
31393 850C           74           02              je c85h3
31394 850E           B0                     40    mov al, #0x40 ;; 4 MB
31395                       00008510            c85h3:
31396 8510           5A                           pop dx
31397 8511           59                           pop cx
31398 8512           C3                           ret
31399                       00008513            cirrus_extbios_9Ah:
31400 8513           B8                   4060    mov ax, #0x4060
31401 8516           B9                   1132    mov cx, #0x1132
31402 8519           C3                           ret
31403                       0000851A            cirrus_extbios_A0h:
31404 851A           E8         032D              call cirrus_get_modeentry
31405 851D           B4                     01    mov ah, #0x01
31406 851F           80DC                   00    sbb ah, #0x00
31407 8522           8B1E       8530              mov bx, cirrus_extbios_A0h_callback
31408 8526           BE                   FFFF    mov si, #0xffff
31409 8529           89DF                         mov di, bx
31410 852B           8EDB                         mov ds, bx
31411 852D           8EC3                         mov es, bx
31412 852F           C3                           ret
31413                       00008530            cirrus_extbios_A0h_callback:
31414                                             ;; fatal: not implemented yet
31415 8530           FA                           cli
31416 8531           F4                           hlt
31417 8532           CB                           retf
31418                       00008533            cirrus_extbios_A1h:
31419 8533           BB                   0E00    mov bx, #0x0E00 ;; IBM 8512/8513, color
31420 8536           C3                           ret
31421                       00008537            cirrus_extbios_A2h:
31422 8537           B0                     07    mov al, #0x07 ;; HSync 31.5 - 64.0 kHz
31423 8539           C3                           ret
31424                       0000853A            cirrus_extbios_AEh:
31425 853A           B0                     01    mov al, #0x01 ;; High Refresh 75Hz
31426 853C           C3                           ret
31427                       0000853D            cirrus_extbios_unimplemented:
31428 853D           C3                           ret
31429                       0000853E            cirrus_vesa_00h:
31430 853E           1E                           push ds
31431 853F           56                           push si
31432 8540           89FD                         mov bp, di
31433 8542           06                           push es
31434 8543           1F                           pop ds
31435 8544           FC                           cld
31436 8545           8B05                         mov ax, [di]
31437 8547           3D                   4256    cmp ax, #0x4256 ;; VB
31438 854A           75           24              jnz cv00_1
31439 854C           8B45         02              mov ax, [di+2]
31440 854F           3D                   3245    cmp ax, #0x3245 ;; E2
31441 8552           75           1C              jnz cv00_1
31442                                             ;; VBE2
31443 8554           8D7E         14              lea di, 0x14[bp]
31444 8557           B8                   0100    mov ax, #0x0100 ;; soft ver.
31445 855A           AB                           stosw
31446 855B           B8                   82F4    mov ax, # cirrus_vesa_vendorname
31447 855E           AB                           stosw
31448 855F           8CC8                         mov ax, cs
31449 8561           AB                           stosw
31450 8562           B8                   82F4    mov ax, # cirrus_vesa_productname
31451 8565           AB                           stosw
31452 8566           8CC8                         mov ax, cs
31453 8568           AB                           stosw
31454 8569           B8                   830D    mov ax, # cirrus_vesa_productrevision
31455 856C           AB                           stosw
31456 856D           8CC8                         mov ax, cs
31457 856F           AB                           stosw
31458                       00008570            cv00_1:
31459 8570           89EF                         mov di, bp
31460 8572           B8                   4556    mov ax, #0x4556 ;; VE
31461 8575           AB                           stosw
31462 8576           B8                   4153    mov ax, #0x4153 ;; SA
31463 8579           AB                           stosw
31464 857A           B8                   0200    mov ax, #0x0200 ;; v2.00
31465 857D           AB                           stosw
31466 857E           B8                   82F4    mov ax, # cirrus_vesa_oemname
31467 8581           AB                           stosw
31468 8582           8CC8                         mov ax, cs
31469 8584           AB                           stosw
31470 8585           31C0                         xor ax, ax ;; caps
31471 8587           AB                           stosw
31472 8588           AB                           stosw
31473 8589           8D46         40              lea ax, 0x40[bp]
31474 858C           AB                           stosw
31475 858D           8CC0                         mov ax, es
31476 858F           AB                           stosw
31477 8590           E8         FF58              call cirrus_extbios_85h ;; vram in 64k
31478 8593           B4                     00    mov ah, #0x00
31479 8595           AB                           stosw
31480 8596           0E                           push cs
31481 8597           1F                           pop ds
31482 8598           8D7E         40              lea di, 0x40[bp]
31483 859B           BE                   8264    mov si, #_cirrus_vesa_modelist
31484                       0000859E            cv00_2:
31485 859E           AD                           lodsw
31486 859F           AB                           stosw
31487 85A0           83C6                   02    add si, #2
31488 85A3           3D                   FFFF    cmp ax, #0xffff
31489 85A6           75           F6              jnz cv00_2
31490 85A8           B8                   004F    mov ax, #0x004F
31491 85AB           89EF                         mov di, bp
31492 85AD           5E                           pop si
31493 85AE           1F                           pop ds
31494 85AF           C3                           ret
31495                       000085B0            cirrus_vesa_01h:
31496 85B0           89C8                         mov ax, cx
31497 85B2           25                   3FFF    and ax, #0x3fff
31498 85B5           E8         0260              call cirrus_vesamode_to_mode
31499 85B8           3D                   FFFF    cmp ax, #0xffff
31500 85BB           75           03              jnz cirrus_vesa_01h_1
31501 85BD           E9         0254              jmp cirrus_vesa_unimplemented
31502                       000085C0            cirrus_vesa_01h_1:
31503 85C0           1E                           push ds
31504 85C1           56                           push si
31505 85C2           51                           push cx
31506 85C3           52                           push dx
31507 85C4           53                           push bx
31508 85C5           89FD                         mov bp, di
31509 85C7           FC                           cld
31510 85C8           0E                           push cs
31511 85C9           1F                           pop ds
31512 85CA           E8         027F              call cirrus_get_modeentry_nomask
31513 85CD           57                           push di
31514 85CE           31C0                         xor ax, ax
31515 85D0           B9                   0080    mov cx, #0x80
31516 85D3           F3                           rep
31517 85D4           AB                             stosw ;; clear buffer
31518 85D5           5F                           pop di
31519 85D6           B8                   003B    mov ax, #0x003b ;; mode
31520 85D9           AB                           stosw
31521 85DA           B8                   0007    mov ax, #0x0007 ;; attr
31522 85DD           AB                           stosw
31523 85DE           B8                   0010    mov ax, #0x0010 ;; granularity =16K
31524 85E1           AB                           stosw
31525 85E2           B8                   0040    mov ax, #0x0040 ;; size =64K
31526 85E5           AB                           stosw
31527 85E6           B8                   A000    mov ax, #0xA000 ;; segment A
31528 85E9           AB                           stosw
31529 85EA           31C0                         xor ax, ax ;; no segment B
31530 85EC           AB                           stosw
31531 85ED           B8                   86F4    mov ax, #cirrus_vesa_05h_farentry
31532 85F0           AB                           stosw
31533 85F1           8CC8                         mov ax, cs
31534 85F3           AB                           stosw
31535 85F4           E8         0320              call cirrus_get_line_offset_entry
31536 85F7           AB                           stosw ;; bytes per scan line
31537 85F8           8B44         02              mov ax, [si+2] ;; width
31538 85FB           AB                           stosw
31539 85FC           8B44         04              mov ax, [si+4] ;; height
31540 85FF           AB                           stosw
31541 8600           B8                   0008    mov ax, #0x08
31542 8603           AA                           stosb
31543 8604           B8                   0010    mov ax, #0x10
31544 8607           AA                           stosb
31545 8608           B0                     01    mov al, #1 ;; count of planes
31546 860A           AA                           stosb
31547 860B           8A44         06              mov al, [si+6] ;; bpp
31548 860E           AA                           stosb
31549 860F           B0                     01    mov al, #0x1 ;; XXX number of banks
31550 8611           AA                           stosb
31551 8612           8A44         11              mov al, [si+17]
31552 8615           AA                           stosb ;; memory model
31553 8616           B0                     00    mov al, #0x0 ;; XXX size of bank in K
31554 8618           AA                           stosb
31555 8619           E8         02FB              call cirrus_get_line_offset_entry
31556 861C           8B5C         04              mov bx, [si+4]
31557 861F           F7E3                         mul bx ;; dx:ax=vramdisp
31558 8621           09C0                         or ax, ax
31559 8623           74           01              jz cirrus_vesa_01h_3
31560 8625           42                           inc dx
31561                       00008626            cirrus_vesa_01h_3:
31562 8626           E8         FEC2              call cirrus_extbios_85h ;; al=vram in 64k
31563 8629           B4                     00    mov ah, #0x00
31564 862B           89D1                         mov cx, dx
31565 862D           31D2                         xor dx, dx
31566 862F           F7F1                         div cx
31567 8631           48                           dec ax
31568 8632           AA                           stosb ;; number of image pages = vramtotal/vramdisp-1
31569 8633           B0                     00    mov al, #0x00
31570 8635           AA                           stosb
31571                                             ;; v1.2+ stuffs
31572 8636           56                           push si
31573 8637           83C6                   12    add si, #18
31574 863A           A5                           movsw
31575 863B           A5                           movsw
31576 863C           A5                           movsw
31577 863D           A5                           movsw
31578 863E           5E                           pop si
31579 863F           8A64         10              mov ah, [si+16]
31580 8642           B0                     00    mov al, #0x0
31581 8644           80EC                   09    sub ah, #9
31582 8647           D0D0                         rcl al, #1 ; bit 0=palette flag
31583 8649           AA                           stosb ;; direct screen mode info
31584                                             ;; v2.0+ stuffs
31585                                             ;; 32-bit LFB address
31586 864A           31C0                         xor ax, ax
31587 864C           AB                           stosw
31588 864D           E8         0217              call cirrus_get_lfb_addr
31589 8650           AB                           stosw
31590 8651           09C0                         or ax, ax
31591 8653           74           0B              jz cirrus_vesa_01h_4
31592 8655           57                           push di
31593 8656           89EF                         mov di, bp
31594 8658                        26             db 0x26 ;; es:
31595 8659           8B05                         mov ax, [di]
31596 865B           0D                   0080    or ax, #0x0080 ;; mode bit 7:LFB
31597 865E           AB                           stosw
31598 865F           5F                           pop di
31599                       00008660            cirrus_vesa_01h_4:
31600 8660           31C0                         xor ax, ax
31601 8662           AB                           stosw ; reserved
31602 8663           AB                           stosw ; reserved
31603 8664           AB                           stosw ; reserved
31604 8665           B8                   004F    mov ax, #0x004F
31605 8668           89EF                         mov di, bp
31606 866A           5B                           pop bx
31607 866B           5A                           pop dx
31608 866C           59                           pop cx
31609 866D           5E                           pop si
31610 866E           1F                           pop ds
31611 866F           F7C1                 4000    test cx, #0x4000 ;; LFB flag
31612 8673           74           0E              jz cirrus_vesa_01h_5
31613 8675           51                           push cx
31614 8676                        26             db 0x26 ;; es:
31615 8677           8B0D                         mov cx, [di]
31616 8679           81F9                 0080    cmp cx, #0x0080 ;; is LFB supported?
31617 867D           75           03              jnz cirrus_vesa_01h_6
31618 867F           B8                   014F    mov ax, #0x014F ;; error - no LFB
31619                       00008682            cirrus_vesa_01h_6:
31620 8682           59                           pop cx
31621                       00008683            cirrus_vesa_01h_5:
31622 8683           C3                           ret
31623                       00008684            cirrus_vesa_02h:
31624                                             ;; XXX support CRTC registers
31625 8684           F7C3                 3E00    test bx, #0x3e00
31626 8688           75           12              jnz cirrus_vesa_02h_2 ;; unknown flags
31627 868A           89D8                         mov ax, bx
31628 868C           25                   01FF    and ax, #0x1ff ;; bit 8-0 mode
31629 868F           3D                   0100    cmp ax, #0x100 ;; legacy VGA mode
31630 8692           72           0B              jb cirrus_vesa_02h_legacy
31631 8694           E8         0181              call cirrus_vesamode_to_mode
31632 8697           3D                   FFFF    cmp ax, #0xffff
31633 869A           75           09              jnz cirrus_vesa_02h_1
31634                       0000869C            cirrus_vesa_02h_2:
31635 869C           E9         0175              jmp cirrus_vesa_unimplemented
31636                       0000869F            cirrus_vesa_02h_legacy:
31637 869F           CD                     10    int #0x10
31638 86A1           B8                   004F    mov ax, #0x004F
31639 86A4           C3                           ret
31640                       000086A5            cirrus_vesa_02h_1:
31641 86A5           56                           push si
31642 86A6           50                           push ax
31643 86A7           E8         01A2              call cirrus_get_modeentry_nomask
31644 86AA           E8         FD8D              call cirrus_switch_mode
31645 86AD           F7C3                 4000    test bx, #0x4000 ;; LFB
31646 86B1           75           03              jnz cirrus_vesa_02h_3
31647 86B3           E8         FDDC              call cirrus_enable_16k_granularity
31648                       000086B6            cirrus_vesa_02h_3:
31649 86B6           F7C3                 8000    test bx, #0x8000 ;; no clear
31650 86BA           75           07              jnz cirrus_vesa_02h_4
31651 86BC           50                           push ax
31652 86BD           31C0                         xor ax,ax
31653 86BF           E8         02F7              call cirrus_clear_vram
31654 86C2           58                           pop ax
31655                       000086C3            cirrus_vesa_02h_4:
31656 86C3           58                           pop ax
31657 86C4           1E                           push ds
31658 86C5           31F6                         xor si, si
31659 86C7           8EDE                         mov ds, si
31660 86C9           A2         0449              mov [0x449], al
31661 86CC           891E       04BA              mov [0x4BA], bx
31662 86D0           1F                           pop ds
31663 86D1           5E                           pop si
31664 86D2           B8                   004F    mov ax, #0x004F
31665 86D5           C3                           ret
31666                       000086D6            cirrus_vesa_03h:
31667 86D6           1E                           push ds
31668 86D7           31C0                         xor ax, ax
31669 86D9           8ED8                         mov ds, ax
31670 86DB           BB                   04BA    mov bx, # 0x4BA
31671 86DE           8B07                         mov ax, [bx]
31672 86E0           89C3                         mov bx, ax
31673 86E2           85DB                         test bx, bx
31674 86E4           75           09              jnz cirrus_vesa_03h_1
31675 86E6           BB                   0449    mov bx, # 0x449
31676 86E9           8A07                         mov al, [bx]
31677 86EB           88C3                         mov bl, al
31678 86ED           30FF                         xor bh, bh
31679                       000086EF            cirrus_vesa_03h_1:
31680 86EF           B8                   004F    mov ax, #0x004f
31681 86F2           1F                           pop ds
31682 86F3           C3                           ret
31683                       000086F4            cirrus_vesa_05h_farentry:
31684 86F4           E8         0001              call cirrus_vesa_05h
31685 86F7           CB                           retf
31686                       000086F8            cirrus_vesa_05h:
31687 86F8           80FB                   01    cmp bl, #0x01
31688 86FB           77           0A              ja cirrus_vesa_05h_1
31689 86FD           80FF                   00    cmp bh, #0x00
31690 8700           74           08              jz cirrus_vesa_05h_setmempage
31691 8702           80FF                   01    cmp bh, #0x01
31692 8705           74           17              jz cirrus_vesa_05h_getmempage
31693                       00008707            cirrus_vesa_05h_1:
31694 8707           E9         010A              jmp cirrus_vesa_unimplemented
31695                       0000870A            cirrus_vesa_05h_setmempage:
31696 870A           08F6                         or dh, dh ; address must be < 0x100
31697 870C           75           F9              jnz cirrus_vesa_05h_1
31698 870E           52                           push dx
31699 870F           88D8                         mov al, bl ;; bl=bank number
31700 8711           04                     09    add al, #0x09
31701 8713           88D4                         mov ah, dl ;; dx=window address in granularity
31702 8715           BA                   03CE    mov dx, #0x3ce
31703 8718           EF                           out dx, ax
31704 8719           5A                           pop dx
31705 871A           B8                   004F    mov ax, #0x004F
31706 871D           C3                           ret
31707                       0000871E            cirrus_vesa_05h_getmempage:
31708 871E           88D8                         mov al, bl ;; bl=bank number
31709 8720           04                     09    add al, #0x09
31710 8722           BA                   03CE    mov dx, #0x3ce
31711 8725           EE                           out dx, al
31712 8726           42                           inc dx
31713 8727           EC                           in al, dx
31714 8728           31D2                         xor dx, dx
31715 872A           88C2                         mov dl, al ;; dx=window address in granularity
31716 872C           B8                   004F    mov ax, #0x004F
31717 872F           C3                           ret
31718                       00008730            cirrus_vesa_06h:
31719 8730           89C8                         mov ax, cx
31720 8732           80FB                   01    cmp bl, #0x01
31721 8735           74           19              je cirrus_vesa_06h_3
31722 8737           80FB                   02    cmp bl, #0x02
31723 873A           74           11              je cirrus_vesa_06h_2
31724 873C           72           04              jb cirrus_vesa_06h_1
31725 873E           B8                   0100    mov ax, #0x0100
31726 8741           C3                           ret
31727                       00008742            cirrus_vesa_06h_1:
31728 8742           E8         0179              call cirrus_get_bpp_bytes
31729 8745           88C3                         mov bl, al
31730 8747           30FF                         xor bh, bh
31731 8749           89C8                         mov ax, cx
31732 874B           F7E3                         mul bx
31733                       0000874D            cirrus_vesa_06h_2:
31734 874D           E8         0189              call cirrus_set_line_offset
31735                       00008750            cirrus_vesa_06h_3:
31736 8750           E8         016B              call cirrus_get_bpp_bytes
31737 8753           88C3                         mov bl, al
31738 8755           30FF                         xor bh, bh
31739 8757           31D2                         xor dx, dx
31740 8759           E8         0199              call cirrus_get_line_offset
31741 875C           50                           push ax
31742 875D           F7F3                         div bx
31743 875F           89C1                         mov cx, ax
31744 8761           5B                           pop bx
31745 8762           E8         FD86              call cirrus_extbios_85h ;; al=vram in 64k
31746 8765           31D2                         xor dx, dx
31747 8767           88C2                         mov dl, al
31748 8769           31C0                         xor ax, ax
31749 876B           F7F3                         div bx
31750 876D           89C2                         mov dx, ax
31751 876F           B8                   004F    mov ax, #0x004f
31752 8772           C3                           ret
31753                       00008773            cirrus_vesa_07h:
31754 8773           80FB                   80    cmp bl, #0x80
31755 8776           74           0B              je cirrus_vesa_07h_1
31756 8778           80FB                   01    cmp bl, #0x01
31757 877B           74           33              je cirrus_vesa_07h_2
31758 877D           72           04              jb cirrus_vesa_07h_1
31759 877F           B8                   0100    mov ax, #0x0100
31760 8782           C3                           ret
31761                       00008783            cirrus_vesa_07h_1:
31762 8783           52                           push dx
31763 8784           E8         0137              call cirrus_get_bpp_bytes
31764 8787           88C3                         mov bl, al
31765 8789           30FF                         xor bh, bh
31766 878B           89C8                         mov ax, cx
31767 878D           F7E3                         mul bx
31768 878F           5B                           pop bx
31769 8790           50                           push ax
31770 8791           E8         0161              call cirrus_get_line_offset
31771 8794           F7E3                         mul bx
31772 8796           5B                           pop bx
31773 8797           01D8                         add ax, bx
31774 8799           73           01              jnc cirrus_vesa_07h_3
31775 879B           42                           inc dx
31776                       0000879C            cirrus_vesa_07h_3:
31777 879C           52                           push dx
31778 879D           83E2                   03    and dx, #0x0003
31779 87A0           BB                   0004    mov bx, #0x04
31780 87A3           F7F3                         div bx
31781 87A5           5A                           pop dx
31782 87A6           C1EA                   02    shr dx, #2
31783 87A9           E8         0195              call cirrus_set_start_addr
31784 87AC           B8                   004F    mov ax, #0x004f
31785 87AF           C3                           ret
31786                       000087B0            cirrus_vesa_07h_2:
31787 87B0           E8         01CF              call cirrus_get_start_addr
31788 87B3           C1E2                   02    shl dx, #2
31789 87B6           52                           push dx
31790 87B7           BB                   0004    mov bx, #0x04
31791 87BA           F7E3                         mul bx
31792 87BC           5B                           pop bx
31793 87BD           09DA                         or dx, bx
31794 87BF           50                           push ax
31795 87C0           E8         0132              call cirrus_get_line_offset
31796 87C3           89C3                         mov bx, ax
31797 87C5           58                           pop ax
31798 87C6           F7F3                         div bx
31799 87C8           50                           push ax
31800 87C9           52                           push dx
31801 87CA           E8         00F1              call cirrus_get_bpp_bytes
31802 87CD           88C3                         mov bl, al
31803 87CF           30FF                         xor bh, bh
31804 87D1           58                           pop ax
31805 87D2           31D2                         xor dx, dx
31806 87D4           F7F3                         div bx
31807 87D6           89C1                         mov cx, ax
31808 87D8           5A                           pop dx
31809 87D9           B8                   004F    mov ax, #0x004f
31810 87DC           C3                           ret
31811                       000087DD            cirrus_vesa_10h: ;; Power management functions
31812                                             ;; Set up DS to read stored power info from RAM
31813 87DD           1E                           push ds
31814 87DE           31C0                         xor ax, ax
31815 87E0           8ED8                         mov ds, ax
31816                                             ;; Now choose the right function
31817 87E2           80FB                   00    cmp bl, #0x00
31818 87E5           77           08              ja cirrus_vesa_10h_01
31819                                             ;;
31820                                             ;; Function 00h: Get capabilities
31821                                             ;;
31822 87E7           BB                   0720    mov bx, #0x0720 ;; 07: standby/suspend/off, 20: VBE/PM 2.0
31823 87EA           B8                   004F    mov ax, #0x004f
31824 87ED           EB           23              jmp cirrus_vesa_10h_done
31825                       000087EF            cirrus_vesa_10h_01:
31826 87EF           80FB                   01    cmp bl, #0x01
31827 87F2           77           0C              ja cirrus_vesa_10h_02
31828                                             ;;
31829                                             ;; Function 01h: Set power state
31830                                             ;;
31831 87F4           89D8                         mov ax, bx
31832 87F6           BB                   04BC    mov bx, # 0x4BC
31833 87F9           8827                         mov [bx], ah
31834 87FB           B8                   004F    mov ax, #0x004f
31835 87FE           EB           12              jmp cirrus_vesa_10h_done
31836                       00008800            cirrus_vesa_10h_02:
31837 8800           80FB                   02    cmp bl, #0x02
31838 8803           77           0A              ja cirrus_vesa_10h_unimplemented
31839                                             ;;
31840                                             ;; Function 02h: Get power state
31841                                             ;;
31842 8805           BB                   04BC    mov bx, # 0x4BC
31843 8808           8A3F                         mov bh, [bx]
31844 880A           B8                   004F    mov ax, #0x004f
31845 880D           EB           03              jmp cirrus_vesa_10h_done
31846                       0000880F            cirrus_vesa_10h_unimplemented:
31847 880F           B8                   014F    mov ax, #0x014F ;; not implemented
31848                       00008812            cirrus_vesa_10h_done:
31849 8812           1F                           pop ds
31850 8813           C3                           ret
31851                       00008814            cirrus_vesa_unimplemented:
31852 8814           B8                   014F    mov ax, #0x014F ;; not implemented
31853 8817           C3                           ret
31854                                           ;; in ax:vesamode, out ax:cirrusmode
31855                       00008818            cirrus_vesamode_to_mode:
31856 8818           1E                           push ds
31857 8819           51                           push cx
31858 881A           56                           push si
31859 881B           0E                           push cs
31860 881C           1F                           pop ds
31861 881D           B9                   FFFF    mov cx, #0xffff
31862 8820           BE                   8264    mov si, #_cirrus_vesa_modelist
31863                       00008823            cvtm_1:
31864 8823           3904                         cmp [si],ax
31865 8825           74           09              jz cvtm_2
31866 8827           390C                         cmp [si],cx
31867 8829           74           05              jz cvtm_2
31868 882B           83C6                   04    add si, #4
31869 882E           EB           F3              jmp cvtm_1
31870                       00008830            cvtm_2:
31871 8830           8B44         02              mov ax,[si+2]
31872 8833           5E                           pop si
31873 8834           59                           pop cx
31874 8835           1F                           pop ds
31875 8836           C3                           ret
31876                                             ; cirrus_get_crtc
31877                                             ;; NOTE - may be called in protected mode
31878                       00008837            cirrus_get_crtc:
31879 8837           1E                           push ds
31880 8838           50                           push ax
31881 8839           BA                   03CC    mov dx, #0x3cc
31882 883C           EC                           in al, dx
31883 883D           24                     01    and al, #0x01
31884 883F           C0E0                   05    shl al, #5
31885 8842           BA                   03B4    mov dx, #0x3b4
31886 8845           00C2                         add dl, al
31887 8847           58                           pop ax
31888 8848           1F                           pop ds
31889 8849           C3                           ret
31890                                           ;; in - al:mode, out - cflag:result, si:table, ax:destroyed
31891                       0000884A            cirrus_get_modeentry:
31892 884A           24                     7F    and al, #0x7f
31893                       0000884C            cirrus_get_modeentry_nomask:
31894 884C           BE                   808A    mov si, #_cirrus_modes
31895                       0000884F            cgm_1:
31896 884F                        2E             db 0x2e ;; cs:
31897 8850           8A24                         mov ah, [si]
31898 8852           38E0                         cmp al, ah
31899 8854           74           0F              jz cgm_2
31900 8856           80FC                   FF    cmp ah, #0xff
31901 8859           74           05              jz cgm_4
31902 885B           83C6                   1A    add si, # 26
31903 885E           EB           EF              jmp cgm_1
31904                       00008860            cgm_4:
31905 8860           31F6                         xor si, si
31906 8862           F9                           stc ;; video mode is not supported
31907 8863           EB           01              jmp cgm_3
31908                       00008865            cgm_2:
31909 8865           F8                           clc ;; video mode is supported
31910                       00008866            cgm_3:
31911 8866           C3                           ret
31912                                             ; get LFB address
31913                                             ; out - ax:LFB address (high 16 bit)
31914                                             ;; NOTE - may be called in protected mode
31915                       00008867            cirrus_get_lfb_addr:
31916 8867           51                           push cx
31917 8868           52                           push dx
31918 8869     66    50                           push eax
31919 886B           31C9                           xor cx, cx
31920 886D           B2                     00      mov dl, #0x00
31921 886F           E8         0033                call cirrus_pci_read
31922 8872           3D                   FFFF      cmp ax, #0xffff
31923 8875           74           13                jz cirrus_get_lfb_addr_5
31924                       00008877             cirrus_get_lfb_addr_3:
31925 8877           B2                     00      mov dl, #0x00
31926 8879           E8         0029                call cirrus_pci_read
31927 887C           3D                   1013      cmp ax, #0x1013 ;; cirrus
31928 887F           74           0D                jz cirrus_get_lfb_addr_4
31929 8881           83C1                   08      add cx, #0x8
31930 8884           81F9                 0200      cmp cx, #0x200 ;; search bus #0 and #1
31931 8888           72           ED                jb cirrus_get_lfb_addr_3
31932                       0000888A             cirrus_get_lfb_addr_5:
31933 888A           31D2                           xor dx, dx ;; no LFB
31934 888C           EB           10                jmp cirrus_get_lfb_addr_6
31935                       0000888E             cirrus_get_lfb_addr_4:
31936 888E           B2                     10      mov dl, #0x10 ;; I/O space #0
31937 8890           E8         0012                call cirrus_pci_read
31938 8893           A9                   FFF1      test ax, #0xfff1
31939 8896           75           F2                jnz cirrus_get_lfb_addr_5
31940 8898     66    C1E8                   10      shr eax, #16
31941 889C           89C2                           mov dx, ax ;; LFB address
31942                       0000889E             cirrus_get_lfb_addr_6:
31943 889E     66    58                           pop eax
31944 88A0           89D0                         mov ax, dx
31945 88A2           5A                           pop dx
31946 88A3           59                           pop cx
31947 88A4           C3                           ret
31948                       000088A5            cirrus_pci_read:
31949 88A5     66    B8               00800000    mov eax, #0x00800000
31950 88AB           89C8                         mov ax, cx
31951 88AD     66    C1E0                   08    shl eax, #8
31952 88B1           88D0                         mov al, dl
31953 88B3           BA                   0CF8    mov dx, #0xcf8
31954 88B6     66    EF                           out dx, eax
31955 88B8           80C2                   04    add dl, #4
31956 88BB     66    ED                           in eax, dx
31957 88BD           C3                           ret
31958                                           ;; out - al:bytes per pixel
31959                       000088BE            cirrus_get_bpp_bytes:
31960 88BE           52                           push dx
31961 88BF           BA                   03C4    mov dx, #0x03c4
31962 88C2           B0                     07    mov al, #0x07
31963 88C4           EE                           out dx, al
31964 88C5           42                           inc dx
31965 88C6           EC                           in al, dx
31966 88C7           24                     0E    and al, #0x0e
31967 88C9           3C                     06    cmp al, #0x06
31968 88CB           75           02              jne cirrus_get_bpp_bytes_1
31969 88CD           24                     02    and al, #0x02
31970                       000088CF            cirrus_get_bpp_bytes_1:
31971 88CF           D0E8                         shr al, #1
31972 88D1           3C                     04    cmp al, #0x04
31973 88D3           74           02              je cirrus_get_bpp_bytes_2
31974 88D5           FEC0                         inc al
31975                       000088D7            cirrus_get_bpp_bytes_2:
31976 88D7           5A                           pop dx
31977 88D8           C3                           ret
31978                                           ;; in - ax: new line offset
31979                       000088D9            cirrus_set_line_offset:
31980 88D9           C1E8                   03    shr ax, #3
31981 88DC           50                           push ax
31982 88DD           E8         FF57              call cirrus_get_crtc
31983 88E0           B0                     13    mov al, #0x13
31984 88E2           EE                           out dx, al
31985 88E3           42                           inc dx
31986 88E4           58                           pop ax
31987 88E5           EE                           out dx, al
31988 88E6           4A                           dec dx
31989 88E7           B0                     1B    mov al, #0x1b
31990 88E9           EE                           out dx, al
31991 88EA           42                           inc dx
31992 88EB           C0E4                   04    shl ah, #4
31993 88EE           EC                           in al, dx
31994 88EF           24                     00>   and al, #ef
31995 88F1           08E0                         or al, ah
31996 88F3           EE                           out dx, al
31997 88F4           C3                           ret
31998                                           ;; out - ax: active line offset
31999                       000088F5            cirrus_get_line_offset:
32000 88F5           52                           push dx
32001 88F6           53                           push bx
32002 88F7           E8         FF3D              call cirrus_get_crtc
32003 88FA           B0                     13    mov al, #0x13
32004 88FC           EE                           out dx, al
32005 88FD           42                           inc dx
32006 88FE           EC                           in al, dx
32007 88FF           88C3                         mov bl, al
32008 8901           4A                           dec dx
32009 8902           B0                     1B    mov al, #0x1b
32010 8904           EE                           out dx, al
32011 8905           42                           inc dx
32012 8906           EC                           in al, dx
32013 8907           88C4                         mov ah, al
32014 8909           C0EC                   04    shr ah, #4
32015 890C           80E4                   01    and ah, #0x01
32016 890F           88D8                         mov al, bl
32017 8911           C1E0                   03    shl ax, #3
32018 8914           5B                           pop bx
32019 8915           5A                           pop dx
32020 8916           C3                           ret
32021                                           ;; in - si: table
32022                                           ;; out - ax: line offset for mode
32023                       00008917            cirrus_get_line_offset_entry:
32024 8917           53                           push bx
32025 8918           8B5C         0E              mov bx, [si+14] ;; crtc table
32026 891B           53                           push bx
32027                       0000891C            offset_loop1:
32028 891C           8B07                         mov ax, [bx]
32029 891E           3C                     13    cmp al, #0x13
32030 8920           74           04              je offset_found1
32031 8922           43                           inc bx
32032 8923           43                           inc bx
32033 8924           75           F6              jnz offset_loop1
32034                       00008926            offset_found1:
32035 8926           30C0                         xor al, al
32036 8928           C1E8                   05    shr ax, #5
32037 892B           5B                           pop bx
32038 892C           50                           push ax
32039                       0000892D            offset_loop2:
32040 892D           8B07                         mov ax, [bx]
32041 892F           3C                     1B    cmp al, #0x1b
32042 8931           74           04              je offset_found2
32043 8933           43                           inc bx
32044 8934           43                           inc bx
32045 8935           75           F6              jnz offset_loop2
32046                       00008937            offset_found2:
32047 8937           5B                           pop bx
32048 8938           25                   1000    and ax, #0x1000
32049 893B           D1E8                         shr ax, #1
32050 893D           09D8                         or ax, bx
32051 893F           5B                           pop bx
32052 8940           C3                           ret
32053                                           ;; in - new address in DX:AX
32054                       00008941            cirrus_set_start_addr:
32055 8941           53                           push bx
32056 8942           52                           push dx
32057 8943           50                           push ax
32058 8944           E8         FEF0              call cirrus_get_crtc
32059 8947           B0                     0D    mov al, #0x0d
32060 8949           EE                           out dx, al
32061 894A           42                           inc dx
32062 894B           58                           pop ax
32063 894C           EE                           out dx, al
32064 894D           4A                           dec dx
32065 894E           B0                     0C    mov al, #0x0c
32066 8950           EE                           out dx, al
32067 8951           42                           inc dx
32068 8952           88E0                         mov al, ah
32069 8954           EE                           out dx, al
32070 8955           4A                           dec dx
32071 8956           B0                     1D    mov al, #0x1d
32072 8958           EE                           out dx, al
32073 8959           42                           inc dx
32074 895A           EC                           in al, dx
32075 895B           24                     7F    and al, #0x7f
32076 895D           5B                           pop bx
32077 895E           88DC                         mov ah, bl
32078 8960           C0E3                   04    shl bl, #4
32079 8963           80E3                   80    and bl, #0x80
32080 8966           08D8                         or al, bl
32081 8968           EE                           out dx, al
32082 8969           4A                           dec dx
32083 896A           88E3                         mov bl, ah
32084 896C           80E4                   01    and ah, #0x01
32085 896F           D0E3                         shl bl, #1
32086 8971           80E3                   0C    and bl, #0x0c
32087 8974           08DC                         or ah, bl
32088 8976           B0                     1B    mov al, #0x1b
32089 8978           EE                           out dx, al
32090 8979           42                           inc dx
32091 897A           EC                           in al, dx
32092 897B           24                     F2    and al, #0xf2
32093 897D           08E0                         or al, ah
32094 897F           EE                           out dx, al
32095 8980           5B                           pop bx
32096 8981           C3                           ret
32097                                           ;; out - current address in DX:AX
32098                       00008982            cirrus_get_start_addr:
32099 8982           53                           push bx
32100 8983           E8         FEB1              call cirrus_get_crtc
32101 8986           B0                     0C    mov al, #0x0c
32102 8988           EE                           out dx, al
32103 8989           42                           inc dx
32104 898A           EC                           in al, dx
32105 898B           88C4                         mov ah, al
32106 898D           4A                           dec dx
32107 898E           B0                     0D    mov al, #0x0d
32108 8990           EE                           out dx, al
32109 8991           42                           inc dx
32110 8992           EC                           in al, dx
32111 8993           50                           push ax
32112 8994           4A                           dec dx
32113 8995           B0                     1B    mov al, #0x1b
32114 8997           EE                           out dx, al
32115 8998           42                           inc dx
32116 8999           EC                           in al, dx
32117 899A           4A                           dec dx
32118 899B           88C3                         mov bl, al
32119 899D           24                     01    and al, #0x01
32120 899F           80E3                   0C    and bl, #0x0c
32121 89A2           D0EB                         shr bl, #1
32122 89A4           08C3                         or bl, al
32123 89A6           B0                     1D    mov al, #0x1d
32124 89A8           EE                           out dx, al
32125 89A9           42                           inc dx
32126 89AA           EC                           in al, dx
32127 89AB           24                     80    and al, #0x80
32128 89AD           C0E8                   04    shr al, #4
32129 89B0           08C3                         or bl, al
32130 89B2           88DA                         mov dl, bl
32131 89B4           30F6                         xor dh, dh
32132 89B6           58                           pop ax
32133 89B7           5B                           pop bx
32134 89B8           C3                           ret
32135                       000089B9            cirrus_clear_vram:
32136 89B9           60                           pusha
32137 89BA           06                           push es
32138 89BB           89C6                         mov si, ax
32139 89BD           E8         FAD2              call cirrus_enable_16k_granularity
32140 89C0           E8         FB28              call cirrus_extbios_85h
32141 89C3           C0E0                   02    shl al, #2
32142 89C6           88C3                         mov bl, al
32143 89C8           30E4                         xor ah,ah
32144                       000089CA            cirrus_clear_vram_1:
32145 89CA           B0                     09    mov al, #0x09
32146 89CC           BA                   03CE    mov dx, #0x3ce
32147 89CF           EF                           out dx, ax
32148 89D0           50                           push ax
32149                                           ;; Windows Vista appears to be emulating this sequence as part of changing
32150                                           ;; screen resolution, but it generates 4096 writes per iteration.
32151                                           ;; Instead, use a magic register sequence to write the whole bank.
32152                                           ;;mov cx, #0xa000
32153                                           ;;mov es, cx
32154                                           ;;xor di, di
32155                                           ;;mov ax, si
32156                                           ;;mov cx, #8192
32157                                           ;;cld
32158                                           ;;rep
32159                                           ;; stosw
32160 89D1           89F0                         mov ax, si
32161 89D3           C1E0                   08    shl ax, #8
32162 89D6           B0                     FE    mov al, #0xfe
32163 89D8           EF                           out dx, ax ;; Low byte of value to be written to the bank
32164 89D9           89F0                         mov ax, si
32165 89DB           B0                     FF    mov al, #0xff
32166 89DD           EF                           out dx, ax ;; High byte and trigger the write
32167 89DE           58                           pop ax
32168 89DF           FEC4                         inc ah
32169 89E1           38DC                         cmp ah, bl
32170 89E3           75           E5              jne cirrus_clear_vram_1
32171 89E5           30E4                         xor ah,ah
32172 89E7           BA                   03CE    mov dx, #0x3ce
32173 89EA           EF                           out dx, ax
32174 89EB           07                           pop es
32175 89EC           61                           popa
32176 89ED           C3                           ret
32177                       000089EE            cirrus_extbios_handlers:
32178                                             ;; 80h
32179 89EE                      84B0              dw cirrus_extbios_80h
32180 89F0                      84D6              dw cirrus_extbios_81h
32181 89F2                      84DA              dw cirrus_extbios_82h
32182 89F4                      853D              dw cirrus_extbios_unimplemented
32183                                             ;; 84h
32184 89F6                      853D              dw cirrus_extbios_unimplemented
32185 89F8                      84EB              dw cirrus_extbios_85h
32186 89FA                      853D              dw cirrus_extbios_unimplemented
32187 89FC                      853D              dw cirrus_extbios_unimplemented
32188                                             ;; 88h
32189 89FE                      853D              dw cirrus_extbios_unimplemented
32190 8A00                      853D              dw cirrus_extbios_unimplemented
32191 8A02                      853D              dw cirrus_extbios_unimplemented
32192 8A04                      853D              dw cirrus_extbios_unimplemented
32193                                             ;; 8Ch
32194 8A06                      853D              dw cirrus_extbios_unimplemented
32195 8A08                      853D              dw cirrus_extbios_unimplemented
32196 8A0A                      853D              dw cirrus_extbios_unimplemented
32197 8A0C                      853D              dw cirrus_extbios_unimplemented
32198                                             ;; 90h
32199 8A0E                      853D              dw cirrus_extbios_unimplemented
32200 8A10                      853D              dw cirrus_extbios_unimplemented
32201 8A12                      853D              dw cirrus_extbios_unimplemented
32202 8A14                      853D              dw cirrus_extbios_unimplemented
32203                                             ;; 94h
32204 8A16                      853D              dw cirrus_extbios_unimplemented
32205 8A18                      853D              dw cirrus_extbios_unimplemented
32206 8A1A                      853D              dw cirrus_extbios_unimplemented
32207 8A1C                      853D              dw cirrus_extbios_unimplemented
32208                                             ;; 98h
32209 8A1E                      853D              dw cirrus_extbios_unimplemented
32210 8A20                      853D              dw cirrus_extbios_unimplemented
32211 8A22                      8513              dw cirrus_extbios_9Ah
32212 8A24                      853D              dw cirrus_extbios_unimplemented
32213                                             ;; 9Ch
32214 8A26                      853D              dw cirrus_extbios_unimplemented
32215 8A28                      853D              dw cirrus_extbios_unimplemented
32216 8A2A                      853D              dw cirrus_extbios_unimplemented
32217 8A2C                      853D              dw cirrus_extbios_unimplemented
32218                                             ;; A0h
32219 8A2E                      851A              dw cirrus_extbios_A0h
32220 8A30                      8533              dw cirrus_extbios_A1h
32221 8A32                      8537              dw cirrus_extbios_A2h
32222 8A34                      853D              dw cirrus_extbios_unimplemented
32223                                             ;; A4h
32224 8A36                      853D              dw cirrus_extbios_unimplemented
32225 8A38                      853D              dw cirrus_extbios_unimplemented
32226 8A3A                      853D              dw cirrus_extbios_unimplemented
32227 8A3C                      853D              dw cirrus_extbios_unimplemented
32228                                             ;; A8h
32229 8A3E                      853D              dw cirrus_extbios_unimplemented
32230 8A40                      853D              dw cirrus_extbios_unimplemented
32231 8A42                      853D              dw cirrus_extbios_unimplemented
32232 8A44                      853D              dw cirrus_extbios_unimplemented
32233                                             ;; ACh
32234 8A46                      853D              dw cirrus_extbios_unimplemented
32235 8A48                      853D              dw cirrus_extbios_unimplemented
32236 8A4A                      853A              dw cirrus_extbios_AEh
32237 8A4C                      853D              dw cirrus_extbios_unimplemented
32238                       00008A4E            cirrus_vesa_handlers:
32239                                             ;; 00h
32240 8A4E                      853E              dw cirrus_vesa_00h
32241 8A50                      85B0              dw cirrus_vesa_01h
32242 8A52                      8684              dw cirrus_vesa_02h
32243 8A54                      86D6              dw cirrus_vesa_03h
32244                                             ;; 04h
32245 8A56                      8814              dw cirrus_vesa_unimplemented
32246 8A58                      86F8              dw cirrus_vesa_05h
32247 8A5A                      8730              dw cirrus_vesa_06h
32248 8A5C                      8773              dw cirrus_vesa_07h
32249                                             ;; 08h
32250 8A5E                      8814              dw cirrus_vesa_unimplemented
32251 8A60                      8814              dw cirrus_vesa_unimplemented
32252 8A62                      8814              dw cirrus_vesa_unimplemented
32253 8A64                      8814              dw cirrus_vesa_unimplemented
32254                                             ;; 0Ch
32255 8A66                      8814              dw cirrus_vesa_unimplemented
32256 8A68                      8814              dw cirrus_vesa_unimplemented
32257 8A6A                      8814              dw cirrus_vesa_unimplemented
32258 8A6C                      8814              dw cirrus_vesa_unimplemented
32259                                             ;; 10h
32260 8A6E                      87DD              dw cirrus_vesa_10h
32261                                           ! 5652 endasm
32262                                           !BCC_ENDASM
32263                                           ! 5653 static void cirrus_debugmsg(DI, SI, BP, SP, BX, DX, CX, AX, DS, ES, FLAGS)
32264                                           ! 5654   Bit16u DI, SI, BP, SP, BX, DX, CX, AX, ES, DS, FLAGS;
32265                                           
32266                       00008A70            _cirrus_debugmsg:
32267                                           !BCC_EOS
32268                                           ! 5655 {
32269                                           ! 5656  if((( AX >> 8 )!=0x0E)&&(( AX >> 8 )!=0x02)&&(( AX >> 8 )!=0x09)&&(AX!=0x4F05))
32270 8A70           55                         push	bp
32271 8A71           89E5                       mov	bp,sp
32272                                           ! Debug: sr int = const 8 to unsigned short AX = [S+2+$10] (used reg = )
32273 8A73           8B46         12            mov	ax,$12[bp]
32274 8A76           88E0                       mov	al,ah
32275 8A78           30E4                       xor	ah,ah
32276                                           ! Debug: ne int = const $E to unsigned int = ax+0 (used reg = )
32277 8A7A           3D                   000E  cmp	ax,*$E
32278 8A7D           74           40            je  	.2A6
32279                       00008A7F            .2AA:
32280                                           ! Debug: sr int = const 8 to unsigned short AX = [S+2+$10] (used reg = )
32281 8A7F           8B46         12            mov	ax,$12[bp]
32282 8A82           88E0                       mov	al,ah
32283 8A84           30E4                       xor	ah,ah
32284                                           ! Debug: ne int = const 2 to unsigned int = ax+0 (used reg = )
32285 8A86           3D                   0002  cmp	ax,*2
32286 8A89           74           34            je  	.2A6
32287                       00008A8B            .2A9:
32288                                           ! Debug: sr int = const 8 to unsigned short AX = [S+2+$10] (used reg = )
32289 8A8B           8B46         12            mov	ax,$12[bp]
32290 8A8E           88E0                       mov	al,ah
32291 8A90           30E4                       xor	ah,ah
32292                                           ! Debug: ne int = const 9 to unsigned int = ax+0 (used reg = )
32293 8A92           3D                   0009  cmp	ax,*9
32294 8A95           74           28            je  	.2A6
32295                       00008A97            .2A8:
32296                                           ! Debug: ne int = const $4F05 to unsigned short AX = [S+2+$10] (used reg = )
32297 8A97           8B46         12            mov	ax,$12[bp]
32298 8A9A           3D                   4F05  cmp	ax,#$4F05
32299 8A9D           74           20            je  	.2A6
32300                       00008A9F            .2A7:
32301                                           ! 5657   printf("vgabios call ah%02x al%02x bx%04x cx%04x dx%04x\n",( AX >> 8 ),( AX & 0x00ff ),BX,CX,DX);
32302                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
32303 8A9F           FF76         0E            push	$E[bp]
32304                                           ! Debug: list unsigned short CX = [S+4+$E] (used reg = )
32305 8AA2           FF76         10            push	$10[bp]
32306                                           ! Debug: list unsigned short BX = [S+6+$A] (used reg = )
32307 8AA5           FF76         0C            push	$C[bp]
32308                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
32309 8AA8           8A46         12            mov	al,$12[bp]
32310                                           ! Debug: list unsigned char = al+0 (used reg = )
32311 8AAB           30E4                       xor	ah,ah
32312 8AAD           50                         push	ax
32313                                           ! Debug: sr int = const 8 to unsigned short AX = [S+$A+$10] (used reg = )
32314 8AAE           8B46         12            mov	ax,$12[bp]
32315 8AB1           88E0                       mov	al,ah
32316 8AB3           30E4                       xor	ah,ah
32317                                           ! Debug: list unsigned int = ax+0 (used reg = )
32318 8AB5           50                         push	ax
32319                                           ! Debug: list * char = .2AB+0 (used reg = )
32320 8AB6           BB                   8AD4  mov	bx,#.2AB
32321 8AB9           53                         push	bx
32322                                           ! Debug: func () void = printf+0 (used reg = )
32323 8ABA           E8         F072            call	_printf
32324 8ABD           89EC                       mov	sp,bp
32325                                           !BCC_EOS
32326                                           ! 5658 }
32327                       00008ABF            .2A6:
32328 8ABF           5D                         pop	bp
32329 8AC0           C3                         ret
32330                                           ! 5659 #asm
32331                                           !BCC_ASM
32332                       00000006            _cirrus_debugmsg.BP	set	6
32333                       0000000E            _cirrus_debugmsg.CX	set	$E
32334                       00000002            _cirrus_debugmsg.DI	set	2
32335                       00000016            _cirrus_debugmsg.FLAGS	set	$16
32336                       00000012            _cirrus_debugmsg.DS	set	$12
32337                       0000000C            _cirrus_debugmsg.DX	set	$C
32338                       00000014            _cirrus_debugmsg.ES	set	$14
32339                       00000004            _cirrus_debugmsg.SI	set	4
32340                       00000010            _cirrus_debugmsg.AX	set	$10
32341                       00000008            _cirrus_debugmsg.SP	set	8
32342                       0000000A            _cirrus_debugmsg.BX	set	$A
32343                                           ;; DATA_SEG_DEFS_HERE
32344                                           ! 5661 endasm
32345                                           !BCC_ENDASM
32346                                           ! 5662 #asm
32347                                           !BCC_ASM
32348                       00000006            _cirrus_debugmsg.BP	set	6
32349                       0000000E            _cirrus_debugmsg.CX	set	$E
32350                       00000002            _cirrus_debugmsg.DI	set	2
32351                       00000016            _cirrus_debugmsg.FLAGS	set	$16
32352                       00000012            _cirrus_debugmsg.DS	set	$12
32353                       0000000C            _cirrus_debugmsg.DX	set	$C
32354                       00000014            _cirrus_debugmsg.ES	set	$14
32355                       00000004            _cirrus_debugmsg.SI	set	4
32356                       00000010            _cirrus_debugmsg.AX	set	$10
32357                       00000008            _cirrus_debugmsg.SP	set	8
32358                       0000000A            _cirrus_debugmsg.BX	set	$A
32359 8AC1                        76            .ascii "vgabios ends here"
32360 8AD2                        00            .byte 0x00
32361                       00008AD3            vgabios_end:
32362 8AD3                        CB            .byte 0xCB
32363                                           ;; BLOCK_STRINGS_BEGIN
32364                                           ! 5668 endasm
32365                                           !BCC_ENDASM
32366                                           ! 5669 
32367                                           ! Register BX used in function cirrus_debugmsg
32368                                           
32369                       00008AD4            .2AB:
32370                       00008AD4            .2AC:
32371 8AD4                        76            .ascii	"vgabios call ah%02x al%02x bx%04x cx%04x"
32372 8AFC                        20            .ascii	" dx%04x"
32373 8B03                        0A            .byte	$A
32374 8B04                        00            .byte	0
32375 8B05                                      .bss
32376                                           
32377                                           ! 0 errors detected

Symbols:
..FFF5                      0 FFFC A   ..FFF6                      0 FFEE A   
..FFF7                      0 FFF4 A   ..FFF8                      0 FFF6 A   
..FFF9                      0 FFEE A   ..FFFA                      0 FFEE A   
..FFFB                      0 FFF2 A   ..FFFC                      0 FFF0 A   
..FFFD                      0 FFE8 A   ..FFFE                      0 FFE8 A   
..FFFF                      0 FFFE A   .1                          0 3AB8 A   
.10                         0 3670 A   .100                        0 4D5B A   
.101                        0 4CE3 A   .102                        0 4D20 A   
.103                        0 4CFA A   .104                        0 4CF3 A   
.105                        0 4D48 A   .106                        0 4D54 A   
.107                        0 4D52 A   .108                        0 4D67 A   
.109                        0 4D6A A   .10A                        0 4DFD A   
.10B                        0 4DB8 A   .10C                        0 4DA6 A   
.10D                        0 4D94 A   .10E                        0 4D8D A   
.10F                        0 4D86 A   .11                         0 369F A   
.110                        0 4F41 A   .111                        0 4E20 A   
.112                        0 4E04 A   .113                        0 4EB3 A   
.114                        0 4E29 A   .115                        0 4EB0 A   
.116                        0 4E9F A   .117                        0 4EA6 A   
.118                        0 4E33 A   .119                        0 4E77 A   
.11A                        0 4E51 A   .11B                        0 4E4A A   
.11C                        0 4E9F A   .11D                        0 4EB0 A   
.11E                        0 4F41 A   .11F                        0 4F41 A   
.12                         0 368F A   .120                        0 4F2E A   
.121                        0 4F35 A   .122                        0 4EBD A   
.123                        0 4EFA A   .124                        0 4ED4 A   
.125                        0 4ECD A   .126                        0 4F22 A   
.127                        0 4F2E A   .128                        0 4F2C A   
.129                        0 4F41 A   .12A                        0 4F93 A   
.12B                        0 4F8F A   .12C                        0 5052 A   
.12D                        0 4FF4 A   .12E                        0 5052 A   
.12F                        0 5083 A   .13                         0 36A4 A   
.131                        0 5079 A   .132                        0 5061 A   
.133                        0 5069 A   .134                        0 5071 A   
.135                        0 50F0 A   .136                        0 50E0 A   
.137                        0 50FE A   .138                        0 51B6 A   
.139                        0 51A5 A   .13A                        0 51AC A   
.13B                        0 5106 A   .13C                        0 51A5 A   
.13D                        0 5195 A   .13E                        0 519C A   
.13F                        0 5123 A   .14                         0 36BB A   
.140                        0 5185 A   .141                        0 516E A   
.142                        0 5195 A   .143                        0 51A5 A   
.144                        0 51B6 A   .145                        0 53C8 A   
.146                        0 53B8 A   .147                        0 53BF A   
.148                        0 520C A   .149                        0 5230 A   
.14A                        0 5227 A   .14B                        0 52F1 A   
.14C                        0 523E A   .14D                        0 5259 A   
.14E                        0 5247 A   .14F                        0 525E A   
.15                         0 36CF A   .150                        0 52DB A   
.151                        0 52CD A   .152                        0 52D4 A   
.153                        0 5265 A   .154                        0 52C3 A   
.155                        0 527C A   .156                        0 52A5 A   
.157                        0 5285 A   .158                        0 52C3 A   
.159                        0 52DB A   .15A                        0 53B8 A   
.15B                        0 53B8 A   .15C                        0 53AF A   
.15D                        0 52F4 A   .15E                        0 530F A   
.15F                        0 52FD A   .16                         0 36E8 A   
.160                        0 5314 A   .161                        0 5395 A   
.162                        0 5387 A   .163                        0 538E A   
.164                        0 531B A   .165                        0 537D A   
.166                        0 5332 A   .167                        0 535D A   
.168                        0 533B A   .169                        0 537D A   
.16A                        0 5395 A   .16B                        0 53B8 A   
.16C                        0 53C8 A   .16D                        0 549C A   
.16E                        0 548C A   .16F                        0 5493 A   
.17                         0 36FF A   .170                        0 5412 A   
.171                        0 548C A   .172                        0 547E A   
.173                        0 5485 A   .174                        0 5438 A   
.175                        0 545A A   .176                        0 5454 A   
.177                        0 548C A   .178                        0 549C A   
.179                        0 54D0 A   .17A                        0 54CC A   
.17B                        0 559B A   .17C                        0 5531 A   
.17D                        0 568E A   .17E                        0 568E A   
.17F                        0 5676 A   .18                         0 370D A   
.180                        0 55D0 A   .181                        0 566F A   
.183                        0 565B A   .184                        0 55E4 A   
.185                        0 55E4 A   .186                        0 560D A   
.187                        0 5636 A   .188                        0 568E A   
.189                        0 5682 A   .18A                        0 56C2 A   
.18B                        0 56BE A   .18C                        0 5791 A   
.18D                        0 5723 A   .18E                        0 578E A   
.18F                        0 5782 A   .19                         0 3748 A   
.190                        0 5759 A   .191                        0 578E A   
.192                        0 5884 A   .193                        0 5884 A   
.194                        0 586C A   .195                        0 57C6 A   
.196                        0 5865 A   .198                        0 5851 A   
.199                        0 57DA A   .19A                        0 57DA A   
.19B                        0 5803 A   .19C                        0 582C A   
.19D                        0 5884 A   .19E                        0 5878 A   
.19F                        0 5930 A   .1A                         0 3782 A   
.1A0                        0 592C A   .1A1                        0 594A A   
.1A2                        0 5946 A   .1A3                        0 5B98 A   
.1A5                        0 5B82 A   .1A6                        0 595F A   
.1A7                        0 595F A   .1A8                        0 59E0 A   
.1A9                        0 59D2 A   .1AA                        0 5A05 A   
.1AB                        0 5A37 A   .1AC                        0 5A1B A   
.1AD                        0 5A51 A   .1AE                        0 5A63 A   
.1AF                        0 5A5A A   .1B                         0 3797 A   
.1B0                        0 5ACF A   .1B1                        0 5A89 A   
.1B2                        0 5B0F A   .1B3                        0 5B23 A   
.1B4                        0 5B18 A   .1B5                        0 5B39 A   
.1B6                        0 5B4E A   .1B7                        0 5BD2 A   
.1B8                        0 5BCE A   .1B9                        0 5BEC A   
.1BA                        0 5BE8 A   .1BB                        0 5D80 A   
.1BD                        0 5D68 A   .1BE                        0 5C01 A   
.1BF                        0 5C01 A   .1C                         0 37B7 A   
.1C0                        0 5C95 A   .1C1                        0 5C87 A   
.1C2                        0 5C8E A   .1C3                        0 5C43 A   
.1C4                        0 5C87 A   .1C5                        0 5C73 A   
.1C6                        0 5C95 A   .1C7                        0 5C98 A   
.1C8                        0 5CC4 A   .1C9                        0 5CBB A   
.1CA                        0 5D0F A   .1CB                        0 5CEA A   
.1CC                        0 5D30 A   .1CD                        0 5D32 A   
.1CE                        0 5D61 A   .1CF                        0 5DC0 A   
.1D                         0 37D7 A   .1D0                        0 5DAF A   
.1D1                        0 5DEA A   .1D2                        0 5DE6 A   
.1D3                        0 6047 A   .1D5                        0 6026 A   
.1D6                        0 5E3B A   .1D7                        0 5E3E A   
.1D8                        0 5E4C A   .1D9                        0 5E45 A   
.1DA                        0 5E4F A   .1DB                        0 5E57 A   
.1DC                        0 5E61 A   .1DD                        0 5EAE A   
.1DE                        0 5EA3 A   .1DF                        0 5E61 A   
.1E                         0 37F4 A   .1E0                        0 5EAE A   
.1E1                        0 5EB1 A   .1E2                        0 5F4B A   
.1E3                        0 5EC9 A   .1E4                        0 5F48 A   
.1E5                        0 5F25 A   .1E6                        0 601D A   
.1E7                        0 601D A   .1E9                        0 6009 A   
.1EA                        0 5F92 A   .1EB                        0 5F92 A   
.1EC                        0 5FBB A   .1ED                        0 5FE4 A   
.1EE                        0 605D A   .1EF                        0 6051 A   
.1F                         0 380F A   .1F0                        0 60D7 A   
.1F1                        0 6067 A   .1F2                        0 60A7 A   
.1F3                        0 607D A   .1F4                        0 60CE A   
.1F5                        0 6484 A   .1F6                        0 6473 A   
.1F7                        0 647A A   .1F8                        0 63BC A   
.1F9                        0 642F A   .1FA                        0 6429 A   
.1FB                        0 6484 A   .1FC                        0 6565 A   
.1FD                        0 6555 A   .1FE                        0 657D A   
.1FF                        0 66C2 A   .20                         0 382C A   
.200                        0 66B3 A   .201                        0 66BA A   
.202                        0 6676 A   .203                        0 66C2 A   
.204                        0 66D7 A   .205                        0 66CC A   
.206                        0 675B A   .207                        0 674C A   
.208                        0 6753 A   .209                        0 6712 A   
.20A                        0 675B A   .20B                        0 676E A   
.20C                        0 6765 A   .20D                        0 67ED A   
.20E                        0 67DE A   .20F                        0 67E5 A   
.21                         0 383B A   .210                        0 67AA A   
.211                        0 67ED A   .212                        0 6800 A   
.213                        0 67F7 A   .214                        0 688B A   
.215                        0 687C A   .216                        0 6883 A   
.217                        0 6848 A   .218                        0 688B A   
.219                        0 689E A   .21A                        0 6895 A   
.21B                        0 6A20 A   .21D                        0 69FB A   
.21E                        0 68B8 A   .21F                        0 68EF A   
.22                         0 3976 A   .220                        0 6926 A   
.221                        0 6949 A   .222                        0 696C A   
.223                        0 698F A   .224                        0 69B1 A   
.225                        0 69D3 A   .226                        0 69F5 A   
.227                        0 6A1E A   .228                        0 6A0E A   
.229                        0 6B90 A   .22A                        0 6B7E A   
.22B                        0 6C1A A   .22C                        0 6C0E A   
.22D                        0 6BBF A   .22E                        0 6BF2 A   
.22F                        0 6BDD A   .230                        0 6C1A A   
.231                        0 6C32 A   .232                        0 6C23 A   
.233                        0 6DBD A   .234                        0 6DB4 A   
.235                        0 6DCF A   .236                        0 6DC6 A   
.237                        0 6DE1 A   .238                        0 6DD8 A   
.239                        0 7094 A   .23A                        0 6E2E A   
.23B                        0 6F19 A   .23C                        0 6F0A A   
.23D                        0 6F11 A   .23E                        0 6EDE A   
.23F                        0 6F19 A   .24                         0 3922 A   
.240                        0 6F87 A   .241                        0 6F78 A   
.242                        0 6F7F A   .243                        0 6F4C A   
.244                        0 6F87 A   .245                        0 6FDA A   
.246                        0 6FCB A   .247                        0 6FD2 A   
.248                        0 6F8E A   .249                        0 6FDA A   
.24A                        0 7025 A   .24B                        0 7016 A   
.24C                        0 701D A   .24D                        0 6FEA A   
.24E                        0 7025 A   .24F                        0 730F A   
.25                         0 3841 A   .250                        0 709F A   
.251                        0 7240 A   .252                        0 7231 A   
.253                        0 7238 A   .254                        0 7209 A   
.255                        0 7240 A   .256                        0 73CF A   
.257                        0 731A A   .258                        0 73B9 A   
.259                        0 73AA A   .25A                        0 73B1 A   
.25B                        0 738B A   .25C                        0 73B9 A   
.25D                        0 7691 A   .25E                        0 73E7 A   
.25F                        0 7456 A   .26                         0 3841 A   
.260                        0 7447 A   .261                        0 744E A   
.262                        0 741A A   .263                        0 7456 A   
.264                        0 74DB A   .265                        0 74CC A   
.266                        0 74D3 A   .267                        0 7497 A   
.268                        0 74C5 A   .269                        0 749F A   
.26A                        0 74DB A   .26B                        0 74FD A   
.26C                        0 74F5 A   .26D                        0 759E A   
.26E                        0 758F A   .26F                        0 7596 A   
.27                         0 386A A   .270                        0 755A A   
.271                        0 759E A   .272                        0 75F7 A   
.273                        0 75E8 A   .274                        0 75EF A   
.275                        0 75BB A   .276                        0 75F7 A   
.277                        0 790C A   .278                        0 769C A   
.279                        0 783D A   .27A                        0 782E A   
.27B                        0 7835 A   .27C                        0 7806 A   
.27D                        0 783D A   .27E                        0 79AD A   
.27F                        0 7917 A   .28                         0 386A A   
.280                        0 7999 A   .281                        0 798A A   
.282                        0 7991 A   .283                        0 796A A   
.284                        0 7999 A   .285                        0 79EF A   
.286                        0 79E1 A   .287                        0 79E8 A   
.288                        0 79C5 A   .289                        0 79E1 A   
.28A                        0 79D9 A   .28B                        0 79EF A   
.28C                        0 7C68 A   .28D                        0 7C52 A   
.28E                        0 7B4E A   .28F                        0 7B63 A   
.29                         0 387F A   .290                        0 7B55 A   
.291                        0 7C4B A   .292                        0 7C3B A   
.293                        0 7B6C A   .294                        0 7B9B A   
.295                        0 7B7A A   .296                        0 7B73 A   
.297                        0 7C39 A   .298                        0 7C39 A   
.299                        0 7BA4 A   .29A                        0 7BC8 A   
.29B                        0 7BC2 A   .29C                        0 7C34 A   
.29D                        0 7C25 A   .29E                        0 7C2C A   
.29F                        0 7BDB A   .2A                         0 387F A   
.2A0                        0 7C0D A   .2A1                        0 7BFA A   
.2A2                        0 7C1E A   .2A3                        0 7C34 A   
.2A4                        0 7C4B A   .2A5                        0 7C68 A   
.2A6                        0 8ABF A   .2A7                        0 8A9F A   
.2A8                        0 8A97 A   .2A9                        0 8A8B A   
.2AA                        0 8A7F A   .2AB                        0 8AD4 A   
.2AC                        0 8AD4 A   .2B                         0 3894 A   
.2C                         0 3894 A   .2D                         0 38A9 A   
.2E                         0 38B8 A   .2F                         0 38D6 A   
.3                          0 3A6B A   .30                         0 38E4 A   
.31                         0 38F2 A   .32                         0 3900 A   
.33                         0 3979 A   .34                         0 39C6 A   
.36                         0 39BA A   .37                         0 397E A   
.38                         0 3983 A   .39                         0 39A1 A   
.3A                         0 39C9 A   .3B                         0 39FD A   
.3C                         0 3A19 A   .3D                         0 3A5D A   
.3F                         0 3A51 A   .4                          0 3646 A   
.40                         0 3A1E A   .41                         0 3A2D A   
.42                         0 3A3E A   .43                         0 3AB8 A   
.44                         0 3A7E A   .45                         0 3AEA A   
.46                         0 3AE6 A   .47                         0 3CBD A   
.48                         0 3B78 A   .49                         0 3BEA A   
.4B                         0 3BDA A   .4C                         0 3BB8 A   
.4D                         0 3BC0 A   .4E                         0 3BC8 A   
.4F                         0 3BD0 A   .5                          0 36A1 A   
.50                         0 3CA7 A   .51                         0 3C96 A   
.52                         0 3C9D A   .53                         0 3BF2 A   
.54                         0 3C6F A   .55                         0 3C13 A   
.56                         0 3C96 A   .57                         0 3CA7 A   
.58                         0 3CBD A   .59                         0 3CB0 A   
.5A                         0 3D0D A   .5B                         0 3CFE A   
.5C                         0 3D05 A   .5D                         0 3CCD A   
.5E                         0 3D0D A   .5F                         0 3D92 A   
.60                         0 3D83 A   .61                         0 3D8A A   
.62                         0 3D4B A   .63                         0 3D92 A   
.64                         0 3DD9 A   .65                         0 3DCA A   
.66                         0 3DD1 A   .67                         0 3D99 A   
.68                         0 3DD9 A   .69                         0 3DF4 A   
.6A                         0 3DEF A   .6B                         0 3DF7 A   
.6C                         0 3E4E A   .6D                         0 3E3F A   
.6E                         0 3E46 A   .6F                         0 3E0E A   
.7                          0 367C A   .70                         0 3E4E A   
.71                         0 3F4E A   .72                         0 3E8D A   
.73                         0 3EC9 A   .74                         0 3EA3 A   
.75                         0 3F4E A   .76                         0 3EF4 A   
.77                         0 3ED0 A   .78                         0 3F4E A   
.79                         0 408B A   .7A                         0 407D A   
.7B                         0 40AD A   .7C                         0 409E A   
.7D                         0 40A5 A   .7E                         0 4092 A   
.7F                         0 40AD A   .8                          0 3658 A   
.80                         0 40D9 A   .81                         0 40CB A   
.82                         0 413E A   .84                         0 412F A   
.85                         0 40F1 A   .86                         0 4105 A   
.87                         0 4119 A   .88                         0 420C A   
.89                         0 41BC A   .8A                         0 41B5 A   
.8B                         0 41AE A   .8C                         0 41A6 A   
.8D                         0 41E5 A   .8E                         0 41D0 A   
.8F                         0 41F9 A   .9                          0 3664 A   
.90                         0 426E A   .91                         0 426A A   
.92                         0 4359 A   .93                         0 42A1 A   
.94                         0 4391 A   .95                         0 438D A   
.96                         0 43E3 A   .97                         0 43DF A   
.98                         0 440D A   .99                         0 4409 A   
.9A                         0 44A5 A   .9B                         0 4437 A   
.9C                         0 44C9 A   .9D                         0 45F1 A   
.9E                         0 45E2 A   .9F                         0 45E9 A   
.A                          0 3664 A   .A0                         0 45A6 A   
.A1                         0 45F1 A   .A2                         0 467C A   
.A3                         0 466D A   .A4                         0 4674 A   
.A5                         0 4643 A   .A6                         0 467C A   
.A7                         0 479C A   .A8                         0 478B A   
.A9                         0 4792 A   .AA                         0 46EA A   
.AB                         0 4749 A   .AC                         0 46F3 A   
.AD                         0 478B A   .AE                         0 479C A   
.AF                         0 4851 A   .B                          0 3664 A   
.B0                         0 4842 A   .B1                         0 4849 A   
.B2                         0 47D4 A   .B3                         0 4815 A   
.B4                         0 47DD A   .B5                         0 4842 A   
.B6                         0 4851 A   .B7                         0 4867 A   
.B8                         0 4863 A   .B9                         0 4873 A   
.BA                         0 486F A   .BB                         0 489D A   
.BC                         0 4899 A   .BD                         0 48DA A   
.BE                         0 48C9 A   .BF                         0 48EB A   
.C                          0 3664 A   .C0                         0 48E4 A   
.C1                         0 48FC A   .C2                         0 48F5 A   
.C3                         0 490B A   .C4                         0 4906 A   
.C5                         0 4B82 A   .C6                         0 4932 A   
.C7                         0 49BC A   .C8                         0 4987 A   
.C9                         0 4975 A   .CA                         0 4963 A   
.CB                         0 495C A   .CC                         0 4955 A   
.CD                         0 4B7F A   .CE                         0 4AA1 A   
.CF                         0 49C5 A   .D                          0 3664 A   
.D0                         0 4A9E A   .D1                         0 4A8B A   
.D2                         0 4A92 A   .D3                         0 49D0 A   
.D4                         0 4A30 A   .D5                         0 49EE A   
.D6                         0 49E7 A   .D7                         0 4A8B A   
.D8                         0 4A9E A   .D9                         0 4B7F A   
.DA                         0 4B7F A   .DB                         0 4B6C A   
.DC                         0 4B73 A   .DD                         0 4AAC A   
.DE                         0 4B05 A   .DF                         0 4AC3 A   
.E                          0 3664 A   .E0                         0 4ABC A   
.E1                         0 4B60 A   .E2                         0 4B6C A   
.E3                         0 4B6A A   .E4                         0 4B7F A   
.E5                         0 4F57 A   .E6                         0 4F57 A   
.E8                         0 4F45 A   .E9                         0 4BB4 A   
.EA                         0 4BB4 A   .EB                         0 4C46 A   
.EC                         0 4BF1 A   .ED                         0 4BDF A   
.EE                         0 4BCD A   .EF                         0 4BC6 A   
.F                          0 3664 A   .F0                         0 4BBD A   
.F1                         0 4D67 A   .F2                         0 4CD9 A   
.F3                         0 4C4F A   .F4                         0 4CD6 A   
.F5                         0 4CC5 A   .F6                         0 4CCC A   
.F7                         0 4C59 A   .F8                         0 4C9D A   
.F9                         0 4C77 A   .FA                         0 4C70 A   
.FB                         0 4CC5 A   .FC                         0 4CD6 A   
.FD                         0 4D67 A   .FE                         0 4D67 A   
.FF                         0 4D54 A   _biosfn_alternate_prtsc     0 6A81 A   
_biosfn_enable_video_refre+ 0 6B5C A   _biosfn_get_cursor_pos      0 435D A   
_biosfn_get_font_info       0 68A7 A   _biosfn_load_gfx_8_14_char+ 0 68A4 A   
_biosfn_load_gfx_8_16_char+ 0 68A6 A   _biosfn_load_gfx_8_8_chars  0 68A2 A   
_biosfn_load_gfx_8_8_dd_ch+ 0 68A5 A   _biosfn_load_gfx_user_char+ 0 68A3 A   
_biosfn_load_text_8_14_pat  0 66DB A   _biosfn_load_text_8_16_pat  0 6811 A   
_biosfn_load_text_8_8_pat   0 6772 A   _biosfn_load_text_user_pat  0 663F A   
_biosfn_perform_gray_scale+ 0 6398 A   _biosfn_read_char_attr      0 4F5B A   
_biosfn_read_pixel          0 5B9C A   _biosfn_read_state_info     0 6C69 A   
_biosfn_read_video_state_s+ 0 6DE8 A   _biosfn_read_video_state_s+ 0 6DA1 A   
_biosfn_restore_video_stat+ 0 73D6 A   _biosfn_save_video_state    0 6E0C A   
_biosfn_scroll              0 4855 A   _biosfn_set_active_page     0 43D2 A   
_biosfn_set_cursor_pos      0 425D A   _biosfn_set_cursor_shape    0 4142 A   
_biosfn_set_video_mode      0 3ABA A   _biosfn_switch_video_inter+ 0 6B5B A   
_biosfn_write_char_attr     0 54A0 A   _biosfn_write_char_only     0 5692 A   
_biosfn_write_pixel         0 5900 A   _biosfn_write_string        0 6B5D A   
_biosfn_write_teletype      0 5DA2 A   _ccrtc_1024x768x16          0 7F0A A E 
_ccrtc_1024x768x24          0 7F5E A E _ccrtc_1024x768x8           0 7EB6 A E 
_ccrtc_1280x1024x16         0 8006 A E _ccrtc_1280x1024x8          0 7FB2 A E 
_ccrtc_1600x1200x8          0 805A A E _ccrtc_640x480x16           0 7D12 A E 
_ccrtc_640x480x24           0 7D66 A E _ccrtc_640x480x8            0 7CBE A E 
_ccrtc_800x600x16           0 7E0E A E _ccrtc_800x600x24           0 7E62 A E 
_ccrtc_800x600x8            0 7DBA A E _ccrtc_vga                  0 7C78 A E 
_cgraph_svgacolor           0 7C80 A E _cgraph_vga                 0 7C70 A E 
_cirrus_debugmsg            0 8A70 A   _cirrus_id_table            0 825E A E 
_cirrus_modes               0 808A A E _cirrus_vesa_modelist       0 8264 A E 
_cseq_1024x768x16           0 7EE6 A E _cseq_1024x768x24           0 7F3A A E 
_cseq_1024x768x8            0 7E92 A E _cseq_1280x1024x16          0 7FE2 A E 
_cseq_1280x1024x8           0 7F8E A E _cseq_1600x1200x8           0 8036 A E 
_cseq_640x480x16            0 7CEE A E _cseq_640x480x24            0 7D42 A E 
_cseq_640x480x8             0 7C9A A E _cseq_800x600x16            0 7DEA A E 
_cseq_800x600x24            0 7E3E A E _cseq_800x600x8             0 7D96 A E 
_cseq_vga                   0 7C6C A E _dac_regs                   0 026A A   
_display_info               0 35F4 A   _display_splash_screen      0 35F3 A   
_display_string             0 3612 A   _find_vga_entry             0 79B4 A   
_get_SS                     0 7B2C A E _get_font_access            0 649F A   
_inb                        0 7AF6 A E _int10_func                 0 3639 A   
_inw                        0 7B01 A E _line_to_vpti               0 025A A   
_memcpyb                    0 7A40 A   _memcpyw                    0 7A70 A   
_memsetb                    0 79F6 A   _memsetw                    0 7A1B A   
_outb                       0 7B0C A E _outw                       0 7B1C A E 
_palette0                   0 09EE A   _palette1                   0 0AAE A   
_palette2                   0 0B6E A   _palette3                   0 0C2E A   
_printf                     0 7B2F A E _read_byte                  0 7AA0 A   
_read_word                  0 7AB3 A   _release_font_access        0 64C2 A   
_set_scan_lines             0 64F6 A   _static_functionality       0 0F2E A   
_vga_modes                  0 01DA A   _vgafont14                  0 173E A   
_vgafont14alt               0 353E A   _vgafont16                  0 253E A   
_vgafont16alt               0 353F A   _vgafont8                   0 0F3E A   
_vgamem_copy_cga            0 468E A   _vgamem_copy_pl4            0 4541 A   
_vgamem_fill_cga            0 47A0 A   _vgamem_fill_pl4            0 4603 A   
_video_param_table          0 026E A   _video_save_pointer_table   0 35D7 A   
_write_byte                 0 7AC6 A   _write_gfx_char_cga         0 51C9 A   
_write_gfx_char_lin         0 53CC A   _write_gfx_char_pl4         0 5056 A   
_write_word                 0 7ADE A   biosfn_enable_cursor_emula+ 0 6B39 A   
biosfn_enable_default_pale+ 0 6AD5 A   biosfn_enable_grayscale_su+ 0 6B15 A   
biosfn_enable_video_addres+ 0 6AF7 A   biosfn_get_all_palette_reg  0 623D A   
biosfn_get_ega_info         0 6A5E A   biosfn_get_single_palette_+ 0 620B A   
biosfn_get_video_mode       0 6108 A   biosfn_group_0B             0 5888 A   
biosfn_group_10             0 612F A   biosfn_group_1A             0 6C36 A   
biosfn_read_all_dac_reg     0 631D A   biosfn_read_display_code    0 6C3F A   
biosfn_read_overscan_borde+ 0 622F A   biosfn_read_pel_mask        0 6350 A   
biosfn_read_single_dac_reg  0 6302 A   biosfn_read_video_dac_stat+ 0 635B A   
biosfn_select_vert_res      0 6A82 A   biosfn_select_video_dac_co+ 0 62BF A   
biosfn_set_all_dac_reg      0 6297 A   biosfn_set_all_palette_reg  0 61B8 A   
biosfn_set_border_color     0 5893 A   biosfn_set_display_code     0 6C54 A   
biosfn_set_overscan_border+ 0 61B0 A   biosfn_set_palette          0 58D2 A   
biosfn_set_pel_mask         0 6345 A   biosfn_set_single_dac_reg   0 627E A   
biosfn_set_single_palette_+ 0 6196 A   biosfn_set_text_block_spec+ 0 6804 A   
biosfn_toggle_intensity     0 61E5 A   c80h_1                      0 84BC A   
c80h_2                      0 84CC A   c85h2                       0 8508 A   
c85h3                       0 8510 A   cgm_1                       0 884F A   
cgm_2                       0 8865 A   cgm_3                       0 8866 A   
cgm_4                       0 8860 A   cirrus_check                0 835D A   
cirrus_clear_vram           0 89B9 A   cirrus_clear_vram_1         0 89CA A   
cirrus_debug_dump           0 83E9 A   cirrus_display_info         0 8348 A   
cirrus_enable_16k_granular+ 0 8492 A   cirrus_extbios              0 83AD A   
cirrus_extbios_80h          0 84B0 A   cirrus_extbios_81h          0 84D6 A   
cirrus_extbios_82h          0 84DA A   cirrus_extbios_85h          0 84EB A   
cirrus_extbios_9Ah          0 8513 A   cirrus_extbios_A0h          0 851A A   
cirrus_extbios_A0h_callbac+ 0 8530 A   cirrus_extbios_A1h          0 8533 A   
cirrus_extbios_A2h          0 8537 A   cirrus_extbios_AEh          0 853A A   
cirrus_extbios_handlers     0 89EE A   cirrus_extbios_unimplement+ 0 853D A   
cirrus_get_bpp_bytes        0 88BE A   cirrus_get_bpp_bytes_1      0 88CF A   
cirrus_get_bpp_bytes_2      0 88D7 A   cirrus_get_crtc             0 8837 A   
cirrus_get_lfb_addr         0 8867 A   cirrus_get_lfb_addr_3       0 8877 A   
cirrus_get_lfb_addr_4       0 888E A   cirrus_get_lfb_addr_5       0 888A A   
cirrus_get_lfb_addr_6       0 889E A   cirrus_get_line_offset      0 88F5 A   
cirrus_get_line_offset_ent+ 0 8917 A   cirrus_get_modeentry        0 884A A   
cirrus_get_modeentry_nomas+ 0 884C A   cirrus_get_start_addr       0 8982 A   
cirrus_init                 0 8311 A   cirrus_installed            0 82A4 A   
cirrus_int10_handler        0 836D A   cirrus_msgnotinstalled      0 8357 A   
cirrus_not_installed        0 82CA A   cirrus_pci_read             0 88A5 A   
cirrus_return               0 8383 A   cirrus_set_line_offset      0 88D9 A   
cirrus_set_start_addr       0 8941 A   cirrus_set_video_mode       0 8389 A   
cirrus_set_video_mode_exte+ 0 83F5 A   cirrus_set_video_mode_exte+ 0 8405 A   
cirrus_switch_mode          0 843A A   cirrus_switch_mode_setregs  0 84A2 A   
cirrus_unhandled            0 837E A   cirrus_vesa                 0 83CB A   
cirrus_vesa_00h             0 853E A   cirrus_vesa_01h             0 85B0 A   
cirrus_vesa_01h_1           0 85C0 A   cirrus_vesa_01h_3           0 8626 A   
cirrus_vesa_01h_4           0 8660 A   cirrus_vesa_01h_5           0 8683 A   
cirrus_vesa_01h_6           0 8682 A   cirrus_vesa_02h             0 8684 A   
cirrus_vesa_02h_1           0 86A5 A   cirrus_vesa_02h_2           0 869C A   
cirrus_vesa_02h_3           0 86B6 A   cirrus_vesa_02h_4           0 86C3 A   
cirrus_vesa_02h_legacy      0 869F A   cirrus_vesa_03h             0 86D6 A   
cirrus_vesa_03h_1           0 86EF A   cirrus_vesa_05h             0 86F8 A   
cirrus_vesa_05h_1           0 8707 A   cirrus_vesa_05h_farentry    0 86F4 A   
cirrus_vesa_05h_getmempage  0 871E A   cirrus_vesa_05h_setmempage  0 870A A   
cirrus_vesa_06h             0 8730 A   cirrus_vesa_06h_1           0 8742 A   
cirrus_vesa_06h_2           0 874D A   cirrus_vesa_06h_3           0 8750 A   
cirrus_vesa_07h             0 8773 A   cirrus_vesa_07h_1           0 8783 A   
cirrus_vesa_07h_2           0 87B0 A   cirrus_vesa_07h_3           0 879C A   
cirrus_vesa_10h             0 87DD A   cirrus_vesa_10h_01          0 87EF A   
cirrus_vesa_10h_02          0 8800 A   cirrus_vesa_10h_done        0 8812 A   
cirrus_vesa_10h_unimplemen+ 0 880F A   cirrus_vesa_handlers        0 8A4E A   
cirrus_vesa_not_handled     0 83E4 A   cirrus_vesa_oemname         0 82F4 A   
cirrus_vesa_pmbios_entry    0 8417 A   cirrus_vesa_pmbios_init     0 8416 A   
cirrus_vesa_pmbios_return   0 8437 A   cirrus_vesa_pmbios_unimple+ 0 8434 A   
cirrus_vesa_productname     0 82F4 A   cirrus_vesa_productrevisio+ 0 830D A   
cirrus_vesa_unimplemented   0 8814 A   cirrus_vesa_vendorname      0 82F4 A   
cirrus_vesamode_to_mode     0 8818 A   csms_1                      0 84A2 A   
csms_2                      0 84AF A   cv00_1                      0 8570 A   
cv00_2                      0 859E A   cvtm_1                      0 8823 A   
cvtm_2                      0 8830 A   ef                          E 0000 R I 
get_dac_16_page             0 638B A   get_palette_loop            0 6245 A   
idiv_u                      0 64F1 A   init_bios_area              0 359F A   
init_vga_card               0 3540 A   int10_end                   0 01D8 A   
int10_group_10_unknown      0 6195 A   int10_normal                0 01CA A   
int10_test_0B               0 0166 A   int10_test_1001             0 6135 A   
int10_test_1002             0 613B A   int10_test_1003             0 6141 A   
int10_test_1007             0 6148 A   int10_test_1008             0 614F A   
int10_test_1009             0 6156 A   int10_test_1010             0 615D A   
int10_test_1012             0 6164 A   int10_test_1013             0 616B A   
int10_test_1015             0 6172 A   int10_test_1017             0 6179 A   
int10_test_1018             0 6180 A   int10_test_1019             0 6187 A   
int10_test_101A             0 618E A   int10_test_101B             0 01BB A   
int10_test_1103             0 0170 A   int10_test_12               0 017A A   
int10_test_1A               0 015C A   int10_test_BL30             0 0189 A   
int10_test_BL31             0 0193 A   int10_test_BL32             0 019D A   
int10_test_BL33             0 01A7 A   int10_test_BL34             0 01B1 A   
is_text_mode                0 8481 A   memcpyb_end                 0 7A68 A   
memcpyw_end                 0 7A98 A   memsetb_end                 0 7A15 A   
memsetw_end                 0 7A3A A   mode_ega_color              0 6A7E A   
msg_vga_init                0 355C A   no_actl_reg1                0 61AF A   
no_actl_reg2                0 622E A   no_cirrus                   0 8347 A   
offset_found1               0 8926 A   offset_found2               0 8937 A   
offset_loop1                0 891C A   offset_loop2                0 892D A   
read_dac_loop               0 632E A   set_actl_normal             0 62FB A   
set_cga_palette_loop        0 58DF A   set_dac_16_page             0 62F5 A   
set_dac_loop                0 62A8 A   set_dac_page                0 62E2 A   
set_intensity_loop          0 58B1 A   set_low_border              0 58AB A   
set_palette_loop            0 61C7 A   set_retcode                 0 6ACE A   
set_vert_res                0 6AC4 A   vert_res_200                0 6ABA A   
vert_res_350                0 6AB0 A   vert_res_400                0 6AA4 A   
vgabios_copyright           0 0058 A   vgabios_date                0 004A A   
vgabios_end                 0 8AD3 A   vgabios_entry_point         0 0003 A   
vgabios_init_func           0 0127 A   vgabios_int10_handler       0 0151 A   
vgabios_license             0 0084 A   vgabios_name                0 0022 A   
vgabios_pci_data            0 010F A   vgabios_start               0 0000 A   
vgabios_version             0 003E A   vgabios_website             0 00B9 A   

00000 errors
00000 warnings
